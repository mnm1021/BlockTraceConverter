cscope 15 $HOME/Desktop/fio/fio               0002396483
	@/home/ysjin/Desktop/fio/fio/arch/arch-aarch64.h

1 #i‚de‡
ARCH_AARCH64_H


2 
	#ARCH_AARCH64_H


	)

4 
	~<uni°d.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/waô.h
>

9 
	#FIO_ARCH
 (
¨ch_Ørch64
)

	)

11 
	#n›
 dÿ{ 
__asm__
 
	`__vﬁ©ûe__
 ("yõld"); } 0)

	)

12 
	#ªad_b¨rõr
(Ëdÿ{ 
	`__sync_synchr⁄ize
(); } 0)

	)

13 
	#wrôe_b¨rõr
(Ëdÿ{ 
	`__sync_synchr⁄ize
(); } 0)

	)

15 
ölöe
 
	$¨ch_ffz
(
bômask
)

17 
cou¡
, 
ªvî£d_bôs
;

18 i‡(~
bômask
 == 0)

21 
__asm__
 
	`__vﬁ©ûe__
 ("rbit %1, %2\n"

23 "Ù"(
cou¡
), "=&r"(
ªvî£d_bôs
) :

24 "r"(~
bômask
));

25  
cou¡
;

26 
	}
}

28 
	#ARCH_HAVE_FFZ


	)

30 #ifde‡
ARCH_HAVE_CRC_CRYPTO


31 
	#ARCH_HAVE_ARM64_CRC_CRYPTO


	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-alpha.h

1 #i‚de‡
ARCH_ALPHA_H


2 
	#ARCH_ALPHA_H


	)

4 
	#FIO_ARCH
 (
¨ch_Æpha
)

	)

6 
	#n›
 dÿ{ } 0)

	)

7 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("mb": : :"mem‹y")

	)

8 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("wmb": : :"mem‹y")

	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-arm.h

1 #i‚de‡
ARCH_ARM_H


2 
	#ARCH_ARM_H


	)

4 
	#FIO_ARCH
 (
¨ch_¨m
)

	)

6 #i‡
deföed
 (
__ARM_ARCH_4__
Ë|| deföed (
__ARM_ARCH_4T__
) \

7 || 
deföed
 (
__ARM_ARCH_5__
Ë|| deföed (
__ARM_ARCH_5T__
Ë|| deföed (
__ARM_ARCH_5E__
)\

8 || 
deföed
 (
__ARM_ARCH_5TE__
Ë|| deföed (
__ARM_ARCH_5TEJ__
) \

9 || 
deföed
(
__ARM_ARCH_6__
Ë|| deföed(
__ARM_ARCH_6J__
Ë|| deföed(
__ARM_ARCH_6Z__
Ë|| 
	$deföed
(
__ARM_ARCH_6ZK__
)

10 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("mov\å0,r0\t@Ç›\n\t")

	)

11 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

12 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

13 #ñi‡
	`deföed
(
__ARM_ARCH_7A__
Ë|| deföed(
__ARM_ARCH_8A__
)

14 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
 ("n›")

	)

15 
	#ªad_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

16 
	#wrôe_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-generic.h

1 #i‚de‡
ARCH_GENERIC_H


2 
	#ARCH_GENERIC_H


	)

4 
	#FIO_ARCH
 (
¨ch_gíîic
)

	)

6 
	#n›
 dÿ{ } 0)

	)

7 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

8 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-hppa.h

1 #i‚de‡
ARCH_HPPA_H


2 
	#ARCH_HPPA_H


	)

4 
	#FIO_ARCH
 (
¨ch_hµa
)

	)

6 
	#n›
 dÿ{ } 0)

	)

8 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

9 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-ia64.h

1 #i‚de‡
ARCH_IA64_H


2 
	#ARCH_IA64_H


	)

4 
	#FIO_ARCH
 (
¨ch_ü64
)

	)

6 
	#n›
 
asm
 vﬁ©ûê("höà@∑u£" ::: "mem‹y");

	)

7 
	#ªad_b¨rõr
(Ë
asm
 vﬁ©ûê("mf" ::: "mem‹y")

	)

8 
	#wrôe_b¨rõr
(Ë
asm
 vﬁ©ûê("mf" ::: "mem‹y")

	)

10 
	#ü64_p›˙t
(
x
) \

12 
ü64_öåi_ªs
; \

13 
	`asm
 ("p›˙à%0=%1" : "Ù" (
ü64_öåi_ªs
Ë: "r" (
x
)); \

14 
ü64_öåi_ªs
; \

15 })

	)

17 
ölöe
 
	$¨ch_ffz
(
bômask
)

19  
	`ü64_p›˙t
(
bômask
 & (~bitmask - 1));

20 
	}
}

22 
ölöe
 
	$gë_˝u_˛ock
()

24 
ªt
;

26 
__asm__
 
	`__vﬁ©ûe__
("mov %0˜r.ôc" : "Ù" (
ªt
) : : "memory");

27  
ªt
;

28 
	}
}

30 
	#ARCH_HAVE_INIT


	)

31 
boﬁ
 
tsc_ªlübÀ
;

32 
ölöe
 
	$¨ch_öô
(*
ívp
[])

34 
tsc_ªlübÀ
 = 
åue
;

36 
	}
}

38 
	#ARCH_HAVE_FFZ


	)

39 
	#ARCH_HAVE_CPU_CLOCK


	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-mips.h

1 #i‚de‡
ARCH_MIPS64_H


2 
	#ARCH_MIPS64_H


	)

4 
	#FIO_ARCH
 (
¨ch_mùs
)

	)

6 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

7 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

8 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-ppc.h

1 #i‚de‡
ARCH_PPC_H


2 
	#ARCH_PPC_H


	)

4 
	~<uni°d.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/waô.h
>

9 
	#FIO_ARCH
 (
¨ch_µc
)

	)

11 
	#n›
 dÿ{ } 0)

	)

13 #ifde‡
__powîpc64__


14 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("lwsync" : : : "mem‹y")

	)

16 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "mem‹y")

	)

19 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "mem‹y")

	)

21 #ifde‡
__powîpc64__


22 
	#PPC_CNTLZL
 "˙ézd"

	)

24 
	#PPC_CNTLZL
 "˙ézw"

	)

27 
ölöe
 
	$__ûog2
(
bômask
)

29 
lz
;

31 
	`asm
 (
PPC_CNTLZL
 " %0,%1" : "Ù" (
lz
Ë: "r" (
bômask
));

32  
BITS_PER_LONG
 - 1 - 
lz
;

33 
	}
}

35 
ölöe
 
	$¨ch_ffz
(
bômask
)

37 i‡((
bômask
 = ~bitmask) == 0)

38  
BITS_PER_LONG
;

39  
	`__ûog2
(
bômask
 & -bitmask);

40 
	}
}

42 
ölöe
 
	$mf•r
(
ªg
)

44 
vÆ
;

46 
asm
 vﬁ©ûe("mf•∏%0,%1": "Ù" (
vÆ
Ë: "K" (
ªg
));

47  
vÆ
;

48 
	}
}

50 
	#SPRN_TBRL
 0x10C

	)

51 
	#SPRN_TBRU
 0x10D

	)

52 
	#SPRN_ATBL
 0x20E

	)

53 
	#SPRN_ATBU
 0x20F

	)

55 #ifde‡
__powîpc64__


56 
ölöe
 
	$gë_˝u_˛ock
()

58 
rvÆ
;

60 
asm
 volatile(

64 : "Ù" (
rvÆ
)

65 : "i" (
SPRN_TBRL
)

68  
rvÆ
;

69 
	}
}

71 
ölöe
 
	$gë_˝u_˛ock
()

73 
tbl
, 
tbu0
, 
tbu1
;

74 
ªt
;

77 i‡(
¨ch_Êags
 & 
ARCH_FLAG_1
) {

78 
tbu0
 = 
	`mf•r
(
SPRN_ATBU
);

79 
tbl
 = 
	`mf•r
(
SPRN_ATBL
);

80 
tbu1
 = 
	`mf•r
(
SPRN_ATBU
);

82 
tbu0
 = 
	`mf•r
(
SPRN_TBRU
);

83 
tbl
 = 
	`mf•r
(
SPRN_TBRL
);

84 
tbu1
 = 
	`mf•r
(
SPRN_TBRU
);

86 } 
tbu0
 !
tbu1
);

88 
ªt
 = ((()
tbu0
Ë<< 32Ë| 
tbl
;

89  
ªt
;

90 
	}
}

94 
	$©b_chûd
()

96 
¨ch_Êags
 |
ARCH_FLAG_1
;

97 
	`gë_˝u_˛ock
();

98 
	`_exô
(0);

99 
	}
}

101 
	$©b_˛ockã°
()

103 
pid_t
 
pid
;

105 
pid
 = 
	`f‹k
();

106 i‡(!
pid
)

107 
	`©b_chûd
();

108 i‡(
pid
 != -1) {

109 
°©us
;

111 
pid
 = 
	`waô
(&
°©us
);

112 i‡(
pid
 =-1 || !
	`WIFEXITED
(
°©us
))

113 
¨ch_Êags
 &~
ARCH_FLAG_1
;

115 
¨ch_Êags
 |
ARCH_FLAG_1
;

117 
	}
}

120 
	#ARCH_HAVE_INIT


	)

121 
boﬁ
 
tsc_ªlübÀ
;

123 
ölöe
 
	$¨ch_öô
(*
ívp
[])

126 
tsc_ªlübÀ
 = 
åue
;

127 
	`©b_˛ockã°
();

130 
	}
}

132 
	#ARCH_HAVE_FFZ


	)

145 #ifde‡
__powîpc64__


146 
	#ARCH_HAVE_CPU_CLOCK


	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-s390.h

1 #i‚de‡
ARCH_S390_H


2 
	#ARCH_S390_H


	)

4 
	#FIO_ARCH
 (
¨ch_s390
)

	)

6 
	#n›
 
asm
 vﬁ©ûe("n›" : : : "mem‹y")

	)

7 
	#ªad_b¨rõr
(Ë
asm
 vﬁ©ûe("b¸ 15,0" : : : "mem‹y")

	)

8 
	#wrôe_b¨rõr
(Ë
asm
 vﬁ©ûe("b¸ 15,0" : : : "mem‹y")

	)

10 
ölöe
 
	$gë_˝u_˛ock
()

12 
˛k
;

14 #ifde‡
CONFIG_S390_Z196_FACILITIES


19 
__asm__
 
	`__vﬁ©ûe__
("°ck‡%0" : "=Q" (
˛k
) : : "cc");

21 
__asm__
 
	`__vﬁ©ûe__
("°ck %0" : "=Q" (
˛k
) : : "cc");

23  
˛k
>>12;

24 
	}
}

26 
	#ARCH_CPU_CLOCK_CYCLES_PER_USEC
 1

	)

27 
	#ARCH_HAVE_CPU_CLOCK


	)

28 #unde‡
ARCH_CPU_CLOCK_WRAPS


30 
	#ARCH_HAVE_INIT


	)

31 
boﬁ
 
tsc_ªlübÀ
;

32 
ölöe
 
	$¨ch_öô
(*
ívp
[])

34 
tsc_ªlübÀ
 = 
åue
;

36 
	}
}

	@/home/ysjin/Desktop/fio/fio/arch/arch-sh.h

3 #i‚de‡
ARCH_SH_H


4 
	#ARCH_SH_H


	)

6 
	#FIO_ARCH
 (
¨ch_sh
)

	)

8 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
 ("n›": : :"mem‹y")

	)

10 
	#mb
() \

12 i‡(
¨ch_Êags
 & 
ARCH_FLAG_1
) \

13 
__asm__
 
	`__vﬁ©ûe__
 ("synco": : :"memory"); \

15 
__asm__
 
	`__vﬁ©ûe__
 (" " : : : "memory"); \

16 } 0)

	)

18 
	#ªad_b¨rõr
(Ë
	`mb
()

	)

19 
	#wrôe_b¨rõr
(Ë
	`mb
()

	)

21 
	~<°dio.h
>

22 
	~<ñf.h
>

24 
¨ch_Êags
;

26 
	#CPU_HAS_LLSC
 0x0040

	)

28 
ölöe
 
	$¨ch_öô
(*
ívp
[])

30 
Elf32_auxv_t
 *
auxv
;

32 *
ívp
++ !
NULL
)

35 
auxv
 = (
Elf32_auxv_t
 *Ë
ívp
;áuxv->
a_ty≥
 !
AT_NULL
;áuxv++) {

36 i‡(
auxv
->
a_ty≥
 =
AT_HWCAP
) {

37 i‡(
auxv
->
a_un
.
a_vÆ
 & 
CPU_HAS_LLSC
) {

38 
¨ch_Êags
 |
ARCH_FLAG_1
;

45 
	}
}

47 
	#ARCH_HAVE_INIT


	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-sparc.h

1 #i‚de‡
ARCH_SPARC_H


2 
	#ARCH_SPARC_H


	)

4 
	#FIO_ARCH
 (
¨ch_•¨c
)

	)

6 
	#n›
 dÿ{ } 0)

	)

8 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

9 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-sparc64.h

1 #i‚de‡
ARCH_SPARC64_H


2 
	#ARCH_SPARC64_H


	)

4 
	#FIO_ARCH
 (
¨ch_•¨c64
)

	)

6 
	#n›
 dÿ{ } 0)

	)

8 
	#memb¨_ß„
(
ty≥
) \

9 dÿ{ 
__asm__
 
	`__vﬁ©ûe__
("ba,pt %%xcc, 1f\n\t" \

10 " memb¨ " 
ty≥
 "\n" \

13 } 0)

	)

15 
	#ªad_b¨rõr
(Ë
	`memb¨_ß„
("#LﬂdLﬂd")

	)

16 
	#wrôe_b¨rõr
(Ë
	`memb¨_ß„
("#St‹eSt‹e")

	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-x86-common.h

1 #i‚de‡
FIO_ARCH_X86_COMMON


2 
	#FIO_ARCH_X86_COMMON


	)

4 
	~<°rög.h
>

6 
ölöe
 
	$˝uid
(
›
,

7 *
óx
, *
ebx
,

8 *
ecx
, *
edx
)

10 *
óx
 = 
›
;

11 *
ecx
 = 0;

12 
	`do_˝uid
(
óx
, 
ebx
, 
ecx
, 
edx
);

13 
	}
}

15 
	#ARCH_HAVE_INIT


	)

17 
boﬁ
 
tsc_ªlübÀ
;

18 
¨ch_øndom
;

20 
ölöe
 
	$¨ch_öô_öãl
(
Àvñ
)

22 
óx
, 
ebx
, 
ecx
 = 0, 
edx
;

27 
óx
 = 1;

28 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

29 i‡(!(
edx
 & (1U << 4)))

35 
óx
 = 0x80000007;

36 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

37 
tsc_ªlübÀ
 = (
edx
 & (1U << 8)) != 0;

42 
óx
 = 0x1;

43 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

44 
¨ch_øndom
 = (
ecx
 & (1U << 30)) != 0;

45 
	}
}

47 
ölöe
 
	$¨ch_öô_amd
(
Àvñ
)

49 
óx
, 
ebx
, 
ecx
, 
edx
;

51 
	`˝uid
(0x80000000, &
óx
, &
ebx
, &
ecx
, &
edx
);

52 i‡(
óx
 < 0x80000007)

55 
	`˝uid
(0x80000007, &
óx
, &
ebx
, &
ecx
, &
edx
);

56 
tsc_ªlübÀ
 = (
edx
 & (1U << 8)) != 0;

57 
	}
}

59 
ölöe
 
	$¨ch_öô
(*
ívp
[])

61 
Àvñ
;

62 
°r
[13];

64 
¨ch_øndom
 = 
tsc_ªlübÀ
 = 0;

66 
	`˝uid
(0, &
Àvñ
, (*Ë&
°r
[0],

67 (*Ë&
°r
[8],

68 (*Ë&
°r
[4]);

70 
°r
[12] = '\0';

71 i‡(!
	`°rcmp
(
°r
, "GenuineIntel"))

72 
	`¨ch_öô_öãl
(
Àvñ
);

73 i‡(!
	`°rcmp
(
°r
, "AuthenticAMD"))

74 
	`¨ch_öô_amd
(
Àvñ
);

75 
	}
}

	@/home/ysjin/Desktop/fio/fio/arch/arch-x86.h

1 #i‚de‡
ARCH_X86_H


2 
	#ARCH_X86_H


	)

4 
ölöe
 
	$do_˝uid
(*
óx
, *
ebx
,

5 *
ecx
, *
edx
)

7 
asm
 volatile("xchgl %%ebx, %1\ncpuid\nxchgl %%ebx, %1"

8 : "˜" (*
óx
), "Ù" (*
ebx
), "=c" (*
ecx
), "=d" (*
edx
)

9 : "0" (*
óx
)

11 
	}
}

13 
	~"¨ch-x86-comm⁄.h
"

15 
	#FIO_ARCH
 (
¨ch_x86
)

	)

17 
	#FIO_HUGE_PAGE
 4194304

	)

19 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("ªp;n›": : :"mem‹y")

	)

20 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

21 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

23 
ölöe
 
	$¨ch_ffz
(
bômask
)

25 
	`__asm__
("bsÊ %1,%0" :"Ù" (
bômask
) :"r" (~bitmask));

26  
bômask
;

27 
	}
}

29 
ölöe
 
	$gë_˝u_˛ock
()

31 
ªt
;

33 
__asm__
 
	`__vﬁ©ûe__
("rdtsc" : "=A" (
ªt
));

34  
ªt
;

35 
	}
}

37 
	#ARCH_HAVE_FFZ


	)

38 
	#ARCH_HAVE_CPU_CLOCK


	)

	@/home/ysjin/Desktop/fio/fio/arch/arch-x86_64.h

1 #i‚de‡
ARCH_X86_64_H


2 
	#ARCH_X86_64_H


	)

4 
ölöe
 
	$do_˝uid
(*
óx
, *
ebx
,

5 *
ecx
, *
edx
)

7 
asm
 volatile("cpuid"

8 : "˜" (*
óx
), "=b" (*
ebx
), "=c" (*
ecx
), "=d" (*
edx
)

9 : "0" (*
óx
), "2" (*
ecx
)

11 
	}
}

13 
	~"¨ch-x86-comm⁄.h
"

15 
	#FIO_ARCH
 (
¨ch_x86_64
)

	)

17 
	#FIO_HUGE_PAGE
 2097152

	)

19 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("ªp;n›": : :"mem‹y")

	)

20 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("l„n˚":::"mem‹y")

	)

21 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("s„n˚":::"mem‹y")

	)

23 
ölöe
 
	$¨ch_ffz
(
bômask
)

25 
	`__asm__
("bs‡%1,%0" :"Ù" (
bômask
) :"r" (~bitmask));

26  
bômask
;

27 
	}
}

29 
ölöe
 
	$gë_˝u_˛ock
()

31 
lo
, 
hi
;

33 
__asm__
 
	`__vﬁ©ûe__
("rdtsc" : "˜" (
lo
), "=d" (
hi
));

34  ((Ë
hi
 << 32ULLË| 
lo
;

35 
	}
}

37 
	#ARCH_HAVE_FFZ


	)

38 
	#ARCH_HAVE_SSE4_2


	)

39 
	#ARCH_HAVE_CPU_CLOCK


	)

41 
	#RDRAND_LONG
 ".byã 0x48,0x0f,0xc7,0xf0"

	)

42 
	#RDSEED_LONG
 ".byã 0x48,0x0f,0xc7,0xf8"

	)

43 
	#RDRAND_RETRY
 100

	)

45 
ölöe
 
	$¨ch_ønd_l⁄g
(*
vÆ
)

47 
ok
;

49 
asm
 vﬁ©ûe("1: " 
RDRAND_LONG
 "\n\t"

54 : "Ù" (
ok
), "˜" (*
vÆ
)

55 : "0" (
RDRAND_RETRY
));

57  
ok
;

58 
	}
}

60 
ölöe
 
	$¨ch_ønd_£ed
(*
£ed
)

62 
ok
;

64 
asm
 vﬁ©ûe(
RDSEED_LONG
 "\n\t"

66 : "=qm" (
ok
), "˜" (*
£ed
));

69 
	}
}

	@/home/ysjin/Desktop/fio/fio/arch/arch.h

1 #i‚de‡
ARCH_H


2 
	#ARCH_H


	)

4 
	~"../lib/ty≥s.h
"

7 
	m¨ch_x86_64
 = 1,

8 
	m¨ch_x86
,

9 
	m¨ch_µc
,

10 
	m¨ch_ü64
,

11 
	m¨ch_s390
,

12 
	m¨ch_Æpha
,

13 
	m¨ch_•¨c
,

14 
	m¨ch_•¨c64
,

15 
	m¨ch_¨m
,

16 
	m¨ch_sh
,

17 
	m¨ch_hµa
,

18 
	m¨ch_mùs
,

19 
	m¨ch_Ørch64
,

21 
	m¨ch_gíîic
,

23 
	m¨ch_ƒ
,

27 
	mARCH_FLAG_1
 = 1 << 0,

28 
	mARCH_FLAG_2
 = 1 << 1,

29 
	mARCH_FLAG_3
 = 1 << 2,

30 
	mARCH_FLAG_4
 = 1 << 3,

33 
¨ch_Êags
;

35 
	#ARCH_CPU_CLOCK_WRAPS


	)

37 #i‡
deföed
(
__i386__
)

38 
	~"¨ch-x86.h
"

39 #ñi‡
deföed
(
__x86_64__
)

40 
	~"¨ch-x86_64.h
"

41 #ñi‡
deföed
(
__powîpc__
Ë|| deföed(
__powîpc64__
Ë|| deföed(
__µc__
)

42 
	~"¨ch-µc.h
"

43 #ñi‡
deföed
(
__ü64__
)

44 
	~"¨ch-ü64.h
"

45 #ñi‡
deföed
(
__Æpha__
)

46 
	~"¨ch-Æpha.h
"

47 #ñi‡
deföed
(
__s390x__
Ë|| deföed(
__s390__
)

48 
	~"¨ch-s390.h
"

49 #ñi‡
deföed
(
__•¨c__
)

50 
	~"¨ch-•¨c.h
"

51 #ñi‡
deföed
(
__•¨c64__
)

52 
	~"¨ch-•¨c64.h
"

53 #ñi‡
deföed
(
__¨m__
)

54 
	~"¨ch-¨m.h
"

55 #ñi‡
deföed
(
__mùs__
Ë|| deföed(
__mùs64__
)

56 
	~"¨ch-mùs.h
"

57 #ñi‡
deföed
(
__sh__
)

58 
	~"¨ch-sh.h
"

59 #ñi‡
deföed
(
__hµa__
)

60 
	~"¨ch-hµa.h
"

61 #ñi‡
deföed
(
__Ørch64__
)

62 
	~"¨ch-Ørch64.h
"

65 
	~"¨ch-gíîic.h
"

68 
	~"../lib/ffz.h
"

70 #i‚de‡
ARCH_HAVE_INIT


71 
ölöe
 
	$¨ch_öô
(*
ívp
[])

74 
	}
}

	@/home/ysjin/Desktop/fio/fio/backend.c

24 
	~<uni°d.h
>

25 
	~<f˙é.h
>

26 
	~<°rög.h
>

27 
	~<limôs.h
>

28 
	~<sig«l.h
>

29 
	~<time.h
>

30 
	~<loˇÀ.h
>

31 
	~<as£π.h
>

32 
	~<time.h
>

33 
	~<öây≥s.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/waô.h
>

36 
	~<sys/ùc.h
>

37 
	~<sys/mm™.h
>

38 
	~<m©h.h
>

40 
	~"fio.h
"

41 #i‚de‡
FIO_NO_HAVE_SHM_H


42 
	~<sys/shm.h
>

44 
	~"hash.h
"

45 
	~"smÆloc.h
"

46 
	~"vîify.h
"

47 
	~"åim.h
"

48 
	~"diskutû.h
"

49 
	~"cgroup.h
"

50 
	~"¥ofûe.h
"

51 
	~"lib/ønd.h
"

52 
	~"lib/memÆign.h
"

53 
	~"£rvî.h
"

54 
	~"lib/gërußge.h
"

55 
	~"idÀtime.h
"

56 
	~"îr.h
"

57 
	~"w‹kqueue.h
"

58 
	~"lib/mou¡check.h
"

59 
	~"øã-submô.h
"

60 
	~"hñ≥r_thªad.h
"

62 
fio_muãx
 *
	g°¨tup_muãx
;

63 
Êi°_hód
 *
	gcgroup_li°
;

64 *
	gcgroup_m¡
;

65 
	gexô_vÆue
;

66 vﬁ©ûê
	gfio_ab‹t
;

67 
	gƒ_¥o˚ss
 = 0;

68 
	gƒ_thªad
 = 0;

70 
io_log
 *
	gagg_io_log
[
DDIR_RWDIR_CNT
];

72 
	ggroupid
 = 0;

73 
	gthªad_numbî
 = 0;

74 
	g°©_numbî
 = 0;

75 
	gshm_id
 = 0;

76 
	gãmp_°Æl_ts
;

77 
	gd⁄e_£cs
 = 0;

79 
	#JOB_START_TIMEOUT
 (5 * 1000)

	)

81 
	$sig_öt
(
sig
)

83 i‡(
thªads
) {

84 i‡(
is_backíd
)

85 
	`fio_£rvî_gŸ_sig«l
(
sig
);

87 
	`log_öfo
("\nfio:Åîmö©ög o¿sig«»%d\n", 
sig
);

88 
	`log_öfo_Êush
();

89 
exô_vÆue
 = 128;

92 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

94 
	}
}

96 
	$sig_show_°©us
(
sig
)

98 
	`show_ru¬ög_run_°©s
();

99 
	}
}

101 
	$£t_sig_h™dÀrs
()

103 
siga˘i⁄
 
a˘
;

105 
	`mem£t
(&
a˘
, 0, (act));

106 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

107 
a˘
.
ß_Êags
 = 
SA_RESTART
;

108 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

110 
	`mem£t
(&
a˘
, 0, (act));

111 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

112 
a˘
.
ß_Êags
 = 
SA_RESTART
;

113 
	`siga˘i⁄
(
SIGTERM
, &
a˘
, 
NULL
);

116 #ifde‡
WIN32


117 
	`mem£t
(&
a˘
, 0, (act));

118 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

119 
a˘
.
ß_Êags
 = 
SA_RESTART
;

120 
	`siga˘i⁄
(
SIGBREAK
, &
a˘
, 
NULL
);

123 
	`mem£t
(&
a˘
, 0, (act));

124 
a˘
.
ß_h™dÀr
 = 
sig_show_°©us
;

125 
a˘
.
ß_Êags
 = 
SA_RESTART
;

126 
	`siga˘i⁄
(
SIGUSR1
, &
a˘
, 
NULL
);

128 i‡(
is_backíd
) {

129 
	`mem£t
(&
a˘
, 0, (act));

130 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

131 
a˘
.
ß_Êags
 = 
SA_RESTART
;

132 
	`siga˘i⁄
(
SIGPIPE
, &
a˘
, 
NULL
);

134 
	}
}

139 
boﬁ
 
	$__check_mö_øã
(
thªad_d©a
 *
td
, 
time•ec
 *
now
,

140 
fio_ddú
 
ddú
)

142 
byãs
 = 0;

143 
i›s
 = 0;

144 
•ít
;

145 
øã
;

146 
øãmö
 = 0;

147 
øã_i›s
 = 0;

148 
øã_i›s_mö
 = 0;

150 
	`as£π
(
	`ddú_rw
(
ddú
));

152 i‡(!
td
->
o
.
øãmö
[
ddú
] && !td->o.
øã_i›s_mö
[ddir])

153  
Ál£
;

158 i‡(
	`mtime_sö˚
(&
td
->
°¨t
, 
now
) < 2000)

159  
Ál£
;

161 
i›s
 +
td
->
this_io_blocks
[
ddú
];

162 
byãs
 +
td
->
this_io_byãs
[
ddú
];

163 
øãmö
 +
td
->
o
.øãmö[
ddú
];

164 
øã_i›s
 +
td
->
o
.øã_i›s[
ddú
];

165 
øã_i›s_mö
 +
td
->
o
.øã_i›s_mö[
ddú
];

170 i‡(
td
->
øã_byãs
[
ddú
] ||Åd->
øã_blocks
[ddir]) {

171 
•ít
 = 
	`mtime_sö˚
(&
td
->
œ°øã
[
ddú
], 
now
);

172 i‡(
•ít
 < 
td
->
o
.
øãcy˛e
)

173  
Ál£
;

175 i‡(
td
->
o
.
øã
[
ddú
] ||Åd->o.
øãmö
[ddir]) {

179 i‡(
byãs
 < 
td
->
øã_byãs
[
ddú
]) {

180 
	`log_îr
("%s:Ñate_min=%uB/sÇot met, onlyÅransferred %lluB\n",

181 
td
->
o
.
«me
, 
øãmö
, 
byãs
);

182  
åue
;

184 i‡(
•ít
)

185 
øã
 = ((
byãs
 - 
td
->
øã_byãs
[
ddú
]Ë* 1000Ë/ 
•ít
;

187 
øã
 = 0;

189 i‡(
øã
 < 
øãmö
 ||

190 
byãs
 < 
td
->
øã_byãs
[
ddú
]) {

191 
	`log_îr
("%s:Ñate_min=%uB/sÇot met, got %luB/s\n",

192 
td
->
o
.
«me
, 
øãmö
, 
øã
);

193  
åue
;

200 i‡(
i›s
 < 
øã_i›s
) {

201 
	`log_îr
("%s:Ñate_iops_min=%uÇot met, onlyÖerformed %lu IOs\n",

202 
td
->
o
.
«me
, 
øã_i›s
, 
i›s
);

203  
åue
;

205 i‡(
•ít
)

206 
øã
 = ((
i›s
 - 
td
->
øã_blocks
[
ddú
]Ë* 1000Ë/ 
•ít
;

208 
øã
 = 0;

210 i‡(
øã
 < 
øã_i›s_mö
 ||

211 
i›s
 < 
td
->
øã_blocks
[
ddú
]) {

212 
	`log_îr
("%s:Ñate_iops_min=%uÇot met, got %lu IOPS\n",

213 
td
->
o
.
«me
, 
øã_i›s_mö
, 
øã
);

214  
åue
;

220 
td
->
øã_byãs
[
ddú
] = 
byãs
;

221 
td
->
øã_blocks
[
ddú
] = 
i›s
;

222 
	`mem˝y
(&
td
->
œ°øã
[
ddú
], 
now
, (*now));

223  
Ál£
;

224 
	}
}

226 
boﬁ
 
	$check_mö_øã
(
thªad_d©a
 *
td
, 
time•ec
 *
now
)

228 
boﬁ
 
ªt
 = 
Ál£
;

230 i‡(
td
->
byãs_d⁄e
[
DDIR_READ
])

231 
ªt
 |
	`__check_mö_øã
(
td
, 
now
, 
DDIR_READ
);

232 i‡(
td
->
byãs_d⁄e
[
DDIR_WRITE
])

233 
ªt
 |
	`__check_mö_øã
(
td
, 
now
, 
DDIR_WRITE
);

234 i‡(
td
->
byãs_d⁄e
[
DDIR_TRIM
])

235 
ªt
 |
	`__check_mö_øã
(
td
, 
now
, 
DDIR_TRIM
);

237  
ªt
;

238 
	}
}

244 
	$˛ónup_≥ndög_aio
(
thªad_d©a
 *
td
)

246 
r
;

251 
r
 = 
	`io_u_queued_com∂ëe
(
td
, 0);

252 i‡(
r
 < 0)

258 i‡(
td
->
io_›s
->
ˇn˚l
) {

259 
io_u
 *io_u;

260 
i
;

262 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

263 i‡(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
) {

264 
r
 = 
td
->
io_›s
->
	`ˇn˚l
—d, 
io_u
);

265 i‡(!
r
)

266 
	`put_io_u
(
td
, 
io_u
);

271 i‡(
td
->
cur_dïth
)

272 
r
 = 
	`io_u_queued_com∂ëe
(
td
,Åd->
cur_dïth
);

273 
	}
}

279 
boﬁ
 
	$fio_io_sync
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

281 
io_u
 *io_u = 
	`__gë_io_u
(
td
);

282 
ªt
;

284 i‡(!
io_u
)

285  
åue
;

287 
io_u
->
ddú
 = 
DDIR_SYNC
;

288 
io_u
->
fûe
 = 
f
;

290 i‡(
	`td_io_¥ï
(
td
, 
io_u
)) {

291 
	`put_io_u
(
td
, 
io_u
);

292  
åue
;

295 
ªqueue
:

296 
ªt
 = 
	`td_io_queue
(
td
, 
io_u
);

297 i‡(
ªt
 < 0) {

298 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "td_io_queue");

299 
	`put_io_u
(
td
, 
io_u
);

300  
åue
;

301 } i‡(
ªt
 =
FIO_Q_QUEUED
) {

302 i‡(
	`td_io_commô
(
td
))

303  
åue
;

304 i‡(
	`io_u_queued_com∂ëe
(
td
, 1) < 0)

305  
åue
;

306 } i‡(
ªt
 =
FIO_Q_COMPLETED
) {

307 i‡(
io_u
->
îr‹
) {

308 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "td_io_queue");

309  
åue
;

312 i‡(
	`io_u_sync_com∂ëe
(
td
, 
io_u
) < 0)

313  
åue
;

314 } i‡(
ªt
 =
FIO_Q_BUSY
) {

315 i‡(
	`td_io_commô
(
td
))

316  
åue
;

317 
ªqueue
;

320  
Ál£
;

321 
	}
}

323 
	$fio_fûe_fsync
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

325 
ªt
;

327 i‡(
	`fio_fûe_›í
(
f
))

328  
	`fio_io_sync
(
td
, 
f
);

330 i‡(
	`td_io_›í_fûe
(
td
, 
f
))

333 
ªt
 = 
	`fio_io_sync
(
td
, 
f
);

334 
	`td_io_˛o£_fûe
(
td
, 
f
);

335  
ªt
;

336 
	}
}

338 
ölöe
 
	$__upd©e_ts_ˇche
(
thªad_d©a
 *
td
)

340 
	`fio_gëtime
(&
td
->
ts_ˇche
, 
NULL
);

341 
	}
}

343 
ölöe
 
	$upd©e_ts_ˇche
(
thªad_d©a
 *
td
)

345 i‡((++
td
->
ts_ˇche_ƒ
 &Åd->
ts_ˇche_mask
) ==Åd->ts_cache_mask)

346 
	`__upd©e_ts_ˇche
(
td
);

347 
	}
}

349 
ölöe
 
boﬁ
 
	$ru¡ime_ex˚eded
(
thªad_d©a
 *
td
, 
time•ec
 *
t
)

351 i‡(
	`ö_ømp_time
(
td
))

352  
Ál£
;

353 i‡(!
td
->
o
.
timeout
)

354  
Ál£
;

355 i‡(
	`utime_sö˚
(&
td
->
ïoch
, 
t
Ë>td->
o
.
timeout
)

356  
åue
;

358  
Ál£
;

359 
	}
}

366 
ölöe
 
	$upd©e_ru¡ime
(
thªad_d©a
 *
td
,

367 *
ñ≠£d_us
,

368 c⁄° 
fio_ddú
 
ddú
)

370 i‡(
ddú
 =
DDIR_WRITE
 && 
	`td_wrôe
(
td
Ë&&Åd->
o
.
vîify_⁄ly
)

373 
td
->
ts
.
ru¡ime
[
ddú
] -(
ñ≠£d_us
[ddir] + 999) / 1000;

374 
ñ≠£d_us
[
ddú
] +
	`utime_sö˚_now
(&
td
->
°¨t
);

375 
td
->
ts
.
ru¡ime
[
ddú
] +(
ñ≠£d_us
[ddir] + 999) / 1000;

376 
	}
}

378 
boﬁ
 
	$bªak_⁄_this_îr‹
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

379 *
ªçå
)

381 
ªt
 = *
ªçå
;

383 i‡(
ªt
 < 0 || 
td
->
îr‹
) {

384 
îr
 = 
td
->
îr‹
;

385 
îr‹_ty≥_bô
 
eb
;

387 i‡(
ªt
 < 0)

388 
îr
 = -
ªt
;

390 
eb
 = 
	`td_îr‹_ty≥
(
ddú
, 
îr
);

391 i‡(!(
td
->
o
.
c⁄töue_⁄_îr‹
 & (1 << 
eb
)))

392  
åue
;

394 i‡(
	`td_n⁄_Áèl_îr‹
(
td
, 
eb
, 
îr
)) {

399 
	`upd©e_îr‹_cou¡
(
td
, 
îr
);

400 
	`td_˛ór_îr‹
(
td
);

401 *
ªçå
 = 0;

402  
Ál£
;

403 } i‡(
td
->
o
.
fûl_devi˚
 && 
îr
 =
ENOSPC
) {

408 
	`td_˛ór_îr‹
(
td
);

409 
	`fio_m¨k_td_ãrmö©e
(
td
);

410  
åue
;

416 
	`upd©e_îr‹_cou¡
(
td
, 
îr
);

417  
åue
;

421  
Ál£
;

422 
	}
}

424 
	$check_upd©e_rußge
(
thªad_d©a
 *
td
)

426 i‡(
td
->
upd©e_rußge
) {

427 
td
->
upd©e_rußge
 = 0;

428 
	`upd©e_rußge_°©
(
td
);

429 
	`fio_muãx_up
(
td
->
rußge_£m
);

431 
	}
}

433 
	$waô_f‹_com∂ëi⁄s
(
thªad_d©a
 *
td
, 
time•ec
 *
time
)

435 c⁄° 
fuŒ
 = 
	`queue_fuŒ
(
td
);

436 
mö_evts
 = 0;

437 
ªt
;

439 i‡(
td
->
Êags
 & 
TD_F_REGROW_LOGS
)

440  
	`io_u_quõs˚
(
td
);

445 
mö_evts
 = 
	`mö
(
td
->
o
.
iodïth_b©ch_com∂ëe_mö
,Åd->
cur_dïth
);

446 i‡((
fuŒ
 && !
mö_evts
Ë|| !
td
->
o
.
iodïth_b©ch_com∂ëe_mö
)

447 
mö_evts
 = 1;

449 i‡(
time
 && (
	`__should_check_øã
(
td
, 
DDIR_READ
) ||

450 
	`__should_check_øã
(
td
, 
DDIR_WRITE
) ||

451 
	`__should_check_øã
(
td
, 
DDIR_TRIM
)))

452 
	`fio_gëtime
(
time
, 
NULL
);

455 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
mö_evts
);

456 i‡(
ªt
 < 0)

458 } 
fuŒ
 && (
td
->
cur_dïth
 >Åd->
o
.
iodïth_low
));

460  
ªt
;

461 
	}
}

463 
	$io_queue_evít
(
thªad_d©a
 *
td
, 
io_u
 *io_u, *
ªt
,

464 
fio_ddú
 
ddú
, 
uöt64_t
 *
byãs_issued
, 
‰om_vîify
,

465 
time•ec
 *
comp_time
)

467 
ªt2
;

469 *
ªt
) {

470 
FIO_Q_COMPLETED
:

471 i‡(
io_u
->
îr‹
) {

472 *
ªt
 = -
io_u
->
îr‹
;

473 
	`˛ór_io_u
(
td
, 
io_u
);

474 } i‡(
io_u
->
ªsid
) {

475 
byãs
 = 
io_u
->
x„r_buÊí
 - io_u->
ªsid
;

476 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

478 i‡(
byãs_issued
)

479 *
byãs_issued
 +
byãs
;

481 i‡(!
‰om_vîify
)

482 
	`åim_io_põ˚
(
td
, 
io_u
);

487 i‡(!
byãs
) {

488 i‡(!
‰om_vîify
)

489 
	`u∆og_io_põ˚
(
td
, 
io_u
);

490 
	`td_vîr‹
(
td
, 
EIO
, "fullÑesid");

491 
	`put_io_u
(
td
, 
io_u
);

495 
io_u
->
x„r_buÊí
 = io_u->
ªsid
;

496 
io_u
->
x„r_buf
 +
byãs
;

497 
io_u
->
off£t
 +
byãs
;

499 i‡(
	`ddú_rw
(
io_u
->
ddú
))

500 
td
->
ts
.
sh‹t_io_u
[
io_u
->
ddú
]++;

502 i‡(
io_u
->
off£t
 =
f
->
ªÆ_fûe_size
)

503 
sync_d⁄e
;

505 
	`ªqueue_io_u
(
td
, &
io_u
);

507 
sync_d⁄e
:

508 i‡(
comp_time
 && (
	`__should_check_øã
(
td
, 
DDIR_READ
) ||

509 
	`__should_check_øã
(
td
, 
DDIR_WRITE
) ||

510 
	`__should_check_øã
(
td
, 
DDIR_TRIM
)))

511 
	`fio_gëtime
(
comp_time
, 
NULL
);

513 *
ªt
 = 
	`io_u_sync_com∂ëe
(
td
, 
io_u
);

514 i‡(*
ªt
 < 0)

518 i‡(
td
->
Êags
 & 
TD_F_REGROW_LOGS
)

519 
	`ªgrow_logs
(
td
);

525 i‡(!
‰om_vîify
)

529 
FIO_Q_QUEUED
:

535 i‡(
td
->
io_›s
->
commô
 =
NULL
)

536 
	`io_u_queued
(
td
, 
io_u
);

537 i‡(
byãs_issued
)

538 *
byãs_issued
 +
io_u
->
x„r_buÊí
;

540 
FIO_Q_BUSY
:

541 i‡(!
‰om_vîify
)

542 
	`u∆og_io_põ˚
(
td
, 
io_u
);

543 
	`ªqueue_io_u
(
td
, &
io_u
);

544 
ªt2
 = 
	`td_io_commô
(
td
);

545 i‡(
ªt2
 < 0)

546 *
ªt
 = 
ªt2
;

549 
	`as£π
(*
ªt
 < 0);

550 
	`td_vîr‹
(
td
, -(*
ªt
), "td_io_queue");

554 i‡(
	`bªak_⁄_this_îr‹
(
td
, 
ddú
, 
ªt
))

558 
	}
}

560 
ölöe
 
boﬁ
 
	$io_ö_pﬁlög
(
thªad_d©a
 *
td
)

562  !
td
->
o
.
iodïth_b©ch_com∂ëe_mö
 &&

563 !
td
->
o
.
iodïth_b©ch_com∂ëe_max
;

564 
	}
}

568 
	$u∆ök_Æl_fûes
(
thªad_d©a
 *
td
)

570 
fio_fûe
 *
f
;

571 
i
;

572 
ªt
 = 0;

574 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

575 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
)

577 
ªt
 = 
	`td_io_u∆ök_fûe
(
td
, 
f
);

578 i‡(
ªt
)

582 i‡(
ªt
)

583 
	`td_vîr‹
(
td
, 
ªt
, "unlink_all_files");

585  
ªt
;

586 
	}
}

591 
boﬁ
 
	$ö_Êight_ovîœp
(
io_u_queue
 *
q
, 
io_u
 *io_u)

593 
boﬁ
 
ovîœp
;

594 
io_u
 *
check_io_u
;

595 
x1
, 
x2
, 
y1
, 
y2
;

596 
i
;

598 
x1
 = 
io_u
->
off£t
;

599 
x2
 = 
io_u
->
off£t
 + io_u->
buÊí
;

600 
ovîœp
 = 
Ál£
;

601 
	`io_u_qôî
(
q
, 
check_io_u
, 
i
) {

602 i‡(
check_io_u
->
Êags
 & 
IO_U_F_FLIGHT
) {

603 
y1
 = 
check_io_u
->
off£t
;

604 
y2
 = 
check_io_u
->
off£t
 + check_io_u->
buÊí
;

606 i‡(
x1
 < 
y2
 && 
y1
 < 
x2
) {

607 
ovîœp
 = 
åue
;

608 
	`d¥öt
(
FD_IO
, "in-flight overlap: %llu/%lu, %llu/%lu\n",

609 
x1
, 
io_u
->
buÊí
,

610 
y1
, 
check_io_u
->
buÊí
);

616  
ovîœp
;

617 
	}
}

619 
	$io_u_submô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

625 i‡(
td
->
o
.
£rülize_ovîœp
 &&Åd->
cur_dïth
 > 1 &&

626 
	`ö_Êight_ovîœp
(&
td
->
io_u_Æl
, 
io_u
))

627  
FIO_Q_BUSY
;

629  
	`td_io_queue
(
td
, 
io_u
);

630 
	}
}

636 
	$do_vîify
(
thªad_d©a
 *
td
, 
uöt64_t
 
vîify_byãs
)

638 
fio_fûe
 *
f
;

639 
io_u
 *io_u;

640 
ªt
, 
mö_evíts
;

641 
i
;

643 
	`d¥öt
(
FD_VERIFY
, "startingÜoop\n");

649 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

650 i‡(!
	`fio_fûe_›í
(
f
))

652 i‡(
	`fio_io_sync
(
td
, 
f
))

654 i‡(
	`fûe_övÆid©e_ˇche
(
td
, 
f
))

658 
	`check_upd©e_rußge
(
td
);

660 i‡(
td
->
îr‹
)

669 i‡(!
td
->
o
.
ønd_ª≥©abÀ
)

670 
	`td_fûl_vîify_°©e_£ed
(
td
);

672 
	`td_£t_run°©e
(
td
, 
TD_VERIFYING
);

674 
io_u
 = 
NULL
;

675 !
td
->
ãrmö©e
) {

676 
fio_ddú
 
ddú
;

677 
fuŒ
;

679 
	`upd©e_ts_ˇche
(
td
);

680 
	`check_upd©e_rußge
(
td
);

682 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
ts_ˇche
)) {

683 
	`__upd©e_ts_ˇche
(
td
);

684 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
ts_ˇche
)) {

685 
	`fio_m¨k_td_ãrmö©e
(
td
);

690 i‡(
	`Êow_thªshﬁd_ex˚eded
(
td
))

693 i‡(!
td
->
o
.
ex≥rimíèl_vîify
) {

694 
io_u
 = 
	`__gë_io_u
(
td
);

695 i‡(!
io_u
)

698 i‡(
	`gë_√xt_vîify
(
td
, 
io_u
)) {

699 
	`put_io_u
(
td
, 
io_u
);

703 i‡(
	`td_io_¥ï
(
td
, 
io_u
)) {

704 
	`put_io_u
(
td
, 
io_u
);

708 i‡(
	`ddú_rw_sum
(
td
->
byãs_d⁄e
Ë+Åd->
o
.
rw_mö_bs
 > 
vîify_byãs
)

711 (
io_u
 = 
	`gë_io_u
(
td
)Ë!
NULL
) {

712 i‡(
	`IS_ERR_OR_NULL
(
io_u
)) {

713 
io_u
 = 
NULL
;

714 
ªt
 = 
FIO_Q_BUSY
;

715 
ª≠
;

723 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

728 
td
->
io_issues
[
DDIR_READ
]++;

729 
	`put_io_u
(
td
, 
io_u
);

731 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

732 
io_u
->
ddú
 = 
DDIR_READ
;

733 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_TRIMMED
);

735 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

736 
io_u
->
ddú
 = 
DDIR_READ
;

739 
	`put_io_u
(
td
, 
io_u
);

744 i‡(!
io_u
)

748 i‡(
	`vîify_°©e_should_°›
(
td
, 
io_u
)) {

749 
	`put_io_u
(
td
, 
io_u
);

753 i‡(
td
->
o
.
vîify_async
)

754 
io_u
->
íd_io
 = 
vîify_io_u_async
;

756 
io_u
->
íd_io
 = 
vîify_io_u
;

758 
ddú
 = 
io_u
->ddir;

759 i‡(!
td
->
o
.
dißbÀ_¶©
)

760 
	`fio_gëtime
(&
io_u
->
°¨t_time
, 
NULL
);

762 
ªt
 = 
	`io_u_submô
(
td
, 
io_u
);

764 i‡(
	`io_queue_evít
(
td
, 
io_u
, &
ªt
, 
ddú
, 
NULL
, 1, NULL))

772 
ª≠
:

773 
fuŒ
 = 
	`queue_fuŒ
(
td
Ë|| (
ªt
 =
FIO_Q_BUSY
 &&Åd->
cur_dïth
);

774 i‡(
fuŒ
 || 
	`io_ö_pﬁlög
(
td
))

775 
ªt
 = 
	`waô_f‹_com∂ëi⁄s
(
td
, 
NULL
);

777 i‡(
ªt
 < 0)

781 
	`check_upd©e_rußge
(
td
);

783 i‡(!
td
->
îr‹
) {

784 
mö_evíts
 = 
td
->
cur_dïth
;

786 i‡(
mö_evíts
)

787 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
mö_evíts
);

789 
	`˛ónup_≥ndög_aio
(
td
);

791 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

793 
	`d¥öt
(
FD_VERIFY
, "exitingÜoop\n");

794 
	}
}

796 
boﬁ
 
	$ex˚eds_numbî_ios
(
thªad_d©a
 *
td
)

798 
numbî_ios
;

800 i‡(!
td
->
o
.
numbî_ios
)

801  
Ál£
;

803 
numbî_ios
 = 
	`ddú_rw_sum
(
td
->
io_blocks
);

804 
numbî_ios
 +
td
->
io_u_queued
 +Åd->
io_u_ö_Êight
;

806  
numbî_ios
 >(
td
->
o
.numbî_io†*Åd->
lo›s
);

807 
	}
}

809 
boﬁ
 
	$io_byãs_ex˚eded
(
thªad_d©a
 *
td
, 
uöt64_t
 *
this_byãs
)

811 
byãs
, 
limô
;

813 i‡(
	`td_rw
(
td
))

814 
byãs
 = 
this_byãs
[
DDIR_READ
] +Åhis_byãs[
DDIR_WRITE
];

815 i‡(
	`td_wrôe
(
td
))

816 
byãs
 = 
this_byãs
[
DDIR_WRITE
];

817 i‡(
	`td_ªad
(
td
))

818 
byãs
 = 
this_byãs
[
DDIR_READ
];

820 
byãs
 = 
this_byãs
[
DDIR_TRIM
];

822 i‡(
td
->
o
.
io_size
)

823 
limô
 = 
td
->
o
.
io_size
;

825 
limô
 = 
td
->
o
.
size
;

827 
limô
 *
td
->
lo›s
;

828  
byãs
 >
limô
 || 
	`ex˚eds_numbî_ios
(
td
);

829 
	}
}

831 
boﬁ
 
	$io_issue_byãs_ex˚eded
(
thªad_d©a
 *
td
)

833  
	`io_byãs_ex˚eded
(
td
,Åd->
io_issue_byãs
);

834 
	}
}

836 
boﬁ
 
	$io_com∂ëe_byãs_ex˚eded
(
thªad_d©a
 *
td
)

838  
	`io_byãs_ex˚eded
(
td
,Åd->
this_io_byãs
);

839 
	}
}

845 
	$u£c_f‹_io
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

847 
uöt64_t
 
bps
 = 
td
->
øã_bps
[
ddú
];

849 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

851 i‡(
td
->
o
.
øã_¥o˚ss
 =
RATE_PROCESS_POISSON
) {

852 
uöt64_t
 
vÆ
, 
i›s
;

854 
i›s
 = 
bps
 / 
td
->
o
.
bs
[
ddú
];

855 
vÆ
 = (
öt64_t
Ë(1000000 / 
i›s
) *

856 -
	`logf
(
	`__ønd_0_1
(&
td
->
poiss⁄_°©e
[
ddú
]));

857 i‡(
vÆ
) {

858 
	`d¥öt
(
FD_RATE
, "poissonÑate iops=%llu, ddir=%d\n",

859 (Ë1000000 / 
vÆ
,

860 
ddú
);

862 
td
->
œ°_u£c
[
ddú
] +
vÆ
;

863  
td
->
œ°_u£c
[
ddú
];

864 } i‡(
bps
) {

865 
uöt64_t
 
byãs
 = 
td
->
øã_io_issue_byãs
[
ddú
];

866 
uöt64_t
 
£cs
 = 
byãs
 / 
bps
;

867 
uöt64_t
 
ªmaödî
 = 
byãs
 % 
bps
;

869  
ªmaödî
 * 1000000 / 
bps
 + 
£cs
 * 1000000;

873 
	}
}

875 
	$h™dÀ_thöktime
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

877 
b
;

878 
uöt64_t
 
tŸÆ
;

879 
À·
;

881 
b
 = 
	`ddú_rw_sum
(
td
->
io_blocks
);

882 i‡(
b
 % 
td
->
o
.
thöktime_blocks
)

885 
	`io_u_quõs˚
(
td
);

887 
tŸÆ
 = 0;

888 i‡(
td
->
o
.
thöktime_•ö
)

889 
tŸÆ
 = 
	`u£c_•ö
(
td
->
o
.
thöktime_•ö
);

891 
À·
 = 
td
->
o
.
thöktime
 - 
tŸÆ
;

892 i‡(
À·
)

893 
tŸÆ
 +
	`u£c_¶ìp
(
td
, 
À·
);

900 i‡(
tŸÆ
 && 
td
->
øã_bps
[
ddú
] &&Åd->
o
.
øã_ign_thök
) {

901 
uöt64_t
 
mis£d
 = (
td
->
øã_bps
[
ddú
] * 
tŸÆ
) / 1000000ULL;

902 
uöt64_t
 
bs
 = 
td
->
o
.
mö_bs
[
ddú
];

903 
uöt64_t
 
u•î›
 = 
bs
 * 1000000ULL / 
td
->
øã_bps
[
ddú
];

904 
uöt64_t
 
ovî
;

906 i‡(
u•î›
 <
tŸÆ
)

907 
ovî
 = 
bs
;

909 
ovî
 = (
u•î›
 - 
tŸÆ
Ë/ u•î› * -
bs
;

911 
td
->
øã_io_issue_byãs
[
ddú
] +(
mis£d
 - 
ovî
);

913 
	}
}

921 
	$do_io
(
thªad_d©a
 *
td
, 
uöt64_t
 *
byãs_d⁄e
)

923 
i
;

924 
ªt
 = 0;

925 
uöt64_t
 
tŸÆ_byãs
, 
byãs_issued
 = 0;

927 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

928 
byãs_d⁄e
[
i
] = 
td
->bytes_done[i];

930 i‡(
	`ö_ømp_time
(
td
))

931 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

933 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

935 
	`œt_èrgë_öô
(
td
);

937 
tŸÆ_byãs
 = 
td
->
o
.
size
;

942 i‡(
	`td_wrôe
(
td
Ë&& 
	`td_øndom
—dË&&Åd->
o
.
n‹™domm≠
)

943 
tŸÆ_byãs
 = 
	`max
—ŸÆ_byãs, (
uöt64_t
Ë
td
->
o
.
io_size
);

949 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

950 (
	`td_wrôe
(
td
Ë&&Åd->
o
.
vîify_backlog
))

951 
tŸÆ_byãs
 +
td
->
o
.
size
;

955 i‡(
	`td_åimwrôe
(
td
))

956 
tŸÆ_byãs
 +
td
->
tŸÆ_io_size
;

958 (
td
->
o
.
ªad_iﬁog_fûe
 && !
	`Êi°_em±y
(&td->
io_log_li°
)) ||

959 (!
	`Êi°_em±y
(&
td
->
åim_li°
)Ë|| !
	`io_issue_byãs_ex˚eded
(td) ||

960 
td
->
o
.
time_ba£d
) {

961 
time•ec
 
comp_time
;

962 
io_u
 *io_u;

963 
fuŒ
;

964 
fio_ddú
 
ddú
;

966 
	`check_upd©e_rußge
(
td
);

968 i‡(
td
->
ãrmö©e
 ||Åd->
d⁄e
)

971 
	`upd©e_ts_ˇche
(
td
);

973 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
ts_ˇche
)) {

974 
	`__upd©e_ts_ˇche
(
td
);

975 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
ts_ˇche
)) {

976 
	`fio_m¨k_td_ãrmö©e
(
td
);

981 i‡(
	`Êow_thªshﬁd_ex˚eded
(
td
))

989 i‡(
byãs_issued
 >
tŸÆ_byãs
 &&

990 (!
td
->
o
.
time_ba£d
 ||

991 (
td
->
o
.
time_ba£d
 &&Åd->o.
vîify
 !
VERIFY_NONE
)))

994 
io_u
 = 
	`gë_io_u
(
td
);

995 i‡(
	`IS_ERR_OR_NULL
(
io_u
)) {

996 
îr
 = 
	`PTR_ERR
(
io_u
);

998 
io_u
 = 
NULL
;

999 
ddú
 = 
DDIR_INVAL
;

1000 i‡(
îr
 =-
EBUSY
) {

1001 
ªt
 = 
FIO_Q_BUSY
;

1002 
ª≠
;

1004 i‡(
td
->
o
.
œãncy_èrgë
)

1005 
ª≠
;

1009 
ddú
 = 
io_u
->ddir;

1016 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
 && 
io_u
->
ddú
 =
DDIR_READ
 &&

1017 ((
io_u
->
Êags
 & 
IO_U_F_VER_LIST
Ë|| !
	`td_rw
(
td
))) {

1019 i‡(!
td
->
o
.
vîify_∑âîn_byãs
) {

1020 
io_u
->
ønd_£ed
 = 
	`__ønd
(&
td
->
vîify_°©e
);

1022 
io_u
->
ønd_£ed
 *
	`__ønd
(&
td
->
vîify_°©e
);

1025 i‡(
	`vîify_°©e_should_°›
(
td
, 
io_u
)) {

1026 
	`put_io_u
(
td
, 
io_u
);

1030 i‡(
td
->
o
.
vîify_async
)

1031 
io_u
->
íd_io
 = 
vîify_io_u_async
;

1033 
io_u
->
íd_io
 = 
vîify_io_u
;

1034 
	`td_£t_run°©e
(
td
, 
TD_VERIFYING
);

1035 } i‡(
	`ö_ømp_time
(
td
))

1036 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

1038 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

1045 i‡(
	`td_wrôe
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_WRITE
 &&

1046 
td
->
o
.
do_vîify
 &&

1047 
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

1048 !
td
->
o
.
ex≥rimíèl_vîify
)

1049 
	`log_io_põ˚
(
td
, 
io_u
);

1051 i‡(
td
->
o
.
io_submô_mode
 =
IO_MODE_OFFLOAD
) {

1052 c⁄° 
bÀn
 = 
io_u
->
x„r_buÊí
;

1053 c⁄° 
fio_ddú
 
ddú
 = 
	`ac˘_ddú
(
io_u
);

1055 i‡(
td
->
îr‹
)

1058 
	`w‹kqueue_íqueue
(&
td
->
io_wq
, &
io_u
->
w‹k
);

1059 
ªt
 = 
FIO_Q_QUEUED
;

1061 i‡(
	`ddú_rw
(
ddú
)) {

1062 
td
->
io_issues
[
ddú
]++;

1063 
td
->
io_issue_byãs
[
ddú
] +
bÀn
;

1064 
td
->
øã_io_issue_byãs
[
ddú
] +
bÀn
;

1067 i‡(
	`should_check_øã
(
td
))

1068 
td
->
øã_√xt_io_time
[
ddú
] = 
	`u£c_f‹_io
(td, ddir);

1071 
ªt
 = 
	`io_u_submô
(
td
, 
io_u
);

1073 i‡(
	`should_check_øã
(
td
))

1074 
td
->
øã_√xt_io_time
[
ddú
] = 
	`u£c_f‹_io
(td, ddir);

1076 i‡(
	`io_queue_evít
(
td
, 
io_u
, &
ªt
, 
ddú
, &
byãs_issued
, 0, &
comp_time
))

1084 
ª≠
:

1085 
fuŒ
 = 
	`queue_fuŒ
(
td
) ||

1086 (
ªt
 =
FIO_Q_BUSY
 && 
td
->
cur_dïth
);

1087 i‡(
fuŒ
 || 
	`io_ö_pﬁlög
(
td
))

1088 
ªt
 = 
	`waô_f‹_com∂ëi⁄s
(
td
, &
comp_time
);

1090 i‡(
ªt
 < 0)

1092 i‡(!
	`ddú_rw_sum
(
td
->
byãs_d⁄e
) &&

1093 !
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
))

1096 i‡(!
	`ö_ømp_time
(
td
Ë&& 
	`should_check_øã
(td)) {

1097 i‡(
	`check_mö_øã
(
td
, &
comp_time
)) {

1098 i‡(
exôÆl_⁄_ãrmö©e
 || 
td
->
o
.
exôÆl_îr‹
)

1099 
	`fio_ãrmö©e_thªads
(
td
->
groupid
);

1100 
	`td_vîr‹
(
td
, 
EIO
, "check_min_rate");

1104 i‡(!
	`ö_ømp_time
(
td
Ë&&Åd->
o
.
œãncy_èrgë
)

1105 
	`œt_èrgë_check
(
td
);

1107 i‡(
	`ddú_rw
(
ddú
Ë&& 
td
->
o
.
thöktime
)

1108 
	`h™dÀ_thöktime
(
td
, 
ddú
);

1111 
	`check_upd©e_rußge
(
td
);

1113 i‡(
td
->
åim_íåõs
)

1114 
	`log_îr
("fio: %luÅrimÉ¡rõ†Àaked?\n", 
td
->
åim_íåõs
);

1116 i‡(
td
->
o
.
fûl_devi˚
 &&Åd->
îr‹
 =
ENOSPC
) {

1117 
td
->
îr‹
 = 0;

1118 
	`fio_m¨k_td_ãrmö©e
(
td
);

1120 i‡(!
td
->
îr‹
) {

1121 
fio_fûe
 *
f
;

1123 i‡(
td
->
o
.
io_submô_mode
 =
IO_MODE_OFFLOAD
) {

1124 
	`w‹kqueue_Êush
(&
td
->
io_wq
);

1125 
i
 = 0;

1127 
i
 = 
td
->
cur_dïth
;

1129 i‡(
i
) {

1130 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
i
);

1131 i‡(
td
->
o
.
fûl_devi˚
 &&Åd->
îr‹
 =
ENOSPC
)

1132 
td
->
îr‹
 = 0;

1135 i‡(
	`should_fsync
(
td
Ë&&Åd->
o
.
íd_fsync
) {

1136 
	`td_£t_run°©e
(
td
, 
TD_FSYNCING
);

1138 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1139 i‡(!
	`fio_fûe_fsync
(
td
, 
f
))

1142 
	`log_îr
("fio:Énd_fsync failed for file %s\n",

1143 
f
->
fûe_«me
);

1147 
	`˛ónup_≥ndög_aio
(
td
);

1152 i‡(!
	`ddú_rw_sum
(
td
->
this_io_byãs
))

1153 
td
->
d⁄e
 = 1;

1155 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

1156 
byãs_d⁄e
[
i
] = 
td
->bytes_done[i] - bytes_done[i];

1157 
	}
}

1159 
	$‰ì_fûe_com∂ëi⁄_loggög
(
thªad_d©a
 *
td
)

1161 
fio_fûe
 *
f
;

1162 
i
;

1164 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1165 i‡(!
f
->
œ°_wrôe_comp
)

1167 
	`s‰ì
(
f
->
œ°_wrôe_comp
);

1169 
	}
}

1171 
	$öô_fûe_com∂ëi⁄_loggög
(
thªad_d©a
 *
td
,

1172 
dïth
)

1174 
fio_fûe
 *
f
;

1175 
i
;

1177 i‡(
td
->
o
.
vîify
 =
VERIFY_NONE
 || !td->o.
vîify_°©e_ßve
)

1180 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1181 
f
->
œ°_wrôe_comp
 = 
	`sˇŒoc
(
dïth
, (
uöt64_t
));

1182 i‡(!
f
->
œ°_wrôe_comp
)

1183 
˛ónup
;

1188 
˛ónup
:

1189 
	`‰ì_fûe_com∂ëi⁄_loggög
(
td
);

1190 
	`log_îr
("fio: failedÅoálloc write comp data\n");

1192 
	}
}

1194 
	$˛ónup_io_u
(
thªad_d©a
 *
td
)

1196 
io_u
 *io_u;

1198 (
io_u
 = 
	`io_u_qp›
(&
td
->
io_u_‰ìli°
)Ë!
NULL
) {

1200 i‡(
td
->
io_›s
->
io_u_‰ì
)

1201 
td
->
io_›s
->
	`io_u_‰ì
—d, 
io_u
);

1203 
	`fio_mem‰ì
(
io_u
, (*io_u));

1206 
	`‰ì_io_mem
(
td
);

1208 
	`io_u_ªxô
(&
td
->
io_u_ªqueues
);

1209 
	`io_u_qexô
(&
td
->
io_u_‰ìli°
);

1210 
	`io_u_qexô
(&
td
->
io_u_Æl
);

1212 
	`‰ì_fûe_com∂ëi⁄_loggög
(
td
);

1213 
	}
}

1215 
	$öô_io_u
(
thªad_d©a
 *
td
)

1217 
io_u
 *io_u;

1218 
max_bs
, 
mö_wrôe
;

1219 
˛_Æign
, 
i
, 
max_unôs
;

1220 
d©a_x„r
 = 1, 
îr
;

1221 *
p
;

1223 
max_unôs
 = 
td
->
o
.
iodïth
;

1224 
max_bs
 = 
	`td_max_bs
(
td
);

1225 
mö_wrôe
 = 
td
->
o
.
mö_bs
[
DDIR_WRITE
];

1226 
td
->
‹ig_buf„r_size
 = (Ë
max_bs


1227 * (Ë
max_unôs
;

1229 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
Ë|| !(
	`td_ªad
—dË|| 
	`td_wrôe
(td)))

1230 
d©a_x„r
 = 0;

1232 
îr
 = 0;

1233 
îr
 +!
	`io_u_röô
(&
td
->
io_u_ªqueues
,Åd->
o
.
iodïth
);

1234 
îr
 +!
	`io_u_qöô
(&
td
->
io_u_‰ìli°
,Åd->
o
.
iodïth
);

1235 
îr
 +!
	`io_u_qöô
(&
td
->
io_u_Æl
,Åd->
o
.
iodïth
);

1237 i‡(
îr
) {

1238 
	`log_îr
("fio: failed setting up IO queues\n");

1248 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
mem_Æign
 ||Åd->o.
ﬂtomic
 ||

1249 
	`td_i€ngöe_Êagged
(
td
, 
FIO_RAWIO
))

1250 
td
->
‹ig_buf„r_size
 +
∑ge_mask
 +Åd->
o
.
mem_Æign
;

1252 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHMHUGE
 ||Åd->o.mem_ty≥ =
MEM_MMAPHUGE
) {

1253 
bs
;

1255 
bs
 = 
td
->
‹ig_buf„r_size
 +Åd->
o
.
hugïage_size
 - 1;

1256 
td
->
‹ig_buf„r_size
 = 
bs
 & ~—d->
o
.
hugïage_size
 - 1);

1259 i‡(
td
->
‹ig_buf„r_size
 !(
size_t
)Åd->orig_buffer_size) {

1260 
	`log_îr
("fio: IO memoryÅooÜarge. Reduce max_bs or iodepth\n");

1264 i‡(
d©a_x„r
 && 
	`Æloˇã_io_mem
(
td
))

1267 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
mem_Æign
 ||Åd->o.
ﬂtomic
 ||

1268 
	`td_i€ngöe_Êagged
(
td
, 
FIO_RAWIO
))

1269 
p
 = 
	`PTR_ALIGN
(
td
->
‹ig_buf„r
, 
∑ge_mask
Ë+Åd->
o
.
mem_Æign
;

1271 
p
 = 
td
->
‹ig_buf„r
;

1273 
˛_Æign
 = 
	`os_ˇche_löe_size
();

1275 
i
 = 0; i < 
max_unôs
; i++) {

1276 *
±r
;

1278 i‡(
td
->
ãrmö©e
)

1281 
±r
 = 
	`fio_memÆign
(
˛_Æign
, (*
io_u
));

1282 i‡(!
±r
) {

1283 
	`log_îr
("fio: unableÅoállocateáligned memory\n");

1287 
io_u
 = 
±r
;

1288 
	`mem£t
(
io_u
, 0, (*io_u));

1289 
	`INIT_FLIST_HEAD
(&
io_u
->
vîify_li°
);

1290 
	`d¥öt
(
FD_MEM
, "io_uáŒo¯%p, index %u\n", 
io_u
, 
i
);

1292 i‡(
d©a_x„r
) {

1293 
io_u
->
buf
 = 
p
;

1294 
	`d¥öt
(
FD_MEM
, "io_u %p, mem %p\n", 
io_u
, io_u->
buf
);

1296 i‡(
	`td_wrôe
(
td
))

1297 
	`io_u_fûl_buf„r
(
td
, 
io_u
, 
mö_wrôe
, 
max_bs
);

1298 i‡(
	`td_wrôe
(
td
Ë&&Åd->
o
.
vîify_∑âîn_byãs
) {

1303 
	`fûl_vîify_∑âîn
(
td
, 
io_u
->
buf
, 
max_bs
, io_u, 0, 0);

1307 
io_u
->
ödex
 = 
i
;

1308 
io_u
->
Êags
 = 
IO_U_F_FREE
;

1309 
	`io_u_qpush
(&
td
->
io_u_‰ìli°
, 
io_u
);

1315 
	`io_u_qpush
(&
td
->
io_u_Æl
, 
io_u
);

1317 i‡(
td
->
io_›s
->
io_u_öô
) {

1318 
ªt
 = 
td
->
io_›s
->
	`io_u_öô
—d, 
io_u
);

1320 i‡(
ªt
) {

1321 
	`log_îr
("fio: faûedÅÿöôÉngöêd©a: %d\n", 
ªt
);

1326 
p
 +
max_bs
;

1329 i‡(
	`öô_fûe_com∂ëi⁄_loggög
(
td
, 
max_unôs
))

1333 
	}
}

1339 
	$swôch_ioscheduÀr
(
thªad_d©a
 *
td
)

1341 #ifde‡
FIO_HAVE_IOSCHED_SWITCH


1342 
tmp
[256], 
tmp2
[128];

1343 
FILE
 *
f
;

1344 
ªt
;

1346 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
))

1349 
	`as£π
(
td
->
fûes
 &&Åd->files[0]);

1350 
	`•rötf
(
tmp
, "%s/queue/scheduÀr", 
td
->
fûes
[0]->
du
->
sysfs_roŸ
);

1352 
f
 = 
	`f›í
(
tmp
, "r+");

1353 i‡(!
f
) {

1354 i‡(
î∫o
 =
ENOENT
) {

1355 
	`log_îr
("fio: os or kernel doesn't support IO scheduler"

1359 
	`td_vîr‹
(
td
, 
î∫o
, "fopen iosched");

1366 
ªt
 = 
	`fwrôe
(
td
->
o
.
ioscheduÀr
, 
	`°æí
—d->o.ioscheduÀr), 1, 
f
);

1367 i‡(
	`„º‹
(
f
Ë|| 
ªt
 != 1) {

1368 
	`td_vîr‹
(
td
, 
î∫o
, "fwrite");

1369 
	`f˛o£
(
f
);

1373 
	`ªwöd
(
f
);

1378 
	`mem£t
(
tmp
, 0, (tmp));

1379 
ªt
 = 
	`‰ód
(
tmp
, —mp), 1, 
f
);

1380 i‡(
	`„º‹
(
f
Ë|| 
ªt
 < 0) {

1381 
	`td_vîr‹
(
td
, 
î∫o
, "fread");

1382 
	`f˛o£
(
f
);

1388 
tmp
[
	`°æí
(tmp) - 1] = '\0';

1393 i‡(!
	`°rcmp
(
tmp
, "none")) {

1394 
	`log_îr
("fio: io scheduler isÇotÅunable\n");

1395 
	`f˛o£
(
f
);

1399 
	`•rötf
(
tmp2
, "[%s]", 
td
->
o
.
ioscheduÀr
);

1400 i‡(!
	`°r°r
(
tmp
, 
tmp2
)) {

1401 
	`log_îr
("fio: iÿscheduÀ∏%†nŸ found\n", 
td
->
o
.
ioscheduÀr
);

1402 
	`td_vîr‹
(
td
, 
EINVAL
, "iosched_switch");

1403 
	`f˛o£
(
f
);

1407 
	`f˛o£
(
f
);

1412 
	}
}

1414 
boﬁ
 
	$kìp_ru¬ög
(
thªad_d©a
 *
td
)

1416 
limô
;

1418 i‡(
td
->
d⁄e
)

1419  
Ál£
;

1420 i‡(
td
->
ãrmö©e
)

1421  
Ál£
;

1422 i‡(
td
->
o
.
time_ba£d
)

1423  
åue
;

1424 i‡(
td
->
o
.
lo›s
) {

1425 
td
->
o
.
lo›s
--;

1426  
åue
;

1428 i‡(
	`ex˚eds_numbî_ios
(
td
))

1429  
Ál£
;

1431 i‡(
td
->
o
.
io_size
)

1432 
limô
 = 
td
->
o
.
io_size
;

1434 
limô
 = 
td
->
o
.
size
;

1436 i‡(
limô
 !-1ULL && 
	`ddú_rw_sum
(
td
->
io_byãs
) <Üimit) {

1437 
uöt64_t
 
diff
;

1443 
diff
 = 
limô
 - 
	`ddú_rw_sum
(
td
->
io_byãs
);

1444 i‡(
diff
 < 
	`td_max_bs
(
td
))

1445  
Ál£
;

1447 i‡(
	`fio_fûes_d⁄e
(
td
Ë&& !td->
o
.
io_size
)

1448  
Ál£
;

1450  
åue
;

1453  
Ál£
;

1454 
	}
}

1456 
	$exec_°rög
(
thªad_›ti⁄s
 *
o
, c⁄° *
°rög
, c⁄° *
mode
)

1458 
size_t
 
√wÀn
 = 
	`°æí
(
°rög
Ë+ såÀn(
o
->
«me
Ë+ såÀn(
mode
) + 9 + 1;

1459 
ªt
;

1460 *
°r
;

1462 
°r
 = 
	`mÆloc
(
√wÀn
);

1463 
	`•rötf
(
°r
, "%†&> %s.%s.txt", 
°rög
, 
o
->
«me
, 
mode
);

1465 
	`log_öfo
("%†: Savög ouçuào‡%†ö %s.%s.txt\n",
o
->
«me
, 
mode
, o->name, mode);

1466 
ªt
 = 
	`sy°em
(
°r
);

1467 i‡(
ªt
 == -1)

1468 
	`log_îr
("fio:Éxe¯o‡cmd <%s> faûed\n", 
°r
);

1470 
	`‰ì
(
°r
);

1471  
ªt
;

1472 
	}
}

1477 
uöt64_t
 
	$do_dry_run
(
thªad_d©a
 *
td
)

1479 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

1481 (
td
->
o
.
ªad_iﬁog_fûe
 && !
	`Êi°_em±y
(&td->
io_log_li°
)) ||

1482 (!
	`Êi°_em±y
(&
td
->
åim_li°
)Ë|| !
	`io_com∂ëe_byãs_ex˚eded
(td)) {

1483 
io_u
 *io_u;

1484 
ªt
;

1486 i‡(
td
->
ãrmö©e
 ||Åd->
d⁄e
)

1489 
io_u
 = 
	`gë_io_u
(
td
);

1490 i‡(
	`IS_ERR_OR_NULL
(
io_u
))

1493 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

1494 
io_u
->
îr‹
 = 0;

1495 
io_u
->
ªsid
 = 0;

1496 i‡(
	`ddú_rw
(
	`ac˘_ddú
(
io_u
)))

1497 
td
->
io_issues
[
	`ac˘_ddú
(
io_u
)]++;

1498 i‡(
	`ddú_rw
(
io_u
->
ddú
)) {

1499 
	`io_u_m¨k_dïth
(
td
, 1);

1500 
td
->
ts
.
tŸÆ_io_u
[
io_u
->
ddú
]++;

1503 i‡(
	`td_wrôe
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_WRITE
 &&

1504 
td
->
o
.
do_vîify
 &&

1505 
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

1506 !
td
->
o
.
ex≥rimíèl_vîify
)

1507 
	`log_io_põ˚
(
td
, 
io_u
);

1509 
ªt
 = 
	`io_u_sync_com∂ëe
(
td
, 
io_u
);

1510 (Ë
ªt
;

1513  
td
->
byãs_d⁄e
[
DDIR_WRITE
] +Åd->byãs_d⁄e[
DDIR_TRIM
];

1514 
	}
}

1516 
	sf‹k_d©a
 {

1517 
thªad_d©a
 *
	mtd
;

1518 
sk_out
 *
	msk_out
;

1525 *
	$thªad_maö
(*
d©a
)

1527 
f‹k_d©a
 *
fd
 = 
d©a
;

1528 
ñ≠£d_us
[
DDIR_RWDIR_CNT
] = { 0, };

1529 
thªad_d©a
 *
td
 = 
fd
->td;

1530 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1531 
sk_out
 *sk_ouà
fd
->sk_out;

1532 
uöt64_t
 
byãs_d⁄e
[
DDIR_RWDIR_CNT
];

1533 
dódlock_lo›_˙t
;

1534 
boﬁ
 
˛ór_°©e
, 
did_some_io
;

1535 
ªt
;

1537 
	`sk_out_assign
(
sk_out
);

1538 
	`‰ì
(
fd
);

1540 i‡(!
o
->
u£_thªad
) {

1541 
	`£tsid
();

1542 
td
->
pid
 = 
	`gëpid
();

1544 
td
->
pid
 = 
	`gëtid
();

1546 
	`fio_loˇl_˛ock_öô
(
o
->
u£_thªad
);

1548 
	`d¥öt
(
FD_PROCESS
, "job†pid=%d sèπed\n", (Ë
td
->
pid
);

1550 i‡(
is_backíd
)

1551 
	`fio_£rvî_£nd_°¨t
(
td
);

1553 
	`INIT_FLIST_HEAD
(&
td
->
io_log_li°
);

1554 
	`INIT_FLIST_HEAD
(&
td
->
io_hi°_li°
);

1555 
	`INIT_FLIST_HEAD
(&
td
->
vîify_li°
);

1556 
	`INIT_FLIST_HEAD
(&
td
->
åim_li°
);

1557 
	`INIT_FLIST_HEAD
(&
td
->
√xt_ønd_li°
);

1558 
td
->
io_hi°_åì
 = 
RB_ROOT
;

1560 
ªt
 = 
	`muãx_c⁄d_öô_psh¨ed
(&
td
->
io_u_lock
, &td->
‰ì_c⁄d
);

1561 i‡(
ªt
) {

1562 
	`td_vîr‹
(
td
, 
ªt
, "mutex_cond_init_pshared");

1563 
îr
;

1565 
ªt
 = 
	`c⁄d_öô_psh¨ed
(&
td
->
vîify_c⁄d
);

1566 i‡(
ªt
) {

1567 
	`td_vîr‹
(
td
, 
ªt
, "mutex_cond_pshared");

1568 
îr
;

1571 
	`td_£t_run°©e
(
td
, 
TD_INITIALIZED
);

1572 
	`d¥öt
(
FD_MUTEX
, "up startup_mutex\n");

1573 
	`fio_muãx_up
(
°¨tup_muãx
);

1574 
	`d¥öt
(
FD_MUTEX
, "wait onÅd->mutex\n");

1575 
	`fio_muãx_down
(
td
->
muãx
);

1576 
	`d¥öt
(
FD_MUTEX
, "done waiting onÅd->mutex\n");

1582 i‡(
o
->
gid
 !-1U && 
	`£tgid
(o->gid)) {

1583 
	`td_vîr‹
(
td
, 
î∫o
, "setgid");

1584 
îr
;

1586 i‡(
o
->
uid
 !-1U && 
	`£tuid
(o->uid)) {

1587 
	`td_vîr‹
(
td
, 
î∫o
, "setuid");

1588 
îr
;

1596 i‡(
	`iﬁog_com¥ess_öô
(
td
, 
sk_out
))

1597 
îr
;

1603 i‡(
o
->
gtod_˝u
)

1604 
	`fio_˝u_˛ór
(&
o
->
˝umask
, o->
gtod_˝u
);

1610 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
˝umask
)) {

1611 i‡(
o
->
˝us_Ælowed_pﬁicy
 =
FIO_CPUS_SPLIT
) {

1612 
ªt
 = 
	`fio_˝us_•lô
(&
o
->
˝umask
, 
td
->
thªad_numbî
 - 1);

1613 i‡(!
ªt
) {

1614 
	`log_îr
("fio:Ço CPUs set\n");

1615 
	`log_îr
("fio: Try increasingÇumber ofávailable CPUs\n");

1616 
	`td_vîr‹
(
td
, 
EINVAL
, "cpus_split");

1617 
îr
;

1620 
ªt
 = 
	`fio_£èfföôy
(
td
->
pid
, 
o
->
˝umask
);

1621 i‡(
ªt
 == -1) {

1622 
	`td_vîr‹
(
td
, 
î∫o
, "cpu_set_affinity");

1623 
îr
;

1627 #ifde‡
CONFIG_LIBNUMA


1629 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
numa_˝unodes
) ||

1630 
	`fio_›ti⁄_is_£t
(
o
, 
numa_memnodes
)) {

1631 
bômask
 *
mask
;

1633 i‡(
	`numa_avaûabÀ
() < 0) {

1634 
	`td_vîr‹
(
td
, 
î∫o
, "DoesÇot support NUMA API\n");

1635 
îr
;

1638 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
numa_˝unodes
)) {

1639 
mask
 = 
	`numa_∑r£_node°rög
(
o
->
numa_˝unodes
);

1640 
ªt
 = 
	`numa_run_⁄_node_mask
(
mask
);

1641 
	`numa_‰ì_nodemask
(
mask
);

1642 i‡(
ªt
 == -1) {

1643 
	`td_vîr‹
(
td
, 
î∫o
, \

1645 
îr
;

1649 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
numa_memnodes
)) {

1650 
mask
 = 
NULL
;

1651 i‡(
o
->
numa_memnodes
)

1652 
mask
 = 
	`numa_∑r£_node°rög
(
o
->
numa_memnodes
);

1654 
o
->
numa_mem_mode
) {

1655 
MPOL_INTERLEAVE
:

1656 
	`numa_£t_öãæóve_mask
(
mask
);

1658 
MPOL_BIND
:

1659 
	`numa_£t_memböd
(
mask
);

1661 
MPOL_LOCAL
:

1662 
	`numa_£t_loˇœŒoc
();

1664 
MPOL_PREFERRED
:

1665 
	`numa_£t_¥e„ºed
(
o
->
numa_mem_¥e„r_node
);

1667 
MPOL_DEFAULT
:

1672 i‡(
mask
)

1673 
	`numa_‰ì_nodemask
(
mask
);

1679 i‡(
	`fio_pö_mem‹y
(
td
))

1680 
îr
;

1686 i‡(
	`öô_iﬁog
(
td
))

1687 
îr
;

1689 i‡(
	`öô_io_u
(
td
))

1690 
îr
;

1692 i‡(
o
->
vîify_async
 && 
	`vîify_async_öô
(
td
))

1693 
îr
;

1695 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
i›rio
) ||

1696 
	`fio_›ti⁄_is_£t
(
o
, 
i›rio_˛ass
)) {

1697 
ªt
 = 
	`i›rio_£t
(
IOPRIO_WHO_PROCESS
, 0, 
o
->
i›rio_˛ass
, o->
i›rio
);

1698 i‡(
ªt
 == -1) {

1699 
	`td_vîr‹
(
td
, 
î∫o
, "ioprio_set");

1700 
îr
;

1704 i‡(
o
->
cgroup
 && 
	`cgroup_£tup
(
td
, 
cgroup_li°
, &
cgroup_m¡
))

1705 
îr
;

1707 
î∫o
 = 0;

1708 i‡(
	`ni˚
(
o
->
ni˚
Ë=-1 && 
î∫o
 != 0) {

1709 
	`td_vîr‹
(
td
, 
î∫o
, "nice");

1710 
îr
;

1713 i‡(
o
->
ioscheduÀr
 && 
	`swôch_ioscheduÀr
(
td
))

1714 
îr
;

1716 i‡(!
o
->
¸óã_£rülize
 && 
	`£tup_fûes
(
td
))

1717 
îr
;

1719 i‡(
	`td_io_öô
(
td
))

1720 
îr
;

1722 i‡(!
	`öô_øndom_m≠
(
td
))

1723 
îr
;

1725 i‡(
o
->
exec_¥îun
 && 
	`exec_°rög
(o, o->exec_prerun, (const *)"prerun"))

1726 
îr
;

1728 i‡(
o
->
¥e_ªad
 && !
	`¥e_ªad_fûes
(
td
))

1729 
îr
;

1731 
	`fio_vîify_öô
(
td
);

1733 i‡(
	`øã_submô_öô
(
td
, 
sk_out
))

1734 
îr
;

1736 
	`£t_ïoch_time
(
td
, 
o
->
log_unix_ïoch
);

1737 
	`fio_gërußge
(&
td
->
ru_°¨t
);

1738 
	`mem˝y
(&
td
->
bw_ßm∂e_time
, &td->
ïoch
, (td->epoch));

1739 
	`mem˝y
(&
td
->
i›s_ßm∂e_time
, &td->
ïoch
, (td->epoch));

1740 
	`mem˝y
(&
td
->
ss
.
¥ev_time
, &td->
ïoch
, (td->epoch));

1742 i‡(
o
->
øãmö
[
DDIR_READ
] || o->øãmö[
DDIR_WRITE
] ||

1743 
o
->
øãmö
[
DDIR_TRIM
]) {

1744 
	`mem˝y
(&
td
->
œ°øã
[
DDIR_READ
], &td->
bw_ßm∂e_time
,

1745 (
td
->
bw_ßm∂e_time
));

1746 
	`mem˝y
(&
td
->
œ°øã
[
DDIR_WRITE
], &td->
bw_ßm∂e_time
,

1747 (
td
->
bw_ßm∂e_time
));

1748 
	`mem˝y
(&
td
->
œ°øã
[
DDIR_TRIM
], &td->
bw_ßm∂e_time
,

1749 (
td
->
bw_ßm∂e_time
));

1752 
	`mem£t
(
byãs_d⁄e
, 0, (bytes_done));

1753 
˛ór_°©e
 = 
Ál£
;

1754 
did_some_io
 = 
Ál£
;

1756 
	`kìp_ru¬ög
(
td
)) {

1757 
uöt64_t
 
vîify_byãs
;

1759 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1760 
	`mem˝y
(&
td
->
ts_ˇche
, &td->
°¨t
, (td->start));

1762 i‡(
˛ór_°©e
) {

1763 
	`˛ór_io_°©e
(
td
, 0);

1765 i‡(
o
->
u∆ök_óch_lo›
 && 
	`u∆ök_Æl_fûes
(
td
))

1769 
	`¥u√_io_põ˚_log
(
td
);

1771 i‡(
td
->
o
.
vîify_⁄ly
 && 
	`td_wrôe
(td))

1772 
vîify_byãs
 = 
	`do_dry_run
(
td
);

1774 
	`do_io
(
td
, 
byãs_d⁄e
);

1776 i‡(!
	`ddú_rw_sum
(
byãs_d⁄e
)) {

1777 
	`fio_m¨k_td_ãrmö©e
(
td
);

1778 
vîify_byãs
 = 0;

1780 
vîify_byãs
 = 
byãs_d⁄e
[
DDIR_WRITE
] +

1781 
byãs_d⁄e
[
DDIR_TRIM
];

1790 i‡(
td
->
run°©e
 >
TD_EXITED
)

1793 
˛ór_°©e
 = 
åue
;

1802 
dódlock_lo›_˙t
 = 0;

1804 
	`check_upd©e_rußge
(
td
);

1805 i‡(!
	`fio_muãx_down_åylock
(
°©_muãx
))

1807 
	`u¶ìp
(1000);

1808 i‡(
dódlock_lo›_˙t
++ > 5000) {

1809 
	`log_îr
("fio seemsÅo be stuck grabbing stat_mutex, forciblyÉxiting\n");

1810 
td
->
îr‹
 = 
EDEADLK
;

1811 
îr
;

1815 i‡(
	`td_ªad
(
td
Ë&&Åd->
io_byãs
[
DDIR_READ
])

1816 
	`upd©e_ru¡ime
(
td
, 
ñ≠£d_us
, 
DDIR_READ
);

1817 i‡(
	`td_wrôe
(
td
Ë&&Åd->
io_byãs
[
DDIR_WRITE
])

1818 
	`upd©e_ru¡ime
(
td
, 
ñ≠£d_us
, 
DDIR_WRITE
);

1819 i‡(
	`td_åim
(
td
Ë&&Åd->
io_byãs
[
DDIR_TRIM
])

1820 
	`upd©e_ru¡ime
(
td
, 
ñ≠£d_us
, 
DDIR_TRIM
);

1821 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1822 
	`fio_muãx_up
(
°©_muãx
);

1824 i‡(
td
->
îr‹
 ||Åd->
ãrmö©e
)

1827 i‡(!
o
->
do_vîify
 ||

1828 
o
->
vîify
 =
VERIFY_NONE
 ||

1829 
	`td_i€ngöe_Êagged
(
td
, 
FIO_UNIDIR
))

1832 i‡(
	`ddú_rw_sum
(
byãs_d⁄e
))

1833 
did_some_io
 = 
åue
;

1835 
	`˛ór_io_°©e
(
td
, 0);

1837 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1839 
	`do_vîify
(
td
, 
vîify_byãs
);

1844 
	`check_upd©e_rußge
(
td
);

1846 
	`fio_muãx_down
(
°©_muãx
);

1847 
	`upd©e_ru¡ime
(
td
, 
ñ≠£d_us
, 
DDIR_READ
);

1848 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1849 
	`fio_muãx_up
(
°©_muãx
);

1851 i‡(
td
->
îr‹
 ||Åd->
ãrmö©e
)

1860 i‡((
td
->
o
.
size
 ||Åd->o.
io_size
Ë&& !
	`ddú_rw_sum
(
byãs_d⁄e
) &&

1861 !
did_some_io
 && !
td
->
o
.
¸óã_⁄ly
 &&

1862 !(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
) ||

1863 
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
)))

1864 
	`log_îr
("%s: No I/OÖerformed by %s, "

1866 
td
->
o
.
«me
,Åd->
io_›s
->name);

1868 
	`td_£t_run°©e
(
td
, 
TD_FINISHING
);

1870 
	`upd©e_rußge_°©
(
td
);

1871 
td
->
ts
.
tŸÆ_run_time
 = 
	`mtime_sö˚_now
(&td->
ïoch
);

1872 
td
->
ts
.
io_byãs
[
DDIR_READ
] =Åd->io_bytes[DDIR_READ];

1873 
td
->
ts
.
io_byãs
[
DDIR_WRITE
] =Åd->io_bytes[DDIR_WRITE];

1874 
td
->
ts
.
io_byãs
[
DDIR_TRIM
] =Åd->io_bytes[DDIR_TRIM];

1876 i‡(
td
->
o
.
vîify_°©e_ßve
 && !—d->
Êags
 & 
TD_F_VSTATE_SAVED
) &&

1877 (
td
->
o
.
vîify
 !
VERIFY_NONE
 && 
	`td_wrôe
(td)))

1878 
	`vîify_ßve_°©e
(
td
->
thªad_numbî
);

1880 
	`fio_u≈ö_mem‹y
(
td
);

1882 
	`td_wrôeout_logs
(
td
, 
åue
);

1884 
	`iﬁog_com¥ess_exô
(
td
);

1885 
	`øã_submô_exô
(
td
);

1887 i‡(
o
->
exec_po°run
)

1888 
	`exec_°rög
(
o
, o->
exec_po°run
, (const *)"postrun");

1890 i‡(
exôÆl_⁄_ãrmö©e
 || (
o
->
exôÆl_îr‹
 && 
td
->
îr‹
))

1891 
	`fio_ãrmö©e_thªads
(
td
->
groupid
);

1893 
îr
:

1894 i‡(
td
->
îr‹
)

1895 
	`log_öfo
("fio:Öid=%d,Éº=%d/%s\n", (Ë
td
->
pid
,Åd->
îr‹
,

1896 
td
->
vîr‹
);

1898 i‡(
o
->
vîify_async
)

1899 
	`vîify_async_exô
(
td
);

1901 
	`˛o£_™d_‰ì_fûes
(
td
);

1902 
	`˛ónup_io_u
(
td
);

1903 
	`˛o£_i€ngöe
(
td
);

1904 
	`cgroup_shutdown
(
td
, &
cgroup_m¡
);

1905 
	`vîify_‰ì_°©e
(
td
);

1907 i‡(
td
->
z⁄e_°©e_ödex
) {

1908 
i
;

1910 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

1911 
	`‰ì
(
td
->
z⁄e_°©e_ödex
[
i
]);

1912 
	`‰ì
(
td
->
z⁄e_°©e_ödex
);

1913 
td
->
z⁄e_°©e_ödex
 = 
NULL
;

1916 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
˝umask
)) {

1917 
ªt
 = 
	`fio_˝u£t_exô
(&
o
->
˝umask
);

1918 i‡(
ªt
)

1919 
	`td_vîr‹
(
td
, 
ªt
, "fio_cpuset_exit");

1925 i‡(
o
->
wrôe_iﬁog_fûe
)

1926 
	`wrôe_iﬁog_˛o£
(
td
);

1928 
	`td_£t_run°©e
(
td
, 
TD_EXITED
);

1934 
	`check_upd©e_rußge
(
td
);

1936 
	`sk_out_dr›
();

1937  (*Ë(
uöçå_t
Ë
td
->
îr‹
;

1938 
	}
}

1943 
	$ª≠_thªads
(*
ƒ_ru¬ög
, 
uöt64_t
 *
t_øã
,

1944 
uöt64_t
 *
m_øã
)

1946 
thªad_d©a
 *
td
;

1947 
˝uthªads
, 
ªÆthªads
, 
≥ndög
;

1948 
i
, 
°©us
, 
ªt
;

1953 
ªÆthªads
 = 
≥ndög
 = 
˝uthªads
 = 0;

1954 
	`f‹_óch_td
(
td
, 
i
) {

1955 
Êags
 = 0;

1957 i‡(!
	`°rcmp
(
td
->
o
.
i€ngöe
, "cpuio"))

1958 
˝uthªads
++;

1960 
ªÆthªads
++;

1962 i‡(!
td
->
pid
) {

1963 
≥ndög
++;

1966 i‡(
td
->
run°©e
 =
TD_REAPED
)

1968 i‡(
td
->
o
.
u£_thªad
) {

1969 i‡(
td
->
run°©e
 =
TD_EXITED
) {

1970 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

1971 
ª≠ed
;

1976 
Êags
 = 
WNOHANG
;

1977 i‡(
td
->
run°©e
 =
TD_EXITED
)

1978 
Êags
 = 0;

1983 
ªt
 = 
	`waôpid
(
td
->
pid
, &
°©us
, 
Êags
);

1984 i‡(
ªt
 < 0) {

1985 i‡(
î∫o
 =
ECHILD
) {

1986 
	`log_îr
("fio:Öid=%d disappeared %d\n",

1987 (Ë
td
->
pid
,Åd->
run°©e
);

1988 
td
->
sig
 = 
ECHILD
;

1989 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

1990 
ª≠ed
;

1992 
	`≥º‹
("waitpid");

1993 } i‡(
ªt
 =
td
->
pid
) {

1994 i‡(
	`WIFSIGNALED
(
°©us
)) {

1995 
sig
 = 
	`WTERMSIG
(
°©us
);

1997 i‡(
sig
 !
SIGTERM
 && sig !
SIGUSR2
)

1998 
	`log_îr
("fio:Öid=%d, got signal=%d\n",

1999 (Ë
td
->
pid
, 
sig
);

2000 
td
->
sig
 = sig;

2001 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2002 
ª≠ed
;

2004 i‡(
	`WIFEXITED
(
°©us
)) {

2005 i‡(
	`WEXITSTATUS
(
°©us
Ë&& !
td
->
îr‹
)

2006 
td
->
îr‹
 = 
	`WEXITSTATUS
(
°©us
);

2008 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2009 
ª≠ed
;

2017 i‡(
td
->
ãrmö©e
 &&

2018 
td
->
run°©e
 < 
TD_FSYNCING
 &&

2019 
	`time_sö˚_now
(&
td
->
ãrmö©e_time
Ë>
FIO_REAP_TIMEOUT
) {

2020 
	`log_îr
("fio: job '%s' (state=%d) hasn'tÉxited in "

2023 
td
->
o
.
«me
,Åd->
run°©e
,

2024 (Ë
	`time_sö˚_now
(&
td
->
ãrmö©e_time
));

2025 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2026 
ª≠ed
;

2032 
≥ndög
++;

2034 
ª≠ed
:

2035 (*
ƒ_ru¬ög
)--;

2036 (*
m_øã
Ë-
	`ddú_rw_sum
(
td
->
o
.
øãmö
);

2037 (*
t_øã
Ë-
	`ddú_rw_sum
(
td
->
o
.
øã
);

2038 i‡(!
td
->
pid
)

2039 
≥ndög
--;

2041 i‡(
td
->
îr‹
)

2042 
exô_vÆue
++;

2044 
d⁄e_£cs
 +
	`mtime_sö˚_now
(&
td
->
ïoch
) / 1000;

2045 
	`¥ofûe_td_exô
(
td
);

2048 i‡(*
ƒ_ru¬ög
 =
˝uthªads
 && !
≥ndög
 && 
ªÆthªads
)

2049 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

2050 
	}
}

2052 
boﬁ
 
	$__check_åiggî_fûe
()

2054 
°©
 
sb
;

2056 i‡(!
åiggî_fûe
)

2057  
Ál£
;

2059 i‡(
	`°©
(
åiggî_fûe
, &
sb
))

2060  
Ál£
;

2062 i‡(
	`u∆ök
(
åiggî_fûe
) < 0)

2063 
	`log_îr
("fio: faûedÅÿu∆ök %s: %s\n", 
åiggî_fûe
,

2064 
	`°ªº‹
(
î∫o
));

2066  
åue
;

2067 
	}
}

2069 
boﬁ
 
	$åiggî_timedout
()

2071 i‡(
åiggî_timeout
)

2072 i‡(
	`time_sö˚_gíesis
(Ë>
åiggî_timeout
) {

2073 
åiggî_timeout
 = 0;

2074  
åue
;

2077  
Ál£
;

2078 
	}
}

2080 
	$exec_åiggî
(c⁄° *
cmd
)

2082 
ªt
;

2084 i‡(!
cmd
 || cmd[0] == '\0')

2087 
ªt
 = 
	`sy°em
(
cmd
);

2088 i‡(
ªt
 == -1)

2089 
	`log_îr
("fio: faûedÉxecutög %†åiggî\n", 
cmd
);

2090 
	}
}

2092 
	$check_åiggî_fûe
()

2094 i‡(
	`__check_åiggî_fûe
(Ë|| 
	`åiggî_timedout
()) {

2095 i‡(
ƒ_˛õ¡s
)

2096 
	`fio_˛õ¡s_£nd_åiggî
(
åiggî_ªmŸe_cmd
);

2098 
	`vîify_ßve_°©e
(
IO_LIST_ALL
);

2099 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

2100 
	`exec_åiggî
(
åiggî_cmd
);

2103 
	}
}

2105 
	$fio_vîify_lﬂd_°©e
(
thªad_d©a
 *
td
)

2107 
ªt
;

2109 i‡(!
td
->
o
.
vîify_°©e
)

2112 i‡(
is_backíd
) {

2113 *
d©a
;

2115 
ªt
 = 
	`fio_£rvî_gë_vîify_°©e
(
td
->
o
.
«me
,

2116 
td
->
thªad_numbî
 - 1, &
d©a
);

2117 i‡(!
ªt
)

2118 
	`vîify_assign_°©e
(
td
, 
d©a
);

2120 
ªt
 = 
	`vîify_lﬂd_°©e
(
td
, "local");

2122  
ªt
;

2123 
	}
}

2125 
	$do_u¶ìp
(
u£cs
)

2127 
	`check_f‹_ru¬ög_°©s
();

2128 
	`check_åiggî_fûe
();

2129 
	`u¶ìp
(
u£cs
);

2130 
	}
}

2132 
boﬁ
 
	$check_mou¡_wrôes
(
thªad_d©a
 *
td
)

2134 
fio_fûe
 *
f
;

2135 
i
;

2137 i‡(!
	`td_wrôe
(
td
Ë||Åd->
o
.
Ælow_mou¡ed_wrôe
)

2138  
Ál£
;

2144 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

2145 #ifde‡
FIO_HAVE_CHARDEV_SIZE


2146 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
 && f->fûëy≥ !
FIO_TYPE_CHAR
)

2148 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
)

2151 i‡(
	`devi˚_is_mou¡ed
(
f
->
fûe_«me
))

2152 
mou¡ed
;

2155  
Ál£
;

2156 
mou¡ed
:

2157 
	`log_îr
("fio: %†≠≥¨†mou¡ed,ánd 'Ælow_mou¡ed_wrôe' i¢'à£t. Ab‹tög.\n", 
f
->
fûe_«me
);

2158  
åue
;

2159 
	}
}

2161 
boﬁ
 
	$waôì_ru¬ög
(
thªad_d©a
 *
me
)

2163 c⁄° *
waôì
 = 
me
->
o
.
waô_f‹
;

2164 c⁄° *
£lf
 = 
me
->
o
.
«me
;

2165 
thªad_d©a
 *
td
;

2166 
i
;

2168 i‡(!
waôì
)

2169  
Ál£
;

2171 
	`f‹_óch_td
(
td
, 
i
) {

2172 i‡(!
	`°rcmp
(
td
->
o
.
«me
, 
£lf
Ë|| såcmp—d->o.«me, 
waôì
))

2175 i‡(
td
->
run°©e
 < 
TD_EXITED
) {

2176 
	`d¥öt
(
FD_PROCESS
, "%s fenced by %s(%s)\n",

2177 
£lf
, 
td
->
o
.
«me
,

2178 
	`run°©e_to_«me
(
td
->
run°©e
));

2179  
åue
;

2183 
	`d¥öt
(
FD_PROCESS
, "%s: %†com∂ëed, c™Ñun\n", 
£lf
, 
waôì
);

2184  
Ál£
;

2185 
	}
}

2190 
	$run_thªads
(
sk_out
 *sk_out)

2192 
thªad_d©a
 *
td
;

2193 
i
, 
todo
, 
ƒ_ru¬ög
, 
ƒ_°¨ãd
;

2194 
uöt64_t
 
m_øã
, 
t_øã
;

2195 
uöt64_t
 
•ít
;

2197 i‡(
fio_gtod_ofÊﬂd
 && 
	`fio_°¨t_gtod_thªad
())

2200 
	`fio_idÀ_¥of_öô
();

2202 
	`£t_sig_h™dÀrs
();

2204 
ƒ_thªad
 = 
ƒ_¥o˚ss
 = 0;

2205 
	`f‹_óch_td
(
td
, 
i
) {

2206 i‡(
	`check_mou¡_wrôes
(
td
))

2208 i‡(
td
->
o
.
u£_thªad
)

2209 
ƒ_thªad
++;

2211 
ƒ_¥o˚ss
++;

2214 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

2215 
	`log_öfo
("Starting ");

2216 i‡(
ƒ_thªad
)

2217 
	`log_öfo
("%dÅhªad%s", 
ƒ_thªad
,

2218 
ƒ_thªad
 > 1 ? "s" : "");

2219 i‡(
ƒ_¥o˚ss
) {

2220 i‡(
ƒ_thªad
)

2221 
	`log_öfo
("ánd ");

2222 
	`log_öfo
("%dÖro˚ss%s", 
ƒ_¥o˚ss
,

2223 
ƒ_¥o˚ss
 > 1 ? "es" : "");

2225 
	`log_öfo
("\n");

2226 
	`log_öfo_Êush
();

2229 
todo
 = 
thªad_numbî
;

2230 
ƒ_ru¬ög
 = 0;

2231 
ƒ_°¨ãd
 = 0;

2232 
m_øã
 = 
t_øã
 = 0;

2234 
	`f‹_óch_td
(
td
, 
i
) {

2235 
	`¥öt_°©us_öô
(
td
->
thªad_numbî
 - 1);

2237 i‡(!
td
->
o
.
¸óã_£rülize
)

2240 i‡(
	`fio_vîify_lﬂd_°©e
(
td
))

2241 
ª≠
;

2248 i‡(
	`£tup_fûes
(
td
)) {

2249 
ª≠
:

2250 
exô_vÆue
++;

2251 i‡(
td
->
îr‹
)

2252 
	`log_îr
("fio:Öid=%d,Érr=%d/%s\n",

2253 (Ë
td
->
pid
,Åd->
îr‹
,Åd->
vîr‹
);

2254 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2255 
todo
--;

2257 
fio_fûe
 *
f
;

2258 
j
;

2265 
	`f‹_óch_fûe
(
td
, 
f
, 
j
) {

2266 i‡(
	`fio_fûe_›í
(
f
))

2267 
	`td_io_˛o£_fûe
(
td
, 
f
);

2273 
	`fio_idÀ_¥of_°¨t
();

2275 
	`£t_gíesis_time
();

2277 
todo
) {

2278 
thªad_d©a
 *
m≠
[
REAL_MAX_JOBS
];

2279 
time•ec
 
this_°¨t
;

2280 
this_jobs
 = 0, 
À·
;

2281 
f‹k_d©a
 *
fd
;

2286 
	`f‹_óch_td
(
td
, 
i
) {

2287 i‡(
td
->
run°©e
 !
TD_NOT_CREATED
)

2294 i‡(
td
->
ãrmö©e
) {

2295 
todo
--;

2299 i‡(
td
->
o
.
°¨t_dñay
) {

2300 
•ít
 = 
	`utime_sö˚_gíesis
();

2302 i‡(
td
->
o
.
°¨t_dñay
 > 
•ít
)

2306 i‡(
td
->
o
.
°⁄ewÆl
 && (
ƒ_°¨ãd
 || 
ƒ_ru¬ög
)) {

2307 
	`d¥öt
(
FD_PROCESS
, "%s: stonewall wait\n",

2308 
td
->
o
.
«me
);

2312 i‡(
	`waôì_ru¬ög
(
td
)) {

2313 
	`d¥öt
(
FD_PROCESS
, "%s: waiting for %s\n",

2314 
td
->
o
.
«me
,Åd->o.
waô_f‹
);

2318 
	`öô_disk_utû
(
td
);

2320 
td
->
rußge_£m
 = 
	`fio_muãx_öô
(
FIO_MUTEX_LOCKED
);

2321 
td
->
upd©e_rußge
 = 0;

2327 
	`td_£t_run°©e
(
td
, 
TD_CREATED
);

2328 
m≠
[
this_jobs
++] = 
td
;

2329 
ƒ_°¨ãd
++;

2331 
fd
 = 
	`ˇŒoc
(1, (*fd));

2332 
fd
->
td
 =Åd;

2333 
fd
->
sk_out
 = sk_out;

2335 i‡(
td
->
o
.
u£_thªad
) {

2336 
ªt
;

2338 
	`d¥öt
(
FD_PROCESS
, "willÖthread_create\n");

2339 
ªt
 = 
	`±hªad_¸óã
(&
td
->
thªad
, 
NULL
,

2340 
thªad_maö
, 
fd
);

2341 i‡(
ªt
) {

2342 
	`log_îr
("pthread_create: %s\n",

2343 
	`°ªº‹
(
ªt
));

2344 
	`‰ì
(
fd
);

2345 
ƒ_°¨ãd
--;

2348 
fd
 = 
NULL
;

2349 
ªt
 = 
	`±hªad_dëach
(
td
->
thªad
);

2350 i‡(
ªt
)

2351 
	`log_îr
("pthread_detach: %s",

2352 
	`°ªº‹
(
ªt
));

2354 
pid_t
 
pid
;

2355 
	`d¥öt
(
FD_PROCESS
, "will fork\n");

2356 
pid
 = 
	`f‹k
();

2357 i‡(!
pid
) {

2358 
ªt
;

2360 
ªt
 = ()(
uöçå_t
)
	`thªad_maö
(
fd
);

2361 
	`_exô
(
ªt
);

2362 } i‡(
i
 =
fio_debug_jobno
)

2363 *
fio_debug_jobp
 = 
pid
;

2365 
	`d¥öt
(
FD_MUTEX
, "wait on startup_mutex\n");

2366 i‡(
	`fio_muãx_down_timeout
(
°¨tup_muãx
, 10000)) {

2367 
	`log_îr
("fio: job startup hung?Éxiting.\n");

2368 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

2369 
fio_ab‹t
 = 1;

2370 
ƒ_°¨ãd
--;

2371 
	`‰ì
(
fd
);

2374 
	`d¥öt
(
FD_MUTEX
, "done waiting on startup_mutex\n");

2381 
	`fio_gëtime
(&
this_°¨t
, 
NULL
);

2382 
À·
 = 
this_jobs
;

2383 
À·
 && !
fio_ab‹t
) {

2384 i‡(
	`mtime_sö˚_now
(&
this_°¨t
Ë> 
JOB_START_TIMEOUT
)

2387 
	`do_u¶ìp
(100000);

2389 
i
 = 0; i < 
this_jobs
; i++) {

2390 
td
 = 
m≠
[
i
];

2391 i‡(!
td
)

2393 i‡(
td
->
run°©e
 =
TD_INITIALIZED
) {

2394 
m≠
[
i
] = 
NULL
;

2395 
À·
--;

2396 } i‡(
td
->
run°©e
 >
TD_EXITED
) {

2397 
m≠
[
i
] = 
NULL
;

2398 
À·
--;

2399 
todo
--;

2400 
ƒ_ru¬ög
++;

2405 i‡(
À·
) {

2406 
	`log_îr
("fio: %d job%†ÁûedÅÿ°¨t\n", 
À·
,

2407 
À·
 > 1 ? "s" : "");

2408 
i
 = 0; i < 
this_jobs
; i++) {

2409 
td
 = 
m≠
[
i
];

2410 i‡(!
td
)

2412 
	`kûl
(
td
->
pid
, 
SIGTERM
);

2420 
	`f‹_óch_td
(
td
, 
i
) {

2421 i‡(
td
->
run°©e
 !
TD_INITIALIZED
)

2424 i‡(
	`ö_ømp_time
(
td
))

2425 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

2427 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

2428 
ƒ_ru¬ög
++;

2429 
ƒ_°¨ãd
--;

2430 
m_øã
 +
	`ddú_rw_sum
(
td
->
o
.
øãmö
);

2431 
t_øã
 +
	`ddú_rw_sum
(
td
->
o
.
øã
);

2432 
todo
--;

2433 
	`fio_muãx_up
(
td
->
muãx
);

2436 
	`ª≠_thªads
(&
ƒ_ru¬ög
, &
t_øã
, &
m_øã
);

2438 i‡(
todo
)

2439 
	`do_u¶ìp
(100000);

2442 
ƒ_ru¬ög
) {

2443 
	`ª≠_thªads
(&
ƒ_ru¬ög
, &
t_øã
, &
m_øã
);

2444 
	`do_u¶ìp
(10000);

2447 
	`fio_idÀ_¥of_°›
();

2449 
	`upd©e_io_ticks
();

2450 
	}
}

2452 
	$‰ì_disk_utû
()

2454 
	`disk_utû_¥u√_íåõs
();

2455 
	`hñ≥r_thªad_de°roy
();

2456 
	}
}

2458 
	$fio_backíd
(
sk_out
 *sk_out)

2460 
thªad_d©a
 *
td
;

2461 
i
;

2463 i‡(
exec_¥ofûe
) {

2464 i‡(
	`lﬂd_¥ofûe
(
exec_¥ofûe
))

2466 
	`‰ì
(
exec_¥ofûe
);

2467 
exec_¥ofûe
 = 
NULL
;

2469 i‡(!
thªad_numbî
)

2472 i‡(
wrôe_bw_log
) {

2473 
log_∑øms
 
p
 = {

2474 .
log_ty≥
 = 
IO_LOG_TYPE_BW
,

2477 
	`£tup_log
(&
agg_io_log
[
DDIR_READ
], &
p
, "agg-read_bw.log");

2478 
	`£tup_log
(&
agg_io_log
[
DDIR_WRITE
], &
p
, "agg-write_bw.log");

2479 
	`£tup_log
(&
agg_io_log
[
DDIR_TRIM
], &
p
, "agg-trim_bw.log");

2482 
°¨tup_muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_LOCKED
);

2483 i‡(
°¨tup_muãx
 =
NULL
)

2486 
	`£t_gíesis_time
();

2487 
	`°©_öô
();

2488 
	`hñ≥r_thªad_¸óã
(
°¨tup_muãx
, 
sk_out
);

2490 
cgroup_li°
 = 
	`smÆloc
((*cgroup_list));

2491 
	`INIT_FLIST_HEAD
(
cgroup_li°
);

2493 
	`run_thªads
(
sk_out
);

2495 
	`hñ≥r_thªad_exô
();

2497 i‡(!
fio_ab‹t
) {

2498 
	`__show_run_°©s
();

2499 i‡(
wrôe_bw_log
) {

2500 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

2501 
io_log
 *
log
 = 
agg_io_log
[
i
];

2503 
	`Êush_log
(
log
, 
Ál£
);

2504 
	`‰ì_log
(
log
);

2509 
	`f‹_óch_td
(
td
, 
i
) {

2510 
	`°ódy°©e_‰ì
(
td
);

2511 
	`fio_›ti⁄s_‰ì
(
td
);

2512 i‡(
td
->
rußge_£m
) {

2513 
	`fio_muãx_ªmove
(
td
->
rußge_£m
);

2514 
td
->
rußge_£m
 = 
NULL
;

2516 
	`fio_muãx_ªmove
(
td
->
muãx
);

2517 
td
->
muãx
 = 
NULL
;

2520 
	`‰ì_disk_utû
();

2521 
	`cgroup_kûl
(
cgroup_li°
);

2522 
	`s‰ì
(
cgroup_li°
);

2523 
	`s‰ì
(
cgroup_m¡
);

2525 
	`fio_muãx_ªmove
(
°¨tup_muãx
);

2526 
	`°©_exô
();

2527  
exô_vÆue
;

2528 
	}
}

	@/home/ysjin/Desktop/fio/fio/blktrace.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sys/°©.h
>

7 
	~<sys/io˘l.h
>

8 
	~<löux/fs.h
>

9 
	~<dúít.h
>

11 
	~"Êi°.h
"

12 
	~"fio.h
"

13 
	~"blkåa˚.h
"

14 
	~"blkåa˚_≠i.h
"

15 
	~"o¶ib/löux-dev-lookup.h
"

17 
	#TRACE_FIFO_SIZE
 8192

	)

22 
	$ªfûl_fifo
(
thªad_d©a
 *
td
, 
fifo
 *fifo, 
fd
)

24 
buf
[
TRACE_FIFO_SIZE
];

25 
tŸÆ
;

26 
ªt
;

28 
tŸÆ
 = (
buf
);

29 i‡(
tŸÆ
 > 
	`fifo_room
(
fifo
))

30 
tŸÆ
 = 
	`fifo_room
(
fifo
);

32 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
tŸÆ
);

33 i‡(
ªt
 < 0) {

34 
	`td_vîr‹
(
td
, 
î∫o
, "read blktrace file");

38 i‡(
ªt
 > 0)

39 
ªt
 = 
	`fifo_put
(
fifo
, 
buf
,Ñet);

41 
	`d¥öt
(
FD_BLKTRACE
, "ªfûl: fûÀd %d byãs\n", 
ªt
);

42  
ªt
;

43 
	}
}

48 
	$åa˚_fifo_gë
(
thªad_d©a
 *
td
, 
fifo
 *fifo, 
fd
,

49 *
buf
, 
Àn
)

51 i‡(
	`fifo_Àn
(
fifo
Ë< 
Àn
) {

52 
ªt
 = 
	`ªfûl_fifo
(
td
, 
fifo
, 
fd
);

54 i‡(
ªt
 < 0)

55  
ªt
;

58  
	`fifo_gë
(
fifo
, 
buf
, 
Àn
);

59 
	}
}

64 
	$disˇrd_pdu
(
thªad_d©a
 *
td
, 
fifo
 *fifo, 
fd
,

65 
blk_io_åa˚
 *
t
)

67 i‡(
t
->
pdu_Àn
 == 0)

70 
	`d¥öt
(
FD_BLKTRACE
, "disˇrdÖduÜí %u\n", 
t
->
pdu_Àn
);

71  
	`åa˚_fifo_gë
(
td
, 
fifo
, 
fd
, 
NULL
, 
t
->
pdu_Àn
);

72 
	}
}

78 
	$is_blkåa˚
(c⁄° *
fûíame
, *
√ed_sw≠
)

80 
blk_io_åa˚
 
t
;

81 
fd
, 
ªt
;

83 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

84 i‡(
fd
 < 0)

87 
ªt
 = 
	`ªad
(
fd
, &
t
, (t));

88 
	`˛o£
(
fd
);

90 i‡(
ªt
 < 0) {

91 
	`≥º‹
("read blktrace");

93 } i‡(
ªt
 !(
t
)) {

94 
	`log_îr
("fio: shortÑead on blktrace file\n");

98 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
) {

99 *
√ed_sw≠
 = 0;

106 
t
.
magic
 = 
	`fio_sw≠32
(t.magic);

107 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
) {

108 *
√ed_sw≠
 = 1;

113 
	}
}

115 
	#FMINORBITS
 20

	)

116 
	#FMINORMASK
 ((1U << 
FMINORBITS
Ë- 1)

	)

117 
	#FMAJOR
(
dev
Ë((Ë((devË>> 
FMINORBITS
))

	)

118 
	#FMINOR
(
dev
Ë((Ë((devË& 
FMINORMASK
))

	)

120 
	$åa˚_add_›í_˛o£_evít
(
thªad_d©a
 *
td
, 
fûío
, 
fûe_log_a˘
 
a˘i⁄
)

122 
io_põ˚
 *
ùo
;

124 
ùo
 = 
	`ˇŒoc
(1, (*ipo));

125 
	`öô_ùo
(
ùo
);

127 
ùo
->
ddú
 = 
DDIR_INVAL
;

128 
ùo
->
fûío
 = fileno;

129 
ùo
->
fûe_a˘i⁄
 = 
a˘i⁄
;

130 
	`Êi°_add_èû
(&
ùo
->
li°
, &
td
->
io_log_li°
);

131 
	}
}

133 
	$gë_dev_blocksize
(c⁄° *
dev
, *
bs
)

135 
fd
;

137 
fd
 = 
	`›í
(
dev
, 
O_RDONLY
);

138 i‡(
fd
 < 0)

141 i‡(
	`io˘l
(
fd
, 
BLKSSZGET
, 
bs
) < 0) {

142 
	`˛o£
(
fd
);

146 
	`˛o£
(
fd
);

148 
	}
}

150 
	$åa˚_add_fûe
(
thªad_d©a
 *
td
, 
__u32
 
devi˚
,

151 *
bs
)

153 
œ°_maj
, 
œ°_mö
, 
œ°_fûío
, 
œ°_bs
;

154 
maj
 = 
	`FMAJOR
(
devi˚
);

155 
mö
 = 
	`FMINOR
(
devi˚
);

156 
fio_fûe
 *
f
;

157 
i
;

158 
dev
[256];

160 i‡(
œ°_maj
 =
maj
 && 
œ°_mö
 =
mö
) {

161 *
bs
 = 
œ°_bs
;

162  
œ°_fûío
;

165 
œ°_maj
 = 
maj
;

166 
œ°_mö
 = 
mö
;

171 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

172 i‡(
f
->
maj‹
 =
maj
 && f->
mö‹
 =
mö
) {

173 
œ°_fûío
 = 
f
->
fûío
;

174 
œ°_bs
 = 
f
->
bs
;

175 
out
;

179 
	`°r˝y
(
dev
, "/dev");

180 i‡(
	`blkåa˚_lookup_devi˚
(
td
->
o
.
ª∂ay_ªdúe˘
, 
dev
, 
maj
, 
mö
)) {

181 
this_bs
;

182 
fûío
;

184 i‡(
td
->
o
.
ª∂ay_ªdúe˘
)

185 
	`d¥öt
(
FD_BLKTRACE
, "deviceÜookup: %d/%d\n overridden"

186 " wôh: %s\n", 
maj
, 
mö
,

187 
td
->
o
.
ª∂ay_ªdúe˘
);

189 
	`d¥öt
(
FD_BLKTRACE
, "devi˚Üookup: %d/%d\n", 
maj
, 
mö
);

191 
	`d¥öt
(
FD_BLKTRACE
, "add devi˚†%s\n", 
dev
);

192 
fûío
 = 
	`add_fûe_ex˛usive
(
td
, 
dev
);

194 i‡(
	`gë_dev_blocksize
(
dev
, &
this_bs
))

195 
this_bs
 = 512;

197 
td
->
o
.
›í_fûes
++;

198 
td
->
fûes
[
fûío
]->
maj‹
 = 
maj
;

199 
td
->
fûes
[
fûío
]->
mö‹
 = 
mö
;

200 
td
->
fûes
[
fûío
]->
bs
 = 
this_bs
;

201 
	`åa˚_add_›í_˛o£_evít
(
td
, 
fûío
, 
FIO_LOG_OPEN_FILE
);

203 
œ°_fûío
 = 
fûío
;

204 
œ°_bs
 = 
this_bs
;

207 
out
:

208 *
bs
 = 
œ°_bs
;

209  
œ°_fûío
;

210 
	}
}

212 
	$t_byãs_Æign
(
thªad_›ti⁄s
 *
o
, 
blk_io_åa˚
 *
t
)

214 i‡(!
o
->
ª∂ay_Æign
)

217 
t
->
byãs
 = (t->byã†+ 
o
->
ª∂ay_Æign
 - 1) & ~(o->replay_align - 1);

218 
	}
}

223 
	$°‹e_ùo
(
thªad_d©a
 *
td
, 
off£t
,

224 
byãs
, 
rw
, 
âime
,

225 
fûío
, 
bs
)

227 
io_põ˚
 *
ùo
 = 
	`mÆloc
((*ipo));

229 
	`öô_ùo
(
ùo
);

231 
ùo
->
off£t
 = off£à* 
bs
;

232 i‡(
td
->
o
.
ª∂ay_sˇÀ
)

233 
ùo
->
off£t
 = ipo->off£à/ 
td
->
o
.
ª∂ay_sˇÀ
;

234 
	`ùo_byãs_Æign
(
td
->
o
.
ª∂ay_Æign
, 
ùo
);

235 
ùo
->
Àn
 = 
byãs
;

236 
ùo
->
dñay
 = 
âime
 / 1000;

237 i‡(
rw
)

238 
ùo
->
ddú
 = 
DDIR_WRITE
;

240 
ùo
->
ddú
 = 
DDIR_READ
;

241 
ùo
->
fûío
 = fileno;

243 
	`d¥öt
(
FD_BLKTRACE
, "store ddir=%d, off=%llu,Üen=%lu, delay=%lu\n",

244 
ùo
->
ddú
, ipo->
off£t
,

245 
ùo
->
Àn
, ipo->
dñay
);

246 
	`queue_io_põ˚
(
td
, 
ùo
);

247 
	}
}

249 
	$h™dÀ_åa˚_nŸify
(
blk_io_åa˚
 *
t
)

251 
t
->
a˘i⁄
) {

252 
BLK_TN_PROCESS
:

253 
	`d¥öt
(
FD_BLKTRACE
, "gotÖrocessÇotify: %x, %d\n",

254 
t
->
a˘i⁄
,Å->
pid
);

256 
BLK_TN_TIMESTAMP
:

257 
	`d¥öt
(
FD_BLKTRACE
, "gotÅimestampÇotify: %x, %d\n",

258 
t
->
a˘i⁄
,Å->
pid
);

260 
BLK_TN_MESSAGE
:

263 
	`d¥öt
(
FD_BLKTRACE
, "unknow¿åa˚á˘ %x\n", 
t
->
a˘i⁄
);

266 
	}
}

268 
	$h™dÀ_åa˚_disˇrd
(
thªad_d©a
 *
td
,

269 
blk_io_åa˚
 *
t
,

270 
âime
,

271 *
ios
, *
rw_bs
)

273 
io_põ˚
 *
ùo
 = 
	`mÆloc
((*ipo));

274 
bs
;

275 
fûío
;

277 
	`öô_ùo
(
ùo
);

278 
fûío
 = 
	`åa˚_add_fûe
(
td
, 
t
->
devi˚
, &
bs
);

280 
ios
[
DDIR_TRIM
]++;

281 i‡(
t
->
byãs
 > 
rw_bs
[
DDIR_TRIM
])

282 
rw_bs
[
DDIR_TRIM
] = 
t
->
byãs
;

284 
td
->
o
.
size
 +
t
->
byãs
;

286 
	`mem£t
(
ùo
, 0, (*ipo));

287 
	`INIT_FLIST_HEAD
(&
ùo
->
li°
);

289 
ùo
->
off£t
 = 
t
->
£˘‹
 * 
bs
;

290 i‡(
td
->
o
.
ª∂ay_sˇÀ
)

291 
ùo
->
off£t
 = ipo->off£à/ 
td
->
o
.
ª∂ay_sˇÀ
;

292 
	`ùo_byãs_Æign
(
td
->
o
.
ª∂ay_Æign
, 
ùo
);

293 
ùo
->
Àn
 = 
t
->
byãs
;

294 
ùo
->
dñay
 = 
âime
 / 1000;

295 
ùo
->
ddú
 = 
DDIR_TRIM
;

296 
ùo
->
fûío
 = fileno;

298 
	`d¥öt
(
FD_BLKTRACE
, "store discard, off=%llu,Üen=%lu, delay=%lu\n",

299 
ùo
->
off£t
, ipo->
Àn
,

300 
ùo
->
dñay
);

301 
	`queue_io_põ˚
(
td
, 
ùo
);

302 
	}
}

304 
	$h™dÀ_åa˚_fs
(
thªad_d©a
 *
td
, 
blk_io_åa˚
 *
t
,

305 
âime
, *
ios
,

306 *
rw_bs
)

308 
bs
;

309 
rw
;

310 
fûío
;

312 
fûío
 = 
	`åa˚_add_fûe
(
td
, 
t
->
devi˚
, &
bs
);

314 
rw
 = (
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
)) != 0;

316 i‡(
t
->
byãs
 > 
rw_bs
[
rw
])

317 
rw_bs
[
rw
] = 
t
->
byãs
;

319 
ios
[
rw
]++;

320 
td
->
o
.
size
 +
t
->
byãs
;

321 
	`°‹e_ùo
(
td
, 
t
->
£˘‹
,Å->
byãs
, 
rw
, 
âime
, 
fûío
, 
bs
);

322 
	}
}

328 
	$h™dÀ_åa˚
(
thªad_d©a
 *
td
, 
blk_io_åa˚
 *
t
,

329 *
ios
, *
bs
)

331 
œ°_âime
;

332 
dñay
 = 0;

334 i‡((
t
->
a˘i⁄
 & 0xffffË!
__BLK_TA_QUEUE
)

337 i‡(!(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))) {

338 i‡(!
œ°_âime
 || 
td
->
o
.
no_°Æl
) {

339 
œ°_âime
 = 
t
->
time
;

340 
dñay
 = 0;

342 
dñay
 = 
t
->
time
 - 
œ°_âime
;

343 
œ°_âime
 = 
t
->
time
;

347 
	`t_byãs_Æign
(&
td
->
o
, 
t
);

349 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

350 
	`h™dÀ_åa˚_nŸify
(
t
);

351 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_DISCARD
))

352 
	`h™dÀ_åa˚_disˇrd
(
td
, 
t
, 
dñay
, 
ios
, 
bs
);

354 
	`h™dÀ_åa˚_fs
(
td
, 
t
, 
dñay
, 
ios
, 
bs
);

355 
	}
}

357 
	$byãsw≠_åa˚
(
blk_io_åa˚
 *
t
)

359 
t
->
magic
 = 
	`fio_sw≠32
(t->magic);

360 
t
->
£quí˚
 = 
	`fio_sw≠32
(t->sequence);

361 
t
->
time
 = 
	`fio_sw≠64
(t->time);

362 
t
->
£˘‹
 = 
	`fio_sw≠64
(t->sector);

363 
t
->
byãs
 = 
	`fio_sw≠32
(t->bytes);

364 
t
->
a˘i⁄
 = 
	`fio_sw≠32
(t->action);

365 
t
->
pid
 = 
	`fio_sw≠32
(t->pid);

366 
t
->
devi˚
 = 
	`fio_sw≠32
(t->device);

367 
t
->
˝u
 = 
	`fio_sw≠32
(t->cpu);

368 
t
->
îr‹
 = 
	`fio_sw≠16
(t->error);

369 
t
->
pdu_Àn
 = 
	`fio_sw≠16
(t->pdu_len);

370 
	}
}

372 
	$t_is_wrôe
(
blk_io_åa˚
 *
t
)

374  (
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
 | 
BLK_TC_DISCARD
)) != 0;

375 
	}
}

377 
fio_ddú
 
	$t_gë_ddú
(
blk_io_åa˚
 *
t
)

379 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_READ
))

380  
DDIR_READ
;

381 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
))

382  
DDIR_WRITE
;

383 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_DISCARD
))

384  
DDIR_TRIM
;

386  
DDIR_INVAL
;

387 
	}
}

389 
	$dïth_öc
(
blk_io_åa˚
 *
t
, *
dïth
)

391 
fio_ddú
 
ddú
;

393 
ddú
 = 
	`t_gë_ddú
(
t
);

394 i‡(
ddú
 !
DDIR_INVAL
)

395 
dïth
[
ddú
]++;

396 
	}
}

398 
	$dïth_dec
(
blk_io_åa˚
 *
t
, *
dïth
)

400 
fio_ddú
 
ddú
;

402 
ddú
 = 
	`t_gë_ddú
(
t
);

403 i‡(
ddú
 !
DDIR_INVAL
)

404 
dïth
[
ddú
]--;

405 
	}
}

407 
	$dïth_íd
(
blk_io_åa˚
 *
t
, *
this_dïth
, *
dïth
)

409 
fio_ddú
 
ddú
 = 
DDIR_INVAL
;

411 
ddú
 = 
	`t_gë_ddú
(
t
);

412 i‡(
ddú
 !
DDIR_INVAL
) {

413 
dïth
[
ddú
] = 
	`max
(dïth[ddú], 
this_dïth
[ddir]);

414 
this_dïth
[
ddú
] = 0;

416 
	}
}

422 
	$lﬂd_blkåa˚
(
thªad_d©a
 *
td
, c⁄° *
fûíame
, 
√ed_sw≠
)

424 
blk_io_åa˚
 
t
;

425 
ios
[
DDIR_RWDIR_CNT
], 
skù≥d_wrôes
;

426 
rw_bs
[
DDIR_RWDIR_CNT
];

427 
fifo
 *fifo;

428 
fd
, 
i
, 
ﬁd_°©e
;

429 
fio_fûe
 *
f
;

430 
this_dïth
[
DDIR_RWDIR_CNT
], 
dïth
[DDIR_RWDIR_CNT], 
max_dïth
;

432 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

433 i‡(
fd
 < 0) {

434 
	`td_vîr‹
(
td
, 
î∫o
, "open blktrace file");

438 
fifo
 = 
	`fifo_Æloc
(
TRACE_FIFO_SIZE
);

440 
ﬁd_°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_SETTING_UP
);

442 
td
->
o
.
size
 = 0;

444 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

445 
ios
[
i
] = 0;

446 
rw_bs
[
i
] = 0;

447 
this_dïth
[
i
] = 0;

448 
dïth
[
i
] = 0;

451 
skù≥d_wrôes
 = 0;

453 
ªt
 = 
	`åa˚_fifo_gë
(
td
, 
fifo
, 
fd
, &
t
, (t));

455 i‡(
ªt
 < 0)

456 
îr
;

457 i‡(!
ªt
)

459 i‡(
ªt
 < (Ë(
t
)) {

460 
	`log_îr
("fio: short fifo get\n");

464 i‡(
√ed_sw≠
)

465 
	`byãsw≠_åa˚
(&
t
);

467 i‡((
t
.
magic
 & 0xffffff00Ë!
BLK_IO_TRACE_MAGIC
) {

468 
	`log_îr
("fio: bad magic in blktrace data: %x\n",

469 
t
.
magic
);

470 
îr
;

472 i‡((
t
.
magic
 & 0xffË!
BLK_IO_TRACE_VERSION
) {

473 
	`log_îr
("fio: bad blktrace version %d\n",

474 
t
.
magic
 & 0xff);

475 
îr
;

477 
ªt
 = 
	`disˇrd_pdu
(
td
, 
fifo
, 
fd
, &
t
);

478 i‡(
ªt
 < 0) {

479 
	`td_vîr‹
(
td
, 
ªt
, "blktraceÜseek");

480 
îr
;

481 } i‡(
t
.
pdu_Àn
 !
ªt
) {

482 
	`log_îr
("fio: disˇrded %d o‡%d\n", 
ªt
, 
t
.
pdu_Àn
);

483 
îr
;

485 i‡((
t
.
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
)) == 0) {

486 i‡((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_QUEUE
)

487 
	`dïth_öc
(&
t
, 
this_dïth
);

488 i‡(((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_BACKMERGE
) ||

489 ((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_FRONTMERGE
))

490 
	`dïth_dec
(&
t
, 
this_dïth
);

491 i‡((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_COMPLETE
)

492 
	`dïth_íd
(&
t
, 
this_dïth
, 
dïth
);

494 i‡(
	`t_is_wrôe
(&
t
Ë&& 
ªad_⁄ly
) {

495 
skù≥d_wrôes
++;

500 
	`h™dÀ_åa˚
(
td
, &
t
, 
ios
, 
rw_bs
);

503 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

504 
	`åa˚_add_›í_˛o£_evít
(
td
, 
f
->
fûío
, 
FIO_LOG_CLOSE_FILE
);

506 
	`fifo_‰ì
(
fifo
);

507 
	`˛o£
(
fd
);

509 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

511 i‡(!
td
->
fûes_ödex
) {

512 
	`log_îr
("fio: didÇot findÑeplay device(s)\n");

520 
max_dïth
 = 0;

521 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

522 i‡(
dïth
[
i
] > 1024)

523 
dïth
[
i
] = 1024;

524 i‡(!
dïth
[
i
] && 
ios
[i])

525 
dïth
[
i
] = 1;

526 
max_dïth
 = 
	`max
(
dïth
[
i
], max_depth);

529 i‡(
skù≥d_wrôes
)

530 
	`log_îr
("fio: %s skipsÑeplay of %lu writes dueÅoÑead-only\n",

531 
td
->
o
.
«me
, 
skù≥d_wrôes
);

533 i‡(!
ios
[
DDIR_READ
] && !ios[
DDIR_WRITE
]) {

534 
	`log_îr
("fio: foundÇo ios in blktrace data\n");

536 } i‡(
ios
[
DDIR_READ
] && !ios[
DDIR_WRITE
]) {

537 
td
->
o
.
td_ddú
 = 
TD_DDIR_READ
;

538 
td
->
o
.
max_bs
[
DDIR_READ
] = 
rw_bs
[DDIR_READ];

539 } i‡(!
ios
[
DDIR_READ
] && ios[
DDIR_WRITE
]) {

540 
td
->
o
.
td_ddú
 = 
TD_DDIR_WRITE
;

541 
td
->
o
.
max_bs
[
DDIR_WRITE
] = 
rw_bs
[DDIR_WRITE];

543 
td
->
o
.
td_ddú
 = 
TD_DDIR_RW
;

544 
td
->
o
.
max_bs
[
DDIR_READ
] = 
rw_bs
[DDIR_READ];

545 
td
->
o
.
max_bs
[
DDIR_WRITE
] = 
rw_bs
[DDIR_WRITE];

546 
td
->
o
.
max_bs
[
DDIR_TRIM
] = 
rw_bs
[DDIR_TRIM];

554 i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
odúe˘
Ë&& !(
	`td_mö_bs
(td) & 4095))

555 
td
->
o
.
odúe˘
 = 1;

560 i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
iodïth
))

561 
td
->
o
.
iodïth
 =Åd->o.
iodïth_low
 = 
max_dïth
;

564 
îr
:

565 
	`˛o£
(
fd
);

566 
	`fifo_‰ì
(
fifo
);

568 
	}
}

	@/home/ysjin/Desktop/fio/fio/blktrace.h

1 #i‚de‡
FIO_BLKTRACE_H


2 
	#FIO_BLKTRACE_H


	)

4 #ifde‡
FIO_HAVE_BLKTRACE


6 
is_blkåa˚
(const *, *);

7 
lﬂd_blkåa˚
(
thªad_d©a
 *, const *, );

11 
ölöe
 
	$is_blkåa˚
(c⁄° *
‚ame
, *
√ed_sw≠
)

14 
	}
}

16 
ölöe
 
	$lﬂd_blkåa˚
(
thªad_d©a
 *
td
, c⁄° *
‚ame
,

17 
√ed_sw≠
)

20 
	}
}

	@/home/ysjin/Desktop/fio/fio/blktrace_api.h

1 #i‚de‡
BLKTRACEAPI_H


2 
	#BLKTRACEAPI_H


	)

4 
	~<asm/ty≥s.h
>

10 
	mBLK_TC_READ
 = 1 << 0,

11 
	mBLK_TC_WRITE
 = 1 << 1,

12 
	mBLK_TC_BARRIER
 = 1 << 2,

13 
	mBLK_TC_SYNC
 = 1 << 3,

14 
	mBLK_TC_QUEUE
 = 1 << 4,

15 
	mBLK_TC_REQUEUE
 = 1 << 5,

16 
	mBLK_TC_ISSUE
 = 1 << 6,

17 
	mBLK_TC_COMPLETE
 = 1 << 7,

18 
	mBLK_TC_FS
 = 1 << 8,

19 
	mBLK_TC_PC
 = 1 << 9,

20 
	mBLK_TC_NOTIFY
 = 1 << 10,

21 
	mBLK_TC_AHEAD
 = 1 << 11,

22 
	mBLK_TC_META
 = 1 << 12,

23 
	mBLK_TC_DISCARD
 = 1 << 13,

24 
	mBLK_TC_DRV_DATA
 = 1 << 14,

26 
	mBLK_TC_END
 = 1 << 15,

29 
	#BLK_TC_SHIFT
 (16)

	)

30 
	#BLK_TC_ACT
(
a˘
Ë(◊˘Ë<< 
BLK_TC_SHIFT
)

	)

36 
	m__BLK_TA_QUEUE
 = 1,

37 
	m__BLK_TA_BACKMERGE
,

38 
	m__BLK_TA_FRONTMERGE
,

39 
	m__BLK_TA_GETRQ
,

40 
	m__BLK_TA_SLEEPRQ
,

41 
	m__BLK_TA_REQUEUE
,

42 
	m__BLK_TA_ISSUE
,

43 
	m__BLK_TA_COMPLETE
,

44 
	m__BLK_TA_PLUG
,

45 
	m__BLK_TA_UNPLUG_IO
,

46 
	m__BLK_TA_UNPLUG_TIMER
,

47 
	m__BLK_TA_INSERT
,

48 
	m__BLK_TA_SPLIT
,

49 
	m__BLK_TA_BOUNCE
,

50 
	m__BLK_TA_REMAP
,

51 
	m__BLK_TA_ABORT
,

52 
	m__BLK_TA_DRV_DATA
,

58 
	eblkåa˚_nŸify
 {

59 
	m__BLK_TN_PROCESS
 = 0,

60 
	m__BLK_TN_TIMESTAMP
,

61 
	m__BLK_TN_MESSAGE
,

67 
	#BLK_TA_QUEUE
 (
__BLK_TA_QUEUE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

68 
	#BLK_TA_BACKMERGE
 (
__BLK_TA_BACKMERGE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

69 
	#BLK_TA_FRONTMERGE
 (
__BLK_TA_FRONTMERGE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

70 
	#BLK_TA_GETRQ
 (
__BLK_TA_GETRQ
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

71 
	#BLK_TA_SLEEPRQ
 (
__BLK_TA_SLEEPRQ
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

72 
	#BLK_TA_REQUEUE
 (
__BLK_TA_REQUEUE
 | 
	`BLK_TC_ACT
(
BLK_TC_REQUEUE
))

	)

73 
	#BLK_TA_ISSUE
 (
__BLK_TA_ISSUE
 | 
	`BLK_TC_ACT
(
BLK_TC_ISSUE
))

	)

74 
	#BLK_TA_COMPLETE
 (
__BLK_TA_COMPLETE
| 
	`BLK_TC_ACT
(
BLK_TC_COMPLETE
))

	)

75 
	#BLK_TA_PLUG
 (
__BLK_TA_PLUG
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

76 
	#BLK_TA_UNPLUG_IO
 (
__BLK_TA_UNPLUG_IO
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

77 
	#BLK_TA_UNPLUG_TIMER
 (
__BLK_TA_UNPLUG_TIMER
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

78 
	#BLK_TA_INSERT
 (
__BLK_TA_INSERT
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

79 
	#BLK_TA_SPLIT
 (
__BLK_TA_SPLIT
)

	)

80 
	#BLK_TA_BOUNCE
 (
__BLK_TA_BOUNCE
)

	)

81 
	#BLK_TA_REMAP
 (
__BLK_TA_REMAP
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

82 
	#BLK_TA_DRV_DATA
 (
__BLK_TA_DRV_DATA
 | 
	`BLK_TC_ACT
(
BLK_TC_DRV_DATA
))

	)

84 
	#BLK_TN_PROCESS
 (
__BLK_TN_PROCESS
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

85 
	#BLK_TN_TIMESTAMP
 (
__BLK_TN_TIMESTAMP
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

86 
	#BLK_TN_MESSAGE
 (
__BLK_TN_MESSAGE
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

88 
	#BLK_IO_TRACE_MAGIC
 0x65617400

	)

89 
	#BLK_IO_TRACE_VERSION
 0x07

	)

94 
	sblk_io_åa˚
 {

95 
__u32
 
	mmagic
;

96 
__u32
 
	m£quí˚
;

97 
__u64
 
	mtime
;

98 
__u64
 
	m£˘‹
;

99 
__u32
 
	mbyãs
;

100 
__u32
 
	ma˘i⁄
;

101 
__u32
 
	mpid
;

102 
__u32
 
	mdevi˚
;

103 
__u32
 
	m˝u
;

104 
__u16
 
	mîr‹
;

105 
__u16
 
	mpdu_Àn
;

111 
	sblk_io_åa˚_ªm≠
 {

112 
__u32
 
	mdevi˚
;

113 
__u32
 
	mdevi˚_‰om
;

114 
__u64
 
	m£˘‹
;

120 
	sblk_u£r_åa˚_£tup
 {

121 
	m«me
[32];

122 
__u16
 
	ma˘_mask
;

123 
__u32
 
	mbuf_size
;

124 
__u32
 
	mbuf_ƒ
;

125 
__u64
 
	m°¨t_lba
;

126 
__u64
 
	míd_lba
;

127 
__u32
 
	mpid
;

	@/home/ysjin/Desktop/fio/fio/cairo_text_helpers.c

1 
	~<ˇúo.h
>

2 
	~<gtk/gtk.h
>

3 
	~<m©h.h
>

5 
	$døw_Æig√d_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

6 
f⁄tsize
, c⁄° *
ãxt
, 
Æignmít
)

8 
	#CENTERED
 0

	)

9 
	#LEFT_JUSTIFIED
 1

	)

10 
	#RIGHT_JUSTIFIED
 2

	)

12 
Á˘‹
, 
dúe˘i⁄
;

13 
ˇúo_ãxt_exã¡s_t
 
exã¡s
;

15 
Æignmít
) {

16 
CENTERED
:

17 
dúe˘i⁄
 = -1.0;

18 
Á˘‹
 = 0.5;

20 
RIGHT_JUSTIFIED
:

21 
dúe˘i⁄
 = -1.0;

22 
Á˘‹
 = 1.0;

24 
LEFT_JUSTIFIED
:

26 
dúe˘i⁄
 = 1.0;

27 
Á˘‹
 = 0.0;

30 
	`ˇúo_£À˘_f⁄t_Á˚
(
¸
, 
f⁄t
, 
CAIRO_FONT_SLANT_NORMAL
, 
CAIRO_FONT_WEIGHT_NORMAL
);

32 
	`ˇúo_£t_f⁄t_size
(
¸
, 
f⁄tsize
);

33 
	`ˇúo_ãxt_exã¡s
(
¸
, 
ãxt
, &
exã¡s
);

34 
x
 = x + 
dúe˘i⁄
 * (
Á˘‹
 * 
exã¡s
.
width
 +Éxã¡s.
x_bórög
);

35 
y
 = y - (
exã¡s
.
height
 / 2 +Éxã¡s.
y_bórög
);

37 
	`ˇúo_move_to
(
¸
, 
x
, 
y
);

38 
	`ˇúo_show_ãxt
(
¸
, 
ãxt
);

39 
	}
}

41 
	$døw_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

42 
f⁄tsize
, c⁄° *
ãxt
)

44 
	`døw_Æig√d_ãxt
(
¸
, 
f⁄t
, 
x
, 
y
, 
f⁄tsize
, 
ãxt
, 
CENTERED
);

45 
	}
}

47 
	$døw_right_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

48 
x
, 
y
,

49 
f⁄tsize
, c⁄° *
ãxt
)

51 
	`døw_Æig√d_ãxt
(
¸
, 
f⁄t
, 
x
, 
y
, 
f⁄tsize
, 
ãxt
, 
RIGHT_JUSTIFIED
);

52 
	}
}

54 
	$døw_À·_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

55 
x
, 
y
,

56 
f⁄tsize
, c⁄° *
ãxt
)

58 
	`døw_Æig√d_ãxt
(
¸
, 
f⁄t
, 
x
, 
y
, 
f⁄tsize
, 
ãxt
, 
LEFT_JUSTIFIED
);

59 
	}
}

61 
	$døw_vîtiˇl_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
,

62 
y
, 
f⁄tsize
,

63 c⁄° *
ãxt
)

65 
sx
, 
sy
;

66 
ˇúo_ãxt_exã¡s_t
 
exã¡s
;

68 
	`ˇúo_£À˘_f⁄t_Á˚
(
¸
, 
f⁄t
, 
CAIRO_FONT_SLANT_NORMAL
, 
CAIRO_FONT_WEIGHT_NORMAL
);

70 
	`ˇúo_£t_f⁄t_size
(
¸
, 
f⁄tsize
);

71 
	`ˇúo_ãxt_exã¡s
(
¸
, 
ãxt
, &
exã¡s
);

72 
sx
 = 
x
;

73 
sy
 = 
y
;

74 
y
 = y + (
exã¡s
.
width
 / 2.0 +Éxã¡s.
x_bórög
);

75 
x
 = x - (
exã¡s
.
height
 / 2.0 +Éxã¡s.
y_bórög
);

77 
	`ˇúo_move_to
(
¸
, 
x
, 
y
);

78 
	`ˇúo_ßve
(
¸
);

79 
	`ˇúo_å™¶©e
(
¸
, -
sx
, -
sy
);

80 
	`ˇúo_rŸ©e
(
¸
, -90.0 * 
M_PI
 / 180.0);

81 
	`ˇúo_å™¶©e
(
¸
, 
sx
, 
sy
);

82 
	`ˇúo_show_ãxt
(
¸
, 
ãxt
);

83 
	`ˇúo_ª°‹e
(
¸
);

84 
	}
}

	@/home/ysjin/Desktop/fio/fio/cairo_text_helpers.h

1 #i‚de‡
CAIRO_TEXT_HELPERS_H


2 
	#CAIRO_TEXT_HELPERS_H


	)

4 
døw_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

5 
f⁄tsize
, c⁄° *
ãxt
);

7 
døw_right_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

8 
x
, 
y
,

9 
f⁄tsize
, c⁄° *
ãxt
);

11 
døw_À·_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

12 
x
, 
y
,

13 
f⁄tsize
, c⁄° *
ãxt
);

15 
døw_vîtiˇl_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
,

16 
y
, 
f⁄tsize
,

17 c⁄° *
ãxt
);

	@/home/ysjin/Desktop/fio/fio/cconv.c

1 
	~<°rög.h
>

3 
	~"thªad_›ti⁄s.h
"

5 
	$°rög_to_˝u
(**
d°
, c⁄° 
uöt8_t
 *
§c
)

7 c⁄° *
__§c
 = (c⁄° *Ë
§c
;

9 i‡(
	`°æí
(
__§c
))

10 *
d°
 = 
	`°rdup
(
__§c
);

11 
	}
}

13 
	$__°rög_to_√t
(
uöt8_t
 *
d°
, c⁄° *
§c
, 
size_t
 
d°_size
)

15 i‡(
§c
) {

16 
d°
[
d°_size
 - 1] = '\0';

17 
	`°∫˝y
((*Ë
d°
, 
§c
, 
d°_size
 - 1);

19 
d°
[0] = '\0';

20 
	}
}

22 
	#°rög_to_√t
(
d°
, 
§c
Ë
	`__°rög_to_√t
((d°), (§c), (d°))

	)

24 
	$‰ì_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
)

26 
i
;

28 
	`‰ì
(
o
->
des¸ùti⁄
);

29 
	`‰ì
(
o
->
«me
);

30 
	`‰ì
(
o
->
waô_f‹
);

31 
	`‰ì
(
o
->
dúe˘‹y
);

32 
	`‰ì
(
o
->
fûíame
);

33 
	`‰ì
(
o
->
fûíame_f‹m©
);

34 
	`‰ì
(
o
->
›ídú
);

35 
	`‰ì
(
o
->
i€ngöe
);

36 
	`‰ì
(
o
->
mm≠fûe
);

37 
	`‰ì
(
o
->
ªad_iﬁog_fûe
);

38 
	`‰ì
(
o
->
wrôe_iﬁog_fûe
);

39 
	`‰ì
(
o
->
bw_log_fûe
);

40 
	`‰ì
(
o
->
œt_log_fûe
);

41 
	`‰ì
(
o
->
i›s_log_fûe
);

42 
	`‰ì
(
o
->
hi°_log_fûe
);

43 
	`‰ì
(
o
->
ª∂ay_ªdúe˘
);

44 
	`‰ì
(
o
->
exec_¥îun
);

45 
	`‰ì
(
o
->
exec_po°run
);

46 
	`‰ì
(
o
->
ioscheduÀr
);

47 
	`‰ì
(
o
->
¥ofûe
);

48 
	`‰ì
(
o
->
cgroup
);

50 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

51 
	`‰ì
(
o
->
bs•lô
[
i
]);

52 
	`‰ì
(
o
->
z⁄e_•lô
[
i
]);

54 
	}
}

56 
	$c⁄vît_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
,

57 
thªad_›ti⁄s_∑ck
 *
t›
)

59 
i
, 
j
;

61 
i
 = 0; i < 
NR_OPTS_SZ
; i++)

62 
o
->
£t_›ti⁄s
[
i
] = 
	`À64_to_˝u
(
t›
->set_options[i]);

64 
	`°rög_to_˝u
(&
o
->
des¸ùti⁄
, 
t›
->description);

65 
	`°rög_to_˝u
(&
o
->
«me
, 
t›
->name);

66 
	`°rög_to_˝u
(&
o
->
waô_f‹
, 
t›
->wait_for);

67 
	`°rög_to_˝u
(&
o
->
dúe˘‹y
, 
t›
->directory);

68 
	`°rög_to_˝u
(&
o
->
fûíame
, 
t›
->filename);

69 
	`°rög_to_˝u
(&
o
->
fûíame_f‹m©
, 
t›
->filename_format);

70 
	`°rög_to_˝u
(&
o
->
›ídú
, 
t›
->opendir);

71 
	`°rög_to_˝u
(&
o
->
i€ngöe
, 
t›
->ioengine);

72 
	`°rög_to_˝u
(&
o
->
mm≠fûe
, 
t›
->mmapfile);

73 
	`°rög_to_˝u
(&
o
->
ªad_iﬁog_fûe
, 
t›
->read_iolog_file);

74 
	`°rög_to_˝u
(&
o
->
wrôe_iﬁog_fûe
, 
t›
->write_iolog_file);

75 
	`°rög_to_˝u
(&
o
->
bw_log_fûe
, 
t›
->bw_log_file);

76 
	`°rög_to_˝u
(&
o
->
œt_log_fûe
, 
t›
->lat_log_file);

77 
	`°rög_to_˝u
(&
o
->
i›s_log_fûe
, 
t›
->iops_log_file);

78 
	`°rög_to_˝u
(&
o
->
hi°_log_fûe
, 
t›
->hist_log_file);

79 
	`°rög_to_˝u
(&
o
->
ª∂ay_ªdúe˘
, 
t›
->replay_redirect);

80 
	`°rög_to_˝u
(&
o
->
exec_¥îun
, 
t›
->exec_prerun);

81 
	`°rög_to_˝u
(&
o
->
exec_po°run
, 
t›
->exec_postrun);

82 
	`°rög_to_˝u
(&
o
->
ioscheduÀr
, 
t›
->ioscheduler);

83 
	`°rög_to_˝u
(&
o
->
¥ofûe
, 
t›
->profile);

84 
	`°rög_to_˝u
(&
o
->
cgroup
, 
t›
->cgroup);

86 
o
->
Ælow_¸óã
 = 
	`À32_to_˝u
(
t›
->allow_create);

87 
o
->
Ælow_mou¡ed_wrôe
 = 
	`À32_to_˝u
(
t›
->allow_mounted_write);

88 
o
->
td_ddú
 = 
	`À32_to_˝u
(
t›
->td_ddir);

89 
o
->
rw_£q
 = 
	`À32_to_˝u
(
t›
->rw_seq);

90 
o
->
kb_ba£
 = 
	`À32_to_˝u
(
t›
->kb_base);

91 
o
->
unô_ba£
 = 
	`À32_to_˝u
(
t›
->unit_base);

92 
o
->
ddú_£q_ƒ
 = 
	`À32_to_˝u
(
t›
->ddir_seq_nr);

93 
o
->
ddú_£q_add
 = 
	`À64_to_˝u
(
t›
->ddir_seq_add);

94 
o
->
iodïth
 = 
	`À32_to_˝u
(
t›
->iodepth);

95 
o
->
iodïth_low
 = 
	`À32_to_˝u
(
t›
->iodepth_low);

96 
o
->
iodïth_b©ch
 = 
	`À32_to_˝u
(
t›
->iodepth_batch);

97 
o
->
iodïth_b©ch_com∂ëe_mö
 = 
	`À32_to_˝u
(
t›
->iodepth_batch_complete_min);

98 
o
->
iodïth_b©ch_com∂ëe_max
 = 
	`À32_to_˝u
(
t›
->iodepth_batch_complete_max);

99 
o
->
£rülize_ovîœp
 = 
	`À32_to_˝u
(
t›
->serialize_overlap);

100 
o
->
size
 = 
	`À64_to_˝u
(
t›
->size);

101 
o
->
io_size
 = 
	`À64_to_˝u
(
t›
->io_size);

102 
o
->
size_≥r˚¡
 = 
	`À32_to_˝u
(
t›
->size_percent);

103 
o
->
fûl_devi˚
 = 
	`À32_to_˝u
(
t›
->fill_device);

104 
o
->
fûe_≠≥nd
 = 
	`À32_to_˝u
(
t›
->file_append);

105 
o
->
fûe_size_low
 = 
	`À64_to_˝u
(
t›
->file_size_low);

106 
o
->
fûe_size_high
 = 
	`À64_to_˝u
(
t›
->file_size_high);

107 
o
->
°¨t_off£t
 = 
	`À64_to_˝u
(
t›
->start_offset);

108 
o
->
°¨t_off£t_Æign
 = 
	`À64_to_˝u
(
t›
->start_offset_align);

109 
o
->
°¨t_off£t_≥r˚¡
 = 
	`À32_to_˝u
(
t›
->start_offset_percent);

111 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

112 
o
->
bs
[
i
] = 
	`À32_to_˝u
(
t›
->bs[i]);

113 
o
->
ba
[
i
] = 
	`À32_to_˝u
(
t›
->ba[i]);

114 
o
->
mö_bs
[
i
] = 
	`À32_to_˝u
(
t›
->min_bs[i]);

115 
o
->
max_bs
[
i
] = 
	`À32_to_˝u
(
t›
->max_bs[i]);

116 
o
->
bs•lô_ƒ
[
i
] = 
	`À32_to_˝u
(
t›
->bssplit_nr[i]);

118 i‡(
o
->
bs•lô_ƒ
[
i
]) {

119 
o
->
bs•lô
[
i
] = 
	`mÆloc
(o->
bs•lô_ƒ
[i] * (bssplit));

120 
j
 = 0; j < 
o
->
bs•lô_ƒ
[
i
]; j++) {

121 
o
->
bs•lô
[
i
][
j
].
bs
 = 
	`À32_to_˝u
(
t›
->bssplit[i][j].bs);

122 
o
->
bs•lô
[
i
][
j
].
≥rc
 = 
	`À32_to_˝u
(
t›
->bssplit[i][j].perc);

126 
o
->
z⁄e_•lô_ƒ
[
i
] = 
	`À32_to_˝u
(
t›
->zone_split_nr[i]);

128 i‡(
o
->
z⁄e_•lô_ƒ
[
i
]) {

129 
o
->
z⁄e_•lô
[
i
] = 
	`mÆloc
(o->
z⁄e_•lô_ƒ
[i] * (zone_split));

130 
j
 = 0; j < 
o
->
z⁄e_•lô_ƒ
[
i
]; j++) {

131 
o
->
z⁄e_•lô
[
i
][
j
].
ac˚ss_≥rc
 = 
t›
->zone_split[i][j].access_perc;

132 
o
->
z⁄e_•lô
[
i
][
j
].
size_≥rc
 = 
t›
->zone_split[i][j].size_perc;

136 
o
->
rwmix
[
i
] = 
	`À32_to_˝u
(
t›
->rwmix[i]);

137 
o
->
øã
[
i
] = 
	`À64_to_˝u
(
t›
->rate[i]);

138 
o
->
øãmö
[
i
] = 
	`À64_to_˝u
(
t›
->ratemin[i]);

139 
o
->
øã_i›s
[
i
] = 
	`À32_to_˝u
(
t›
->rate_iops[i]);

140 
o
->
øã_i›s_mö
[
i
] = 
	`À32_to_˝u
(
t›
->rate_iops_min[i]);

142 
o
->
≥rc_ønd
[
i
] = 
	`À32_to_˝u
(
t›
->perc_rand[i]);

145 
o
->
øãcy˛e
 = 
	`À32_to_˝u
(
t›
->ratecycle);

146 
o
->
io_submô_mode
 = 
	`À32_to_˝u
(
t›
->io_submit_mode);

147 
o
->
unique_fûíame
 = 
	`À32_to_˝u
(
t›
->unique_filename);

148 
o
->
ƒ_fûes
 = 
	`À32_to_˝u
(
t›
->nr_files);

149 
o
->
›í_fûes
 = 
	`À32_to_˝u
(
t›
->open_files);

150 
o
->
fûe_lock_mode
 = 
	`À32_to_˝u
(
t›
->file_lock_mode);

151 
o
->
odúe˘
 = 
	`À32_to_˝u
(
t›
->odirect);

152 
o
->
ﬂtomic
 = 
	`À32_to_˝u
(
t›
->oatomic);

153 
o
->
övÆid©e_ˇche
 = 
	`À32_to_˝u
(
t›
->invalidate_cache);

154 
o
->
¸óã_£rülize
 = 
	`À32_to_˝u
(
t›
->create_serialize);

155 
o
->
¸óã_fsync
 = 
	`À32_to_˝u
(
t›
->create_fsync);

156 
o
->
¸óã_⁄_›í
 = 
	`À32_to_˝u
(
t›
->create_on_open);

157 
o
->
¸óã_⁄ly
 = 
	`À32_to_˝u
(
t›
->create_only);

158 
o
->
íd_fsync
 = 
	`À32_to_˝u
(
t›
->end_fsync);

159 
o
->
¥e_ªad
 = 
	`À32_to_˝u
(
t›
->pre_read);

160 
o
->
sync_io
 = 
	`À32_to_˝u
(
t›
->sync_io);

161 
o
->
wrôe_höt
 = 
	`À32_to_˝u
(
t›
->write_hint);

162 
o
->
vîify
 = 
	`À32_to_˝u
(
t›
->verify);

163 
o
->
do_vîify
 = 
	`À32_to_˝u
(
t›
->do_verify);

164 
o
->
vîifys‹t
 = 
	`À32_to_˝u
(
t›
->verifysort);

165 
o
->
vîifys‹t_ƒ
 = 
	`À32_to_˝u
(
t›
->verifysort_nr);

166 
o
->
ex≥rimíèl_vîify
 = 
	`À32_to_˝u
(
t›
->experimental_verify);

167 
o
->
vîify_°©e
 = 
	`À32_to_˝u
(
t›
->verify_state);

168 
o
->
vîify_öãrvÆ
 = 
	`À32_to_˝u
(
t›
->verify_interval);

169 
o
->
vîify_off£t
 = 
	`À32_to_˝u
(
t›
->verify_offset);

171 
	`mem˝y
(
o
->
vîify_∑âîn
, 
t›
->vîify_∑âîn, 
MAX_PATTERN_SIZE
);

172 
	`mem˝y
(
o
->
buf„r_∑âîn
, 
t›
->buf„r_∑âîn, 
MAX_PATTERN_SIZE
);

174 
o
->
vîify_∑âîn_byãs
 = 
	`À32_to_˝u
(
t›
->verify_pattern_bytes);

175 
o
->
vîify_Áèl
 = 
	`À32_to_˝u
(
t›
->verify_fatal);

176 
o
->
vîify_dump
 = 
	`À32_to_˝u
(
t›
->verify_dump);

177 
o
->
vîify_async
 = 
	`À32_to_˝u
(
t›
->verify_async);

178 
o
->
vîify_b©ch
 = 
	`À32_to_˝u
(
t›
->verify_batch);

179 
o
->
u£_thªad
 = 
	`À32_to_˝u
(
t›
->use_thread);

180 
o
->
u∆ök
 = 
	`À32_to_˝u
(
t›
->unlink);

181 
o
->
u∆ök_óch_lo›
 = 
	`À32_to_˝u
(
t›
->unlink_each_loop);

182 
o
->
do_disk_utû
 = 
	`À32_to_˝u
(
t›
->do_disk_util);

183 
o
->
ovîride_sync
 = 
	`À32_to_˝u
(
t›
->override_sync);

184 
o
->
ønd_ª≥©abÀ
 = 
	`À32_to_˝u
(
t›
->rand_repeatable);

185 
o
->
ÆÃ™d_ª≥©abÀ
 = 
	`À32_to_˝u
(
t›
->allrand_repeatable);

186 
o
->
ønd_£ed
 = 
	`À64_to_˝u
(
t›
->rand_seed);

187 
o
->
log_avg_m£c
 = 
	`À32_to_˝u
(
t›
->log_avg_msec);

188 
o
->
log_hi°_m£c
 = 
	`À32_to_˝u
(
t›
->log_hist_msec);

189 
o
->
log_hi°_cﬂr£√ss
 = 
	`À32_to_˝u
(
t›
->log_hist_coarseness);

190 
o
->
log_max
 = 
	`À32_to_˝u
(
t›
->log_max);

191 
o
->
log_off£t
 = 
	`À32_to_˝u
(
t›
->log_offset);

192 
o
->
log_gz
 = 
	`À32_to_˝u
(
t›
->log_gz);

193 
o
->
log_gz_°‹e
 = 
	`À32_to_˝u
(
t›
->log_gz_store);

194 
o
->
log_unix_ïoch
 = 
	`À32_to_˝u
(
t›
->log_unix_epoch);

195 
o
->
n‹™domm≠
 = 
	`À32_to_˝u
(
t›
->norandommap);

196 
o
->
so·øndomm≠
 = 
	`À32_to_˝u
(
t›
->softrandommap);

197 
o
->
bs_u«lig√d
 = 
	`À32_to_˝u
(
t›
->bs_unaligned);

198 
o
->
fsync_⁄_˛o£
 = 
	`À32_to_˝u
(
t›
->fsync_on_close);

199 
o
->
bs_is_£q_ønd
 = 
	`À32_to_˝u
(
t›
->bs_is_seq_rand);

200 
o
->
øndom_di°ributi⁄
 = 
	`À32_to_˝u
(
t›
->random_distribution);

201 
o
->
exôÆl_îr‹
 = 
	`À32_to_˝u
(
t›
->exitall_error);

202 
o
->
zùf_thëa
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->zùf_thëa.u.
i
));

203 
o
->
∑ªto_h
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->∑ªto_h.u.
i
));

204 
o
->
gauss_dev
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->gauss_dev.u.
i
));

205 
o
->
øndom_gíî©‹
 = 
	`À32_to_˝u
(
t›
->random_generator);

206 
o
->
hugïage_size
 = 
	`À32_to_˝u
(
t›
->hugepage_size);

207 
o
->
rw_mö_bs
 = 
	`À32_to_˝u
(
t›
->rw_min_bs);

208 
o
->
thöktime
 = 
	`À32_to_˝u
(
t›
->thinktime);

209 
o
->
thöktime_•ö
 = 
	`À32_to_˝u
(
t›
->thinktime_spin);

210 
o
->
thöktime_blocks
 = 
	`À32_to_˝u
(
t›
->thinktime_blocks);

211 
o
->
fsync_blocks
 = 
	`À32_to_˝u
(
t›
->fsync_blocks);

212 
o
->
fd©async_blocks
 = 
	`À32_to_˝u
(
t›
->fdatasync_blocks);

213 
o
->
b¨rõr_blocks
 = 
	`À32_to_˝u
(
t›
->barrier_blocks);

215 
o
->
vîify_backlog
 = 
	`À64_to_˝u
(
t›
->verify_backlog);

216 
o
->
°¨t_dñay
 = 
	`À64_to_˝u
(
t›
->start_delay);

217 
o
->
°¨t_dñay_high
 = 
	`À64_to_˝u
(
t›
->start_delay_high);

218 
o
->
timeout
 = 
	`À64_to_˝u
(
t›
->timeout);

219 
o
->
ømp_time
 = 
	`À64_to_˝u
(
t›
->ramp_time);

220 
o
->
ss_dur
 = 
	`À64_to_˝u
(
t›
->ss_dur);

221 
o
->
ss_ømp_time
 = 
	`À64_to_˝u
(
t›
->ss_ramp_time);

222 
o
->
ss_°©e
 = 
	`À32_to_˝u
(
t›
->ss_state);

223 
o
->
ss_limô
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->ss_limô.u.
i
));

224 
o
->
z⁄e_ønge
 = 
	`À64_to_˝u
(
t›
->zone_range);

225 
o
->
z⁄e_size
 = 
	`À64_to_˝u
(
t›
->zone_size);

226 
o
->
z⁄e_skù
 = 
	`À64_to_˝u
(
t›
->zone_skip);

227 
o
->
lockmem
 = 
	`À64_to_˝u
(
t›
->lockmem);

228 
o
->
off£t_ö¸emít
 = 
	`À64_to_˝u
(
t›
->offset_increment);

229 
o
->
numbî_ios
 = 
	`À64_to_˝u
(
t›
->number_ios);

231 
o
->
ovîwrôe
 = 
	`À32_to_˝u
(
t›
->overwrite);

232 
o
->
bw_avg_time
 = 
	`À32_to_˝u
(
t›
->bw_avg_time);

233 
o
->
i›s_avg_time
 = 
	`À32_to_˝u
(
t›
->iops_avg_time);

234 
o
->
lo›s
 = 
	`À32_to_˝u
(
t›
->loops);

235 
o
->
mem_ty≥
 = 
	`À32_to_˝u
(
t›
->mem_type);

236 
o
->
mem_Æign
 = 
	`À32_to_˝u
(
t›
->mem_align);

237 
o
->
°⁄ewÆl
 = 
	`À32_to_˝u
(
t›
->stonewall);

238 
o
->
√w_group
 = 
	`À32_to_˝u
(
t›
->new_group);

239 
o
->
numjobs
 = 
	`À32_to_˝u
(
t›
->numjobs);

240 
o
->
˝us_Ælowed_pﬁicy
 = 
	`À32_to_˝u
(
t›
->cpus_allowed_policy);

241 
o
->
gpu_dev_id
 = 
	`À32_to_˝u
(
t›
->gpu_dev_id);

242 
o
->
iﬁog
 = 
	`À32_to_˝u
(
t›
->iolog);

243 
o
->
rwmixcy˛e
 = 
	`À32_to_˝u
(
t›
->rwmixcycle);

244 
o
->
ni˚
 = 
	`À32_to_˝u
(
t›
->nice);

245 
o
->
i›rio
 = 
	`À32_to_˝u
(
t›
->ioprio);

246 
o
->
i›rio_˛ass
 = 
	`À32_to_˝u
(
t›
->ioprio_class);

247 
o
->
fûe_£rvi˚_ty≥
 = 
	`À32_to_˝u
(
t›
->file_service_type);

248 
o
->
group_ªp‹tög
 = 
	`À32_to_˝u
(
t›
->group_reporting);

249 
o
->
°©s
 = 
	`À32_to_˝u
(
t›
->stats);

250 
o
->
Ádvi£_höt
 = 
	`À32_to_˝u
(
t›
->fadvise_hint);

251 
o
->
ÁŒoˇã_mode
 = 
	`À32_to_˝u
(
t›
->fallocate_mode);

252 
o
->
zîo_buf„rs
 = 
	`À32_to_˝u
(
t›
->zero_buffers);

253 
o
->
ªfûl_buf„rs
 = 
	`À32_to_˝u
(
t›
->refill_buffers);

254 
o
->
s¸ambÀ_buf„rs
 = 
	`À32_to_˝u
(
t›
->scramble_buffers);

255 
o
->
buf„r_∑âîn_byãs
 = 
	`À32_to_˝u
(
t›
->buffer_pattern_bytes);

256 
o
->
time_ba£d
 = 
	`À32_to_˝u
(
t›
->time_based);

257 
o
->
dißbÀ_œt
 = 
	`À32_to_˝u
(
t›
->disable_lat);

258 
o
->
dißbÀ_˛©
 = 
	`À32_to_˝u
(
t›
->disable_clat);

259 
o
->
dißbÀ_¶©
 = 
	`À32_to_˝u
(
t›
->disable_slat);

260 
o
->
dißbÀ_bw
 = 
	`À32_to_˝u
(
t›
->disable_bw);

261 
o
->
unifõd_rw_ªp
 = 
	`À32_to_˝u
(
t›
->unified_rw_rep);

262 
o
->
gtod_ªdu˚
 = 
	`À32_to_˝u
(
t›
->gtod_reduce);

263 
o
->
gtod_˝u
 = 
	`À32_to_˝u
(
t›
->gtod_cpu);

264 
o
->
˛ocksour˚
 = 
	`À32_to_˝u
(
t›
->clocksource);

265 
o
->
no_°Æl
 = 
	`À32_to_˝u
(
t›
->no_stall);

266 
o
->
åim_≥r˚¡age
 = 
	`À32_to_˝u
(
t›
->trim_percentage);

267 
o
->
åim_b©ch
 = 
	`À32_to_˝u
(
t›
->trim_batch);

268 
o
->
åim_zîo
 = 
	`À32_to_˝u
(
t›
->trim_zero);

269 
o
->
˛©_≥r˚¡ûes
 = 
	`À32_to_˝u
(
t›
->clat_percentiles);

270 
o
->
œt_≥r˚¡ûes
 = 
	`À32_to_˝u
(
t›
->lat_percentiles);

271 
o
->
≥r˚¡ûe_¥ecisi⁄
 = 
	`À32_to_˝u
(
t›
->percentile_precision);

272 
o
->
sig_figs
 = 
	`À32_to_˝u
(
t›
->sig_figs);

273 
o
->
c⁄töue_⁄_îr‹
 = 
	`À32_to_˝u
(
t›
->continue_on_error);

274 
o
->
cgroup_weight
 = 
	`À32_to_˝u
(
t›
->cgroup_weight);

275 
o
->
cgroup_nodñëe
 = 
	`À32_to_˝u
(
t›
->cgroup_nodelete);

276 
o
->
uid
 = 
	`À32_to_˝u
(
t›
->uid);

277 
o
->
gid
 = 
	`À32_to_˝u
(
t›
->gid);

278 
o
->
Êow_id
 = 
	`__À32_to_˝u
(
t›
->flow_id);

279 
o
->
Êow
 = 
	`__À32_to_˝u
(
t›
->flow);

280 
o
->
Êow_w©îm¨k
 = 
	`__À32_to_˝u
(
t›
->flow_watermark);

281 
o
->
Êow_¶ìp
 = 
	`À32_to_˝u
(
t›
->flow_sleep);

282 
o
->
sync_fûe_ønge
 = 
	`À32_to_˝u
(
t›
->sync_file_range);

283 
o
->
œãncy_èrgë
 = 
	`À64_to_˝u
(
t›
->latency_target);

284 
o
->
œãncy_wödow
 = 
	`À64_to_˝u
(
t›
->latency_window);

285 
o
->
max_œãncy
 = 
	`À64_to_˝u
(
t›
->max_latency);

286 
o
->
œãncy_≥r˚¡ûe
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->œãncy_≥r˚¡ûe.u.
i
));

287 
o
->
com¥ess_≥r˚¡age
 = 
	`À32_to_˝u
(
t›
->compress_percentage);

288 
o
->
com¥ess_chunk
 = 
	`À32_to_˝u
(
t›
->compress_chunk);

289 
o
->
dedu≥_≥r˚¡age
 = 
	`À32_to_˝u
(
t›
->dedupe_percentage);

290 
o
->
block_îr‹_hi°
 = 
	`À32_to_˝u
(
t›
->block_error_hist);

291 
o
->
ª∂ay_Æign
 = 
	`À32_to_˝u
(
t›
->replay_align);

292 
o
->
ª∂ay_sˇÀ
 = 
	`À32_to_˝u
(
t›
->replay_scale);

293 
o
->
≥r_job_logs
 = 
	`À32_to_˝u
(
t›
->per_job_logs);

294 
o
->
wrôe_bw_log
 = 
	`À32_to_˝u
(
t›
->write_bw_log);

295 
o
->
wrôe_œt_log
 = 
	`À32_to_˝u
(
t›
->write_lat_log);

296 
o
->
wrôe_i›s_log
 = 
	`À32_to_˝u
(
t›
->write_iops_log);

297 
o
->
wrôe_hi°_log
 = 
	`À32_to_˝u
(
t›
->write_hist_log);

299 
o
->
åim_backlog
 = 
	`À64_to_˝u
(
t›
->trim_backlog);

300 
o
->
øã_¥o˚ss
 = 
	`À32_to_˝u
(
t›
->rate_process);

301 
o
->
øã_ign_thök
 = 
	`À32_to_˝u
(
t›
->rate_ign_think);

303 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

304 
o
->
≥r˚¡ûe_li°
[
i
].
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->percentile_list[i].u.i));

306 
uöt8_t
 
˝umask
[
FIO_TOP_STR_MAX
];

307 
uöt8_t
 
vîify_˝umask
[
FIO_TOP_STR_MAX
];

308 
uöt8_t
 
log_gz_˝umask
[
FIO_TOP_STR_MAX
];

310 
	}
}

312 
	$c⁄vît_thªad_›ti⁄s_to_√t
(
thªad_›ti⁄s_∑ck
 *
t›
,

313 
thªad_›ti⁄s
 *
o
)

315 
i
, 
j
;

317 
i
 = 0; i < 
NR_OPTS_SZ
; i++)

318 
t›
->
£t_›ti⁄s
[
i
] = 
	`˝u_to_À64
(
o
->set_options[i]);

320 
	`°rög_to_√t
(
t›
->
des¸ùti⁄
, 
o
->description);

321 
	`°rög_to_√t
(
t›
->
«me
, 
o
->name);

322 
	`°rög_to_√t
(
t›
->
waô_f‹
, 
o
->wait_for);

323 
	`°rög_to_√t
(
t›
->
dúe˘‹y
, 
o
->directory);

324 
	`°rög_to_√t
(
t›
->
fûíame
, 
o
->filename);

325 
	`°rög_to_√t
(
t›
->
fûíame_f‹m©
, 
o
->filename_format);

326 
	`°rög_to_√t
(
t›
->
›ídú
, 
o
->opendir);

327 
	`°rög_to_√t
(
t›
->
i€ngöe
, 
o
->ioengine);

328 
	`°rög_to_√t
(
t›
->
mm≠fûe
, 
o
->mmapfile);

329 
	`°rög_to_√t
(
t›
->
ªad_iﬁog_fûe
, 
o
->read_iolog_file);

330 
	`°rög_to_√t
(
t›
->
wrôe_iﬁog_fûe
, 
o
->write_iolog_file);

331 
	`°rög_to_√t
(
t›
->
bw_log_fûe
, 
o
->bw_log_file);

332 
	`°rög_to_√t
(
t›
->
œt_log_fûe
, 
o
->lat_log_file);

333 
	`°rög_to_√t
(
t›
->
i›s_log_fûe
, 
o
->iops_log_file);

334 
	`°rög_to_√t
(
t›
->
hi°_log_fûe
, 
o
->hist_log_file);

335 
	`°rög_to_√t
(
t›
->
ª∂ay_ªdúe˘
, 
o
->replay_redirect);

336 
	`°rög_to_√t
(
t›
->
exec_¥îun
, 
o
->exec_prerun);

337 
	`°rög_to_√t
(
t›
->
exec_po°run
, 
o
->exec_postrun);

338 
	`°rög_to_√t
(
t›
->
ioscheduÀr
, 
o
->ioscheduler);

339 
	`°rög_to_√t
(
t›
->
¥ofûe
, 
o
->profile);

340 
	`°rög_to_√t
(
t›
->
cgroup
, 
o
->cgroup);

342 
t›
->
Ælow_¸óã
 = 
	`˝u_to_À32
(
o
->allow_create);

343 
t›
->
Ælow_mou¡ed_wrôe
 = 
	`˝u_to_À32
(
o
->allow_mounted_write);

344 
t›
->
td_ddú
 = 
	`˝u_to_À32
(
o
->td_ddir);

345 
t›
->
rw_£q
 = 
	`˝u_to_À32
(
o
->rw_seq);

346 
t›
->
kb_ba£
 = 
	`˝u_to_À32
(
o
->kb_base);

347 
t›
->
unô_ba£
 = 
	`˝u_to_À32
(
o
->unit_base);

348 
t›
->
ddú_£q_ƒ
 = 
	`˝u_to_À32
(
o
->ddir_seq_nr);

349 
t›
->
iodïth
 = 
	`˝u_to_À32
(
o
->iodepth);

350 
t›
->
iodïth_low
 = 
	`˝u_to_À32
(
o
->iodepth_low);

351 
t›
->
iodïth_b©ch
 = 
	`˝u_to_À32
(
o
->iodepth_batch);

352 
t›
->
iodïth_b©ch_com∂ëe_mö
 = 
	`˝u_to_À32
(
o
->iodepth_batch_complete_min);

353 
t›
->
iodïth_b©ch_com∂ëe_max
 = 
	`˝u_to_À32
(
o
->iodepth_batch_complete_max);

354 
t›
->
£rülize_ovîœp
 = 
	`˝u_to_À32
(
o
->serialize_overlap);

355 
t›
->
size_≥r˚¡
 = 
	`˝u_to_À32
(
o
->size_percent);

356 
t›
->
fûl_devi˚
 = 
	`˝u_to_À32
(
o
->fill_device);

357 
t›
->
fûe_≠≥nd
 = 
	`˝u_to_À32
(
o
->file_append);

358 
t›
->
øãcy˛e
 = 
	`˝u_to_À32
(
o
->ratecycle);

359 
t›
->
io_submô_mode
 = 
	`˝u_to_À32
(
o
->io_submit_mode);

360 
t›
->
ƒ_fûes
 = 
	`˝u_to_À32
(
o
->nr_files);

361 
t›
->
unique_fûíame
 = 
	`˝u_to_À32
(
o
->unique_filename);

362 
t›
->
›í_fûes
 = 
	`˝u_to_À32
(
o
->open_files);

363 
t›
->
fûe_lock_mode
 = 
	`˝u_to_À32
(
o
->file_lock_mode);

364 
t›
->
odúe˘
 = 
	`˝u_to_À32
(
o
->odirect);

365 
t›
->
ﬂtomic
 = 
	`˝u_to_À32
(
o
->oatomic);

366 
t›
->
övÆid©e_ˇche
 = 
	`˝u_to_À32
(
o
->invalidate_cache);

367 
t›
->
¸óã_£rülize
 = 
	`˝u_to_À32
(
o
->create_serialize);

368 
t›
->
¸óã_fsync
 = 
	`˝u_to_À32
(
o
->create_fsync);

369 
t›
->
¸óã_⁄_›í
 = 
	`˝u_to_À32
(
o
->create_on_open);

370 
t›
->
¸óã_⁄ly
 = 
	`˝u_to_À32
(
o
->create_only);

371 
t›
->
íd_fsync
 = 
	`˝u_to_À32
(
o
->end_fsync);

372 
t›
->
¥e_ªad
 = 
	`˝u_to_À32
(
o
->pre_read);

373 
t›
->
sync_io
 = 
	`˝u_to_À32
(
o
->sync_io);

374 
t›
->
wrôe_höt
 = 
	`˝u_to_À32
(
o
->write_hint);

375 
t›
->
vîify
 = 
	`˝u_to_À32
(
o
->verify);

376 
t›
->
do_vîify
 = 
	`˝u_to_À32
(
o
->do_verify);

377 
t›
->
vîifys‹t
 = 
	`˝u_to_À32
(
o
->verifysort);

378 
t›
->
vîifys‹t_ƒ
 = 
	`˝u_to_À32
(
o
->verifysort_nr);

379 
t›
->
ex≥rimíèl_vîify
 = 
	`˝u_to_À32
(
o
->experimental_verify);

380 
t›
->
vîify_°©e
 = 
	`˝u_to_À32
(
o
->verify_state);

381 
t›
->
vîify_öãrvÆ
 = 
	`˝u_to_À32
(
o
->verify_interval);

382 
t›
->
vîify_off£t
 = 
	`˝u_to_À32
(
o
->verify_offset);

383 
t›
->
vîify_∑âîn_byãs
 = 
	`˝u_to_À32
(
o
->verify_pattern_bytes);

384 
t›
->
vîify_Áèl
 = 
	`˝u_to_À32
(
o
->verify_fatal);

385 
t›
->
vîify_dump
 = 
	`˝u_to_À32
(
o
->verify_dump);

386 
t›
->
vîify_async
 = 
	`˝u_to_À32
(
o
->verify_async);

387 
t›
->
vîify_b©ch
 = 
	`˝u_to_À32
(
o
->verify_batch);

388 
t›
->
u£_thªad
 = 
	`˝u_to_À32
(
o
->use_thread);

389 
t›
->
u∆ök
 = 
	`˝u_to_À32
(
o
->unlink);

390 
t›
->
u∆ök_óch_lo›
 = 
	`˝u_to_À32
(
o
->unlink_each_loop);

391 
t›
->
do_disk_utû
 = 
	`˝u_to_À32
(
o
->do_disk_util);

392 
t›
->
ovîride_sync
 = 
	`˝u_to_À32
(
o
->override_sync);

393 
t›
->
ønd_ª≥©abÀ
 = 
	`˝u_to_À32
(
o
->rand_repeatable);

394 
t›
->
ÆÃ™d_ª≥©abÀ
 = 
	`˝u_to_À32
(
o
->allrand_repeatable);

395 
t›
->
ønd_£ed
 = 
	`__˝u_to_À64
(
o
->rand_seed);

396 
t›
->
log_avg_m£c
 = 
	`˝u_to_À32
(
o
->log_avg_msec);

397 
t›
->
log_max
 = 
	`˝u_to_À32
(
o
->log_max);

398 
t›
->
log_off£t
 = 
	`˝u_to_À32
(
o
->log_offset);

399 
t›
->
log_gz
 = 
	`˝u_to_À32
(
o
->log_gz);

400 
t›
->
log_gz_°‹e
 = 
	`˝u_to_À32
(
o
->log_gz_store);

401 
t›
->
log_unix_ïoch
 = 
	`˝u_to_À32
(
o
->log_unix_epoch);

402 
t›
->
n‹™domm≠
 = 
	`˝u_to_À32
(
o
->norandommap);

403 
t›
->
so·øndomm≠
 = 
	`˝u_to_À32
(
o
->softrandommap);

404 
t›
->
bs_u«lig√d
 = 
	`˝u_to_À32
(
o
->bs_unaligned);

405 
t›
->
fsync_⁄_˛o£
 = 
	`˝u_to_À32
(
o
->fsync_on_close);

406 
t›
->
bs_is_£q_ønd
 = 
	`˝u_to_À32
(
o
->bs_is_seq_rand);

407 
t›
->
øndom_di°ributi⁄
 = 
	`˝u_to_À32
(
o
->random_distribution);

408 
t›
->
exôÆl_îr‹
 = 
	`˝u_to_À32
(
o
->exitall_error);

409 
t›
->
zùf_thëa
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->zùf_thëa.u.
f
));

410 
t›
->
∑ªto_h
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->∑ªto_h.u.
f
));

411 
t›
->
gauss_dev
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->gauss_dev.u.
f
));

412 
t›
->
øndom_gíî©‹
 = 
	`˝u_to_À32
(
o
->random_generator);

413 
t›
->
hugïage_size
 = 
	`˝u_to_À32
(
o
->hugepage_size);

414 
t›
->
rw_mö_bs
 = 
	`˝u_to_À32
(
o
->rw_min_bs);

415 
t›
->
thöktime
 = 
	`˝u_to_À32
(
o
->thinktime);

416 
t›
->
thöktime_•ö
 = 
	`˝u_to_À32
(
o
->thinktime_spin);

417 
t›
->
thöktime_blocks
 = 
	`˝u_to_À32
(
o
->thinktime_blocks);

418 
t›
->
fsync_blocks
 = 
	`˝u_to_À32
(
o
->fsync_blocks);

419 
t›
->
fd©async_blocks
 = 
	`˝u_to_À32
(
o
->fdatasync_blocks);

420 
t›
->
b¨rõr_blocks
 = 
	`˝u_to_À32
(
o
->barrier_blocks);

421 
t›
->
ovîwrôe
 = 
	`˝u_to_À32
(
o
->overwrite);

422 
t›
->
bw_avg_time
 = 
	`˝u_to_À32
(
o
->bw_avg_time);

423 
t›
->
i›s_avg_time
 = 
	`˝u_to_À32
(
o
->iops_avg_time);

424 
t›
->
lo›s
 = 
	`˝u_to_À32
(
o
->loops);

425 
t›
->
mem_ty≥
 = 
	`˝u_to_À32
(
o
->mem_type);

426 
t›
->
mem_Æign
 = 
	`˝u_to_À32
(
o
->mem_align);

427 
t›
->
°⁄ewÆl
 = 
	`˝u_to_À32
(
o
->stonewall);

428 
t›
->
√w_group
 = 
	`˝u_to_À32
(
o
->new_group);

429 
t›
->
numjobs
 = 
	`˝u_to_À32
(
o
->numjobs);

430 
t›
->
˝us_Ælowed_pﬁicy
 = 
	`˝u_to_À32
(
o
->cpus_allowed_policy);

431 
t›
->
gpu_dev_id
 = 
	`˝u_to_À32
(
o
->gpu_dev_id);

432 
t›
->
iﬁog
 = 
	`˝u_to_À32
(
o
->iolog);

433 
t›
->
rwmixcy˛e
 = 
	`˝u_to_À32
(
o
->rwmixcycle);

434 
t›
->
ni˚
 = 
	`˝u_to_À32
(
o
->nice);

435 
t›
->
i›rio
 = 
	`˝u_to_À32
(
o
->ioprio);

436 
t›
->
i›rio_˛ass
 = 
	`˝u_to_À32
(
o
->ioprio_class);

437 
t›
->
fûe_£rvi˚_ty≥
 = 
	`˝u_to_À32
(
o
->file_service_type);

438 
t›
->
group_ªp‹tög
 = 
	`˝u_to_À32
(
o
->group_reporting);

439 
t›
->
°©s
 = 
	`˝u_to_À32
(
o
->stats);

440 
t›
->
Ádvi£_höt
 = 
	`˝u_to_À32
(
o
->fadvise_hint);

441 
t›
->
ÁŒoˇã_mode
 = 
	`˝u_to_À32
(
o
->fallocate_mode);

442 
t›
->
zîo_buf„rs
 = 
	`˝u_to_À32
(
o
->zero_buffers);

443 
t›
->
ªfûl_buf„rs
 = 
	`˝u_to_À32
(
o
->refill_buffers);

444 
t›
->
s¸ambÀ_buf„rs
 = 
	`˝u_to_À32
(
o
->scramble_buffers);

445 
t›
->
buf„r_∑âîn_byãs
 = 
	`˝u_to_À32
(
o
->buffer_pattern_bytes);

446 
t›
->
time_ba£d
 = 
	`˝u_to_À32
(
o
->time_based);

447 
t›
->
dißbÀ_œt
 = 
	`˝u_to_À32
(
o
->disable_lat);

448 
t›
->
dißbÀ_˛©
 = 
	`˝u_to_À32
(
o
->disable_clat);

449 
t›
->
dißbÀ_¶©
 = 
	`˝u_to_À32
(
o
->disable_slat);

450 
t›
->
dißbÀ_bw
 = 
	`˝u_to_À32
(
o
->disable_bw);

451 
t›
->
unifõd_rw_ªp
 = 
	`˝u_to_À32
(
o
->unified_rw_rep);

452 
t›
->
gtod_ªdu˚
 = 
	`˝u_to_À32
(
o
->gtod_reduce);

453 
t›
->
gtod_˝u
 = 
	`˝u_to_À32
(
o
->gtod_cpu);

454 
t›
->
˛ocksour˚
 = 
	`˝u_to_À32
(
o
->clocksource);

455 
t›
->
no_°Æl
 = 
	`˝u_to_À32
(
o
->no_stall);

456 
t›
->
åim_≥r˚¡age
 = 
	`˝u_to_À32
(
o
->trim_percentage);

457 
t›
->
åim_b©ch
 = 
	`˝u_to_À32
(
o
->trim_batch);

458 
t›
->
åim_zîo
 = 
	`˝u_to_À32
(
o
->trim_zero);

459 
t›
->
˛©_≥r˚¡ûes
 = 
	`˝u_to_À32
(
o
->clat_percentiles);

460 
t›
->
œt_≥r˚¡ûes
 = 
	`˝u_to_À32
(
o
->lat_percentiles);

461 
t›
->
≥r˚¡ûe_¥ecisi⁄
 = 
	`˝u_to_À32
(
o
->percentile_precision);

462 
t›
->
sig_figs
 = 
	`˝u_to_À32
(
o
->sig_figs);

463 
t›
->
c⁄töue_⁄_îr‹
 = 
	`˝u_to_À32
(
o
->continue_on_error);

464 
t›
->
cgroup_weight
 = 
	`˝u_to_À32
(
o
->cgroup_weight);

465 
t›
->
cgroup_nodñëe
 = 
	`˝u_to_À32
(
o
->cgroup_nodelete);

466 
t›
->
uid
 = 
	`˝u_to_À32
(
o
->uid);

467 
t›
->
gid
 = 
	`˝u_to_À32
(
o
->gid);

468 
t›
->
Êow_id
 = 
	`__˝u_to_À32
(
o
->flow_id);

469 
t›
->
Êow
 = 
	`__˝u_to_À32
(
o
->flow);

470 
t›
->
Êow_w©îm¨k
 = 
	`__˝u_to_À32
(
o
->flow_watermark);

471 
t›
->
Êow_¶ìp
 = 
	`˝u_to_À32
(
o
->flow_sleep);

472 
t›
->
sync_fûe_ønge
 = 
	`˝u_to_À32
(
o
->sync_file_range);

473 
t›
->
œãncy_èrgë
 = 
	`__˝u_to_À64
(
o
->latency_target);

474 
t›
->
œãncy_wödow
 = 
	`__˝u_to_À64
(
o
->latency_window);

475 
t›
->
max_œãncy
 = 
	`__˝u_to_À64
(
o
->max_latency);

476 
t›
->
œãncy_≥r˚¡ûe
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->œãncy_≥r˚¡ûe.u.
f
));

477 
t›
->
com¥ess_≥r˚¡age
 = 
	`˝u_to_À32
(
o
->compress_percentage);

478 
t›
->
com¥ess_chunk
 = 
	`˝u_to_À32
(
o
->compress_chunk);

479 
t›
->
dedu≥_≥r˚¡age
 = 
	`˝u_to_À32
(
o
->dedupe_percentage);

480 
t›
->
block_îr‹_hi°
 = 
	`˝u_to_À32
(
o
->block_error_hist);

481 
t›
->
ª∂ay_Æign
 = 
	`˝u_to_À32
(
o
->replay_align);

482 
t›
->
ª∂ay_sˇÀ
 = 
	`˝u_to_À32
(
o
->replay_scale);

483 
t›
->
≥r_job_logs
 = 
	`˝u_to_À32
(
o
->per_job_logs);

484 
t›
->
wrôe_bw_log
 = 
	`˝u_to_À32
(
o
->write_bw_log);

485 
t›
->
wrôe_œt_log
 = 
	`˝u_to_À32
(
o
->write_lat_log);

486 
t›
->
wrôe_i›s_log
 = 
	`˝u_to_À32
(
o
->write_iops_log);

487 
t›
->
wrôe_hi°_log
 = 
	`˝u_to_À32
(
o
->write_hist_log);

489 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

490 
t›
->
bs
[
i
] = 
	`˝u_to_À32
(
o
->bs[i]);

491 
t›
->
ba
[
i
] = 
	`˝u_to_À32
(
o
->ba[i]);

492 
t›
->
mö_bs
[
i
] = 
	`˝u_to_À32
(
o
->min_bs[i]);

493 
t›
->
max_bs
[
i
] = 
	`˝u_to_À32
(
o
->max_bs[i]);

494 
t›
->
bs•lô_ƒ
[
i
] = 
	`˝u_to_À32
(
o
->bssplit_nr[i]);

496 i‡(
o
->
bs•lô_ƒ
[
i
]) {

497 
bs•lô_ƒ
 = 
o
->bs•lô_ƒ[
i
];

499 i‡(
bs•lô_ƒ
 > 
BSSPLIT_MAX
) {

500 
	`log_îr
("fio: BSSPLIT_MAX isÅoo small\n");

501 
bs•lô_ƒ
 = 
BSSPLIT_MAX
;

503 
j
 = 0; j < 
bs•lô_ƒ
; j++) {

504 
t›
->
bs•lô
[
i
][
j
].
bs
 = 
	`˝u_to_À32
(
o
->bssplit[i][j].bs);

505 
t›
->
bs•lô
[
i
][
j
].
≥rc
 = 
	`˝u_to_À32
(
o
->bssplit[i][j].perc);

509 
t›
->
z⁄e_•lô_ƒ
[
i
] = 
	`˝u_to_À32
(
o
->zone_split_nr[i]);

511 i‡(
o
->
z⁄e_•lô_ƒ
[
i
]) {

512 
z⁄e_•lô_ƒ
 = 
o
->z⁄e_•lô_ƒ[
i
];

514 i‡(
z⁄e_•lô_ƒ
 > 
ZONESPLIT_MAX
) {

515 
	`log_îr
("fio: ZONESPLIT_MAX isÅoo small\n");

516 
z⁄e_•lô_ƒ
 = 
ZONESPLIT_MAX
;

518 
j
 = 0; j < 
z⁄e_•lô_ƒ
; j++) {

519 
t›
->
z⁄e_•lô
[
i
][
j
].
ac˚ss_≥rc
 = 
o
->zone_split[i][j].access_perc;

520 
t›
->
z⁄e_•lô
[
i
][
j
].
size_≥rc
 = 
o
->zone_split[i][j].size_perc;

524 
t›
->
rwmix
[
i
] = 
	`˝u_to_À32
(
o
->rwmix[i]);

525 
t›
->
øã
[
i
] = 
	`˝u_to_À64
(
o
->rate[i]);

526 
t›
->
øãmö
[
i
] = 
	`˝u_to_À64
(
o
->ratemin[i]);

527 
t›
->
øã_i›s
[
i
] = 
	`˝u_to_À32
(
o
->rate_iops[i]);

528 
t›
->
øã_i›s_mö
[
i
] = 
	`˝u_to_À32
(
o
->rate_iops_min[i]);

530 
t›
->
≥rc_ønd
[
i
] = 
	`˝u_to_À32
(
o
->perc_rand[i]);

533 
	`mem˝y
(
t›
->
vîify_∑âîn
, 
o
->vîify_∑âîn, 
MAX_PATTERN_SIZE
);

534 
	`mem˝y
(
t›
->
buf„r_∑âîn
, 
o
->buf„r_∑âîn, 
MAX_PATTERN_SIZE
);

536 
t›
->
size
 = 
	`__˝u_to_À64
(
o
->size);

537 
t›
->
io_size
 = 
	`__˝u_to_À64
(
o
->io_size);

538 
t›
->
vîify_backlog
 = 
	`__˝u_to_À64
(
o
->verify_backlog);

539 
t›
->
°¨t_dñay
 = 
	`__˝u_to_À64
(
o
->start_delay);

540 
t›
->
°¨t_dñay_high
 = 
	`__˝u_to_À64
(
o
->start_delay_high);

541 
t›
->
timeout
 = 
	`__˝u_to_À64
(
o
->timeout);

542 
t›
->
ømp_time
 = 
	`__˝u_to_À64
(
o
->ramp_time);

543 
t›
->
ss_dur
 = 
	`__˝u_to_À64
(top->ss_dur);

544 
t›
->
ss_ømp_time
 = 
	`__˝u_to_À64
(top->ss_ramp_time);

545 
t›
->
ss_°©e
 = 
	`˝u_to_À32
(top->ss_state);

546 
t›
->
ss_limô
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->ss_limô.u.
f
));

547 
t›
->
z⁄e_ønge
 = 
	`__˝u_to_À64
(
o
->zone_range);

548 
t›
->
z⁄e_size
 = 
	`__˝u_to_À64
(
o
->zone_size);

549 
t›
->
z⁄e_skù
 = 
	`__˝u_to_À64
(
o
->zone_skip);

550 
t›
->
lockmem
 = 
	`__˝u_to_À64
(
o
->lockmem);

551 
t›
->
ddú_£q_add
 = 
	`__˝u_to_À64
(
o
->ddir_seq_add);

552 
t›
->
fûe_size_low
 = 
	`__˝u_to_À64
(
o
->file_size_low);

553 
t›
->
fûe_size_high
 = 
	`__˝u_to_À64
(
o
->file_size_high);

554 
t›
->
°¨t_off£t
 = 
	`__˝u_to_À64
(
o
->start_offset);

555 
t›
->
°¨t_off£t_Æign
 = 
	`__˝u_to_À64
(
o
->start_offset_align);

556 
t›
->
°¨t_off£t_≥r˚¡
 = 
	`__˝u_to_À32
(
o
->start_offset_percent);

557 
t›
->
åim_backlog
 = 
	`__˝u_to_À64
(
o
->trim_backlog);

558 
t›
->
off£t_ö¸emít
 = 
	`__˝u_to_À64
(
o
->offset_increment);

559 
t›
->
numbî_ios
 = 
	`__˝u_to_À64
(
o
->number_ios);

560 
t›
->
øã_¥o˚ss
 = 
	`˝u_to_À32
(
o
->rate_process);

561 
t›
->
øã_ign_thök
 = 
	`˝u_to_À32
(
o
->rate_ign_think);

563 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

564 
t›
->
≥r˚¡ûe_li°
[
i
].
u
.ò
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->≥r˚¡ûe_li°[i].u.
f
));

566 
uöt8_t
 
˝umask
[
FIO_TOP_STR_MAX
];

567 
uöt8_t
 
vîify_˝umask
[
FIO_TOP_STR_MAX
];

568 
uöt8_t
 
log_gz_˝umask
[
FIO_TOP_STR_MAX
];

571 
	}
}

578 
	$fio_ã°_cc⁄v
(
thªad_›ti⁄s
 *
__o
)

580 
thªad_›ti⁄s
 
o
;

581 
thªad_›ti⁄s_∑ck
 
t›1
, 
t›2
;

583 
	`mem£t
(&
t›1
, 0, (top1));

584 
	`mem£t
(&
t›2
, 0, (top2));

586 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
t›1
, 
__o
);

587 
	`mem£t
(&
o
, 0, (o));

588 
	`c⁄vît_thªad_›ti⁄s_to_˝u
(&
o
, &
t›1
);

589 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
t›2
, &
o
);

591 
	`‰ì_thªad_›ti⁄s_to_˝u
(&
o
);

593  
	`memcmp
(&
t›1
, &
t›2
, (top1));

594 
	}
}

	@/home/ysjin/Desktop/fio/fio/cgroup.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<m¡ít.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ty≥s.h
>

9 
	~"fio.h
"

10 
	~"Êi°.h
"

11 
	~"cgroup.h
"

12 
	~"smÆloc.h
"

14 
fio_muãx
 *
	glock
;

16 
	scgroup_membî
 {

17 
Êi°_hód
 
	mli°
;

18 *
	mroŸ
;

19 
	mcgroup_nodñëe
;

22 *
	$föd_cgroup_m¡
(
thªad_d©a
 *
td
)

24 *
m¡poöt
 = 
NULL
;

25 
m¡ít
 *
m¡
, 
dummy
;

26 
buf
[256] = {0};

27 
FILE
 *
f
;

29 
f
 = 
	`£tm¡ít
("/proc/mounts", "r");

30 i‡(!
f
) {

31 
	`td_vîr‹
(
td
, 
î∫o
, "setmntent /proc/mounts");

32  
NULL
;

35 (
m¡
 = 
	`gëm¡ít_r
(
f
, &
dummy
, 
buf
, (buf))Ë!
NULL
) {

36 i‡(!
	`°rcmp
(
m¡
->
m¡_ty≥
, "cgroup") &&

37 
	`°r°r
(
m¡
->
m¡_›ts
, "blkio"))

41 i‡(
m¡
)

42 
m¡poöt
 = 
	`smÆloc_°rdup
(
m¡
->
m¡_dú
);

44 
	`log_îr
("fio: cgroup blkio doesÇotáppearÅo be mounted\n");

46 
	`ídm¡ít
(
f
);

47  
m¡poöt
;

48 
	}
}

50 
	$add_cgroup
(
thªad_d©a
 *
td
, c⁄° *
«me
,

51 
Êi°_hód
 *
˛i°
)

53 
cgroup_membî
 *
cm
;

55 i‡(!
lock
)

58 
cm
 = 
	`smÆloc
((*cm));

59 i‡(!
cm
) {

60 
îr
:

61 
	`log_îr
("fio: failedÅoállocate cgroup member\n");

65 
	`INIT_FLIST_HEAD
(&
cm
->
li°
);

66 
cm
->
roŸ
 = 
	`smÆloc_°rdup
(
«me
);

67 i‡(!
cm
->
roŸ
) {

68 
	`s‰ì
(
cm
);

69 
îr
;

71 i‡(
td
->
o
.
cgroup_nodñëe
)

72 
cm
->
cgroup_nodñëe
 = 1;

73 
	`fio_muãx_down
(
lock
);

74 
	`Êi°_add_èû
(&
cm
->
li°
, 
˛i°
);

75 
	`fio_muãx_up
(
lock
);

76 
	}
}

78 
	$cgroup_kûl
(
Êi°_hód
 *
˛i°
)

80 
Êi°_hód
 *
n
, *
tmp
;

81 
cgroup_membî
 *
cm
;

83 i‡(!
lock
)

86 
	`fio_muãx_down
(
lock
);

88 
	`Êi°_f‹_óch_ß„
(
n
, 
tmp
, 
˛i°
) {

89 
cm
 = 
	`Êi°_íåy
(
n
, 
cgroup_membî
, 
li°
);

90 i‡(!
cm
->
cgroup_nodñëe
)

91 
	`rmdú
(
cm
->
roŸ
);

92 
	`Êi°_dñ
(&
cm
->
li°
);

93 
	`s‰ì
(
cm
->
roŸ
);

94 
	`s‰ì
(
cm
);

97 
	`fio_muãx_up
(
lock
);

98 
	}
}

100 *
	$gë_cgroup_roŸ
(
thªad_d©a
 *
td
, *
m¡
)

102 *
°r
 = 
	`mÆloc
(64);

104 i‡(
td
->
o
.
cgroup
)

105 
	`•rötf
(
°r
, "%s/%s", 
m¡
, 
td
->
o
.
cgroup
);

107 
	`•rötf
(
°r
, "%s/%s", 
m¡
, 
td
->
o
.
«me
);

109  
°r
;

110 
	}
}

112 
	$wrôe_öt_to_fûe
(
thªad_d©a
 *
td
, c⁄° *
∑th
,

113 c⁄° *
fûíame
, 
vÆ
,

114 c⁄° *
⁄îr
)

116 
tmp
[256];

117 
FILE
 *
f
;

119 
	`•rötf
(
tmp
, "%s/%s", 
∑th
, 
fûíame
);

120 
f
 = 
	`f›í
(
tmp
, "w");

121 i‡(!
f
) {

122 
	`td_vîr‹
(
td
, 
î∫o
, 
⁄îr
);

126 
	`Ârötf
(
f
, "%u", 
vÆ
);

127 
	`f˛o£
(
f
);

130 
	}
}

132 
	$cgroup_wrôe_pid
(
thªad_d©a
 *
td
, c⁄° *
roŸ
)

134 
vÆ
 = 
td
->
pid
;

136  
	`wrôe_öt_to_fûe
(
td
, 
roŸ
, "èsks", 
vÆ
, "cgroup writeÖid");

137 
	}
}

142 
	$cgroup_dñ_pid
(
thªad_d©a
 *
td
, *
m¡
)

144  
	`cgroup_wrôe_pid
(
td
, 
m¡
);

145 
	}
}

147 
	$cgroup_£tup
(
thªad_d©a
 *
td
, 
Êi°_hód
 *
˛i°
, **
m¡
)

149 *
roŸ
;

151 i‡(!*
m¡
) {

152 *
m¡
 = 
	`föd_cgroup_m¡
(
td
);

153 i‡(!*
m¡
)

160 
roŸ
 = 
	`gë_cgroup_roŸ
(
td
, *
m¡
);

161 i‡(
	`mkdú
(
roŸ
, 0755) < 0) {

162 
__e
 = 
î∫o
;

164 i‡(
__e
 !
EEXIST
) {

165 
	`td_vîr‹
(
td
, 
__e
, "cgroup mkdir");

166 
	`log_îr
("fio:Ö©h %s\n", 
roŸ
);

167 
îr
;

170 
	`add_cgroup
(
td
, 
roŸ
, 
˛i°
);

172 i‡(
td
->
o
.
cgroup_weight
) {

173 i‡(
	`wrôe_öt_to_fûe
(
td
, 
roŸ
, "blkio.weight",

174 
td
->
o
.
cgroup_weight
,

176 
îr
;

179 i‡(!
	`cgroup_wrôe_pid
(
td
, 
roŸ
)) {

180 
	`‰ì
(
roŸ
);

184 
îr
:

185 
	`‰ì
(
roŸ
);

187 
	}
}

189 
	$cgroup_shutdown
(
thªad_d©a
 *
td
, **
m¡
)

191 i‡(*
m¡
 =
NULL
)

193 i‡(!
td
->
o
.
cgroup_weight
 && !td->o.
cgroup
)

196 
	`cgroup_dñ_pid
(
td
, *
m¡
);

197 
	}
}

199 
fio_öô
 
	$cgroup_öô
()

201 
lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

202 i‡(!
lock
)

203 
	`log_îr
("fio: failedÅoállocate cgroupÜock\n");

204 
	}
}

206 
fio_exô
 
	$cgroup_exô
()

208 
	`fio_muãx_ªmove
(
lock
);

209 
	}
}

	@/home/ysjin/Desktop/fio/fio/cgroup.h

1 #i‚de‡
FIO_CGROUP_H


2 
	#FIO_CGROUP_H


	)

4 #ifde‡
FIO_HAVE_CGROUPS


6 
cgroup_£tup
(
thªad_d©a
 *, 
Êi°_hód
 *, **);

7 
cgroup_shutdown
(
thªad_d©a
 *, **);

9 
cgroup_kûl
(
Êi°_hód
 *
li°
);

13 
ölöe
 
	$cgroup_£tup
(
thªad_d©a
 *
td
, 
Êi°_hód
 *
li°
,

14 **
m¡
)

16 
	`td_vîr‹
(
td
, 
EINVAL
, "cgroup_setup");

18 
	}
}

20 
ölöe
 
	$cgroup_shutdown
(
thªad_d©a
 *
td
, **
m¡
)

22 
	}
}

24 
ölöe
 
	$cgroup_kûl
(
Êi°_hód
 *
li°
)

26 
	}
}

	@/home/ysjin/Desktop/fio/fio/client.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<limôs.h
>

5 
	~<î∫o.h
>

6 
	~<f˙é.h
>

7 
	~<sys/pﬁl.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/waô.h
>

11 
	~<sys/sockë.h
>

12 
	~<sys/un.h
>

13 
	~<√töë/ö.h
>

14 
	~<¨∑/öë.h
>

15 
	~<√tdb.h
>

16 
	~<sig«l.h
>

17 #ifde‡
CONFIG_ZLIB


18 
	~<zlib.h
>

21 
	~"fio.h
"

22 
	~"˛õ¡.h
"

23 
	~"£rvî.h
"

24 
	~"Êi°.h
"

25 
	~"hash.h
"

26 
	~"vîify.h
"

28 
h™dÀ_du
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

29 
h™dÀ_ts
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

30 
h™dÀ_gs
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

31 
h™dÀ_¥obe
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

32 
h™dÀ_ãxt
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

33 
h™dÀ_°›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

34 
h™dÀ_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

36 
c⁄vît_ãxt
(
fio_√t_cmd
 *
cmd
);

38 
˛õ¡_›s
 
	gfio_˛õ¡_›s
 = {

39 .
ãxt
 = 
h™dÀ_ãxt
,

40 .
	gdisk_utû
 = 
h™dÀ_du
,

41 .
	gthªad_°©us
 = 
h™dÀ_ts
,

42 .
	ggroup_°©s
 = 
h™dÀ_gs
,

43 .
	g°›
 = 
h™dÀ_°›
,

44 .
	g°¨t
 = 
h™dÀ_°¨t
,

45 .
	gëa
 = 
di•œy_thªad_°©us
,

46 .
	g¥obe
 = 
h™dÀ_¥obe
,

47 .
	gëa_m£c
 = 
FIO_CLIENT_DEF_ETA_MSEC
,

48 .
	g˛õ¡_ty≥
 = 
FIO_CLIENT_TYPE_CLI
,

51 
time•ec
 
	gëa_ts
;

53 
FLIST_HEAD
(
˛õ¡_li°
);

54 
FLIST_HEAD
(
ëa_li°
);

56 
FLIST_HEAD
(
¨g_li°
);

58 
thªad_°©
 
	g˛õ¡_ts
;

59 
group_run_°©s
 
	g˛õ¡_gs
;

60 
	gsum_°©_˛õ¡s
;

62 
	gsum_°©_ƒ
;

63 
js⁄_obje˘
 *
	groŸ
 = 
NULL
;

64 
js⁄_obje˘
 *
	gjob_›t_obje˘
 = 
NULL
;

65 
js⁄_¨øy
 *
	g˛õ¡s_¨øy
 = 
NULL
;

66 
js⁄_¨øy
 *
	gdu_¨øy
 = 
NULL
;

68 
	gîr‹_˛õ¡s
;

70 
	#FIO_CLIENT_HASH_BITS
 7

	)

71 
	#FIO_CLIENT_HASH_SZ
 (1 << 
FIO_CLIENT_HASH_BITS
)

	)

72 
	#FIO_CLIENT_HASH_MASK
 (
FIO_CLIENT_HASH_SZ
 - 1)

	)

73 
Êi°_hód
 
	g˛õ¡_hash
[
FIO_CLIENT_HASH_SZ
];

75 
cmd_iﬁog_pdu
 *
c⁄vît_iﬁog
(
fio_√t_cmd
 *, 
boﬁ
 *);

77 
	$fio_˛õ¡_add_hash
(
fio_˛õ¡
 *
˛õ¡
)

79 
buckë
 = 
	`hash_l⁄g
(
˛õ¡
->
fd
, 
FIO_CLIENT_HASH_BITS
);

81 
buckë
 &
FIO_CLIENT_HASH_MASK
;

82 
	`Êi°_add
(&
˛õ¡
->
hash_li°
, &
˛õ¡_hash
[
buckë
]);

83 
	}
}

85 
	$fio_˛õ¡_ªmove_hash
(
fio_˛õ¡
 *
˛õ¡
)

87 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
hash_li°
))

88 
	`Êi°_dñ_öô
(&
˛õ¡
->
hash_li°
);

89 
	}
}

91 
fio_öô
 
	$fio_˛õ¡_hash_öô
()

93 
i
;

95 
i
 = 0; i < 
FIO_CLIENT_HASH_SZ
; i++)

96 
	`INIT_FLIST_HEAD
(&
˛õ¡_hash
[
i
]);

97 
	}
}

99 
	$ªad_d©a
(
fd
, *
d©a
, 
size_t
 
size
)

101 
ssize_t
 
ªt
;

103 
size
) {

104 
ªt
 = 
	`ªad
(
fd
, 
d©a
, 
size
);

105 i‡(
ªt
 < 0) {

106 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

109 } i‡(!
ªt
)

112 
d©a
 +
ªt
;

113 
size
 -
ªt
;

117 i‡(
size
)

118  
EAGAIN
;

121 
	}
}

123 
	$fio_˛õ¡_js⁄_öô
()

125 
time_buf
[32];

126 
time_t
 
time_p
;

128 i‡(!(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
))

131 
	`time
(&
time_p
);

132 
	`os_˘ime_r
((c⁄° 
time_t
 *Ë&
time_p
, 
time_buf
, (time_buf));

133 
time_buf
[
	`°æí
(time_buf) - 1] = '\0';

135 
roŸ
 = 
	`js⁄_¸óã_obje˘
();

136 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "fiÿvîsi⁄", 
fio_vîsi⁄_°rög
);

137 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "time°amp", 
time_p
);

138 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "time", 
time_buf
);

140 
job_›t_obje˘
 = 
	`js⁄_¸óã_obje˘
();

141 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "globÆ o±i⁄s", 
job_›t_obje˘
);

142 
˛õ¡s_¨øy
 = 
	`js⁄_¸óã_¨øy
();

143 
	`js⁄_obje˘_add_vÆue_¨øy
(
roŸ
, "˛õ¡_°©s", 
˛õ¡s_¨øy
);

144 
du_¨øy
 = 
	`js⁄_¸óã_¨øy
();

145 
	`js⁄_obje˘_add_vÆue_¨øy
(
roŸ
, "disk_utû", 
du_¨øy
);

146 
	}
}

148 
	$fio_˛õ¡_js⁄_föi
()

150 i‡(!(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
))

153 
	`log_öfo
("\n");

154 
	`js⁄_¥öt_obje˘
(
roŸ
, 
NULL
);

155 
	`log_öfo
("\n");

156 
	`js⁄_‰ì_obje˘
(
roŸ
);

157 
roŸ
 = 
NULL
;

158 
˛õ¡s_¨øy
 = 
NULL
;

159 
du_¨øy
 = 
NULL
;

160 
	}
}

162 
fio_˛õ¡
 *
	$föd_˛õ¡_by_fd
(
fd
)

164 
buckë
 = 
	`hash_l⁄g
(
fd
, 
FIO_CLIENT_HASH_BITS
Ë& 
FIO_CLIENT_HASH_MASK
;

165 
fio_˛õ¡
 *
˛õ¡
;

166 
Êi°_hód
 *
íåy
;

168 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_hash
[
buckë
]) {

169 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
hash_li°
);

171 i‡(
˛õ¡
->
fd
 == fd) {

172 
˛õ¡
->
ªfs
++;

173  
˛õ¡
;

177  
NULL
;

178 
	}
}

180 
	$fio_put_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

182 i‡(--
˛õ¡
->
ªfs
)

185 
	`‰ì
(
˛õ¡
->
ho°«me
);

186 i‡(
˛õ¡
->
¨gv
)

187 
	`‰ì
(
˛õ¡
->
¨gv
);

188 i‡(
˛õ¡
->
«me
)

189 
	`‰ì
(
˛õ¡
->
«me
);

190 
˛õ¡
->
ƒ_fûes
) {

191 
˛õ¡_fûe
 *
cf
 = &
˛õ¡
->
fûes
[--˛õ¡->
ƒ_fûes
];

193 
	`‰ì
(
cf
->
fûe
);

195 i‡(
˛õ¡
->
fûes
)

196 
	`‰ì
(
˛õ¡
->
fûes
);

197 i‡(
˛õ¡
->
›t_li°s
)

198 
	`‰ì
(
˛õ¡
->
›t_li°s
);

200 i‡(!
˛õ¡
->
did_°©
)

201 
sum_°©_˛õ¡s
--;

203 i‡(
˛õ¡
->
îr‹
)

204 
îr‹_˛õ¡s
++;

206 
	`‰ì
(
˛õ¡
);

207 
	}
}

209 
	$fio_˛õ¡_dec_jobs_ëa
(
˛õ¡_ëa
 *
ëa
, 
˛õ¡_ëa_›
 
ëa_‚
)

211 i‡(!--
ëa
->
≥ndög
) {

212 
	`ëa_‚
(&
ëa
->eta);

213 
	`‰ì
(
ëa
);

218 
	}
}

220 
	$fio_døö_˛õ¡_ãxt
(
fio_˛õ¡
 *
˛õ¡
)

223 
fio_√t_cmd
 *
cmd
;

225 
cmd
 = 
	`fio_√t_ªcv_cmd
(
˛õ¡
->
fd
, 
Ál£
);

226 i‡(!
cmd
)

229 i‡(
cmd
->
›code
 =
FIO_NET_CMD_TEXT
) {

230 
	`c⁄vît_ãxt
(
cmd
);

231 
˛õ¡
->
›s
->
	`ãxt
(˛õ¡, 
cmd
);

234 
	`‰ì
(
cmd
);

236 
	}
}

238 
	$ªmove_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

240 
	`as£π
(
˛õ¡
->
ªfs
);

242 
	`d¥öt
(
FD_NET
, "˛õ¡:Ñemoved <%s>\n", 
˛õ¡
->
ho°«me
);

244 
	`fio_døö_˛õ¡_ãxt
(
˛õ¡
);

246 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
li°
))

247 
	`Êi°_dñ_öô
(&
˛õ¡
->
li°
);

249 
	`fio_˛õ¡_ªmove_hash
(
˛õ¡
);

251 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
ëa_li°
)) {

252 
	`Êi°_dñ_öô
(&
˛õ¡
->
ëa_li°
);

253 
	`fio_˛õ¡_dec_jobs_ëa
(
˛õ¡
->
ëa_ö_Êight
, clõ¡->
›s
->
ëa
);

256 
	`˛o£
(
˛õ¡
->
fd
);

257 
˛õ¡
->
fd
 = -1;

259 i‡(
˛õ¡
->
›s
->
ªmoved
)

260 
˛õ¡
->
›s
->
	`ªmoved
(client);

262 
ƒ_˛õ¡s
--;

263 
	`fio_put_˛õ¡
(
˛õ¡
);

264 
	}
}

266 
fio_˛õ¡
 *
	$fio_gë_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

268 
˛õ¡
->
ªfs
++;

269  
˛õ¡
;

270 
	}
}

272 
	$__fio_˛õ¡_add_cmd_›ti⁄
(
fio_˛õ¡
 *
˛õ¡
,

273 c⁄° *
›t
)

275 
ödex
;

277 
ödex
 = 
˛õ¡
->
¨gc
++;

278 
˛õ¡
->
¨gv
 = 
	`ªÆloc
(˛õ¡->¨gv, (*Ë* clõ¡->
¨gc
);

279 
˛õ¡
->
¨gv
[
ödex
] = 
	`°rdup
(
›t
);

280 
	`d¥öt
(
FD_NET
, "˛õ¡:ádd cmd %d: %s\n", 
ödex
, 
›t
);

281 
	}
}

283 
	$fio_˛õ¡_add_cmd_›ti⁄
(*
cookõ
, c⁄° *
›t
)

285 
fio_˛õ¡
 *
˛õ¡
 = 
cookõ
;

286 
Êi°_hód
 *
íåy
;

288 i‡(!
˛õ¡
 || !
›t
)

291 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, 
›t
);

296 
	`Êi°_f‹_óch
(
íåy
, &
¨g_li°
) {

297 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
¨g_li°
);

299 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, 
›t
);

301 
	}
}

303 
fio_˛õ¡
 *
	$fio_˛õ¡_add_ex∂icô
(
˛õ¡_›s
 *
›s
,

304 c⁄° *
ho°«me
, 
ty≥
,

305 
p‹t
)

307 
fio_˛õ¡
 *
˛õ¡
;

309 
˛õ¡
 = 
	`mÆloc
((*client));

310 
	`mem£t
(
˛õ¡
, 0, (*client));

312 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
li°
);

313 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
hash_li°
);

314 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
¨g_li°
);

315 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
ëa_li°
);

316 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
cmd_li°
);

318 
˛õ¡
->
ho°«me
 = 
	`°rdup
(hostname);

320 i‡(
ty≥
 =
Fio_˛õ¡_sockë
)

321 
˛õ¡
->
is_sock
 = 
åue
;

323 
ùv6
;

325 
ùv6
 = 
ty≥
 =
Fio_˛õ¡_ùv6
;

326 i‡(
	`fio_£rvî_∑r£_ho°
(
ho°«me
, 
ùv6
,

327 &
˛õ¡
->
addr
.
sö_addr
,

328 &
˛õ¡
->
addr6
.
sö6_addr
))

329 
îr
;

331 
˛õ¡
->
p‹t
 =Öort;

334 
˛õ¡
->
fd
 = -1;

335 
˛õ¡
->
›s
 = ops;

336 
˛õ¡
->
ªfs
 = 1;

337 
˛õ¡
->
ty≥
 = 
›s
->
˛õ¡_ty≥
;

339 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, "fio");

341 
	`Êi°_add
(&
˛õ¡
->
li°
, &
˛õ¡_li°
);

342 
ƒ_˛õ¡s
++;

343 
	`d¥öt
(
FD_NET
, "˛õ¡:ádded <%s>\n", 
˛õ¡
->
ho°«me
);

344  
˛õ¡
;

345 
îr
:

346 
	`‰ì
(
˛õ¡
);

347  
NULL
;

348 
	}
}

350 
	$fio_˛õ¡_add_öi_fûe
(*
cookõ
, c⁄° *
öi_fûe
, 
boﬁ
 
ªmŸe
)

352 
fio_˛õ¡
 *
˛õ¡
 = 
cookõ
;

353 
˛õ¡_fûe
 *
cf
;

354 
size_t
 
√w_size
;

355 *
√w_fûes
;

357 i‡(!
˛õ¡
)

360 
	`d¥öt
(
FD_NET
, "˛õ¡ <%s>:ádd inò%s\n", 
˛õ¡
->
ho°«me
, 
öi_fûe
);

362 
√w_size
 = (
˛õ¡
->
ƒ_fûes
 + 1Ë* (
˛õ¡_fûe
);

363 
√w_fûes
 = 
	`ªÆloc
(
˛õ¡
->
fûes
, 
√w_size
);

364 i‡(!
√w_fûes
)

367 
˛õ¡
->
fûes
 = 
√w_fûes
;

368 
cf
 = &
˛õ¡
->
fûes
[˛õ¡->
ƒ_fûes
];

369 
cf
->
fûe
 = 
	`°rdup
(
öi_fûe
);

370 
cf
->
ªmŸe
 =Ñemote;

371 
˛õ¡
->
ƒ_fûes
++;

373 
	}
}

375 
	$fio_˛õ¡_add
(
˛õ¡_›s
 *
›s
, c⁄° *
ho°«me
, **
cookõ
)

377 
fio_˛õ¡
 *
exi°ög
 = *
cookõ
;

378 
fio_˛õ¡
 *
˛õ¡
;

380 i‡(
exi°ög
) {

385 i‡(
exi°ög
->
¨gc
 == 1)

386 
	`Êi°_add_èû
(&
exi°ög
->
¨g_li°
, &arg_list);

388 !
	`Êi°_em±y
(&
¨g_li°
))

389 
	`Êi°_dñ_öô
(
¨g_li°
.
√xt
);

393 
˛õ¡
 = 
	`mÆloc
((*client));

394 
	`mem£t
(
˛õ¡
, 0, (*client));

396 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
li°
);

397 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
hash_li°
);

398 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
¨g_li°
);

399 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
ëa_li°
);

400 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
cmd_li°
);

402 i‡(
	`fio_£rvî_∑r£_°rög
(
ho°«me
, &
˛õ¡
->hostname,

403 &
˛õ¡
->
is_sock
, &˛õ¡->
p‹t
,

404 &
˛õ¡
->
addr
.
sö_addr
,

405 &
˛õ¡
->
addr6
.
sö6_addr
,

406 &
˛õ¡
->
ùv6
))

409 
˛õ¡
->
fd
 = -1;

410 
˛õ¡
->
›s
 = ops;

411 
˛õ¡
->
ªfs
 = 1;

412 
˛õ¡
->
ty≥
 = 
›s
->
˛õ¡_ty≥
;

414 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, "fio");

416 
	`Êi°_add
(&
˛õ¡
->
li°
, &
˛õ¡_li°
);

417 
ƒ_˛õ¡s
++;

418 
	`d¥öt
(
FD_NET
, "˛õ¡:ádded <%s>\n", 
˛õ¡
->
ho°«me
);

419 *
cookõ
 = 
˛õ¡
;

421 
	}
}

423 c⁄° *
	$£rvî_«me
(
fio_˛õ¡
 *
˛õ¡
, *
buf
,

424 
size_t
 
bufsize
)

426 c⁄° *
‰om
;

428 i‡(
˛õ¡
->
ùv6
)

429 
‰om
 = 
	`öë_¡›
(
AF_INET6
, (
sockaddr
 *Ë&
˛õ¡
->
addr6
.
sö6_addr
, 
buf
, 
bufsize
);

430 i‡(
˛õ¡
->
is_sock
)

431 
‰om
 = "sock";

433 
‰om
 = 
	`öë_¡›
(
AF_INET
, (
sockaddr
 *Ë&
˛õ¡
->
addr
.
sö_addr
, 
buf
, 
bufsize
);

435  
‰om
;

436 
	}
}

438 
	$¥obe_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

440 
cmd_˛õ¡_¥obe_pdu
 
pdu
;

441 c⁄° *
¢ame
;

442 
uöt64_t
 
èg
;

443 
buf
[64];

445 
	`d¥öt
(
FD_NET
, "client: sendÖrobe\n");

447 #ifde‡
CONFIG_ZLIB


448 
pdu
.
Êags
 = 
	`__À64_to_˝u
(
FIO_PROBE_FLAG_ZLIB
);

450 
pdu
.
Êags
 = 0;

453 
¢ame
 = 
	`£rvî_«me
(
˛õ¡
, 
buf
, (buf));

454 
	`mem£t
(
pdu
.
£rvî
, 0, (pdu.server));

455 
	`°∫˝y
((*Ë
pdu
.
£rvî
, 
¢ame
, (pdu.server) - 1);

457 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_PROBE
, &
pdu
, ’du), &
èg
, &˛õ¡->
cmd_li°
);

458 
	}
}

460 
	$fio_˛õ¡_c⁄√˘_ù
(
fio_˛õ¡
 *
˛õ¡
)

462 
sockaddr
 *
addr
;

463 
sockÀn_t
 
sockÀn
;

464 
fd
, 
domaö
;

466 i‡(
˛õ¡
->
ùv6
) {

467 
˛õ¡
->
addr6
.
sö6_Ámûy
 = 
AF_INET6
;

468 
˛õ¡
->
addr6
.
sö6_p‹t
 = 
	`ht⁄s
(˛õ¡->
p‹t
);

469 
domaö
 = 
AF_INET6
;

470 
addr
 = (
sockaddr
 *Ë&
˛õ¡
->
addr6
;

471 
sockÀn
 = (
˛õ¡
->
addr6
);

473 
˛õ¡
->
addr
.
sö_Ámûy
 = 
AF_INET
;

474 
˛õ¡
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(˛õ¡->
p‹t
);

475 
domaö
 = 
AF_INET
;

476 
addr
 = (
sockaddr
 *Ë&
˛õ¡
->addr;

477 
sockÀn
 = (
˛õ¡
->
addr
);

480 
fd
 = 
	`sockë
(
domaö
, 
SOCK_STREAM
, 0);

481 i‡(
fd
 < 0) {

482 
ªt
 = -
î∫o
;

484 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

485  
ªt
;

488 i‡(
	`c⁄√˘
(
fd
, 
addr
, 
sockÀn
) < 0) {

489 
ªt
 = -
î∫o
;

491 
	`log_îr
("fio: c⁄√˘: %s\n", 
	`°ªº‹
(
î∫o
));

492 
	`log_îr
("fio: faûedÅÿc⁄√˘Åÿ%s:%u\n", 
˛õ¡
->
ho°«me
,

493 
˛õ¡
->
p‹t
);

494 
	`˛o£
(
fd
);

495  
ªt
;

498  
fd
;

499 
	}
}

501 
	$fio_˛õ¡_c⁄√˘_sock
(
fio_˛õ¡
 *
˛õ¡
)

503 
sockaddr_un
 *
addr
 = &
˛õ¡
->
addr_un
;

504 
sockÀn_t
 
Àn
;

505 
fd
;

507 
	`mem£t
(
addr
, 0, (*addr));

508 
addr
->
sun_Ámûy
 = 
AF_UNIX
;

509 
	`°∫˝y
(
addr
->
sun_∑th
, 
˛õ¡
->
ho°«me
, (addr->sun_path) - 1);

511 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

512 i‡(
fd
 < 0) {

513 
ªt
 = -
î∫o
;

515 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

516  
ªt
;

519 
Àn
 = (
addr
->
sun_Ámûy
Ë+ 
	`°æí
◊ddr->
sun_∑th
) + 1;

520 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë
addr
, 
Àn
) < 0) {

521 
ªt
 = -
î∫o
;

523 
	`log_îr
("fio: c⁄√˘; %s\n", 
	`°ªº‹
(
î∫o
));

524 
	`˛o£
(
fd
);

525  
ªt
;

528  
fd
;

529 
	}
}

531 
	$fio_˛õ¡_c⁄√˘
(
fio_˛õ¡
 *
˛õ¡
)

533 
fd
;

535 
	`d¥öt
(
FD_NET
, "˛õ¡: c⁄√˘Åÿho° %s\n", 
˛õ¡
->
ho°«me
);

537 i‡(
˛õ¡
->
is_sock
)

538 
fd
 = 
	`fio_˛õ¡_c⁄√˘_sock
(
˛õ¡
);

540 
fd
 = 
	`fio_˛õ¡_c⁄√˘_ù
(
˛õ¡
);

542 
	`d¥öt
(
FD_NET
, "˛õ¡: %†c⁄√˘ed %d\n", 
˛õ¡
->
ho°«me
, 
fd
);

544 i‡(
fd
 < 0)

545  
fd
;

547 
˛õ¡
->
fd
 = fd;

548 
	`fio_˛õ¡_add_hash
(
˛õ¡
);

549 
˛õ¡
->
°©e
 = 
Clõ¡_c⁄√˘ed
;

551 
	`¥obe_˛õ¡
(
˛õ¡
);

553 
	}
}

555 
	$fio_˛õ¡_ãrmö©e
(
fio_˛õ¡
 *
˛õ¡
)

557  
	`fio_√t_£nd_quô
(
˛õ¡
->
fd
);

558 
	}
}

560 
	$fio_˛õ¡s_ãrmö©e
()

562 
Êi°_hód
 *
íåy
;

563 
fio_˛õ¡
 *
˛õ¡
;

565 
	`d¥öt
(
FD_NET
, "client:Åerminate clients\n");

567 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_li°
) {

568 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

569 
	`fio_˛õ¡_ãrmö©e
(
˛õ¡
);

571 
	}
}

573 
	$sig_öt
(
sig
)

575 
	`d¥öt
(
FD_NET
, "˛õ¡: gŸ sig«»%d\n", 
sig
);

576 
	`fio_˛õ¡s_ãrmö©e
();

577 
	}
}

579 
	$˛õ¡_sig«l_h™dÀr
()

581 
siga˘i⁄
 
a˘
;

583 
	`mem£t
(&
a˘
, 0, (act));

584 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

585 
a˘
.
ß_Êags
 = 
SA_RESTART
;

586 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

588 
	`mem£t
(&
a˘
, 0, (act));

589 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

590 
a˘
.
ß_Êags
 = 
SA_RESTART
;

591 
	`siga˘i⁄
(
SIGTERM
, &
a˘
, 
NULL
);

594 #ifde‡
WIN32


595 
	`mem£t
(&
a˘
, 0, (act));

596 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

597 
a˘
.
ß_Êags
 = 
SA_RESTART
;

598 
	`siga˘i⁄
(
SIGBREAK
, &
a˘
, 
NULL
);

601 
	`mem£t
(&
a˘
, 0, (act));

602 
a˘
.
ß_h™dÀr
 = 
sig_show_°©us
;

603 
a˘
.
ß_Êags
 = 
SA_RESTART
;

604 
	`siga˘i⁄
(
SIGUSR1
, &
a˘
, 
NULL
);

605 
	}
}

607 
	$£nd_˛õ¡_cmd_löe
(
fio_˛õ¡
 *
˛õ¡
)

609 
cmd_sögÀ_löe_pdu
 *
c¶p
;

610 
cmd_löe_pdu
 *
˛p
;

611 
off£t
;

612 *
Àns
;

613 *
pdu
;

614 
size_t
 
mem
;

615 
i
, 
ªt
;

617 
	`d¥öt
(
FD_NET
, "˛õ¡: síd cmdlöê%d\n", 
˛õ¡
->
¨gc
);

619 
Àns
 = 
	`mÆloc
(
˛õ¡
->
¨gc
 * ());

624 
i
 = 0, 
mem
 = 0; i < 
˛õ¡
->
¨gc
; i++) {

625 
Àns
[
i
] = 
	`°æí
(
˛õ¡
->
¨gv
[i]) + 1;

626 
mem
 +
Àns
[
i
];

632 
mem
 +(*
˛p
Ë+ (
˛õ¡
->
¨gc
 * (*
c¶p
));

634 
pdu
 = 
	`mÆloc
(
mem
);

635 
˛p
 = 
pdu
;

636 
off£t
 = (*
˛p
);

638 
i
 = 0; i < 
˛õ¡
->
¨gc
; i++) {

639 
uöt16_t
 
¨g_Àn
 = 
Àns
[
i
];

641 
c¶p
 = 
pdu
 + 
off£t
;

642 
	`°r˝y
((*Ë
c¶p
->
ãxt
, 
˛õ¡
->
¨gv
[
i
]);

643 
c¶p
->
Àn
 = 
	`˝u_to_À16
(
¨g_Àn
);

644 
off£t
 +(*
c¶p
Ë+ 
¨g_Àn
;

647 
	`‰ì
(
Àns
);

648 
˛p
->
löes
 = 
	`˝u_to_À16
(
˛õ¡
->
¨gc
);

649 
˛p
->
˛õ¡_ty≥
 = 
	`__˝u_to_À16
(
˛õ¡
->
ty≥
);

650 
ªt
 = 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_JOBLINE
, 
pdu
, 
mem
, 
NULL
, NULL);

651 
	`‰ì
(
pdu
);

652  
ªt
;

653 
	}
}

655 
	$fio_˛õ¡s_c⁄√˘
()

657 
fio_˛õ¡
 *
˛õ¡
;

658 
Êi°_hód
 *
íåy
, *
tmp
;

659 
ªt
;

661 #ifde‡
WIN32


662 
WSADATA
 
wsd
;

663 
	`WSASèπup
(
	`MAKEWORD
(2, 2), &
wsd
);

666 
	`d¥öt
(
FD_NET
, "client: connectáll\n");

668 
	`˛õ¡_sig«l_h™dÀr
();

670 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

671 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

673 
ªt
 = 
	`fio_˛õ¡_c⁄√˘
(
˛õ¡
);

674 i‡(
ªt
) {

675 
	`ªmove_˛õ¡
(
˛õ¡
);

679 i‡(
˛õ¡
->
¨gc
 > 1)

680 
	`£nd_˛õ¡_cmd_löe
(
˛õ¡
);

683  !
ƒ_˛õ¡s
;

684 
	}
}

686 
	$fio_°¨t_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

688 
	`d¥öt
(
FD_NET
, "˛õ¡: sèπ %s\n", 
˛õ¡
->
ho°«me
);

689  
	`fio_√t_£nd_sim∂e_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_RUN
, 0, 
NULL
);

690 
	}
}

692 
	$fio_°¨t_Æl_˛õ¡s
()

694 
fio_˛õ¡
 *
˛õ¡
;

695 
Êi°_hód
 *
íåy
, *
tmp
;

696 
ªt
;

698 
	`d¥öt
(
FD_NET
, "client: startáll\n");

700 
	`fio_˛õ¡_js⁄_öô
();

702 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

703 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

705 
ªt
 = 
	`fio_°¨t_˛õ¡
(
˛õ¡
);

706 i‡(
ªt
) {

707 
	`ªmove_˛õ¡
(
˛õ¡
);

712  
	`Êi°_em±y
(&
˛õ¡_li°
);

713 
	}
}

715 
	$__fio_˛õ¡_£nd_ªmŸe_öi
(
fio_˛õ¡
 *
˛õ¡
,

716 c⁄° *
fûíame
)

718 
cmd_lﬂd_fûe_pdu
 *
pdu
;

719 
size_t
 
p_size
;

720 
ªt
;

722 
	`d¥öt
(
FD_NET
, "£ndÑemŸêöò%†tÿ%s\n", 
fûíame
, 
˛õ¡
->
ho°«me
);

724 
p_size
 = (*
pdu
Ë+ 
	`°æí
(
fûíame
) + 1;

725 
pdu
 = 
	`mÆloc
(
p_size
);

726 
	`mem£t
(
pdu
, 0, 
p_size
);

727 
pdu
->
«me_Àn
 = 
	`°æí
(
fûíame
);

728 
	`°r˝y
((*Ë
pdu
->
fûe
, 
fûíame
);

729 
pdu
->
˛õ¡_ty≥
 = 
	`˝u_to_À16
((
uöt16_t
Ë
˛õ¡
->
ty≥
);

731 
˛õ¡
->
£¡_job
 = 
åue
;

732 
ªt
 = 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_LOAD_FILE
, 
pdu
, 
p_size
,
NULL
, NULL);

733 
	`‰ì
(
pdu
);

734  
ªt
;

735 
	}
}

741 
	$__fio_˛õ¡_£nd_loˇl_öi
(
fio_˛õ¡
 *
˛õ¡
,

742 c⁄° *
fûíame
)

744 
cmd_job_pdu
 *
pdu
;

745 
size_t
 
p_size
;

746 
°©
 
sb
;

747 *
p
;

748 *
buf
;

749 
off_t
 
Àn
;

750 
fd
, 
ªt
;

752 
	`d¥öt
(
FD_NET
, "£nd inò%†tÿ%s\n", 
fûíame
, 
˛õ¡
->
ho°«me
);

754 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

755 i‡(
fd
 < 0) {

756 
ªt
 = -
î∫o
;

757 
	`log_îr
("fio: job fûê<%s> o≥n: %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

758  
ªt
;

761 i‡(
	`f°©
(
fd
, &
sb
) < 0) {

762 
ªt
 = -
î∫o
;

763 
	`log_îr
("fio: job fûê°©: %s\n", 
	`°ªº‹
(
î∫o
));

764 
	`˛o£
(
fd
);

765  
ªt
;

768 
p_size
 = 
sb
.
°_size
 + (*
pdu
);

769 
pdu
 = 
	`mÆloc
(
p_size
);

770 
buf
 = 
pdu
->buf;

772 
Àn
 = 
sb
.
°_size
;

773 
p
 = 
buf
;

774 i‡(
	`ªad_d©a
(
fd
, 
p
, 
Àn
)) {

775 
	`log_îr
("fio: faûedÑódög job fûê%s\n", 
fûíame
);

776 
	`˛o£
(
fd
);

777 
	`‰ì
(
pdu
);

781 
pdu
->
buf_Àn
 = 
	`__˝u_to_À32
(
sb
.
°_size
);

782 
pdu
->
˛õ¡_ty≥
 = 
	`˝u_to_À32
(
˛õ¡
->
ty≥
);

784 
˛õ¡
->
£¡_job
 = 
åue
;

785 
ªt
 = 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_JOB
, 
pdu
, 
p_size
, 
NULL
, NULL);

786 
	`‰ì
(
pdu
);

787 
	`˛o£
(
fd
);

788  
ªt
;

789 
	}
}

791 
	$fio_˛õ¡_£nd_öi
(
fio_˛õ¡
 *
˛õ¡
, c⁄° *
fûíame
,

792 
boﬁ
 
ªmŸe
)

794 
ªt
;

796 i‡(!
ªmŸe
)

797 
ªt
 = 
	`__fio_˛õ¡_£nd_loˇl_öi
(
˛õ¡
, 
fûíame
);

799 
ªt
 = 
	`__fio_˛õ¡_£nd_ªmŸe_öi
(
˛õ¡
, 
fûíame
);

801 i‡(!
ªt
)

802 
˛õ¡
->
£¡_job
 = 
åue
;

804  
ªt
;

805 
	}
}

807 
	$fio_˛õ¡_£nd_cf
(
fio_˛õ¡
 *
˛õ¡
,

808 
˛õ¡_fûe
 *
cf
)

810  
	`fio_˛õ¡_£nd_öi
(
˛õ¡
, 
cf
->
fûe
, cf->
ªmŸe
);

811 
	}
}

813 
	$fio_˛õ¡s_£nd_öi
(c⁄° *
fûíame
)

815 
fio_˛õ¡
 *
˛õ¡
;

816 
Êi°_hód
 *
íåy
, *
tmp
;

818 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

819 
boﬁ
 
Áûed
 = 
Ál£
;

821 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

823 i‡(
˛õ¡
->
ƒ_fûes
) {

824 
i
;

826 
i
 = 0; i < 
˛õ¡
->
ƒ_fûes
; i++) {

827 
˛õ¡_fûe
 *
cf
;

829 
cf
 = &
˛õ¡
->
fûes
[
i
];

831 i‡(
	`fio_˛õ¡_£nd_cf
(
˛õ¡
, 
cf
)) {

832 
Áûed
 = 
åue
;

833 
	`ªmove_˛õ¡
(
˛õ¡
);

838 i‡(
˛õ¡
->
£¡_job
 || 
Áûed
)

840 i‡(!
fûíame
 || 
	`fio_˛õ¡_£nd_öi
(
˛õ¡
, filename, 0))

841 
	`ªmove_˛õ¡
(
˛õ¡
);

844  !
ƒ_˛õ¡s
;

845 
	}
}

847 
	$fio_˛õ¡_upd©e_›ti⁄s
(
fio_˛õ¡
 *
˛õ¡
,

848 
thªad_›ti⁄s
 *
o
, 
uöt64_t
 *
èg
)

850 
cmd_add_job_pdu
 
pdu
;

852 
pdu
.
thªad_numbî
 = 
	`˝u_to_À32
(
˛õ¡
->thread_number);

853 
pdu
.
groupid
 = 
	`˝u_to_À32
(
˛õ¡
->groupid);

854 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
pdu
.
t›
, 
o
);

856  
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_UPDATE_JOB
, &
pdu
, ’du), 
èg
, &˛õ¡->
cmd_li°
);

857 
	}
}

859 
	$c⁄vît_io_°©
(
io_°©
 *
d°
, io_°© *
§c
)

861 
d°
->
max_vÆ
 = 
	`À64_to_˝u
(
§c
->max_val);

862 
d°
->
mö_vÆ
 = 
	`À64_to_˝u
(
§c
->min_val);

863 
d°
->
ßm∂es
 = 
	`À64_to_˝u
(
§c
->samples);

868 
d°
->
món
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(d°->món.u.
i
));

869 
d°
->
S
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(d°->S.u.
i
));

870 
	}
}

872 
	$c⁄vît_ts
(
thªad_°©
 *
d°
, thªad_°© *
§c
)

874 
i
, 
j
;

876 
d°
->
îr‹
 = 
	`À32_to_˝u
(
§c
->error);

877 
d°
->
thªad_numbî
 = 
	`À32_to_˝u
(
§c
->thread_number);

878 
d°
->
groupid
 = 
	`À32_to_˝u
(
§c
->groupid);

879 
d°
->
pid
 = 
	`À32_to_˝u
(
§c
->pid);

880 
d°
->
membîs
 = 
	`À32_to_˝u
(
§c
->members);

881 
d°
->
unifõd_rw_ªp
 = 
	`À32_to_˝u
(
§c
->unified_rw_rep);

883 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

884 
	`c⁄vît_io_°©
(&
d°
->
˛©_°©
[
i
], &
§c
->clat_stat[i]);

885 
	`c⁄vît_io_°©
(&
d°
->
¶©_°©
[
i
], &
§c
->slat_stat[i]);

886 
	`c⁄vît_io_°©
(&
d°
->
œt_°©
[
i
], &
§c
->lat_stat[i]);

887 
	`c⁄vît_io_°©
(&
d°
->
bw_°©
[
i
], &
§c
->bw_stat[i]);

888 
	`c⁄vît_io_°©
(&
d°
->
i›s_°©
[
i
], &
§c
->iops_stat[i]);

891 
d°
->
u§_time
 = 
	`À64_to_˝u
(
§c
->usr_time);

892 
d°
->
sys_time
 = 
	`À64_to_˝u
(
§c
->sys_time);

893 
d°
->
˘x
 = 
	`À64_to_˝u
(
§c
->ctx);

894 
d°
->
möf
 = 
	`À64_to_˝u
(
§c
->minf);

895 
d°
->
majf
 = 
	`À64_to_˝u
(
§c
->majf);

896 
d°
->
˛©_≥r˚¡ûes
 = 
	`À32_to_˝u
(
§c
->clat_percentiles);

897 
d°
->
œt_≥r˚¡ûes
 = 
	`À32_to_˝u
(
§c
->lat_percentiles);

898 
d°
->
≥r˚¡ûe_¥ecisi⁄
 = 
	`À64_to_˝u
(
§c
->percentile_precision);

900 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

901 
fio_Â64_t
 *
Âs
 = &
§c
->
≥r˚¡ûe_li°
[
i
];

902 
fio_Â64_t
 *
Âd
 = &
d°
->
≥r˚¡ûe_li°
[
i
];

904 
Âd
->
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
Âs
->u.
i
));

907 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

908 
d°
->
io_u_m≠
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_map[i]);

909 
d°
->
io_u_submô
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_submit[i]);

910 
d°
->
io_u_com∂ëe
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_complete[i]);

913 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++)

914 
d°
->
io_u_œt_n
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_lat_n[i]);

915 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

916 
d°
->
io_u_œt_u
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_lat_u[i]);

917 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

918 
d°
->
io_u_œt_m
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_lat_m[i]);

920 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

921 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++)

922 
d°
->
io_u_∂©
[
i
][
j
] = 
	`À64_to_˝u
(
§c
->io_u_plat[i][j]);

924 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

925 
d°
->
tŸÆ_io_u
[
i
] = 
	`À64_to_˝u
(
§c
->total_io_u[i]);

926 
d°
->
sh‹t_io_u
[
i
] = 
	`À64_to_˝u
(
§c
->short_io_u[i]);

927 
d°
->
dr›_io_u
[
i
] = 
	`À64_to_˝u
(
§c
->drop_io_u[i]);

930 
d°
->
tŸÆ_submô
 = 
	`À64_to_˝u
(
§c
->total_submit);

931 
d°
->
tŸÆ_com∂ëe
 = 
	`À64_to_˝u
(
§c
->total_complete);

933 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

934 
d°
->
io_byãs
[
i
] = 
	`À64_to_˝u
(
§c
->io_bytes[i]);

935 
d°
->
ru¡ime
[
i
] = 
	`À64_to_˝u
(
§c
->runtime[i]);

938 
d°
->
tŸÆ_run_time
 = 
	`À64_to_˝u
(
§c
->total_run_time);

939 
d°
->
c⁄töue_⁄_îr‹
 = 
	`À16_to_˝u
(
§c
->continue_on_error);

940 
d°
->
tŸÆ_îr_cou¡
 = 
	`À64_to_˝u
(
§c
->total_err_count);

941 
d°
->
fú°_îr‹
 = 
	`À32_to_˝u
(
§c
->first_error);

942 
d°
->
kb_ba£
 = 
	`À32_to_˝u
(
§c
->kb_base);

943 
d°
->
unô_ba£
 = 
	`À32_to_˝u
(
§c
->unit_base);

945 
d°
->
sig_figs
 = 
	`À32_to_˝u
(
§c
->sig_figs);

947 
d°
->
œãncy_dïth
 = 
	`À32_to_˝u
(
§c
->latency_depth);

948 
d°
->
œãncy_èrgë
 = 
	`À64_to_˝u
(
§c
->latency_target);

949 
d°
->
œãncy_wödow
 = 
	`À64_to_˝u
(
§c
->latency_window);

950 
d°
->
œãncy_≥r˚¡ûe
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->œãncy_≥r˚¡ûe.u.
i
));

952 
d°
->
ƒ_block_öfos
 = 
	`À64_to_˝u
(
§c
->nr_block_infos);

953 
i
 = 0; i < 
d°
->
ƒ_block_öfos
; i++)

954 
d°
->
block_öfos
[
i
] = 
	`À32_to_˝u
(
§c
->block_infos[i]);

956 
d°
->
ss_dur
 = 
	`À64_to_˝u
(
§c
->ss_dur);

957 
d°
->
ss_°©e
 = 
	`À32_to_˝u
(
§c
->ss_state);

958 
d°
->
ss_hód
 = 
	`À32_to_˝u
(
§c
->ss_head);

959 
d°
->
ss_limô
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->ss_limô.u.
i
));

960 
d°
->
ss_¶›e
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->ss_¶›e.u.
i
));

961 
d°
->
ss_devüti⁄
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->ss_devüti⁄.u.
i
));

962 
d°
->
ss_¸ôîi⁄
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->ss_¸ôîi⁄.u.
i
));

964 i‡(
d°
->
ss_°©e
 & 
FIO_SS_DATA
) {

965 
i
 = 0; i < 
d°
->
ss_dur
; i++ ) {

966 
d°
->
ss_i›s_d©a
[
i
] = 
	`À64_to_˝u
(
§c
->ss_iops_data[i]);

967 
d°
->
ss_bw_d©a
[
i
] = 
	`À64_to_˝u
(
§c
->ss_bw_data[i]);

970 
	}
}

972 
	$c⁄vît_gs
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
)

974 
i
;

976 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

977 
d°
->
max_run
[
i
] = 
	`À64_to_˝u
(
§c
->max_run[i]);

978 
d°
->
mö_run
[
i
] = 
	`À64_to_˝u
(
§c
->min_run[i]);

979 
d°
->
max_bw
[
i
] = 
	`À64_to_˝u
(
§c
->max_bw[i]);

980 
d°
->
mö_bw
[
i
] = 
	`À64_to_˝u
(
§c
->min_bw[i]);

981 
d°
->
iobyãs
[
i
] = 
	`À64_to_˝u
(
§c
->iobytes[i]);

982 
d°
->
agg
[
i
] = 
	`À64_to_˝u
(
§c
->agg[i]);

985 
d°
->
kb_ba£
 = 
	`À32_to_˝u
(
§c
->kb_base);

986 
d°
->
unô_ba£
 = 
	`À32_to_˝u
(
§c
->unit_base);

987 
d°
->
sig_figs
 = 
	`À32_to_˝u
(
§c
->sig_figs);

988 
d°
->
groupid
 = 
	`À32_to_˝u
(
§c
->groupid);

989 
d°
->
unifõd_rw_ªp
 = 
	`À32_to_˝u
(
§c
->unified_rw_rep);

990 
	}
}

992 
	$js⁄_obje˘_add_˛õ¡_öfo
(
js⁄_obje˘
 *
obj
,

993 
fio_˛õ¡
 *
˛õ¡
)

995 c⁄° *
ho°«me
 = 
˛õ¡
->hostname ? client->hostname : "";

997 
	`js⁄_obje˘_add_vÆue_°rög
(
obj
, "ho°«me", 
ho°«me
);

998 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "p‹t", 
˛õ¡
->
p‹t
);

999 
	}
}

1001 
	$h™dÀ_ts
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1003 
cmd_ts_pdu
 *
p
 = (cmd_ts_pdu *Ë
cmd
->
∑ylﬂd
;

1004 
Êi°_hód
 *
›t_li°
 = 
NULL
;

1005 
js⁄_obje˘
 *
tsobj
;

1007 i‡(
˛õ¡
->
›t_li°s
 && 
p
->
ts
.
thªad_numbî
 <˛õ¡->
jobs
)

1008 
›t_li°
 = &
˛õ¡
->
›t_li°s
[
p
->
ts
.
thªad_numbî
 - 1];

1010 
tsobj
 = 
	`show_thªad_°©us
(&
p
->
ts
, &p->
rs
, 
›t_li°
, 
NULL
);

1011 
˛õ¡
->
did_°©
 = 
åue
;

1012 i‡(
tsobj
) {

1013 
	`js⁄_obje˘_add_˛õ¡_öfo
(
tsobj
, 
˛õ¡
);

1014 
	`js⁄_¨øy_add_vÆue_obje˘
(
˛õ¡s_¨øy
, 
tsobj
);

1017 i‡(
sum_°©_˛õ¡s
 <= 1)

1020 
	`sum_thªad_°©s
(&
˛õ¡_ts
, &
p
->
ts
, 
sum_°©_ƒ
 == 1);

1021 
	`sum_group_°©s
(&
˛õ¡_gs
, &
p
->
rs
);

1023 
˛õ¡_ts
.
membîs
++;

1024 
˛õ¡_ts
.
thªad_numbî
 = 
p
->
ts
.thread_number;

1025 
˛õ¡_ts
.
groupid
 = 
p
->
ts
.groupid;

1026 
˛õ¡_ts
.
unifõd_rw_ªp
 = 
p
->
ts
.unified_rw_rep;

1027 
˛õ¡_ts
.
sig_figs
 = 
p
->
ts
.sig_figs;

1029 i‡(++
sum_°©_ƒ
 =
sum_°©_˛õ¡s
) {

1030 
	`°r˝y
(
˛õ¡_ts
.
«me
, "All clients");

1031 
tsobj
 = 
	`show_thªad_°©us
(&
˛õ¡_ts
, &
˛õ¡_gs
, 
NULL
, NULL);

1032 i‡(
tsobj
) {

1033 
	`js⁄_obje˘_add_˛õ¡_öfo
(
tsobj
, 
˛õ¡
);

1034 
	`js⁄_¨øy_add_vÆue_obje˘
(
˛õ¡s_¨øy
, 
tsobj
);

1037 
	}
}

1039 
	$h™dÀ_gs
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1041 
group_run_°©s
 *
gs
 = (group_run_°©†*Ë
cmd
->
∑ylﬂd
;

1043 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

1044 
	`show_group_°©s
(
gs
, 
NULL
);

1045 
	}
}

1047 
	$h™dÀ_job_›t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1049 
cmd_job_›ti⁄
 *
pdu
 = (cmd_job_›ti⁄ *Ë
cmd
->
∑ylﬂd
;

1050 
¥öt_›ti⁄
 *
p
;

1052 i‡(!
job_›t_obje˘
)

1055 
pdu
->
globÆ
 = 
	`À16_to_˝u
(pdu->global);

1056 
pdu
->
åunˇãd
 = 
	`À16_to_˝u
(pdu->truncated);

1057 
pdu
->
groupid
 = 
	`À32_to_˝u
(pdu->groupid);

1059 
p
 = 
	`mÆloc
((*p));

1060 
p
->
«me
 = 
	`°rdup
((*Ë
pdu
->name);

1061 i‡(
pdu
->
vÆue
[0] != '\0')

1062 
p
->
vÆue
 = 
	`°rdup
((*Ë
pdu
->value);

1064 
p
->
vÆue
 = 
NULL
;

1066 i‡(
pdu
->
globÆ
) {

1067 c⁄° *
pos
 = "";

1069 i‡(
p
->
vÆue
)

1070 
pos
 = 
p
->
vÆue
;

1072 
	`js⁄_obje˘_add_vÆue_°rög
(
job_›t_obje˘
, 
p
->
«me
, 
pos
);

1073 } i‡(
˛õ¡
->
›t_li°s
) {

1074 
Êi°_hód
 *
›t_li°
 = &
˛õ¡
->
›t_li°s
[
pdu
->
groupid
];

1076 
	`Êi°_add_èû
(&
p
->
li°
, 
›t_li°
);

1078 
	}
}

1080 
	$h™dÀ_ãxt
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1082 
cmd_ãxt_pdu
 *
pdu
 = (cmd_ãxt_pdu *Ë
cmd
->
∑ylﬂd
;

1083 c⁄° *
buf
 = (c⁄° *Ë
pdu
->buf;

1084 c⁄° *
«me
;

1085 
fio_unu£d
 
ªt
;

1087 
«me
 = 
˛õ¡
->«mê? clõ¡->«mê: clõ¡->
ho°«me
;

1089 i‡(!
˛õ¡
->
skù_√wlöe
)

1090 
	`Ârötf
(
f_out
, "<%s> ", 
«me
);

1091 
ªt
 = 
	`fwrôe
(
buf
, 
pdu
->
buf_Àn
, 1, 
f_out
);

1092 
	`fÊush
(
f_out
);

1093 
˛õ¡
->
skù_√wlöe
 = 
	`°rchr
(
buf
, '\n'Ë=
NULL
;

1094 
	}
}

1096 
	$c⁄vît_agg
(
disk_utû_agg
 *
agg
)

1098 
i
;

1100 
i
 = 0; i < 2; i++) {

1101 
agg
->
ios
[
i
] = 
	`À64_to_˝u
(agg->ios[i]);

1102 
agg
->
mîges
[
i
] = 
	`À64_to_˝u
(agg->merges[i]);

1103 
agg
->
£˘‹s
[
i
] = 
	`À64_to_˝u
(agg->sectors[i]);

1104 
agg
->
ticks
[
i
] = 
	`À64_to_˝u
(agg->ticks[i]);

1107 
agg
->
io_ticks
 = 
	`À64_to_˝u
(agg->io_ticks);

1108 
agg
->
time_ö_queue
 = 
	`À64_to_˝u
(agg->time_in_queue);

1109 
agg
->
¶avecou¡
 = 
	`À32_to_˝u
(agg->slavecount);

1110 
agg
->
max_utû
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
◊gg->max_utû.u.
i
));

1111 
	}
}

1113 
	$c⁄vît_dus
(
disk_utû_°©
 *
dus
)

1115 
i
;

1117 
i
 = 0; i < 2; i++) {

1118 
dus
->
s
.
ios
[
i
] = 
	`À64_to_˝u
(dus->s.ios[i]);

1119 
dus
->
s
.
mîges
[
i
] = 
	`À64_to_˝u
(dus->s.merges[i]);

1120 
dus
->
s
.
£˘‹s
[
i
] = 
	`À64_to_˝u
(dus->s.sectors[i]);

1121 
dus
->
s
.
ticks
[
i
] = 
	`À64_to_˝u
(dus->s.ticks[i]);

1124 
dus
->
s
.
io_ticks
 = 
	`À64_to_˝u
(dus->s.io_ticks);

1125 
dus
->
s
.
time_ö_queue
 = 
	`À64_to_˝u
(dus->s.time_in_queue);

1126 
dus
->
s
.
m£c
 = 
	`À64_to_˝u
(dus->s.msec);

1127 
	}
}

1129 
	$h™dÀ_du
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1131 
cmd_du_pdu
 *
du
 = (cmd_du_pdu *Ë
cmd
->
∑ylﬂd
;

1133 i‡(!
˛õ¡
->
disk_°©s_shown
) {

1134 
˛õ¡
->
disk_°©s_shown
 = 
åue
;

1135 
	`log_öfo
("\nDisk stats (read/write):\n");

1138 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
) {

1139 
js⁄_obje˘
 *
duobj
;

1140 
	`js⁄_¨øy_add_disk_utû
(&
du
->
dus
, &du->
agg
, 
du_¨øy
);

1141 
duobj
 = 
	`js⁄_¨øy_œ°_vÆue_obje˘
(
du_¨øy
);

1142 
	`js⁄_obje˘_add_˛õ¡_öfo
(
duobj
, 
˛õ¡
);

1144 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_TERSE
)

1145 
	`¥öt_disk_utû
(&
du
->
dus
, &du->
agg
, 1, 
NULL
);

1146 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

1147 
	`¥öt_disk_utû
(&
du
->
dus
, &du->
agg
, 0, 
NULL
);

1148 
	}
}

1150 
	$c⁄vît_jobs_ëa
(
jobs_ëa
 *
je
)

1152 
i
;

1154 
je
->
ƒ_ru¬ög
 = 
	`À32_to_˝u
(je->nr_running);

1155 
je
->
ƒ_ømp
 = 
	`À32_to_˝u
(je->nr_ramp);

1156 
je
->
ƒ_≥ndög
 = 
	`À32_to_˝u
(je->nr_pending);

1157 
je
->
ƒ_£âög_up
 = 
	`À32_to_˝u
(je->nr_setting_up);

1158 
je
->
fûes_›í
 = 
	`À32_to_˝u
(je->files_open);

1160 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1161 
je
->
m_øã
[
i
] = 
	`À64_to_˝u
(je->m_rate[i]);

1162 
je
->
t_øã
[
i
] = 
	`À64_to_˝u
(je->t_rate[i]);

1163 
je
->
m_i›s
[
i
] = 
	`À32_to_˝u
(je->m_iops[i]);

1164 
je
->
t_i›s
[
i
] = 
	`À32_to_˝u
(je->t_iops[i]);

1165 
je
->
øã
[
i
] = 
	`À64_to_˝u
(je->rate[i]);

1166 
je
->
i›s
[
i
] = 
	`À32_to_˝u
(je->iops[i]);

1169 
je
->
ñ≠£d_£c
 = 
	`À64_to_˝u
(je->elapsed_sec);

1170 
je
->
ëa_£c
 = 
	`À64_to_˝u
(je->eta_sec);

1171 
je
->
ƒ_thªads
 = 
	`À32_to_˝u
(je->nr_threads);

1172 
je
->
is_pow2
 = 
	`À32_to_˝u
(je->is_pow2);

1173 
je
->
unô_ba£
 = 
	`À32_to_˝u
(je->unit_base);

1174 
je
->
sig_figs
 = 
	`À32_to_˝u
(je->sig_figs);

1175 
	}
}

1177 
	$fio_˛õ¡_sum_jobs_ëa
(
jobs_ëa
 *
d°
, jobs_ë®*
je
)

1179 
i
;

1181 
d°
->
ƒ_ru¬ög
 +
je
->nr_running;

1182 
d°
->
ƒ_ømp
 +
je
->nr_ramp;

1183 
d°
->
ƒ_≥ndög
 +
je
->nr_pending;

1184 
d°
->
ƒ_£âög_up
 +
je
->nr_setting_up;

1185 
d°
->
fûes_›í
 +
je
->files_open;

1187 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1188 
d°
->
m_øã
[
i
] +
je
->m_rate[i];

1189 
d°
->
t_øã
[
i
] +
je
->t_rate[i];

1190 
d°
->
m_i›s
[
i
] +
je
->m_iops[i];

1191 
d°
->
t_i›s
[
i
] +
je
->t_iops[i];

1192 
d°
->
øã
[
i
] +
je
->rate[i];

1193 
d°
->
i›s
[
i
] +
je
->iops[i];

1196 
d°
->
ñ≠£d_£c
 +
je
->elapsed_sec;

1198 i‡(
je
->
ëa_£c
 > 
d°
->eta_sec)

1199 
d°
->
ëa_£c
 = 
je
->eta_sec;

1201 
d°
->
ƒ_thªads
 +
je
->nr_threads;

1207 
	`°r˝y
((*Ë
d°
->
run_°r
, (*Ë
je
->run_str);

1208 
	}
}

1210 
boﬁ
 
	$ªmove_ª∂y_cmd
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1212 
fio_√t_cmd_ª∂y
 *
ª∂y
 = 
NULL
;

1213 
Êi°_hód
 *
íåy
;

1215 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡
->
cmd_li°
) {

1216 
ª∂y
 = 
	`Êi°_íåy
(
íåy
, 
fio_√t_cmd_ª∂y
, 
li°
);

1218 i‡(
cmd
->
èg
 =(
uöçå_t
Ë
ª∂y
)

1221 
ª∂y
 = 
NULL
;

1224 i‡(!
ª∂y
) {

1225 
	`log_îr
("fio: clõ¡: u«bÀÅÿföd m©chögÅag (%Œx)\n", (Ë
cmd
->
èg
);

1226  
Ál£
;

1229 
	`Êi°_dñ
(&
ª∂y
->
li°
);

1230 
cmd
->
èg
 = 
ª∂y
->
ßved_èg
;

1231 
	`‰ì
(
ª∂y
);

1232  
åue
;

1233 
	}
}

1235 
	$fio_˛õ¡_waô_f‹_ª∂y
(
fio_˛õ¡
 *
˛õ¡
, 
uöt64_t
 
èg
)

1238 
fio_√t_cmd_ª∂y
 *
ª∂y
 = 
NULL
;

1239 
Êi°_hód
 *
íåy
;

1241 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡
->
cmd_li°
) {

1242 
ª∂y
 = 
	`Êi°_íåy
(
íåy
, 
fio_√t_cmd_ª∂y
, 
li°
);

1244 i‡(
èg
 =(
uöçå_t
Ë
ª∂y
)

1247 
ª∂y
 = 
NULL
;

1250 i‡(!
ª∂y
)

1253 
	`u¶ìp
(1000);

1257 
	}
}

1259 
	$h™dÀ_ëa
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1261 
jobs_ëa
 *
je
 = (jobs_ë®*Ë
cmd
->
∑ylﬂd
;

1262 
˛õ¡_ëa
 *
ëa
 = (˛õ¡_ë®*Ë(
uöçå_t
Ë
cmd
->
èg
;

1264 
	`d¥öt
(
FD_NET
, "˛õ¡: gŸÉèÅag %p, %d\n", 
ëa
,Éè->
≥ndög
);

1266 
	`as£π
(
˛õ¡
->
ëa_ö_Êight
 =
ëa
);

1268 
˛õ¡
->
ëa_ö_Êight
 = 
NULL
;

1269 
	`Êi°_dñ_öô
(&
˛õ¡
->
ëa_li°
);

1270 
˛õ¡
->
ëa_timeouts
 = 0;

1272 i‡(
˛õ¡
->
›s
->
jobs_ëa
)

1273 
˛õ¡
->
›s
->
	`jobs_ëa
(˛õ¡, 
je
);

1275 
	`fio_˛õ¡_sum_jobs_ëa
(&
ëa
->ëa, 
je
);

1276 
	`fio_˛õ¡_dec_jobs_ëa
(
ëa
, 
˛õ¡
->
›s
->eta);

1277 
	}
}

1279 
	$˛õ¡_Êush_hi°_ßm∂es
(
FILE
 *
f
, 
hi°_cﬂr£√ss
, *
ßm∂es
,

1280 
uöt64_t
 
ßm∂e_size
)

1282 
io_ßm∂e
 *
s
;

1283 
log_off£t
;

1284 
uöt64_t
 
i
, 
j
, 
ƒ_ßm∂es
;

1285 
io_u_∂©_íåy
 *
íåy
;

1286 
uöt64_t
 *
io_u_∂©
;

1288 
°ride
 = 1 << 
hi°_cﬂr£√ss
;

1290 i‡(!
ßm∂e_size
)

1293 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 0, 0);

1294 
log_off£t
 = (
s
->
__ddú
 & 
LOG_OFFSET_SAMPLE_BIT
) != 0;

1296 
ƒ_ßm∂es
 = 
ßm∂e_size
 / 
	`__log_íåy_sz
(
log_off£t
);

1298 
i
 = 0; i < 
ƒ_ßm∂es
; i++) {

1300 
s
 = (
io_ßm∂e
 *)((*)
	`__gë_ßm∂e
(
ßm∂es
, 
log_off£t
, 
i
) +

1301 
i
 * (
io_u_∂©_íåy
));

1303 
íåy
 = 
s
->
d©a
.
∂©_íåy
;

1304 
io_u_∂©
 = 
íåy
->io_u_plat;

1306 
	`Ârötf
(
f
, "%lu, %u, %u, ", (Ë
s
->
time
,

1307 
	`io_ßm∂e_ddú
(
s
), s->
bs
);

1308 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
 - 
°ride
; j += stride) {

1309 
	`Ârötf
(
f
, "%Œu, ", ()
	`hi°_sum
(
j
, 
°ride
, 
io_u_∂©
, 
NULL
));

1311 
	`Ârötf
(
f
, "%llu\n", ()

1312 
	`hi°_sum
(
FIO_IO_U_PLAT_NR
 - 
°ride
, såide, 
io_u_∂©
, 
NULL
));

1315 
	}
}

1317 
	$fio_˛õ¡_h™dÀ_iﬁog
(
fio_˛õ¡
 *
˛õ¡
,

1318 
fio_√t_cmd
 *
cmd
)

1320 
cmd_iﬁog_pdu
 *
pdu
 = 
NULL
;

1321 
boﬁ
 
°‹e_dúe˘
;

1322 *
log_∑th«me
 = 
NULL
;

1323 
ªt
 = 0;

1325 
pdu
 = 
	`c⁄vît_iﬁog
(
cmd
, &
°‹e_dúe˘
);

1326 i‡(!
pdu
) {

1327 
	`log_îr
("fio: failed converting IOÜog\n");

1328 
ªt
 = 1;

1329 
out
;

1333 
log_∑th«me
 = 
	`mÆloc
(10 + 
	`°æí
((*)
pdu
->
«me
) +

1334 
	`°æí
(
˛õ¡
->
ho°«me
));

1335 i‡(!
log_∑th«me
) {

1336 
	`log_îr
("fio: memoryállocation of uniqueÖathname failed\n");

1337 
ªt
 = -1;

1338 
out
;

1341 
	`•rötf
(
log_∑th«me
, "%s.%s", 
pdu
->
«me
, 
˛õ¡
->
ho°«me
);

1343 i‡(
°‹e_dúe˘
) {

1344 
ssize_t
 
ªt
;

1345 
size_t
 
sz
;

1346 
fd
;

1348 
fd
 = 
	`›í
((c⁄° *Ë
log_∑th«me
,

1349 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

1350 i‡(
fd
 < 0) {

1351 
	`log_îr
("fio: openÜog %s: %s\n",

1352 
log_∑th«me
, 
	`°ªº‹
(
î∫o
));

1353 
ªt
 = 1;

1354 
out
;

1357 
sz
 = 
cmd
->
pdu_Àn
 - (*
pdu
);

1358 
ªt
 = 
	`wrôe
(
fd
, 
pdu
->
ßm∂es
, 
sz
);

1359 
	`˛o£
(
fd
);

1361 i‡(
ªt
 !
sz
) {

1362 
	`log_îr
("fio: short write on compressedÜog\n");

1363 
ªt
 = 1;

1364 
out
;

1367 
ªt
 = 0;

1369 
FILE
 *
f
;

1370 
f
 = 
	`f›í
((c⁄° *Ë
log_∑th«me
, "w");

1371 i‡(!
f
) {

1372 
	`log_îr
("fio: fopenÜog %s : %s\n",

1373 
log_∑th«me
, 
	`°ªº‹
(
î∫o
));

1374 
ªt
 = 1;

1375 
out
;

1378 i‡(
pdu
->
log_ty≥
 =
IO_LOG_TYPE_HIST
) {

1379 
	`˛õ¡_Êush_hi°_ßm∂es
(
f
, 
pdu
->
log_hi°_cﬂr£√ss
,Ödu->
ßm∂es
,

1380 
pdu
->
ƒ_ßm∂es
 * (
io_ßm∂e
));

1382 
	`Êush_ßm∂es
(
f
, 
pdu
->
ßm∂es
,

1383 
pdu
->
ƒ_ßm∂es
 * (
io_ßm∂e
));

1385 
	`f˛o£
(
f
);

1386 
ªt
 = 0;

1389 
out
:

1390 i‡(
pdu
 &&Ödu !(*Ë
cmd
->
∑ylﬂd
)

1391 
	`‰ì
(
pdu
);

1393 i‡(
log_∑th«me
)

1394 
	`‰ì
(
log_∑th«me
);

1396  
ªt
;

1397 
	}
}

1399 
	$h™dÀ_¥obe
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1401 
cmd_¥obe_ª∂y_pdu
 *
¥obe
 = (cmd_¥obe_ª∂y_pdu *Ë
cmd
->
∑ylﬂd
;

1402 c⁄° *
os
, *
¨ch
;

1403 
bô
[16];

1405 
os
 = 
	`fio_gë_os_°rög
(
¥obe
->os);

1406 i‡(!
os
)

1407 
os
 = "unknown";

1409 
¨ch
 = 
	`fio_gë_¨ch_°rög
(
¥obe
->arch);

1410 i‡(!
¨ch
)

1411 
os
 = "unknown";

1413 
	`•rötf
(
bô
, "%d-bô", 
¥obe
->
bµ
 * 8);

1414 
¥obe
->
Êags
 = 
	`À64_to_˝u
(probe->flags);

1416 
	`log_öfo
("hostname=%s, be=%u, %s, os=%s,árch=%s, fio=%s, flags=%lx\n",

1417 
¥obe
->
ho°«me
,Örobe->
bigídün
, 
bô
, 
os
, 
¨ch
,

1418 
¥obe
->
fio_vîsi⁄
, (Ë¥obe->
Êags
);

1420 i‡(!
˛õ¡
->
«me
)

1421 
˛õ¡
->
«me
 = 
	`°rdup
((*Ë
¥obe
->
ho°«me
);

1422 
	}
}

1424 
	$h™dÀ_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1426 
cmd_°¨t_pdu
 *
pdu
 = (cmd_°¨t_pdu *Ë
cmd
->
∑ylﬂd
;

1428 
˛õ¡
->
°©e
 = 
Clõ¡_°¨ãd
;

1429 
˛õ¡
->
jobs
 = 
	`À32_to_˝u
(
pdu
->jobs);

1430 
˛õ¡
->
ƒ_°©
 = 
	`À32_to_˝u
(
pdu
->
°©_ouçuts
);

1432 i‡(
˛õ¡
->
jobs
) {

1433 
i
;

1435 i‡(
˛õ¡
->
›t_li°s
)

1436 
	`‰ì
(
˛õ¡
->
›t_li°s
);

1438 
˛õ¡
->
›t_li°s
 = 
	`mÆloc
(˛õ¡->
jobs
 * (
Êi°_hód
));

1439 
i
 = 0; i < 
˛õ¡
->
jobs
; i++)

1440 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
›t_li°s
[
i
]);

1443 
sum_°©_˛õ¡s
 +
˛õ¡
->
ƒ_°©
;

1444 
	}
}

1446 
	$h™dÀ_°›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1448 i‡(
˛õ¡
->
îr‹
)

1449 
	`log_öfo
("˛õ¡ <%s>:Éxôed wôhÉº‹ %d\n", 
˛õ¡
->
ho°«me
, clõ¡->
îr‹
);

1450 
	}
}

1452 
	$c⁄vît_°›
(
fio_√t_cmd
 *
cmd
)

1454 
cmd_íd_pdu
 *
pdu
 = (cmd_íd_pdu *Ë
cmd
->
∑ylﬂd
;

1456 
pdu
->
îr‹
 = 
	`À32_to_˝u
(pdu->error);

1457 
	}
}

1459 
	$c⁄vît_ãxt
(
fio_√t_cmd
 *
cmd
)

1461 
cmd_ãxt_pdu
 *
pdu
 = (cmd_ãxt_pdu *Ë
cmd
->
∑ylﬂd
;

1463 
pdu
->
Àvñ
 = 
	`À32_to_˝u
(pdu->level);

1464 
pdu
->
buf_Àn
 = 
	`À32_to_˝u
(pdu->buf_len);

1465 
pdu
->
log_£c
 = 
	`À64_to_˝u
(pdu->log_sec);

1466 
pdu
->
log_u£c
 = 
	`À64_to_˝u
(pdu->log_usec);

1467 
	}
}

1469 
cmd_iﬁog_pdu
 *
	$c⁄vît_iﬁog_gz
(
fio_√t_cmd
 *
cmd
,

1470 
cmd_iﬁog_pdu
 *
pdu
)

1472 #ifde‡
CONFIG_ZLIB


1473 
cmd_iﬁog_pdu
 *
ªt
;

1474 
z_°ªam
 
°ªam
;

1475 
uöt32_t
 
ƒ_ßm∂es
;

1476 
size_t
 
tŸÆ
;

1477 *
p
;

1479 
°ªam
.
zÆloc
 = 
Z_NULL
;

1480 
°ªam
.
z‰ì
 = 
Z_NULL
;

1481 
°ªam
.
›aque
 = 
Z_NULL
;

1482 
°ªam
.
avaû_ö
 = 0;

1483 
°ªam
.
√xt_ö
 = 
Z_NULL
;

1485 i‡(
	`öÊ©eInô
(&
°ªam
Ë!
Z_OK
)

1486  
NULL
;

1491 
ƒ_ßm∂es
 = 
	`À64_to_˝u
(
pdu
->nr_samples);

1493 i‡(
pdu
->
log_ty≥
 =
IO_LOG_TYPE_HIST
)

1494 
tŸÆ
 = 
ƒ_ßm∂es
 * (
	`__log_íåy_sz
(
	`À32_to_˝u
(
pdu
->
log_off£t
)) +

1495 (
io_u_∂©_íåy
));

1497 
tŸÆ
 = 
ƒ_ßm∂es
 * 
	`__log_íåy_sz
(
	`À32_to_˝u
(
pdu
->
log_off£t
));

1498 
ªt
 = 
	`mÆloc
(
tŸÆ
 + (*
pdu
));

1499 
ªt
->
ƒ_ßm∂es
 =Çr_samples;

1501 
	`mem˝y
(
ªt
, 
pdu
, (*pdu));

1503 
p
 = (*Ë
ªt
 + (*
pdu
);

1505 
°ªam
.
avaû_ö
 = 
cmd
->
pdu_Àn
 - (*
pdu
);

1506 
°ªam
.
√xt_ö
 = (*)((*Ë
pdu
 + (*pdu));

1507 
°ªam
.
avaû_ö
) {

1508 
this_chunk
 = 65536;

1509 
this_Àn
;

1510 
îr
;

1512 i‡(
this_chunk
 > 
tŸÆ
)

1513 
this_chunk
 = 
tŸÆ
;

1515 
°ªam
.
avaû_out
 = 
this_chunk
;

1516 
°ªam
.
√xt_out
 = (*)
p
;

1517 
îr
 = 
	`öÊ©e
(&
°ªam
, 
Z_NO_FLUSH
);

1519 i‡(
îr
 < 0) {

1520 
	`log_îr
("fio: inÊ©êîr‹ %d\n", 
îr
);

1521 
	`‰ì
(
ªt
);

1522 
ªt
 = 
NULL
;

1523 
îr
;

1526 
this_Àn
 = 
this_chunk
 - 
°ªam
.
avaû_out
;

1527 
p
 +
this_Àn
;

1528 
tŸÆ
 -
this_Àn
;

1531 
îr
:

1532 
	`öÊ©eEnd
(&
°ªam
);

1533  
ªt
;

1535  
NULL
;

1537 
	}
}

1543 
cmd_iﬁog_pdu
 *
	$c⁄vît_iﬁog
(
fio_√t_cmd
 *
cmd
,

1544 
boﬁ
 *
°‹e_dúe˘
)

1546 
cmd_iﬁog_pdu
 *
pdu
 = (cmd_iﬁog_pdu *Ë
cmd
->
∑ylﬂd
;

1547 
cmd_iﬁog_pdu
 *
ªt
;

1548 
uöt64_t
 
i
;

1549 
com¥es£d
;

1550 *
ßm∂es
;

1552 *
°‹e_dúe˘
 = 
Ál£
;

1558 
com¥es£d
 = 
	`À32_to_˝u
(
pdu
->compressed);

1559 i‡(
com¥es£d
 =
XMIT_COMPRESSED
) {

1560 #i‚de‡
CONFIG_ZLIB


1561 
	`log_îr
("fio: server sent compressed data by mistake\n");

1562  
NULL
;

1564 
ªt
 = 
	`c⁄vît_iﬁog_gz
(
cmd
, 
pdu
);

1565 i‡(!
ªt
) {

1566 
	`log_îr
("fio: failed decompressingÜog\n");

1567  
NULL
;

1569 } i‡(
com¥es£d
 =
STORE_COMPRESSED
) {

1570 *
°‹e_dúe˘
 = 
åue
;

1571 
ªt
 = 
pdu
;

1573 
ªt
 = 
pdu
;

1575 
ªt
->
ƒ_ßm∂es
 = 
	`À64_to_˝u
(ret->nr_samples);

1576 
ªt
->
thªad_numbî
 = 
	`À32_to_˝u
(ret->thread_number);

1577 
ªt
->
log_ty≥
 = 
	`À32_to_˝u
(ret->log_type);

1578 
ªt
->
com¥es£d
 = 
	`À32_to_˝u
(ret->compressed);

1579 
ªt
->
log_off£t
 = 
	`À32_to_˝u
(ret->log_offset);

1580 
ªt
->
log_hi°_cﬂr£√ss
 = 
	`À32_to_˝u
(ret->log_hist_coarseness);

1582 i‡(*
°‹e_dúe˘
)

1583  
ªt
;

1585 
ßm∂es
 = &
ªt
->samples[0];

1586 
i
 = 0; i < 
ªt
->
ƒ_ßm∂es
; i++) {

1587 
io_ßm∂e
 *
s
;

1589 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 
ªt
->
log_off£t
, 
i
);

1590 i‡(
ªt
->
log_ty≥
 =
IO_LOG_TYPE_HIST
)

1591 
s
 = (
io_ßm∂e
 *)((*)†+ (
io_u_∂©_íåy
Ë* 
i
);

1593 
s
->
time
 = 
	`À64_to_˝u
(s->time);

1594 
s
->
d©a
.
vÆ
 = 
	`À64_to_˝u
(s->data.val);

1595 
s
->
__ddú
 = 
	`À32_to_˝u
(s->__ddir);

1596 
s
->
bs
 = 
	`À32_to_˝u
(s->bs);

1598 i‡(
ªt
->
log_off£t
) {

1599 
io_ßm∂e_off£t
 *
so
 = (*Ë
s
;

1601 
so
->
off£t
 = 
	`À64_to_˝u
(so->offset);

1604 i‡(
ªt
->
log_ty≥
 =
IO_LOG_TYPE_HIST
) {

1605 
s
->
d©a
.
∂©_íåy
 = (
io_u_∂©_íåy
 *)(((*)s) + (*s));

1606 
s
->
d©a
.
∂©_íåy
->
li°
.
√xt
 = 
NULL
;

1607 
s
->
d©a
.
∂©_íåy
->
li°
.
¥ev
 = 
NULL
;

1611  
ªt
;

1612 
	}
}

1614 
	$£ndfûe_ª∂y
(
fd
, 
cmd_£ndfûe_ª∂y
 *
ªp
,

1615 
size_t
 
size
, 
uöt64_t
 
èg
)

1617 
ªp
->
îr‹
 = 
	`˝u_to_À32
(rep->error);

1618 
	`fio_√t_£nd_cmd
(
fd
, 
FIO_NET_CMD_SENDFILE
, 
ªp
, 
size
, &
èg
, 
NULL
);

1619 
	}
}

1621 
	$fio_£nd_fûe
(
fio_˛õ¡
 *
˛õ¡
, 
cmd_£ndfûe
 *
pdu
,

1622 
uöt64_t
 
èg
)

1624 
cmd_£ndfûe_ª∂y
 *
ªp
;

1625 
°©
 
sb
;

1626 
size_t
 
size
;

1627 
fd
;

1629 
size
 = (*
ªp
);

1630 
ªp
 = 
	`mÆloc
(
size
);

1632 i‡(
	`°©
((*)
pdu
->
∑th
, &
sb
) < 0) {

1633 
Áû
:

1634 
ªp
->
îr‹
 = 
î∫o
;

1635 
	`£ndfûe_ª∂y
(
˛õ¡
->
fd
, 
ªp
, 
size
, 
èg
);

1636 
	`‰ì
(
ªp
);

1640 
size
 +
sb
.
°_size
;

1641 
ªp
 = 
	`ªÆloc
‘ï, 
size
);

1642 
ªp
->
size
 = 
	`˝u_to_À32
((
uöt32_t
Ë
sb
.
°_size
);

1644 
fd
 = 
	`›í
((*)
pdu
->
∑th
, 
O_RDONLY
);

1645 i‡(
fd
 == -1 )

1646 
Áû
;

1648 
ªp
->
îr‹
 = 
	`ªad_d©a
(
fd
, &ªp->
d©a
, 
sb
.
°_size
);

1649 
	`£ndfûe_ª∂y
(
˛õ¡
->
fd
, 
ªp
, 
size
, 
èg
);

1650 
	`‰ì
(
ªp
);

1651 
	`˛o£
(
fd
);

1653 
	}
}

1655 
	$fio_h™dÀ_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

1657 
˛õ¡_›s
 *
›s
 = 
˛õ¡
->ops;

1658 
fio_√t_cmd
 *
cmd
;

1659 
size
;

1661 
	`d¥öt
(
FD_NET
, "˛õ¡: h™dÀ %s\n", 
˛õ¡
->
ho°«me
);

1663 
cmd
 = 
	`fio_√t_ªcv_cmd
(
˛õ¡
->
fd
, 
åue
);

1664 i‡(!
cmd
)

1667 
	`d¥öt
(
FD_NET
, "client: got cmd op %s from %s (pdu=%u)\n",

1668 
	`fio_£rvî_›
(
cmd
->
›code
), 
˛õ¡
->
ho°«me
, cmd->
pdu_Àn
);

1670 
˛õ¡
->
œ°_cmd
 = 
cmd
->
›code
;

1672 
cmd
->
›code
) {

1673 
FIO_NET_CMD_QUIT
:

1674 i‡(
›s
->
quô
)

1675 
›s
->
	`quô
(
˛õ¡
, 
cmd
);

1676 
	`ªmove_˛õ¡
(
˛õ¡
);

1678 
FIO_NET_CMD_TEXT
:

1679 
	`c⁄vît_ãxt
(
cmd
);

1680 
›s
->
	`ãxt
(
˛õ¡
, 
cmd
);

1682 
FIO_NET_CMD_DU
: {

1683 
cmd_du_pdu
 *
du
 = (cmd_du_pdu *Ë
cmd
->
∑ylﬂd
;

1685 
	`c⁄vît_dus
(&
du
->
dus
);

1686 
	`c⁄vît_agg
(&
du
->
agg
);

1688 
›s
->
	`disk_utû
(
˛õ¡
, 
cmd
);

1691 
FIO_NET_CMD_TS
: {

1692 
cmd_ts_pdu
 *
p
 = (cmd_ts_pdu *Ë
cmd
->
∑ylﬂd
;

1694 
	`d¥öt
(
FD_NET
, "˛õ¡:Ås->ss_°©ê%u\n", (Ë
	`À32_to_˝u
(
p
->
ts
.
ss_°©e
));

1695 i‡(
	`À32_to_˝u
(
p
->
ts
.
ss_°©e
Ë& 
FIO_SS_DATA
) {

1696 
	`d¥öt
(
FD_NET
, "client:Ñeceived steadystateÑing buffers\n");

1698 
size
 = 
	`À64_to_˝u
(
p
->
ts
.
ss_dur
);

1699 
p
->
ts
.
ss_i›s_d©a
 = (
uöt64_t
 *Ë((
cmd_ts_pdu
 *)
cmd
->
∑ylﬂd
 + 1);

1700 
p
->
ts
.
ss_bw_d©a
 =Ö->ts.
ss_i›s_d©a
 + 
size
;

1703 
	`c⁄vît_ts
(&
p
->
ts
, &p->ts);

1704 
	`c⁄vît_gs
(&
p
->
rs
, &p->rs);

1706 
›s
->
	`thªad_°©us
(
˛õ¡
, 
cmd
);

1709 
FIO_NET_CMD_GS
: {

1710 
group_run_°©s
 *
gs
 = (group_run_°©†*Ë
cmd
->
∑ylﬂd
;

1712 
	`c⁄vît_gs
(
gs
, gs);

1714 
›s
->
	`group_°©s
(
˛õ¡
, 
cmd
);

1717 
FIO_NET_CMD_ETA
: {

1718 
jobs_ëa
 *
je
 = (jobs_ë®*Ë
cmd
->
∑ylﬂd
;

1720 i‡(!
	`ªmove_ª∂y_cmd
(
˛õ¡
, 
cmd
))

1722 
	`c⁄vît_jobs_ëa
(
je
);

1723 
	`h™dÀ_ëa
(
˛õ¡
, 
cmd
);

1726 
FIO_NET_CMD_PROBE
:

1727 
	`ªmove_ª∂y_cmd
(
˛õ¡
, 
cmd
);

1728 
›s
->
	`¥obe
(
˛õ¡
, 
cmd
);

1730 
FIO_NET_CMD_SERVER_START
:

1731 
˛õ¡
->
°©e
 = 
Clõ¡_ru¬ög
;

1732 i‡(
›s
->
job_°¨t
)

1733 
›s
->
	`job_°¨t
(
˛õ¡
, 
cmd
);

1735 
FIO_NET_CMD_START
: {

1736 
cmd_°¨t_pdu
 *
pdu
 = (cmd_°¨t_pdu *Ë
cmd
->
∑ylﬂd
;

1738 
pdu
->
jobs
 = 
	`À32_to_˝u
(pdu->jobs);

1739 
›s
->
	`°¨t
(
˛õ¡
, 
cmd
);

1742 
FIO_NET_CMD_STOP
: {

1743 
cmd_íd_pdu
 *
pdu
 = (cmd_íd_pdu *Ë
cmd
->
∑ylﬂd
;

1745 
	`c⁄vît_°›
(
cmd
);

1746 
˛õ¡
->
°©e
 = 
Clõ¡_°›≥d
;

1747 
˛õ¡
->
îr‹
 = 
	`À32_to_˝u
(
pdu
->error);

1748 
˛õ¡
->
sig«l
 = 
	`À32_to_˝u
(
pdu
->signal);

1749 
›s
->
	`°›
(
˛õ¡
, 
cmd
);

1752 
FIO_NET_CMD_ADD_JOB
: {

1753 
cmd_add_job_pdu
 *
pdu
 = (cmd_add_job_pdu *Ë
cmd
->
∑ylﬂd
;

1755 
˛õ¡
->
thªad_numbî
 = 
	`À32_to_˝u
(
pdu
->thread_number);

1756 
˛õ¡
->
groupid
 = 
	`À32_to_˝u
(
pdu
->groupid);

1758 i‡(
›s
->
add_job
)

1759 
›s
->
	`add_job
(
˛õ¡
, 
cmd
);

1762 
FIO_NET_CMD_IOLOG
:

1763 
	`fio_˛õ¡_h™dÀ_iﬁog
(
˛õ¡
, 
cmd
);

1765 
FIO_NET_CMD_UPDATE_JOB
:

1766 
›s
->
	`upd©e_job
(
˛õ¡
, 
cmd
);

1767 
	`ªmove_ª∂y_cmd
(
˛õ¡
, 
cmd
);

1769 
FIO_NET_CMD_VTRIGGER
: {

1770 
Æl_io_li°
 *
pdu
 = (Æl_io_li° *Ë
cmd
->
∑ylﬂd
;

1771 
buf
[128];

1772 
off
 = 0;

1774 i‡(
aux_∑th
) {

1775 
	`°r˝y
(
buf
, 
aux_∑th
);

1776 
off
 = 
	`°æí
(
buf
);

1779 
	`__vîify_ßve_°©e
(
pdu
, 
	`£rvî_«me
(
˛õ¡
, &
buf
[
off
], (buf) - off));

1780 
	`exec_åiggî
(
åiggî_cmd
);

1783 
FIO_NET_CMD_SENDFILE
: {

1784 
cmd_£ndfûe
 *
pdu
 = (cmd_£ndfûê*Ë
cmd
->
∑ylﬂd
;

1785 
	`fio_£nd_fûe
(
˛õ¡
, 
pdu
, 
cmd
->
èg
);

1788 
FIO_NET_CMD_JOB_OPT
: {

1789 
	`h™dÀ_job_›t
(
˛õ¡
, 
cmd
);

1793 
	`log_îr
("fio: unknow¿˛õ¡ op: %s\n", 
	`fio_£rvî_›
(
cmd
->
›code
));

1797 
	`‰ì
(
cmd
);

1799 
	}
}

1801 
	$fio_˛õ¡s_£nd_åiggî
(c⁄° *
cmd
)

1803 
Êi°_hód
 *
íåy
;

1804 
fio_˛õ¡
 *
˛õ¡
;

1805 
size_t
 
¶í
;

1807 
	`d¥öt
(
FD_NET
, "˛õ¡: síd våiggî: %s\n", 
cmd
);

1809 i‡(!
cmd
)

1810 
¶í
 = 0;

1812 
¶í
 = 
	`°æí
(
cmd
);

1814 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_li°
) {

1815 
cmd_våiggî_pdu
 *
pdu
;

1817 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

1819 
pdu
 = 
	`mÆloc
((*pduË+ 
¶í
);

1820 
pdu
->
Àn
 = 
	`˝u_to_À16
((
uöt16_t
Ë
¶í
);

1821 i‡(
¶í
)

1822 
	`mem˝y
(
pdu
->
cmd
, cmd, 
¶í
);

1823 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_VTRIGGER
, 
pdu
,

1824 (*
pdu
Ë+ 
¶í
, 
NULL
, NULL);

1825 
	`‰ì
(
pdu
);

1829 
	}
}

1831 
	$ªque°_˛õ¡_ëas
(
˛õ¡_›s
 *
›s
)

1833 
fio_˛õ¡
 *
˛õ¡
;

1834 
Êi°_hód
 *
íåy
;

1835 
˛õ¡_ëa
 *
ëa
;

1836 
skù≥d
 = 0;

1838 i‡(
ëa_¥öt
 =
FIO_ETA_NEVER
)

1841 
	`d¥öt
(
FD_NET
, "˛õ¡:Ñeque°Éè (%d)\n", 
ƒ_˛õ¡s
);

1843 
ëa
 = 
	`ˇŒoc
(1, (*ëaË+ 
	`__THREAD_RUNSTR_SZ
(
REAL_MAX_JOBS
));

1844 
ëa
->
≥ndög
 = 
ƒ_˛õ¡s
;

1846 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_li°
) {

1847 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

1849 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
ëa_li°
)) {

1850 
skù≥d
++;

1853 i‡(
˛õ¡
->
°©e
 !
Clõ¡_ru¬ög
)

1856 
	`as£π
(!
˛õ¡
->
ëa_ö_Êight
);

1857 
	`Êi°_add_èû
(&
˛õ¡
->
ëa_li°
, &eta_list);

1858 
˛õ¡
->
ëa_ö_Êight
 = 
ëa
;

1859 
	`fio_√t_£nd_sim∂e_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_SEND_ETA
,

1860 (
uöçå_t
Ë
ëa
, &
˛õ¡
->
cmd_li°
);

1863 
skù≥d
--) {

1864 i‡(!
	`fio_˛õ¡_dec_jobs_ëa
(
ëa
, 
›s
->eta))

1868 
	`d¥öt
(
FD_NET
, "˛õ¡:Ñeque°edÉèÅag %p\n", 
ëa
);

1869 
	}
}

1874 
	$h™dÀ_cmd_timeout
(
fio_˛õ¡
 *
˛õ¡
,

1875 
fio_√t_cmd_ª∂y
 *
ª∂y
)

1877 
uöt16_t
 
ª∂y_›code
 = 
ª∂y
->
›code
;

1879 
	`Êi°_dñ
(&
ª∂y
->
li°
);

1880 
	`‰ì
(
ª∂y
);

1882 i‡(
ª∂y_›code
 !
FIO_NET_CMD_SEND_ETA
)

1885 
	`log_öfo
("˛õ¡ <%s>:Åimeouà⁄ SEND_ETA\n", 
˛õ¡
->
ho°«me
);

1887 
	`Êi°_dñ_öô
(&
˛õ¡
->
ëa_li°
);

1888 i‡(
˛õ¡
->
ëa_ö_Êight
) {

1889 
	`fio_˛õ¡_dec_jobs_ëa
(
˛õ¡
->
ëa_ö_Êight
, clõ¡->
›s
->
ëa
);

1890 
˛õ¡
->
ëa_ö_Êight
 = 
NULL
;

1896 i‡(
˛õ¡
->
ëa_timeouts
++ > 5)

1900 
	}
}

1902 
	$˛õ¡_check_cmd_timeout
(
fio_˛õ¡
 *
˛õ¡
,

1903 
time•ec
 *
now
)

1905 
fio_√t_cmd_ª∂y
 *
ª∂y
;

1906 
Êi°_hód
 *
íåy
, *
tmp
;

1907 
ªt
 = 0;

1909 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡
->
cmd_li°
) {

1910 
›
;

1912 
ª∂y
 = 
	`Êi°_íåy
(
íåy
, 
fio_√t_cmd_ª∂y
, 
li°
);

1914 i‡(
	`mtime_sö˚
(&
ª∂y
->
ts
, 
now
Ë< 
FIO_NET_CLIENT_TIMEOUT
)

1917 
›
 = 
ª∂y
->
›code
;

1918 i‡(!
	`h™dÀ_cmd_timeout
(
˛õ¡
, 
ª∂y
))

1921 
	`log_îr
("fio: clõ¡ %s,Åimeouà⁄ cmd %s\n", 
˛õ¡
->
ho°«me
,

1922 
	`fio_£rvî_›
(
›
));

1923 
ªt
 = 1;

1926  
	`Êi°_em±y
(&
˛õ¡
->
cmd_li°
Ë&& 
ªt
;

1927 
	}
}

1929 
	$fio_check_˛õ¡s_timed_out
()

1931 
fio_˛õ¡
 *
˛õ¡
;

1932 
Êi°_hód
 *
íåy
, *
tmp
;

1933 
time•ec
 
ts
;

1934 
ªt
 = 0;

1936 
	`fio_gëtime
(&
ts
, 
NULL
);

1938 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

1939 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

1941 i‡(
	`Êi°_em±y
(&
˛õ¡
->
cmd_li°
))

1944 i‡(!
	`˛õ¡_check_cmd_timeout
(
˛õ¡
, &
ts
))

1947 i‡(
˛õ¡
->
›s
->
timed_out
)

1948 
˛õ¡
->
›s
->
	`timed_out
(client);

1950 
	`log_îr
("fio: clõ¡ %†timed out\n", 
˛õ¡
->
ho°«me
);

1952 i‡(
˛õ¡
->
œ°_cmd
 !
FIO_NET_CMD_VTRIGGER
)

1953 
˛õ¡
->
îr‹
 = 
ETIMEDOUT
;

1955 
	`log_öfo
("fio: ignoringÅimeout dueÅo vtrigger\n");

1956 
	`ªmove_˛õ¡
(
˛õ¡
);

1957 
ªt
 = 1;

1960  
ªt
;

1961 
	}
}

1963 
	$fio_h™dÀ_˛õ¡s
(
˛õ¡_›s
 *
›s
)

1965 
pﬁlfd
 *
pfds
;

1966 
i
, 
ªt
 = 0, 
ªtvÆ
 = 0;

1968 
	`fio_gëtime
(&
ëa_ts
, 
NULL
);

1970 
pfds
 = 
	`mÆloc
(
ƒ_˛õ¡s
 * (
pﬁlfd
));

1972 
	`öô_thªad_°©
(&
˛õ¡_ts
);

1973 
	`öô_group_run_°©
(&
˛õ¡_gs
);

1975 !
exô_backíd
 && 
ƒ_˛õ¡s
) {

1976 
Êi°_hód
 *
íåy
, *
tmp
;

1977 
fio_˛õ¡
 *
˛õ¡
;

1979 
i
 = 0;

1980 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

1981 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

1983 i‡(!
˛õ¡
->
£¡_job
 && !˛õ¡->
›s
->
°ay_c⁄√˘ed
 &&

1984 
	`Êi°_em±y
(&
˛õ¡
->
cmd_li°
)) {

1985 
	`ªmove_˛õ¡
(
˛õ¡
);

1989 
pfds
[
i
].
fd
 = 
˛õ¡
->fd;

1990 
pfds
[
i
].
evíts
 = 
POLLIN
;

1991 
i
++;

1994 i‡(!
ƒ_˛õ¡s
)

1997 
	`as£π
(
i
 =
ƒ_˛õ¡s
);

2000 
time•ec
 
ts
;

2001 
timeout
;

2003 
	`fio_gëtime
(&
ts
, 
NULL
);

2004 i‡(
	`ëa_time_wôhö_¶ack
(
	`mtime_sö˚
(&
ëa_ts
, &
ts
))) {

2005 
	`ªque°_˛õ¡_ëas
(
›s
);

2006 
	`mem˝y
(&
ëa_ts
, &
ts
, (ts));

2008 i‡(
	`fio_check_˛õ¡s_timed_out
())

2012 
	`check_åiggî_fûe
();

2014 
timeout
 = 
	`mö
(100u, 
›s
->
ëa_m£c
);

2016 
ªt
 = 
	`pﬁl
(
pfds
, 
ƒ_˛õ¡s
, 
timeout
);

2017 i‡(
ªt
 < 0) {

2018 i‡(
î∫o
 =
EINTR
)

2020 
	`log_îr
("fio:Öﬁ»˛õ¡s: %s\n", 
	`°ªº‹
(
î∫o
));

2022 } i‡(!
ªt
)

2024 } 
ªt
 <= 0);

2026 
i
 = 0; i < 
ƒ_˛õ¡s
; i++) {

2027 i‡(!(
pfds
[
i
].
ªvíts
 & 
POLLIN
))

2030 
˛õ¡
 = 
	`föd_˛õ¡_by_fd
(
pfds
[
i
].
fd
);

2031 i‡(!
˛õ¡
) {

2032 
	`log_îr
("fio: unknow¿˛õ¡ fd %ld\n", (Ë
pfds
[
i
].
fd
);

2035 i‡(!
	`fio_h™dÀ_˛õ¡
(
˛õ¡
)) {

2036 
	`log_öfo
("client: host=%s disconnected\n",

2037 
˛õ¡
->
ho°«me
);

2038 
	`ªmove_˛õ¡
(
˛õ¡
);

2039 
ªtvÆ
 = 1;

2040 } i‡(
˛õ¡
->
îr‹
)

2041 
ªtvÆ
 = 1;

2042 
	`fio_put_˛õ¡
(
˛õ¡
);

2046 
	`fio_˛õ¡_js⁄_föi
();

2048 
	`‰ì
(
pfds
);

2049  
ªtvÆ
 || 
îr‹_˛õ¡s
;

2050 
	}
}

	@/home/ysjin/Desktop/fio/fio/client.h

1 #i‚de‡
CLIENT_H


2 
	#CLIENT_H


	)

4 
	~<sys/sockë.h
>

5 
	~<sys/un.h
>

6 
	~<√töë/ö.h
>

7 
	~<¨∑/öë.h
>

9 
	~"lib/ty≥s.h
"

10 
	~"°©.h
"

12 
	gfio_√t_cmd
;

13 
	g˛õ¡_›s
;

16 
	mClõ¡_¸óãd
 = 0,

17 
	mClõ¡_c⁄√˘ed
 = 1,

18 
	mClõ¡_°¨ãd
 = 2,

19 
	mClõ¡_ru¬ög
 = 3,

20 
	mClõ¡_°›≥d
 = 4,

21 
	mClõ¡_exôed
 = 5,

24 
	s˛õ¡_fûe
 {

25 *
	mfûe
;

26 
boﬁ
 
	mªmŸe
;

29 
	sfio_˛õ¡
 {

30 
Êi°_hód
 
	mli°
;

31 
Êi°_hód
 
	mhash_li°
;

32 
Êi°_hód
 
	m¨g_li°
;

34 
sockaddr_ö
 
	maddr
;

35 
sockaddr_ö6
 
	maddr6
;

36 
sockaddr_un
 
	maddr_un
;

38 *
	mho°«me
;

39 
	mp‹t
;

40 
	mfd
;

41 
	mªfs
;

42 
	mœ°_cmd
;

44 *
	m«me
;

46 
Êi°_hód
 *
	m›t_li°s
;

48 
	m°©e
;

50 
boﬁ
 
	mskù_√wlöe
;

51 
boﬁ
 
	mis_sock
;

52 
boﬁ
 
	mdisk_°©s_shown
;

53 
	mjobs
;

54 
	mƒ_°©
;

55 
	mîr‹
;

56 
	msig«l
;

57 
	mùv6
;

58 
boﬁ
 
	m£¡_job
;

59 
boﬁ
 
	mdid_°©
;

60 
uöt32_t
 
	mty≥
;

62 
uöt32_t
 
	mthªad_numbî
;

63 
uöt32_t
 
	mgroupid
;

65 
Êi°_hód
 
	mëa_li°
;

66 
˛õ¡_ëa
 *
	mëa_ö_Êight
;

67 
	mëa_timeouts
;

69 
Êi°_hód
 
	mcmd_li°
;

71 
uöt16_t
 
	m¨gc
;

72 **
	m¨gv
;

74 
˛õ¡_›s
 *
	m›s
;

75 *
	m˛õ¡_d©a
;

77 
˛õ¡_fûe
 *
	mfûes
;

78 
	mƒ_fûes
;

81 (
	t˛õ¡_cmd_›
)(
	tfio_˛õ¡
 *, 
	tfio_√t_cmd
 *);

82 (
	t˛õ¡_ëa_›
)(
	tjobs_ëa
 *
	tje
);

83 (
	t˛õ¡_timed_out_›
)(
	tfio_˛õ¡
 *);

84 (
	t˛õ¡_jobs_ëa_›
)(
	tfio_˛õ¡
 *
	t˛õ¡
, 
	tjobs_ëa
 *
	tje
);

86 
	s˛õ¡_›s
 {

87 
˛õ¡_cmd_›
 *
ãxt
;

88 
˛õ¡_cmd_›
 *
disk_utû
;

89 
˛õ¡_cmd_›
 *
thªad_°©us
;

90 
˛õ¡_cmd_›
 *
group_°©s
;

91 
˛õ¡_jobs_ëa_›
 *
jobs_ëa
;

92 
˛õ¡_ëa_›
 *
ëa
;

93 
˛õ¡_cmd_›
 *
¥obe
;

94 
˛õ¡_cmd_›
 *
quô
;

95 
˛õ¡_cmd_›
 *
add_job
;

96 
˛õ¡_cmd_›
 *
upd©e_job
;

97 
˛õ¡_timed_out_›
 *
timed_out
;

98 
˛õ¡_cmd_›
 *
°›
;

99 
˛õ¡_cmd_›
 *
°¨t
;

100 
˛õ¡_cmd_›
 *
job_°¨t
;

101 
˛õ¡_timed_out_›
 *
ªmoved
;

103 
ëa_m£c
;

104 
°ay_c⁄√˘ed
;

105 
uöt32_t
 
˛õ¡_ty≥
;

108 
˛õ¡_›s
 
fio_˛õ¡_›s
;

110 
	s˛õ¡_ëa
 {

111 
≥ndög
;

112 
jobs_ëa
 
ëa
;

115 
	`fio_h™dÀ_˛õ¡
(
fio_˛õ¡
 *);

116 
	`fio_˛õ¡_sum_jobs_ëa
(
jobs_ëa
 *
d°
, jobs_ë®*
je
);

119 
Fio_˛õ¡_ùv4
 = 1,

120 
Fio_˛õ¡_ùv6
,

121 
Fio_˛õ¡_sockë
,

124 
	`fio_˛õ¡_c⁄√˘
(
fio_˛õ¡
 *);

125 
	`fio_˛õ¡s_c⁄√˘
();

126 
	`fio_°¨t_˛õ¡
(
fio_˛õ¡
 *);

127 
	`fio_°¨t_Æl_˛õ¡s
();

128 
	`fio_˛õ¡s_£nd_öi
(const *);

129 
	`fio_˛õ¡_£nd_öi
(
fio_˛õ¡
 *, c⁄° *, 
boﬁ
);

130 
	`fio_h™dÀ_˛õ¡s
(
˛õ¡_›s
 *);

131 
	`fio_˛õ¡_add
(
˛õ¡_›s
 *, const *, **);

132 
fio_˛õ¡
 *
	`fio_˛õ¡_add_ex∂icô
(
˛õ¡_›s
 *, const *, , );

133 
	`fio_˛õ¡_add_cmd_›ti⁄
(*, const *);

134 
	`fio_˛õ¡_add_öi_fûe
(*, c⁄° *, 
boﬁ
);

135 
	`fio_˛õ¡_ãrmö©e
(
fio_˛õ¡
 *);

136 
fio_˛õ¡
 *
	`fio_gë_˛õ¡
(fio_client *);

137 
	`fio_put_˛õ¡
(
fio_˛õ¡
 *);

138 
	`fio_˛õ¡_upd©e_›ti⁄s
(
fio_˛õ¡
 *, 
thªad_›ti⁄s
 *, 
uöt64_t
 *);

139 
	`fio_˛õ¡_waô_f‹_ª∂y
(
fio_˛õ¡
 *, 
uöt64_t
);

140 
	`fio_˛õ¡s_£nd_åiggî
(const *);

142 
	#FIO_CLIENT_DEF_ETA_MSEC
 900

	)

145 
FIO_CLIENT_TYPE_CLI
 = 1,

146 
FIO_CLIENT_TYPE_GUI
 = 2,

149 
sum_°©_˛õ¡s
;

150 
thªad_°©
 
˛õ¡_ts
;

151 
group_run_°©s
 
˛õ¡_gs
;

	@/home/ysjin/Desktop/fio/fio/compiler/compiler-gcc3.h

1 #i‚de‡
FIO_COMPILER_GCC3_H


2 
	#FIO_COMPILER_GCC3_H


	)

4 #i‡
__GNUC_MINOR__
 >= 4

5 #i‚de‡
__mu°_check


6 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

	@/home/ysjin/Desktop/fio/fio/compiler/compiler-gcc4.h

1 #i‚de‡
FIO_COMPILER_GCC4_H


2 
	#FIO_COMPILER_GCC4_H


	)

4 #i‚de‡
__mu°_check


5 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

8 
	#GCC_VERSION
 (
__GNUC__
 * 10000 \

9 + 
__GNUC_MINOR__
 * 100 \

10 + 
__GNUC_PATCHLEVEL__
)

	)

12 #i‡
GCC_VERSION
 >= 40300

13 
	#__compûëime_w¨nög
(
mesßge
Ë
	`__©åibuã__
((
	`w¨nög
(mesßge)))

	)

14 
	#__compûëime_îr‹
(
mesßge
Ë
	`__©åibuã__
((
	`îr‹
(mesßge)))

	)

	@/home/ysjin/Desktop/fio/fio/compiler/compiler.h

1 #i‚de‡
FIO_COMPILER_H


2 
	#FIO_COMPILER_H


	)

3 
	~<as£π.h
>

5 #i‡
__GNUC__
 >= 4

6 
	~"compûî-gcc4.h
"

7 #ñi‡
__GNUC__
 == 3

8 
	~"compûî-gcc3.h
"

10 #îr‹ 
Compûî
 
too
 
ﬁd
, 
√ed
 
gcc
 
©
 
Àa°
 gcc 3.x

13 #i‚de‡
__mu°_check


14 
	#__mu°_check


	)

20 
	#fio_unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

21 
	#fio_öô
 
	`__©åibuã__
((
c⁄°ru˘‹
))

	)

22 
	#fio_exô
 
	`__©åibuã__
((
de°ru˘‹
))

	)

24 
	#fio_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

30 
	#ty≥check
(
ty≥
,
x
) \

31 ({ 
ty≥
 
__dummy
; \

32 
	`ty≥of
(
x
Ë
__dummy2
; \

33 ()(&
__dummy
 =&
__dummy2
); \

35 })

	)

38 #i‡
deföed
(
CONFIG_STATIC_ASSERT
)

39 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
Ë
	`_Sètic_as£π
(c⁄dôi⁄, msg)

	)

41 #ñi‡!
deföed
(
CONFIG_DISABLE_OPTIMIZATIONS
)

43 #i‚de‡
__compûëime_îr‹


44 
	#__compûëime_îr‹
(
mesßge
)

	)

47 #i‚de‡
__compûëime_îr‹_ÁŒback


48 
	#__compûëime_îr‹_ÁŒback
(
c⁄dôi⁄
Ëdÿ{ } 0)

	)

51 
	#__compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
) \

53 
__c⁄d
 = !(
c⁄dôi⁄
); \

54 
¥efix
 ## 
	`suffix
(Ë
	`__compûëime_îr‹
(
msg
); \

55 i‡(
__c⁄d
) \

56 
¥efix
 ## 
	`suffix
(); \

57 
	`__compûëime_îr‹_ÁŒback
(
__c⁄d
); \

58 } 0)

	)

60 
	#_compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
) \

61 
	`__compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
)

	)

63 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
) \

64 
	`_compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
__compûëime_as£π_
, 
__LINE__
)

	)

68 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
Ëdÿ{ } 0)

	)

72 #ifde‡
FIO_INTERNAL


73 
	#ARRAY_SIZE
(
x
Ë(((x)Ë/ (((x)[0])))

	)

74 
	#FIELD_SIZE
(
s
, 
f
Ë((((
	`ty≥of
(s))0)->f))

	)

	@/home/ysjin/Desktop/fio/fio/crc/crc16.c

8 
	~"¸c16.h
"

11 c⁄° 
	g¸c16_èbÀ
[256] = {

46 
	$fio_¸c16
(c⁄° *
buf„r
, 
Àn
)

48 c⁄° *
˝
 = (c⁄° *Ë
buf„r
;

49 
¸c
 = 0;

51 
Àn
--)

52 
¸c
 = 
	`¸c16_byã
(¸c, *
˝
++);

53  
¸c
;

54 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/crc16.h

15 #i‚de‡
__CRC16_H


16 
	#__CRC16_H


	)

18 c⁄° 
¸c16_èbÀ
[256];

20 
fio_¸c16
(c⁄° *
buf„r
, 
Àn
);

22 
ölöe
 
	$¸c16_byã
(
¸c
,

23 c⁄° 
d©a
)

25  (
¸c
 >> 8Ë^ 
¸c16_èbÀ
[(¸¯^ 
d©a
) & 0xff];

26 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/crc32.c

18 
	~<öây≥s.h
>

19 
	~"¸c32.h
"

21 c⁄° 
uöt32_t
 
	g¸˘ab
[256] = {

76 
uöt32_t
 
	$fio_¸c32
(c⁄° *
buf„r
, 
Àngth
)

78 c⁄° *
˝
 = (c⁄° *Ë
buf„r
;

79 
uöt32_t
 
¸c
 = 0;

81 
Àngth
--)

82 
¸c
 = (¸¯<< 8Ë^ 
¸˘ab
[((¸¯>> 24Ë^ *(
˝
++)) & 0xFF];

84  
¸c
;

85 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/crc32.h

18 #i‚de‡
CRC32_H


19 
	#CRC32_H


	)

21 
uöt32_t
 
fio_¸c32
(const * const, );

	@/home/ysjin/Desktop/fio/fio/crc/crc32c-arm64.c

1 
	~"¸c32c.h
"

3 
	#CRC32C3X8
(
ITR
) \

4 
¸c1
 = 
	`__¸c32cd
(¸c1, *((c⁄° 
uöt64_t
 *)
d©a
 + 42*1 + (
ITR
)));\

5 
¸c2
 = 
	`__¸c32cd
(¸c2, *((c⁄° 
uöt64_t
 *)
d©a
 + 42*2 + (
ITR
)));\

6 
¸c0
 = 
	`__¸c32cd
(¸c0, *((c⁄° 
uöt64_t
 *)
d©a
 + 42*0 + (
ITR
)));

	)

8 
	#CRC32C7X3X8
(
ITR
) do {\

9 
	`CRC32C3X8
((
ITR
)*7+0) \

10 
	`CRC32C3X8
((
ITR
)*7+1) \

11 
	`CRC32C3X8
((
ITR
)*7+2) \

12 
	`CRC32C3X8
((
ITR
)*7+3) \

13 
	`CRC32C3X8
((
ITR
)*7+4) \

14 
	`CRC32C3X8
((
ITR
)*7+5) \

15 
	`CRC32C3X8
((
ITR
)*7+6) \

16 } 0)

	)

18 #i‚de‡
HWCAP_CRC32


19 
	#HWCAP_CRC32
 (1 << 7)

	)

22 
boﬁ
 
	g¸c32c_¨m64_avaûabÀ
 = 
Ál£
;

24 #ifde‡
ARCH_HAVE_ARM64_CRC_CRYPTO


26 
	~<sys/auxv.h
>

27 
	~<¨m_a˛e.h
>

28 
	~<¨m_√⁄.h
>

30 
boﬁ
 
	g¸c32c_¥obed
;

36 
uöt32_t
 
	$¸c32c_¨m64
(c⁄° *
d©a
, 
Àngth
)

38 sig√d 
Àn
 = 
Àngth
;

39 
uöt32_t
 
¸c
 = ~0;

40 
uöt32_t
 
¸c0
, 
¸c1
, 
¸c2
;

43 c⁄° 
pﬁy64_t
 
k1
 = 0xe417f38a, 
k2
 = 0x8f158014;

44 
uöt64_t
 
t0
, 
t1
;

46 (
Àn
 -= 1024) >= 0) {

48 
¸c0
 = 
	`__¸c32cd
(
¸c
, *(c⁄° 
uöt64_t
 *)
d©a
);

49 
¸c1
 = 0;

50 
¸c2
 = 0;

51 
d©a
 +(
uöt64_t
);

55 
	`CRC32C7X3X8
(0);

56 
	`CRC32C7X3X8
(1);

57 
	`CRC32C7X3X8
(2);

58 
	`CRC32C7X3X8
(3);

59 
	`CRC32C7X3X8
(4);

60 
	`CRC32C7X3X8
(5);

62 
d©a
 +42*3*(
uöt64_t
);

68 
t1
 = (
uöt64_t
)
	`vmuŒ_p64
(
¸c1
, 
k2
);

69 
t0
 = (
uöt64_t
)
	`vmuŒ_p64
(
¸c0
, 
k1
);

70 
¸c
 = 
	`__¸c32cd
(
¸c2
, *(c⁄° 
uöt64_t
 *)
d©a
);

71 
¸c1
 = 
	`__¸c32cd
(0, 
t1
);

72 
¸c
 ^
¸c1
;

73 
¸c0
 = 
	`__¸c32cd
(0, 
t0
);

74 
¸c
 ^
¸c0
;

76 
d©a
 +(
uöt64_t
);

79 i‡(!(
Àn
 += 1024))

80  
¸c
;

82 (
Àn
 -(
uöt64_t
)) >= 0) {

83 
¸c
 = 
	`__¸c32cd
(¸c, *(c⁄° 
uöt64_t
 *)
d©a
);

84 
d©a
 +(
uöt64_t
);

88 i‡(
Àn
 & (
uöt32_t
)) {

89 
¸c
 = 
	`__¸c32cw
(¸c, *(c⁄° 
uöt32_t
 *)
d©a
);

90 
d©a
 +(
uöt32_t
);

92 i‡(
Àn
 & (
uöt16_t
)) {

93 
¸c
 = 
	`__¸c32ch
(¸c, *(c⁄° 
uöt16_t
 *)
d©a
);

94 
d©a
 +(
uöt16_t
);

96 i‡(
Àn
 & (
uöt8_t
)) {

97 
¸c
 = 
	`__¸c32cb
(¸c, *(c⁄° 
uöt8_t
 *)
d©a
);

100  
¸c
;

101 
	}
}

103 
	$¸c32c_¨m64_¥obe
()

105 
hwˇp
;

107 i‡(!
¸c32c_¥obed
) {

108 
hwˇp
 = 
	`gëauxvÆ
(
AT_HWCAP
);

109 
¸c32c_¨m64_avaûabÀ
 = (
hwˇp
 & 
HWCAP_CRC32
) != 0;

110 
¸c32c_¥obed
 = 
åue
;

112 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/crc32c-intel.c

1 
	~<öây≥s.h
>

2 
	~<°rög.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<sig«l.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/waô.h
>

8 
	~"¸c32c.h
"

21 
boﬁ
 
	g¸c32c_öãl_avaûabÀ
 = 
Ál£
;

23 #ifde‡
ARCH_HAVE_SSE4_2


25 #i‡
BITS_PER_LONG
 == 64

26 
	#REX_PRE
 "0x48, "

	)

27 
	#SCALE_F
 8

	)

29 
	#REX_PRE


	)

30 
	#SCALE_F
 4

	)

33 
boﬁ
 
	g¸c32c_¥obed
;

35 
uöt32_t
 
	$¸c32c_öãl_À_hw_byã
(
uöt32_t
 
¸c
, c⁄° *
d©a
,

36 
Àngth
)

38 
Àngth
--) {

39 
__asm__
 
	`__vﬁ©ûe__
(

41 :"=S"(
¸c
)

42 :"0"(
¸c
), "c"(*
d©a
)

44 
d©a
++;

47  
¸c
;

48 
	}
}

54 
uöt32_t
 
	$¸c32c_öãl
(c⁄° *
d©a
, 
Àngth
)

56 
iquŸõ¡
 = 
Àngth
 / 
SCALE_F
;

57 
úemaödî
 = 
Àngth
 % 
SCALE_F
;

58 #i‡
BITS_PER_LONG
 == 64

59 
uöt64_t
 *
±mp
 = (uöt64_à*Ë
d©a
;

61 
uöt32_t
 *
±mp
 = (uöt32_à*Ë
d©a
;

63 
uöt32_t
 
¸c
 = ~0;

65 
iquŸõ¡
--) {

66 
__asm__
 
	`__vﬁ©ûe__
(

67 ".byã 0xf2, " 
REX_PRE
 "0xf, 0x38, 0xf1, 0xf1;"

68 :"=S"(
¸c
)

69 :"0"(
¸c
), "c"(*
±mp
)

71 
±mp
++;

74 i‡(
úemaödî
)

75 
¸c
 = 
	`¸c32c_öãl_À_hw_byã
(¸c, (*)
±mp
,

76 
úemaödî
);

78  
¸c
;

79 
	}
}

81 
	$¸c32c_öãl_¥obe
()

83 i‡(!
¸c32c_¥obed
) {

84 
óx
, 
ebx
, 
ecx
 = 0, 
edx
;

86 
óx
 = 1;

88 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

89 
¸c32c_öãl_avaûabÀ
 = (
ecx
 & (1 << 20)) != 0;

90 
¸c32c_¥obed
 = 
åue
;

92 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/crc32c.c

33 
	~<öây≥s.h
>

35 
	~"¸c32c.h
"

46 c⁄° 
uöt32_t
 
	g¸c32c_èbÀ
[256] = {

118 
uöt32_t
 
	$¸c32c_sw
(c⁄° *
d©a
, 
Àngth
)

120 
uöt32_t
 
¸c
 = ~0;

122 
Àngth
--)

123 
¸c
 = 
¸c32c_èbÀ
[(¸¯^ *
d©a
++) & 0xFFL] ^ (crc >> 8);

125  
¸c
;

126 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/crc32c.h

18 #i‚de‡
CRC32C_H


19 
	#CRC32C_H


	)

21 
	~"../¨ch/¨ch.h
"

22 
	~"../lib/ty≥s.h
"

24 
uöt32_t
 
¸c32c_sw
(const *, );

25 
boﬁ
 
¸c32c_¨m64_avaûabÀ
;

26 
boﬁ
 
¸c32c_öãl_avaûabÀ
;

28 #ifde‡
ARCH_HAVE_ARM64_CRC_CRYPTO


29 
uöt32_t
 
¸c32c_¨m64
(const *, );

30 
¸c32c_¨m64_¥obe
();

32 
	#¸c32c_¨m64
 
¸c32c_sw


	)

33 
ölöe
 
	$¸c32c_¨m64_¥obe
()

35 
	}
}

38 #ifde‡
ARCH_HAVE_SSE4_2


39 
uöt32_t
 
¸c32c_öãl
(const *, );

40 
¸c32c_öãl_¥obe
();

42 
	#¸c32c_öãl
 
¸c32c_sw


	)

43 
ölöe
 
	$¸c32c_öãl_¥obe
()

45 
	}
}

48 
ölöe
 
uöt32_t
 
	$fio_¸c32c
(c⁄° *
buf
, 
Àn
)

50 i‡(
¸c32c_¨m64_avaûabÀ
)

51  
	`¸c32c_¨m64
(
buf
, 
Àn
);

53 i‡(
¸c32c_öãl_avaûabÀ
)

54  
	`¸c32c_öãl
(
buf
, 
Àn
);

56  
	`¸c32c_sw
(
buf
, 
Àn
);

57 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/crc64.c

1 
	~"¸c64.h
"

6 c⁄° 
	g¸˘ab64
[256] = {

95 
	$fio_¸c64
(c⁄° *
buf„r
, 
Àngth
)

97 
¸c
 = 0;

99 
Àngth
--)

100 
¸c
 = 
¸˘ab64
[(¸¯^ *(
buf„r
++)) & 0xff] ^ (crc >> 8);

102  
¸c
;

103 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/crc64.h

1 #i‚de‡
CRC64_H


2 
	#CRC64_H


	)

4 
fio_¸c64
(const *, );

	@/home/ysjin/Desktop/fio/fio/crc/crc7.c

8 
	~"¸c7.h
"

11 c⁄° 
	g¸c7_syndrome_èbÀ
[256] = {

46 
	$fio_¸c7
(c⁄° *
buf„r
, 
Àn
)

48 
¸c
 = 0;

50 
Àn
--)

51 
¸c
 = 
	`¸c7_byã
(¸c, *
buf„r
++);

52  
¸c
;

53 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/crc7.h

1 #i‚de‡
CRC7_H


2 
	#CRC7_H


	)

4 c⁄° 
¸c7_syndrome_èbÀ
[256];

6 
ölöe
 
	$¸c7_byã
(
¸c
, 
d©a
)

8  
¸c7_syndrome_èbÀ
[(
¸c
 << 1Ë^ 
d©a
];

9 
	}
}

11 
fio_¸c7
(c⁄° *
buf„r
, 
Àn
);

	@/home/ysjin/Desktop/fio/fio/crc/fnv.c

1 
	~"‚v.h
"

3 
	#FNV_PRIME
 0x100000001b3ULL

	)

9 
uöt64_t
 
	$‚v
(c⁄° *
buf
, 
uöt32_t
 
Àn
, 
uöt64_t
 
hvÆ
)

11 c⁄° 
uöt64_t
 *
±r
 = 
buf
;

13 
Àn
) {

14 
hvÆ
 *
FNV_PRIME
;

15 i‡(
Àn
 >(
uöt64_t
)) {

16 
hvÆ
 ^(
uöt64_t
Ë*
±r
++;

17 
Àn
 -(
uöt64_t
);

20 c⁄° 
uöt8_t
 *
±r8
 = (c⁄° uöt8_à*Ë
±r
;

21 
uöt64_t
 
vÆ
 = 0;

22 
i
;

24 
i
 = 0; i < 
Àn
; i++) {

25 
vÆ
 <<= 8;

26 
vÆ
 |(
uöt8_t
Ë*
±r8
++;

28 
hvÆ
 ^
vÆ
;

33  
hvÆ
;

34 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/fnv.h

1 #i‚de‡
FIO_FNV_H


2 
	#FIO_FNV_H


	)

4 
	~<öây≥s.h
>

6 
uöt64_t
 
‚v
(c⁄° *, 
uöt32_t
, uint64_t);

	@/home/ysjin/Desktop/fio/fio/crc/md5.c

4 
	~<°rög.h
>

5 
	~<°döt.h
>

6 
	~"md5.h
"

8 
	$md5_å™sf‹m
(
uöt32_t
 *
hash
, uöt32_àc⁄° *
ö
)

10 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

12 
a
 = 
hash
[0];

13 
b
 = 
hash
[1];

14 
c
 = 
hash
[2];

15 
d
 = 
hash
[3];

17 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xd76aa478, 7);

18 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 0xe8c7b756, 12);

19 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x242070db, 17);

20 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 0xc1bdceee, 22);

21 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf57c0faf, 7);

22 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 0x4787c62a, 12);

23 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa8304613, 17);

24 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 0xfd469501, 22);

25 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x698098d8, 7);

26 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[9] + 0x8b44f7af, 12);

27 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffff5bb1, 17);

28 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11] + 0x895cd7be, 22);

29 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x6b901122, 7);

30 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13] + 0xfd987193, 12);

31 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xa679438e, 17);

32 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15] + 0x49b40821, 22);

34 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xf61e2562, 5);

35 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[6] + 0xc040b340, 9);

36 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x265e5a51, 14);

37 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[0] + 0xe9b6c7aa, 20);

38 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xd62f105d, 5);

39 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10] + 0x02441453, 9);

40 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0xd8a1e681, 14);

41 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[4] + 0xe7d3fbc8, 20);

42 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0x21e1cde6, 5);

43 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14] + 0xc33707d6, 9);

44 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xf4d50d87, 14);

45 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[8] + 0x455a14ed, 20);

46 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0xa9e3e905, 5);

47 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 0xfcefa3f8, 9);

48 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0x676f02d9, 14);

49 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12] + 0x8d2a4c8a, 20);

51 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xfffa3942, 4);

52 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[8] + 0x8771f681, 11);

53 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x6d9d6122, 16);

54 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14] + 0xfde5380c, 23);

55 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xa4beea44, 4);

56 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[4] + 0x4bdecfa9, 11);

57 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0xf6bb4b60, 16);

58 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10] + 0xbebfbc70, 23);

59 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0x289b7ec6, 4);

60 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[0] + 0xeaa127fa, 11);

61 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xd4ef3085, 16);

62 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 0x04881d05, 23);

63 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0xd9d4d039, 4);

64 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12] + 0xe6db99e5, 11);

65 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0x1fa27cf8, 16);

66 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2] + 0xc4ac5665, 23);

68 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xf4292244, 6);

69 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[7] + 0x432aff97, 10);

70 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xab9423a7, 15);

71 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[5] + 0xfc93a039, 21);

72 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x655b59c3, 6);

73 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 0x8f0ccc92, 10);

74 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffeff47d, 15);

75 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1] + 0x85845dd1, 21);

76 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x6fa87e4f, 6);

77 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15] + 0xfe2ce6e0, 10);

78 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa3014314, 15);

79 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13] + 0x4e0811a1, 21);

80 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf7537e82, 6);

81 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11] + 0xbd3af235, 10);

82 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2ad7d2bb, 15);

83 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[9] + 0xeb86d391, 21);

85 
hash
[0] +
a
;

86 
hash
[1] +
b
;

87 
hash
[2] +
c
;

88 
hash
[3] +
d
;

89 
	}
}

91 
	$fio_md5_öô
(
fio_md5_˘x
 *
m˘x
)

93 
m˘x
->
hash
[0] = 0x67452301;

94 
m˘x
->
hash
[1] = 0xefcdab89;

95 
m˘x
->
hash
[2] = 0x98badcfe;

96 
m˘x
->
hash
[3] = 0x10325476;

97 
	}
}

99 
	$fio_md5_upd©e
(
fio_md5_˘x
 *
m˘x
, c⁄° 
uöt8_t
 *
d©a
,

100 
Àn
)

102 c⁄° 
uöt32_t
 
avaû
 = (
m˘x
->
block
Ë- (m˘x->
byã_cou¡
 & 0x3f);

104 
m˘x
->
byã_cou¡
 +
Àn
;

106 i‡(
avaû
 > 
Àn
) {

107 
	`mem˝y
((*)
m˘x
->
block
 + ((m˘x->blockË- 
avaû
),

108 
d©a
, 
Àn
);

112 
	`mem˝y
((*)
m˘x
->
block
 + ((m˘x->blockË- 
avaû
),

113 
d©a
, 
avaû
);

115 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

116 
d©a
 +
avaû
;

117 
Àn
 -
avaû
;

119 
Àn
 >(
m˘x
->
block
)) {

120 
	`mem˝y
(
m˘x
->
block
, 
d©a
, (mctx->block));

121 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

122 
d©a
 +(
m˘x
->
block
);

123 
Àn
 -(
m˘x
->
block
);

126 
	`mem˝y
(
m˘x
->
block
, 
d©a
, 
Àn
);

127 
	}
}

129 
	$fio_md5_föÆ
(
fio_md5_˘x
 *
m˘x
)

131 c⁄° 
off£t
 = 
m˘x
->
byã_cou¡
 & 0x3f;

132 *
p
 = (*)
m˘x
->
block
 + 
off£t
;

133 
∑ddög
 = 56 - (
off£t
 + 1);

135 *
p
++ = 0x80;

136 i‡(
∑ddög
 < 0) {

137 
	`mem£t
(
p
, 0x00, 
∑ddög
 +  (
uöt64_t
));

138 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

139 
p
 = (*)
m˘x
->
block
;

140 
∑ddög
 = 56;

143 
	`mem£t
(
p
, 0, 
∑ddög
);

144 
m˘x
->
block
[14] = m˘x->
byã_cou¡
 << 3;

145 
m˘x
->
block
[15] = m˘x->
byã_cou¡
 >> 29;

146 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

147 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/md5.h

1 #i‚de‡
MD5_H


2 
	#MD5_H


	)

4 
	~<°döt.h
>

6 
	#MD5_DIGEST_SIZE
 16

	)

7 
	#MD5_HMAC_BLOCK_SIZE
 64

	)

8 
	#MD5_BLOCK_WORDS
 16

	)

9 
	#MD5_HASH_WORDS
 4

	)

11 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

12 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

13 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

14 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

16 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
ö
, 
s
) \

17 (
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
ö
, w = (w<<
s
 | w>>(32-s)Ë+ x)

	)

19 
	sfio_md5_˘x
 {

20 
uöt32_t
 *
	mhash
;

21 
uöt32_t
 
	mblock
[
MD5_BLOCK_WORDS
];

22 
uöt64_t
 
	mbyã_cou¡
;

25 
fio_md5_upd©e
(
fio_md5_˘x
 *, c⁄° 
uöt8_t
 *, );

26 
fio_md5_föÆ
(
fio_md5_˘x
 *);

27 
fio_md5_öô
(
fio_md5_˘x
 *);

	@/home/ysjin/Desktop/fio/fio/crc/murmur3.c

1 
	~"murmur3.h
"

3 
ölöe
 
uöt32_t
 
	$rŸl32
(
uöt32_t
 
x
, 
öt8_t
 
r
)

5  (
x
 << 
r
) | (x >> (32 -Ñ));

6 
	}
}

11 
ölöe
 
uöt32_t
 
	$fmix32
(
uöt32_t
 
h
)

13 
h
 ^= h >> 16;

14 
h
 *= 0x85ebca6b;

15 
h
 ^= h >> 13;

16 
h
 *= 0xc2b2ae35;

17 
h
 ^= h >> 16;

19  
h
;

20 
	}
}

22 
uöt32_t
 
	$murmur3_èû
(c⁄° 
uöt8_t
 *
d©a
, c⁄° 
nblocks
,

23 
uöt32_t
 
Àn
, c⁄° uöt32_à
c1
,

24 c⁄° 
uöt32_t
 
c2
, uöt32_à
h1
)

26 c⁄° 
uöt8_t
 *
èû
 = (c⁄° uöt8_à*)(
d©a
 + 
nblocks
 * 4);

28 
uöt32_t
 
k1
 = 0;

29 
Àn
 & 3) {

31 
k1
 ^
èû
[2] << 16;

33 
k1
 ^
èû
[1] << 8;

35 
k1
 ^
èû
[0];

36 
k1
 *
c1
;

37 
k1
 = 
	`rŸl32
(k1, 15);

38 
k1
 *
c2
;

39 
h1
 ^
k1
;

42  
	`fmix32
(
h1
 ^ 
Àn
);

43 
	}
}

45 
uöt32_t
 
	$murmurhash3
(c⁄° *
key
, 
uöt32_t
 
Àn
, uöt32_à
£ed
)

47 c⁄° 
uöt8_t
 *
d©a
 = (c⁄° uöt8_à*)
key
;

48 c⁄° 
nblocks
 = 
Àn
 / 4;

49 
uöt32_t
 
h1
 = 
£ed
;

50 c⁄° 
uöt32_t
 
c1
 = 0xcc9e2d51;

51 c⁄° 
uöt32_t
 
c2
 = 0x1b873593;

52 c⁄° 
uöt32_t
 *
blocks
 = (c⁄° uöt32_à*)(
d©a
 + 
nblocks
 * 4);

53 
i
;

55 
i
 = -
nblocks
; i; i++) {

56 
uöt32_t
 
k1
 = 
blocks
[
i
];

58 
k1
 *
c1
;

59 
k1
 = 
	`rŸl32
(k1, 15);

60 
k1
 *
c2
;

62 
h1
 ^
k1
;

63 
h1
 = 
	`rŸl32
(h1, 13);

64 
h1
 = h1 * 5 + 0xe6546b64;

67  
	`murmur3_èû
(
d©a
, 
nblocks
, 
Àn
, 
c1
, 
c2
, 
h1
);

68 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/murmur3.h

1 #i‚de‡
FIO_MURMUR3_H


2 
	#FIO_MURMUR3_H


	)

4 
	~<öây≥s.h
>

6 
uöt32_t
 
murmurhash3
(c⁄° *
key
, uöt32_à
Àn
, uöt32_à
£ed
);

	@/home/ysjin/Desktop/fio/fio/crc/sha1.c

7 
	~<°rög.h
>

8 
	~<¨∑/öë.h
>

10 
	~"sha1.h
"

13 
blk_SHA1Block
(
fio_sha1_˘x
 *
˘x
, c⁄° *
d©a
);

15 
	$fio_sha1_öô
(
fio_sha1_˘x
 *
˘x
)

17 
˘x
->
size
 = 0;

21 
˘x
->
H
[0] = 0x67452301;

22 
˘x
->
H
[1] = 0xefcdab89;

23 
˘x
->
H
[2] = 0x98badcfe;

24 
˘x
->
H
[3] = 0x10325476;

25 
˘x
->
H
[4] = 0xc3d2e1f0;

26 
	}
}

28 
	$fio_sha1_upd©e
(
fio_sha1_˘x
 *
˘x
, c⁄° *
d©a
,

29 
Àn
)

31 
ÀnW
 = 
˘x
->
size
 & 63;

33 
˘x
->
size
 +
Àn
;

37 i‡(
ÀnW
) {

38 
À·
 = 64 - 
ÀnW
;

39 i‡(
Àn
 < 
À·
)

40 
À·
 = 
Àn
;

41 
	`mem˝y
(
ÀnW
 + (*)
˘x
->
W
, 
d©a
, 
À·
);

42 
ÀnW
 = (ÀnW + 
À·
) & 63;

43 
Àn
 -
À·
;

44 
d©a
 +
À·
;

45 i‡(
ÀnW
)

47 
	`blk_SHA1Block
(
˘x
, ctx->
W
);

49 
Àn
 >= 64) {

50 
	`blk_SHA1Block
(
˘x
, 
d©a
);

51 
d©a
 += 64;

52 
Àn
 -= 64;

54 i‡(
Àn
)

55 
	`mem˝y
(
˘x
->
W
, 
d©a
, 
Àn
);

56 
	}
}

58 
	$fio_sha1_föÆ
(
fio_sha1_˘x
 *
˘x
)

60 c⁄° 
∑d
[64] = { 0x80 };

61 
∑dÀn
[2];

62 
i
;

66 
∑dÀn
[0] = 
	`ht⁄l
(
˘x
->
size
 >> 29);

67 
∑dÀn
[1] = 
	`ht⁄l
(
˘x
->
size
 << 3);

69 
i
 = 
˘x
->
size
 & 63;

70 
	`fio_sha1_upd©e
(
˘x
, 
∑d
, 1+ (63 & (55 - 
i
)));

71 
	`fio_sha1_upd©e
(
˘x
, 
∑dÀn
, 8);

72 
	}
}

74 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

76 
	#SHA_ASM
(
›
, 
x
, 
n
Ë({ 
__ªs
; 
	`__asm__
(› " %1,%0":"Ù" (__ªs):"i" (n), "0" (x)); __ªs; })

	)

77 
	#SHA_ROL
(
x
,
n
Ë
	`SHA_ASM
("rﬁ", x,Ç)

	)

78 
	#SHA_ROR
(
x
,
n
Ë
	`SHA_ASM
("r‹", x,Ç)

	)

82 
	#SHA_ROT
(
X
,
l
,
r
Ë(((XË<< (l)Ë| ((XË>> (r)))

	)

83 
	#SHA_ROL
(
X
,
n
Ë
	`SHA_ROT
(X,n,32-“))

	)

84 
	#SHA_ROR
(
X
,
n
Ë
	`SHA_ROT
(X,32-“),n)

	)

89 
	#W
(
x
Ë(
¨øy
[(x)&15])

	)

90 
	#£tW
(
x
, 
vÆ
Ë(*(vﬁ©ûê*)&
	`W
(xË(vÆ))

	)

96 
	#SHA_SRC
(
t
Ë
	`ht⁄l
(
d©a
[t])

	)

97 
	#SHA_MIX
(
t
Ë
	`SHA_ROL
(
	`W
—+13Ë^ W—+8Ë^ W—+2Ë^ W—), 1)

	)

99 
	#SHA_ROUND
(
t
, 
öput
, 
‚
, 
c⁄°™t
, 
A
, 
B
, 
C
, 
D
, 
E
) do { \

100 
TEMP
 = 
	`öput
(
t
); 
	`£tW
(t, TEMP); \

101 
E
 +
TEMP
 + 
	`SHA_ROL
(
A
,5Ë+ (
‚
Ë+ (
c⁄°™t
); \

102 
B
 = 
	`SHA_ROR
(B, 2); } 0)

	)

104 
	#T_0_15
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_SRC
, (((C^D)&B)^DË, 0x5a827999, A, B, C, D, E )

	)

105 
	#T_16_19
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, (((C^D)&B)^DË, 0x5a827999, A, B, C, D, E )

	)

106 
	#T_20_39
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, (B^C^DË, 0x6ed9eba1, A, B, C, D, E )

	)

107 
	#T_40_59
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, ((B&C)+(D&(B^C))Ë, 0x8f1bbcdc, A, B, C, D, E )

	)

108 
	#T_60_79
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, (B^C^DË, 0xˇ62c1d6, A, B, C, D, E )

	)

110 
	$blk_SHA1Block
(
fio_sha1_˘x
 *
˘x
, c⁄° *
d©a
)

112 
A
,
B
,
C
,
D
,
E
;

113 
¨øy
[16];

115 
A
 = 
˘x
->
H
[0];

116 
B
 = 
˘x
->
H
[1];

117 
C
 = 
˘x
->
H
[2];

118 
D
 = 
˘x
->
H
[3];

119 
E
 = 
˘x
->
H
[4];

122 
	`T_0_15
–0, 
A
, 
B
, 
C
, 
D
, 
E
);

123 
	`T_0_15
–1, 
E
, 
A
, 
B
, 
C
, 
D
);

124 
	`T_0_15
–2, 
D
, 
E
, 
A
, 
B
, 
C
);

125 
	`T_0_15
–3, 
C
, 
D
, 
E
, 
A
, 
B
);

126 
	`T_0_15
–4, 
B
, 
C
, 
D
, 
E
, 
A
);

127 
	`T_0_15
–5, 
A
, 
B
, 
C
, 
D
, 
E
);

128 
	`T_0_15
–6, 
E
, 
A
, 
B
, 
C
, 
D
);

129 
	`T_0_15
–7, 
D
, 
E
, 
A
, 
B
, 
C
);

130 
	`T_0_15
–8, 
C
, 
D
, 
E
, 
A
, 
B
);

131 
	`T_0_15
–9, 
B
, 
C
, 
D
, 
E
, 
A
);

132 
	`T_0_15
(10, 
A
, 
B
, 
C
, 
D
, 
E
);

133 
	`T_0_15
(11, 
E
, 
A
, 
B
, 
C
, 
D
);

134 
	`T_0_15
(12, 
D
, 
E
, 
A
, 
B
, 
C
);

135 
	`T_0_15
(13, 
C
, 
D
, 
E
, 
A
, 
B
);

136 
	`T_0_15
(14, 
B
, 
C
, 
D
, 
E
, 
A
);

137 
	`T_0_15
(15, 
A
, 
B
, 
C
, 
D
, 
E
);

140 
	`T_16_19
(16, 
E
, 
A
, 
B
, 
C
, 
D
);

141 
	`T_16_19
(17, 
D
, 
E
, 
A
, 
B
, 
C
);

142 
	`T_16_19
(18, 
C
, 
D
, 
E
, 
A
, 
B
);

143 
	`T_16_19
(19, 
B
, 
C
, 
D
, 
E
, 
A
);

146 
	`T_20_39
(20, 
A
, 
B
, 
C
, 
D
, 
E
);

147 
	`T_20_39
(21, 
E
, 
A
, 
B
, 
C
, 
D
);

148 
	`T_20_39
(22, 
D
, 
E
, 
A
, 
B
, 
C
);

149 
	`T_20_39
(23, 
C
, 
D
, 
E
, 
A
, 
B
);

150 
	`T_20_39
(24, 
B
, 
C
, 
D
, 
E
, 
A
);

151 
	`T_20_39
(25, 
A
, 
B
, 
C
, 
D
, 
E
);

152 
	`T_20_39
(26, 
E
, 
A
, 
B
, 
C
, 
D
);

153 
	`T_20_39
(27, 
D
, 
E
, 
A
, 
B
, 
C
);

154 
	`T_20_39
(28, 
C
, 
D
, 
E
, 
A
, 
B
);

155 
	`T_20_39
(29, 
B
, 
C
, 
D
, 
E
, 
A
);

156 
	`T_20_39
(30, 
A
, 
B
, 
C
, 
D
, 
E
);

157 
	`T_20_39
(31, 
E
, 
A
, 
B
, 
C
, 
D
);

158 
	`T_20_39
(32, 
D
, 
E
, 
A
, 
B
, 
C
);

159 
	`T_20_39
(33, 
C
, 
D
, 
E
, 
A
, 
B
);

160 
	`T_20_39
(34, 
B
, 
C
, 
D
, 
E
, 
A
);

161 
	`T_20_39
(35, 
A
, 
B
, 
C
, 
D
, 
E
);

162 
	`T_20_39
(36, 
E
, 
A
, 
B
, 
C
, 
D
);

163 
	`T_20_39
(37, 
D
, 
E
, 
A
, 
B
, 
C
);

164 
	`T_20_39
(38, 
C
, 
D
, 
E
, 
A
, 
B
);

165 
	`T_20_39
(39, 
B
, 
C
, 
D
, 
E
, 
A
);

168 
	`T_40_59
(40, 
A
, 
B
, 
C
, 
D
, 
E
);

169 
	`T_40_59
(41, 
E
, 
A
, 
B
, 
C
, 
D
);

170 
	`T_40_59
(42, 
D
, 
E
, 
A
, 
B
, 
C
);

171 
	`T_40_59
(43, 
C
, 
D
, 
E
, 
A
, 
B
);

172 
	`T_40_59
(44, 
B
, 
C
, 
D
, 
E
, 
A
);

173 
	`T_40_59
(45, 
A
, 
B
, 
C
, 
D
, 
E
);

174 
	`T_40_59
(46, 
E
, 
A
, 
B
, 
C
, 
D
);

175 
	`T_40_59
(47, 
D
, 
E
, 
A
, 
B
, 
C
);

176 
	`T_40_59
(48, 
C
, 
D
, 
E
, 
A
, 
B
);

177 
	`T_40_59
(49, 
B
, 
C
, 
D
, 
E
, 
A
);

178 
	`T_40_59
(50, 
A
, 
B
, 
C
, 
D
, 
E
);

179 
	`T_40_59
(51, 
E
, 
A
, 
B
, 
C
, 
D
);

180 
	`T_40_59
(52, 
D
, 
E
, 
A
, 
B
, 
C
);

181 
	`T_40_59
(53, 
C
, 
D
, 
E
, 
A
, 
B
);

182 
	`T_40_59
(54, 
B
, 
C
, 
D
, 
E
, 
A
);

183 
	`T_40_59
(55, 
A
, 
B
, 
C
, 
D
, 
E
);

184 
	`T_40_59
(56, 
E
, 
A
, 
B
, 
C
, 
D
);

185 
	`T_40_59
(57, 
D
, 
E
, 
A
, 
B
, 
C
);

186 
	`T_40_59
(58, 
C
, 
D
, 
E
, 
A
, 
B
);

187 
	`T_40_59
(59, 
B
, 
C
, 
D
, 
E
, 
A
);

190 
	`T_60_79
(60, 
A
, 
B
, 
C
, 
D
, 
E
);

191 
	`T_60_79
(61, 
E
, 
A
, 
B
, 
C
, 
D
);

192 
	`T_60_79
(62, 
D
, 
E
, 
A
, 
B
, 
C
);

193 
	`T_60_79
(63, 
C
, 
D
, 
E
, 
A
, 
B
);

194 
	`T_60_79
(64, 
B
, 
C
, 
D
, 
E
, 
A
);

195 
	`T_60_79
(65, 
A
, 
B
, 
C
, 
D
, 
E
);

196 
	`T_60_79
(66, 
E
, 
A
, 
B
, 
C
, 
D
);

197 
	`T_60_79
(67, 
D
, 
E
, 
A
, 
B
, 
C
);

198 
	`T_60_79
(68, 
C
, 
D
, 
E
, 
A
, 
B
);

199 
	`T_60_79
(69, 
B
, 
C
, 
D
, 
E
, 
A
);

200 
	`T_60_79
(70, 
A
, 
B
, 
C
, 
D
, 
E
);

201 
	`T_60_79
(71, 
E
, 
A
, 
B
, 
C
, 
D
);

202 
	`T_60_79
(72, 
D
, 
E
, 
A
, 
B
, 
C
);

203 
	`T_60_79
(73, 
C
, 
D
, 
E
, 
A
, 
B
);

204 
	`T_60_79
(74, 
B
, 
C
, 
D
, 
E
, 
A
);

205 
	`T_60_79
(75, 
A
, 
B
, 
C
, 
D
, 
E
);

206 
	`T_60_79
(76, 
E
, 
A
, 
B
, 
C
, 
D
);

207 
	`T_60_79
(77, 
D
, 
E
, 
A
, 
B
, 
C
);

208 
	`T_60_79
(78, 
C
, 
D
, 
E
, 
A
, 
B
);

209 
	`T_60_79
(79, 
B
, 
C
, 
D
, 
E
, 
A
);

211 
˘x
->
H
[0] +
A
;

212 
˘x
->
H
[1] +
B
;

213 
˘x
->
H
[2] +
C
;

214 
˘x
->
H
[3] +
D
;

215 
˘x
->
H
[4] +
E
;

216 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/sha1.h

1 #i‚de‡
FIO_SHA1


2 
	#FIO_SHA1


	)

10 
	sfio_sha1_˘x
 {

11 
uöt32_t
 *
	mH
;

12 
	mW
[16];

13 
	msize
;

16 
fio_sha1_öô
(
fio_sha1_˘x
 *);

17 
fio_sha1_upd©e
(
fio_sha1_˘x
 *, c⁄° *
d©aIn
, 
Àn
);

18 
fio_sha1_föÆ
(
fio_sha1_˘x
 *);

	@/home/ysjin/Desktop/fio/fio/crc/sha256.c

19 
	~<°rög.h
>

20 
	~<öây≥s.h
>

22 
	~"../lib/bsw≠.h
"

23 
	~"sha256.h
"

25 
	#SHA256_DIGEST_SIZE
 32

	)

26 
	#SHA256_HMAC_BLOCK_SIZE
 64

	)

28 
ölöe
 
uöt32_t
 
	$Ch
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

30  
z
 ^ (
x
 & (
y
 ^ z));

31 
	}
}

33 
ölöe
 
uöt32_t
 
	$Maj
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

35  (
x
 & 
y
Ë| (
z
 & (x | y));

36 
	}
}

38 
	#e0
(
x
Ë(
	`r‹32
(x, 2Ë^Ñ‹32(x,13Ë^Ñ‹32(x,22))

	)

39 
	#e1
(
x
Ë(
	`r‹32
(x, 6Ë^Ñ‹32(x,11Ë^Ñ‹32(x,25))

	)

40 
	#s0
(
x
Ë(
	`r‹32
(x, 7Ë^Ñ‹32(x,18Ë^ (x >> 3))

	)

41 
	#s1
(
x
Ë(
	`r‹32
(x,17Ë^Ñ‹32(x,19Ë^ (x >> 10))

	)

43 
	#H0
 0x6a09e667

	)

44 
	#H1
 0xbb67´85

	)

45 
	#H2
 0x3c6ef372

	)

46 
	#H3
 0xa54ff53a

	)

47 
	#H4
 0x510e527f

	)

48 
	#H5
 0x9b05688c

	)

49 
	#H6
 0x1f83d9ab

	)

50 
	#H7
 0x5be0cd19

	)

52 
ölöe
 
uöt32_t
 
	$r‹32
(
uöt32_t
 
w‹d
, 
shi·
)

54  (
w‹d
 >> 
shi·
) | (word << (32 - shift));

55 
	}
}

57 
ölöe
 
	$LOAD_OP
(
I
, 
uöt32_t
 *
W
, c⁄° 
uöt8_t
 *
öput
)

59 
W
[
I
] = 
	`__be32_to_˝u
(((
uöt32_t
 *)(
öput
))[I]);

60 
	}
}

62 
ölöe
 
	$BLEND_OP
(
I
, 
uöt32_t
 *
W
)

64 
W
[
I
] = 
	`s1
(W[I-2]Ë+ W[I-7] + 
	`s0
(W[I-15]) + W[I-16];

65 
	}
}

67 
	$sha256_å™sf‹m
(
uöt32_t
 *
°©e
, c⁄° 
uöt8_t
 *
öput
)

69 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
t1
, 
t2
;

70 
uöt32_t
 
W
[64];

71 
i
;

74 
i
 = 0; i < 16; i++)

75 
	`LOAD_OP
(
i
, 
W
, 
öput
);

78 
i
 = 16; i < 64; i++)

79 
	`BLEND_OP
(
i
, 
W
);

82 
a
=
°©e
[0]; 
b
=°©e[1]; 
c
=°©e[2]; 
d
=state[3];

83 
e
=
°©e
[4]; 
f
=°©e[5]; 
g
=°©e[6]; 
h
=state[7];

86 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x428a2f98 + 
W
[ 0];

87 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

88 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x71374491 + 
W
[ 1];

89 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

90 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0xb5c0fbc‡+ 
W
[ 2];

91 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

92 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0xe9b5dba5 + 
W
[ 3];

93 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

94 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x3956c25b + 
W
[ 4];

95 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

96 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x59f111f1 + 
W
[ 5];

97 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

98 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x923f82a4 + 
W
[ 6];

99 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

100 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0xab1c5ed5 + 
W
[ 7];

101 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

103 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0xd807Ø98 + 
W
[ 8];

104 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

105 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x12835b01 + 
W
[ 9];

106 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

107 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x243185bê+ 
W
[10];

108 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

109 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x550c7dc3 + 
W
[11];

110 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

111 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x72be5d74 + 
W
[12];

112 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

113 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x80deb1„ + 
W
[13];

114 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

115 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x9bdc06a7 + 
W
[14];

116 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

117 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0xc19bf174 + 
W
[15];

118 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

120 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0xe49b69c1 + 
W
[16];

121 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

122 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0xefbe4786 + 
W
[17];

123 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

124 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x0fc19dc6 + 
W
[18];

125 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

126 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x240ˇ1c¯+ 
W
[19];

127 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

128 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x2de92c6‡+ 
W
[20];

129 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

130 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x4a7484Ø + 
W
[21];

131 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

132 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x5cb0a9d¯+ 
W
[22];

133 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

134 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x76f988d®+ 
W
[23];

135 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

137 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x983e5152 + 
W
[24];

138 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

139 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0xa831c66d + 
W
[25];

140 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

141 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0xb00327c8 + 
W
[26];

142 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

143 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0xbf597fc7 + 
W
[27];

144 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

145 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0xc6e00bf3 + 
W
[28];

146 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

147 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0xd5a79147 + 
W
[29];

148 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

149 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x06ˇ6351 + 
W
[30];

150 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

151 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x14292967 + 
W
[31];

152 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

154 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x27b70a85 + 
W
[32];

155 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

156 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x2e1b2138 + 
W
[33];

157 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

158 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x4d2c6df¯+ 
W
[34];

159 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

160 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x53380d13 + 
W
[35];

161 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

162 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x650a7354 + 
W
[36];

163 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

164 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x766a0abb + 
W
[37];

165 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

166 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x81c2c92ê+ 
W
[38];

167 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

168 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x92722c85 + 
W
[39];

169 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

171 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0xa2b„8a1 + 
W
[40];

172 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

173 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0xa81a664b + 
W
[41];

174 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

175 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0xc24b8b70 + 
W
[42];

176 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

177 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0xc76c51a3 + 
W
[43];

178 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

179 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0xd192e819 + 
W
[44];

180 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

181 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0xd6990624 + 
W
[45];

182 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

183 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0xf40e3585 + 
W
[46];

184 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

185 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x106Ø070 + 
W
[47];

186 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

188 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x19a4c116 + 
W
[48];

189 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

190 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x1e376c08 + 
W
[49];

191 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

192 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x2748774¯+ 
W
[50];

193 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

194 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x34b0bcb5 + 
W
[51];

195 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

196 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x391c0cb3 + 
W
[52];

197 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

198 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x4ed8Ø4®+ 
W
[53];

199 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

200 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x5b9cˇ4‡+ 
W
[54];

201 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

202 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x682e6ff3 + 
W
[55];

203 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

205 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x748f82ì + 
W
[56];

206 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

207 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x78a5636‡+ 
W
[57];

208 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

209 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x84c87814 + 
W
[58];

210 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

211 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x8cc70208 + 
W
[59];

212 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

213 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x90beffÁ + 
W
[60];

214 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

215 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0xa4506˚b + 
W
[61];

216 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

217 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0xbef9a3f7 + 
W
[62];

218 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

219 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0xc67178f2 + 
W
[63];

220 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

222 
°©e
[0] +
a
; sèã[1] +
b
; sèã[2] +
c
; sèã[3] +
d
;

223 
°©e
[4] +
e
; sèã[5] +
f
; sèã[6] +
g
; sèã[7] +
h
;

226 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 
f
 = 
g
 = 
h
 = 
t1
 = 
t2
 = 0;

227 
	`mem£t
(
W
, 0, 64 * (
uöt32_t
));

228 
	}
}

230 
	$fio_sha256_öô
(
fio_sha256_˘x
 *
s˘x
)

232 
s˘x
->
°©e
[0] = 
H0
;

233 
s˘x
->
°©e
[1] = 
H1
;

234 
s˘x
->
°©e
[2] = 
H2
;

235 
s˘x
->
°©e
[3] = 
H3
;

236 
s˘x
->
°©e
[4] = 
H4
;

237 
s˘x
->
°©e
[5] = 
H5
;

238 
s˘x
->
°©e
[6] = 
H6
;

239 
s˘x
->
°©e
[7] = 
H7
;

240 
s˘x
->
cou¡
 = 0;

241 
	}
}

243 
	$fio_sha256_upd©e
(
fio_sha256_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

244 
Àn
)

246 
∑πül
, 
d⁄e
;

247 c⁄° 
uöt8_t
 *
§c
;

249 
∑πül
 = 
s˘x
->
cou¡
 & 0x3f;

250 
s˘x
->
cou¡
 +
Àn
;

251 
d⁄e
 = 0;

252 
§c
 = 
d©a
;

254 i‡((
∑πül
 + 
Àn
) > 63) {

255 i‡(
∑πül
) {

256 
d⁄e
 = -
∑πül
;

257 
	`mem˝y
(
s˘x
->
buf
 + 
∑πül
, 
d©a
, 
d⁄e
 + 64);

258 
§c
 = 
s˘x
->
buf
;

262 
	`sha256_å™sf‹m
(
s˘x
->
°©e
, 
§c
);

263 
d⁄e
 += 64;

264 
§c
 = 
d©a
 + 
d⁄e
;

265 } 
d⁄e
 + 63 < 
Àn
);

267 
∑πül
 = 0;

269 
	`mem˝y
(
s˘x
->
buf
 + 
∑πül
, 
§c
, 
Àn
 - 
d⁄e
);

270 
	}
}

272 
	$fio_sha256_föÆ
(
fio_sha256_˘x
 *
s˘x
)

274 
uöt64_t
 
bôs
;

275 
ödex
, 
∑d_Àn
;

276 
i
;

277 c⁄° 
uöt8_t
 
∑ddög
[64] = { 0x80, };

280 
bôs
 = (
uöt64_t
Ë
s˘x
->
cou¡
 << 3;

283 
ödex
 = 
s˘x
->
cou¡
 & 0x3f;

284 
∑d_Àn
 = (
ödex
 < 56) ? (56 - index) : ((64+56) - index);

285 
	`fio_sha256_upd©e
(
s˘x
, 
∑ddög
, 
∑d_Àn
);

288 
	`fio_sha256_upd©e
(
s˘x
, (c⁄° 
uöt8_t
 *)&
bôs
, (bits));

291 
i
 = 0; i < 8; i++)

292 
s˘x
->
buf
[
i
] = s˘x->
°©e
[i];

293 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/sha256.h

1 #i‚de‡
FIO_SHA256_H


2 
	#FIO_SHA256_H


	)

4 
	#SHA256_DIGEST_SIZE
 32

	)

5 
	#SHA256_BLOCK_SIZE
 64

	)

7 
	sfio_sha256_˘x
 {

8 
uöt32_t
 
	mcou¡
;

9 
uöt32_t
 
	m°©e
[
SHA256_DIGEST_SIZE
 / 4];

10 
uöt8_t
 *
	mbuf
;

13 
fio_sha256_öô
(
fio_sha256_˘x
 *);

14 
fio_sha256_upd©e
(
fio_sha256_˘x
 *, c⁄° 
uöt8_t
 *, );

15 
fio_sha256_föÆ
(
fio_sha256_˘x
 *);

	@/home/ysjin/Desktop/fio/fio/crc/sha3.c

15 
	~<°rög.h
>

16 
	~<öây≥s.h
>

18 
	~"../os/os.h
"

20 
	~"sha3.h
"

22 
	#KECCAK_ROUNDS
 24

	)

24 
	#ROTL64
(
x
, 
y
Ë(((xË<< (y)Ë| ((xË>> (64 - (y))))

	)

26 c⁄° 
uöt64_t
 
	gkecˇkf_∫dc
[24] = {

37 c⁄° 
	gkecˇkf_rŸc
[24] = {

42 c⁄° 
	gkecˇkf_pûn
[24] = {

49 
	$kecˇkf
(
uöt64_t
 
°
[25])

51 
i
, 
j
, 
round
;

52 
uöt64_t
 
t
, 
bc
[5];

54 
round
 = 0;Ñound < 
KECCAK_ROUNDS
;Ñound++) {

57 
i
 = 0; i < 5; i++)

58 
bc
[
i
] = 
°
[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15]

59 ^ 
°
[
i
 + 20];

61 
i
 = 0; i < 5; i++) {

62 
t
 = 
bc
[(
i
 + 4Ë% 5] ^ 
	`ROTL64
(bc[(i + 1) % 5], 1);

63 
j
 = 0; j < 25; j += 5)

64 
°
[
j
 + 
i
] ^
t
;

68 
t
 = 
°
[1];

69 
i
 = 0; i < 24; i++) {

70 
j
 = 
kecˇkf_pûn
[
i
];

71 
bc
[0] = 
°
[
j
];

72 
°
[
j
] = 
	`ROTL64
(
t
, 
kecˇkf_rŸc
[
i
]);

73 
t
 = 
bc
[0];

77 
j
 = 0; j < 25; j += 5) {

78 
i
 = 0; i < 5; i++)

79 
bc
[
i
] = 
°
[
j
 + i];

80 
i
 = 0; i < 5; i++)

81 
°
[
j
 + 
i
] ^(~
bc
[(i + 1) % 5]) &

82 
bc
[(
i
 + 2) % 5];

86 
°
[0] ^
kecˇkf_∫dc
[
round
];

88 
	}
}

90 
	$fio_sha3_öô
(
fio_sha3_˘x
 *
s˘x
, 
dige°_sz
)

92 
	`mem£t
(
s˘x
->
°
, 0, (sctx->st));

93 
s˘x
->
md_Àn
 = 
dige°_sz
;

94 
s˘x
->
rsiz
 = 200 - 2 * 
dige°_sz
;

95 
s˘x
->
rsizw
 = s˘x->
rsiz
 / 8;

96 
s˘x
->
∑πül
 = 0;

97 
	`mem£t
(
s˘x
->
buf
, 0, (sctx->buf));

98 
	}
}

100 
	$fio_sha3_224_öô
(
fio_sha3_˘x
 *
s˘x
)

102 
	`fio_sha3_öô
(
s˘x
, 
SHA3_224_DIGEST_SIZE
);

103 
	}
}

105 
	$fio_sha3_256_öô
(
fio_sha3_˘x
 *
s˘x
)

107 
	`fio_sha3_öô
(
s˘x
, 
SHA3_256_DIGEST_SIZE
);

108 
	}
}

110 
	$fio_sha3_384_öô
(
fio_sha3_˘x
 *
s˘x
)

112 
	`fio_sha3_öô
(
s˘x
, 
SHA3_384_DIGEST_SIZE
);

113 
	}
}

115 
	$fio_sha3_512_öô
(
fio_sha3_˘x
 *
s˘x
)

117 
	`fio_sha3_öô
(
s˘x
, 
SHA3_512_DIGEST_SIZE
);

118 
	}
}

120 
	$fio_sha3_upd©e
(
fio_sha3_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

121 
Àn
)

123 
d⁄e
;

124 c⁄° 
uöt8_t
 *
§c
;

126 
d⁄e
 = 0;

127 
§c
 = 
d©a
;

129 i‡((
s˘x
->
∑πül
 + 
Àn
Ë> (s˘x->
rsiz
 - 1)) {

130 i‡(
s˘x
->
∑πül
) {

131 
d⁄e
 = -
s˘x
->
∑πül
;

132 
	`mem˝y
(
s˘x
->
buf
 + s˘x->
∑πül
, 
d©a
,

133 
d⁄e
 + 
s˘x
->
rsiz
);

134 
§c
 = 
s˘x
->
buf
;

138 
i
;

140 
i
 = 0; i < 
s˘x
->
rsizw
; i++)

141 
s˘x
->
°
[
i
] ^((
uöt64_t
 *Ë
§c
)[i];

142 
	`kecˇkf
(
s˘x
->
°
);

144 
d⁄e
 +
s˘x
->
rsiz
;

145 
§c
 = 
d©a
 + 
d⁄e
;

146 } 
d⁄e
 + (
s˘x
->
rsiz
 - 1Ë< 
Àn
);

148 
s˘x
->
∑πül
 = 0;

150 
	`mem˝y
(
s˘x
->
buf
 + s˘x->
∑πül
, 
§c
, 
Àn
 - 
d⁄e
);

151 
s˘x
->
∑πül
 +(
Àn
 - 
d⁄e
);

154 
	}
}

156 
	$fio_sha3_föÆ
(
fio_sha3_˘x
 *
s˘x
)

158 
i
, 
öÀn
 = 
s˘x
->
∑πül
;

160 
s˘x
->
buf
[
öÀn
++] = 0x06;

161 
	`mem£t
(
s˘x
->
buf
 + 
öÀn
, 0, s˘x->
rsiz
 - inlen);

162 
s˘x
->
buf
[s˘x->
rsiz
 - 1] |= 0x80;

164 
i
 = 0; i < 
s˘x
->
rsizw
; i++)

165 
s˘x
->
°
[
i
] ^((
uöt64_t
 *Ës˘x->
buf
)[i];

167 
	`kecˇkf
(
s˘x
->
°
);

169 
i
 = 0; i < 
s˘x
->
rsizw
; i++)

170 
s˘x
->
°
[
i
] = 
	`˝u_to_À64
(sctx->st[i]);

172 
	`mem˝y
(
s˘x
->
sha
, s˘x->
°
, s˘x->
md_Àn
);

173 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/sha3.h

4 #i‚de‡
__CRYPTO_SHA3_H__


5 
	#__CRYPTO_SHA3_H__


	)

7 
	~<öây≥s.h
>

9 
	#SHA3_224_DIGEST_SIZE
 (224 / 8)

	)

10 
	#SHA3_224_BLOCK_SIZE
 (200 - 2 * 
SHA3_224_DIGEST_SIZE
)

	)

12 
	#SHA3_256_DIGEST_SIZE
 (256 / 8)

	)

13 
	#SHA3_256_BLOCK_SIZE
 (200 - 2 * 
SHA3_256_DIGEST_SIZE
)

	)

15 
	#SHA3_384_DIGEST_SIZE
 (384 / 8)

	)

16 
	#SHA3_384_BLOCK_SIZE
 (200 - 2 * 
SHA3_384_DIGEST_SIZE
)

	)

18 
	#SHA3_512_DIGEST_SIZE
 (512 / 8)

	)

19 
	#SHA3_512_BLOCK_SIZE
 (200 - 2 * 
SHA3_512_DIGEST_SIZE
)

	)

21 
	sfio_sha3_˘x
 {

22 
uöt64_t
 
	m°
[25];

23 
	mmd_Àn
;

24 
	mrsiz
;

25 
	mrsizw
;

27 
	m∑πül
;

28 
uöt8_t
 
	mbuf
[
SHA3_224_BLOCK_SIZE
];

30 
uöt8_t
 *
	msha
;

33 
fio_sha3_224_öô
(
fio_sha3_˘x
 *
s˘x
);

34 
fio_sha3_256_öô
(
fio_sha3_˘x
 *
s˘x
);

35 
fio_sha3_384_öô
(
fio_sha3_˘x
 *
s˘x
);

36 
fio_sha3_512_öô
(
fio_sha3_˘x
 *
s˘x
);

38 
fio_sha3_upd©e
(
fio_sha3_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

39 
Àn
);

40 
fio_sha3_föÆ
(
fio_sha3_˘x
 *
s˘x
);

	@/home/ysjin/Desktop/fio/fio/crc/sha512.c

14 
	~<°rög.h
>

15 
	~<öây≥s.h
>

17 
	~"../lib/bsw≠.h
"

18 
	~"sha512.h
"

20 
	#SHA384_DIGEST_SIZE
 48

	)

21 
	#SHA512_DIGEST_SIZE
 64

	)

22 
	#SHA384_HMAC_BLOCK_SIZE
 128

	)

23 
	#SHA512_HMAC_BLOCK_SIZE
 128

	)

25 
ölöe
 
uöt64_t
 
	$Ch
(
uöt64_t
 
x
, uöt64_à
y
, uöt64_à
z
)

27  
z
 ^ (
x
 & (
y
 ^ z));

28 
	}
}

30 
ölöe
 
uöt64_t
 
	$Maj
(
uöt64_t
 
x
, uöt64_à
y
, uöt64_à
z
)

32  (
x
 & 
y
Ë| (
z
 & (x | y));

33 
	}
}

35 
ölöe
 
uöt64_t
 
	$RORuöt64_t
(
uöt64_t
 
x
, uöt64_à
y
)

37  (
x
 >> 
y
) | (x << (64 - y));

38 
	}
}

40 c⁄° 
uöt64_t
 
	gsha512_K
[80] = {

70 
	#e0
(
x
Ë(
	`RORuöt64_t
(x,28Ë^ RORuöt64_t(x,34Ë^ RORuöt64_t(x,39))

	)

71 
	#e1
(
x
Ë(
	`RORuöt64_t
(x,14Ë^ RORuöt64_t(x,18Ë^ RORuöt64_t(x,41))

	)

72 
	#s0
(
x
Ë(
	`RORuöt64_t
(x, 1Ë^ RORuöt64_t(x, 8Ë^ (x >> 7))

	)

73 
	#s1
(
x
Ë(
	`RORuöt64_t
(x,19Ë^ RORuöt64_t(x,61Ë^ (x >> 6))

	)

76 
	#H0
 0x6a09e667f3bcc908ULL

	)

77 
	#H1
 0xbb67´8584ˇa73bULL

	)

78 
	#H2
 0x3c6ef372„94f82bULL

	)

79 
	#H3
 0xa54ff53a5f1d36f1ULL

	)

80 
	#H4
 0x510e527Áde682d1ULL

	)

81 
	#H5
 0x9b05688c2b3e6c1fULL

	)

82 
	#H6
 0x1f83d9abfb41bd6bULL

	)

83 
	#H7
 0x5be0cd19137e2179ULL

	)

86 
	#HP0
 0xcbbb9d5dc1059ed8ULL

	)

87 
	#HP1
 0x629a292a367cd507ULL

	)

88 
	#HP2
 0x9159015a3070dd17ULL

	)

89 
	#HP3
 0x152„cd8f70e5939ULL

	)

90 
	#HP4
 0x67332667ffc00b31ULL

	)

91 
	#HP5
 0x8eb44a8768581511ULL

	)

92 
	#HP6
 0xdb0c2e0d64f98Á7ULL

	)

93 
	#HP7
 0x47b5481dbeÁ4Á4ULL

	)

95 
ölöe
 
	$LOAD_OP
(
I
, 
uöt64_t
 *
W
, c⁄° 
uöt8_t
 *
öput
)

97 
W
[
I
] = 
	`__be64_to_˝u
–((
uöt64_t
 *)(
öput
))[I] );

98 
	}
}

100 
ölöe
 
	$BLEND_OP
(
I
, 
uöt64_t
 *
W
)

102 
W
[
I
] = 
	`s1
(W[I-2]Ë+ W[I-7] + 
	`s0
(W[I-15]) + W[I-16];

103 
	}
}

105 
	$sha512_å™sf‹m
(
uöt64_t
 *
°©e
, uöt64_à*
W
, c⁄° 
uöt8_t
 *
öput
)

107 
uöt64_t
 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
t1
, 
t2
;

109 
i
;

112 
i
 = 0; i < 16; i++)

113 
	`LOAD_OP
(
i
, 
W
, 
öput
);

115 
i
 = 16; i < 80; i++)

116 
	`BLEND_OP
(
i
, 
W
);

119 
a
=
°©e
[0]; 
b
=°©e[1]; 
c
=°©e[2]; 
d
=state[3];

120 
e
=
°©e
[4]; 
f
=°©e[5]; 
g
=°©e[6]; 
h
=state[7];

123 
i
=0; i<80; i+=8) {

124 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 
sha512_K
[
i
 ] + 
W
[i ];

125 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

126 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 
sha512_K
[
i
+1] + 
W
[i+1];

127 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

128 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 
sha512_K
[
i
+2] + 
W
[i+2];

129 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

130 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 
sha512_K
[
i
+3] + 
W
[i+3];

131 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

132 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 
sha512_K
[
i
+4] + 
W
[i+4];

133 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

134 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 
sha512_K
[
i
+5] + 
W
[i+5];

135 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

136 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 
sha512_K
[
i
+6] + 
W
[i+6];

137 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

138 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 
sha512_K
[
i
+7] + 
W
[i+7];

139 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

142 
°©e
[0] +
a
; sèã[1] +
b
; sèã[2] +
c
; sèã[3] +
d
;

143 
°©e
[4] +
e
; sèã[5] +
f
; sèã[6] +
g
; sèã[7] +
h
;

146 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 
f
 = 
g
 = 
h
 = 
t1
 = 
t2
 = 0;

147 
	}
}

149 
	$fio_sha512_öô
(
fio_sha512_˘x
 *
s˘x
)

151 
s˘x
->
°©e
[0] = 
H0
;

152 
s˘x
->
°©e
[1] = 
H1
;

153 
s˘x
->
°©e
[2] = 
H2
;

154 
s˘x
->
°©e
[3] = 
H3
;

155 
s˘x
->
°©e
[4] = 
H4
;

156 
s˘x
->
°©e
[5] = 
H5
;

157 
s˘x
->
°©e
[6] = 
H6
;

158 
s˘x
->
°©e
[7] = 
H7
;

159 
s˘x
->
cou¡
[0] = sctx->count[1] = sctx->count[2] = sctx->count[3] = 0;

160 
	}
}

162 
	$fio_sha512_upd©e
(
fio_sha512_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

163 
Àn
)

165 
i
, 
idx
, 
∑π_Àn
;

168 
idx
 = ()((
s˘x
->
cou¡
[0] >> 3) & 0x7F);

171 i‡((
s˘x
->
cou¡
[0] +(
Àn
 << 3)) < (len << 3)) {

172 i‡((
s˘x
->
cou¡
[1] += 1) < 1)

173 i‡((
s˘x
->
cou¡
[2] += 1) < 1)

174 
s˘x
->
cou¡
[3]++;

175 
s˘x
->
cou¡
[1] +(
Àn
 >> 29);

178 
∑π_Àn
 = 128 - 
idx
;

181 i‡(
Àn
 >
∑π_Àn
) {

182 
	`mem˝y
(&
s˘x
->
buf
[
idx
], 
d©a
, 
∑π_Àn
);

183 
	`sha512_å™sf‹m
(
s˘x
->
°©e
, s˘x->
W
, s˘x->
buf
);

185 
i
 = 
∑π_Àn
; i + 127 < 
Àn
; i+=128)

186 
	`sha512_å™sf‹m
(
s˘x
->
°©e
, s˘x->
W
, &
d©a
[
i
]);

188 
idx
 = 0;

190 
i
 = 0;

194 
	`mem˝y
(&
s˘x
->
buf
[
idx
], &
d©a
[
i
], 
Àn
 - i);

197 
	`mem£t
(
s˘x
->
W
, 0, (sctx->W));

198 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/sha512.h

1 #i‚de‡
FIO_SHA512_H


2 
	#FIO_SHA512_H


	)

4 
	sfio_sha512_˘x
 {

5 
uöt64_t
 
	m°©e
[8];

6 
uöt32_t
 
	mcou¡
[4];

7 
uöt8_t
 *
	mbuf
;

8 
uöt64_t
 
	mW
[80];

11 
fio_sha512_öô
(
fio_sha512_˘x
 *);

12 
fio_sha512_upd©e
(
fio_sha512_˘x
 *, c⁄° 
uöt8_t
 *, );

	@/home/ysjin/Desktop/fio/fio/crc/test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"../fio.h
"

6 
	~"../gëtime.h
"

7 
	~"../fio_time.h
"

8 
	~"../vîify.h
"

10 
	~"../¸c/md5.h
"

11 
	~"../¸c/¸c64.h
"

12 
	~"../¸c/¸c32.h
"

13 
	~"../¸c/¸c32c.h
"

14 
	~"../¸c/¸c16.h
"

15 
	~"../¸c/¸c7.h
"

16 
	~"../¸c/sha1.h
"

17 
	~"../¸c/sha256.h
"

18 
	~"../¸c/sha512.h
"

19 
	~"../¸c/sha3.h
"

20 
	~"../¸c/xxhash.h
"

21 
	~"../¸c/murmur3.h
"

22 
	~"../¸c/‚v.h
"

23 
	~"../hash.h
"

25 
	~"ã°.h
"

27 
	#CHUNK
 131072U

	)

28 
	#NR_CHUNKS
 2048U

	)

30 
	sã°_ty≥
 {

31 c⁄° *
	m«me
;

32 
	mmask
;

33 (*
	m‚
)(
	mã°_ty≥
 *, *, 
	msize_t
);

34 
uöt32_t
 
	mouçut
;

38 
	mT_MD5
 = 1U << 0,

39 
	mT_CRC64
 = 1U << 1,

40 
	mT_CRC32
 = 1U << 2,

41 
	mT_CRC32C
 = 1U << 3,

42 
	mT_CRC16
 = 1U << 4,

43 
	mT_CRC7
 = 1U << 5,

44 
	mT_SHA1
 = 1U << 6,

45 
	mT_SHA256
 = 1U << 7,

46 
	mT_SHA512
 = 1U << 8,

47 
	mT_XXHASH
 = 1U << 9,

48 
	mT_MURMUR3
 = 1U << 10,

49 
	mT_JHASH
 = 1U << 11,

50 
	mT_FNV
 = 1U << 12,

51 
	mT_SHA3_224
 = 1U << 13,

52 
	mT_SHA3_256
 = 1U << 14,

53 
	mT_SHA3_384
 = 1U << 15,

54 
	mT_SHA3_512
 = 1U << 16,

57 
	$t_md5
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

59 
uöt32_t
 
dige°
[4];

60 
fio_md5_˘x
 
˘x
 = { .
hash
 = 
dige°
 };

61 
i
;

63 
	`fio_md5_öô
(&
˘x
);

65 
i
 = 0; i < 
NR_CHUNKS
; i++) {

66 
	`fio_md5_upd©e
(&
˘x
, 
buf
, 
size
);

67 
	`fio_md5_föÆ
(&
˘x
);

69 
	}
}

71 
	$t_¸c64
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

73 
i
;

75 
i
 = 0; i < 
NR_CHUNKS
; i++)

76 
t
->
ouçut
 +
	`fio_¸c64
(
buf
, 
size
);

77 
	}
}

79 
	$t_¸c32
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

81 
i
;

83 
i
 = 0; i < 
NR_CHUNKS
; i++)

84 
t
->
ouçut
 +
	`fio_¸c32
(
buf
, 
size
);

85 
	}
}

87 
	$t_¸c32c
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

89 
i
;

91 
i
 = 0; i < 
NR_CHUNKS
; i++)

92 
t
->
ouçut
 +
	`fio_¸c32c
(
buf
, 
size
);

93 
	}
}

95 
	$t_¸c16
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

97 
i
;

99 
i
 = 0; i < 
NR_CHUNKS
; i++)

100 
t
->
ouçut
 +
	`fio_¸c16
(
buf
, 
size
);

101 
	}
}

103 
	$t_¸c7
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

105 
i
;

107 
i
 = 0; i < 
NR_CHUNKS
; i++)

108 
t
->
ouçut
 +
	`fio_¸c7
(
buf
, 
size
);

109 
	}
}

111 
	$t_sha1
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

113 
uöt32_t
 
sha
[5];

114 
fio_sha1_˘x
 
˘x
 = { .
H
 = 
sha
 };

115 
i
;

117 
	`fio_sha1_öô
(&
˘x
);

119 
i
 = 0; i < 
NR_CHUNKS
; i++) {

120 
	`fio_sha1_upd©e
(&
˘x
, 
buf
, 
size
);

121 
	`fio_sha1_föÆ
(&
˘x
);

123 
	}
}

125 
	$t_sha256
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

127 
uöt8_t
 
sha
[64];

128 
fio_sha256_˘x
 
˘x
 = { .
buf
 = 
sha
 };

129 
i
;

131 
	`fio_sha256_öô
(&
˘x
);

133 
i
 = 0; i < 
NR_CHUNKS
; i++) {

134 
	`fio_sha256_upd©e
(&
˘x
, 
buf
, 
size
);

135 
	`fio_sha256_föÆ
(&
˘x
);

137 
	}
}

139 
	$t_sha512
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

141 
uöt8_t
 
sha
[128];

142 
fio_sha512_˘x
 
˘x
 = { .
buf
 = 
sha
 };

143 
i
;

145 
	`fio_sha512_öô
(&
˘x
);

147 
i
 = 0; i < 
NR_CHUNKS
; i++)

148 
	`fio_sha512_upd©e
(&
˘x
, 
buf
, 
size
);

149 
	}
}

151 
	$t_sha3_224
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

153 
uöt8_t
 
sha
[
SHA3_224_DIGEST_SIZE
];

154 
fio_sha3_˘x
 
˘x
 = { .
sha
 = sha };

155 
i
;

157 
	`fio_sha3_224_öô
(&
˘x
);

159 
i
 = 0; i < 
NR_CHUNKS
; i++) {

160 
	`fio_sha3_upd©e
(&
˘x
, 
buf
, 
size
);

161 
	`fio_sha3_föÆ
(&
˘x
);

163 
	}
}

165 
	$t_sha3_256
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

167 
uöt8_t
 
sha
[
SHA3_256_DIGEST_SIZE
];

168 
fio_sha3_˘x
 
˘x
 = { .
sha
 = sha };

169 
i
;

171 
	`fio_sha3_256_öô
(&
˘x
);

173 
i
 = 0; i < 
NR_CHUNKS
; i++) {

174 
	`fio_sha3_upd©e
(&
˘x
, 
buf
, 
size
);

175 
	`fio_sha3_föÆ
(&
˘x
);

177 
	}
}

179 
	$t_sha3_384
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

181 
uöt8_t
 
sha
[
SHA3_384_DIGEST_SIZE
];

182 
fio_sha3_˘x
 
˘x
 = { .
sha
 = sha };

183 
i
;

185 
	`fio_sha3_384_öô
(&
˘x
);

187 
i
 = 0; i < 
NR_CHUNKS
; i++) {

188 
	`fio_sha3_upd©e
(&
˘x
, 
buf
, 
size
);

189 
	`fio_sha3_föÆ
(&
˘x
);

191 
	}
}

193 
	$t_sha3_512
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

195 
uöt8_t
 
sha
[
SHA3_512_DIGEST_SIZE
];

196 
fio_sha3_˘x
 
˘x
 = { .
sha
 = sha };

197 
i
;

199 
	`fio_sha3_512_öô
(&
˘x
);

201 
i
 = 0; i < 
NR_CHUNKS
; i++) {

202 
	`fio_sha3_upd©e
(&
˘x
, 
buf
, 
size
);

203 
	`fio_sha3_föÆ
(&
˘x
);

205 
	}
}

207 
	$t_murmur3
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

209 
i
;

211 
i
 = 0; i < 
NR_CHUNKS
; i++)

212 
t
->
ouçut
 +
	`murmurhash3
(
buf
, 
size
, 0x8989);

213 
	}
}

215 
	$t_jhash
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

217 
i
;

219 
i
 = 0; i < 
NR_CHUNKS
; i++)

220 
t
->
ouçut
 +
	`jhash
(
buf
, 
size
, 0x8989);

221 
	}
}

223 
	$t_‚v
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

225 
i
;

227 
i
 = 0; i < 
NR_CHUNKS
; i++)

228 
t
->
ouçut
 +
	`‚v
(
buf
, 
size
, 0x8989);

229 
	}
}

231 
	$t_xxhash
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

233 *
°©e
;

234 
i
;

236 
°©e
 = 
	`XXH32_öô
(0x8989);

238 
i
 = 0; i < 
NR_CHUNKS
; i++)

239 
	`XXH32_upd©e
(
°©e
, 
buf
, 
size
);

241 
t
->
ouçut
 = 
	`XXH32_dige°
(
°©e
);

242 
	}
}

244 
ã°_ty≥
 
	gt
[] = {

246 .
«me
 = "md5",

247 .
	gmask
 = 
T_MD5
,

248 .
	g‚
 = 
t_md5
,

251 .
	g«me
 = "crc64",

252 .
	gmask
 = 
T_CRC64
,

253 .
	g‚
 = 
t_¸c64
,

256 .
	g«me
 = "crc32",

257 .
	gmask
 = 
T_CRC32
,

258 .
	g‚
 = 
t_¸c32
,

261 .
	g«me
 = "crc32c",

262 .
	gmask
 = 
T_CRC32C
,

263 .
	g‚
 = 
t_¸c32c
,

266 .
	g«me
 = "crc16",

267 .
	gmask
 = 
T_CRC16
,

268 .
	g‚
 = 
t_¸c16
,

271 .
	g«me
 = "crc7",

272 .
	gmask
 = 
T_CRC7
,

273 .
	g‚
 = 
t_¸c7
,

276 .
	g«me
 = "sha1",

277 .
	gmask
 = 
T_SHA1
,

278 .
	g‚
 = 
t_sha1
,

281 .
	g«me
 = "sha256",

282 .
	gmask
 = 
T_SHA256
,

283 .
	g‚
 = 
t_sha256
,

286 .
	g«me
 = "sha512",

287 .
	gmask
 = 
T_SHA512
,

288 .
	g‚
 = 
t_sha512
,

291 .
	g«me
 = "xxhash",

292 .
	gmask
 = 
T_XXHASH
,

293 .
	g‚
 = 
t_xxhash
,

296 .
	g«me
 = "murmur3",

297 .
	gmask
 = 
T_MURMUR3
,

298 .
	g‚
 = 
t_murmur3
,

301 .
	g«me
 = "jhash",

302 .
	gmask
 = 
T_JHASH
,

303 .
	g‚
 = 
t_jhash
,

306 .
	g«me
 = "fnv",

307 .
	gmask
 = 
T_FNV
,

308 .
	g‚
 = 
t_‚v
,

311 .
	g«me
 = "sha3-224",

312 .
	gmask
 = 
T_SHA3_224
,

313 .
	g‚
 = 
t_sha3_224
,

316 .
	g«me
 = "sha3-256",

317 .
	gmask
 = 
T_SHA3_256
,

318 .
	g‚
 = 
t_sha3_256
,

321 .
	g«me
 = "sha3-384",

322 .
	gmask
 = 
T_SHA3_384
,

323 .
	g‚
 = 
t_sha3_384
,

326 .
	g«me
 = "sha3-512",

327 .
	gmask
 = 
T_SHA3_512
,

328 .
	g‚
 = 
t_sha3_512
,

331 .
	g«me
 = 
NULL
,

335 
	$gë_ã°_mask
(c⁄° *
ty≥
)

337 *
o°r
, *
°r
 = 
	`°rdup
(
ty≥
);

338 
mask
;

339 *
«me
;

340 
i
;

342 
o°r
 = 
°r
;

343 
mask
 = 0;

344 (
«me
 = 
	`°r£p
(&
°r
, ",")Ë!
NULL
) {

345 
i
 = 0; 
t
[i].
«me
; i++) {

346 i‡(!
	`°rcmp
(
t
[
i
].
«me
,Çame)) {

347 
mask
 |
t
[
i
].mask;

353 
	`‰ì
(
o°r
);

354  
mask
;

355 
	}
}

357 
	$li°_ty≥s
()

359 
i
;

361 
i
 = 0; 
t
[i].
«me
; i++)

362 
	`¥ötf
("%s\n", 
t
[
i
].
«me
);

365 
	}
}

367 
	$fio_¸˘e°
(c⁄° *
ty≥
)

369 
ã°_mask
 = 0;

370 
uöt64_t
 
mb
 = 
CHUNK
 * 
NR_CHUNKS
;

371 
‰™d_°©e
 
°©e
;

372 
i
, 
fú°
 = 1;

373 *
buf
;

375 
	`¸c32c_¨m64_¥obe
();

376 
	`¸c32c_öãl_¥obe
();

378 i‡(!
ty≥
)

379 
ã°_mask
 = ~0U;

380 i‡(!
	`°rcmp
(
ty≥
, "help") || !strcmp(type, "list"))

381  
	`li°_ty≥s
();

383 
ã°_mask
 = 
	`gë_ã°_mask
(
ty≥
);

385 i‡(!
ã°_mask
) {

386 
	`Ârötf
(
°dîr
, "fio: unknow¿hash `%s`. AvaûabÀ:\n", 
ty≥
);

387  
	`li°_ty≥s
();

390 
buf
 = 
	`mÆloc
(
CHUNK
);

391 
	`öô_ønd_£ed
(&
°©e
, 0x8989, 0);

392 
	`fûl_øndom_buf
(&
°©e
, 
buf
, 
CHUNK
);

394 
i
 = 0; 
t
[i].
«me
; i++) {

395 
time•ec
 
ts
;

396 
mb_£c
;

397 
uöt64_t
 
u£c
;

398 
¥e
[3];

400 i‡(!(
t
[
i
].
mask
 & 
ã°_mask
))

407 i‡(
fú°
) {

408 
	`u£c_•ö
(100000);

409 
t
[
i
].
	`‚
(&t[i], 
buf
, 
CHUNK
);

412 
	`fio_gëtime
(&
ts
, 
NULL
);

413 
t
[
i
].
	`‚
(&t[i], 
buf
, 
CHUNK
);

414 
u£c
 = 
	`utime_sö˚_now
(&
ts
);

416 i‡(
u£c
) {

417 
mb_£c
 = (Ë
mb
 / (Ë
u£c
;

418 
mb_£c
 /= (1.024 * 1.024);

419 i‡(
	`°æí
(
t
[
i
].
«me
) >= 7)

420 
	`•rötf
(
¥e
, "\t");

422 
	`•rötf
(
¥e
, "\t\t");

423 
	`¥ötf
("%s:%s%8.2‡MiB/£c\n", 
t
[
i
].
«me
, 
¥e
, 
mb_£c
);

425 
	`¥ötf
("%s:ö‡MiB/£c\n", 
t
[
i
].
«me
);

426 
fú°
 = 0;

429 
	`‰ì
(
buf
);

431 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/test.h

1 #i‚de‡
FIO_CRC_TEST_H


2 
	#FIO_CRC_TEST_H


	)

4 
fio_¸˘e°
(c⁄° *
ty≥
);

	@/home/ysjin/Desktop/fio/fio/crc/xxhash.c

41 #i‡
deföed
(
__ARM_FEATURE_UNALIGNED
Ë|| deföed(
__i386
Ë|| deföed(
_M_IX86
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_X64
)

42 
	#XXH_USE_UNALIGNED_ACCESS
 1

	)

59 
	#XXH_FORCE_NATIVE_FORMAT
 0

	)

65 
	~"xxhash.h
"

66 
	~<°dlib.h
>

67 
	~<°rög.h
>

70 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
XXH_USE_UNALIGNED_ACCESS
)

71 
	#_PACKED
 
	`__©åibuã__
 ((
∑cked
))

	)

73 
	#_PACKED


	)

76 #i‡!
deföed
(
XXH_USE_UNALIGNED_ACCESS
Ë&& !deföed(
__GNUC__
)

77 #ifde‡
__IBMC__


78 #¥agm®
∑ck
(1)

80 #¥agm®
∑ck
(
push
, 1)

84 
	s_uöt32_t_S
 { 
uöt32_t
 
	mv
; } 
	t_PACKED
 
	tuöt32_t_S
;

86 #i‡!
deföed
(
XXH_USE_UNALIGNED_ACCESS
Ë&& !deföed(
__GNUC__
)

87 #¥agm®
∑ck
(
p›
)

90 
	#A32
(
x
Ë(((
uöt32_t_S
 *)(x))->
v
)

	)

96 
	#GCC_VERSION
 (
__GNUC__
 * 100 + 
__GNUC_MINOR__
)

	)

99 #i‡
deföed
(
_MSC_VER
)

100 
	#XXH_rŸl32
(
x
,
r
Ë
	`_rŸl
(x,r)

	)

102 
	#XXH_rŸl32
(
x
,
r
Ë((x <<ÑË| (x >> (32 -Ñ)))

	)

105 #i‡
deföed
(
_MSC_VER
)

106 
	#XXH_sw≠32
 
_byãsw≠_ul⁄g


	)

107 #ñi‡
GCC_VERSION
 >= 403

108 
	#XXH_sw≠32
 
__buûtö_bsw≠32


	)

110 
ölöe
 
uöt32_t
 
	$XXH_sw≠32
 (
uöt32_t
 
x
)

112  ((
x
 << 24) & 0xff000000 ) |

113 ((
x
 << 8) & 0x00ff0000 ) |

114 ((
x
 >> 8) & 0x0000ff00 ) |

115 ((
x
 >> 24) & 0x000000ff );

116 
	}
}

123 
	#PRIME32_1
 2654435761U

	)

124 
	#PRIME32_2
 2246822519U

	)

125 
	#PRIME32_3
 3266489917U

	)

126 
	#PRIME32_4
 668265263U

	)

127 
	#PRIME32_5
 374761393U

	)

133 íum { 
	mXXH_bigEndün
=0, 
	mXXH_lôéeEndün
=1 } 
	tXXH_ídü√ss
;

134 #i‚de‡
XXH_CPU_LITTLE_ENDIAN


135 c⁄° 
	g⁄e
 = 1;

136 
	#XXH_CPU_LITTLE_ENDIAN
 (*(*)(&
⁄e
))

	)

143 
	#XXH_STATIC_ASSERT
(
c
Ë{Énum { 
XXH_°©ic_as£π
 = 1/(!!(c)) }; }

144 

	)

149 íum { 
	mXXH_Æig√d
, 
	mXXH_u«lig√d
 } 
	tXXH_Æignmít
;

151 
uöt32_t
 
	$XXH_ªadLE32_Æign
(c⁄° 
uöt32_t
* 
±r
, 
XXH_ídü√ss
 
ídün
, 
XXH_Æignmít
 
Æign
)

153 i‡(
Æign
==
XXH_u«lig√d
)

154  
ídün
==
XXH_lôéeEndün
 ? 
	`A32
(
±r
Ë: 
	`XXH_sw≠32
(A32(ptr));

156  
ídün
==
XXH_lôéeEndün
 ? *
±r
 : 
	`XXH_sw≠32
(*ptr);

157 
	}
}

159 
uöt32_t
 
	$XXH_ªadLE32
(c⁄° 
uöt32_t
* 
±r
, 
XXH_ídü√ss
 
ídün
Ë{  
	`XXH_ªadLE32_Æign
’å,Éndün, 
XXH_u«lig√d
); 
	}
}

165 
uöt32_t
 
	$XXH32_ídün_Æign
(c⁄° * 
öput
, 
Àn
, 
uöt32_t
 
£ed
, 
XXH_ídü√ss
 
ídün
, 
XXH_Æignmít
 
Æign
)

167 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
öput
;

168 c⁄° 
uöt8_t
 * c⁄° 
bEnd
 = 
p
 + 
Àn
;

169 
uöt32_t
 
h32
;

171 #ifde‡
XXH_ACCEPT_NULL_INPUT_POINTER


172 i‡(
p
==
NULL
Ë{ 
Àn
=0;Ö=(c⁄° 
uöt8_t
 *)(
size_t
)16; }

175 i‡(
Àn
>=16)

177 c⁄° 
uöt8_t
 * c⁄° 
limô
 = 
bEnd
 - 16;

178 
uöt32_t
 
v1
 = 
£ed
 + 
PRIME32_1
 + 
PRIME32_2
;

179 
uöt32_t
 
v2
 = 
£ed
 + 
PRIME32_2
;

180 
uöt32_t
 
v3
 = 
£ed
 + 0;

181 
uöt32_t
 
v4
 = 
£ed
 - 
PRIME32_1
;

185 
v1
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v1 = 
	`XXH_rŸl32
(v1, 13); v1 *
PRIME32_1
;Ö+=4;

186 
v2
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v2 = 
	`XXH_rŸl32
(v2, 13); v2 *
PRIME32_1
;Ö+=4;

187 
v3
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v3 = 
	`XXH_rŸl32
(v3, 13); v3 *
PRIME32_1
;Ö+=4;

188 
v4
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v4 = 
	`XXH_rŸl32
(v4, 13); v4 *
PRIME32_1
;Ö+=4;

189 } 
p
<=
limô
);

191 
h32
 = 
	`XXH_rŸl32
(
v1
, 1Ë+ XXH_rŸl32(
v2
, 7Ë+ XXH_rŸl32(
v3
, 12Ë+ XXH_rŸl32(
v4
, 18);

195 
h32
 = 
£ed
 + 
PRIME32_5
;

198 
h32
 +(
uöt32_t
Ë
Àn
;

200 
p
<=
bEnd
-4)

202 
h32
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_3
;

203 
h32
 = 
	`XXH_rŸl32
(h32, 17Ë* 
PRIME32_4
 ;

204 
p
+=4;

207 
p
<
bEnd
)

209 
h32
 +(*
p
Ë* 
PRIME32_5
;

210 
h32
 = 
	`XXH_rŸl32
(h32, 11Ë* 
PRIME32_1
 ;

211 
p
++;

214 
h32
 ^= h32 >> 15;

215 
h32
 *
PRIME32_2
;

216 
h32
 ^= h32 >> 13;

217 
h32
 *
PRIME32_3
;

218 
h32
 ^= h32 >> 16;

220  
h32
;

221 
	}
}

224 
uöt32_t
 
	$XXH32
(c⁄° * 
öput
, 
uöt32_t
 
Àn
, uöt32_à
£ed
)

228 * 
°©e
 = 
	`XXH32_öô
(
£ed
);

229 
	`XXH32_upd©e
(
°©e
, 
öput
, 
Àn
);

230  
	`XXH32_dige°
(
°©e
);

232 
XXH_ídü√ss
 
ídün_dëe˘ed
 = (XXH_ídü√ss)
XXH_CPU_LITTLE_ENDIAN
;

234 #i‡!
	`deföed
(
XXH_USE_UNALIGNED_ACCESS
)

235 i‡((((
size_t
)
öput
) & 3))

237 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

238  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_lôéeEndün
, 
XXH_Æig√d
);

240  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_bigEndün
, 
XXH_Æig√d
);

244 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

245  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_lôéeEndün
, 
XXH_u«lig√d
);

247  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_bigEndün
, 
XXH_u«lig√d
);

249 
	}
}

256 
	$XXH32_sizeofSèã
()

258 
	`XXH_STATIC_ASSERT
(
XXH32_SIZEOFSTATE
 >(
XXH_°©e32_t
));

259  (
XXH_°©e32_t
);

260 
	}
}

263 
XXH_îr‹code
 
	$XXH32_ª£tSèã
(* 
°©e_ö
, 
uöt32_t
 
£ed
)

265 
XXH_°©e32_t
 * 
°©e
 = (XXH_°©e32_à*Ë
°©e_ö
;

266 
°©e
->
£ed
 = seed;

267 
°©e
->
v1
 = 
£ed
 + 
PRIME32_1
 + 
PRIME32_2
;

268 
°©e
->
v2
 = 
£ed
 + 
PRIME32_2
;

269 
°©e
->
v3
 = 
£ed
 + 0;

270 
°©e
->
v4
 = 
£ed
 - 
PRIME32_1
;

271 
°©e
->
tŸÆ_Àn
 = 0;

272 
°©e
->
memsize
 = 0;

273  
XXH_OK
;

274 
	}
}

277 * 
	$XXH32_öô
 (
uöt32_t
 
£ed
)

279 *
°©e
 = 
	`mÆloc
 ((
XXH_°©e32_t
));

280 
	`XXH32_ª£tSèã
(
°©e
, 
£ed
);

281  
°©e
;

282 
	}
}

285 
XXH_îr‹code
 
	$XXH32_upd©e_ídün
 (* 
°©e_ö
, c⁄° * 
öput
, 
Àn
, 
XXH_ídü√ss
 
ídün
)

287 
XXH_°©e32_t
 * 
°©e
 = (XXH_°©e32_à*Ë
°©e_ö
;

288 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
öput
;

289 c⁄° 
uöt8_t
 * c⁄° 
bEnd
 = 
p
 + 
Àn
;

291 #ifde‡
XXH_ACCEPT_NULL_INPUT_POINTER


292 i‡(
öput
==
NULL
Ë 
XXH_ERROR
;

295 
°©e
->
tŸÆ_Àn
 +
Àn
;

297 i‡(
°©e
->
memsize
 + 
Àn
 < 16)

299 
	`mem˝y
(
°©e
->
mem‹y
 + sèã->
memsize
, 
öput
, 
Àn
);

300 
°©e
->
memsize
 +
Àn
;

301  
XXH_OK
;

304 i‡(
°©e
->
memsize
)

306 
	`mem˝y
(
°©e
->
mem‹y
 + sèã->
memsize
, 
öput
, 16-state->memsize);

308 c⁄° 
uöt32_t
* 
p32
 = (c⁄° uöt32_t*)
°©e
->
mem‹y
;

309 
°©e
->
v1
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v1 = 
	`XXH_rŸl32
(°©e->v1, 13); sèã->v1 *
PRIME32_1
;Ö32++;

310 
°©e
->
v2
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v2 = 
	`XXH_rŸl32
(°©e->v2, 13); sèã->v2 *
PRIME32_1
;Ö32++;

311 
°©e
->
v3
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v3 = 
	`XXH_rŸl32
(°©e->v3, 13); sèã->v3 *
PRIME32_1
;Ö32++;

312 
°©e
->
v4
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v4 = 
	`XXH_rŸl32
(°©e->v4, 13); sèã->v4 *
PRIME32_1
;Ö32++;

314 
p
 +16-
°©e
->
memsize
;

315 
°©e
->
memsize
 = 0;

318 i‡(
p
 <
bEnd
-16)

320 c⁄° 
uöt8_t
 * c⁄° 
limô
 = 
bEnd
 - 16;

321 
uöt32_t
 
v1
 = 
°©e
->v1;

322 
uöt32_t
 
v2
 = 
°©e
->v2;

323 
uöt32_t
 
v3
 = 
°©e
->v3;

324 
uöt32_t
 
v4
 = 
°©e
->v4;

328 
v1
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v1 = 
	`XXH_rŸl32
(v1, 13); v1 *
PRIME32_1
;Ö+=4;

329 
v2
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v2 = 
	`XXH_rŸl32
(v2, 13); v2 *
PRIME32_1
;Ö+=4;

330 
v3
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v3 = 
	`XXH_rŸl32
(v3, 13); v3 *
PRIME32_1
;Ö+=4;

331 
v4
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v4 = 
	`XXH_rŸl32
(v4, 13); v4 *
PRIME32_1
;Ö+=4;

332 } 
p
<=
limô
);

334 
°©e
->
v1
 = v1;

335 
°©e
->
v2
 = v2;

336 
°©e
->
v3
 = v3;

337 
°©e
->
v4
 = v4;

340 i‡(
p
 < 
bEnd
)

342 
	`mem˝y
(
°©e
->
mem‹y
, 
p
, 
bEnd
-p);

343 
°©e
->
memsize
 = ()(
bEnd
-
p
);

346  
XXH_OK
;

347 
	}
}

349 
XXH_îr‹code
 
	$XXH32_upd©e
 (* 
°©e_ö
, c⁄° * 
öput
, 
Àn
)

351 
XXH_ídü√ss
 
ídün_dëe˘ed
 = (XXH_ídü√ss)
XXH_CPU_LITTLE_ENDIAN
;

353 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

354  
	`XXH32_upd©e_ídün
(
°©e_ö
, 
öput
, 
Àn
, 
XXH_lôéeEndün
);

356  
	`XXH32_upd©e_ídün
(
°©e_ö
, 
öput
, 
Àn
, 
XXH_bigEndün
);

357 
	}
}

361 
uöt32_t
 
	$XXH32_öãrmedüãDige°_ídün
 (* 
°©e_ö
, 
XXH_ídü√ss
 
ídün
)

363 
XXH_°©e32_t
 * 
°©e
 = (XXH_°©e32_à*Ë
°©e_ö
;

364 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
°©e
->
mem‹y
;

365 
uöt8_t
 * 
bEnd
 = (uöt8_à*)
°©e
->
mem‹y
 + sèã->
memsize
;

366 
uöt32_t
 
h32
;

368 i‡(
°©e
->
tŸÆ_Àn
 >= 16)

370 
h32
 = 
	`XXH_rŸl32
(
°©e
->
v1
, 1Ë+ XXH_rŸl32(°©e->
v2
, 7Ë+ XXH_rŸl32(°©e->
v3
, 12Ë+ XXH_rŸl32(°©e->
v4
, 18);

374 
h32
 = 
°©e
->
£ed
 + 
PRIME32_5
;

377 
h32
 +(
uöt32_t
Ë
°©e
->
tŸÆ_Àn
;

379 
p
<=
bEnd
-4)

381 
h32
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_3
;

382 
h32
 = 
	`XXH_rŸl32
(h32, 17Ë* 
PRIME32_4
;

383 
p
+=4;

386 
p
<
bEnd
)

388 
h32
 +(*
p
Ë* 
PRIME32_5
;

389 
h32
 = 
	`XXH_rŸl32
(h32, 11Ë* 
PRIME32_1
;

390 
p
++;

393 
h32
 ^= h32 >> 15;

394 
h32
 *
PRIME32_2
;

395 
h32
 ^= h32 >> 13;

396 
h32
 *
PRIME32_3
;

397 
h32
 ^= h32 >> 16;

399  
h32
;

400 
	}
}

403 
uöt32_t
 
	$XXH32_öãrmedüãDige°
 (* 
°©e_ö
)

405 
XXH_ídü√ss
 
ídün_dëe˘ed
 = (XXH_ídü√ss)
XXH_CPU_LITTLE_ENDIAN
;

407 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

408  
	`XXH32_öãrmedüãDige°_ídün
(
°©e_ö
, 
XXH_lôéeEndün
);

410  
	`XXH32_öãrmedüãDige°_ídün
(
°©e_ö
, 
XXH_bigEndün
);

411 
	}
}

414 
uöt32_t
 
	$XXH32_dige°
 (* 
°©e_ö
)

416 
uöt32_t
 
h32
 = 
	`XXH32_öãrmedüãDige°
(
°©e_ö
);

418 
	`‰ì
(
°©e_ö
);

420  
h32
;

421 
	}
}

	@/home/ysjin/Desktop/fio/fio/crc/xxhash.h

60 #¥agm®
⁄˚


62 #i‡
deföed
 (
__˝lu•lus
)

66 
	~<öây≥s.h
>

68 
	sXXH_°©e32_t


70 
uöt64_t
 
tŸÆ_Àn
;

71 
uöt32_t
 
£ed
;

72 
uöt32_t
 
v1
;

73 
uöt32_t
 
v2
;

74 
uöt32_t
 
v3
;

75 
uöt32_t
 
v4
;

76 
memsize
;

77 
mem‹y
[16];

83 íum { 
XXH_OK
=0, 
XXH_ERROR
 } 
	tXXH_îr‹code
;

91 
uöt32_t
 
XXH32
 (c⁄° * 
öput
, uöt32_à
Àn
, uöt32_à
£ed
);

110 * 
XXH32_öô
 (
£ed
);

111 
XXH_îr‹code
 
XXH32_upd©e
 (* 
°©e
, c⁄° * 
öput
, 
Àn
);

112 
XXH32_dige°
 (* 
°©e
);

137 
XXH32_sizeofSèã
();

138 
XXH_îr‹code
 
XXH32_ª£tSèã
(* 
°©e
, 
£ed
);

140 
	#XXH32_SIZEOFSTATE
 48

	)

141 °ru˘ { 
Œ
[(
XXH32_SIZEOFSTATE
+(()-1))/()]; } 
	tXXH32_°©eS∑˚_t
;

154 
XXH32_öãrmedüãDige°
 (* 
°©e
);

169 
	#XXH32_„ed
 
XXH32_upd©e


	)

170 
	#XXH32_ªsu…
 
XXH32_dige°


	)

171 
	#XXH32_gëI¡îmedüãResu…
 
XXH32_öãrmedüãDige°


	)

175 #i‡
deföed
 (
__˝lu•lus
)

	@/home/ysjin/Desktop/fio/fio/debug.c

1 
	~<°d¨g.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~"debug.h
"

6 #ifde‡
FIO_INC_DEBUG


7 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...)

9 
va_li°
 
¨gs
;

11 
	`as£π
(
ty≥
 < 
FD_DEBUG_MAX
);

13 
	`va_°¨t
(
¨gs
, 
°r
);

14 
	`log_¥evÆi°
(
ty≥
, 
°r
, 
¨gs
);

15 
	`va_íd
(
¨gs
);

16 
	}
}

	@/home/ysjin/Desktop/fio/fio/debug.h

1 #i‚de‡
FIO_DEBUG_H


2 
	#FIO_DEBUG_H


	)

4 
	~<as£π.h
>

5 
	~"lib/ty≥s.h
"

6 
	~"log.h
"

9 
	mFD_PROCESS
 = 0,

10 
	mFD_FILE
,

11 
	mFD_IO
,

12 
	mFD_MEM
,

13 
	mFD_BLKTRACE
,

14 
	mFD_VERIFY
,

15 
	mFD_RANDOM
,

16 
	mFD_PARSE
,

17 
	mFD_DISKUTIL
,

18 
	mFD_JOB
,

19 
	mFD_MUTEX
,

20 
	mFD_PROFILE
,

21 
	mFD_TIME
,

22 
	mFD_NET
,

23 
	mFD_RATE
,

24 
	mFD_COMPRESS
,

25 
	mFD_STEADYSTATE
,

26 
	mFD_HELPERTHREAD
,

27 
	mFD_DEBUG_MAX
,

30 
fio_debug_jobno
, *
fio_debug_jobp
, *
fio_w¨√d
;

32 
ölöe
 
boﬁ
 
	$fio_did_w¨n
(
mask
)

34 i‡(*
fio_w¨√d
 & 
mask
)

35  
åue
;

37 *
fio_w¨√d
 |
mask
;

38  
Ál£
;

39 
	}
}

42 
	mFIO_WARN_ROOT_FLUSH
 = 1,

43 
	mFIO_WARN_VERIFY_BUF
 = 2,

44 
	mFIO_WARN_ZONED_BUG
 = 4,

45 
	mFIO_WARN_IOLOG_DROP
 = 8,

46 
	mFIO_WARN_FADVISE
 = 16,

49 #ifde‡
FIO_INC_DEBUG


50 
	sdebug_Àvñ
 {

51 c⁄° *
	m«me
;

52 c⁄° *
	mhñp
;

53 
	mshi·
;

54 
	mjobno
;

56 c⁄° 
debug_Àvñ
 
debug_Àvñs
[];

58 
fio_debug
;

60 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...Ë
	`__©åibuã__
((
	`f‹m©
 (
¥ötf
, 2, 3)));

62 
	#d¥öt
(
ty≥
, 
°r
, 
¨gs
...) \

64 i‡((((1 << 
ty≥
)Ë& 
fio_debug
) == 0) \

66 
	`__d¥öt
((
ty≥
), (
°r
), ##
¨gs
); \

67 
	}
} 0) \

68 

	)

71 
ölöe
 
	$d¥öt
(
ty≥
, c⁄° *
°r
, ...)

73 
	}
}

	@/home/ysjin/Desktop/fio/fio/diskutil.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/time.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<sys/sysma¸os.h
>

7 
	~<dúít.h
>

8 
	~<libgí.h
>

9 
	~<m©h.h
>

10 
	~<as£π.h
>

12 
	~"fio.h
"

13 
	~"smÆloc.h
"

14 
	~"diskutû.h
"

15 
	~"hñ≥r_thªad.h
"

17 
	gœ°_majdev
, 
	gœ°_mödev
;

18 
disk_utû
 *
	gœ°_du
;

20 
fio_muãx
 *
	gdisk_utû_muãx
;

22 
disk_utû
 *
__öô_≥r_fûe_disk_utû
(
thªad_d©a
 *
td
,

23 
majdev
, 
mödev
, *
∑th
);

25 
	$disk_utû_‰ì
(
disk_utû
 *
du
)

27 i‡(
du
 =
œ°_du
)

28 
œ°_du
 = 
NULL
;

30 !
	`Êi°_em±y
(&
du
->
¶aves
)) {

31 
disk_utû
 *
¶ave
;

33 
¶ave
 = 
	`Êi°_fú°_íåy
(&
du
->
¶aves
, 
disk_utû
, 
¶avñi°
);

34 
	`Êi°_dñ
(&
¶ave
->
¶avñi°
);

35 
¶ave
->
u£rs
--;

38 
	`fio_muãx_ªmove
(
du
->
lock
);

39 
	`‰ì
(
du
->
sysfs_roŸ
);

40 
	`s‰ì
(
du
);

41 
	}
}

43 
	$gë_io_ticks
(
disk_utû
 *
du
, 
disk_utû_°©
 *
dus
)

45 
ö_Êight
;

46 
£˘‹s
[2];

47 
löe
[256];

48 
FILE
 *
f
;

49 *
p
;

50 
ªt
;

52 
	`d¥öt
(
FD_DISKUTIL
, "›í sèàfûe: %s\n", 
du
->
∑th
);

54 
f
 = 
	`f›í
(
du
->
∑th
, "r");

55 i‡(!
f
)

58 
p
 = 
	`fgës
(
löe
, ÷öe), 
f
);

59 i‡(!
p
) {

60 
	`f˛o£
(
f
);

64 
	`d¥öt
(
FD_DISKUTIL
, "%s: %s", 
du
->
∑th
, 
p
);

66 
ªt
 = 
	`ssˇnf
(
p
, "%llu %llu %llu %llu %llu %llu %llu %llu %u %llu %llu\n",

67 (*Ë&
dus
->
s
.
ios
[0],

68 (*Ë&
dus
->
s
.
mîges
[0],

69 &
£˘‹s
[0],

70 (*Ë&
dus
->
s
.
ticks
[0],

71 (*Ë&
dus
->
s
.
ios
[1],

72 (*Ë&
dus
->
s
.
mîges
[1],

73 &
£˘‹s
[1],

74 (*Ë&
dus
->
s
.
ticks
[1],

75 &
ö_Êight
,

76 (*Ë&
dus
->
s
.
io_ticks
,

77 (*Ë&
dus
->
s
.
time_ö_queue
);

78 
	`f˛o£
(
f
);

79 
	`d¥öt
(
FD_DISKUTIL
, "%s: sèàªad ok? %d\n", 
du
->
∑th
, 
ªt
 == 1);

80 
dus
->
s
.
£˘‹s
[0] = sectors[0];

81 
dus
->
s
.
£˘‹s
[1] = sectors[1];

82  
ªt
 != 11;

83 
	}
}

85 
	$upd©e_io_tick_disk
(
disk_utû
 *
du
)

87 
disk_utû_°©
 
__dus
, *
dus
, *
ldus
;

88 
time•ec
 
t
;

90 i‡(!
du
->
u£rs
)

92 i‡(
	`gë_io_ticks
(
du
, &
__dus
))

95 
dus
 = &
du
->dus;

96 
ldus
 = &
du
->
œ°_dus
;

98 
dus
->
s
.
£˘‹s
[0] +(
__dus
.s.£˘‹s[0] - 
ldus
->s.sectors[0]);

99 
dus
->
s
.
£˘‹s
[1] +(
__dus
.s.£˘‹s[1] - 
ldus
->s.sectors[1]);

100 
dus
->
s
.
ios
[0] +(
__dus
.s.ios[0] - 
ldus
->s.ios[0]);

101 
dus
->
s
.
ios
[1] +(
__dus
.s.ios[1] - 
ldus
->s.ios[1]);

102 
dus
->
s
.
mîges
[0] +(
__dus
.s.mîges[0] - 
ldus
->s.merges[0]);

103 
dus
->
s
.
mîges
[1] +(
__dus
.s.mîges[1] - 
ldus
->s.merges[1]);

104 
dus
->
s
.
ticks
[0] +(
__dus
.s.ticks[0] - 
ldus
->s.ticks[0]);

105 
dus
->
s
.
ticks
[1] +(
__dus
.s.ticks[1] - 
ldus
->s.ticks[1]);

106 
dus
->
s
.
io_ticks
 +(
__dus
.s.io_tick†- 
ldus
->s.io_ticks);

107 
dus
->
s
.
time_ö_queue
 +(
__dus
.s.time_ö_queuê- 
ldus
->s.time_in_queue);

109 
	`fio_gëtime
(&
t
, 
NULL
);

110 
dus
->
s
.
m£c
 +
	`mtime_sö˚
(&
du
->
time
, &
t
);

111 
	`mem˝y
(&
du
->
time
, &
t
, (t));

112 
	`mem˝y
(&
ldus
->
s
, &
__dus
.s, (__dus.s));

113 
	}
}

115 
	$upd©e_io_ticks
()

117 
Êi°_hód
 *
íåy
;

118 
disk_utû
 *
du
;

119 
ªt
 = 0;

121 
	`d¥öt
(
FD_DISKUTIL
, "update ioÅicks\n");

123 
	`fio_muãx_down
(
disk_utû_muãx
);

125 i‡(!
	`hñ≥r_should_exô
()) {

126 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

127 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

128 
	`upd©e_io_tick_disk
(
du
);

131 
ªt
 = 1;

133 
	`fio_muãx_up
(
disk_utû_muãx
);

134  
ªt
;

135 
	}
}

137 
disk_utû
 *
	$disk_utû_exi°s
(
maj‹
, 
mö‹
)

139 
Êi°_hód
 *
íåy
;

140 
disk_utû
 *
du
;

142 
	`fio_muãx_down
(
disk_utû_muãx
);

144 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

145 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

147 i‡(
maj‹
 =
du
->maj‹ && 
mö‹
 == du->minor) {

148 
	`fio_muãx_up
(
disk_utû_muãx
);

149  
du
;

153 
	`fio_muãx_up
(
disk_utû_muãx
);

154  
NULL
;

155 
	}
}

157 
	$gë_devi˚_numbîs
(*
fûe_«me
, *
maj
, *
mö
)

159 
°©
 
°
;

160 
majdev
, 
mödev
;

161 
ãm≤ame
[
PATH_MAX
], *
p
;

163 i‡(!
	`l°©
(
fûe_«me
, &
°
)) {

164 i‡(
	`S_ISBLK
(
°
.
°_mode
)) {

165 
majdev
 = 
	`maj‹
(
°
.
°_rdev
);

166 
mödev
 = 
	`mö‹
(
°
.
°_rdev
);

167 } i‡(
	`S_ISCHR
(
°
.
°_mode
)) {

168 
majdev
 = 
	`maj‹
(
°
.
°_rdev
);

169 
mödev
 = 
	`mö‹
(
°
.
°_rdev
);

170 i‡(
	`fio_lookup_øw
(
°
.
°_rdev
, &
majdev
, &
mödev
))

172 } i‡(
	`S_ISFIFO
(
°
.
°_mode
))

175 
majdev
 = 
	`maj‹
(
°
.
°_dev
);

176 
mödev
 = 
	`mö‹
(
°
.
°_dev
);

182 
ãm≤ame
[
PATH_MAX
 - 1] = '\0';

183 
	`°∫˝y
(
ãm≤ame
, 
fûe_«me
, 
PATH_MAX
 - 1);

184 
p
 = 
	`dú«me
(
ãm≤ame
);

185 i‡(
	`°©
(
p
, &
°
)) {

186 
	`≥º‹
("disk util stat");

190 
majdev
 = 
	`maj‹
(
°
.
°_dev
);

191 
mödev
 = 
	`mö‹
(
°
.
°_dev
);

194 *
mö
 = 
mödev
;

195 *
maj
 = 
majdev
;

198 
	}
}

200 
	$ªad_block_dev_íåy
(*
∑th
, *
maj
, *
mö
)

202 
löe
[256], *
p
;

203 
FILE
 *
f
;

205 
f
 = 
	`f›í
(
∑th
, "r");

206 i‡(!
f
) {

207 
	`≥º‹
("openÖath");

211 
p
 = 
	`fgës
(
löe
, ÷öe), 
f
);

212 
	`f˛o£
(
f
);

214 i‡(!
p
)

217 i‡(
	`ssˇnf
(
p
, "%u:%u", 
maj
, 
mö
) != 2)

221 
	}
}

223 
	$föd_add_disk_¶aves
(
thªad_d©a
 *
td
, *
∑th
,

224 
disk_utû
 *
ma°îdu
)

226 
DIR
 *
dúh™dÀ
 = 
NULL
;

227 
dúít
 *dúíà
NULL
;

228 
¶avesdú
[
PATH_MAX
], 
ãmµ©h
[PATH_MAX], 
¶avï©h
[PATH_MAX];

229 
disk_utû
 *
¶avedu
 = 
NULL
;

230 
majdev
, 
mödev
;

231 
ssize_t
 
lökÀn
;

233 
	`•rötf
(
¶avesdú
, "%s/%s", 
∑th
, "slaves");

234 
dúh™dÀ
 = 
	`›ídú
(
¶avesdú
);

235 i‡(!
dúh™dÀ
)

238 (
dúít
 = 
	`ªaddú
(
dúh™dÀ
)Ë!
NULL
) {

239 i‡(!
	`°rcmp
(
dúít
->
d_«me
, ".") ||

240 !
	`°rcmp
(
dúít
->
d_«me
, ".."))

243 
	`•rötf
(
ãmµ©h
, "%s/%s", 
¶avesdú
, 
dúít
->
d_«me
);

248 
lökÀn
 = 
	`ªadlök
(
ãmµ©h
, 
¶avï©h
, 
PATH_MAX
 - 1);

249 i‡(
lökÀn
 < 0) {

250 
	`≥º‹
("readlink() for slave device.");

251 
	`˛o£dú
(
dúh™dÀ
);

254 
¶avï©h
[
lökÀn
] = '\0';

256 
	`•rötf
(
ãmµ©h
, "%s/%s/dev", 
¶avesdú
, 
¶avï©h
);

257 i‡(
	`ac˚ss
(
ãmµ©h
, 
F_OK
) != 0)

258 
	`•rötf
(
ãmµ©h
, "%s/%s/devi˚/dev", 
¶avesdú
, 
¶avï©h
);

259 i‡(
	`ªad_block_dev_íåy
(
ãmµ©h
, &
majdev
, &
mödev
)) {

260 
	`≥º‹
("Error getting slave deviceÇumbers");

261 
	`˛o£dú
(
dúh™dÀ
);

268 
¶avedu
 = 
	`disk_utû_exi°s
(
majdev
, 
mödev
);

269 i‡(
¶avedu
)

272 
	`•rötf
(
ãmµ©h
, "%s/%s", 
¶avesdú
, 
¶avï©h
);

273 
	`__öô_≥r_fûe_disk_utû
(
td
, 
majdev
, 
mödev
, 
ãmµ©h
);

274 
¶avedu
 = 
	`disk_utû_exi°s
(
majdev
, 
mödev
);

278 i‡(
¶avedu
) {

279 
¶avedu
->
u£rs
++;

280 
	`Êi°_add_èû
(&
¶avedu
->
¶avñi°
, &
ma°îdu
->
¶aves
);

284 
	`˛o£dú
(
dúh™dÀ
);

285 
	}
}

287 
disk_utû
 *
	$disk_utû_add
(
thªad_d©a
 *
td
, 
majdev
,

288 
mödev
, *
∑th
)

290 
disk_utû
 *
du
, *
__du
;

291 
Êi°_hód
 *
íåy
;

292 
l
;

294 
	`d¥öt
(
FD_DISKUTIL
, "add maj/mö %d/%d: %s\n", 
majdev
, 
mödev
, 
∑th
);

296 
du
 = 
	`smÆloc
((*du));

297 i‡(!
du
)

298  
NULL
;

300 
	`mem£t
(
du
, 0, (*du));

301 
	`INIT_FLIST_HEAD
(&
du
->
li°
);

302 
l
 = 
	`¢¥ötf
(
du
->
∑th
, (du->path), "%s/stat",Öath);

303 i‡(
l
 < 0 ||Ü >(
du
->
∑th
)) {

304 
	`log_îr
("constructedÖath \"%.100s[...]/stat\"ÜargerÅhan buffer (%zu bytes)\n",

305 
∑th
, (
du
->path) - 1);

306 
	`s‰ì
(
du
);

307  
NULL
;

309 
	`°∫˝y
((*Ë
du
->
dus
.
«me
, 
	`ba£«me
(
∑th
), 
FIO_DU_NAME_SZ
 - 1);

310 
du
->
sysfs_roŸ
 = 
	`°rdup
(
∑th
);

311 
du
->
maj‹
 = 
majdev
;

312 
du
->
mö‹
 = 
mödev
;

313 
	`INIT_FLIST_HEAD
(&
du
->
¶avñi°
);

314 
	`INIT_FLIST_HEAD
(&
du
->
¶aves
);

315 
du
->
lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

316 
du
->
u£rs
 = 0;

318 
	`fio_muãx_down
(
disk_utû_muãx
);

320 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

321 
__du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

323 
	`d¥öt
(
FD_DISKUTIL
, "found %†öÜi°\n", 
__du
->
dus
.
«me
);

325 i‡(!
	`°rcmp
((*Ë
du
->
dus
.
«me
, (*Ë
__du
->dus.name)) {

326 
	`disk_utû_‰ì
(
du
);

327 
	`fio_muãx_up
(
disk_utû_muãx
);

328  
__du
;

332 
	`d¥öt
(
FD_DISKUTIL
, "add %†tÿli°\n", 
du
->
dus
.
«me
);

334 
	`fio_gëtime
(&
du
->
time
, 
NULL
);

335 
	`gë_io_ticks
(
du
, &du->
œ°_dus
);

337 
	`Êi°_add_èû
(&
du
->
li°
, &
disk_li°
);

338 
	`fio_muãx_up
(
disk_utû_muãx
);

340 
	`föd_add_disk_¶aves
(
td
, 
∑th
, 
du
);

341  
du
;

342 
	}
}

344 
	$check_dev_m©ch
(
majdev
, 
mödev
, *
∑th
)

346 
maj‹
, 
mö‹
;

348 i‡(
	`ªad_block_dev_íåy
(
∑th
, &
maj‹
, &
mö‹
))

351 i‡(
majdev
 =
maj‹
 && 
mödev
 =
mö‹
)

355 
	}
}

357 
	$föd_block_dú
(
majdev
, 
mödev
, *
∑th
, 
lök_ok
)

359 
dúít
 *
dú
;

360 
°©
 
°
;

361 
found
 = 0;

362 
DIR
 *
D
;

364 
D
 = 
	`›ídú
(
∑th
);

365 i‡(!
D
)

368 (
dú
 = 
	`ªaddú
(
D
)Ë!
NULL
) {

369 
fuŒ_∑th
[257];

371 i‡(!
	`°rcmp
(
dú
->
d_«me
, ".") || !strcmp(dir->d_name, ".."))

374 
	`•rötf
(
fuŒ_∑th
, "%s/%s", 
∑th
, 
dú
->
d_«me
);

376 i‡(!
	`°rcmp
(
dú
->
d_«me
, "dev")) {

377 i‡(!
	`check_dev_m©ch
(
majdev
, 
mödev
, 
fuŒ_∑th
)) {

378 
found
 = 1;

383 i‡(
lök_ok
) {

384 i‡(
	`°©
(
fuŒ_∑th
, &
°
) == -1) {

385 
	`≥º‹
("stat");

389 i‡(
	`l°©
(
fuŒ_∑th
, &
°
) == -1) {

390 
	`≥º‹
("stat");

395 i‡(!
	`S_ISDIR
(
°
.
°_mode
Ë|| 
	`S_ISLNK
(st.st_mode))

398 
found
 = 
	`föd_block_dú
(
majdev
, 
mödev
, 
fuŒ_∑th
, 0);

399 i‡(
found
) {

400 
	`°r˝y
(
∑th
, 
fuŒ_∑th
);

405 
	`˛o£dú
(
D
);

406  
found
;

407 
	}
}

409 
disk_utû
 *
	$__öô_≥r_fûe_disk_utû
(
thªad_d©a
 *
td
,

410 
majdev
, 
mödev
,

411 *
∑th
)

413 
°©
 
°
;

414 
tmp
[
PATH_MAX
];

415 *
p
;

422 
	`•rötf
(
tmp
, "%s/../queue", 
∑th
);

423 i‡(!
	`°©
(
tmp
, &
°
)) {

424 
p
 = 
	`dú«me
(
∑th
);

425 
	`•rötf
(
tmp
, "%s/queue", 
p
);

426 i‡(
	`°©
(
tmp
, &
°
)) {

427 
	`log_îr
("unknown sysfsÜayout\n");

428  
NULL
;

430 
tmp
[
PATH_MAX
 - 1] = '\0';

431 
	`°∫˝y
(
tmp
, 
p
, 
PATH_MAX
 - 1);

432 
	`•rötf
(
∑th
, "%s", 
tmp
);

435  
	`disk_utû_add
(
td
, 
majdev
, 
mödev
, 
∑th
);

436 
	}
}

438 
disk_utû
 *
	$öô_≥r_fûe_disk_utû
(
thªad_d©a
 *
td
,

439 *
fûíame
)

442 
foo
[
PATH_MAX
];

443 
disk_utû
 *
du
;

444 
mödev
, 
majdev
;

446 i‡(
	`gë_devi˚_numbîs
(
fûíame
, &
majdev
, &
mödev
))

447  
NULL
;

449 
	`d¥öt
(
FD_DISKUTIL
, "%†bñ⁄g†tÿmaj/mö %d/%d\n", 
fûíame
, 
majdev
,

450 
mödev
);

452 
du
 = 
	`disk_utû_exi°s
(
majdev
, 
mödev
);

453 i‡(
du
)

454  
du
;

462 i‡(
mödev
 =
œ°_mödev
 && 
majdev
 =
œ°_majdev
)

463  
œ°_du
;

465 
œ°_mödev
 = 
mödev
;

466 
œ°_majdev
 = 
majdev
;

468 
	`•rötf
(
foo
, "/sys/block");

469 i‡(!
	`föd_block_dú
(
majdev
, 
mödev
, 
foo
, 1))

470  
NULL
;

472  
	`__öô_≥r_fûe_disk_utû
(
td
, 
majdev
, 
mödev
, 
foo
);

473 
	}
}

475 
disk_utû
 *
	$__öô_disk_utû
(
thªad_d©a
 *
td
,

476 
fio_fûe
 *
f
)

478  
	`öô_≥r_fûe_disk_utû
(
td
, 
f
->
fûe_«me
);

479 
	}
}

481 
	$öô_disk_utû
(
thªad_d©a
 *
td
)

483 
fio_fûe
 *
f
;

484 
i
;

486 i‡(!
td
->
o
.
do_disk_utû
 ||

487 
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
 | 
FIO_NODISKUTIL
))

490 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

491 
f
->
du
 = 
	`__öô_disk_utû
(
td
, f);

492 
	}
}

494 
	$show_agg_°©s
(
disk_utû_agg
 *
agg
, 
ãr£
,

495 
buf_ouçut
 *
out
)

497 i‡(!
agg
->
¶avecou¡
)

500 i‡(!
ãr£
) {

501 
	`log_buf
(
out
, ",ággrios=%llu/%llu,ággrmerge=%llu/%llu, "

504 (Ë
agg
->
ios
[0] /ágg->
¶avecou¡
,

505 (Ë
agg
->
ios
[1] /ágg->
¶avecou¡
,

506 (Ë
agg
->
mîges
[0] /ágg->
¶avecou¡
,

507 (Ë
agg
->
mîges
[1] /ágg->
¶avecou¡
,

508 (Ë
agg
->
ticks
[0] /ágg->
¶avecou¡
,

509 (Ë
agg
->
ticks
[1] /ágg->
¶avecou¡
,

510 (Ë
agg
->
time_ö_queue
 /ágg->
¶avecou¡
,

511 
agg
->
max_utû
.
u
.
f
);

513 
	`log_buf
(
out
, ";slaves;%llu;%llu;%llu;%llu;%llu;%llu;%llu;%3.2f%%",

514 (Ë
agg
->
ios
[0] /ágg->
¶avecou¡
,

515 (Ë
agg
->
ios
[1] /ágg->
¶avecou¡
,

516 (Ë
agg
->
mîges
[0] /ágg->
¶avecou¡
,

517 (Ë
agg
->
mîges
[1] /ágg->
¶avecou¡
,

518 (Ë
agg
->
ticks
[0] /ágg->
¶avecou¡
,

519 (Ë
agg
->
ticks
[1] /ágg->
¶avecou¡
,

520 (Ë
agg
->
time_ö_queue
 /ágg->
¶avecou¡
,

521 
agg
->
max_utû
.
u
.
f
);

523 
	}
}

525 
	$aggªg©e_¶aves_°©s
(
disk_utû
 *
ma°îdu
)

527 
disk_utû_agg
 *
agg
 = &
ma°îdu
->agg;

528 
disk_utû_°©
 *
dus
;

529 
Êi°_hód
 *
íåy
;

530 
disk_utû
 *
¶avedu
;

531 
utû
;

533 
	`Êi°_f‹_óch
(
íåy
, &
ma°îdu
->
¶aves
) {

534 
¶avedu
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
¶avñi°
);

535 
dus
 = &
¶avedu
->dus;

536 
agg
->
ios
[0] +
dus
->
s
.ios[0];

537 
agg
->
ios
[1] +
dus
->
s
.ios[1];

538 
agg
->
mîges
[0] +
dus
->
s
.merges[0];

539 
agg
->
mîges
[1] +
dus
->
s
.merges[1];

540 
agg
->
£˘‹s
[0] +
dus
->
s
.sectors[0];

541 
agg
->
£˘‹s
[1] +
dus
->
s
.sectors[1];

542 
agg
->
ticks
[0] +
dus
->
s
.ticks[0];

543 
agg
->
ticks
[1] +
dus
->
s
.ticks[1];

544 
agg
->
time_ö_queue
 +
dus
->
s
.time_in_queue;

545 
agg
->
¶avecou¡
++;

547 
utû
 = (Ë(100 * 
dus
->
s
.
io_ticks
 / (Ë
¶avedu
->dus.s.
m£c
);

551 i‡(
utû
 > 
agg
->
max_utû
.
u
.
f
)

552 
agg
->
max_utû
.
u
.
f
 = 
utû
;

556 i‡(
agg
->
max_utû
.
u
.
f
 > 100.0)

557 
agg
->
max_utû
.
u
.
f
 = 100.0;

558 
	}
}

560 
	$disk_utû_¥u√_íåõs
()

562 
	`fio_muãx_down
(
disk_utû_muãx
);

564 !
	`Êi°_em±y
(&
disk_li°
)) {

565 
disk_utû
 *
du
;

567 
du
 = 
	`Êi°_fú°_íåy
(&
disk_li°
, 
disk_utû
, 
li°
);

568 
	`Êi°_dñ
(&
du
->
li°
);

569 
	`disk_utû_‰ì
(
du
);

572 
œ°_majdev
 = 
œ°_mödev
 = -1;

573 
	`fio_muãx_up
(
disk_utû_muãx
);

574 
	`fio_muãx_ªmove
(
disk_utû_muãx
);

575 
	}
}

577 
	$¥öt_disk_utû
(
disk_utû_°©
 *
dus
, 
disk_utû_agg
 *
agg
,

578 
ãr£
, 
buf_ouçut
 *
out
)

580 
utû
 = 0;

582 i‡(
dus
->
s
.
m£c
)

583 
utû
 = (Ë100 * 
dus
->
s
.
io_ticks
 / (Ëdus->s.
m£c
;

584 i‡(
utû
 > 100.0)

585 
utû
 = 100.0;

587 i‡(!
ãr£
) {

588 i‡(
agg
->
¶avecou¡
)

589 
	`log_buf
(
out
, " ");

591 
	`log_buf
(
out
, " %s: ios=%llu/%llu, merge=%llu/%llu, "

593 
dus
->
«me
,

594 (Ë
dus
->
s
.
ios
[0],

595 (Ë
dus
->
s
.
ios
[1],

596 (Ë
dus
->
s
.
mîges
[0],

597 (Ë
dus
->
s
.
mîges
[1],

598 (Ë
dus
->
s
.
ticks
[0],

599 (Ë
dus
->
s
.
ticks
[1],

600 (Ë
dus
->
s
.
time_ö_queue
,

601 
utû
);

603 
	`log_buf
(
out
, ";%s;%llu;%llu;%llu;%llu;%llu;%llu;%llu;%3.2f%%",

604 
dus
->
«me
,

605 (Ë
dus
->
s
.
ios
[0],

606 (Ë
dus
->
s
.
ios
[1],

607 (Ë
dus
->
s
.
mîges
[0],

608 (Ë
dus
->
s
.
mîges
[1],

609 (Ë
dus
->
s
.
ticks
[0],

610 (Ë
dus
->
s
.
ticks
[1],

611 (Ë
dus
->
s
.
time_ö_queue
,

612 
utû
);

619 
	`show_agg_°©s
(
agg
, 
ãr£
, 
out
);

621 i‡(!
ãr£
)

622 
	`log_buf
(
out
, "\n");

623 
	}
}

625 
	$js⁄_¨øy_add_disk_utû
(
disk_utû_°©
 *
dus
,

626 
disk_utû_agg
 *
agg
, 
js⁄_¨øy
 *
¨øy
)

628 
js⁄_obje˘
 *
obj
;

629 
utû
 = 0;

631 i‡(
dus
->
s
.
m£c
)

632 
utû
 = (Ë100 * 
dus
->
s
.
io_ticks
 / (Ëdus->s.
m£c
;

633 i‡(
utû
 > 100.0)

634 
utû
 = 100.0;

636 
obj
 = 
	`js⁄_¸óã_obje˘
();

637 
	`js⁄_¨øy_add_vÆue_obje˘
(
¨øy
, 
obj
);

639 
	`js⁄_obje˘_add_vÆue_°rög
(
obj
, "«me", 
dus
->
«me
);

640 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ªad_ios", 
dus
->
s
.
ios
[0]);

641 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "wrôe_ios", 
dus
->
s
.
ios
[1]);

642 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ªad_mîges", 
dus
->
s
.
mîges
[0]);

643 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "wrôe_mîges", 
dus
->
s
.
mîges
[1]);

644 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ªad_ticks", 
dus
->
s
.
ticks
[0]);

645 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "wrôe_ticks", 
dus
->
s
.
ticks
[1]);

646 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ö_queue", 
dus
->
s
.
time_ö_queue
);

647 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
obj
, "utû", 
utû
);

653 i‡(!
agg
->
¶avecou¡
)

655 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_read_ios",

656 
agg
->
ios
[0] /ágg->
¶avecou¡
);

657 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_write_ios",

658 
agg
->
ios
[1] /ágg->
¶avecou¡
);

659 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_read_merges",

660 
agg
->
mîges
[0] /ágg->
¶avecou¡
);

661 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_write_merge",

662 
agg
->
mîges
[1] /ágg->
¶avecou¡
);

663 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_read_ticks",

664 
agg
->
ticks
[0] /ágg->
¶avecou¡
);

665 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_write_ticks",

666 
agg
->
ticks
[1] /ágg->
¶avecou¡
);

667 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_in_queue",

668 
agg
->
time_ö_queue
 /ágg->
¶avecou¡
);

669 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
obj
, "aggr_utû", 
agg
->
max_utû
.
u
.
f
);

670 
	}
}

672 
	$js⁄_obje˘_add_disk_utûs
(
js⁄_obje˘
 *
obj
,

673 
Êi°_hód
 *
hód
)

675 
js⁄_¨øy
 *
¨øy
 = 
	`js⁄_¸óã_¨øy
();

676 
Êi°_hód
 *
íåy
;

677 
disk_utû
 *
du
;

679 
	`js⁄_obje˘_add_vÆue_¨øy
(
obj
, "disk_utû", 
¨øy
);

681 
	`Êi°_f‹_óch
(
íåy
, 
hód
) {

682 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

684 
	`aggªg©e_¶aves_°©s
(
du
);

685 
	`js⁄_¨øy_add_disk_utû
(&
du
->
dus
, &du->
agg
, 
¨øy
);

687 
	}
}

689 
	$show_disk_utû
(
ãr£
, 
js⁄_obje˘
 *
∑ª¡
,

690 
buf_ouçut
 *
out
)

692 
Êi°_hód
 *
íåy
;

693 
disk_utû
 *
du
;

694 
boﬁ
 
do_js⁄
;

696 i‡(!
disk_utû_muãx
)

699 
	`fio_muãx_down
(
disk_utû_muãx
);

701 i‡(
	`Êi°_em±y
(&
disk_li°
)) {

702 
	`fio_muãx_up
(
disk_utû_muãx
);

706 i‡((
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
Ë&& 
∑ª¡
)

707 
do_js⁄
 = 
åue
;

709 
do_js⁄
 = 
Ál£
;

711 i‡(!
ãr£
 && !
do_js⁄
)

712 
	`log_buf
(
out
, "\nDisk stats (read/write):\n");

714 i‡(
do_js⁄
)

715 
	`js⁄_obje˘_add_disk_utûs
(
∑ª¡
, &
disk_li°
);

716 i‡(
ouçut_f‹m©
 & ~(
FIO_OUTPUT_JSON
 | 
FIO_OUTPUT_JSON_PLUS
)) {

717 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

718 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

720 
	`aggªg©e_¶aves_°©s
(
du
);

721 
	`¥öt_disk_utû
(&
du
->
dus
, &du->
agg
, 
ãr£
, 
out
);

725 
	`fio_muãx_up
(
disk_utû_muãx
);

726 
	}
}

728 
	$£tup_disk_utû
()

730 
disk_utû_muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

731 
	}
}

	@/home/ysjin/Desktop/fio/fio/diskutil.h

1 #i‚de‡
FIO_DISKUTIL_H


2 
	#FIO_DISKUTIL_H


	)

3 
	~"js⁄.h
"

4 
	#FIO_DU_NAME_SZ
 64

	)

6 
	~"lib/ouçut_buf„r.h
"

7 
	~"hñ≥r_thªad.h
"

9 
	sdisk_utû_°©s
 {

10 
uöt64_t
 
	mios
[2];

11 
uöt64_t
 
	mmîges
[2];

12 
uöt64_t
 
	m£˘‹s
[2];

13 
uöt64_t
 
	mticks
[2];

14 
uöt64_t
 
	mio_ticks
;

15 
uöt64_t
 
	mtime_ö_queue
;

16 
uöt64_t
 
	mm£c
;

22 
	sdisk_utû_°©
 {

23 
uöt8_t
 
	m«me
[
FIO_DU_NAME_SZ
];

24 
disk_utû_°©s
 
	ms
;

27 
	sdisk_utû_agg
 {

28 
uöt64_t
 
	mios
[2];

29 
uöt64_t
 
	mmîges
[2];

30 
uöt64_t
 
	m£˘‹s
[2];

31 
uöt64_t
 
	mticks
[2];

32 
uöt64_t
 
	mio_ticks
;

33 
uöt64_t
 
	mtime_ö_queue
;

34 
uöt32_t
 
	m¶avecou¡
;

35 
uöt32_t
 
	m∑d
;

36 
fio_Â64_t
 
	mmax_utû
;

42 
	sdisk_utû
 {

43 
Êi°_hód
 
	mli°
;

47 
Êi°_hód
 
	m¶avñi°
;

49 *
	msysfs_roŸ
;

50 
	m∑th
[
PATH_MAX
];

51 
	mmaj‹
, 
	mmö‹
;

53 
disk_utû_°©
 
	mdus
;

54 
disk_utû_°©
 
	mœ°_dus
;

56 
disk_utû_agg
 
	magg
;

65 
Êi°_hód
 
	m¶aves
;

67 
time•ec
 
	mtime
;

69 
fio_muãx
 *
	mlock
;

70 
	mu£rs
;

73 
ölöe
 
	$disk_utû_mod
(
disk_utû
 *
du
, 
vÆ
)

75 i‡(
du
) {

76 
Êi°_hód
 *
n
;

78 
	`fio_muãx_down
(
du
->
lock
);

79 
du
->
u£rs
 +
vÆ
;

81 
	`Êi°_f‹_óch
(
n
, &
du
->
¶avñi°
) {

82 
disk_utû
 *
¶ave
;

84 
¶ave
 = 
	`Êi°_íåy
(
n
, 
disk_utû
, 
¶avñi°
);

85 
¶ave
->
u£rs
 +
vÆ
;

87 
	`fio_muãx_up
(
du
->
lock
);

89 
	}
}

90 
ölöe
 
	$disk_utû_öc
(
disk_utû
 *
du
)

92 
	`disk_utû_mod
(
du
, 1);

93 
	}
}

95 
ölöe
 
	$disk_utû_dec
(
disk_utû
 *
du
)

97 
	`disk_utû_mod
(
du
, -1);

98 
	}
}

100 
	#DISK_UTIL_MSEC
 (250)

	)

102 
Êi°_hód
 
disk_li°
;

107 #ifde‡
FIO_HAVE_DISK_UTIL


108 
¥öt_disk_utû
(
disk_utû_°©
 *, 
disk_utû_agg
 *, 
ãr£
, 
buf_ouçut
 *);

109 
show_disk_utû
(
ãr£
, 
js⁄_obje˘
 *
∑ª¡
, 
buf_ouçut
 *);

110 
js⁄_¨øy_add_disk_utû
(
disk_utû_°©
 *
dus
,

111 
disk_utû_agg
 *
agg
, 
js⁄_¨øy
 *
∑ª¡
);

112 
öô_disk_utû
(
thªad_d©a
 *);

113 
upd©e_io_ticks
();

114 
£tup_disk_utû
();

115 
disk_utû_¥u√_íåõs
();

118 
ölöe
 
	$¥öt_disk_utû
(
disk_utû_°©
 *
du
,

119 
disk_utû_agg
 *
agg
, 
ãr£
,

120 
buf_ouçut
 *
out
)

122 
	}
}

123 
	#show_disk_utû
(
ãr£
, 
∑ª¡
, 
out
)

	)

124 
	#disk_utû_¥u√_íåõs
()

	)

125 
	#öô_disk_utû
(
td
)

	)

126 
	#£tup_disk_utû
()

	)

127 
	#js⁄_¨øy_add_disk_utû
(
dus
, 
agg
, 
∑ª¡
)

	)

129 
ölöe
 
	$upd©e_io_ticks
()

131  
	`hñ≥r_should_exô
();

132 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/binject.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<as£π.h
>

13 
	~<°rög.h
>

14 
	~<sys/pﬁl.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

18 
	~"../fio.h
"

20 #ifde‡
FIO_HAVE_BINJECT


22 
	sböje˘_d©a
 {

23 
b_u£r_cmd
 *
	mcmds
;

24 
io_u
 **
	mevíts
;

25 
pﬁlfd
 *
	mpfds
;

26 *
	mfd_Êags
;

29 
	sböje˘_fûe
 {

30 
	mbs
;

31 
	mmö‹
;

32 
	mfd
;

35 
	$böje˘_buc_öô
(
böje˘_d©a
 *
bd
, 
io_u
 *io_u)

37 
b_u£r_cmd
 *
buc
 = &
io_u
->buc;

39 
	`mem£t
(
buc
, 0, (*buc));

40 
	`böje˘_buc_£t_magic
(
buc
);

42 
buc
->
buf
 = (Ë
io_u
->
x„r_buf
;

43 
buc
->
Àn
 = 
io_u
->
x„r_buÊí
;

44 
buc
->
off£t
 = 
io_u
->offset;

45 
buc
->
u§_±r
 = (Ë
io_u
;

47 
buc
->
Êags
 = 
B_FLAG_NOIDLE
 | 
B_FLAG_UNPLUG
;

48 
	`as£π
(
buc
->
buf
);

49 
	}
}

51 
	$pﬁlö_evíts
(
pﬁlfd
 *
pfds
, 
fds
)

53 
i
;

55 
i
 = 0; i < 
fds
; i++)

56 i‡(
pfds
[
i
].
ªvíts
 & 
POLLIN
)

60 
	}
}

62 
	$böje˘_ªad_comm™ds
(
thªad_d©a
 *
td
, *
buf
,

63 
À·
, *
îr
)

65 
fio_fûe
 *
f
;

66 
i
, 
ªt
, 
evíts
;

67 *
p
 = 
buf
;

69 
⁄e_m‹e
:

70 
evíts
 = 0;

71 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

72 
böje˘_fûe
 *
bf
 = 
	`FILE_ENG_DATA
(
f
);

74 
ªt
 = 
	`ªad
(
bf
->
fd
, 
p
, 
À·
 * (
b_u£r_cmd
));

75 i‡(
ªt
 < 0) {

76 i‡(
î∫o
 =
EAGAIN
)

78 *
îr
 = -
î∫o
;

79 
	`td_vîr‹
(
td
, 
î∫o
, "read");

81 } i‡(
ªt
) {

82 
p
 +
ªt
;

83 
evíts
 +
ªt
 / (
b_u£r_cmd
);

87 i‡(*
îr
 || 
evíts
)

88  
evíts
;

90 
	`u¶ìp
(1000);

91 
⁄e_m‹e
;

92 
	}
}

94 
	$fio_böje˘_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

95 
max
,

96 c⁄° 
time•ec
 
fio_unu£d
 *
t
)

98 
böje˘_d©a
 *
bd
 = 
td
->
io_›s_d©a
;

99 
À·
 = 
max
, 
ªt
, 
r
 = 0, 
ev_ödex
 = 0;

100 *
buf
 = 
bd
->
cmds
;

101 
i
, 
evíts
;

102 
fio_fûe
 *
f
;

107 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

108 
böje˘_fûe
 *
bf
 = 
	`FILE_ENG_DATA
(
f
);

113 i‡(!
mö
)

114 
bd
->
fd_Êags
[
i
] = 
	`fio_£t_fd_n⁄blockög
(
bf
->
fd
, "binject");

116 
bd
->
fd_Êags
[
i
] = -1;

118 
bd
->
pfds
[
i
].
fd
 = 
bf
->fd;

119 
bd
->
pfds
[
i
].
evíts
 = 
POLLIN
;

122 
À·
) {

123 !
mö
) {

124 
ªt
 = 
	`pﬁl
(
bd
->
pfds
, 
td
->
o
.
ƒ_fûes
, -1);

125 i‡(
ªt
 < 0) {

126 i‡(!
r
)

127 
r
 = -
î∫o
;

128 
	`td_vîr‹
(
td
, 
î∫o
, "poll");

130 } i‡(!
ªt
)

133 i‡(
	`pﬁlö_evíts
(
bd
->
pfds
, 
td
->
o
.
ƒ_fûes
))

137 i‡(
r
 < 0)

140 
evíts
 = 
	`böje˘_ªad_comm™ds
(
td
, 
buf
, 
À·
, &
r
);

142 i‡(
r
 < 0)

145 
À·
 -
evíts
;

146 
r
 +
evíts
;

148 
i
 = 0; i < 
evíts
; i++) {

149 
b_u£r_cmd
 *
buc
 = (b_u£r_cmd *Ë
buf
 + 
i
;

151 
bd
->
evíts
[
ev_ödex
] = (
io_u
 *Ë(Ë
buc
->
u§_±r
;

152 
ev_ödex
++;

156 i‡(!
mö
) {

157 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

158 
böje˘_fûe
 *
bf
 = 
	`FILE_ENG_DATA
(
f
);

160 i‡(
bd
->
fd_Êags
[
i
] == -1)

163 i‡(
	`f˙é
(
bf
->
fd
, 
F_SETFL
, 
bd
->
fd_Êags
[
i
]) < 0)

164 
	`log_îr
("fio: böje˘ faûedÅÿª°‹êf˙é fœgs: %s\n", 
	`°ªº‹
(
î∫o
));

168 i‡(
r
 > 0)

169 
	`as£π
(
ev_ödex
 =
r
);

171  
r
;

172 
	}
}

174 
	$fio_böje˘_doio
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

176 
b_u£r_cmd
 *
buc
 = &
io_u
->buc;

177 
böje˘_fûe
 *
bf
 = 
	`FILE_ENG_DATA
(
io_u
->
fûe
);

178 
ªt
;

180 
ªt
 = 
	`wrôe
(
bf
->
fd
, 
buc
, (*buc));

181 i‡(
ªt
 < 0)

182  
ªt
;

184  
FIO_Q_QUEUED
;

185 
	}
}

187 
	$fio_böje˘_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

189 
böje˘_d©a
 *
bd
 = 
td
->
io_›s_d©a
;

190 
b_u£r_cmd
 *
buc
 = &
io_u
->buc;

191 
böje˘_fûe
 *
bf
 = 
	`FILE_ENG_DATA
(
io_u
->
fûe
);

193 i‡(
io_u
->
x„r_buÊí
 & (
bf
->
bs
 - 1)) {

194 
	`log_îr
("read/writeÇot sectoráligned\n");

195  
EINVAL
;

198 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

199 
	`böje˘_buc_öô
(
bd
, 
io_u
);

200 
buc
->
ty≥
 = 
B_TYPE_READ
;

201 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

202 
	`böje˘_buc_öô
(
bd
, 
io_u
);

203 i‡(
io_u
->
Êags
 & 
IO_U_F_BARRIER
)

204 
buc
->
ty≥
 = 
B_TYPE_WRITEBARRIER
;

206 
buc
->
ty≥
 = 
B_TYPE_WRITE
;

207 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

208 
	`böje˘_buc_öô
(
bd
, 
io_u
);

209 
buc
->
ty≥
 = 
B_TYPE_DISCARD
;

211 
	`as£π
(0);

215 
	}
}

217 
	$fio_böje˘_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

219 
ªt
;

221 
	`fio_ro_check
(
td
, 
io_u
);

223 
ªt
 = 
	`fio_böje˘_doio
(
td
, 
io_u
);

225 i‡(
ªt
 < 0)

226 
io_u
->
îr‹
 = 
î∫o
;

228 i‡(
io_u
->
îr‹
) {

229 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

230  
FIO_Q_COMPLETED
;

233  
ªt
;

234 
	}
}

236 
io_u
 *
	$fio_böje˘_evít
(
thªad_d©a
 *
td
, 
evít
)

238 
böje˘_d©a
 *
bd
 = 
td
->
io_›s_d©a
;

240  
bd
->
evíts
[
evít
];

241 
	}
}

243 
	$böje˘_›í_˘l
(
thªad_d©a
 *
td
)

245 
fd
;

247 
fd
 = 
	`›í
("/dev/böje˘-˘l", 
O_RDWR
);

248 i‡(
fd
 < 0)

249 
	`td_vîr‹
(
td
, 
î∫o
, "open binject-ctl");

251  
fd
;

252 
	}
}

254 
	$böje˘_unm≠_dev
(
thªad_d©a
 *
td
, 
böje˘_fûe
 *
bf
)

256 
b_io˘l_cmd
 
bic
;

257 
fdb
;

259 i‡(
bf
->
fd
 >= 0) {

260 
	`˛o£
(
bf
->
fd
);

261 
bf
->
fd
 = -1;

264 
fdb
 = 
	`böje˘_›í_˘l
(
td
);

265 i‡(
fdb
 < 0)

268 
bic
.
mö‹
 = 
bf
->minor;

270 i‡(
	`io˘l
(
fdb
, 
B_IOCTL_DEL
, &
bic
) < 0)

271 
	`td_vîr‹
(
td
, 
î∫o
, "binject dev unmap");

273 
	`˛o£
(
fdb
);

274 
	}
}

276 
	$böje˘_m≠_dev
(
thªad_d©a
 *
td
, 
böje˘_fûe
 *
bf
,

277 
fd
)

279 
b_io˘l_cmd
 
bic
;

280 
«me
[80];

281 
°©
 
sb
;

282 
fdb
, 
dev_thîe
, 
lo›s
;

284 
fdb
 = 
	`böje˘_›í_˘l
(
td
);

285 i‡(
fdb
 < 0)

288 
bic
.
fd
 = fd;

290 i‡(
	`io˘l
(
fdb
, 
B_IOCTL_ADD
, &
bic
) < 0) {

291 
	`td_vîr‹
(
td
, 
î∫o
, "binject dev map");

292 
	`˛o£
(
fdb
);

296 
bf
->
mö‹
 = 
bic
.minor;

298 
	`•rötf
(
«me
, "/dev/böje˘%u", 
bf
->
mö‹
);

303 
dev_thîe
 = 
lo›s
 = 0;

305 i‡(!
	`°©
(
«me
, &
sb
)) {

306 
dev_thîe
 = 1;

310 
	`u¶ìp
(10000);

311 } ++
lo›s
 < 100);

313 
	`˛o£
(
fdb
);

315 i‡(!
dev_thîe
) {

316 
	`log_îr
("fio:Åimed out waiting for binject dev\n");

317 
îr_unm≠
;

320 
bf
->
fd
 = 
	`›í
(
«me
, 
O_RDWR
);

321 i‡(
bf
->
fd
 < 0) {

322 
	`td_vîr‹
(
td
, 
î∫o
, "binject dev open");

323 
îr_unm≠
:

324 
	`böje˘_unm≠_dev
(
td
, 
bf
);

329 
	}
}

331 
	$fio_böje˘_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

333 
böje˘_fûe
 *
bf
 = 
	`FILE_ENG_DATA
(
f
);

335 i‡(
bf
) {

336 
	`böje˘_unm≠_dev
(
td
, 
bf
);

337 
	`‰ì
(
bf
);

338 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

339  
	`gíîic_˛o£_fûe
(
td
, 
f
);

343 
	}
}

345 
	$fio_böje˘_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

347 
böje˘_fûe
 *
bf
;

348 
bs
;

349 
ªt
;

351 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

352 i‡(
ªt
)

355 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
) {

356 
	`log_îr
("fio: binject only works with block devices\n");

357 
îr_˛o£
;

359 i‡(
	`io˘l
(
f
->
fd
, 
BLKSSZGET
, &
bs
) < 0) {

360 
	`td_vîr‹
(
td
, 
î∫o
, "BLKSSZGET");

361 
îr_˛o£
;

364 
bf
 = 
	`mÆloc
((*bf));

365 
bf
->
bs
 = bs;

366 
bf
->
mö‹
 = bf->
fd
 = -1;

367 
	`FILE_SET_ENG_DATA
(
f
, 
bf
);

369 i‡(
	`böje˘_m≠_dev
(
td
, 
bf
, 
f
->
fd
)) {

370 
îr_˛o£
:

371 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

376 
	}
}

378 
	$fio_böje˘_˛ónup
(
thªad_d©a
 *
td
)

380 
böje˘_d©a
 *
bd
 = 
td
->
io_›s_d©a
;

382 i‡(
bd
) {

383 
	`‰ì
(
bd
->
evíts
);

384 
	`‰ì
(
bd
->
cmds
);

385 
	`‰ì
(
bd
->
fd_Êags
);

386 
	`‰ì
(
bd
->
pfds
);

387 
	`‰ì
(
bd
);

389 
	}
}

391 
	$fio_böje˘_öô
(
thªad_d©a
 *
td
)

393 
böje˘_d©a
 *
bd
;

395 
bd
 = 
	`mÆloc
((*bd));

396 
	`mem£t
(
bd
, 0, (*bd));

398 
bd
->
cmds
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
b_u£r_cmd
));

399 
	`mem£t
(
bd
->
cmds
, 0, 
td
->
o
.
iodïth
 * (
b_u£r_cmd
));

401 
bd
->
evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

402 
	`mem£t
(
bd
->
evíts
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

404 
bd
->
pfds
 = 
	`mÆloc
((
pﬁlfd
Ë* 
td
->
o
.
ƒ_fûes
);

405 
	`mem£t
(
bd
->
pfds
, 0, (
pﬁlfd
Ë* 
td
->
o
.
ƒ_fûes
);

407 
bd
->
fd_Êags
 = 
	`mÆloc
((Ë* 
td
->
o
.
ƒ_fûes
);

408 
	`mem£t
(
bd
->
fd_Êags
, 0, (Ë* 
td
->
o
.
ƒ_fûes
);

410 
td
->
io_›s_d©a
 = 
bd
;

412 
	}
}

414 
i€ngöe_›s
 
	gi€ngöe
 = {

415 .
«me
 = "binject",

416 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

417 .
	göô
 = 
fio_böje˘_öô
,

418 .
	g¥ï
 = 
fio_böje˘_¥ï
,

419 .
	gqueue
 = 
fio_böje˘_queue
,

420 .
	ggëevíts
 = 
fio_böje˘_gëevíts
,

421 .
	gevít
 = 
fio_böje˘_evít
,

422 .
	g˛ónup
 = 
fio_böje˘_˛ónup
,

423 .
	g›í_fûe
 = 
fio_böje˘_›í_fûe
,

424 .
	g˛o£_fûe
 = 
fio_böje˘_˛o£_fûe
,

425 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

426 .
	gÊags
 = 
FIO_RAWIO
 | 
FIO_BARRIER
 | 
FIO_MEMALIGN
,

436 
	$fio_böje˘_öô
(
thªad_d©a
 
fio_unu£d
 *
td
)

438 
	`log_îr
("fio: ioengine binjectÇotávailable\n");

440 
	}
}

442 
i€ngöe_›s
 
	gi€ngöe
 = {

443 .
«me
 = "binject",

444 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

445 .
	göô
 = 
fio_böje˘_öô
,

450 
fio_öô
 
	$fio_böje˘_ªgi°î
()

452 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

453 
	}
}

455 
fio_exô
 
	$fio_böje˘_uƒegi°î
()

457 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

458 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/cpu.c

8 
	~"../fio.h
"

9 
	~"../›tgroup.h
"

11 
	s˝u_›ti⁄s
 {

12 *
	m∑d
;

13 
	m˝ulﬂd
;

14 
	m˝ucy˛e
;

15 
	mexô_io_d⁄e
;

18 
fio_›ti⁄
 
	g›ti⁄s
[] = {

20 .
«me
 = "cpuload",

21 .
	g ame
 = "CPUÜoad",

22 .
	gty≥
 = 
FIO_OPT_INT
,

23 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
˝ulﬂd
),

24 .
	ghñp
 = "UseÅhisÖercentage of CPU",

25 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

26 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

29 .
	g«me
 = "cpuchunks",

30 .
	g ame
 = "CPU chunk",

31 .
	gty≥
 = 
FIO_OPT_INT
,

32 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
˝ucy˛e
),

33 .
	ghñp
 = "Length ofÅhe CPU burn cycles (usecs)",

34 .
	gdef
 = "50000",

35 .
	g∑ª¡
 = "cpuload",

36 .
	ghide
 = 1,

37 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

38 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

41 .
	g«me
 = "exit_on_io_done",

42 .
	g ame
 = "Exit when IOÅhreadsáre done",

43 .
	gty≥
 = 
FIO_OPT_BOOL
,

44 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
exô_io_d⁄e
),

45 .
	ghñp
 = "Exit when IOÅhreads finish",

46 .
	gdef
 = "0",

47 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

48 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

51 .
	g«me
 = 
NULL
,

56 
	$fio_˝uio_queue
(
thªad_d©a
 *
td
, 
io_u
 
fio_unu£d
 *io_u)

58 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

60 i‡(
co
->
exô_io_d⁄e
 && !
	`fio_ru¬ög_‹_≥ndög_io_thªads
()) {

61 
td
->
d⁄e
 = 1;

62  
FIO_Q_BUSY
;

65 
	`u£c_•ö
(
co
->
˝ucy˛e
);

66  
FIO_Q_COMPLETED
;

67 
	}
}

69 
	$fio_˝uio_öô
(
thªad_d©a
 *
td
)

71 
thªad_›ti⁄s
 *
o
 = &
td
->o;

72 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

74 i‡(!
co
->
˝ulﬂd
) {

75 
	`td_vmsg
(
td
, 
EINVAL
, "cpuÅhreadÇeedsÑate (cpuload=)","cpuio");

79 i‡(
co
->
˝ulﬂd
 > 100)

80 
co
->
˝ulﬂd
 = 100;

85 
o
->
thöktime_blocks
 = 1;

86 
o
->
thöktime_•ö
 = 0;

87 
o
->
thöktime
 = (
co
->
˝ucy˛e
 * (100 - co->
˝ulﬂd
)) / co->cpuload;

89 
o
->
ƒ_fûes
 = o->
›í_fûes
 = 1;

91 
	`log_öfo
("%s: ioengine=%s, cpuload=%u, cpucycle=%u\n",

92 
td
->
o
.
«me
,Åd->
io_›s
->«me, 
co
->
˝ulﬂd
, co->
˝ucy˛e
);

95 
	}
}

97 
	$fio_˝uio_›í
(
thªad_d©a
 
fio_unu£d
 *
td
,

98 
fio_fûe
 
fio_unu£d
 *
f
)

101 
	}
}

103 
i€ngöe_›s
 
	gi€ngöe
 = {

104 .
«me
 = "cpuio",

105 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

106 .
	gqueue
 = 
fio_˝uio_queue
,

107 .
	göô
 = 
fio_˝uio_öô
,

108 .
	g›í_fûe
 = 
fio_˝uio_›í
,

109 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NOIO
,

110 .
	g›ti⁄s
 = 
›ti⁄s
,

111 .
	g›ti⁄_°ru˘_size
 = (
˝u_›ti⁄s
),

114 
fio_öô
 
	$fio_˝uio_ªgi°î
()

116 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

117 
	}
}

119 
fio_exô
 
	$fio_˝uio_uƒegi°î
()

121 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

122 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/dev-dax.c

46 
	~<°dio.h
>

47 
	~<limôs.h
>

48 
	~<°dlib.h
>

49 
	~<uni°d.h
>

50 
	~<î∫o.h
>

51 
	~<sys/mm™.h
>

52 
	~<sys/°©.h
>

53 
	~<sys/sysma¸os.h
>

54 
	~<libgí.h
>

55 
	~<libpmem.h
>

57 
	~"../fio.h
"

58 
	~"../vîify.h
"

64 
	#MMAP_TOTAL_SZ
 (1 * 1024 * 1024 * 1024UL)

	)

66 
	sfio_devdax_d©a
 {

67 *
	mdevdax_±r
;

68 
size_t
 
	mdevdax_sz
;

69 
off_t
 
	mdevdax_off
;

72 
	$fio_devdax_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

73 
size_t
 
Àngth
, 
off_t
 
off
)

75 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

76 
Êags
 = 0;

78 i‡(
	`td_rw
(
td
))

79 
Êags
 = 
PROT_READ
 | 
PROT_WRITE
;

80 i‡(
	`td_wrôe
(
td
)) {

81 
Êags
 = 
PROT_WRITE
;

83 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

84 
Êags
 |
PROT_READ
;

86 
Êags
 = 
PROT_READ
;

88 
fdd
->
devdax_±r
 = 
	`mm≠
(
NULL
, 
Àngth
, 
Êags
, 
MAP_SHARED
, 
f
->
fd
, 
off
);

89 i‡(
fdd
->
devdax_±r
 =
MAP_FAILED
) {

90 
fdd
->
devdax_±r
 = 
NULL
;

91 
	`td_vîr‹
(
td
, 
î∫o
, "mmap");

94 i‡(
td
->
îr‹
 && 
fdd
->
devdax_±r
)

95 
	`munm≠
(
fdd
->
devdax_±r
, 
Àngth
);

97  
td
->
îr‹
;

98 
	}
}

103 
	$fio_devdax_¥ï_limôed
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

105 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

106 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

108 i‡(
io_u
->
buÊí
 > 
f
->
ªÆ_fûe_size
) {

109 
	`log_îr
("dev-dax: bsÅoo big for dev-daxÉngine\n");

110  
EIO
;

113 
fdd
->
devdax_sz
 = 
	`mö
(
MMAP_TOTAL_SZ
, 
f
->
ªÆ_fûe_size
);

114 i‡(
fdd
->
devdax_sz
 > 
f
->
io_size
)

115 
fdd
->
devdax_sz
 = 
f
->
io_size
;

117 
fdd
->
devdax_off
 = 
io_u
->
off£t
;

119  
	`fio_devdax_fûe
(
td
, 
f
, 
fdd
->
devdax_sz
, fdd->
devdax_off
);

120 
	}
}

125 
	$fio_devdax_¥ï_fuŒ
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

127 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

128 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

129 
ªt
;

131 i‡(
	`fio_fûe_∑πül_mm≠
(
f
))

132  
EINVAL
;

134 i‡(
io_u
->
off£t
 !(
size_t
) io_u->offset ||

135 
f
->
io_size
 !(
size_t
) f->io_size) {

136 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

137  
EINVAL
;

140 
fdd
->
devdax_sz
 = 
f
->
io_size
;

141 
fdd
->
devdax_off
 = 0;

143 
ªt
 = 
	`fio_devdax_fûe
(
td
, 
f
, 
fdd
->
devdax_sz
, fdd->
devdax_off
);

144 i‡(
ªt
)

145 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

147  
ªt
;

148 
	}
}

150 
	$fio_devdax_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

152 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

153 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

154 
ªt
;

159 i‡(
io_u
->
off£t
 >
fdd
->
devdax_off
 &&

160 
io_u
->
off£t
 + io_u->
buÊí
 <
fdd
->
devdax_off
 + fdd->
devdax_sz
)

161 
d⁄e
;

166 i‡(
fdd
->
devdax_±r
) {

167 i‡(
	`munm≠
(
fdd
->
devdax_±r
, fdd->
devdax_sz
) < 0)

168  
î∫o
;

169 
fdd
->
devdax_±r
 = 
NULL
;

172 i‡(
	`fio_devdax_¥ï_fuŒ
(
td
, 
io_u
)) {

173 
	`td_˛ór_îr‹
(
td
);

174 
ªt
 = 
	`fio_devdax_¥ï_limôed
(
td
, 
io_u
);

175 i‡(
ªt
)

176  
ªt
;

179 
d⁄e
:

180 
io_u
->
mm≠_d©a
 = 
fdd
->
devdax_±r
 + io_u->
off£t
 - fdd->
devdax_off
 -

181 
f
->
fûe_off£t
;

183 
	}
}

185 
	$fio_devdax_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

187 
	`fio_ro_check
(
td
, 
io_u
);

188 
io_u
->
îr‹
 = 0;

190 
io_u
->
ddú
) {

191 
DDIR_READ
:

192 
	`mem˝y
(
io_u
->
x„r_buf
, io_u->
mm≠_d©a
, io_u->
x„r_buÊí
);

194 
DDIR_WRITE
:

195 
	`pmem_mem˝y_≥rsi°
(
io_u
->
mm≠_d©a
, io_u->
x„r_buf
,

196 
io_u
->
x„r_buÊí
);

198 
DDIR_SYNC
:

199 
DDIR_DATASYNC
:

200 
DDIR_SYNC_FILE_RANGE
:

203 
io_u
->
îr‹
 = 
EINVAL
;

207  
FIO_Q_COMPLETED
;

208 
	}
}

210 
	$fio_devdax_öô
(
thªad_d©a
 *
td
)

212 
thªad_›ti⁄s
 *
o
 = &
td
->o;

214 i‡((
o
->
rw_mö_bs
 & 
∑ge_mask
) &&

215 (
o
->
fsync_blocks
 || o->
fd©async_blocks
)) {

216 
	`log_îr
("dev-dax: mmap options dictateá minimum block size of %llu bytes\n",

217 (Ë
∑ge_size
);

222 
	}
}

224 
	$fio_devdax_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

226 
fio_devdax_d©a
 *
fdd
;

227 
ªt
;

229 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

230 i‡(
ªt
)

231  
ªt
;

233 
fdd
 = 
	`ˇŒoc
(1, (*fdd));

234 i‡(!
fdd
) {

235 
fio_unu£d
 
__ªt
;

236 
__ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

240 
	`FILE_SET_ENG_DATA
(
f
, 
fdd
);

243 
	}
}

245 
	$fio_devdax_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

247 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

249 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

250 
	`‰ì
(
fdd
);

251 
	`fio_fûe_˛ór_∑πül_mm≠
(
f
);

253  
	`gíîic_˛o£_fûe
(
td
, 
f
);

254 
	}
}

257 
	$fio_devdax_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

259 
•©h
[
PATH_MAX
];

260 
≈©h
[
PATH_MAX
];

261 *
Ω©h
;

262 
FILE
 *
sfûe
;

263 
uöt64_t
 
size
;

264 
°©
 
°
;

265 
rc
;

267 i‡(
	`fio_fûe_size_known
(
f
))

270 i‡(
f
->
fûëy≥
 !
FIO_TYPE_CHAR
)

271  -
EINVAL
;

273 
rc
 = 
	`°©
(
f
->
fûe_«me
, &
°
);

274 i‡(
rc
 < 0) {

275 
	`log_îr
("%s: failedÅo stat file %s (%s)\n",

276 
td
->
o
.
«me
, 
f
->
fûe_«me
, 
	`°ªº‹
(
î∫o
));

277  -
î∫o
;

280 
	`¢¥ötf
(
•©h
, 
PATH_MAX
, "/sys/dev/char/%d:%d/subsystem",

281 
	`maj‹
(
°
.
°_rdev
), 
	`mö‹
(st.st_rdev));

283 
Ω©h
 = 
	`ªÆ∑th
(
•©h
, 
≈©h
);

284 i‡(!
Ω©h
) {

285 
	`log_îr
("%s:Ñealpath on %s failed (%s)\n",

286 
td
->
o
.
«me
, 
•©h
, 
	`°ªº‹
(
î∫o
));

287  -
î∫o
;

291 i‡(
	`°rcmp
("/sys/˛ass/dax", 
Ω©h
)) {

292 
	`log_îr
("%s: %sÇotá DAX device!\n",

293 
td
->
o
.
«me
, 
f
->
fûe_«me
);

296 
	`¢¥ötf
(
•©h
, 
PATH_MAX
, "/sys/dev/char/%d:%d/size",

297 
	`maj‹
(
°
.
°_rdev
), 
	`mö‹
(st.st_rdev));

299 
sfûe
 = 
	`f›í
(
•©h
, "r");

300 i‡(!
sfûe
) {

301 
	`log_îr
("%s: fopen on %s failed (%s)\n",

302 
td
->
o
.
«me
, 
•©h
, 
	`°ªº‹
(
î∫o
));

306 
rc
 = 
	`fsˇnf
(
sfûe
, "%lu", &
size
);

307 i‡(
rc
 < 0) {

308 
	`log_îr
("%s: fscanf on %s failed (%s)\n",

309 
td
->
o
.
«me
, 
•©h
, 
	`°ªº‹
(
î∫o
));

310 
	`f˛o£
(
sfûe
);

314 
f
->
ªÆ_fûe_size
 = 
size
;

316 
	`f˛o£
(
sfûe
);

318 i‡(
f
->
fûe_off£t
 > f->
ªÆ_fûe_size
) {

319 
	`log_îr
("%s: off£àexãnd†íd (%Œu > %Œu)\n", 
td
->
o
.
«me
,

320 (Ë
f
->
fûe_off£t
,

321 (Ë
f
->
ªÆ_fûe_size
);

325 
	`fio_fûe_£t_size_known
(
f
);

327 
	}
}

329 
i€ngöe_›s
 
	gi€ngöe
 = {

330 .
«me
 = "dev-dax",

331 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

332 .
	göô
 = 
fio_devdax_öô
,

333 .
	g¥ï
 = 
fio_devdax_¥ï
,

334 .
	gqueue
 = 
fio_devdax_queue
,

335 .
	g›í_fûe
 = 
fio_devdax_›í_fûe
,

336 .
	g˛o£_fûe
 = 
fio_devdax_˛o£_fûe
,

337 .
	ggë_fûe_size
 = 
fio_devdax_gë_fûe_size
,

338 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NOEXTEND
 | 
FIO_NODISKUTIL
,

341 
fio_öô
 
	$fio_devdax_ªgi°î
()

343 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

344 
	}
}

346 
fio_exô
 
	$fio_devdax_uƒegi°î
()

348 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

349 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/e4defrag.c

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<sys/uio.h
>

15 
	~<î∫o.h
>

16 
	~<as£π.h
>

17 
	~<f˙é.h
>

19 
	~"../fio.h
"

20 
	~"../›tgroup.h
"

22 #i‚de‡
EXT4_IOC_MOVE_EXT


23 
	#EXT4_IOC_MOVE_EXT
 
	`_IOWR
('f', 15, 
move_exã¡
)

	)

24 
	smove_exã¡
 {

25 
__u32
 
	mª£rved
;

26 
__u32
 
	md⁄‹_fd
;

27 
__u64
 
	m‹ig_°¨t
;

28 
__u64
 
	md⁄‹_°¨t
;

29 
__u64
 
	mÀn
;

30 
__u64
 
	mmoved_Àn
;

34 
	se4de‰ag_d©a
 {

35 
	md⁄‹_fd
;

36 
	mbsz
;

39 
	se4de‰ag_›ti⁄s
 {

40 *
	m∑d
;

41 
	mö∂a˚
;

42 * 
	md⁄‹_«me
;

45 
fio_›ti⁄
 
	g›ti⁄s
[] = {

47 .
«me
 = "donorname",

48 .
	g ame
 = "Donor Name",

49 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

50 .
	goff1
 = 
off£tof
(
e4de‰ag_›ti⁄s
, 
d⁄‹_«me
),

51 .
	ghñp
 = "File usedásá block donor",

52 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

53 .
	ggroup
 = 
FIO_OPT_G_E4DEFRAG
,

56 .
	g«me
 = "inplace",

57 .
	g ame
 = "In Place",

58 .
	gty≥
 = 
FIO_OPT_INT
,

59 .
	goff1
 = 
off£tof
(
e4de‰ag_›ti⁄s
, 
ö∂a˚
),

60 .
	gmövÆ
 = 0,

61 .
	gmaxvÆ
 = 1,

62 .
	ghñp
 = "Allocánd free space inside defragÉvent",

63 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

64 .
	ggroup
 = 
FIO_OPT_G_E4DEFRAG
,

67 .
	g«me
 = 
NULL
,

71 
	$fio_e4de‰ag_öô
(
thªad_d©a
 *
td
)

73 
r
, 
Àn
 = 0;

74 
e4de‰ag_›ti⁄s
 *
o
 = 
td
->
eo
;

75 
e4de‰ag_d©a
 *
ed
;

76 
°©
 
°ub
;

77 
d⁄‹_«me
[
PATH_MAX
];

79 i‡(!
	`°æí
(
o
->
d⁄‹_«me
)) {

80 
	`log_îr
("'donorname' optionsÑequired\n");

84 
ed
 = 
	`mÆloc
((*ed));

85 i‡(!
ed
) {

86 
	`td_vîr‹
(
td
, 
ENOMEM
, "io_queue_init");

89 
	`mem£t
(
ed
, 0 ,(*ed));

91 i‡(
td
->
o
.
dúe˘‹y
)

92 
Àn
 = 
	`•rötf
(
d⁄‹_«me
, "%s/", 
td
->
o
.
dúe˘‹y
);

93 
	`•rötf
(
d⁄‹_«me
 + 
Àn
, "%s", 
o
->donor_name);

95 
ed
->
d⁄‹_fd
 = 
	`›í
(
d⁄‹_«me
, 
O_CREAT
|
O_WRONLY
, 0644);

96 i‡(
ed
->
d⁄‹_fd
 < 0) {

97 
	`td_vîr‹
(
td
, 
î∫o
, "io_queue_init");

98 
	`log_îr
("C™'à›í d⁄‹ fûê%†îr:%d\n", 
d⁄‹_«me
, 
ed
->
d⁄‹_fd
);

99 
	`‰ì
(
ed
);

103 i‡(!
o
->
ö∂a˚
) {

104 
__Àn
 = 
td
->
o
.
fûe_size_high
 -Åd->o.
°¨t_off£t
;

105 
r
 = 
	`ÁŒoˇã
(
ed
->
d⁄‹_fd
, 0, 
td
->
o
.
°¨t_off£t
, 
__Àn
);

106 i‡(
r
)

107 
îr
;

109 
r
 = 
	`f°©
(
ed
->
d⁄‹_fd
, &
°ub
);

110 i‡(
r
)

111 
îr
;

113 
ed
->
bsz
 = 
°ub
.
°_blksize
;

114 
td
->
io_›s_d©a
 = 
ed
;

116 
îr
:

117 
	`td_vîr‹
(
td
, 
î∫o
, "io_queue_init");

118 
	`˛o£
(
ed
->
d⁄‹_fd
);

119 
	`‰ì
(
ed
);

121 
	}
}

123 
	$fio_e4de‰ag_˛ónup
(
thªad_d©a
 *
td
)

125 
e4de‰ag_d©a
 *
ed
 = 
td
->
io_›s_d©a
;

126 i‡(
ed
) {

127 i‡(
ed
->
d⁄‹_fd
 >= 0)

128 
	`˛o£
(
ed
->
d⁄‹_fd
);

129 
	`‰ì
(
ed
);

131 
	}
}

134 
	$fio_e4de‰ag_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

137 
ªt
;

138 
Àn
;

139 
move_exã¡
 
me
;

140 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

141 
e4de‰ag_d©a
 *
ed
 = 
td
->
io_›s_d©a
;

142 
e4de‰ag_›ti⁄s
 *
o
 = 
td
->
eo
;

144 
	`fio_ro_check
(
td
, 
io_u
);

150 i‡(
io_u
->
ddú
 !
DDIR_WRITE
) {

151 
io_u
->
îr‹
 = 
EINVAL
;

152  
FIO_Q_COMPLETED
;

155 i‡(
o
->
ö∂a˚
) {

156 
ªt
 = 
	`ÁŒoˇã
(
ed
->
d⁄‹_fd
, 0, 
io_u
->
off£t
, io_u->
x„r_buÊí
);

157 i‡(
ªt
)

158 
out
;

161 
	`mem£t
(&
me
, 0, (me));

162 
me
.
d⁄‹_fd
 = 
ed
->donor_fd;

163 
me
.
‹ig_°¨t
 = 
io_u
->
off£t
 / 
ed
->
bsz
;

164 
me
.
d⁄‹_°¨t
 = me.
‹ig_°¨t
;

165 
Àn
 = (
io_u
->
off£t
 + io_u->
x„r_buÊí
 + 
ed
->
bsz
 -1);

166 
me
.
Àn
 =Üí / 
ed
->
bsz
 - me.
‹ig_°¨t
;

168 
ªt
 = 
	`io˘l
(
f
->
fd
, 
EXT4_IOC_MOVE_EXT
, &
me
);

169 
Àn
 = 
me
.
moved_Àn
 * 
ed
->
bsz
;

171 i‡(
Àn
 > 
io_u
->
x„r_buÊí
)

172 
Àn
 = 
io_u
->
x„r_buÊí
;

174 i‡(
Àn
 !
io_u
->
x„r_buÊí
) {

175 i‡(
Àn
) {

176 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
Àn
;

177 
io_u
->
îr‹
 = 0;

180 
io_u
->
îr‹
 = 
EINVAL
;

183 i‡(
ªt
)

184 
io_u
->
îr‹
 = 
î∫o
;

186 i‡(
o
->
ö∂a˚
)

187 
ªt
 = 
	`·runˇã
(
ed
->
d⁄‹_fd
, 0);

188 
out
:

189 i‡(
ªt
 && !
io_u
->
îr‹
)

190 
io_u
->
îr‹
 = 
î∫o
;

192  
FIO_Q_COMPLETED
;

193 
	}
}

195 
i€ngöe_›s
 
	gi€ngöe
 = {

196 .
«me
 = "e4defrag",

197 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

198 .
	göô
 = 
fio_e4de‰ag_öô
,

199 .
	gqueue
 = 
fio_e4de‰ag_queue
,

200 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

201 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

202 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

203 .
	gÊags
 = 
FIO_SYNCIO
,

204 .
	g˛ónup
 = 
fio_e4de‰ag_˛ónup
,

205 .
	g›ti⁄s
 = 
›ti⁄s
,

206 .
	g›ti⁄_°ru˘_size
 = (
e4de‰ag_›ti⁄s
),

210 
fio_öô
 
	$fio_syncio_ªgi°î
()

212 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

213 
	}
}

215 
fio_exô
 
	$fio_syncio_uƒegi°î
()

217 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

218 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/falloc.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<sys/uio.h
>

15 
	~<î∫o.h
>

16 
	~<as£π.h
>

17 
	~<f˙é.h
>

19 
	~"../fio.h
"

20 
	~"../fûehash.h
"

26 
	$›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

28 
‰om_hash
 = 0;

30 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

32 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
) {

33 
	`log_îr
("fio: only filesáre supported fallocate \n");

36 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

37 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

41 
›í_agaö
:

42 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
O_CREAT
|
O_RDWR
);

44 i‡(
f
->
fd
 == -1) {

45 
buf
[
FIO_VERROR_SIZE
];

46 
e
 = 
î∫o
;

48 
	`¢¥ötf
(
buf
, (buf), "›í(%s)", 
f
->
fûe_«me
);

49 
	`td_vîr‹
(
td
, 
e
, 
buf
);

52 i‡(!
‰om_hash
 && 
f
->
fd
 != -1) {

53 i‡(
	`add_fûe_hash
(
f
)) {

54 
fio_unu£d
 
ªt
;

59 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

60 
›í_agaö
;

65 
	}
}

67 #i‚de‡
FALLOC_FL_KEEP_SIZE


68 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

70 #i‚de‡
FALLOC_FL_PUNCH_HOLE


71 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

73 
	$fio_ÁŒoˇã_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

75 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

76 
ªt
;

77 
Êags
 = 0;

79 
	`fio_ro_check
(
td
, 
io_u
);

81 i‡(
io_u
->
ddú
 =
DDIR_READ
)

82 
Êags
 = 
FALLOC_FL_KEEP_SIZE
;

83 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

84 
Êags
 = 0;

85 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

86 
Êags
 = 
FALLOC_FL_PUNCH_HOLE
 | 
FALLOC_FL_KEEP_SIZE
;

88 
ªt
 = 
	`ÁŒoˇã
(
f
->
fd
, 
Êags
, 
io_u
->
off£t
, io_u->
x„r_buÊí
);

90 i‡(
ªt
)

91 
io_u
->
îr‹
 = 
î∫o
;

93  
FIO_Q_COMPLETED
;

94 
	}
}

96 
i€ngöe_›s
 
	gi€ngöe
 = {

97 .
«me
 = "falloc",

98 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

99 .
	gqueue
 = 
fio_ÁŒoˇã_queue
,

100 .
	g›í_fûe
 = 
›í_fûe
,

101 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

102 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

103 .
	gÊags
 = 
FIO_SYNCIO


106 
fio_öô
 
	$fio_syncio_ªgi°î
()

108 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

109 
	}
}

111 
fio_exô
 
	$fio_syncio_uƒegi°î
()

113 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

114 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/filecreate.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<î∫o.h
>

12 
	~"../fio.h
"

13 
	~"../fûehash.h
"

15 
	sfc_d©a
 {

16 
fio_ddú
 
	m°©_ddú
;

19 
	$›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

21 
time•ec
 
°¨t
;

22 
do_œt
 = !
td
->
o
.
dißbÀ_œt
;

24 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

26 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
) {

27 
	`log_îr
("fio: only filesáre supported fallocate \n");

30 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

31 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

35 i‡(
do_œt
)

36 
	`fio_gëtime
(&
°¨t
, 
NULL
);

38 
f
->
fd
 = 
	`›í
(f->
fûe_«me
, 
O_CREAT
|
O_RDWR
, 0600);

40 i‡(
f
->
fd
 == -1) {

41 
buf
[
FIO_VERROR_SIZE
];

42 
e
 = 
î∫o
;

44 
	`¢¥ötf
(
buf
, (buf), "›í(%s)", 
f
->
fûe_«me
);

45 
	`td_vîr‹
(
td
, 
e
, 
buf
);

49 i‡(
do_œt
) {

50 
fc_d©a
 *
d©a
 = 
td
->
io_›s_d©a
;

51 
uöt64_t
 
n£c
;

53 
n£c
 = 
	`¡ime_sö˚_now
(&
°¨t
);

54 
	`add_˛©_ßm∂e
(
td
, 
d©a
->
°©_ddú
, 
n£c
, 0, 0);

58 
	}
}

60 
	$queue_io
(
thªad_d©a
 *
td
, 
io_u
 
fio_unu£d
 *io_u)

62  
FIO_Q_COMPLETED
;

63 
	}
}

70 
	$gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

72 
f
->
ªÆ_fûe_size
 = 
	`td_mö_bs
(
td
);

74 
	}
}

76 
	$öô
(
thªad_d©a
 *
td
)

78 
fc_d©a
 *
d©a
;

80 
d©a
 = 
	`ˇŒoc
(1, (*data));

82 i‡(
	`td_ªad
(
td
))

83 
d©a
->
°©_ddú
 = 
DDIR_READ
;

84 i‡(
	`td_wrôe
(
td
))

85 
d©a
->
°©_ddú
 = 
DDIR_WRITE
;

87 
td
->
io_›s_d©a
 = 
d©a
;

89 
	}
}

91 
	$˛ónup
(
thªad_d©a
 *
td
)

93 
fc_d©a
 *
d©a
 = 
td
->
io_›s_d©a
;

95 
	`‰ì
(
d©a
);

96 
	}
}

98 
i€ngöe_›s
 
	gi€ngöe
 = {

99 .
«me
 = "filecreate",

100 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

101 .
	göô
 = 
öô
,

102 .
	g˛ónup
 = 
˛ónup
,

103 .
	gqueue
 = 
queue_io
,

104 .
	ggë_fûe_size
 = 
gë_fûe_size
,

105 .
	g›í_fûe
 = 
›í_fûe
,

106 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

107 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_SYNCIO
 | 
FIO_FAKEIO
 |

108 
FIO_NOSTATS
 | 
FIO_NOFILEHASH
,

111 
fio_öô
 
	$fio_fûe¸óã_ªgi°î
()

113 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

114 
	}
}

116 
fio_exô
 
	$fio_fûe¸óã_uƒegi°î
()

118 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

119 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/ftruncate.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<uni°d.h
>

12 
	~<sys/uio.h
>

13 
	~<î∫o.h
>

14 
	~<as£π.h
>

15 
	~<f˙é.h
>

17 
	~"../fio.h
"

18 
	~"../fûehash.h
"

20 
	$fio_·runˇã_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

22 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

23 
ªt
;

24 
	`fio_ro_check
(
td
, 
io_u
);

26 i‡(
io_u
->
ddú
 !
DDIR_WRITE
) {

27 
io_u
->
îr‹
 = 
EINVAL
;

28  
FIO_Q_COMPLETED
;

30 
ªt
 = 
	`·runˇã
(
f
->
fd
, 
io_u
->
off£t
);

32 i‡(
ªt
)

33 
io_u
->
îr‹
 = 
î∫o
;

35  
FIO_Q_COMPLETED
;

36 
	}
}

38 
i€ngöe_›s
 
	gi€ngöe
 = {

39 .
«me
 = "ftruncate",

40 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

41 .
	gqueue
 = 
fio_·runˇã_queue
,

42 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

43 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

44 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

45 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_FAKEIO


48 
fio_öô
 
	$fio_syncio_ªgi°î
()

50 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

51 
	}
}

53 
fio_exô
 
	$fio_syncio_uƒegi°î
()

55 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

56 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/fusion-aw.c

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~"../fio.h
"

25 
	~<nvm/nvm_¥imôives.h
>

27 
	#NUM_ATOMIC_CAPABILITIES
 (5)

	)

29 
	sÁs_d©a
 {

30 
nvm_h™dÀ_t
 
	mnvm_h™dÀ
;

31 
size_t
 
	mx„r_buf_Æign
;

32 
size_t
 
	mx„r_buÊí_Æign
;

33 
size_t
 
	mx„r_buÊí_max
;

34 
size_t
 
	m£˘‹_size
;

37 
	$queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

39 
Ás_d©a
 *
d
 = 
	`FILE_ENG_DATA
(
io_u
->
fûe
);

40 
rc
;

42 i‡(
io_u
->
ddú
 !
DDIR_WRITE
) {

43 
	`td_vmsg
(
td
, 
EINVAL
, "only writes supported", "io_u->ddir");

44 
rc
 = -
EINVAL
;

45 
out
;

48 i‡((
size_t
Ë
io_u
->
x„r_buf
 % 
d
->
x„r_buf_Æign
) {

49 
	`td_vmsg
(
td
, 
EINVAL
, "unaligned data buffer", "io_u->xfer_buf");

50 
rc
 = -
EINVAL
;

51 
out
;

54 i‡(
io_u
->
x„r_buÊí
 % 
d
->
x„r_buÊí_Æign
) {

55 
	`td_vmsg
(
td
, 
EINVAL
, "unaligned data size", "io_u->xfer_buflen");

56 
rc
 = -
EINVAL
;

57 
out
;

60 i‡(
io_u
->
x„r_buÊí
 > 
d
->
x„r_buÊí_max
) {

61 
	`td_vmsg
(
td
, 
EINVAL
, "dataÅoo big", "io_u->xfer_buflen");

62 
rc
 = -
EINVAL
;

63 
out
;

66 
rc
 = 
	`nvm_©omic_wrôe
(
d
->
nvm_h™dÀ
, (
uöt64_t
Ë
io_u
->
x„r_buf
,

67 
io_u
->
x„r_buÊí
, io_u->
off£t
 / 
d
->
£˘‹_size
);

68 i‡(
rc
 == -1) {

69 
	`td_vîr‹
(
td
, 
î∫o
, "nvm_atomic_write");

70 
rc
 = -
î∫o
;

71 
out
;

73 
rc
 = 
FIO_Q_COMPLETED
;

74 
out
:

75 i‡(
rc
 < 0)

76 
io_u
->
îr‹
 = -
rc
;

78  
rc
;

79 
	}
}

81 
	$›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

83 
rc
;

84 
fio_unu£d
 
˛o£_fûe_rc
;

85 
Ás_d©a
 *
d
;

86 
nvm_vîsi⁄_t
 
nvm_vîsi⁄
;

87 
nvm_ˇ∑bûôy_t
 
nvm_ˇ∑bûôy
[
NUM_ATOMIC_CAPABILITIES
];

90 
d
 = 
	`mÆloc
((*d));

91 i‡(!
d
) {

92 
	`td_vîr‹
(
td
, 
ENOMEM
, "malloc");

93 
rc
 = 
ENOMEM
;

94 
îr‹
;

96 
d
->
nvm_h™dÀ
 = -1;

97 
	`FILE_SET_ENG_DATA
(
f
, 
d
);

99 
rc
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

101 i‡(
rc
)

102 
‰ì_ígöe_d©a
;

105 
nvm_vîsi⁄
.
maj‹
 = 
NVM_PRIMITIVES_API_MAJOR
;

106 
nvm_vîsi⁄
.
mö‹
 = 
NVM_PRIMITIVES_API_MINOR
;

107 
nvm_vîsi⁄
.
mi¸o
 = 
NVM_PRIMITIVES_API_MICRO
;

109 
d
->
nvm_h™dÀ
 = 
	`nvm_gë_h™dÀ
(
f
->
fd
, &
nvm_vîsi⁄
);

110 i‡(
d
->
nvm_h™dÀ
 == -1) {

111 
	`td_vmsg
(
td
, 
î∫o
, "nvm_get_handle failed", "nvm_get_handle");

112 
rc
 = 
î∫o
;

113 
˛o£_fûe
;

116 
nvm_ˇ∑bûôy
[0].
ˇp_id
 = 
NVM_CAP_ATOMIC_WRITE_START_ALIGN_ID
;

117 
nvm_ˇ∑bûôy
[1].
ˇp_id
 = 
NVM_CAP_ATOMIC_WRITE_MULTIPLICITY_ID
;

118 
nvm_ˇ∑bûôy
[2].
ˇp_id
 = 
NVM_CAP_ATOMIC_WRITE_MAX_VECTOR_SIZE_ID
;

119 
nvm_ˇ∑bûôy
[3].
ˇp_id
 = 
NVM_CAP_SECTOR_SIZE_ID
;

120 
nvm_ˇ∑bûôy
[4].
ˇp_id
 = 
NVM_CAP_ATOMIC_MAX_IOV_ID
;

121 
rc
 = 
	`nvm_gë_ˇ∑bûôõs
(
d
->
nvm_h™dÀ
, 
nvm_ˇ∑bûôy
,

122 
NUM_ATOMIC_CAPABILITIES
, 
Ál£
);

123 i‡(
rc
 == -1) {

124 
	`td_vmsg
(
td
, 
î∫o
, "error in gettingátomic write capabilities", "nvm_get_capabilities");

125 
rc
 = 
î∫o
;

126 
˛o£_fûe
;

127 } i‡(
rc
 < 
NUM_ATOMIC_CAPABILITIES
) {

128 
	`td_vmsg
(
td
, 
EINVAL
, "couldn't getállÅheátomic write capabilities" , "nvm_get_capabilities");

129 
rc
 = 
ECANCELED
;

130 
˛o£_fûe
;

133 
rc
 = 0;

134 
d
->
x„r_buf_Æign
 = 
nvm_ˇ∑bûôy
[0].
ˇp_vÆue
;

135 
d
->
x„r_buÊí_Æign
 = 
nvm_ˇ∑bûôy
[1].
ˇp_vÆue
;

136 
d
->
x„r_buÊí_max
 = d->
x„r_buÊí_Æign
 * 
nvm_ˇ∑bûôy
[2].
ˇp_vÆue
 *Çvm_capability[4].cap_value;

137 
d
->
£˘‹_size
 = 
nvm_ˇ∑bûôy
[3].
ˇp_vÆue
;

139 
out
:

140  
rc
;

141 
˛o£_fûe
:

142 
˛o£_fûe_rc
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

143 
‰ì_ígöe_d©a
:

144 
	`‰ì
(
d
);

145 
îr‹
:

146 
f
->
fd
 = -1;

147 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

148 
out
;

149 
	}
}

151 
	$˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

153 
Ás_d©a
 *
d
 = 
	`FILE_ENG_DATA
(
f
);

155 i‡(
d
) {

156 i‡(
d
->
nvm_h™dÀ
 != -1)

157 
	`nvm_ªÀa£_h™dÀ
(
d
->
nvm_h™dÀ
);

158 
	`‰ì
(
d
);

159 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

162  
	`gíîic_˛o£_fûe
(
td
, 
f
);

163 
	}
}

165 
i€ngöe_›s
 
	gi€ngöe
 = {

166 .
«me
 = "fusion-aw-sync",

167 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

168 .
	gqueue
 = 
queue
,

169 .
	g›í_fûe
 = 
›í_fûe
,

170 .
	g˛o£_fûe
 = 
˛o£_fûe
,

171 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

172 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_RAWIO
 | 
FIO_MEMALIGN


175 
fio_öô
 
	$fio_fusi⁄_aw_öô
()

177 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

178 
	}
}

180 
fio_exô
 
	$fio_fusi⁄_aw_exô
()

182 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

183 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/gfapi.h

1 
	~<glu°îfs/≠i/glfs.h
>

2 
	~"../fio.h
"

4 
	sgf_›ti⁄s
 {

5 *
	m∑d
;

6 *
	mgf_vﬁ
;

7 *
	mgf_brick
;

10 
	sgf_d©a
 {

11 
glfs_t
 *
	mfs
;

12 
glfs_fd_t
 *
	mfd
;

13 
io_u
 **
	maio_evíts
;

16 
fio_›ti⁄
 
gÁpi_›ti⁄s
[];

17 
fio_gf_£tup
(
thªad_d©a
 *
td
);

18 
fio_gf_˛ónup
(
thªad_d©a
 *
td
);

19 
fio_gf_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

20 
fio_gf_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

21 
fio_gf_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

22 
fio_gf_u∆ök_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

	@/home/ysjin/Desktop/fio/fio/engines/glusterfs.c

8 
	~"gÁpi.h
"

9 
	~"../›tgroup.h
"

11 
fio_›ti⁄
 
	ggÁpi_›ti⁄s
[] = {

13 .
«me
 = "volume",

14 .
	g ame
 = "Glusterfs volume",

15 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

16 .
	ghñp
 = "Name ofÅhe Glusterfs volume",

17 .
	goff1
 = 
off£tof
(
gf_›ti⁄s
, 
gf_vﬁ
),

18 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

19 .
	ggroup
 = 
FIO_OPT_G_GFAPI
,

22 .
	g«me
 = "brick",

23 .
	g ame
 = "Glusterfs brickÇame",

24 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

25 .
	ghñp
 = "Name ofÅhe Glusterfs brickÅo connect",

26 .
	goff1
 = 
off£tof
(
gf_›ti⁄s
, 
gf_brick
),

27 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

28 .
	ggroup
 = 
FIO_OPT_G_GFAPI
,

31 .
	g«me
 = 
NULL
,

35 
	$fio_gf_£tup
(
thªad_d©a
 *
td
)

37 
r
 = 0;

38 
gf_d©a
 *
g
 = 
NULL
;

39 
gf_›ti⁄s
 *
›t
 = 
td
->
eo
;

40 
°©
 
sb
 = { 0, };

42 
	`d¥öt
(
FD_IO
, "fio setup\n");

44 i‡(
td
->
io_›s_d©a
)

47 
g
 = 
	`mÆloc
((
gf_d©a
));

48 i‡(!
g
) {

49 
	`log_îr
("malloc failed.\n");

50  -
ENOMEM
;

52 
g
->
fs
 = 
NULL
;

53 
g
->
fd
 = 
NULL
;

54 
g
->
aio_evíts
 = 
NULL
;

56 
g
->
fs
 = 
	`glfs_√w
(
›t
->
gf_vﬁ
);

57 i‡(!
g
->
fs
) {

58 
	`log_îr
("glfs_new failed.\n");

59 
˛ónup
;

61 
	`glfs_£t_loggög
(
g
->
fs
, "/tmp/fio_gfapi.log", 7);

63 
r
 = 
	`glfs_£t_vﬁfûe_£rvî
(
g
->
fs
, "t˝", 
›t
->
gf_brick
, 0);

64 i‡(
r
) {

65 
	`log_îr
("glfs_set_volfile_server failed.\n");

66 
˛ónup
;

68 
r
 = 
	`glfs_öô
(
g
->
fs
);

69 i‡(
r
) {

70 
	`log_îr
("glfs_init failed. Is glusterdÑunning on brick?\n");

71 
˛ónup
;

73 
	`¶ìp
(2);

74 
r
 = 
	`glfs_l°©
(
g
->
fs
, ".", &
sb
);

75 i‡(
r
) {

76 
	`log_îr
("glfs_lstat failed.\n");

77 
˛ónup
;

79 
	`d¥öt
(
FD_FILE
, "fiÿ£tu∞%p\n", 
g
->
fs
);

80 
td
->
io_›s_d©a
 = 
g
;

82 
˛ónup
:

83 i‡(
g
->
fs
)

84 
	`glfs_föi
(
g
->
fs
);

85 
	`‰ì
(
g
);

86 
td
->
io_›s_d©a
 = 
NULL
;

87  
r
;

88 
	}
}

90 
	$fio_gf_˛ónup
(
thªad_d©a
 *
td
)

92 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

94 i‡(
g
) {

95 i‡(
g
->
aio_evíts
)

96 
	`‰ì
(
g
->
aio_evíts
);

97 i‡(
g
->
fd
)

98 
	`glfs_˛o£
(
g
->
fd
);

99 i‡(
g
->
fs
)

100 
	`glfs_föi
(
g
->
fs
);

101 
	`‰ì
(
g
);

102 
td
->
io_›s_d©a
 = 
NULL
;

104 
	}
}

106 
	$fio_gf_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

108 
°©
 
buf
;

109 
ªt
;

110 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

112 
	`d¥öt
(
FD_FILE
, "gë fûêsizê%s\n", 
f
->
fûe_«me
);

114 i‡(!
g
 || !g->
fs
) {

117 i‡(
	`fio_fûe_size_known
(
f
))

120 
ªt
 = 
	`glfs_l°©
(
g
->
fs
, 
f
->
fûe_«me
, &
buf
);

121 i‡(
ªt
 < 0) {

122 
	`log_îr
("glfs_lstat failed.\n");

123  
ªt
;

126 
f
->
ªÆ_fûe_size
 = 
buf
.
°_size
;

127 
	`fio_fûe_£t_size_known
(
f
);

131 
	}
}

133 
	$fio_gf_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

136 
Êags
 = 0;

137 
ªt
 = 0;

138 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

139 
°©
 
sb
 = { 0, };

141 i‡(
	`td_wrôe
(
td
)) {

142 i‡(!
ªad_⁄ly
)

143 
Êags
 = 
O_RDWR
;

144 } i‡(
	`td_ªad
(
td
)) {

145 i‡(!
ªad_⁄ly
)

146 
Êags
 = 
O_RDWR
;

148 
Êags
 = 
O_RDONLY
;

151 i‡(
td
->
o
.
odúe˘
)

152 
Êags
 |
OS_O_DIRECT
;

153 i‡(
td
->
o
.
sync_io
)

154 
Êags
 |
O_SYNC
;

156 
	`d¥öt
(
FD_FILE
, "fiÿfûê%†›í modê%†tdÑw %s\n", 
f
->
fûe_«me
,

157 
Êags
 & 
O_RDONLY
 ? "ro" : "rw", 
	`td_ªad
(
td
) ? "read" : "write");

158 
g
->
fd
 = 
	`glfs_¸ót
(g->
fs
, 
f
->
fûe_«me
, 
Êags
, 0644);

159 i‡(!
g
->
fd
) {

160 
ªt
 = 
î∫o
;

161 
	`log_îr
("glfs_creat failed.\n");

162  
ªt
;

165 i‡(
	`td_ªad
(
td
)) {

166 i‡(
	`glfs_l°©
(
g
->
fs
, 
f
->
fûe_«me
, &
sb
)

167 || 
sb
.
°_size
 < 
f
->
ªÆ_fûe_size
) {

168 
	`d¥öt
(
FD_FILE
, "fiÿexãnd fûê%†‰om %jdÅÿ%" 
PRIu64
 "\n",

169 
f
->
fûe_«me
, (
ötmax_t
Ë
sb
.
°_size
, f->
ªÆ_fûe_size
);

170 
ªt
 = 
	`glfs_·runˇã
(
g
->
fd
, 
f
->
ªÆ_fûe_size
);

171 i‡(
ªt
) {

172 
	`log_îr
("Áûed fiÿexãnd fûê%†tÿ%" 
PRIu64
 "\n",

173 
f
->
fûe_«me
, f->
ªÆ_fûe_size
);

175 
À·
;

176 
bs
;

177 *
b
;

178 
r
;

181 
b
 = 
	`mÆloc
(
td
->
o
.
max_bs
[
DDIR_WRITE
]);

183 
À·
 = 
f
->
ªÆ_fûe_size
;

184 
À·
 && !
td
->
ãrmö©e
) {

185 
bs
 = 
td
->
o
.
max_bs
[
DDIR_WRITE
];

186 i‡(
bs
 > 
À·
)

187 
bs
 = 
À·
;

189 
	`fûl_io_buf„r
(
td
, 
b
, 
bs
, bs);

191 
r
 = 
	`glfs_wrôe
(
g
->
fd
, 
b
, 
bs
, 0);

192 
	`d¥öt
(
FD_IO
,

193 "fiÿwrôê%d o‡%" 
PRIu64
 " file %s\n",

194 
r
, 
f
->
ªÆ_fûe_size
,

195 
f
->
fûe_«me
);

197 i‡(
r
 > 0) {

198 
À·
 -
r
;

201 i‡(
r
 < 0) {

202 
__e
 = 
î∫o
;

204 i‡(
__e
 =
ENOSPC
) {

205 i‡(
td
->
o
.

206 
fûl_devi˚
)

208 
log_öfo


213 
	`td_vîr‹
(
td
, 
î∫o
,

216 
	`td_vîr‹
(
td
, 
EIO
,

223 i‡(
b
)

224 
	`‰ì
(
b
);

225 
	`glfs_l£ek
(
g
->
fd
, 0, 
SEEK_SET
);

227 i‡(
td
->
ãrmö©e
 &&Åd->
o
.
u∆ök
) {

228 
	`d¥öt
(
FD_FILE
, "terminate unlink %s\n",

229 
f
->
fûe_«me
);

230 
	`glfs_u∆ök
(
g
->
fs
, 
f
->
fûe_«me
);

231 } i‡(
td
->
o
.
¸óã_fsync
) {

232 i‡(
	`glfs_fsync
(
g
->
fd
) < 0) {

233 
	`d¥öt
(
FD_FILE
,

235 
f
->
fûe_«me
);

236 
	`td_vîr‹
(
td
, 
î∫o
, "fsync");

237 
	`glfs_˛o£
(
g
->
fd
);

238 
g
->
fd
 = 
NULL
;

245 #i‡
	`deföed
(
GFAPI_USE_FADVISE
)

247 
r
 = 0;

248 i‡(
	`td_øndom
(
td
)) {

249 
r
 = 
	`glfs_Ádvi£
(
g
->
fd
, 0, 
f
->
ªÆ_fûe_size
,

250 
POSIX_FADV_RANDOM
);

252 
r
 = 
	`glfs_Ádvi£
(
g
->
fd
, 0, 
f
->
ªÆ_fûe_size
,

253 
POSIX_FADV_SEQUENTIAL
);

255 i‡(
r
) {

256 
	`d¥öt
(
FD_FILE
, "fiÿ%∞Ádvi£ %†°©u†%d\n", 
g
->
fs
,

257 
f
->
fûe_«me
, 
r
);

261 
	`d¥öt
(
FD_FILE
, "fiÿ%∞¸óãd %s\n", 
g
->
fs
, 
f
->
fûe_«me
);

262 
f
->
fd
 = -1;

263 
f
->
shadow_fd
 = -1;

264 
td
->
o
.
›í_fûes
 ++;

265  
ªt
;

266 
	}
}

268 
	$fio_gf_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

270 
ªt
 = 0;

271 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

273 
	`d¥öt
(
FD_FILE
, "fd clo£ %s\n", 
f
->
fûe_«me
);

275 i‡(
g
) {

276 i‡(
g
->
fd
 && 
	`glfs_˛o£
(g->fd) < 0)

277 
ªt
 = 
î∫o
;

278 
g
->
fd
 = 
NULL
;

281  
ªt
;

282 
	}
}

284 
	$fio_gf_u∆ök_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

286 
ªt
 = 0;

287 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

289 
	`d¥öt
(
FD_FILE
, "fd u∆ök %s\n", 
f
->
fûe_«me
);

291 i‡(
g
) {

292 i‡(
g
->
fd
 && 
	`glfs_˛o£
(g->fd) < 0)

293 
ªt
 = 
î∫o
;

295 
	`glfs_u∆ök
(
g
->
fs
, 
f
->
fûe_«me
);

297 i‡(
g
->
fs
)

298 
	`glfs_föi
(
g
->
fs
);

300 
g
->
fd
 = 
NULL
;

301 
	`‰ì
(
g
);

303 
td
->
io_›s_d©a
 = 
NULL
;

305  
ªt
;

306 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/glusterfs_async.c

7 
	~"gÁpi.h
"

8 
	#NOT_YET
 1

	)

9 
	sfio_gf_iou
 {

10 
io_u
 *
	mio_u
;

11 
	mio_com∂ëe
;

14 
io_u
 *
	$fio_gf_evít
(
thªad_d©a
 *
td
, 
evít
)

16 
gf_d©a
 *gf_d©®
td
->
io_›s_d©a
;

18 
	`d¥öt
(
FD_IO
, "%s\n", 
__FUNCTION__
);

19  
gf_d©a
->
aio_evíts
[
evít
];

20 
	}
}

22 
	$fio_gf_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

23 
max
, c⁄° 
time•ec
 *
t
)

25 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

26 
evíts
 = 0;

27 
io_u
 *io_u;

28 
i
;

30 
	`d¥öt
(
FD_IO
, "%s\n", 
__FUNCTION__
);

32 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

33 
fio_gf_iou
 *
io
;

35 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
))

38 
io
 = 
io_u
->
ígöe_d©a
;

39 i‡(
io
->
io_com∂ëe
) {

40 
io
->
io_com∂ëe
 = 0;

41 
g
->
aio_evíts
[
evíts
] = 
io_u
;

42 
evíts
++;

44 i‡(
evíts
 >
max
)

49 i‡(
evíts
 < 
mö
)

50 
	`u¶ìp
(100);

56  
evíts
;

57 
	}
}

59 
	$fio_gf_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

61 
fio_gf_iou
 *
io
 = 
io_u
->
ígöe_d©a
;

63 i‡(
io
) {

64 i‡(
io
->
io_com∂ëe
)

65 
	`log_îr
("incomplete IO found.\n");

66 
io_u
->
ígöe_d©a
 = 
NULL
;

67 
	`‰ì
(
io
);

69 
	}
}

71 
	$fio_gf_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

73 
	`d¥öt
(
FD_FILE
, "%s\n", 
__FUNCTION__
);

75 i‡(!
io_u
->
ígöe_d©a
) {

76 
fio_gf_iou
 *
io
;

78 
io
 = 
	`mÆloc
((
fio_gf_iou
));

79 i‡(!
io
) {

80 
	`td_vîr‹
(
td
, 
î∫o
, "malloc");

83 
io
->
io_com∂ëe
 = 0;

84 
io
->
io_u
 = io_u;

85 
io_u
->
ígöe_d©a
 = 
io
;

88 
	}
}

90 
	$gf_async_cb
(
glfs_fd_t
 * 
fd
, 
ssize_t
 
ªt
, *
d©a
)

92 
io_u
 *io_u = 
d©a
;

93 
fio_gf_iou
 *
iou
 = 
io_u
->
ígöe_d©a
;

95 
	`d¥öt
(
FD_IO
, "%†ªà%zd\n", 
__FUNCTION__
, 
ªt
);

96 
iou
->
io_com∂ëe
 = 1;

97 
	}
}

99 
	$fio_gf_async_queue
(
thªad_d©a
 
fio_unu£d
 * 
td
,

100 
io_u
 *io_u)

102 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

103 
r
;

105 
	`d¥öt
(
FD_IO
, "%†› %s\n", 
__FUNCTION__
, 
	`io_ddú_«me
(
io_u
->
ddú
));

107 
	`fio_ro_check
(
td
, 
io_u
);

109 i‡(
io_u
->
ddú
 =
DDIR_READ
)

110 
r
 = 
	`glfs_¥ód_async
(
g
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

111 
io_u
->
off£t
, 0, 
gf_async_cb
, io_u);

112 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

113 
r
 = 
	`glfs_pwrôe_async
(
g
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

114 
io_u
->
off£t
, 0, 
gf_async_cb
, io_u);

115 #i‡
	`deföed
(
CONFIG_GF_TRIM
)

116 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

117 
r
 = 
	`glfs_disˇrd_async
(
g
->
fd
, 
io_u
->
off£t
, io_u->
x„r_buÊí
,

118 
gf_async_cb
, 
io_u
);

120 i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
)

121 
r
 = 
	`glfs_fd©async_async
(
g
->
fd
, 
gf_async_cb
, 
io_u
);

122 i‡(
io_u
->
ddú
 =
DDIR_SYNC
)

123 
r
 = 
	`glfs_fsync_async
(
g
->
fd
, 
gf_async_cb
, 
io_u
);

125 
r
 = 
EINVAL
;

127 i‡(
r
) {

128 
	`log_îr
("glfs queue failed.\n");

129 
io_u
->
îr‹
 = 
r
;

130 
Áûed
;

132  
FIO_Q_QUEUED
;

134 
Áûed
:

135 
io_u
->
îr‹
 = 
r
;

136 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

137  
FIO_Q_COMPLETED
;

138 
	}
}

140 
	$fio_gf_async_£tup
(
thªad_d©a
 *
td
)

142 
gf_d©a
 *
g
;

143 
r
;

145 #i‡
	`deföed
(
NOT_YET
)

146 
	`log_îr
("theásync interface is still veryÉxperimental...\n");

148 
r
 = 
	`fio_gf_£tup
(
td
);

149 i‡(
r
)

150  
r
;

152 
td
->
o
.
u£_thªad
 = 1;

153 
g
 = 
td
->
io_›s_d©a
;

154 
g
->
aio_evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

155 i‡(!
g
->
aio_evíts
) {

156 
r
 = -
ENOMEM
;

157 
	`fio_gf_˛ónup
(
td
);

158  
r
;

161  
r
;

162 
	}
}

164 
i€ngöe_›s
 
	gi€ngöe
 = {

165 .
«me
 = "gfapi_async",

166 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

167 .
	göô
 = 
fio_gf_async_£tup
,

168 .
	g˛ónup
 = 
fio_gf_˛ónup
,

169 .
	gqueue
 = 
fio_gf_async_queue
,

170 .
	g›í_fûe
 = 
fio_gf_›í_fûe
,

171 .
	g˛o£_fûe
 = 
fio_gf_˛o£_fûe
,

172 .
	gu∆ök_fûe
 = 
fio_gf_u∆ök_fûe
,

173 .
	ggë_fûe_size
 = 
fio_gf_gë_fûe_size
,

174 .
	ggëevíts
 = 
fio_gf_gëevíts
,

175 .
	gevít
 = 
fio_gf_evít
,

176 .
	gio_u_öô
 = 
fio_gf_io_u_öô
,

177 .
	gio_u_‰ì
 = 
fio_gf_io_u_‰ì
,

178 .
	g›ti⁄s
 = 
gÁpi_›ti⁄s
,

179 .
	g›ti⁄_°ru˘_size
 = (
gf_›ti⁄s
),

180 .
	gÊags
 = 
FIO_DISKLESSIO
,

183 
fio_öô
 
	$fio_gf_ªgi°î
()

185 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

186 
	}
}

188 
fio_exô
 
	$fio_gf_uƒegi°î
()

190 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

191 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/glusterfs_sync.c

8 
	~"gÁpi.h
"

10 
	#LAST_POS
(
f
Ë((f)->
ígöe_pos
)

	)

11 
	$fio_gf_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

13 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

14 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

16 
	`d¥öt
(
FD_FILE
, "fioÖrep\n");

18 i‡(!
	`ddú_rw
(
io_u
->
ddú
))

21 i‡(
	`LAST_POS
(
f
Ë!-1ULL && LAST_POS(fË=
io_u
->
off£t
)

24 i‡(
	`glfs_l£ek
(
g
->
fd
, 
io_u
->
off£t
, 
SEEK_SET
) < 0) {

25 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

30 
	}
}

32 
	$fio_gf_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

34 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

35 
ªt
 = 0;

37 
	`d¥öt
(
FD_FILE
, "fiÿqueuêÀ¿%lu\n", 
io_u
->
x„r_buÊí
);

38 
	`fio_ro_check
(
td
, 
io_u
);

40 i‡(
io_u
->
ddú
 =
DDIR_READ
)

41 
ªt
 = 
	`glfs_ªad
(
g
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 0);

42 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

43 
ªt
 = 
	`glfs_wrôe
(
g
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 0);

44 i‡(
io_u
->
ddú
 =
DDIR_SYNC
)

45 
ªt
 = 
	`glfs_fsync
(
g
->
fd
);

46 i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
)

47 
ªt
 = 
	`glfs_fd©async
(
g
->
fd
);

49 
	`log_îr
("unsupported operation.\n");

50  -
EINVAL
;

52 
	`d¥öt
(
FD_FILE
, "fiÿÀ¿%luÑë %d\n", 
io_u
->
x„r_buÊí
, 
ªt
);

53 i‡(
io_u
->
fûe
 && 
ªt
 >0 && 
	`ddú_rw
(io_u->
ddú
))

54 
	`LAST_POS
(
io_u
->
fûe
Ëio_u->
off£t
 + 
ªt
;

56 i‡(
ªt
 !()
io_u
->
x„r_buÊí
) {

57 i‡(
ªt
 >= 0) {

58 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

59 
io_u
->
îr‹
 = 0;

60  
FIO_Q_COMPLETED
;

62 
io_u
->
îr‹
 = 
î∫o
;

65 i‡(
io_u
->
îr‹
) {

66 
	`log_îr
("IO failed.\n");

67 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

70  
FIO_Q_COMPLETED
;

72 
	}
}

74 
i€ngöe_›s
 
	gi€ngöe
 = {

75 .
«me
 = "gfapi",

76 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

77 .
	göô
 = 
fio_gf_£tup
,

78 .
	g˛ónup
 = 
fio_gf_˛ónup
,

79 .
	g¥ï
 = 
fio_gf_¥ï
,

80 .
	gqueue
 = 
fio_gf_queue
,

81 .
	g›í_fûe
 = 
fio_gf_›í_fûe
,

82 .
	g˛o£_fûe
 = 
fio_gf_˛o£_fûe
,

83 .
	gu∆ök_fûe
 = 
fio_gf_u∆ök_fûe
,

84 .
	ggë_fûe_size
 = 
fio_gf_gë_fûe_size
,

85 .
	g›ti⁄s
 = 
gÁpi_›ti⁄s
,

86 .
	g›ti⁄_°ru˘_size
 = (
gf_›ti⁄s
),

87 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
,

90 
fio_öô
 
	$fio_gf_ªgi°î
()

92 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

93 
	}
}

95 
fio_exô
 
	$fio_gf_uƒegi°î
()

97 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

98 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/guasi.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<î∫o.h
>

15 
	~<as£π.h
>

17 
	~"../fio.h
"

19 
	#GFIO_MIN_THREADS
 32

	)

20 #i‚de‡
GFIO_MAX_THREADS


21 
	#GFIO_MAX_THREADS
 2000

	)

24 
	~<guasi.h
>

25 
	~<guasi_sysˇŒs.h
>

27 #ifde‡
GFIO_DEBUG


28 
	#GDBG_PRINT
(
a
Ë
¥ötf
 
	)
a

30 
	#GDBG_PRINT
(
a
Ë(Ë0

	)

33 
	sguasi_d©a
 {

34 
guasi_t
 
	mh˘x
;

35 
	mmax_ªqs
;

36 
guasi_ªq_t
 *
	mªqs
;

37 
io_u
 **
	mio_us
;

38 
	mqueued_ƒ
;

39 
	mªqs_ƒ
;

42 
	$fio_guasi_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
, 
io_u
 *io_u)

45 
	`GDBG_PRINT
(("fio_guasi_¥ï(%p)\n", 
io_u
));

46 
io_u
->
gªq
 = 
NULL
;

49 
	}
}

51 
io_u
 *
	$fio_guasi_evít
(
thªad_d©a
 *
td
, 
evít
)

53 
guasi_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

54 
io_u
 *io_u;

55 
guasi_ªqöfo
 
röf
;

57 
	`GDBG_PRINT
(("fio_guasi_evít(%d)\n", 
evít
));

58 i‡(
	`guasi_ªq_öfo
(
ld
->
ªqs
[
evít
], &
röf
) < 0) {

59 
	`log_îr
("guasi_ªq_öfo(%dËFAILED!\n", 
evít
);

60  
NULL
;

62 
io_u
 = 
röf
.
asid
;

63 
io_u
->
îr‹
 = 
EINPROGRESS
;

64 
	`GDBG_PRINT
(("fio_guasi_evít(%dË-> %p\n", 
evít
, 
io_u
));

65 i‡(
röf
.
°©us
 =
GUASI_STATUS_COMPLETE
) {

66 
io_u
->
îr‹
 = 
röf
.
ªsu…
;

67 i‡(
io_u
->
ddú
 =
DDIR_READ
 ||

68 
io_u
->
ddú
 =
DDIR_WRITE
) {

69 
io_u
->
îr‹
 = 0;

70 i‡(
röf
.
ªsu…
 !(Ë
io_u
->
x„r_buÊí
) {

71 i‡(
röf
.
ªsu…
 >= 0)

72 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
röf
.
ªsu…
;

74 
io_u
->
îr‹
 = 
röf
.error;

79  
io_u
;

80 
	}
}

82 
	$fio_guasi_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

83 
max
, c⁄° 
time•ec
 *
t
)

85 
guasi_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

86 
n
, 
r
;

87 
timeo
 = -1;

89 
	`GDBG_PRINT
(("fio_guasi_gëevíts(%d, %d)\n", 
mö
, 
max
));

90 i‡(
mö
 > 
ld
->
max_ªqs
)

91 
mö
 = 
ld
->
max_ªqs
;

92 i‡(
max
 > 
ld
->
max_ªqs
)

93 
max
 = 
ld
->
max_ªqs
;

94 i‡(
t
)

95 
timeo
 = 
t
->
tv_£c
 * 1000L +Å->
tv_n£c
 / 1000000L;

96 
n
 = 0;Ç < 
ld
->
ªqs_ƒ
;Ç++)

97 
	`guasi_ªq_‰ì
(
ld
->
ªqs
[
n
]);

98 
n
 = 0;

100 
r
 = 
	`guasi_„tch
(
ld
->
h˘x
,Üd->
ªqs
 + 
n
, 
mö
 -Ç,

101 
max
 - 
n
, 
timeo
);

102 i‡(
r
 < 0) {

103 
	`log_îr
("guasi_„tch(ËFAILED! (%d)\n", 
r
);

106 
n
 +
r
;

107 i‡(
n
 >
mö
)

110 
ld
->
ªqs_ƒ
 = 
n
;

111 
	`GDBG_PRINT
(("fio_guasi_gëevíts(Ë-> %d\n", 
n
));

113  
n
;

114 
	}
}

116 
	$fio_guasi_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

118 
guasi_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

120 
	`fio_ro_check
(
td
, 
io_u
);

122 
	`GDBG_PRINT
(("fio_guasi_queue(%p)\n", 
io_u
));

123 i‡(
ld
->
queued_ƒ
 =(Ë
td
->
o
.
iodïth
)

124  
FIO_Q_BUSY
;

126 
ld
->
io_us
[ld->
queued_ƒ
] = 
io_u
;

127 
ld
->
queued_ƒ
++;

128  
FIO_Q_QUEUED
;

129 
	}
}

131 
	$fio_guasi_queued
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
, 
ƒ
)

133 
i
;

134 
io_u
 *io_u;

135 
time•ec
 
now
;

137 i‡(!
	`fio_fûl_issue_time
(
td
))

140 
	`io_u_m¨k_submô
(
td
, 
ƒ
);

141 
	`fio_gëtime
(&
now
, 
NULL
);

142 
i
 = 0; i < 
ƒ
; i++) {

143 
io_u
 = 
io_us
[
i
];

144 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

145 
	`io_u_queued
(
td
, 
io_u
);

147 
	}
}

149 
	$fio_guasi_commô
(
thªad_d©a
 *
td
)

151 
guasi_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

152 
i
;

153 
io_u
 *io_u;

154 
fio_fûe
 *
f
;

156 
	`GDBG_PRINT
(("fio_guasi_commô(%d)\n", 
ld
->
queued_ƒ
));

157 
i
 = 0; i < 
ld
->
queued_ƒ
; i++) {

158 
io_u
 = 
ld
->
io_us
[
i
];

159 
	`GDBG_PRINT
(("fio_guasi_commô(%dË--> %p\n", 
i
, 
io_u
));

160 
f
 = 
io_u
->
fûe
;

161 
io_u
->
gªq
 = 
NULL
;

162 i‡(
io_u
->
ddú
 =
DDIR_READ
)

163 
io_u
->
gªq
 = 
	`guasi__¥ód
(
ld
->
h˘x
,Üd, io_u, 0,

164 
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

165 
io_u
->
off£t
);

166 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

167 
io_u
->
gªq
 = 
	`guasi__pwrôe
(
ld
->
h˘x
,Üd, io_u, 0,

168 
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

169 
io_u
->
off£t
);

170 i‡(
	`ddú_sync
(
io_u
->
ddú
))

171 
io_u
->
gªq
 = 
	`guasi__fsync
(
ld
->
h˘x
,Üd, io_u, 0, 
f
->
fd
);

173 
	`log_îr
("fio_guasi_commit() FAILED: unknowÑequest %d\n",

174 
io_u
->
ddú
);

176 i‡(
io_u
->
gªq
 =
NULL
) {

177 
	`log_îr
("fio_guasi_commit() FAILED: submit failed (%s)\n",

178 
	`°ªº‹
(
î∫o
));

182 
	`fio_guasi_queued
(
td
, 
ld
->
io_us
, 
i
);

183 
ld
->
queued_ƒ
 = 0;

184 
	`GDBG_PRINT
(("fio_guasi_commô(Ë-> %d\n", 
i
));

187 
	}
}

189 
	$fio_guasi_ˇn˚l
(
thªad_d©a
 
fio_unu£d
 *
td
,

190 
io_u
 *io_u)

192 
	`GDBG_PRINT
(("fio_guasi_ˇn˚l(%pËªq=%p\n", 
io_u
, io_u->
gªq
));

193 i‡(
io_u
->
gªq
 !
NULL
)

194 
	`guasi_ªq_ˇn˚l
(
io_u
->
gªq
);

197 
	}
}

199 
	$fio_guasi_˛ónup
(
thªad_d©a
 *
td
)

201 
guasi_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

202 
n
;

204 
	`GDBG_PRINT
(("fio_guasi_˛ónup(%p)\n", 
ld
));

205 i‡(
ld
) {

206 
n
 = 0;Ç < 
ld
->
ªqs_ƒ
;Ç++)

207 
	`guasi_ªq_‰ì
(
ld
->
ªqs
[
n
]);

208 
	`guasi_‰ì
(
ld
->
h˘x
);

209 
	`‰ì
(
ld
->
ªqs
);

210 
	`‰ì
(
ld
->
io_us
);

211 
	`‰ì
(
ld
);

213 
	`GDBG_PRINT
(("fio_guasi_˛ónup(%pËDONE\n", 
ld
));

214 
	}
}

216 
	$fio_guasi_öô
(
thªad_d©a
 *
td
)

218 
maxthr
;

219 
guasi_d©a
 *
ld
 = 
	`mÆloc
((*ld));

221 
	`GDBG_PRINT
(("fio_guasi_öô(): dïth=%d\n", 
td
->
o
.
iodïth
));

222 
	`mem£t
(
ld
, 0, (*ld));

223 
maxthr
 = 
td
->
o
.
iodïth
 > 
GFIO_MIN_THREADS
 ?Åd->o.iodepth: GFIO_MIN_THREADS;

224 i‡(
maxthr
 > 
GFIO_MAX_THREADS
)

225 
maxthr
 = 
GFIO_MAX_THREADS
;

226 i‡((
ld
->
h˘x
 = 
	`guasi_¸óã
(
GFIO_MIN_THREADS
, 
maxthr
, 1)Ë=
NULL
) {

227 
	`td_vîr‹
(
td
, 
î∫o
, "guasi_create");

228 
	`‰ì
(
ld
);

231 
ld
->
max_ªqs
 = 
td
->
o
.
iodïth
;

232 
ld
->
ªqs
 = 
	`mÆloc
÷d->
max_ªqs
 * (
guasi_ªq_t
));

233 
ld
->
io_us
 = 
	`mÆloc
÷d->
max_ªqs
 * (
io_u
 *));

234 
	`mem£t
(
ld
->
io_us
, 0,Üd->
max_ªqs
 * (
io_u
 *));

235 
ld
->
queued_ƒ
 = 0;

236 
ld
->
ªqs_ƒ
 = 0;

238 
td
->
io_›s_d©a
 = 
ld
;

239 
	`GDBG_PRINT
(("fio_guasi_öô(): dïth=%d -> %p\n", 
td
->
o
.
iodïth
, 
ld
));

242 
	}
}

244 
i€ngöe_›s
 
	gi€ngöe
 = {

245 .
«me
 = "guasi",

246 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

247 .
	göô
 = 
fio_guasi_öô
,

248 .
	g¥ï
 = 
fio_guasi_¥ï
,

249 .
	gqueue
 = 
fio_guasi_queue
,

250 .
	gcommô
 = 
fio_guasi_commô
,

251 .
	gˇn˚l
 = 
fio_guasi_ˇn˚l
,

252 .
	ggëevíts
 = 
fio_guasi_gëevíts
,

253 .
	gevít
 = 
fio_guasi_evít
,

254 .
	g˛ónup
 = 
fio_guasi_˛ónup
,

255 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

256 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

257 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

260 
fio_öô
 
	$fio_guasi_ªgi°î
()

262 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

263 
	}
}

265 
fio_exô
 
	$fio_guasi_uƒegi°î
()

267 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

268 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/libaio.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<î∫o.h
>

11 
	~<as£π.h
>

12 
	~<libaio.h
>

14 
	~"../fio.h
"

15 
	~"../lib/pow2.h
"

16 
	~"../›tgroup.h
"

18 
fio_libaio_commô
(
thªad_d©a
 *
td
);

20 
	slibaio_d©a
 {

21 
io_c⁄ãxt_t
 
	maio_˘x
;

22 
io_evít
 *
	maio_evíts
;

23 
iocb
 **
	miocbs
;

24 
io_u
 **
	mio_us
;

34 
	mis_pow2
;

35 
	míåõs
;

36 
	mqueued
;

37 
	mhód
;

38 
	mèû
;

41 
	slibaio_›ti⁄s
 {

42 *
	m∑d
;

43 
	mu£r•a˚_ª≠
;

46 
fio_›ti⁄
 
	g›ti⁄s
[] = {

48 .
«me
 = "userspace_reap",

49 .
	g ame
 = "Libaio userspaceÑeaping",

50 .
	gty≥
 = 
FIO_OPT_STR_SET
,

51 .
	goff1
 = 
off£tof
(
libaio_›ti⁄s
, 
u£r•a˚_ª≠
),

52 .
	ghñp
 = "Useálternative user-spaceÑeap implementation",

53 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

54 .
	ggroup
 = 
FIO_OPT_G_LIBAIO
,

57 .
	g«me
 = 
NULL
,

61 
ölöe
 
	$rög_öc
(
libaio_d©a
 *
ld
, *
vÆ
,

62 
add
)

64 i‡(
ld
->
is_pow2
)

65 *
vÆ
 = (*vÆ + 
add
Ë& (
ld
->
íåõs
 - 1);

67 *
vÆ
 = (*vÆ + 
add
Ë% 
ld
->
íåõs
;

68 
	}
}

70 
	$fio_libaio_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
, 
io_u
 *io_u)

72 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

74 i‡(
io_u
->
ddú
 =
DDIR_READ
)

75 
	`io_¥ï_¥ód
(&
io_u
->
iocb
, 
f
->
fd
, io_u->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

76 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

77 
	`io_¥ï_pwrôe
(&
io_u
->
iocb
, 
f
->
fd
, io_u->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

78 i‡(
	`ddú_sync
(
io_u
->
ddú
))

79 
	`io_¥ï_fsync
(&
io_u
->
iocb
, 
f
->
fd
);

82 
	}
}

84 
io_u
 *
	$fio_libaio_evít
(
thªad_d©a
 *
td
, 
evít
)

86 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

87 
io_evít
 *
ev
;

88 
io_u
 *io_u;

90 
ev
 = 
ld
->
aio_evíts
 + 
evít
;

91 
io_u
 = 
	`c⁄èöî_of
(
ev
->
obj
, io_u, 
iocb
);

93 i‡(
ev
->
ªs
 !
io_u
->
x„r_buÊí
) {

94 i‡(
ev
->
ªs
 > 
io_u
->
x„r_buÊí
)

95 
io_u
->
îr‹
 = -
ev
->
ªs
;

97 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ev
->
ªs
;

99 
io_u
->
îr‹
 = 0;

101  
io_u
;

102 
	}
}

104 
	saio_rög
 {

105 
	mid
;

106 
	mƒ
;

107 
	mhód
;

108 
	mèû
;

110 
	mmagic
;

111 
	mcom∑t_„©uªs
;

112 
	möcom∑t_„©uªs
;

113 
	mhódî_Àngth
;

115 
io_evít
 
	mevíts
[0];

118 
	#AIO_RING_MAGIC
 0xa10a10a1

	)

120 
	$u£r_io_gëevíts
(
io_c⁄ãxt_t
 
aio_˘x
, 
max
,

121 
io_evít
 *
evíts
)

123 
i
 = 0;

124 
hód
;

125 
aio_rög
 *
rög
 = (aio_rög*Ë
aio_˘x
;

127 
i
 < 
max
) {

128 
hód
 = 
rög
->head;

130 i‡(
hód
 =
rög
->
èû
) {

135 
evíts
[
i
] = 
rög
->evíts[
hód
];

136 
	`ªad_b¨rõr
();

137 
rög
->
hód
 = (hód + 1Ë%Ñög->
ƒ
;

138 
i
++;

142  
i
;

143 
	}
}

145 
	$fio_libaio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

146 
max
, c⁄° 
time•ec
 *
t
)

148 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

149 
libaio_›ti⁄s
 *
o
 = 
td
->
eo
;

150 
a˘uÆ_mö
 = 
td
->
o
.
iodïth_b©ch_com∂ëe_mö
 =0 ? 0 : 
mö
;

151 
time•ec
 
__…
, *
…
 = 
NULL
;

152 
r
, 
evíts
 = 0;

154 i‡(
t
) {

155 
__…
 = *
t
;

156 
…
 = &
__…
;

160 i‡(
o
->
u£r•a˚_ª≠
 == 1

161 && 
a˘uÆ_mö
 == 0

162 && ((
aio_rög
 *)(
ld
->
aio_˘x
))->
magic


163 =
AIO_RING_MAGIC
) {

164 
r
 = 
	`u£r_io_gëevíts
(
ld
->
aio_˘x
, 
max
,

165 
ld
->
aio_evíts
 + 
evíts
);

167 
r
 = 
	`io_gëevíts
(
ld
->
aio_˘x
, 
a˘uÆ_mö
,

168 
max
, 
ld
->
aio_evíts
 + 
evíts
, 
…
);

170 i‡(
r
 > 0)

171 
evíts
 +
r
;

172 i‡((
mö
 && 
r
 =0Ë||Ñ =-
EAGAIN
) {

173 
	`fio_libaio_commô
(
td
);

174 
	`u¶ìp
(100);

175 } i‡(
r
 !-
EINTR
)

177 } 
evíts
 < 
mö
);

179  
r
 < 0 ?Ñ : 
evíts
;

180 
	}
}

182 
	$fio_libaio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

184 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

186 
	`fio_ro_check
(
td
, 
io_u
);

188 i‡(
ld
->
queued
 =
td
->
o
.
iodïth
)

189  
FIO_Q_BUSY
;

197 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

198 i‡(
ld
->
queued
)

199  
FIO_Q_BUSY
;

201 
	`do_io_u_sync
(
td
, 
io_u
);

202  
FIO_Q_COMPLETED
;

205 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

206 i‡(
ld
->
queued
)

207  
FIO_Q_BUSY
;

209 
	`do_io_u_åim
(
td
, 
io_u
);

210  
FIO_Q_COMPLETED
;

213 
ld
->
iocbs
[ld->
hód
] = &
io_u
->
iocb
;

214 
ld
->
io_us
[ld->
hód
] = 
io_u
;

215 
	`rög_öc
(
ld
, &ld->
hód
, 1);

216 
ld
->
queued
++;

217  
FIO_Q_QUEUED
;

218 
	}
}

220 
	$fio_libaio_queued
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

221 
ƒ
)

223 
time•ec
 
now
;

224 
i
;

226 i‡(!
	`fio_fûl_issue_time
(
td
))

229 
	`fio_gëtime
(&
now
, 
NULL
);

231 
i
 = 0; i < 
ƒ
; i++) {

232 
io_u
 *io_u = 
io_us
[
i
];

234 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

235 
	`io_u_queued
(
td
, 
io_u
);

237 
	}
}

239 
	$fio_libaio_commô
(
thªad_d©a
 *
td
)

241 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

242 
iocb
 **
iocbs
;

243 
io_u
 **
io_us
;

244 
time•ec
 
ts
;

245 
ªt
, 
waô_°¨t
 = 0;

247 i‡(!
ld
->
queued
)

251 
ƒ
 = 
ld
->
queued
;

253 
ƒ
 = 
	`mö
((Ëƒ, 
ld
->
íåõs
 -Üd->
èû
);

254 
io_us
 = 
ld
->io_u†+Üd->
èû
;

255 
iocbs
 = 
ld
->iocb†+Üd->
èû
;

257 
ªt
 = 
	`io_submô
(
ld
->
aio_˘x
, 
ƒ
, 
iocbs
);

258 i‡(
ªt
 > 0) {

259 
	`fio_libaio_queued
(
td
, 
io_us
, 
ªt
);

260 
	`io_u_m¨k_submô
(
td
, 
ªt
);

262 
ld
->
queued
 -
ªt
;

263 
	`rög_öc
(
ld
, &ld->
èû
, 
ªt
);

264 
ªt
 = 0;

265 
waô_°¨t
 = 0;

266 } i‡(
ªt
 =-
EINTR
 || !ret) {

267 i‡(!
ªt
)

268 
	`io_u_m¨k_submô
(
td
, 
ªt
);

269 
waô_°¨t
 = 0;

271 } i‡(
ªt
 =-
EAGAIN
) {

280 i‡(
ld
->
queued
) {

281 
ªt
 = 0;

284 i‡(!
waô_°¨t
) {

285 
	`fio_gëtime
(&
ts
, 
NULL
);

286 
waô_°¨t
 = 1;

287 } i‡(
	`mtime_sö˚_now
(&
ts
) > 30000) {

288 
	`log_îr
("fio:áioáppearsÅo be stalled, giving up\n");

291 
	`u¶ìp
(1);

293 } i‡(
ªt
 =-
ENOMEM
) {

299 i‡(
ld
->
queued
)

300 
ªt
 = 0;

304 } 
ld
->
queued
);

306  
ªt
;

307 
	}
}

309 
	$fio_libaio_ˇn˚l
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

311 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

313  
	`io_ˇn˚l
(
ld
->
aio_˘x
, &
io_u
->
iocb
,Üd->
aio_evíts
);

314 
	}
}

316 
	$fio_libaio_˛ónup
(
thªad_d©a
 *
td
)

318 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

320 i‡(
ld
) {

327 i‡(!(
td
->
Êags
 & 
TD_F_CHILD
))

328 
	`io_de°roy
(
ld
->
aio_˘x
);

329 
	`‰ì
(
ld
->
aio_evíts
);

330 
	`‰ì
(
ld
->
iocbs
);

331 
	`‰ì
(
ld
->
io_us
);

332 
	`‰ì
(
ld
);

334 
	}
}

336 
	$fio_libaio_öô
(
thªad_d©a
 *
td
)

338 
libaio_›ti⁄s
 *
o
 = 
td
->
eo
;

339 
libaio_d©a
 *
ld
;

340 
îr
 = 0;

342 
ld
 = 
	`ˇŒoc
(1, (*ld));

349 i‡(!
o
->
u£r•a˚_ª≠
)

350 
îr
 = 
	`io_queue_öô
(
INT_MAX
, &
ld
->
aio_˘x
);

351 i‡(
o
->
u£r•a˚_ª≠
 || 
îr
 =-
EINVAL
)

352 
îr
 = 
	`io_queue_öô
(
td
->
o
.
iodïth
, &
ld
->
aio_˘x
);

353 i‡(
îr
) {

354 
	`td_vîr‹
(
td
, -
îr
, "io_queue_init");

355 
	`log_îr
("fio: check /proc/sys/fs/aio-max-nr\n");

356 
	`‰ì
(
ld
);

360 
ld
->
íåõs
 = 
td
->
o
.
iodïth
;

361 
ld
->
is_pow2
 = 
	`is_powî_of_2
÷d->
íåõs
);

362 
ld
->
aio_evíts
 = 
	`ˇŒoc
÷d->
íåõs
, (
io_evít
));

363 
ld
->
iocbs
 = 
	`ˇŒoc
÷d->
íåõs
, (
iocb
 *));

364 
ld
->
io_us
 = 
	`ˇŒoc
÷d->
íåõs
, (
io_u
 *));

366 
td
->
io_›s_d©a
 = 
ld
;

368 
	}
}

370 
i€ngöe_›s
 
	gi€ngöe
 = {

371 .
«me
 = "libaio",

372 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

373 .
	göô
 = 
fio_libaio_öô
,

374 .
	g¥ï
 = 
fio_libaio_¥ï
,

375 .
	gqueue
 = 
fio_libaio_queue
,

376 .
	gcommô
 = 
fio_libaio_commô
,

377 .
	gˇn˚l
 = 
fio_libaio_ˇn˚l
,

378 .
	ggëevíts
 = 
fio_libaio_gëevíts
,

379 .
	gevít
 = 
fio_libaio_evít
,

380 .
	g˛ónup
 = 
fio_libaio_˛ónup
,

381 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

382 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

383 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

384 .
	g›ti⁄s
 = 
›ti⁄s
,

385 .
	g›ti⁄_°ru˘_size
 = (
libaio_›ti⁄s
),

388 
fio_öô
 
	$fio_libaio_ªgi°î
()

390 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

391 
	}
}

393 
fio_exô
 
	$fio_libaio_uƒegi°î
()

395 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

396 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/libhdfs.c

14 
	~<m©h.h
>

15 
	~<hdfs.h
>

17 
	~"../fio.h
"

18 
	~"../›tgroup.h
"

20 
	#CHUNCK_NAME_LENGTH_MAX
 80

	)

21 
	#CHUNCK_CREATION_BUFFER_SIZE
 65536

	)

23 
	shdfsio_d©a
 {

24 
hdfsFS
 
	mfs
;

25 
hdfsFûe
 
	mÂ
;

26 
uöt64_t
 
	mcuº_fûe_id
;

29 
	shdfsio_›ti⁄s
 {

30 *
	m∑d
;

31 *
	mho°
;

32 *
	mdúe˘‹y
;

33 
	mp‹t
;

34 
	mchunck_size
;

35 
	msögÀ_ö°™˚
;

36 
	mu£_dúe˘
;

39 
fio_›ti⁄
 
	g›ti⁄s
[] = {

41 .
«me
 = "namenode",

42 .
	g ame
 = "hfdsÇamenode",

43 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

44 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
ho°
),

45 .
	gdef
 = "localhost",

46 .
	ghñp
 = "Namenode ofÅhe HDFS cluster",

47 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

48 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

51 .
	g«me
 = "hostname",

52 .
	g ame
 = "hfdsÇamenode",

53 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

54 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
ho°
),

55 .
	gdef
 = "localhost",

56 .
	ghñp
 = "Namenode ofÅhe HDFS cluster",

57 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

58 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

61 .
	g«me
 = "port",

62 .
	g ame
 = "hdfsÇamenodeÖort",

63 .
	gty≥
 = 
FIO_OPT_INT
,

64 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
p‹t
),

65 .
	gdef
 = "9000",

66 .
	gmövÆ
 = 1,

67 .
	gmaxvÆ
 = 65535,

68 .
	ghñp
 = "Port used byÅhe HDFS clusterÇamenode",

69 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

70 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

73 .
	g«me
 = "hdfsdirectory",

74 .
	g ame
 = "hfds directory",

75 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

76 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
dúe˘‹y
),

77 .
	gdef
 = "/",

78 .
	ghñp
 = "The HDFS directory where fio will create chuncks",

79 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

80 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

83 .
	g«me
 = "chunk_size",

84 .
	gÆüs
 = "chunck_size",

85 .
	g ame
 = "Chunk size",

86 .
	gty≥
 = 
FIO_OPT_INT
,

87 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
chunck_size
),

88 .
	gdef
 = "1048576",

89 .
	ghñp
 = "Size of individual chunck",

90 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

91 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

94 .
	g«me
 = "single_instance",

95 .
	g ame
 = "Single Instance",

96 .
	gty≥
 = 
FIO_OPT_BOOL
,

97 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
sögÀ_ö°™˚
),

98 .
	gdef
 = "1",

99 .
	ghñp
 = "Useá single instance",

100 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

101 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

104 .
	g«me
 = "hdfs_use_direct",

105 .
	g ame
 = "HDFS Use Direct",

106 .
	gty≥
 = 
FIO_OPT_BOOL
,

107 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
u£_dúe˘
),

108 .
	gdef
 = "0",

109 .
	ghñp
 = "UseÑeadDirect instead of hdfsRead",

110 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

111 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

114 .
	g«me
 = 
NULL
,

119 
	$gë_chunck_«me
(*
de°
, *
fûe_«me
, 
uöt64_t
 
chunk_id
) {

120  
	`¢¥ötf
(
de°
, 
CHUNCK_NAME_LENGTH_MAX
, "%s_%lu", 
fûe_«me
, 
chunk_id
);

121 
	}
}

123 
	$fio_hdfsio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

125 
hdfsio_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

126 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

127 
f_id
;

128 
‚ame
[
CHUNCK_NAME_LENGTH_MAX
];

129 
›í_Êags
;

132 
f_id
 = 
	`Êo‹
(
io_u
->
off£t
 / 
›ti⁄s
-> 
chunck_size
);

134 i‡(
f_id
 =
hd
->
cuº_fûe_id
) {

139 i‡(
hd
->
cuº_fûe_id
 != -1) {

140 i‡–
	`hdfsClo£Fûe
(
hd
->
fs
, hd->
Â
) == -1) {

141 
	`log_îr
("hdfs: u«bÀÅÿ˛o£ fûe: %s\n", 
	`°ªº‹
(
î∫o
));

142  
î∫o
;

144 
hd
->
cuº_fûe_id
 = -1;

147 i‡(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_SYNC
) {

148 
›í_Êags
 = 
O_RDONLY
;

149 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

150 
›í_Êags
 = 
O_WRONLY
;

152 
	`log_îr
("hdfs: Invalid I/O Operation\n");

156 
	`gë_chunck_«me
(
‚ame
, 
io_u
->
fûe
->
fûe_«me
, 
f_id
);

157 
hd
->
Â
 = 
	`hdfsO≥nFûe
(hd->
fs
, 
‚ame
, 
›í_Êags
, 0, 0,

158 
›ti⁄s
->
chunck_size
);

159 if(
hd
->
Â
 =
NULL
) {

160 
	`log_îr
("hdfs: u«bÀÅÿ›í fûe: %s: %d\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

161  
î∫o
;

163 
hd
->
cuº_fûe_id
 = 
f_id
;

166 
	}
}

168 
	$fio_hdfsio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

170 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

171 
hdfsio_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

172 
ªt
;

173 
off£t
;

175 
off£t
 = 
io_u
->off£à% 
›ti⁄s
->
chunck_size
;

177 if–(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_WRITE
) &&

178 
	`hdfsTñl
(
hd
->
fs
, hd->
Â
Ë!
off£t
 && 
	`hdfsSìk
(hd->fs, hd->fp, offset) != 0 ) {

179 
	`log_îr
("hdfs: sìk faûed: %s,áª you doögÑ™dom wrôêsmÆÀ∏th™ chunck sizê?\n", 
	`°ªº‹
(
î∫o
));

180 
io_u
->
îr‹
 = 
î∫o
;

181  
FIO_Q_COMPLETED
;

185 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

186 i‡(
›ti⁄s
->
u£_dúe˘
) {

187 
ªt
 = 
	`ªadDúe˘
(
hd
->
fs
, hd->
Â
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

189 
ªt
 = 
	`hdfsRód
(
hd
->
fs
, hd->
Â
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

191 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

192 
ªt
 = 
	`hdfsWrôe
(
hd
->
fs
, hd->
Â
, 
io_u
->
x„r_buf
,

193 
io_u
->
x„r_buÊí
);

194 } i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

195 
ªt
 = 
	`hdfsFlush
(
hd
->
fs
, hd->
Â
);

197 
	`log_îr
("hdfs: InvÆid I/O O≥øti⁄: %d\n", 
io_u
->
ddú
);

198 
ªt
 = 
EINVAL
;

202 i‡(
ªt
 !()
io_u
->
x„r_buÊí
) {

203 i‡(
ªt
 >= 0) {

204 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

205 
io_u
->
îr‹
 = 0;

206  
FIO_Q_COMPLETED
;

208 
io_u
->
îr‹
 = 
î∫o
;

212 i‡(
io_u
->
îr‹
)

213 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

215  
FIO_Q_COMPLETED
;

216 
	}
}

218 
	$fio_hdfsio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

220 i‡(
td
->
o
.
odúe˘
) {

221 
td
->
îr‹
 = 
EINVAL
;

226 
	}
}

228 
	$fio_hdfsio_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

230 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

232 i‡(
hd
->
cuº_fûe_id
 != -1) {

233 i‡–
	`hdfsClo£Fûe
(
hd
->
fs
, hd->
Â
) == -1) {

234 
	`log_îr
("hdfs: u«bÀÅÿ˛o£ fûe: %s\n", 
	`°ªº‹
(
î∫o
));

235  
î∫o
;

237 
hd
->
cuº_fûe_id
 = -1;

240 
	}
}

242 
	$fio_hdfsio_öô
(
thªad_d©a
 *
td
)

244 
hdfsio_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

245 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

246 
fio_fûe
 *
f
;

247 
uöt64_t
 
j
,
k
;

248 
i
, 
Áûuª
 = 0;

249 
uöt8_t
 
buf„r
[
CHUNCK_CREATION_BUFFER_SIZE
];

250 
uöt64_t
 
byãs_À·
;

251 
‚ame
[
CHUNCK_NAME_LENGTH_MAX
];

252 
hdfsFûe
 
Â
;

253 
hdfsFûeInfo
 *
fi
;

254 
tOff£t
 
fi_size
;

256 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

257 
k
 = 0;

258 
j
=0; j < 
f
->
ªÆ_fûe_size
; j +
›ti⁄s
->
chunck_size
) {

259 
	`gë_chunck_«me
(
‚ame
, 
f
->
fûe_«me
, 
k
++);

260 
fi
 = 
	`hdfsGëP©hInfo
(
hd
->
fs
, 
‚ame
);

261 
fi_size
 = 
fi
 ? fi->
mSize
 : 0;

263 if–
fi
 && 
fi_size
 >
›ti⁄s
->
chunck_size
) {

266 
Â
 = 
	`hdfsO≥nFûe
(
hd
->
fs
, 
‚ame
, 
O_WRONLY
, 0, 0,

267 
›ti⁄s
->
chunck_size
);

268 if(
Â
 =
NULL
) {

269 
Áûuª
 = 
î∫o
;

270 
	`log_îr
("hdfs: u«bÀÅÿ¥ï¨êfûêchunk %s: %s\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

273 
byãs_À·
 = 
›ti⁄s
->
chunck_size
;

274 
	`mem£t
(
buf„r
, 0, 
CHUNCK_CREATION_BUFFER_SIZE
);

275  
byãs_À·
 > 
CHUNCK_CREATION_BUFFER_SIZE
) {

276 if–
	`hdfsWrôe
(
hd
->
fs
, 
Â
, 
buf„r
, 
CHUNCK_CREATION_BUFFER_SIZE
)

277 !
CHUNCK_CREATION_BUFFER_SIZE
) {

278 
Áûuª
 = 
î∫o
;

279 
	`log_îr
("hdfs: u«bÀÅÿ¥ï¨êfûêchunk %s: %s\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

282 
byãs_À·
 -
CHUNCK_CREATION_BUFFER_SIZE
;

284 if(
byãs_À·
 > 0) {

285 if–
	`hdfsWrôe
(
hd
->
fs
, 
Â
, 
buf„r
, 
byãs_À·
)

286 !
byãs_À·
) {

287 
Áûuª
 = 
î∫o
;

291 if–
	`hdfsClo£Fûe
(
hd
->
fs
, 
Â
) != 0) {

292 
Áûuª
 = 
î∫o
;

293 
	`log_îr
("hdfs: u«bÀÅÿ¥ï¨êfûêchunk %s: %s\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

297 if(
Áûuª
) {

302 if–!
Áûuª
 ) {

303 
	`fio_fûe_£t_size_known
(
f
);

306  
Áûuª
;

307 
	}
}

309 
	$fio_hdfsio_£tup
(
thªad_d©a
 *
td
)

311 
hdfsio_d©a
 *
hd
;

312 
fio_fûe
 *
f
;

313 
i
;

314 
uöt64_t
 
fûe_size
, 
tŸÆ_fûe_size
;

316 i‡(!
td
->
io_›s_d©a
) {

317 
hd
 = 
	`mÆloc
((*hd));

318 
	`mem£t
(
hd
, 0, (*hd));

320 
hd
->
cuº_fûe_id
 = -1;

322 
td
->
io_›s_d©a
 = 
hd
;

325 
tŸÆ_fûe_size
 = 0;

326 
fûe_size
 = 0;

328 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

329 if(!
td
->
o
.
fûe_size_low
) {

330 
fûe_size
 = 
	`Êo‹
(
td
->
o
.
size
 /Åd->o.
ƒ_fûes
);

331 
tŸÆ_fûe_size
 +
fûe_size
;

333 i‡(
td
->
o
.
fûe_size_low
 =td->o.
fûe_size_high
)

334 
fûe_size
 = 
td
->
o
.
fûe_size_low
;

336 
fûe_size
 = 
	`gë_ønd_fûe_size
(
td
);

338 
f
->
ªÆ_fûe_size
 = 
fûe_size
;

344 i‡(!
td
->
o
.
fûe_size_low
 && 
tŸÆ_fûe_size
 <Åd->o.
size
) {

345 
f
->
ªÆ_fûe_size
 +(
td
->
o
.
size
 - 
tŸÆ_fûe_size
);

349 
	}
}

351 
	$fio_hdfsio_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

353 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

354 
hdfsio_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

355 
Áûuª
;

356 
hdfsBuûdî
 *
bld
;

358 i‡(
›ti⁄s
->
ho°
 =
NULL
 || o±i⁄s->
p‹t
 == 0) {

359 
	`log_îr
("hdfs: serverÇot defined\n");

360  
EINVAL
;

363 
bld
 = 
	`hdfsNewBuûdî
();

364 i‡(!
bld
) {

365 
Áûuª
 = 
î∫o
;

366 
	`log_îr
("hdfs: unableÅoállocate connect builder\n");

367  
Áûuª
;

369 
	`hdfsBuûdîSëNameNode
(
bld
, 
›ti⁄s
->
ho°
);

370 
	`hdfsBuûdîSëNameNodeP‹t
(
bld
, 
›ti⁄s
->
p‹t
);

371 if(! 
›ti⁄s
->
sögÀ_ö°™˚
) {

372 
	`hdfsBuûdîSëF‹˚NewIn°™˚
(
bld
);

374 
hd
->
fs
 = 
	`hdfsBuûdîC⁄√˘
(
bld
);

377 i‡(
	`hdfsExi°s
(
hd
->
fs
, 
›ti⁄s
->
dúe˘‹y
Ë< 0 || 
	`hdfsSëW‹kögDúe˘‹y
(hd->fs, options->directory) < 0) {

378 
Áûuª
 = 
î∫o
;

379 
	`log_îr
("hdfs: invÆid w‹kög dúe˘‹y %s: %s\n", 
›ti⁄s
->
dúe˘‹y
, 
	`°ªº‹
(
î∫o
));

380  
Áûuª
;

384 
	}
}

386 
	$fio_hdfsio_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

388 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

390 i‡(
hd
->
fs
 && 
	`hdfsDisc⁄√˘
(hd->fs) < 0) {

391 
	`log_îr
("hdfs: disc⁄√˘ faûed: %d\n", 
î∫o
);

393 
	}
}

395 
i€ngöe_›s
 
	gi€ngöe_hdfs
 = {

396 .
«me
 = "libhdfs",

397 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

398 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NODISKUTIL
,

399 .
	g£tup
 = 
fio_hdfsio_£tup
,

400 .
	göô
 = 
fio_hdfsio_öô
,

401 .
	g¥ï
 = 
fio_hdfsio_¥ï
,

402 .
	gqueue
 = 
fio_hdfsio_queue
,

403 .
	g›í_fûe
 = 
fio_hdfsio_›í_fûe
,

404 .
	g˛o£_fûe
 = 
fio_hdfsio_˛o£_fûe
,

405 .
	gio_u_öô
 = 
fio_hdfsio_io_u_öô
,

406 .
	gio_u_‰ì
 = 
fio_hdfsio_io_u_‰ì
,

407 .
	g›ti⁄_°ru˘_size
 = (
hdfsio_›ti⁄s
),

408 .
	g›ti⁄s
 = 
›ti⁄s
,

412 
fio_öô
 
	$fio_hdfsio_ªgi°î
()

414 
	`ªgi°î_i€ngöe
(&
i€ngöe_hdfs
);

415 
	}
}

417 
fio_exô
 
	$fio_hdfsio_uƒegi°î
()

419 
	`uƒegi°î_i€ngöe
(&
i€ngöe_hdfs
);

420 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/libpmem.c

53 
	~<°dio.h
>

54 
	~<limôs.h
>

55 
	~<°dlib.h
>

56 
	~<uni°d.h
>

57 
	~<î∫o.h
>

58 
	~<sys/mm™.h
>

59 
	~<sys/°©.h
>

60 
	~<sys/sysma¸os.h
>

61 
	~<libgí.h
>

62 
	~<libpmem.h
>

64 
	~"../fio.h
"

65 
	~"../vîify.h
"

71 
	#MMAP_TOTAL_SZ
 (1 * 1024 * 1024 * 1024UL)

	)

73 
	sfio_libpmem_d©a
 {

74 *
	mlibpmem_±r
;

75 
size_t
 
	mlibpmem_sz
;

76 
off_t
 
	mlibpmem_off
;

79 
	#MEGABYTE
 ((
uöçå_t
)1 << 20)

	)

80 
	#GIGABYTE
 ((
uöçå_t
)1 << 30)

	)

81 
	#PROCMAXLEN
 2048

	)

82 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

84 
boﬁ
 
	gMm≠_no_øndom
;

85 *
	gMm≠_höt
;

86 
	gMm≠_Æign
;

94 
ölöe
 
size_t
 
	$utû_m≠_höt_Æign
(
size_t
 
Àn
, size_à
ªq_Æign
)

96 
size_t
 
Æign
 = 
Mm≠_Æign
;

98 
	`d¥öt
(
FD_IO
, "DEBUG util_map_hint_align\n" );

100 i‡(
ªq_Æign
)

101 
Æign
 = 
ªq_Æign
;

102 i‡(
Àn
 >2 * 
GIGABYTE
)

103 
Æign
 = 
GIGABYTE
;

104 i‡(
Àn
 >4 * 
MEGABYTE
)

105 
Æign
 = 2 * 
MEGABYTE
;

107 
	`d¥öt
(
FD_IO
, "Æign=%d\n", ()
Æign
);

108  
Æign
;

109 
	}
}

111 #ifde‡
__FªeBSD__


112 c⁄° *
	gssˇnf_os
 = "%p %p";

113 
	#MAP_NORESERVE
 0

	)

114 
	#OS_MAPFILE
 "/¥oc/cuΩroc/m≠"

	)

116 c⁄° *
	gssˇnf_os
 = "%p-%p";

117 
	#OS_MAPFILE
 "/¥oc/£lf/m≠s"

	)

134 *
	$utû_m≠_höt_unu£d
(*
möaddr
, 
size_t
 
Àn
, size_à
Æign
)

136 *
lo
 = 
NULL
;

137 *
hi
 = 
NULL
;

138 *
øddr
 = 
möaddr
;

140 #ifde‡
WIN32


141 
MEMORY_BASIC_INFORMATION
 
mi
;

143 
FILE
 *
Â
;

144 
löe
[
PROCMAXLEN
];

147 
	`d¥öt
(
FD_IO
, "DEBUG util_map_hint_unused\n");

148 
	`as£π
(
Æign
 > 0);

150 i‡(
øddr
 =
NULL
)

151 
øddr
 +
∑ge_size
;

153 
øddr
 = (*)
	`roundup
((
uöçå_t
Ïaddr, 
Æign
);

155 #ifde‡
WIN32


156 (
uöçå_t
)
øddr
 < 
UINTPTR_MAX
 - 
Àn
) {

157 
size_t
 
ªt
 = 
	`VútuÆQuîy
(
øddr
, &
mi
, (mi));

158 i‡(
ªt
 == 0) {

159 
	`ERR
("VútuÆQuîy %p", 
øddr
);

160  
MAP_FAILED
;

162 
	`d¥öt
(
FD_IO
, "addr %pÜen %zu state %d",

163 
mi
.
Ba£Addªss
, mi.
Regi⁄Size
, mi.
Sèã
);

165 i‡((
mi
.
Sèã
 !
MEM_FREE
Ë|| (mi.
Regi⁄Size
 < 
Àn
)) {

166 
øddr
 = (*)
mi
.
Ba£Addªss
 + mi.
Regi⁄Size
;

167 
øddr
 = (*)
	`roundup
((
uöçå_t
Ïaddr, 
Æign
);

168 
	`d¥öt
(
FD_IO
, "√¨e°álig√dádd∏%p", 
øddr
);

170 
	`d¥öt
(
FD_IO
, "unusedÑegion of size %zu foundát %p",

171 
mi
.
Regi⁄Size
, mi.
Ba£Addªss
);

172  
mi
.
Ba£Addªss
;

176 
	`d¥öt
(
FD_IO
, "end ofáddress spaceÑeached");

177  
MAP_FAILED
;

179 
Â
 = 
	`f›í
(
OS_MAPFILE
, "r");

180 i‡(!
Â
) {

181 
	`log_îr
("!%s\n", 
OS_MAPFILE
);

182  
MAP_FAILED
;

185 
	`fgës
(
löe
, 
PROCMAXLEN
, 
Â
Ë!
NULL
) {

187 i‡(
	`ssˇnf
(
löe
, 
ssˇnf_os
, &
lo
, &
hi
) == 2) {

188 
	`d¥öt
(
FD_IO
, "%p-%p\n", 
lo
, 
hi
);

189 i‡(
lo
 > 
øddr
) {

190 i‡((
uöçå_t
)(
lo
 - 
øddr
Ë>
Àn
) {

191 
	`d¥öt
(
FD_IO
, "unusedÑegion of size "

193 
lo
 - 
øddr
,Ñaddr);

196 
	`d¥öt
(
FD_IO
, "region isÅoo small: "

198 
lo
 - 
øddr
, 
Àn
);

202 i‡(
hi
 > 
øddr
) {

203 
øddr
 = (*)
	`roundup
((
uöçå_t
)
hi
, 
Æign
);

204 
	`d¥öt
(
FD_IO
, "nearestálignedáddr %p\n",

205 
øddr
);

208 i‡(
øddr
 == 0) {

209 
	`d¥öt
(
FD_IO
, "end ofáddress spaceÑeached\n");

219 i‡((
øddr
 !
NULL
Ë&& (
UINTPTR_MAX
 - (
uöçå_t
Ïadd∏< 
Àn
)) {

220 
	`d¥öt
(
FD_IO
, "end ofáddress spaceÑeached");

221 
øddr
 = 
MAP_FAILED
;

224 
	`f˛o£
(
Â
);

226 
	`d¥öt
(
FD_IO
, "ªtu∫ög %p", 
øddr
);

227  
øddr
;

229 
	}
}

253 *
	$utû_m≠_höt
(
size_t
 
Àn
, size_à
ªq_Æign
)

255 *
addr
;

256 
size_t
 
Æign
 = 0;

257 *
e
 = 
NULL
;

259 
	`d¥öt
(
FD_IO
, "DEBUG util_map_hint\n");

260 
	`d¥öt
(
FD_IO
, "À¿%zuÑeq_Æig¿%zu\n", 
Àn
, 
ªq_Æign
);

263 
Æign
 = 
	`utû_m≠_höt_Æign
(
Àn
, 
ªq_Æign
);

265 
e
 = 
	`gëív
("PMEM_MMAP_HINT");

266 i‡(
e
) {

267 *
ídp
;

268 
vÆ
 = 0;

270 
î∫o
 = 0;

272 
vÆ
 = 
	`°πouŒ
(
e
, &
ídp
, 16);

273 i‡(
î∫o
 || 
ídp
 =
e
) {

274 
	`d¥öt
(
FD_IO
, "Invalid PMEM_MMAP_HINT\n");

276 
Mm≠_höt
 = (*)
vÆ
;

277 
Mm≠_no_øndom
 = 
åue
;

278 
	`d¥öt
(
FD_IO
, "PMEM_MMAP_HINT sëÅÿ%p\n", 
Mm≠_höt
);

282 i‡(
Mm≠_no_øndom
) {

283 
	`d¥öt
(
FD_IO
, "u£r-deföed höà%p\n", (*)
Mm≠_höt
);

284 
addr
 = 
	`utû_m≠_höt_unu£d
((*)
Mm≠_höt
, 
Àn
, 
Æign
);

301 #i‚de‡
WIN32


302 
addr
 = 
	`mm≠
(
NULL
, 
Àn
 + 
Æign
, 
PROT_READ
,

303 
MAP_PRIVATE
|
MAP_ANONYMOUS
, -1, 0);

305 
addr
 = 
	`mm≠
(
NULL
, 
Àn
 + 
Æign
, 
PROT_READ
,

306 
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_NORESERVE
, -1, 0);

308 i‡(
addr
 !
MAP_FAILED
) {

309 
	`d¥öt
(
FD_IO
, "sy°em choi˚ %p\n", 
addr
);

310 
	`munm≠
(
addr
, 
Àn
 + 
Æign
);

311 
addr
 = (*)
	`roundup
((
uöçå_t
Ôddr, 
Æign
);

315 
	`d¥öt
(
FD_IO
, "höà%p\n", 
addr
);

317  
addr
;

318 
	}
}

323 
	$fio_libpmem_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

324 
size_t
 
Àngth
, 
off_t
 
off
)

326 
fio_libpmem_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

327 
Êags
 = 0;

328 *
addr
 = 
NULL
;

330 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_file\n");

332 i‡(
	`td_rw
(
td
))

333 
Êags
 = 
PROT_READ
 | 
PROT_WRITE
;

334 i‡(
	`td_wrôe
(
td
)) {

335 
Êags
 = 
PROT_WRITE
;

337 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

338 
Êags
 |
PROT_READ
;

340 
Êags
 = 
PROT_READ
;

342 
	`d¥öt
(
FD_IO
, "f->fûe_«mê%†Åd->o.vîify = %d \n", 
f
->
fûe_«me
,

343 
td
->
o
.
vîify
);

344 
	`d¥öt
(
FD_IO
, "length = %ld flags = %d f->fd = %d off = %ld \n",

345 
Àngth
, 
Êags
, 
f
->
fd
,
off
);

347 
addr
 = 
	`utû_m≠_höt
(
Àngth
, 0);

349 
fdd
->
libpmem_±r
 = 
	`mm≠
(
addr
, 
Àngth
, 
Êags
, 
MAP_SHARED
, 
f
->
fd
, 
off
);

350 i‡(
fdd
->
libpmem_±r
 =
MAP_FAILED
) {

351 
fdd
->
libpmem_±r
 = 
NULL
;

352 
	`td_vîr‹
(
td
, 
î∫o
, "mmap");

355 i‡(
td
->
îr‹
 && 
fdd
->
libpmem_±r
)

356 
	`munm≠
(
fdd
->
libpmem_±r
, 
Àngth
);

358  
td
->
îr‹
;

359 
	}
}

364 
	$fio_libpmem_¥ï_limôed
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

366 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

367 
fio_libpmem_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

369 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_prep_limited\n" );

371 i‡(
io_u
->
buÊí
 > 
f
->
ªÆ_fûe_size
) {

372 
	`log_îr
("libpmem: bsÅoo big forÜibpmemÉngine\n");

373  
EIO
;

376 
fdd
->
libpmem_sz
 = 
	`mö
(
MMAP_TOTAL_SZ
, 
f
->
ªÆ_fûe_size
);

377 i‡(
fdd
->
libpmem_sz
 > 
f
->
io_size
)

378 
fdd
->
libpmem_sz
 = 
f
->
io_size
;

380 
fdd
->
libpmem_off
 = 
io_u
->
off£t
;

382  
	`fio_libpmem_fûe
(
td
, 
f
, 
fdd
->
libpmem_sz
, fdd->
libpmem_off
);

383 
	}
}

388 
	$fio_libpmem_¥ï_fuŒ
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

390 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

391 
fio_libpmem_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

392 
ªt
;

394 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_prep_full\n" );

396 i‡(
	`fio_fûe_∑πül_mm≠
(
f
))

397  
EINVAL
;

399 
	`d¥öt
(
FD_IO
," f->io_size %ld : io_u->offset %lld \n",

400 
f
->
io_size
, 
io_u
->
off£t
);

402 i‡(
io_u
->
off£t
 !(
size_t
) io_u->offset ||

403 
f
->
io_size
 !(
size_t
) f->io_size) {

404 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

405  
EINVAL
;

407 
fdd
->
libpmem_sz
 = 
f
->
io_size
;

408 
fdd
->
libpmem_off
 = 0;

410 
ªt
 = 
	`fio_libpmem_fûe
(
td
, 
f
, 
fdd
->
libpmem_sz
, fdd->
libpmem_off
);

411 i‡(
ªt
)

412 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

414  
ªt
;

415 
	}
}

417 
	$fio_libpmem_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

419 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

420 
fio_libpmem_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

421 
ªt
;

423 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_prep\n" );

427 
	`d¥öt
(
FD_IO
," io_u->offset %lld : fdd->libpmem_off %ld : "

429 
io_u
->
off£t
, 
fdd
->
libpmem_off
,

430 
io_u
->
buÊí
, 
fdd
->
libpmem_sz
);

432 i‡(
io_u
->
off£t
 >
fdd
->
libpmem_off
 &&

433 (
io_u
->
off£t
 + io_u->
buÊí
 <=

434 
fdd
->
libpmem_off
 + fdd->
libpmem_sz
))

435 
d⁄e
;

440 i‡(
fdd
->
libpmem_±r
) {

441 
	`d¥öt
(
FD_IO
,"munmap \n");

442 i‡(
	`munm≠
(
fdd
->
libpmem_±r
, fdd->
libpmem_sz
) < 0)

443  
î∫o
;

444 
fdd
->
libpmem_±r
 = 
NULL
;

447 i‡(
	`fio_libpmem_¥ï_fuŒ
(
td
, 
io_u
)) {

448 
	`td_˛ór_îr‹
(
td
);

449 
ªt
 = 
	`fio_libpmem_¥ï_limôed
(
td
, 
io_u
);

450 i‡(
ªt
)

451  
ªt
;

454 
d⁄e
:

455 
io_u
->
mm≠_d©a
 = 
fdd
->
libpmem_±r
 + io_u->
off£t
 - fdd->
libpmem_off


456 - 
f
->
fûe_off£t
;

458 
	}
}

460 
	$fio_libpmem_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

462 
	`fio_ro_check
(
td
, 
io_u
);

463 
io_u
->
îr‹
 = 0;

465 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_queue\n");

467 
io_u
->
ddú
) {

468 
DDIR_READ
:

469 
	`mem˝y
(
io_u
->
x„r_buf
, io_u->
mm≠_d©a
, io_u->
x„r_buÊí
);

471 
DDIR_WRITE
:

472 
	`d¥öt
(
FD_IO
, "DEBUG mmap_data=%p, xfer_buf=%p\n",

473 
io_u
->
mm≠_d©a
, io_u->
x„r_buf
 );

474 
	`d¥öt
(
FD_IO
,"td->o.odúe˘ %d \n",
td
->
o
.
odúe˘
);

475 i‡(
td
->
o
.
odúe˘
) {

476 
	`pmem_mem˝y_≥rsi°
(
io_u
->
mm≠_d©a
,

477 
io_u
->
x„r_buf
,

478 
io_u
->
x„r_buÊí
);

480 
	`pmem_mem˝y_nodøö
(
io_u
->
mm≠_d©a
,

481 
io_u
->
x„r_buf
,

482 
io_u
->
x„r_buÊí
);

485 
DDIR_SYNC
:

486 
DDIR_DATASYNC
:

487 
DDIR_SYNC_FILE_RANGE
:

490 
io_u
->
îr‹
 = 
EINVAL
;

494  
FIO_Q_COMPLETED
;

495 
	}
}

497 
	$fio_libpmem_öô
(
thªad_d©a
 *
td
)

499 
thªad_›ti⁄s
 *
o
 = &
td
->o;

501 
	`d¥öt
(
FD_IO
,"o->rw_min_bs %d \n o->fsync_blocks %d \n o->fdatasync_blocks %d \n",

502 
o
->
rw_mö_bs
,o->
fsync_blocks
,o->
fd©async_blocks
);

503 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_init\n");

505 i‡((
o
->
rw_mö_bs
 & 
∑ge_mask
) &&

506 (
o
->
fsync_blocks
 || o->
fd©async_blocks
)) {

507 
	`log_îr
("libpmem: mmap options dictateá minimum block size of "

508 "%Œu byãs\n", (Ë
∑ge_size
);

512 
	}
}

514 
	$fio_libpmem_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

516 
fio_libpmem_d©a
 *
fdd
;

517 
ªt
;

519 
	`d¥öt
(
FD_IO
,"DEBUG fio_libpmem_open_file\n");

520 
	`d¥öt
(
FD_IO
,"f->io_size=%ld \n",
f
->
io_size
);

521 
	`d¥öt
(
FD_IO
,"td->o.size=%Œd \n",
td
->
o
.
size
);

522 
	`d¥öt
(
FD_IO
,"td->o.iodïth=%d\n",
td
->
o
.
iodïth
);

523 
	`d¥öt
(
FD_IO
,"td->o.iodïth_b©ch=%d \n",
td
->
o
.
iodïth_b©ch
);

525 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

526 i‡(
ªt
)

527  
ªt
;

529 
fdd
 = 
	`ˇŒoc
(1, (*fdd));

530 i‡(!
fdd
) {

531 
fio_unu£d
 
__ªt
;

532 
__ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

536 
	`FILE_SET_ENG_DATA
(
f
, 
fdd
);

539 
	}
}

541 
	$fio_libpmem_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

543 
fio_libpmem_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

545 
	`d¥öt
(
FD_IO
,"DEBUG fio_libpmem_close_file\n");

546 
	`d¥öt
(
FD_IO
,"td->o.odúe˘ %d \n",
td
->
o
.
odúe˘
);

548 i‡(!
td
->
o
.
odúe˘
) {

549 
	`d¥öt
(
FD_IO
,"pmem_drain\n");

550 
	`pmem_døö
();

553 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

554 
	`‰ì
(
fdd
);

555 
	`fio_fûe_˛ór_∑πül_mm≠
(
f
);

557  
	`gíîic_˛o£_fûe
(
td
, 
f
);

558 
	}
}

560 
i€ngöe_›s
 
	gi€ngöe
 = {

561 .
«me
 = "libpmem",

562 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

563 .
	göô
 = 
fio_libpmem_öô
,

564 .
	g¥ï
 = 
fio_libpmem_¥ï
,

565 .
	gqueue
 = 
fio_libpmem_queue
,

566 .
	g›í_fûe
 = 
fio_libpmem_›í_fûe
,

567 .
	g˛o£_fûe
 = 
fio_libpmem_˛o£_fûe
,

568 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

569 .
	gÊags
 = 
FIO_SYNCIO
 |
FIO_NOEXTEND
,

572 
fio_öô
 
	$fio_libpmem_ªgi°î
()

574 #i‚de‡
WIN32


575 
Mm≠_Æign
 = 
∑ge_size
;

577 i‡(
Mm≠_Æign
 == 0) {

578 
SYSTEM_INFO
 
si
;

580 
	`GëSy°emInfo
(&
si
);

581 
Mm≠_Æign
 = 
si
.
dwAŒoˇti⁄Gønuœrôy
;

585 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

586 
	}
}

588 
fio_exô
 
	$fio_libpmem_uƒegi°î
()

590 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

591 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/mmap.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<sys/mm™.h
>

14 
	~"../fio.h
"

15 
	~"../vîify.h
"

20 
	#MMAP_TOTAL_SZ
 (1 * 1024 * 1024 * 1024UL)

	)

22 
	gmm≠_m≠_size
;

24 
	sfio_mm≠_d©a
 {

25 *
	mmm≠_±r
;

26 
size_t
 
	mmm≠_sz
;

27 
off_t
 
	mmm≠_off
;

30 
boﬁ
 
	$fio_madvi£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

31 
size_t
 
Àngth
)

34 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

36 i‡(!
td
->
o
.
Ádvi£_höt
)

37  
åue
;

39 i‡(!
	`td_øndom
(
td
)) {

40 i‡(
	`posix_madvi£
(
fmd
->
mm≠_±r
, 
Àngth
, 
POSIX_MADV_SEQUENTIAL
) < 0) {

41 
	`td_vîr‹
(
td
, 
î∫o
, "madvise");

42  
Ál£
;

45 i‡(
	`posix_madvi£
(
fmd
->
mm≠_±r
, 
Àngth
, 
POSIX_MADV_RANDOM
) < 0) {

46 
	`td_vîr‹
(
td
, 
î∫o
, "madvise");

47  
Ál£
;

51  
åue
;

52 
	}
}

54 
	$fio_mm≠_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

55 
size_t
 
Àngth
, 
off_t
 
off
)

57 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

58 
Êags
 = 0;

60 i‡(
	`td_rw
(
td
Ë&& !td->
o
.
vîify_⁄ly
)

61 
Êags
 = 
PROT_READ
 | 
PROT_WRITE
;

62 i‡(
	`td_wrôe
(
td
Ë&& !td->
o
.
vîify_⁄ly
) {

63 
Êags
 = 
PROT_WRITE
;

65 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

66 
Êags
 |
PROT_READ
;

68 
Êags
 = 
PROT_READ
;

70 
fmd
->
mm≠_±r
 = 
	`mm≠
(
NULL
, 
Àngth
, 
Êags
, 
MAP_SHARED
, 
f
->
fd
, 
off
);

71 i‡(
fmd
->
mm≠_±r
 =
MAP_FAILED
) {

72 
fmd
->
mm≠_±r
 = 
NULL
;

73 
	`td_vîr‹
(
td
, 
î∫o
, "mmap");

74 
îr
;

77 i‡(!
	`fio_madvi£_fûe
(
td
, 
f
, 
Àngth
))

78 
îr
;

80 i‡(
	`posix_madvi£
(
fmd
->
mm≠_±r
, 
Àngth
, 
POSIX_MADV_DONTNEED
) < 0) {

81 
	`td_vîr‹
(
td
, 
î∫o
, "madvise");

82 
îr
;

85 #ifde‡
FIO_MADV_FREE


86 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
)

87 (Ë
	`posix_madvi£
(
fmd
->
mm≠_±r
, fmd->
mm≠_sz
, 
FIO_MADV_FREE
);

90 
îr
:

91 i‡(
td
->
îr‹
 && 
fmd
->
mm≠_±r
)

92 
	`munm≠
(
fmd
->
mm≠_±r
, 
Àngth
);

94  
td
->
îr‹
;

95 
	}
}

100 
	$fio_mm≠io_¥ï_limôed
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

102 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

103 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

105 i‡(
io_u
->
buÊí
 > 
mm≠_m≠_size
) {

106 
	`log_îr
("fio: bsÅoo big for mmapÉngine\n");

107  
EIO
;

110 
fmd
->
mm≠_sz
 = 
mm≠_m≠_size
;

111 i‡(
fmd
->
mm≠_sz
 > 
f
->
io_size
)

112 
fmd
->
mm≠_sz
 = 
f
->
io_size
;

114 
fmd
->
mm≠_off
 = 
io_u
->
off£t
;

116  
	`fio_mm≠_fûe
(
td
, 
f
, 
fmd
->
mm≠_sz
, fmd->
mm≠_off
);

117 
	}
}

122 
	$fio_mm≠io_¥ï_fuŒ
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

124 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

125 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

126 
ªt
;

128 i‡(
	`fio_fûe_∑πül_mm≠
(
f
))

129  
EINVAL
;

130 i‡(
io_u
->
off£t
 !(
size_t
) io_u->offset ||

131 
f
->
io_size
 !(
size_t
) f->io_size) {

132 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

133  
EINVAL
;

136 
fmd
->
mm≠_sz
 = 
f
->
io_size
;

137 
fmd
->
mm≠_off
 = 0;

139 
ªt
 = 
	`fio_mm≠_fûe
(
td
, 
f
, 
fmd
->
mm≠_sz
, fmd->
mm≠_off
);

140 i‡(
ªt
)

141 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

143  
ªt
;

144 
	}
}

146 
	$fio_mm≠io_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

148 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

149 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

150 
ªt
;

155 i‡(
io_u
->
off£t
 >
fmd
->
mm≠_off
 &&

156 
io_u
->
off£t
 + io_u->
buÊí
 <
fmd
->
mm≠_off
 + fmd->
mm≠_sz
)

157 
d⁄e
;

162 i‡(
fmd
->
mm≠_±r
) {

163 i‡(
	`munm≠
(
fmd
->
mm≠_±r
, fmd->
mm≠_sz
) < 0)

164  
î∫o
;

165 
fmd
->
mm≠_±r
 = 
NULL
;

168 i‡(
	`fio_mm≠io_¥ï_fuŒ
(
td
, 
io_u
)) {

169 
	`td_˛ór_îr‹
(
td
);

170 
ªt
 = 
	`fio_mm≠io_¥ï_limôed
(
td
, 
io_u
);

171 i‡(
ªt
)

172  
ªt
;

175 
d⁄e
:

176 
io_u
->
mm≠_d©a
 = 
fmd
->
mm≠_±r
 + io_u->
off£t
 - fmd->
mm≠_off
 -

177 
f
->
fûe_off£t
;

179 
	}
}

181 
	$fio_mm≠io_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

183 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

184 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

186 
	`fio_ro_check
(
td
, 
io_u
);

188 i‡(
io_u
->
ddú
 =
DDIR_READ
)

189 
	`mem˝y
(
io_u
->
x„r_buf
, io_u->
mm≠_d©a
, io_u->
x„r_buÊí
);

190 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

191 
	`mem˝y
(
io_u
->
mm≠_d©a
, io_u->
x„r_buf
, io_u->
x„r_buÊí
);

192 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

193 i‡(
	`msync
(
fmd
->
mm≠_±r
, fmd->
mm≠_sz
, 
MS_SYNC
)) {

194 
io_u
->
îr‹
 = 
î∫o
;

195 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "msync");

197 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

198 
ªt
 = 
	`do_io_u_åim
(
td
, 
io_u
);

200 i‡(!
ªt
)

201 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "trim");

208 i‡(
td
->
o
.
odúe˘
 && 
	`ddú_rw
(
io_u
->
ddú
)) {

209 i‡(
	`msync
(
io_u
->
mm≠_d©a
, io_u->
x„r_buÊí
, 
MS_SYNC
) < 0) {

210 
io_u
->
îr‹
 = 
î∫o
;

211 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "msync");

213 i‡(
	`posix_madvi£
(
io_u
->
mm≠_d©a
, io_u->
x„r_buÊí
, 
POSIX_MADV_DONTNEED
) < 0) {

214 
io_u
->
îr‹
 = 
î∫o
;

215 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "madvise");

219  
FIO_Q_COMPLETED
;

220 
	}
}

222 
	$fio_mm≠io_öô
(
thªad_d©a
 *
td
)

224 
thªad_›ti⁄s
 *
o
 = &
td
->o;

226 i‡((
o
->
rw_mö_bs
 & 
∑ge_mask
) &&

227 (
o
->
odúe˘
 || o->
fsync_blocks
 || o->
fd©async_blocks
)) {

228 
	`log_îr
("fio: mmap options dictateá minimum block size of "

229 "%Œu byãs\n", (Ë
∑ge_size
);

233 
mm≠_m≠_size
 = 
MMAP_TOTAL_SZ
 / 
o
->
ƒ_fûes
;

235 
	}
}

237 
	$fio_mm≠io_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

239 
fio_mm≠_d©a
 *
fmd
;

240 
ªt
;

242 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

243 i‡(
ªt
)

244  
ªt
;

246 
fmd
 = 
	`ˇŒoc
(1, (*fmd));

247 i‡(!
fmd
) {

248 
fio_unu£d
 
__ªt
;

249 
__ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

253 
	`FILE_SET_ENG_DATA
(
f
, 
fmd
);

255 
	}
}

257 
	$fio_mm≠io_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

259 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

261 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

262 
	`‰ì
(
fmd
);

263 
	`fio_fûe_˛ór_∑πül_mm≠
(
f
);

265  
	`gíîic_˛o£_fûe
(
td
, 
f
);

266 
	}
}

268 
i€ngöe_›s
 
	gi€ngöe
 = {

269 .
«me
 = "mmap",

270 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

271 .
	göô
 = 
fio_mm≠io_öô
,

272 .
	g¥ï
 = 
fio_mm≠io_¥ï
,

273 .
	gqueue
 = 
fio_mm≠io_queue
,

274 .
	g›í_fûe
 = 
fio_mm≠io_›í_fûe
,

275 .
	g˛o£_fûe
 = 
fio_mm≠io_˛o£_fûe
,

276 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

277 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_NOEXTEND
,

280 
fio_öô
 
	$fio_mm≠io_ªgi°î
()

282 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

283 
	}
}

285 
fio_exô
 
	$fio_mm≠io_uƒegi°î
()

287 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

288 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/mtd.c

7 
	~<as£π.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<sys/io˘l.h
>

13 
	~<mtd/mtd-u£r.h
>

15 
	~"../fio.h
"

16 
	~"../›tgroup.h
"

17 
	~"../vîify.h
"

18 
	~"../o¶ib/libmtd.h
"

20 
libmtd_t
 
	gdesc
;

22 
	sfio_mtd_d©a
 {

23 
mtd_dev_öfo
 
	möfo
;

26 
	sfio_mtd_›ti⁄s
 {

27 *
	m∑d
;

28 
	mskù_bad
;

31 
fio_›ti⁄
 
	g›ti⁄s
[] = {

33 .
«me
 = "skip_bad",

34 .
	g ame
 = "Skip operationságainst bad blocks",

35 .
	gty≥
 = 
FIO_OPT_BOOL
,

36 .
	goff1
 = 
off£tof
(
fio_mtd_›ti⁄s
, 
skù_bad
),

37 .
	ghñp
 = "Skip operationságainst known bad blocks.",

38 .
	ghide
 = 1,

39 .
	gdef
 = "0",

40 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

41 .
	ggroup
 = 
FIO_OPT_G_MTD
,

44 .
	g«me
 = 
NULL
,

48 
	$fio_mtd_maybe_m¨k_bad
(
thªad_d©a
 *
td
,

49 
fio_mtd_d©a
 *
fmd
,

50 
io_u
 *io_u, 
eb
)

52 
ªt
;

53 i‡(
î∫o
 =
EIO
) {

54 
ªt
 = 
	`mtd_m¨k_bad
(&
fmd
->
öfo
, 
io_u
->
fûe
->
fd
, 
eb
);

55 i‡(
ªt
 != 0) {

56 
io_u
->
îr‹
 = 
î∫o
;

57 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_mark_bad");

62 
	}
}

64 
	$fio_mtd_is_bad
(
thªad_d©a
 *
td
,

65 
fio_mtd_d©a
 *
fmd
,

66 
io_u
 *io_u, 
eb
)

68 
ªt
 = 
	`mtd_is_bad
(&
fmd
->
öfo
, 
io_u
->
fûe
->
fd
, 
eb
);

69 i‡(
ªt
 == -1) {

70 
io_u
->
îr‹
 = 
î∫o
;

71 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_is_bad");

72 } i‡(
ªt
 == 1)

73 
io_u
->
îr‹
 = 
EIO
;

74  
ªt
;

75 
	}
}

77 
	$fio_mtd_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

79 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

80 
fio_mtd_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

81 
fio_mtd_›ti⁄s
 *
o
 = 
td
->
eo
;

82 
loˇl_offs
 = 0;

83 
ªt
;

85 
	`fio_ro_check
(
td
, 
io_u
);

95 
loˇl_offs
 < 
io_u
->
buÊí
) {

96 
eb
 = (
io_u
->
off£t
 + 
loˇl_offs
Ë/ 
fmd
->
öfo
.
eb_size
;

97 
eb_offs
 = (
io_u
->
off£t
 + 
loˇl_offs
Ë% 
fmd
->
öfo
.
eb_size
;

100 
Àn
 = 
	`mö
(()
io_u
->
buÊí
 - 
loˇl_offs
,

101 ()
fmd
->
öfo
.
eb_size
 - 
eb_offs
);

102 *
buf
 = ((*)
io_u
->bufË+ 
loˇl_offs
;

104 i‡(
o
->
skù_bad
) {

105 
ªt
 = 
	`fio_mtd_is_bad
(
td
, 
fmd
, 
io_u
, 
eb
);

106 i‡(
ªt
 == -1)

108 i‡(
ªt
 == 1)

109 
√xt
;

111 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

112 
ªt
 = 
	`mtd_ªad
(&
fmd
->
öfo
, 
f
->
fd
, 
eb
, 
eb_offs
, 
buf
, 
Àn
);

113 i‡(
ªt
 != 0) {

114 
io_u
->
îr‹
 = 
î∫o
;

115 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_read");

116 i‡(
	`fio_mtd_maybe_m¨k_bad
(
td
, 
fmd
, 
io_u
, 
eb
))

119 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

120 
ªt
 = 
	`mtd_wrôe
(
desc
, &
fmd
->
öfo
, 
f
->
fd
, 
eb
,

121 
eb_offs
, 
buf
, 
Àn
, 
NULL
, 0, 0);

122 i‡(
ªt
 != 0) {

123 
io_u
->
îr‹
 = 
î∫o
;

124 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_write");

125 i‡(
	`fio_mtd_maybe_m¨k_bad
(
td
, 
fmd
, 
io_u
, 
eb
))

128 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

129 i‡(
eb_offs
 !0 || 
Àn
 !
fmd
->
öfo
.
eb_size
) {

130 
io_u
->
îr‹
 = 
EINVAL
;

131 
	`td_vîr‹
(
td
, 
EINVAL
,

134 
ªt
 = 
	`mtd_îa£
(
desc
, &
fmd
->
öfo
, 
f
->
fd
, 
eb
);

135 i‡(
ªt
 != 0) {

136 
io_u
->
îr‹
 = 
î∫o
;

137 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_erase");

138 i‡(
	`fio_mtd_maybe_m¨k_bad
(
td
, 
fmd
, 
io_u
, 
eb
))

142 
io_u
->
îr‹
 = 
ENOTSUP
;

143 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "operationÇot supported on mtd");

146 
√xt
:

147 
loˇl_offs
 +
Àn
;

150  
FIO_Q_COMPLETED
;

151 
	}
}

153 
	$fio_mtd_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

155 
fio_mtd_d©a
 *
fmd
;

156 
ªt
;

158 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

159 i‡(
ªt
)

160  
ªt
;

162 
fmd
 = 
	`ˇŒoc
(1, (*fmd));

163 i‡(!
fmd
)

164 
îr_˛o£
;

166 
ªt
 = 
	`mtd_gë_dev_öfo
(
desc
, 
f
->
fûe_«me
, &
fmd
->
öfo
);

167 i‡(
ªt
 != 0) {

168 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_get_dev_info");

169 
îr_‰ì
;

172 
	`FILE_SET_ENG_DATA
(
f
, 
fmd
);

175 
îr_‰ì
:

176 
	`‰ì
(
fmd
);

177 
îr_˛o£
:

179 
fio_unu£d
 
__ªt
;

180 
__ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

183 
	}
}

185 
	$fio_mtd_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

187 
fio_mtd_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

189 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

190 
	`‰ì
(
fmd
);

192  
	`gíîic_˛o£_fûe
(
td
, 
f
);

193 
	}
}

195 
	$fio_mtd_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

197 
mtd_dev_öfo
 
öfo
;

199 
ªt
 = 
	`mtd_gë_dev_öfo
(
desc
, 
f
->
fûe_«me
, &
öfo
);

200 i‡(
ªt
 != 0) {

201 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_get_dev_info");

202  
î∫o
;

204 
f
->
ªÆ_fûe_size
 = 
öfo
.
size
;

207 
	}
}

209 
i€ngöe_›s
 
	gi€ngöe
 = {

210 .
«me
 = "mtd",

211 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

212 .
	gqueue
 = 
fio_mtd_queue
,

213 .
	g›í_fûe
 = 
fio_mtd_›í_fûe
,

214 .
	g˛o£_fûe
 = 
fio_mtd_˛o£_fûe
,

215 .
	ggë_fûe_size
 = 
fio_mtd_gë_fûe_size
,

216 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_NOEXTEND
,

217 .
	g›ti⁄s
 = 
›ti⁄s
,

218 .
	g›ti⁄_°ru˘_size
 = (
fio_mtd_›ti⁄s
),

221 
fio_öô
 
	$fio_mtd_ªgi°î
()

223 
desc
 = 
	`libmtd_›í
();

224 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

225 
	}
}

227 
fio_exô
 
	$fio_mtd_uƒegi°î
()

229 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

230 
	`libmtd_˛o£
(
desc
);

231 
desc
 = 
NULL
;

232 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/net.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sig«l.h
>

11 
	~<î∫o.h
>

12 
	~<as£π.h
>

13 
	~<√töë/ö.h
>

14 
	~<√töë/t˝.h
>

15 
	~<¨∑/öë.h
>

16 
	~<√tdb.h
>

17 
	~<sys/pﬁl.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/sockë.h
>

21 
	~<sys/un.h
>

23 
	~"../fio.h
"

24 
	~"../vîify.h
"

25 
	~"../›tgroup.h
"

27 
	s√tio_d©a
 {

28 
	mli°ífd
;

29 
	mu£_•li˚
;

30 
	m£q_off
;

31 
	mpùes
[2];

32 
sockaddr_ö
 
	maddr
;

33 
sockaddr_ö6
 
	maddr6
;

34 
sockaddr_un
 
	maddr_un
;

35 
uöt64_t
 
	mudp_£nd_£q
;

36 
uöt64_t
 
	mudp_ªcv_£q
;

39 
	s√tio_›ti⁄s
 {

40 
thªad_d©a
 *
	mtd
;

41 
	mp‹t
;

42 
	m¥Ÿo
;

43 
	mli°í
;

44 
	mpögp⁄g
;

45 
	mnodñay
;

46 
	mâl
;

47 
	mwödow_size
;

48 
	mmss
;

49 *
	mötfc
;

52 
	sudp_˛o£_msg
 {

53 
uöt32_t
 
	mmagic
;

54 
uöt32_t
 
	mcmd
;

57 
	sudp_£q
 {

58 
uöt64_t
 
	mmagic
;

59 
uöt64_t
 
	m£q
;

60 
uöt64_t
 
	mbs
;

64 
	mFIO_LINK_CLOSE
 = 0x89,

65 
	mFIO_LINK_OPEN_CLOSE_MAGIC
 = 0x6c696e6b,

66 
	mFIO_LINK_OPEN
 = 0x98,

67 
	mFIO_UDP_SEQ_MAGIC
 = 0x657375716e556563ULL,

69 
	mFIO_TYPE_TCP
 = 1,

70 
	mFIO_TYPE_UDP
 = 2,

71 
	mFIO_TYPE_UNIX
 = 3,

72 
	mFIO_TYPE_TCP_V6
 = 4,

73 
	mFIO_TYPE_UDP_V6
 = 5,

76 
°r_ho°«me_cb
(*
d©a
, c⁄° *
öput
);

77 
fio_›ti⁄
 
	g›ti⁄s
[] = {

79 .
«me
 = "hostname",

80 .
	g ame
 = "netÉngine hostname",

81 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

82 .
	gcb
 = 
°r_ho°«me_cb
,

83 .
	ghñp
 = "Hostname forÇet IOÉngine",

84 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

85 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

88 .
	g«me
 = "port",

89 .
	g ame
 = "netÉngineÖort",

90 .
	gty≥
 = 
FIO_OPT_INT
,

91 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
p‹t
),

92 .
	gmövÆ
 = 1,

93 .
	gmaxvÆ
 = 65535,

94 .
	ghñp
 = "PortÅo use for TCP or UDPÇet connections",

95 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

96 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

99 .
	g«me
 = "protocol",

100 .
	g ame
 = "netÉngineÖrotocol",

101 .
	gÆüs
 = "proto",

102 .
	gty≥
 = 
FIO_OPT_STR
,

103 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
¥Ÿo
),

104 .
	ghñp
 = "NetworkÖrotocolÅo use",

105 .
	gdef
 = "tcp",

106 .
	gposvÆ
 = {

107 { .
ivÆ
 = "tcp",

108 .
	govÆ
 = 
FIO_TYPE_TCP
,

109 .
	ghñp
 = "Transmission Control Protocol",

111 #ifde‡
CONFIG_IPV6


112 { .
	givÆ
 = "tcpv6",

113 .
	govÆ
 = 
FIO_TYPE_TCP_V6
,

114 .
	ghñp
 = "Transmission Control Protocol V6",

117 { .
	givÆ
 = "udp",

118 .
	govÆ
 = 
FIO_TYPE_UDP
,

119 .
	ghñp
 = "User Datagram Protocol",

121 #ifde‡
CONFIG_IPV6


122 { .
	givÆ
 = "udpv6",

123 .
	govÆ
 = 
FIO_TYPE_UDP_V6
,

124 .
	ghñp
 = "User Datagram Protocol V6",

127 { .
	givÆ
 = "unix",

128 .
	govÆ
 = 
FIO_TYPE_UNIX
,

129 .
	ghñp
 = "UNIX domain socket",

132 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

133 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

135 #ifde‡
CONFIG_TCP_NODELAY


137 .
	g«me
 = "nodelay",

138 .
	g ame
 = "No Delay",

139 .
	gty≥
 = 
FIO_OPT_BOOL
,

140 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
nodñay
),

141 .
	ghñp
 = "Use TCP_NODELAY on TCP connections",

142 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

143 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

147 .
	g«me
 = "listen",

148 .
	g ame
 = "netÉngineÜisten",

149 .
	gty≥
 = 
FIO_OPT_STR_SET
,

150 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
li°í
),

151 .
	ghñp
 = "Listen for incoming TCP connections",

152 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

153 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

156 .
	g«me
 = "pingpong",

157 .
	g ame
 = "Ping Pong",

158 .
	gty≥
 = 
FIO_OPT_STR_SET
,

159 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
pögp⁄g
),

160 .
	ghñp
 = "Ping-pong IOÑequests",

161 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

162 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

165 .
	g«me
 = "interface",

166 .
	g ame
 = "netÉngine interface",

167 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

168 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
ötfc
),

169 .
	ghñp
 = "Network interfaceÅo use",

170 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

171 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

174 .
	g«me
 = "ttl",

175 .
	g ame
 = "netÉngine multicastÅtl",

176 .
	gty≥
 = 
FIO_OPT_INT
,

177 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
âl
),

178 .
	gdef
 = "1",

179 .
	gmövÆ
 = 0,

180 .
	ghñp
 = "Time-to-live value for outgoing UDP multicastÖackets",

181 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

182 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

184 #ifde‡
CONFIG_NET_WINDOWSIZE


186 .
	g«me
 = "window_size",

187 .
	g ame
 = "Window Size",

188 .
	gty≥
 = 
FIO_OPT_INT
,

189 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
wödow_size
),

190 .
	gmövÆ
 = 0,

191 .
	ghñp
 = "Set socket buffer window size",

192 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

193 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

196 #ifde‡
CONFIG_NET_MSS


198 .
	g«me
 = "mss",

199 .
	g ame
 = "Maximum segment size",

200 .
	gty≥
 = 
FIO_OPT_INT
,

201 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
mss
),

202 .
	gmövÆ
 = 0,

203 .
	ghñp
 = "Set TCP maximum segment size",

204 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

205 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

209 .
	g«me
 = 
NULL
,

213 
ölöe
 
	$is_udp
(
√tio_›ti⁄s
 *
o
)

215  
o
->
¥Ÿo
 =
FIO_TYPE_UDP
 || o->¥Ÿÿ=
FIO_TYPE_UDP_V6
;

216 
	}
}

218 
ölöe
 
	$is_t˝
(
√tio_›ti⁄s
 *
o
)

220  
o
->
¥Ÿo
 =
FIO_TYPE_TCP
 || o->¥Ÿÿ=
FIO_TYPE_TCP_V6
;

221 
	}
}

223 
ölöe
 
	$is_ùv6
(
√tio_›ti⁄s
 *
o
)

225  
o
->
¥Ÿo
 =
FIO_TYPE_UDP_V6
 || o->¥Ÿÿ=
FIO_TYPE_TCP_V6
;

226 
	}
}

228 
	$£t_wödow_size
(
thªad_d©a
 *
td
, 
fd
)

230 #ifde‡
CONFIG_NET_WINDOWSIZE


231 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

232 
wss
;

233 
¢d
, 
rcv
, 
ªt
;

235 i‡(!
o
->
wödow_size
)

238 
rcv
 = 
o
->
li°í
 || o->
pögp⁄g
;

239 
¢d
 = !
o
->
li°í
 || o->
pögp⁄g
;

240 
wss
 = 
o
->
wödow_size
;

241 
ªt
 = 0;

243 i‡(
rcv
) {

244 
ªt
 = 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*Ë&
wss
,

245 (
wss
));

246 i‡(
ªt
 < 0)

247 
	`td_vîr‹
(
td
, 
î∫o
, "rcvbuf window size");

249 i‡(
¢d
 && !
ªt
) {

250 
ªt
 = 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*Ë&
wss
,

251 (
wss
));

252 i‡(
ªt
 < 0)

253 
	`td_vîr‹
(
td
, 
î∫o
, "sndbuf window size");

256  
ªt
;

258 
	`td_vîr‹
(
td
, -
EINVAL
, "setsockopt window size");

261 
	}
}

263 
	$£t_mss
(
thªad_d©a
 *
td
, 
fd
)

265 #ifde‡
CONFIG_NET_MSS


266 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

267 
mss
;

268 
ªt
;

270 i‡(!
o
->
mss
 || !
	`is_t˝
(o))

273 
mss
 = 
o
->mss;

274 
ªt
 = 
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_MAXSEG
, (*Ë&
mss
,

275 (
mss
));

276 i‡(
ªt
 < 0)

277 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt TCP_MAXSEG");

279  
ªt
;

281 
	`td_vîr‹
(
td
, -
EINVAL
, "setsockopt TCP_MAXSEG");

284 
	}
}

291 
	$pﬁl_waô
(
thªad_d©a
 *
td
, 
fd
, 
evíts
)

293 
pﬁlfd
 
pfd
;

294 
ªt
;

296 !
td
->
ãrmö©e
) {

297 
pfd
.
fd
 = fd;

298 
pfd
.
evíts
 =Évents;

299 
ªt
 = 
	`pﬁl
(&
pfd
, 1, -1);

300 i‡(
ªt
 < 0) {

301 i‡(
î∫o
 =
EINTR
)

304 
	`td_vîr‹
(
td
, 
î∫o
, "poll");

306 } i‡(!
ªt
)

312 i‡(
pfd
.
ªvíts
 & 
evíts
)

316 
	}
}

318 
	$fio_√tio_is_mu…iˇ°
(c⁄° *
mˇddr
)

320 
ö_addr_t
 
addr
 = 
	`öë_√tw‹k
(
mˇddr
);

321 i‡(
addr
 == -1)

324 i‡(
	`öë_√tw‹k
("224.0.0.0"Ë<
addr
 &&

325 
	`öë_√tw‹k
("239.255.255.255"Ë>
addr
)

329 
	}
}

332 
	$fio_√tio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

334 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

339 i‡(
	`is_t˝
(
o
))

342 i‡((
o
->
li°í
 && 
io_u
->
ddú
 =
DDIR_WRITE
) ||

343 (!
o
->
li°í
 && 
io_u
->
ddú
 =
DDIR_READ
)) {

344 
	`td_vîr‹
(
td
, 
EINVAL
, "bad direction");

349 
	}
}

351 #ifde‡
CONFIG_LINUX_SPLICE


352 
	$•li˚_io_u
(
fdö
, 
fdout
, 
Àn
)

354 
byãs
 = 0;

356 
Àn
) {

357 
ªt
 = 
	`•li˚
(
fdö
, 
NULL
, 
fdout
, NULL, 
Àn
, 0);

359 i‡(
ªt
 < 0) {

360 i‡(!
byãs
)

361 
byãs
 = 
ªt
;

364 } i‡(!
ªt
)

367 
byãs
 +
ªt
;

368 
Àn
 -
ªt
;

371  
byãs
;

372 
	}
}

377 
	$•li˚_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

379 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

381  
	`•li˚_io_u
(
io_u
->
fûe
->
fd
, 
nd
->
pùes
[1], io_u->
x„r_buÊí
);

382 
	}
}

387 
	$•li˚_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

388 
Àn
)

390 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

392  
	`•li˚_io_u
(
nd
->
pùes
[0], 
io_u
->
fûe
->
fd
, 
Àn
);

393 
	}
}

395 
	$vm•li˚_io_u
(
io_u
 *io_u, 
fd
, 
Àn
)

397 
iovec
 
iov
 = {

398 .
iov_ba£
 = 
io_u
->
x„r_buf
,

399 .
iov_Àn
 = 
Àn
,

401 
byãs
 = 0;

403 
iov
.
iov_Àn
) {

404 
ªt
 = 
	`vm•li˚
(
fd
, &
iov
, 1, 
SPLICE_F_MOVE
);

406 i‡(
ªt
 < 0) {

407 i‡(!
byãs
)

408 
byãs
 = 
ªt
;

410 } i‡(!
ªt
)

413 
iov
.
iov_Àn
 -
ªt
;

414 
iov
.
iov_ba£
 +
ªt
;

415 
byãs
 +
ªt
;

418  
byãs
;

420 
	}
}

425 
	$vm•li˚_io_u_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

426 
Àn
)

428 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

430  
	`vm•li˚_io_u
(
io_u
, 
nd
->
pùes
[0], 
Àn
);

431 
	}
}

436 
	$vm•li˚_io_u_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

438 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

440  
	`vm•li˚_io_u
(
io_u
, 
nd
->
pùes
[1], io_u->
x„r_buÊí
);

441 
	}
}

447 
	$fio_√tio_•li˚_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

449 
ªt
;

451 
ªt
 = 
	`•li˚_ö
(
td
, 
io_u
);

452 i‡(
ªt
 > 0)

453  
	`vm•li˚_io_u_out
(
td
, 
io_u
, 
ªt
);

455  
ªt
;

456 
	}
}

462 
	$fio_√tio_•li˚_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

464 
ªt
;

466 
ªt
 = 
	`vm•li˚_io_u_ö
(
td
, 
io_u
);

467 i‡(
ªt
 > 0)

468  
	`•li˚_out
(
td
, 
io_u
, 
ªt
);

470  
ªt
;

471 
	}
}

473 
	$fio_√tio_•li˚_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

475 
î∫o
 = 
EOPNOTSUPP
;

477 
	}
}

479 
	$fio_√tio_•li˚_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

481 
î∫o
 = 
EOPNOTSUPP
;

483 
	}
}

486 
	$°‹e_udp_£q
(
√tio_d©a
 *
nd
, 
io_u
 *io_u)

488 
udp_£q
 *
us
;

490 i‡(
io_u
->
x„r_buÊí
 < (*
us
))

493 
us
 = 
io_u
->
x„r_buf
 + io_u->
x„r_buÊí
 - (*us);

494 
us
->
magic
 = 
	`˝u_to_À64
((
uöt64_t
Ë
FIO_UDP_SEQ_MAGIC
);

495 
us
->
bs
 = 
	`˝u_to_À64
((
uöt64_t
Ë
io_u
->
x„r_buÊí
);

496 
us
->
£q
 = 
	`˝u_to_À64
(
nd
->
udp_£nd_£q
++);

497 
	}
}

499 
	$vîify_udp_£q
(
thªad_d©a
 *
td
, 
√tio_d©a
 *
nd
,

500 
io_u
 *io_u)

502 
udp_£q
 *
us
;

503 
uöt64_t
 
£q
;

505 i‡(
io_u
->
x„r_buÊí
 < (*
us
))

508 i‡(
nd
->
£q_off
)

511 
us
 = 
io_u
->
x„r_buf
 + io_u->
x„r_buÊí
 - (*us);

512 i‡(
	`À64_to_˝u
(
us
->
magic
Ë!
FIO_UDP_SEQ_MAGIC
)

514 i‡(
	`À64_to_˝u
(
us
->
bs
Ë!
io_u
->
x„r_buÊí
) {

515 
nd
->
£q_off
 = 1;

519 
£q
 = 
	`À64_to_˝u
(
us
->seq);

521 i‡(
£q
 !
nd
->
udp_ªcv_£q
)

522 
td
->
ts
.
dr›_io_u
[
io_u
->
ddú
] +
£q
 - 
nd
->
udp_ªcv_£q
;

524 
nd
->
udp_ªcv_£q
 = 
£q
 + 1;

525 
	}
}

527 
	$fio_√tio_£nd
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

529 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

530 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

531 
ªt
, 
Êags
 = 0;

534 i‡(
	`is_udp
(
o
)) {

535 c⁄° 
sockaddr
 *
to
;

536 
sockÀn_t
 
Àn
;

538 i‡(
	`is_ùv6
(
o
)) {

539 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

540 
Àn
 = (
nd
->
addr6
);

542 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

543 
Àn
 = (
nd
->
addr
);

546 i‡(
td
->
o
.
vîify
 =
VERIFY_NONE
)

547 
	`°‹e_udp_£q
(
nd
, 
io_u
);

549 
ªt
 = 
	`£ndto
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

550 
io_u
->
x„r_buÊí
, 
Êags
, 
to
, 
Àn
);

555 #ifde‡
MSG_MORE


556 i‡((
td
->
this_io_byãs
[
DDIR_WRITE
] + 
io_u
->
x„r_buÊí
 <

557 
td
->
o
.
size
Ë&& !o->
pögp⁄g
)

558 
Êags
 |
MSG_MORE
;

560 
ªt
 = 
	`£nd
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

561 
io_u
->
x„r_buÊí
, 
Êags
);

563 i‡(
ªt
 > 0)

566 
ªt
 = 
	`pﬁl_waô
(
td
, 
io_u
->
fûe
->
fd
, 
POLLOUT
);

567 i‡(
ªt
 <= 0)

571  
ªt
;

572 
	}
}

574 
	$is_˛o£_msg
(
io_u
 *io_u, 
Àn
)

576 
udp_˛o£_msg
 *
msg
;

578 i‡(
Àn
 !(
udp_˛o£_msg
))

581 
msg
 = 
io_u
->
x„r_buf
;

582 i‡(
	`À32_to_˝u
(
msg
->
magic
Ë!
FIO_LINK_OPEN_CLOSE_MAGIC
)

584 i‡(
	`À32_to_˝u
(
msg
->
cmd
Ë!
FIO_LINK_CLOSE
)

588 
	}
}

590 
	$fio_√tio_ªcv
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

592 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

593 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

594 
ªt
, 
Êags
 = 0;

597 i‡(
	`is_udp
(
o
)) {

598 
sockaddr
 *
‰om
;

599 
sockÀn_t
 
l
, *
Àn
 = &l;

601 i‡(
o
->
li°í
) {

602 i‡(!
	`is_ùv6
(
o
)) {

603 
‰om
 = (
sockaddr
 *Ë&
nd
->
addr
;

604 *
Àn
 = (
nd
->
addr
);

606 
‰om
 = (
sockaddr
 *Ë&
nd
->
addr6
;

607 *
Àn
 = (
nd
->
addr6
);

610 
‰om
 = 
NULL
;

611 
Àn
 = 
NULL
;

614 
ªt
 = 
	`ªcv‰om
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

615 
io_u
->
x„r_buÊí
, 
Êags
, 
‰om
, 
Àn
);

617 i‡(
	`is_˛o£_msg
(
io_u
, 
ªt
)) {

618 
td
->
d⁄e
 = 1;

622 
ªt
 = 
	`ªcv
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

623 
io_u
->
x„r_buÊí
, 
Êags
);

625 i‡(
	`is_˛o£_msg
(
io_u
, 
ªt
)) {

626 
td
->
d⁄e
 = 1;

630 i‡(
ªt
 > 0)

632 i‡(!
ªt
 && (
Êags
 & 
MSG_WAITALL
))

635 
ªt
 = 
	`pﬁl_waô
(
td
, 
io_u
->
fûe
->
fd
, 
POLLIN
);

636 i‡(
ªt
 <= 0)

638 
Êags
 |
MSG_WAITALL
;

641 i‡(
	`is_udp
(
o
Ë&& 
td
->o.
vîify
 =
VERIFY_NONE
)

642 
	`vîify_udp_£q
(
td
, 
nd
, 
io_u
);

644  
ªt
;

645 
	}
}

647 
	$__fio_√tio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

648 
fio_ddú
 
ddú
)

650 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

651 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

652 
ªt
;

654 i‡(
ddú
 =
DDIR_WRITE
) {

655 i‡(!
nd
->
u£_•li˚
 || 
	`is_udp
(
o
) ||

656 
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
)

657 
ªt
 = 
	`fio_√tio_£nd
(
td
, 
io_u
);

659 
ªt
 = 
	`fio_√tio_•li˚_out
(
td
, 
io_u
);

660 } i‡(
ddú
 =
DDIR_READ
) {

661 i‡(!
nd
->
u£_•li˚
 || 
	`is_udp
(
o
) ||

662 
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
)

663 
ªt
 = 
	`fio_√tio_ªcv
(
td
, 
io_u
);

665 
ªt
 = 
	`fio_√tio_•li˚_ö
(
td
, 
io_u
);

667 
ªt
 = 0;

669 i‡(
ªt
 !(Ë
io_u
->
x„r_buÊí
) {

670 i‡(
ªt
 > 0) {

671 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

672 
io_u
->
îr‹
 = 0;

673  
FIO_Q_COMPLETED
;

674 } i‡(!
ªt
)

675  
FIO_Q_BUSY
;

677 
îr
 = 
î∫o
;

679 i‡(
ddú
 =
DDIR_WRITE
 && 
îr
 =
EMSGSIZE
)

680  
FIO_Q_BUSY
;

682 
io_u
->
îr‹
 = 
îr
;

686 i‡(
io_u
->
îr‹
)

687 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

689  
FIO_Q_COMPLETED
;

690 
	}
}

692 
	$fio_√tio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

694 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

695 
ªt
;

697 
	`fio_ro_check
(
td
, 
io_u
);

699 
ªt
 = 
	`__fio_√tio_queue
(
td
, 
io_u
, io_u->
ddú
);

700 i‡(!
o
->
pögp⁄g
 || 
ªt
 !
FIO_Q_COMPLETED
)

701  
ªt
;

706 i‡(
	`td_ªad
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_READ
)

707 
ªt
 = 
	`__fio_√tio_queue
(
td
, 
io_u
, 
DDIR_WRITE
);

708 i‡(
	`td_wrôe
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_WRITE
)

709 
ªt
 = 
	`__fio_√tio_queue
(
td
, 
io_u
, 
DDIR_READ
);

711  
ªt
;

712 
	}
}

714 
	$fio_√tio_c⁄√˘
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

716 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

717 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

718 
ty≥
, 
domaö
;

720 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

721 
domaö
 = 
AF_INET
;

722 
ty≥
 = 
SOCK_STREAM
;

723 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP_V6
) {

724 
domaö
 = 
AF_INET6
;

725 
ty≥
 = 
SOCK_STREAM
;

726 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP
) {

727 
domaö
 = 
AF_INET
;

728 
ty≥
 = 
SOCK_DGRAM
;

729 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP_V6
) {

730 
domaö
 = 
AF_INET6
;

731 
ty≥
 = 
SOCK_DGRAM
;

732 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
) {

733 
domaö
 = 
AF_UNIX
;

734 
ty≥
 = 
SOCK_STREAM
;

736 
	`log_îr
("fio: badÇëw‹kÅy≥ %d\n", 
o
->
¥Ÿo
);

737 
f
->
fd
 = -1;

741 
f
->
fd
 = 
	`sockë
(
domaö
, 
ty≥
, 0);

742 i‡(
f
->
fd
 < 0) {

743 
	`td_vîr‹
(
td
, 
î∫o
, "socket");

747 #ifde‡
CONFIG_TCP_NODELAY


748 i‡(
o
->
nodñay
 && 
	`is_t˝
(o)) {

749 
›tvÆ
 = 1;

751 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*Ë&
›tvÆ
, ()) < 0) {

752 
	`log_îr
("fio: c™nŸ së TCP_NODELAY o±i⁄ o¿sockë (%s), dißbÀ wôh 'nodñay=0'\n", 
	`°ªº‹
(
î∫o
));

758 i‡(
	`£t_wödow_size
(
td
, 
f
->
fd
)) {

759 
	`˛o£
(
f
->
fd
);

762 i‡(
	`£t_mss
(
td
, 
f
->
fd
)) {

763 
	`˛o£
(
f
->
fd
);

767 i‡(
	`is_udp
(
o
)) {

768 i‡(!
	`fio_√tio_is_mu…iˇ°
(
td
->
o
.
fûíame
))

770 i‡(
	`is_ùv6
(
o
)) {

771 
	`log_îr
("fio: multicastÇot supported on IPv6\n");

772 
	`˛o£
(
f
->
fd
);

776 i‡(
o
->
ötfc
) {

777 
ö_addr
 
öãrÁ˚_addr
;

779 i‡(
	`öë_©⁄
(
o
->
ötfc
, &
öãrÁ˚_addr
) == 0) {

780 
	`log_îr
("fio: interfaceÇot valid interface IP\n");

781 
	`˛o£
(
f
->
fd
);

784 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
, (c⁄° *)&
öãrÁ˚_addr
, (interface_addr)) < 0) {

785 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt IP_MULTICAST_IF");

786 
	`˛o£
(
f
->
fd
);

790 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
, (c⁄° *)&
o
->
âl
, (o->ttl)) < 0) {

791 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt IP_MULTICAST_TTL");

792 
	`˛o£
(
f
->
fd
);

796 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

797 
sockÀn_t
 
Àn
 = (
nd
->
addr
);

799 i‡(
	`c⁄√˘
(
f
->
fd
, (
sockaddr
 *Ë&
nd
->
addr
, 
Àn
) < 0) {

800 
	`td_vîr‹
(
td
, 
î∫o
, "connect");

801 
	`˛o£
(
f
->
fd
);

804 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP_V6
) {

805 
sockÀn_t
 
Àn
 = (
nd
->
addr6
);

807 i‡(
	`c⁄√˘
(
f
->
fd
, (
sockaddr
 *Ë&
nd
->
addr6
, 
Àn
) < 0) {

808 
	`td_vîr‹
(
td
, 
î∫o
, "connect");

809 
	`˛o£
(
f
->
fd
);

814 
sockaddr_un
 *
addr
 = &
nd
->
addr_un
;

815 
sockÀn_t
 
Àn
;

817 
Àn
 = (
addr
->
sun_Ámûy
Ë+ 
	`°æí
◊ddr->
sun_∑th
) + 1;

819 i‡(
	`c⁄√˘
(
f
->
fd
, (
sockaddr
 *Ë
addr
, 
Àn
) < 0) {

820 
	`td_vîr‹
(
td
, 
î∫o
, "connect");

821 
	`˛o£
(
f
->
fd
);

827 
	}
}

829 
	$fio_√tio_ac˚±
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

831 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

832 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

833 
sockÀn_t
 
sockÀn
;

834 
°©e
;

836 i‡(
	`is_udp
(
o
)) {

837 
f
->
fd
 = 
nd
->
li°ífd
;

841 
°©e
 = 
td
->
run°©e
;

842 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

844 
	`log_öfo
("fio: waiting for connection\n");

846 i‡(
	`pﬁl_waô
(
td
, 
nd
->
li°ífd
, 
POLLIN
) < 0)

847 
îr
;

849 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

850 
sockÀn
 = (
nd
->
addr
);

851 
f
->
fd
 = 
	`ac˚±
(
nd
->
li°ífd
, (
sockaddr
 *Ë&nd->
addr
, &
sockÀn
);

853 
sockÀn
 = (
nd
->
addr6
);

854 
f
->
fd
 = 
	`ac˚±
(
nd
->
li°ífd
, (
sockaddr
 *Ë&nd->
addr6
, &
sockÀn
);

857 i‡(
f
->
fd
 < 0) {

858 
	`td_vîr‹
(
td
, 
î∫o
, "accept");

859 
îr
;

862 #ifde‡
CONFIG_TCP_NODELAY


863 i‡(
o
->
nodñay
 && 
	`is_t˝
(o)) {

864 
›tvÆ
 = 1;

866 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*Ë&
›tvÆ
, ()) < 0) {

867 
	`log_îr
("fio: c™nŸ së TCP_NODELAY o±i⁄ o¿sockë (%s), dißbÀ wôh 'nodñay=0'\n", 
	`°ªº‹
(
î∫o
));

873 
	`ª£t_Æl_°©s
(
td
);

874 
	`td_£t_run°©e
(
td
, 
°©e
);

876 
îr
:

877 
	`td_£t_run°©e
(
td
, 
°©e
);

879 
	}
}

881 
	$fio_√tio_£nd_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

883 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

884 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

885 
udp_˛o£_msg
 
msg
;

886 
sockaddr
 *
to
;

887 
sockÀn_t
 
Àn
;

888 
ªt
;

890 i‡(
	`is_ùv6
(
o
)) {

891 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

892 
Àn
 = (
nd
->
addr6
);

894 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

895 
Àn
 = (
nd
->
addr
);

898 
msg
.
magic
 = 
	`˝u_to_À32
((
uöt32_t
Ë
FIO_LINK_OPEN_CLOSE_MAGIC
);

899 
msg
.
cmd
 = 
	`˝u_to_À32
((
uöt32_t
Ë
FIO_LINK_CLOSE
);

901 
ªt
 = 
	`£ndto
(
f
->
fd
, (*Ë&
msg
, (msg), 
MSG_WAITALL
, 
to
, 
Àn
);

902 i‡(
ªt
 < 0)

903 
	`td_vîr‹
(
td
, 
î∫o
, "sendto udpÜink close");

904 
	}
}

906 
	$fio_√tio_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

911 
	`fio_√tio_£nd_˛o£
(
td
, 
f
);

913  
	`gíîic_˛o£_fûe
(
td
, 
f
);

914 
	}
}

916 
	$fio_√tio_udp_ªcv_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

918 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

919 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

920 
udp_˛o£_msg
 
msg
;

921 
sockaddr
 *
to
;

922 
sockÀn_t
 
Àn
;

923 
ªt
;

925 i‡(
	`is_ùv6
(
o
)) {

926 
Àn
 = (
nd
->
addr6
);

927 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

929 
Àn
 = (
nd
->
addr
);

930 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

933 
ªt
 = 
	`ªcv‰om
(
f
->
fd
, (*Ë&
msg
, (msg), 
MSG_WAITALL
, 
to
, &
Àn
);

934 i‡(
ªt
 < 0) {

935 
	`td_vîr‹
(
td
, 
î∫o
, "recvfrom udpÜink open");

936  
ªt
;

939 i‡(
	`¡ohl
(
msg
.
magic
Ë!
FIO_LINK_OPEN_CLOSE_MAGIC
 ||

940 
	`¡ohl
(
msg
.
cmd
Ë!
FIO_LINK_OPEN
) {

941 
	`log_îr
("fio: bad ud∞›í magi¯%x/%x\n", 
	`¡ohl
(
msg
.
magic
),

942 
	`¡ohl
(
msg
.
cmd
));

946 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

948 
	}
}

950 
	$fio_√tio_£nd_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

952 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

953 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

954 
udp_˛o£_msg
 
msg
;

955 
sockaddr
 *
to
;

956 
sockÀn_t
 
Àn
;

957 
ªt
;

959 i‡(
	`is_ùv6
(
o
)) {

960 
Àn
 = (
nd
->
addr6
);

961 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

963 
Àn
 = (
nd
->
addr
);

964 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

967 
msg
.
magic
 = 
	`ht⁄l
(
FIO_LINK_OPEN_CLOSE_MAGIC
);

968 
msg
.
cmd
 = 
	`ht⁄l
(
FIO_LINK_OPEN
);

970 
ªt
 = 
	`£ndto
(
f
->
fd
, (*Ë&
msg
, (msg), 
MSG_WAITALL
, 
to
, 
Àn
);

971 i‡(
ªt
 < 0) {

972 
	`td_vîr‹
(
td
, 
î∫o
, "sendto udpÜink open");

973  
ªt
;

977 
	}
}

979 
	$fio_√tio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

981 
ªt
;

982 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

984 i‡(
o
->
li°í
)

985 
ªt
 = 
	`fio_√tio_ac˚±
(
td
, 
f
);

987 
ªt
 = 
	`fio_√tio_c⁄√˘
(
td
, 
f
);

989 i‡(
ªt
) {

990 
f
->
fd
 = -1;

991  
ªt
;

994 i‡(
	`is_udp
(
o
)) {

995 i‡(
	`td_wrôe
(
td
))

996 
ªt
 = 
	`fio_√tio_£nd_›í
(
td
, 
f
);

998 
°©e
;

1000 
°©e
 = 
td
->
run°©e
;

1001 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

1002 
ªt
 = 
	`fio_√tio_udp_ªcv_›í
(
td
, 
f
);

1003 
	`td_£t_run°©e
(
td
, 
°©e
);

1007 i‡(
ªt
)

1008 
	`fio_√tio_˛o£_fûe
(
td
, 
f
);

1010  
ªt
;

1011 
	}
}

1013 
	$fio_fûl_addr
(
thªad_d©a
 *
td
, c⁄° *
ho°
, 
af
,

1014 *
d°
, 
addröfo
 **
ªs
)

1016 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1017 
addröfo
 
höts
;

1018 
ªt
;

1020 i‡(
	`öë_±⁄
(
af
, 
ho°
, 
d°
))

1023 
	`mem£t
(&
höts
, 0, (hints));

1025 i‡(
	`is_t˝
(
o
))

1026 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1028 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

1030 i‡(
	`is_ùv6
(
o
))

1031 
höts
.
ai_Ámûy
 = 
AF_INET6
;

1033 
höts
.
ai_Ámûy
 = 
AF_INET
;

1035 
ªt
 = 
	`gëaddröfo
(
ho°
, 
NULL
, &
höts
, 
ªs
);

1036 i‡(
ªt
) {

1037 
e
 = 
EINVAL
;

1038 
°r
[128];

1040 i‡(
ªt
 =
EAI_SYSTEM
)

1041 
e
 = 
î∫o
;

1043 
	`¢¥ötf
(
°r
, (°r), "gëaddröfo: %s", 
	`gai_°ªº‹
(
ªt
));

1044 
	`td_vîr‹
(
td
, 
e
, 
°r
);

1049 
	}
}

1051 
	$fio_√tio_£tup_c⁄√˘_öë
(
thªad_d©a
 *
td
,

1052 c⁄° *
ho°
, 
p‹t
)

1054 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1055 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1056 
addröfo
 *
ªs
 = 
NULL
;

1057 *
d°
, *
§c
;

1058 
af
, 
Àn
;

1060 i‡(!
ho°
) {

1061 
	`log_îr
("fio: connect withÇo hostÅo connectÅo.\n");

1062 i‡(
	`td_ªad
(
td
))

1063 
	`log_îr
("fio: did you forgetÅo set 'listen'?\n");

1065 
	`td_vîr‹
(
td
, 
EINVAL
, "no hostname= set");

1069 
nd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

1070 
nd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1071 
nd
->
addr6
.
sö6_Ámûy
 = 
AF_INET6
;

1072 
nd
->
addr6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

1074 i‡(
	`is_ùv6
(
o
)) {

1075 
af
 = 
AF_INET6
;

1076 
d°
 = &
nd
->
addr6
.
sö6_addr
;

1078 
af
 = 
AF_INET
;

1079 
d°
 = &
nd
->
addr
.
sö_addr
;

1082 i‡(
	`fio_fûl_addr
(
td
, 
ho°
, 
af
, 
d°
, &
ªs
))

1085 i‡(!
ªs
)

1088 i‡(
	`is_ùv6
(
o
)) {

1089 
Àn
 = (
nd
->
addr6
.
sö6_addr
);

1090 
§c
 = &((
sockaddr_ö6
 *Ë
ªs
->
ai_addr
)->
sö6_addr
;

1092 
Àn
 = (
nd
->
addr
.
sö_addr
);

1093 
§c
 = &((
sockaddr_ö
 *Ë
ªs
->
ai_addr
)->
sö_addr
;

1096 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

1097 
	`‰ìaddröfo
(
ªs
);

1099 
	}
}

1101 
	$fio_√tio_£tup_c⁄√˘_unix
(
thªad_d©a
 *
td
,

1102 c⁄° *
∑th
)

1104 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1105 
sockaddr_un
 *
soun
 = &
nd
->
addr_un
;

1107 
soun
->
sun_Ámûy
 = 
AF_UNIX
;

1108 
	`mem£t
(
soun
->
sun_∑th
, 0, (soun->sun_path));

1109 
	`°∫˝y
(
soun
->
sun_∑th
, 
∑th
, (soun->sun_path) - 1);

1111 
	}
}

1113 
	$fio_√tio_£tup_c⁄√˘
(
thªad_d©a
 *
td
)

1115 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1117 i‡(
	`is_udp
(
o
Ë|| 
	`is_t˝
(o))

1118  
	`fio_√tio_£tup_c⁄√˘_öë
(
td
,Åd->
o
.
fûíame
,o->
p‹t
);

1120  
	`fio_√tio_£tup_c⁄√˘_unix
(
td
,Åd->
o
.
fûíame
);

1121 
	}
}

1123 
	$fio_√tio_£tup_li°í_unix
(
thªad_d©a
 *
td
, c⁄° *
∑th
)

1125 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1126 
sockaddr_un
 *
addr
 = &
nd
->
addr_un
;

1127 
mode_t
 
mode
;

1128 
Àn
, 
fd
;

1130 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

1131 i‡(
fd
 < 0) {

1132 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

1136 
mode
 = 
	`umask
(000);

1138 
	`mem£t
(
addr
, 0, (*addr));

1139 
addr
->
sun_Ámûy
 = 
AF_UNIX
;

1140 
	`°∫˝y
(
addr
->
sun_∑th
, 
∑th
, (addr->sun_path) - 1);

1141 
	`u∆ök
(
∑th
);

1143 
Àn
 = (
addr
->
sun_Ámûy
Ë+ 
	`°æí
(
∑th
) + 1;

1145 i‡(
	`böd
(
fd
, (
sockaddr
 *Ë
addr
, 
Àn
) < 0) {

1146 
	`log_îr
("fio: böd: %s\n", 
	`°ªº‹
(
î∫o
));

1147 
	`˛o£
(
fd
);

1151 
	`umask
(
mode
);

1152 
nd
->
li°ífd
 = 
fd
;

1154 
	}
}

1156 
	$fio_√tio_£tup_li°í_öë
(
thªad_d©a
 *
td
, 
p‹t
)

1158 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1159 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1160 
ù_mªq
 
mr
;

1161 
sockaddr_ö
 
sö
;

1162 
sockaddr
 *
ßddr
;

1163 
fd
, 
›t
, 
ty≥
, 
domaö
;

1164 
sockÀn_t
 
Àn
;

1166 
	`mem£t
(&
sö
, 0, (sin));

1168 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

1169 
ty≥
 = 
SOCK_STREAM
;

1170 
domaö
 = 
AF_INET
;

1171 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP_V6
) {

1172 
ty≥
 = 
SOCK_STREAM
;

1173 
domaö
 = 
AF_INET6
;

1174 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP
) {

1175 
ty≥
 = 
SOCK_DGRAM
;

1176 
domaö
 = 
AF_INET
;

1177 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP_V6
) {

1178 
ty≥
 = 
SOCK_DGRAM
;

1179 
domaö
 = 
AF_INET6
;

1181 
	`log_îr
("fio: unknow¿¥Ÿÿ%d\n", 
o
->
¥Ÿo
);

1185 
fd
 = 
	`sockë
(
domaö
, 
ty≥
, 0);

1186 i‡(
fd
 < 0) {

1187 
	`td_vîr‹
(
td
, 
î∫o
, "socket");

1191 
›t
 = 1;

1192 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
›t
, (opt)) < 0) {

1193 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt");

1194 
	`˛o£
(
fd
);

1197 #ifde‡
SO_REUSEPORT


1198 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEPORT
, (*Ë&
›t
, (opt)) < 0) {

1199 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt");

1200 
	`˛o£
(
fd
);

1205 i‡(
	`£t_wödow_size
(
td
, 
fd
)) {

1206 
	`˛o£
(
fd
);

1209 i‡(
	`£t_mss
(
td
, 
fd
)) {

1210 
	`˛o£
(
fd
);

1214 i‡(
td
->
o
.
fûíame
) {

1215 i‡(!
	`is_udp
(
o
Ë|| !
	`fio_√tio_is_mu…iˇ°
(
td
->o.
fûíame
)) {

1216 
	`log_îr
("fio: hostnameÇot valid forÇon-multicast inboundÇetwork IO\n");

1217 
	`˛o£
(
fd
);

1220 i‡(
	`is_ùv6
(
o
)) {

1221 
	`log_îr
("fio: IPv6Çot supported for multicastÇetwork IO\n");

1222 
	`˛o£
(
fd
);

1226 
	`öë_©⁄
(
td
->
o
.
fûíame
, &
sö
.
sö_addr
);

1228 
mr
.
imr_mu…üddr
 = 
sö
.
sö_addr
;

1229 i‡(
o
->
ötfc
) {

1230 i‡(
	`öë_©⁄
(
o
->
ötfc
, &
mr
.
imr_öãrÁ˚
) == 0) {

1231 
	`log_îr
("fio: interfaceÇot valid interface IP\n");

1232 
	`˛o£
(
fd
);

1236 
mr
.
imr_öãrÁ˚
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

1239 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
, (c⁄° *)&
mr
, (mr)) < 0) {

1240 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt IP_ADD_MEMBERSHIP");

1241 
	`˛o£
(
fd
);

1246 i‡(!
	`is_ùv6
(
o
)) {

1247 
ßddr
 = (
sockaddr
 *Ë&
nd
->
addr
;

1248 
Àn
 = (
nd
->
addr
);

1250 
nd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

1251 
nd
->
addr
.
sö_addr
.
s_addr
 = 
sö
.sö_addr.s_add∏? sö.sö_addr.s_add∏: 
	`ht⁄l
(
INADDR_ANY
);

1252 
nd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1254 
ßddr
 = (
sockaddr
 *Ë&
nd
->
addr6
;

1255 
Àn
 = (
nd
->
addr6
);

1257 
nd
->
addr6
.
sö6_Ámûy
 = 
AF_INET6
;

1258 
nd
->
addr6
.
sö6_addr
 = 
ö6addr_™y
;

1259 
nd
->
addr6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

1262 i‡(
	`böd
(
fd
, 
ßddr
, 
Àn
) < 0) {

1263 
	`˛o£
(
fd
);

1264 
	`td_vîr‹
(
td
, 
î∫o
, "bind");

1268 
nd
->
li°ífd
 = 
fd
;

1270 
	}
}

1272 
	$fio_√tio_£tup_li°í
(
thªad_d©a
 *
td
)

1274 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1275 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1276 
ªt
;

1278 i‡(
	`is_udp
(
o
Ë|| 
	`is_t˝
(o))

1279 
ªt
 = 
	`fio_√tio_£tup_li°í_öë
(
td
, 
o
->
p‹t
);

1281 
ªt
 = 
	`fio_√tio_£tup_li°í_unix
(
td
,Åd->
o
.
fûíame
);

1283 i‡(
ªt
)

1284  
ªt
;

1285 i‡(
	`is_udp
(
o
))

1288 i‡(
	`li°í
(
nd
->
li°ífd
, 10) < 0) {

1289 
	`td_vîr‹
(
td
, 
î∫o
, "listen");

1290 
nd
->
li°ífd
 = -1;

1295 
	}
}

1297 
	$fio_√tio_öô
(
thªad_d©a
 *
td
)

1299 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1300 
ªt
;

1302 #ifde‡
WIN32


1303 
WSADATA
 
wsd
;

1304 
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wsd
);

1307 i‡(
	`td_øndom
(
td
)) {

1308 
	`log_îr
("fio:Çetwork IO can't beÑandom\n");

1312 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
 && o->
p‹t
) {

1313 
	`log_îr
("fio:Çetwork IOÖortÇot valid with unix socket\n");

1315 } i‡(
o
->
¥Ÿo
 !
FIO_TYPE_UNIX
 && !o->
p‹t
) {

1316 
	`log_îr
("fio:Çetwork IOÑequiresÖort forÅcp or udp\n");

1320 
o
->
p‹t
 +
td
->
subjob_numbî
;

1322 i‡(!
	`is_t˝
(
o
)) {

1323 i‡(
o
->
li°í
) {

1324 
	`log_îr
("fio:Üisten only valid for TCPÖroto IO\n");

1327 i‡(
	`td_rw
(
td
)) {

1328 
	`log_îr
("fio: datagramÇetwork connections must be"

1332 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
 && !
td
->o.
fûíame
) {

1333 
	`log_îr
("fio: UNIX socketsÇeed host/filename\n");

1336 
o
->
li°í
 = 
	`td_ªad
(
td
);

1339 i‡(
o
->
li°í
)

1340 
ªt
 = 
	`fio_√tio_£tup_li°í
(
td
);

1342 
ªt
 = 
	`fio_√tio_£tup_c⁄√˘
(
td
);

1344  
ªt
;

1345 
	}
}

1347 
	$fio_√tio_˛ónup
(
thªad_d©a
 *
td
)

1349 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1351 i‡(
nd
) {

1352 i‡(
nd
->
li°ífd
 != -1)

1353 
	`˛o£
(
nd
->
li°ífd
);

1354 i‡(
nd
->
pùes
[0] != -1)

1355 
	`˛o£
(
nd
->
pùes
[0]);

1356 i‡(
nd
->
pùes
[1] != -1)

1357 
	`˛o£
(
nd
->
pùes
[1]);

1359 
	`‰ì
(
nd
);

1361 
	}
}

1363 
	$fio_√tio_£tup
(
thªad_d©a
 *
td
)

1365 
√tio_d©a
 *
nd
;

1367 i‡(!
td
->
fûes_ödex
) {

1368 
	`add_fûe
(
td
,Åd->
o
.
fûíame
 ?: "net", 0, 0);

1369 
td
->
o
.
ƒ_fûes
 =Åd->o.nr_files ?: 1;

1370 
td
->
o
.
›í_fûes
++;

1373 i‡(!
td
->
io_›s_d©a
) {

1374 
nd
 = 
	`mÆloc
((*nd));

1376 
	`mem£t
(
nd
, 0, (*nd));

1377 
nd
->
li°ífd
 = -1;

1378 
nd
->
pùes
[0] =Çd->pipes[1] = -1;

1379 
td
->
io_›s_d©a
 = 
nd
;

1383 
	}
}

1385 
	$fio_√tio_ãrmö©e
(
thªad_d©a
 *
td
)

1387 
	`kûl
(
td
->
pid
, 
SIGTERM
);

1388 
	}
}

1390 #ifde‡
CONFIG_LINUX_SPLICE


1391 
	$fio_√tio_£tup_•li˚
(
thªad_d©a
 *
td
)

1393 
√tio_d©a
 *
nd
;

1395 
	`fio_√tio_£tup
(
td
);

1397 
nd
 = 
td
->
io_›s_d©a
;

1398 i‡(
nd
) {

1399 i‡(
	`pùe
(
nd
->
pùes
) < 0)

1402 
nd
->
u£_•li˚
 = 1;

1407 
	}
}

1409 
i€ngöe_›s
 
	gi€ngöe_•li˚
 = {

1410 .
«me
 = "netsplice",

1411 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1412 .
	g¥ï
 = 
fio_√tio_¥ï
,

1413 .
	gqueue
 = 
fio_√tio_queue
,

1414 .
	g£tup
 = 
fio_√tio_£tup_•li˚
,

1415 .
	göô
 = 
fio_√tio_öô
,

1416 .
	g˛ónup
 = 
fio_√tio_˛ónup
,

1417 .
	g›í_fûe
 = 
fio_√tio_›í_fûe
,

1418 .
	g˛o£_fûe
 = 
fio_√tio_˛o£_fûe
,

1419 .
	gãrmö©e
 = 
fio_√tio_ãrmö©e
,

1420 .
	g›ti⁄s
 = 
›ti⁄s
,

1421 .
	g›ti⁄_°ru˘_size
 = (
√tio_›ti⁄s
),

1422 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_UNIDIR
 |

1423 
FIO_PIPEIO
,

1427 
i€ngöe_›s
 
	gi€ngöe_rw
 = {

1428 .
«me
 = "net",

1429 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1430 .
	g¥ï
 = 
fio_√tio_¥ï
,

1431 .
	gqueue
 = 
fio_√tio_queue
,

1432 .
	g£tup
 = 
fio_√tio_£tup
,

1433 .
	göô
 = 
fio_√tio_öô
,

1434 .
	g˛ónup
 = 
fio_√tio_˛ónup
,

1435 .
	g›í_fûe
 = 
fio_√tio_›í_fûe
,

1436 .
	g˛o£_fûe
 = 
fio_√tio_˛o£_fûe
,

1437 .
	gãrmö©e
 = 
fio_√tio_ãrmö©e
,

1438 .
	g›ti⁄s
 = 
›ti⁄s
,

1439 .
	g›ti⁄_°ru˘_size
 = (
√tio_›ti⁄s
),

1440 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_UNIDIR
 |

1441 
FIO_PIPEIO
 | 
FIO_BIT_BASED
,

1444 
	$°r_ho°«me_cb
(*
d©a
, c⁄° *
öput
)

1446 
√tio_›ti⁄s
 *
o
 = 
d©a
;

1448 i‡(
o
->
td
->o.
fûíame
)

1449 
	`‰ì
(
o
->
td
->o.
fûíame
);

1450 
o
->
td
->o.
fûíame
 = 
	`°rdup
(
öput
);

1452 
	}
}

1454 
fio_öô
 
	$fio_√tio_ªgi°î
()

1456 
	`ªgi°î_i€ngöe
(&
i€ngöe_rw
);

1457 #ifde‡
CONFIG_LINUX_SPLICE


1458 
	`ªgi°î_i€ngöe
(&
i€ngöe_•li˚
);

1460 
	}
}

1462 
fio_exô
 
	$fio_√tio_uƒegi°î
()

1464 
	`uƒegi°î_i€ngöe
(&
i€ngöe_rw
);

1465 #ifde‡
CONFIG_LINUX_SPLICE


1466 
	`uƒegi°î_i€ngöe
(&
i€ngöe_•li˚
);

1468 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/null.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<î∫o.h
>

20 
	~<as£π.h
>

22 
	~"../fio.h
"

24 
	snuŒ_d©a
 {

25 
io_u
 **
	mio_us
;

26 
	mqueued
;

27 
	mevíts
;

30 
io_u
 *
	$nuŒ_evít
(
nuŒ_d©a
 *
nd
, 
evít
)

32  
nd
->
io_us
[
evít
];

33 
	}
}

35 
	$nuŒ_gëevíts
(
nuŒ_d©a
 *
nd
, 
mö_evíts
,

36 
fio_unu£d
 
max
,

37 c⁄° 
time•ec
 
fio_unu£d
 *
t
)

39 
ªt
 = 0;

41 i‡(
mö_evíts
) {

42 
ªt
 = 
nd
->
evíts
;

43 
nd
->
evíts
 = 0;

46  
ªt
;

47 
	}
}

49 
	$nuŒ_commô
(
thªad_d©a
 *
td
, 
nuŒ_d©a
 *
nd
)

51 i‡(!
nd
->
evíts
) {

52 #i‚de‡
FIO_EXTERNAL_ENGINE


53 
	`io_u_m¨k_submô
(
td
, 
nd
->
queued
);

55 
nd
->
evíts
 =Çd->
queued
;

56 
nd
->
queued
 = 0;

60 
	}
}

62 
	$nuŒ_queue
(
thªad_d©a
 *
td
, 
nuŒ_d©a
 *
nd
,

63 
io_u
 *io_u)

65 
	`fio_ro_check
(
td
, 
io_u
);

67 i‡(
td
->
io_›s
->
Êags
 & 
FIO_SYNCIO
)

68  
FIO_Q_COMPLETED
;

69 i‡(
nd
->
evíts
)

70  
FIO_Q_BUSY
;

72 
nd
->
io_us
[nd->
queued
++] = 
io_u
;

73  
FIO_Q_QUEUED
;

74 
	}
}

76 
	$nuŒ_›í
(
nuŒ_d©a
 
fio_unu£d
 *
nd
,

77 
fio_fûe
 
fio_unu£d
 *
f
)

80 
	}
}

82 
	$nuŒ_˛ónup
(
nuŒ_d©a
 *
nd
)

84 i‡(
nd
) {

85 
	`‰ì
(
nd
->
io_us
);

86 
	`‰ì
(
nd
);

88 
	}
}

90 
nuŒ_d©a
 *
	$nuŒ_öô
(
thªad_d©a
 *
td
)

92 
nuŒ_d©a
 *
nd
 = (nuŒ_d©®*Ë
	`mÆloc
((*nd));

94 
	`mem£t
(
nd
, 0, (*nd));

96 i‡(
td
->
o
.
iodïth
 != 1) {

97 
nd
->
io_us
 = (
io_u
 **Ë
	`mÆloc
(
td
->
o
.
iodïth
 * (io_u *));

98 
	`mem£t
(
nd
->
io_us
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

100 
td
->
io_›s
->
Êags
 |
FIO_SYNCIO
;

102  
nd
;

103 
	}
}

105 #i‚de‡
__˝lu•lus


107 
io_u
 *
	$fio_nuŒ_evít
(
thªad_d©a
 *
td
, 
evít
)

109  
	`nuŒ_evít
(
td
->
io_›s_d©a
, 
evít
);

110 
	}
}

112 
	$fio_nuŒ_gëevíts
(
thªad_d©a
 *
td
, 
mö_evíts
,

113 
max
, c⁄° 
time•ec
 *
t
)

115 
nuŒ_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

116  
	`nuŒ_gëevíts
(
nd
, 
mö_evíts
, 
max
, 
t
);

117 
	}
}

119 
	$fio_nuŒ_commô
(
thªad_d©a
 *
td
)

121  
	`nuŒ_commô
(
td
,Åd->
io_›s_d©a
);

122 
	}
}

124 
	$fio_nuŒ_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

126  
	`nuŒ_queue
(
td
,Åd->
io_›s_d©a
, 
io_u
);

127 
	}
}

129 
	$fio_nuŒ_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

131  
	`nuŒ_›í
(
td
->
io_›s_d©a
, 
f
);

132 
	}
}

134 
	$fio_nuŒ_˛ónup
(
thªad_d©a
 *
td
)

136 
	`nuŒ_˛ónup
(
td
->
io_›s_d©a
);

137 
	}
}

139 
	$fio_nuŒ_öô
(
thªad_d©a
 *
td
)

141 
td
->
io_›s_d©a
 = 
	`nuŒ_öô
(td);

142 
	`as£π
(
td
->
io_›s_d©a
);

144 
	}
}

146 
i€ngöe_›s
 
	gi€ngöe
 = {

147 .
«me
 = "null",

148 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

149 .
	gqueue
 = 
fio_nuŒ_queue
,

150 .
	gcommô
 = 
fio_nuŒ_commô
,

151 .
	ggëevíts
 = 
fio_nuŒ_gëevíts
,

152 .
	gevít
 = 
fio_nuŒ_evít
,

153 .
	göô
 = 
fio_nuŒ_öô
,

154 .
	g˛ónup
 = 
fio_nuŒ_˛ónup
,

155 .
	g›í_fûe
 = 
fio_nuŒ_›í
,

156 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_FAKEIO
,

159 
fio_öô
 
	$fio_nuŒ_ªgi°î
()

161 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

162 
	}
}

164 
fio_exô
 
	$fio_nuŒ_uƒegi°î
()

166 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

167 
	}
}

171 #ifde‡
FIO_EXTERNAL_ENGINE


173 
	sNuŒD©a
 {

174 
NuŒD©a
(
thªad_d©a
 *
td
)

176 
	mim∂_
 = 
nuŒ_öô
(
td
);

177 
as£π
(
im∂_
);

180 ~
NuŒD©a
()

182 
nuŒ_˛ónup
(
im∂_
);

185 
NuŒD©a
 *
gë
(
thªad_d©a
 *
td
)

187  
	mªöãΩªt_ˇ°
<
	mNuŒD©a
 *>(
	mtd
->
	mio_›s_d©a
);

190 
io_u
 *
fio_nuŒ_evít
(
thªad_d©a
 *, 
evít
)

192  
nuŒ_evít
(
im∂_
, 
evít
);

195 
fio_nuŒ_gëevíts
(
thªad_d©a
 *, 
mö_evíts
,

196 
max
, c⁄° 
time•ec
 *
t
)

198  
nuŒ_gëevíts
(
im∂_
, 
mö_evíts
, 
max
, 
t
);

201 
fio_nuŒ_commô
(
thªad_d©a
 *
td
)

203  
nuŒ_commô
(
td
, 
im∂_
);

206 
fio_nuŒ_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

208  
nuŒ_queue
(
td
, 
im∂_
, 
io_u
);

211 
fio_nuŒ_›í
(
thªad_d©a
 *, 
fio_fûe
 *
f
)

213  
nuŒ_›í
(
im∂_
, 
f
);

216 
	m¥iv©e
:

217 
nuŒ_d©a
 *
im∂_
;

222 
io_u
 *
fio_nuŒ_evít
(
thªad_d©a
 *
td
, 
evít
)

224  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_evít
—d, 
evít
);

227 
fio_nuŒ_gëevíts
(
thªad_d©a
 *
td
, 
mö_evíts
,

228 
max
, c⁄° 
time•ec
 *
t
)

230  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_gëevíts
—d, 
mö_evíts
, 
max
, 
t
);

233 
fio_nuŒ_commô
(
thªad_d©a
 *
td
)

235  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_commô
(td);

238 
fio_nuŒ_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

240  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_queue
—d, 
io_u
);

243 
fio_nuŒ_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

245  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_›í
—d, 
f
);

248 
fio_nuŒ_öô
(
thªad_d©a
 *
td
)

250 
td
->
io_›s_d©a
 = 
√w
 
NuŒD©a
(td);

254 
fio_nuŒ_˛ónup
(
thªad_d©a
 *
td
)

256 
dñëe
 
NuŒD©a
::
gë
(
td
);

259 
i€ngöe_›s
 
i€ngöe
;

260 
gë_i€ngöe
(
i€ngöe_›s
 **
i€ngöe_±r
)

262 *
i€ngöe_±r
 = &
i€ngöe
;

264 
i€ngöe
.
«me
 = "cpp_null";

265 
i€ngöe
.
vîsi⁄
 = 
FIO_IOOPS_VERSION
;

266 
i€ngöe
.
queue
 = 
fio_nuŒ_queue
;

267 
i€ngöe
.
commô
 = 
fio_nuŒ_commô
;

268 
i€ngöe
.
gëevíts
 = 
fio_nuŒ_gëevíts
;

269 
i€ngöe
.
evít
 = 
fio_nuŒ_evít
;

270 
i€ngöe
.
öô
 = 
fio_nuŒ_öô
;

271 
i€ngöe
.
˛ónup
 = 
fio_nuŒ_˛ónup
;

272 
i€ngöe
.
›í_fûe
 = 
fio_nuŒ_›í
;

273 
i€ngöe
.
Êags
 = 
FIO_DISKLESSIO
 | 
FIO_FAKEIO
;

	@/home/ysjin/Desktop/fio/fio/engines/pmemblk.c

64 
	~<°dio.h
>

65 
	~<°dlib.h
>

66 
	~<uni°d.h
>

67 
	~<sys/uio.h
>

68 
	~<î∫o.h
>

69 
	~<as£π.h
>

70 
	~<°rög.h
>

71 
	~<libpmem.h
>

72 
	~<libpmemblk.h
>

74 
	~"../fio.h
"

79 
fio_pmemblk_fûe
 *
	tfio_pmemblk_fûe_t
;

81 
	sfio_pmemblk_fûe
 {

82 
fio_pmemblk_fûe_t
 
	mpmb_√xt
;

83 *
	mpmb_fûíame
;

84 
uöt64_t
 
	mpmb_ªf˙t
;

85 
PMEMblkpoﬁ
 *
	mpmb_poﬁ
;

86 
size_t
 
	mpmb_bsize
;

87 
size_t
 
	mpmb_nblocks
;

90 
fio_pmemblk_fûe_t
 
	gCache
;

92 
±hªad_muãx_t
 
	gCacheLock
 = 
PTHREAD_MUTEX_INITIALIZER
;

94 
	#PMB_CREATE
 (0x0001Ë

	)

96 
fio_pmemblk_fûe_t
 
	$fio_pmemblk_ˇche_lookup
(c⁄° *
fûíame
)

98 
fio_pmemblk_fûe_t
 
i
;

100 
i
 = 
Cache
; i !
NULL
; i = i->
pmb_√xt
)

101 i‡(!
	`°rcmp
(
fûíame
, 
i
->
pmb_fûíame
))

102  
i
;

104  
NULL
;

105 
	}
}

107 
	$fio_pmemblk_ˇche_ö£π
(
fio_pmemblk_fûe_t
 
pmb
)

109 
pmb
->
pmb_√xt
 = 
Cache
;

110 
Cache
 = 
pmb
;

111 
	}
}

113 
	$fio_pmemblk_ˇche_ªmove
(
fio_pmemblk_fûe_t
 
pmb
)

115 
fio_pmemblk_fûe_t
 
i
;

117 i‡(
pmb
 =
Cache
) {

118 
Cache
 = Cache->
pmb_√xt
;

119 
pmb
->
pmb_√xt
 = 
NULL
;

123 
i
 = 
Cache
; i !
NULL
; i = i->
pmb_√xt
)

124 i‡(
pmb
 =
i
->
pmb_√xt
) {

125 
i
->
pmb_√xt
 = i->pmb_next->pmb_next;

126 
pmb
->
pmb_√xt
 = 
NULL
;

129 
	}
}

149 
	$pmb_∑r£_∑th
(c⁄° *
∑th•ec
, **
µ©h
, 
uöt64_t
 *
pbsize
,

150 
uöt64_t
 *
pfsize
)

152 *
∑th
;

153 *
s
;

154 
uöt64_t
 
bsize
;

155 
uöt64_t
 
fsizemib
;

157 
∑th
 = 
	`°rdup
(
∑th•ec
);

158 i‡(!
∑th
) {

159 *
µ©h
 = 
NULL
;

164 
s
 = 
	`°ºchr
(
∑th
, ',');

165 i‡(
s
 && (
fsizemib
 = 
	`°πouŒ
(†+ 1, 
NULL
, 10))) {

166 *
s
 = 0;

167 
s
 = 
	`°ºchr
(
∑th
, ',');

168 i‡(
s
 && (
bsize
 = 
	`°πouŒ
(†+ 1, 
NULL
, 10))) {

169 *
s
 = 0;

170 *
µ©h
 = 
∑th
;

171 *
pbsize
 = 
bsize
;

172 *
pfsize
 = 
fsizemib
 << 20;

178 
	`°r˝y
(
∑th
, 
∑th•ec
);

179 *
µ©h
 = 
∑th
;

180 *
pbsize
 = 0;

181 *
pfsize
 = 0;

182 
	}
}

184 
fio_pmemblk_fûe_t
 
	$pmb_›í
(c⁄° *
∑th•ec
, 
Êags
)

186 
fio_pmemblk_fûe_t
 
pmb
;

187 *
∑th
 = 
NULL
;

188 
uöt64_t
 
bsize
 = 0;

189 
uöt64_t
 
fsize
 = 0;

191 
	`pmb_∑r£_∑th
(
∑th•ec
, &
∑th
, &
bsize
, &
fsize
);

192 i‡(!
∑th
)

193  
NULL
;

195 
	`±hªad_muãx_lock
(&
CacheLock
);

197 
pmb
 = 
	`fio_pmemblk_ˇche_lookup
(
∑th
);

198 i‡(!
pmb
) {

199 
pmb
 = 
	`mÆloc
((*pmb));

200 i‡(!
pmb
)

201 
îr‹
;

204 
pmb
->
pmb_poﬁ
 = 
	`pmemblk_›í
(
∑th
, 
bsize
);

205 i‡(!
pmb
->
pmb_poﬁ
 && (
î∫o
 =
ENOENT
) &&

206 (
Êags
 & 
PMB_CREATE
Ë&& (0 < 
fsize
Ë&& (0 < 
bsize
)) {

207 
pmb
->
pmb_poﬁ
 =

208 
	`pmemblk_¸óã
(
∑th
, 
bsize
, 
fsize
, 0644);

210 i‡(!
pmb
->
pmb_poﬁ
) {

211 
	`log_îr
("pmemblk: unableÅo openÖmemblkÖool file %s (%s)\n",

212 
∑th
, 
	`°ªº‹
(
î∫o
));

213 
îr‹
;

216 
pmb
->
pmb_fûíame
 = 
∑th
;

217 
pmb
->
pmb_√xt
 = 
NULL
;

218 
pmb
->
pmb_ªf˙t
 = 0;

219 
pmb
->
pmb_bsize
 = 
	`pmemblk_bsize
’mb->
pmb_poﬁ
);

220 
pmb
->
pmb_nblocks
 = 
	`pmemblk_nblock
’mb->
pmb_poﬁ
);

222 
	`fio_pmemblk_ˇche_ö£π
(
pmb
);

225 
pmb
->
pmb_ªf˙t
 += 1;

227 
	`±hªad_muãx_u∆ock
(&
CacheLock
);

229  
pmb
;

231 
îr‹
:

232 i‡(
pmb
) {

233 i‡(
pmb
->
pmb_poﬁ
)

234 
	`pmemblk_˛o£
(
pmb
->
pmb_poﬁ
);

235 
pmb
->
pmb_poﬁ
 = 
NULL
;

236 
pmb
->
pmb_fûíame
 = 
NULL
;

237 
	`‰ì
(
pmb
);

239 i‡(
∑th
)

240 
	`‰ì
(
∑th
);

242 
	`±hªad_muãx_u∆ock
(&
CacheLock
);

243  
NULL
;

244 
	}
}

246 
	$pmb_˛o£
(
fio_pmemblk_fûe_t
 
pmb
, c⁄° 
boﬁ
 
kìp
)

248 
	`±hªad_muãx_lock
(&
CacheLock
);

250 
pmb
->
pmb_ªf˙t
--;

252 i‡(!
kìp
 && !
pmb
->
pmb_ªf˙t
) {

253 
	`pmemblk_˛o£
(
pmb
->
pmb_poﬁ
);

254 
pmb
->
pmb_poﬁ
 = 
NULL
;

255 
	`‰ì
(
pmb
->
pmb_fûíame
);

256 
pmb
->
pmb_fûíame
 = 
NULL
;

257 
	`fio_pmemblk_ˇche_ªmove
(
pmb
);

258 
	`‰ì
(
pmb
);

261 
	`±hªad_muãx_u∆ock
(&
CacheLock
);

262 
	}
}

264 
	$pmb_gë_Êags
(
thªad_d©a
 *
td
, 
uöt64_t
 *
pÊags
)

266 
thªad_w¨√d
 = 0;

267 
odúe˘_w¨√d
 = 0;

269 
uöt64_t
 
Êags
 = 0;

271 i‡(!
td
->
o
.
u£_thªad
) {

272 i‡(!
thªad_w¨√d
) {

273 
thªad_w¨√d
 = 1;

274 
	`log_îr
("pmemblk: must setÅhread=1 forÖmemblkÉngine\n");

279 i‡(!
td
->
o
.
odúe˘
 && !
odúe˘_w¨√d
) {

280 
odúe˘_w¨√d
 = 1;

281 
	`log_öfo
("pmemblk: direct == 0, butÖmemblk isálways direct\n");

284 i‡(
td
->
o
.
Ælow_¸óã
)

285 
Êags
 |
PMB_CREATE
;

287 (*
pÊags
Ë
Êags
;

289 
	}
}

291 
	$fio_pmemblk_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

293 
uöt64_t
 
Êags
 = 0;

294 
fio_pmemblk_fûe_t
 
pmb
;

296 i‡(
	`pmb_gë_Êags
(
td
, &
Êags
))

299 
pmb
 = 
	`pmb_›í
(
f
->
fûe_«me
, 
Êags
);

300 i‡(!
pmb
)

303 
	`FILE_SET_ENG_DATA
(
f
, 
pmb
);

305 
	}
}

307 
	$fio_pmemblk_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
,

308 
fio_fûe
 *
f
)

310 
fio_pmemblk_fûe_t
 
pmb
 = 
	`FILE_ENG_DATA
(
f
);

312 i‡(
pmb
)

313 
	`pmb_˛o£
(
pmb
, 
Ál£
);

315 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

317 
	}
}

319 
	$fio_pmemblk_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

321 
uöt64_t
 
Êags
 = 0;

322 
fio_pmemblk_fûe_t
 
pmb
 = 
	`FILE_ENG_DATA
(
f
);

324 i‡(
	`fio_fûe_size_known
(
f
))

327 i‡(!
pmb
) {

328 i‡(
	`pmb_gë_Êags
(
td
, &
Êags
))

330 
pmb
 = 
	`pmb_›í
(
f
->
fûe_«me
, 
Êags
);

331 i‡(!
pmb
)

335 
f
->
ªÆ_fûe_size
 = 
pmb
->
pmb_bsize
 *Ömb->
pmb_nblocks
;

337 
	`fio_fûe_£t_size_known
(
f
);

339 i‡(!
	`FILE_ENG_DATA
(
f
))

340 
	`pmb_˛o£
(
pmb
, 
åue
);

343 
	}
}

345 
	$fio_pmemblk_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

347 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

348 
fio_pmemblk_fûe_t
 
pmb
 = 
	`FILE_ENG_DATA
(
f
);

350 
off
;

351 
Àn
;

352 *
buf
;

354 
	`fio_ro_check
(
td
, 
io_u
);

356 
io_u
->
ddú
) {

357 
DDIR_READ
:

358 
DDIR_WRITE
:

359 
off
 = 
io_u
->
off£t
;

360 
Àn
 = 
io_u
->
x„r_buÊí
;

362 
io_u
->
îr‹
 = 
EINVAL
;

363 i‡(
off
 % 
pmb
->
pmb_bsize
)

365 i‡(
Àn
 % 
pmb
->
pmb_bsize
)

367 i‡((
off
 + 
Àn
Ë/ 
pmb
->
pmb_bsize
 >Ömb->
pmb_nblocks
)

370 
io_u
->
îr‹
 = 0;

371 
buf
 = 
io_u
->
x„r_buf
;

372 
off
 /
pmb
->
pmb_bsize
;

373 
Àn
 /
pmb
->
pmb_bsize
;

374 0 < 
Àn
) {

375 i‡(
io_u
->
ddú
 =
DDIR_READ
 &&

376 0 !
	`pmemblk_ªad
(
pmb
->
pmb_poﬁ
, 
buf
, 
off
)) {

377 
io_u
->
îr‹
 = 
î∫o
;

379 } i‡(0 !
	`pmemblk_wrôe
(
pmb
->
pmb_poﬁ
, 
buf
, 
off
)) {

380 
io_u
->
îr‹
 = 
î∫o
;

383 
buf
 +
pmb
->
pmb_bsize
;

384 
off
++;

385 
Àn
--;

387 
off
 *
pmb
->
pmb_bsize
;

388 
Àn
 *
pmb
->
pmb_bsize
;

389 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - (
off
 - io_u->
off£t
);

391 
DDIR_SYNC
:

392 
DDIR_DATASYNC
:

393 
DDIR_SYNC_FILE_RANGE
:

395 
io_u
->
îr‹
 = 0;

398 
io_u
->
îr‹
 = 
EINVAL
;

402  
FIO_Q_COMPLETED
;

403 
	}
}

405 
	$fio_pmemblk_u∆ök_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

407 *
∑th
 = 
NULL
;

408 
uöt64_t
 
bsize
 = 0;

409 
uöt64_t
 
fsize
 = 0;

417 
	`pmb_∑r£_∑th
(
f
->
fûe_«me
, &
∑th
, &
bsize
, &
fsize
);

418 i‡(!
∑th
)

419  
ENOENT
;

421 
	`u∆ök
(
∑th
);

422 
	`‰ì
(
∑th
);

424 
	}
}

426 
i€ngöe_›s
 
	gi€ngöe
 = {

427 .
«me
 = "pmemblk",

428 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

429 .
	gqueue
 = 
fio_pmemblk_queue
,

430 .
	g›í_fûe
 = 
fio_pmemblk_›í_fûe
,

431 .
	g˛o£_fûe
 = 
fio_pmemblk_˛o£_fûe
,

432 .
	ggë_fûe_size
 = 
fio_pmemblk_gë_fûe_size
,

433 .
	gu∆ök_fûe
 = 
fio_pmemblk_u∆ök_fûe
,

434 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NOEXTEND
 | 
FIO_NODISKUTIL
,

437 
fio_öô
 
	$fio_pmemblk_ªgi°î
()

439 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

440 
	}
}

442 
fio_exô
 
	$fio_pmemblk_uƒegi°î
()

444 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

445 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/posixaio.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<î∫o.h
>

11 
	~<f˙é.h
>

13 
	~"../fio.h
"

15 
	sposixaio_d©a
 {

16 
io_u
 **
	maio_evíts
;

17 
	mqueued
;

20 
	$fûl_time•ec
(
time•ec
 *
ts
)

22 #ifde‡
CONFIG_CLOCK_GETTIME


23 #ifde‡
CONFIG_CLOCK_MONOTONIC


24 
˛ockid_t
 
˛k
 = 
CLOCK_MONOTONIC
;

26 
˛ockid_t
 
˛k
 = 
CLOCK_REALTIME
;

28 i‡(!
	`˛ock_gëtime
(
˛k
, 
ts
))

31 
	`≥º‹
("clock_gettime");

34 
timevÆ
 
tv
;

36 
	`gëtimeofday
(&
tv
, 
NULL
);

37 
ts
->
tv_£c
 = 
tv
.tv_sec;

38 
ts
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

41 
	}
}

43 
	$ts_utime_sö˚_now
(
time•ec
 *
t
)

45 
£c
, 
n£c
;

46 
time•ec
 
now
;

48 i‡(
	`fûl_time•ec
(&
now
))

51 
£c
 = 
now
.
tv_£c
 - 
t
->tv_sec;

52 
n£c
 = 
now
.
tv_n£c
 - 
t
->tv_nsec;

53 i‡(
£c
 > 0 && 
n£c
 < 0) {

54 
£c
--;

55 
n£c
 += 1000000000;

58 
£c
 *= 1000000;

59 
n£c
 /= 1000;

60  
£c
 + 
n£c
;

61 
	}
}

63 
	$fio_posixaio_ˇn˚l
(
thªad_d©a
 
fio_unu£d
 *
td
,

64 
io_u
 *io_u)

66 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

67 
r
 = 
	`aio_ˇn˚l
(
f
->
fd
, &
io_u
->
aiocb
);

69 i‡(
r
 =
AIO_ALLDONE
 ||Ñ =
AIO_CANCELED
)

73 
	}
}

75 
	$fio_posixaio_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
,

76 
io_u
 *io_u)

78 
os_aiocb_t
 *
aiocb
 = &
io_u
->aiocb;

79 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

81 
aiocb
->
aio_fûdes
 = 
f
->
fd
;

82 
aiocb
->
aio_buf
 = 
io_u
->
x„r_buf
;

83 
aiocb
->
aio_nbyãs
 = 
io_u
->
x„r_buÊí
;

84 
aiocb
->
aio_off£t
 = 
io_u
->
off£t
;

85 
aiocb
->
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_NONE
;

87 
io_u
->
£í
 = 0;

89 
	}
}

91 
	#SUSPEND_ENTRIES
 8

	)

93 
	$fio_posixaio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

94 
max
, c⁄° 
time•ec
 *
t
)

96 
posixaio_d©a
 *
pd
 = 
td
->
io_›s_d©a
;

97 
os_aiocb_t
 *
su•íd_li°
[
SUSPEND_ENTRIES
];

98 
time•ec
 
°¨t
;

99 
have_timeout
 = 0;

100 
su•íd_íåõs
;

101 
io_u
 *io_u;

102 
r
;

103 
i
;

105 i‡(
t
 && !
	`fûl_time•ec
(&
°¨t
))

106 
have_timeout
 = 1;

108 
	`mem£t
(&
°¨t
, 0, (start));

110 
r
 = 0;

111 
ª°¨t
:

112 
	`mem£t
(
su•íd_li°
, 0, (suspend_list));

113 
su•íd_íåõs
 = 0;

114 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

115 
îr
;

117 i‡(
io_u
->
£í
 || !(io_u->
Êags
 & 
IO_U_F_FLIGHT
))

120 
îr
 = 
	`aio_îr‹
(&
io_u
->
aiocb
);

121 i‡(
îr
 =
EINPROGRESS
) {

122 i‡(
su•íd_íåõs
 < 
SUSPEND_ENTRIES
) {

123 
su•íd_li°
[
su•íd_íåõs
] = &
io_u
->
aiocb
;

124 
su•íd_íåõs
++;

129 
io_u
->
£í
 = 1;

130 
pd
->
queued
--;

131 
pd
->
aio_evíts
[
r
++] = 
io_u
;

133 i‡(
îr
 =
ECANCELED
)

134 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

135 i‡(!
îr
) {

136 
ssize_t
 
ªtvÆ
 = 
	`aio_ªtu∫
(&
io_u
->
aiocb
);

138 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªtvÆ
;

140 
io_u
->
îr‹
 = 
îr
;

143 i‡(
r
 >
mö
)

144  
r
;

146 i‡(
have_timeout
) {

147 
u£c
;

149 
u£c
 = (
t
->
tv_£c
 * 1000000Ë+ (t->
tv_n£c
 / 1000);

150 i‡(
	`ts_utime_sö˚_now
(&
°¨t
Ë> 
u£c
)

151  
r
;

157 
	`aio_su•íd
((c⁄° 
os_aiocb_t
 * c⁄° *)
su•íd_li°
,

158 
su•íd_íåõs
, 
t
);

159 
ª°¨t
;

160 
	}
}

162 
io_u
 *
	$fio_posixaio_evít
(
thªad_d©a
 *
td
, 
evít
)

164 
posixaio_d©a
 *
pd
 = 
td
->
io_›s_d©a
;

166  
pd
->
aio_evíts
[
evít
];

167 
	}
}

169 
	$fio_posixaio_queue
(
thªad_d©a
 *
td
,

170 
io_u
 *io_u)

172 
posixaio_d©a
 *
pd
 = 
td
->
io_›s_d©a
;

173 
os_aiocb_t
 *
aiocb
 = &
io_u
->aiocb;

174 
ªt
;

176 
	`fio_ro_check
(
td
, 
io_u
);

178 i‡(
io_u
->
ddú
 =
DDIR_READ
)

179 
ªt
 = 
	`aio_ªad
(
aiocb
);

180 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

181 
ªt
 = 
	`aio_wrôe
(
aiocb
);

182 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

183 i‡(
pd
->
queued
)

184  
FIO_Q_BUSY
;

186 
	`do_io_u_åim
(
td
, 
io_u
);

187  
FIO_Q_COMPLETED
;

189 #ifde‡
CONFIG_POSIXAIO_FSYNC


190 
ªt
 = 
	`aio_fsync
(
O_SYNC
, 
aiocb
);

192 i‡(
pd
->
queued
)

193  
FIO_Q_BUSY
;

195 
	`do_io_u_sync
(
td
, 
io_u
);

196  
FIO_Q_COMPLETED
;

200 i‡(
ªt
) {

201 
aio_îr
 = 
î∫o
;

209 i‡(
aio_îr
 =
EAGAIN
)

210  
FIO_Q_BUSY
;

212 
io_u
->
îr‹
 = 
aio_îr
;

213 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

214  
FIO_Q_COMPLETED
;

217 
pd
->
queued
++;

218  
FIO_Q_QUEUED
;

219 
	}
}

221 
	$fio_posixaio_˛ónup
(
thªad_d©a
 *
td
)

223 
posixaio_d©a
 *
pd
 = 
td
->
io_›s_d©a
;

225 i‡(
pd
) {

226 
	`‰ì
(
pd
->
aio_evíts
);

227 
	`‰ì
(
pd
);

229 
	}
}

231 
	$fio_posixaio_öô
(
thªad_d©a
 *
td
)

233 
posixaio_d©a
 *
pd
 = 
	`mÆloc
((*pd));

235 
	`mem£t
(
pd
, 0, (*pd));

236 
pd
->
aio_evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

237 
	`mem£t
(
pd
->
aio_evíts
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

239 
td
->
io_›s_d©a
 = 
pd
;

241 
	}
}

243 
i€ngöe_›s
 
	gi€ngöe
 = {

244 .
«me
 = "posixaio",

245 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

246 .
	göô
 = 
fio_posixaio_öô
,

247 .
	g¥ï
 = 
fio_posixaio_¥ï
,

248 .
	gqueue
 = 
fio_posixaio_queue
,

249 .
	gˇn˚l
 = 
fio_posixaio_ˇn˚l
,

250 .
	ggëevíts
 = 
fio_posixaio_gëevíts
,

251 .
	gevít
 = 
fio_posixaio_evít
,

252 .
	g˛ónup
 = 
fio_posixaio_˛ónup
,

253 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

254 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

255 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

258 
fio_öô
 
	$fio_posixaio_ªgi°î
()

260 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

261 
	}
}

263 
fio_exô
 
	$fio_posixaio_uƒegi°î
()

265 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

266 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/rados.c

9 
	~<ødos/libødos.h
>

10 
	~<±hªad.h
>

11 
	~"fio.h
"

12 
	~"../›tgroup.h
"

14 
	sfio_ødos_iou
 {

15 
thªad_d©a
 *
	mtd
;

16 
io_u
 *
	mio_u
;

17 
ødos_com∂ëi⁄_t
 
	mcom∂ëi⁄
;

18 
ødos_wrôe_›_t
 
	mwrôe_›
;

21 
	sødos_d©a
 {

22 
ødos_t
 
	m˛u°î
;

23 
ødos_io˘x_t
 
	mio_˘x
;

24 **
	mobje˘s
;

25 
size_t
 
	mobje˘_cou¡
;

26 
io_u
 **
	maio_evíts
;

27 
boﬁ
 
	mc⁄√˘ed
;

31 
	sødos_›ti⁄s
 {

32 *
	m∑d
;

33 *
	m˛u°î_«me
;

34 *
	mpoﬁ_«me
;

35 *
	m˛õ¡_«me
;

36 
	mbusy_pﬁl
;

39 
fio_›ti⁄
 
	g›ti⁄s
[] = {

41 .
«me
 = "clustername",

42 .
	g ame
 = "ceph clusterÇame",

43 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

44 .
	ghñp
 = "ClusterÇame for ceph",

45 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
˛u°î_«me
),

46 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

47 .
	ggroup
 = 
FIO_OPT_G_RBD
,

50 .
	g«me
 = "pool",

51 .
	g ame
 = "poolÇameÅo use",

52 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

53 .
	ghñp
 = "CephÖoolÇameÅo benchmarkágainst",

54 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
poﬁ_«me
),

55 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

56 .
	ggroup
 = 
FIO_OPT_G_RBD
,

59 .
	g«me
 = "clientname",

60 .
	g ame
 = "radosÉngine clientname",

61 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

62 .
	ghñp
 = "Name ofÅhe ceph clientÅoáccess RADOSÉngine",

63 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
˛õ¡_«me
),

64 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

65 .
	ggroup
 = 
FIO_OPT_G_RBD
,

68 .
	g«me
 = "busy_poll",

69 .
	g ame
 = "busyÖoll mode",

70 .
	gty≥
 = 
FIO_OPT_BOOL
,

71 .
	ghñp
 = "BusyÖoll for completions instead of sleeping",

72 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
busy_pﬁl
),

73 .
	gdef
 = "0",

74 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

75 .
	ggroup
 = 
FIO_OPT_G_RBD
,

78 .
	g«me
 = 
NULL
,

82 
	$_fio_£tup_ødos_d©a
(
thªad_d©a
 *
td
,

83 
ødos_d©a
 **
ødos_d©a_±r
)

85 
ødos_d©a
 *
ødos
;

87 i‡(
td
->
io_›s_d©a
)

90 
ødos
 = 
	`ˇŒoc
(1, (
ødos_d©a
));

91 i‡(!
ødos
)

92 
Áûed
;

94 
ødos
->
c⁄√˘ed
 = 
Ál£
;

96 
ødos
->
aio_evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

97 i‡(!
ødos
->
aio_evíts
)

98 
Áûed
;

100 
ødos
->
obje˘_cou¡
 = 
td
->
o
.
ƒ_fûes
;

101 
ødos
->
obje˘s
 = 
	`ˇŒoc
‘ados->
obje˘_cou¡
, (*));

102 i‡(!
ødos
->
obje˘s
)

103 
Áûed
;

105 *
ødos_d©a_±r
 = 
ødos
;

108 
Áûed
:

109 i‡(
ødos
) {

110 
ødos
->
obje˘_cou¡
 = 0;

111 i‡(
ødos
->
aio_evíts
)

112 
	`‰ì
(
ødos
->
aio_evíts
);

113 
	`‰ì
(
ødos
);

116 
	}
}

118 
	$_fio_ødos_rm_obje˘s
(
ødos_d©a
 *
ødos
)

120 
size_t
 
i
;

121 
i
 = 0; i < 
ødos
->
obje˘_cou¡
; ++i) {

122 i‡(
ødos
->
obje˘s
[
i
]) {

123 
	`ødos_ªmove
(
ødos
->
io_˘x
,Ñados->
obje˘s
[
i
]);

124 
	`‰ì
(
ødos
->
obje˘s
[
i
]);

125 
ødos
->
obje˘s
[
i
] = 
NULL
;

128 
	}
}

130 
	$_fio_ødos_c⁄√˘
(
thªad_d©a
 *
td
)

132 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

133 
ødos_›ti⁄s
 *
o
 = 
td
->
eo
;

134 
r
;

135 c⁄° 
uöt64_t
 
fûe_size
 =

136 
td
->
o
.
size
 / (td->o.
ƒ_fûes
 ?Åd->o.nr_files : 1u);

137 
fio_fûe
 *
f
;

138 
uöt32_t
 
i
;

139 
size_t
 
⁄ame_Àn
 = 0;

141 i‡(
o
->
˛u°î_«me
) {

142 *
˛õ¡_«me
 = 
NULL
;

149 i‡(
o
->
˛õ¡_«me
) {

150 i‡(!
	`ödex
(
o
->
˛õ¡_«me
, '.')) {

151 
˛õ¡_«me
 = 
	`ˇŒoc
(1, 
	`°æí
("client.") +

152 
	`°æí
(
o
->
˛õ¡_«me
) + 1);

153 
	`°rˇt
(
˛õ¡_«me
, "client.");

154 
	`°rˇt
(
˛õ¡_«me
, 
o
->client_name);

156 
˛õ¡_«me
 = 
o
->client_name;

160 
r
 = 
	`ødos_¸óã2
(&
ødos
->
˛u°î
, 
o
->
˛u°î_«me
,

161 
˛õ¡_«me
, 0);

163 i‡(
˛õ¡_«me
 && !
	`ödex
(
o
->client_name, '.'))

164 
	`‰ì
(
˛õ¡_«me
);

166 
r
 = 
	`ødos_¸óã
(&
ødos
->
˛u°î
, 
o
->
˛õ¡_«me
);

168 i‡(
r
 < 0) {

169 
	`log_îr
("rados_create failed.\n");

170 
Áûed_óæy
;

173 
r
 = 
	`ødos_c⁄f_ªad_fûe
(
ødos
->
˛u°î
, 
NULL
);

174 i‡(
r
 < 0) {

175 
	`log_îr
("rados_conf_read_file failed.\n");

176 
Áûed_óæy
;

179 
r
 = 
	`ødos_c⁄√˘
(
ødos
->
˛u°î
);

180 i‡(
r
 < 0) {

181 
	`log_îr
("rados_connect failed.\n");

182 
Áûed_óæy
;

185 
r
 = 
	`ødos_io˘x_¸óã
(
ødos
->
˛u°î
, 
o
->
poﬁ_«me
, &ødos->
io_˘x
);

186 i‡(
r
 < 0) {

187 
	`log_îr
("rados_ioctx_create failed.\n");

188 
Áûed_shutdown
;

191 
i
 = 0; i < 
ødos
->
obje˘_cou¡
; i++) {

192 
f
 = 
td
->
fûes
[
i
];

193 
f
->
ªÆ_fûe_size
 = 
fûe_size
;

194 
f
->
ígöe_pos
 = 
i
;

196 
⁄ame_Àn
 = 
	`°æí
(
f
->
fûe_«me
) + 32;

197 
ødos
->
obje˘s
[
i
] = 
	`mÆloc
(
⁄ame_Àn
);

199 
	`¢¥ötf
(
ødos
->
obje˘s
[
i
], 
⁄ame_Àn
 - 1,

201 
f
->
fûe_«me
, 
td
->
thªad_numbî
);

202 
r
 = 
	`ødos_wrôe
(
ødos
->
io_˘x
,Ñados->
obje˘s
[
i
], "", 0, 0);

203 i‡(
r
 < 0) {

204 
	`‰ì
(
ødos
->
obje˘s
[
i
]);

205 
ødos
->
obje˘s
[
i
] = 
NULL
;

206 
	`log_îr
("error creating object.\n");

207 
Áûed_obj_¸óã
;

213 
Áûed_obj_¸óã
:

214 
	`_fio_ødos_rm_obje˘s
(
ødos
);

215 
	`ødos_io˘x_de°roy
(
ødos
->
io_˘x
);

216 
ødos
->
io_˘x
 = 
NULL
;

217 
Áûed_shutdown
:

218 
	`ødos_shutdown
(
ødos
->
˛u°î
);

219 
ødos
->
˛u°î
 = 
NULL
;

220 
Áûed_óæy
:

222 
	}
}

224 
	$_fio_ødos_disc⁄√˘
(
ødos_d©a
 *
ødos
)

226 i‡(!
ødos
)

229 
	`_fio_ødos_rm_obje˘s
(
ødos
);

231 i‡(
ødos
->
io_˘x
) {

232 
	`ødos_io˘x_de°roy
(
ødos
->
io_˘x
);

233 
ødos
->
io_˘x
 = 
NULL
;

236 i‡(
ødos
->
˛u°î
) {

237 
	`ødos_shutdown
(
ødos
->
˛u°î
);

238 
ødos
->
˛u°î
 = 
NULL
;

240 
	}
}

242 
	$fio_ødos_˛ónup
(
thªad_d©a
 *
td
)

244 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

246 i‡(
ødos
) {

247 
	`_fio_ødos_disc⁄√˘
(
ødos
);

248 
	`‰ì
(
ødos
->
obje˘s
);

249 
	`‰ì
(
ødos
->
aio_evíts
);

250 
	`‰ì
(
ødos
);

252 
	}
}

254 
	$fio_ødos_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

256 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

257 
fio_ødos_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

258 *
obje˘
 = 
ødos
->
obje˘s
[
io_u
->
fûe
->
ígöe_pos
];

259 
r
 = -1;

261 
	`fio_ro_check
(
td
, 
io_u
);

263 i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

264 
r
 = 
	`ødos_aio_¸óã_com∂ëi⁄
(
‰i
, 
NULL
,

265 
NULL
, &
‰i
->
com∂ëi⁄
);

266 i‡(
r
 < 0) {

267 
	`log_îr
("rados_aio_create_completion failed.\n");

268 
Áûed
;

271 
r
 = 
	`ødos_aio_wrôe
(
ødos
->
io_˘x
, 
obje˘
, 
‰i
->
com∂ëi⁄
,

272 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

273 i‡(
r
 < 0) {

274 
	`log_îr
("rados_write failed.\n");

275 
Áûed_comp
;

277  
FIO_Q_QUEUED
;

278 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

279 
r
 = 
	`ødos_aio_¸óã_com∂ëi⁄
(
‰i
, 
NULL
,

280 
NULL
, &
‰i
->
com∂ëi⁄
);

281 i‡(
r
 < 0) {

282 
	`log_îr
("rados_aio_create_completion failed.\n");

283 
Áûed
;

285 
r
 = 
	`ødos_aio_ªad
(
ødos
->
io_˘x
, 
obje˘
, 
‰i
->
com∂ëi⁄
,

286 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

287 i‡(
r
 < 0) {

288 
	`log_îr
("rados_aio_read failed.\n");

289 
Áûed_comp
;

291  
FIO_Q_QUEUED
;

292 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

293 
r
 = 
	`ødos_aio_¸óã_com∂ëi⁄
(
‰i
, 
NULL
,

294 
NULL
 , &
‰i
->
com∂ëi⁄
);

295 i‡(
r
 < 0) {

296 
	`log_îr
("rados_aio_create_completion failed.\n");

297 
Áûed
;

299 
‰i
->
wrôe_›
 = 
	`ødos_¸óã_wrôe_›
();

300 i‡(
‰i
->
wrôe_›
 =
NULL
) {

301 
	`log_îr
("rados_create_write_op failed.\n");

302 
Áûed_comp
;

304 
	`ødos_wrôe_›_zîo
(
‰i
->
wrôe_›
, 
io_u
->
off£t
,

305 
io_u
->
x„r_buÊí
);

306 
r
 = 
	`ødos_aio_wrôe_›_›î©e
(
‰i
->
wrôe_›
, 
ødos
->
io_˘x
,

307 
‰i
->
com∂ëi⁄
, 
obje˘
, 
NULL
, 0);

308 i‡(
r
 < 0) {

309 
	`log_îr
("rados_aio_write_op_operate failed.\n");

310 
Áûed_wrôe_›
;

312  
FIO_Q_QUEUED
;

315 
	`log_îr
("WARNING: Only DDIR_READ, DDIR_WRITEánd DDIR_TRIMáre supported!");

317 
Áûed_wrôe_›
:

318 
	`ødos_ªÀa£_wrôe_›
(
‰i
->
wrôe_›
);

319 
Áûed_comp
:

320 
	`ødos_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

321 
Áûed
:

322 
io_u
->
îr‹
 = -
r
;

323 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

324  
FIO_Q_COMPLETED
;

325 
	}
}

327 
io_u
 *
	$fio_ødos_evít
(
thªad_d©a
 *
td
, 
evít
)

329 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

330  
ødos
->
aio_evíts
[
evít
];

331 
	}
}

333 
	$fio_ødos_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

334 
max
, c⁄° 
time•ec
 *
t
)

336 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

337 
ødos_›ti⁄s
 *
o
 = 
td
->
eo
;

338 
busy_pﬁl
 = 
o
->busy_poll;

339 
evíts
 = 0;

340 
io_u
 *
u
;

341 
fio_ødos_iou
 *
‰i
;

342 
i
;

343 
ødos_com∂ëi⁄_t
 
fú°_unföished
;

344 
ob£rved_√w
 = 0;

348 
fú°_unföished
 = 
NULL
;

349 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
u
, 
i
) {

350 i‡(!(
u
->
Êags
 & 
IO_U_F_FLIGHT
))

353 
‰i
 = 
u
->
ígöe_d©a
;

354 i‡(
‰i
->
com∂ëi⁄
) {

355 i‡(
	`ødos_aio_is_com∂ëe
(
‰i
->
com∂ëi⁄
)) {

356 i‡(
‰i
->
wrôe_›
 !
NULL
) {

357 
	`ødos_ªÀa£_wrôe_›
(
‰i
->
wrôe_›
);

358 
‰i
->
wrôe_›
 = 
NULL
;

360 
	`ødos_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

361 
‰i
->
com∂ëi⁄
 = 
NULL
;

362 
ødos
->
aio_evíts
[
evíts
] = 
u
;

363 
evíts
++;

364 
ob£rved_√w
 = 1;

365 } i‡(
fú°_unföished
 =
NULL
) {

366 
fú°_unföished
 = 
‰i
->
com∂ëi⁄
;

369 i‡(
evíts
 >
max
)

372 i‡(
evíts
 >
mö
)

373  
evíts
;

374 i‡(
fú°_unföished
 =
NULL
 || 
busy_pﬁl
)

377 i‡(!
ob£rved_√w
)

378 
	`ødos_aio_waô_f‹_com∂ëe
(
fú°_unföished
);

380  
evíts
;

381 
	}
}

383 
	$fio_ødos_£tup
(
thªad_d©a
 *
td
)

385 
ødos_d©a
 *
ødos
 = 
NULL
;

386 
r
;

388 
r
 = 
	`_fio_£tup_ødos_d©a
(
td
, &
ødos
);

389 i‡(
r
) {

390 
	`log_îr
("fio_setup_rados_data failed.\n");

391 
˛ónup
;

393 
td
->
io_›s_d©a
 = 
ødos
;

397 
td
->
o
.
u£_thªad
 = 1;

403 
r
 = 
	`_fio_ødos_c⁄√˘
(
td
);

404 i‡(
r
) {

405 
	`log_îr
("fio_rados_connect failed.\n");

406 
˛ónup
;

408 
ødos
->
c⁄√˘ed
 = 
åue
;

411 
˛ónup
:

412 
	`fio_ødos_˛ónup
(
td
);

413  
r
;

414 
	}
}

419 
	$fio_ødos_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

422 
	}
}

423 
	$fio_ødos_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

426 
	}
}

428 
	$fio_ødos_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

430 
fio_ødos_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

432 i‡(
‰i
) {

433 
io_u
->
ígöe_d©a
 = 
NULL
;

434 
‰i
->
td
 = 
NULL
;

435 i‡(
‰i
->
com∂ëi⁄
)

436 
	`ødos_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

437 i‡(
‰i
->
wrôe_›
)

438 
	`ødos_ªÀa£_wrôe_›
(
‰i
->
wrôe_›
);

439 
	`‰ì
(
‰i
);

441 
	}
}

443 
	$fio_ødos_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

445 
fio_ødos_iou
 *
‰i
;

446 
‰i
 = 
	`ˇŒoc
(1, (*fri));

447 
‰i
->
io_u
 = io_u;

448 
‰i
->
td
 =Åd;

449 
io_u
->
ígöe_d©a
 = 
‰i
;

451 
	}
}

454 
i€ngöe_›s
 
	gi€ngöe
 = {

455 .
«me
 = "rados",

456 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

457 .
	gÊags
 = 
FIO_DISKLESSIO
,

458 .
	g£tup
 = 
fio_ødos_£tup
,

459 .
	gqueue
 = 
fio_ødos_queue
,

460 .
	ggëevíts
 = 
fio_ødos_gëevíts
,

461 .
	gevít
 = 
fio_ødos_evít
,

462 .
	g˛ónup
 = 
fio_ødos_˛ónup
,

463 .
	g›í_fûe
 = 
fio_ødos_›í
,

464 .
	gövÆid©e
 = 
fio_ødos_övÆid©e
,

465 .
	g›ti⁄s
 = 
›ti⁄s
,

466 .
	gio_u_öô
 = 
fio_ødos_io_u_öô
,

467 .
	gio_u_‰ì
 = 
fio_ødos_io_u_‰ì
,

468 .
	g›ti⁄_°ru˘_size
 = (
ødos_›ti⁄s
),

471 
fio_öô
 
	$fio_ødos_ªgi°î
()

473 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

474 
	}
}

476 
fio_exô
 
	$fio_ødos_uƒegi°î
()

478 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

479 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/rbd.c

8 
	~<rbd/librbd.h
>

10 
	~"../fio.h
"

11 
	~"../›tgroup.h
"

13 #ifde‡
CONFIG_RBD_POLL


15 
	~<pﬁl.h
>

16 
	~<sys/evítfd.h
>

19 
	sfio_rbd_iou
 {

20 
io_u
 *
	mio_u
;

21 
rbd_com∂ëi⁄_t
 
	mcom∂ëi⁄
;

22 
	mio_£í
;

23 
	mio_com∂ëe
;

26 
	srbd_d©a
 {

27 
ødos_t
 
	m˛u°î
;

28 
ødos_io˘x_t
 
	mio_˘x
;

29 
rbd_image_t
 
	mimage
;

30 
io_u
 **
	maio_evíts
;

31 
io_u
 **
	ms‹t_evíts
;

32 
	mfd
;

33 
boﬁ
 
	mc⁄√˘ed
;

36 
	srbd_›ti⁄s
 {

37 *
	m∑d
;

38 *
	m˛u°î_«me
;

39 *
	mrbd_«me
;

40 *
	mpoﬁ_«me
;

41 *
	m˛õ¡_«me
;

42 
	mbusy_pﬁl
;

45 
fio_›ti⁄
 
	g›ti⁄s
[] = {

47 .
«me
 = "clustername",

48 .
	g ame
 = "ceph clusterÇame",

49 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

50 .
	ghñp
 = "ClusterÇame for ceph",

51 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
˛u°î_«me
),

52 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

53 .
	ggroup
 = 
FIO_OPT_G_RBD
,

56 .
	g«me
 = "rbdname",

57 .
	g ame
 = "rbdÉngineÑbdname",

58 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

59 .
	ghñp
 = "RBDÇame for RBDÉngine",

60 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
rbd_«me
),

61 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

62 .
	ggroup
 = 
FIO_OPT_G_RBD
,

65 .
	g«me
 = "pool",

66 .
	g ame
 = "rbdÉngineÖool",

67 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

68 .
	ghñp
 = "Name ofÅheÖool hostingÅhe RBD forÅhe RBDÉngine",

69 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
poﬁ_«me
),

70 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

71 .
	ggroup
 = 
FIO_OPT_G_RBD
,

74 .
	g«me
 = "clientname",

75 .
	g ame
 = "rbdÉngine clientname",

76 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

77 .
	ghñp
 = "Name ofÅhe ceph clientÅoáccessÅhe RBD forÅhe RBDÉngine",

78 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
˛õ¡_«me
),

79 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

80 .
	ggroup
 = 
FIO_OPT_G_RBD
,

83 .
	g«me
 = "busy_poll",

84 .
	g ame
 = "BusyÖoll",

85 .
	gty≥
 = 
FIO_OPT_BOOL
,

86 .
	ghñp
 = "BusyÖoll for completions instead of sleeping",

87 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
busy_pﬁl
),

88 .
	gdef
 = "0",

89 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

90 .
	ggroup
 = 
FIO_OPT_G_RBD
,

93 .
	g«me
 = 
NULL
,

97 
	$_fio_£tup_rbd_d©a
(
thªad_d©a
 *
td
,

98 
rbd_d©a
 **
rbd_d©a_±r
)

100 
rbd_d©a
 *
rbd
;

102 i‡(
td
->
io_›s_d©a
)

105 
rbd
 = 
	`ˇŒoc
(1, (
rbd_d©a
));

106 i‡(!
rbd
)

107 
Áûed
;

109 
rbd
->
c⁄√˘ed
 = 
Ál£
;

112 
rbd
->
fd
 = -1;

114 
rbd
->
aio_evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

115 i‡(!
rbd
->
aio_evíts
)

116 
Áûed
;

118 
rbd
->
s‹t_evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

119 i‡(!
rbd
->
s‹t_evíts
)

120 
Áûed
;

122 *
rbd_d©a_±r
 = 
rbd
;

125 
Áûed
:

126 i‡(
rbd
) {

127 i‡(
rbd
->
aio_evíts
)

128 
	`‰ì
(
rbd
->
aio_evíts
);

129 i‡(
rbd
->
s‹t_evíts
)

130 
	`‰ì
(
rbd
->
s‹t_evíts
);

131 
	`‰ì
(
rbd
);

135 
	}
}

137 #ifde‡
CONFIG_RBD_POLL


138 
boﬁ
 
	$_fio_rbd_£tup_pﬁl
(
rbd_d©a
 *
rbd
)

140 
r
;

143 
rbd
->
fd
 = 
	`evítfd
(0, 
EFD_SEMAPHORE
);

144 i‡(
rbd
->
fd
 < 0) {

145 
	`log_îr
("eventfd failed.\n");

146  
Ál£
;

149 
r
 = 
	`rbd_£t_image_nŸifiˇti⁄
(
rbd
->
image
,Ñbd->
fd
, 
EVENT_TYPE_EVENTFD
);

150 i‡(
r
 < 0) {

151 
	`log_îr
("rbd_set_image_notification failed.\n");

152 
	`˛o£
(
rbd
->
fd
);

153 
rbd
->
fd
 = -1;

154  
Ál£
;

157  
åue
;

158 
	}
}

160 
boﬁ
 
	$_fio_rbd_£tup_pﬁl
(
rbd_d©a
 *
rbd
)

162  
åue
;

163 
	}
}

166 
	$_fio_rbd_c⁄√˘
(
thªad_d©a
 *
td
)

168 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

169 
rbd_›ti⁄s
 *
o
 = 
td
->
eo
;

170 
r
;

172 i‡(
o
->
˛u°î_«me
) {

173 *
˛õ¡_«me
 = 
NULL
;

180 i‡(
o
->
˛õ¡_«me
) {

181 i‡(!
	`ödex
(
o
->
˛õ¡_«me
, '.')) {

182 
˛õ¡_«me
 = 
	`ˇŒoc
(1, 
	`°æí
("client.") +

183 
	`°æí
(
o
->
˛õ¡_«me
) + 1);

184 
	`°rˇt
(
˛õ¡_«me
, "client.");

185 
	`°rˇt
(
˛õ¡_«me
, 
o
->client_name);

187 
˛õ¡_«me
 = 
o
->client_name;

191 
r
 = 
	`ødos_¸óã2
(&
rbd
->
˛u°î
, 
o
->
˛u°î_«me
,

192 
˛õ¡_«me
, 0);

194 i‡(
˛õ¡_«me
 && !
	`ödex
(
o
->client_name, '.'))

195 
	`‰ì
(
˛õ¡_«me
);

197 
r
 = 
	`ødos_¸óã
(&
rbd
->
˛u°î
, 
o
->
˛õ¡_«me
);

199 i‡(
r
 < 0) {

200 
	`log_îr
("rados_create failed.\n");

201 
Áûed_óæy
;

204 
r
 = 
	`ødos_c⁄f_ªad_fûe
(
rbd
->
˛u°î
, 
NULL
);

205 i‡(
r
 < 0) {

206 
	`log_îr
("rados_conf_read_file failed.\n");

207 
Áûed_óæy
;

210 
r
 = 
	`ødos_c⁄√˘
(
rbd
->
˛u°î
);

211 i‡(
r
 < 0) {

212 
	`log_îr
("rados_connect failed.\n");

213 
Áûed_shutdown
;

216 
r
 = 
	`ødos_io˘x_¸óã
(
rbd
->
˛u°î
, 
o
->
poﬁ_«me
, &rbd->
io_˘x
);

217 i‡(
r
 < 0) {

218 
	`log_îr
("rados_ioctx_create failed.\n");

219 
Áûed_shutdown
;

222 
r
 = 
	`rbd_›í
(
rbd
->
io_˘x
, 
o
->
rbd_«me
, &rbd->
image
, 
NULL
 );

223 i‡(
r
 < 0) {

224 
	`log_îr
("rbd_open failed.\n");

225 
Áûed_›í
;

228 i‡(!
	`_fio_rbd_£tup_pﬁl
(
rbd
))

229 
Áûed_pﬁl
;

233 
Áûed_pﬁl
:

234 
	`rbd_˛o£
(
rbd
->
image
);

235 
rbd
->
image
 = 
NULL
;

236 
Áûed_›í
:

237 
	`ødos_io˘x_de°roy
(
rbd
->
io_˘x
);

238 
rbd
->
io_˘x
 = 
NULL
;

239 
Áûed_shutdown
:

240 
	`ødos_shutdown
(
rbd
->
˛u°î
);

241 
rbd
->
˛u°î
 = 
NULL
;

242 
Áûed_óæy
:

244 
	}
}

246 
	$_fio_rbd_disc⁄√˘
(
rbd_d©a
 *
rbd
)

248 i‡(!
rbd
)

252 i‡(
rbd
->
fd
 != -1) {

253 
	`˛o£
(
rbd
->
fd
);

254 
rbd
->
fd
 = -1;

258 i‡(
rbd
->
image
) {

259 
	`rbd_˛o£
(
rbd
->
image
);

260 
rbd
->
image
 = 
NULL
;

263 i‡(
rbd
->
io_˘x
) {

264 
	`ødos_io˘x_de°roy
(
rbd
->
io_˘x
);

265 
rbd
->
io_˘x
 = 
NULL
;

268 i‡(
rbd
->
˛u°î
) {

269 
	`ødos_shutdown
(
rbd
->
˛u°î
);

270 
rbd
->
˛u°î
 = 
NULL
;

272 
	}
}

274 
	$_fio_rbd_föish_aiocb
(
rbd_com∂ëi⁄_t
 
comp
, *
d©a
)

276 
fio_rbd_iou
 *
‰i
 = 
d©a
;

277 
io_u
 *io_u = 
‰i
->io_u;

278 
ssize_t
 
ªt
;

285 
ªt
 = 
	`rbd_aio_gë_ªtu∫_vÆue
(
‰i
->
com∂ëi⁄
);

286 i‡(
ªt
 < 0) {

287 
io_u
->
îr‹
 = -
ªt
;

288 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

290 
io_u
->
îr‹
 = 0;

292 
‰i
->
io_com∂ëe
 = 1;

293 
	}
}

295 
io_u
 *
	$fio_rbd_evít
(
thªad_d©a
 *
td
, 
evít
)

297 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

299  
rbd
->
aio_evíts
[
evít
];

300 
	}
}

302 
ölöe
 
	$‰i_check_com∂ëe
(
rbd_d©a
 *
rbd
, 
io_u
 *io_u,

303 *
evíts
)

305 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

307 i‡(
‰i
->
io_com∂ëe
) {

308 
‰i
->
io_£í
 = 1;

309 
rbd
->
aio_evíts
[*
evíts
] = 
io_u
;

310 (*
evíts
)++;

312 
	`rbd_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

317 
	}
}

319 
ölöe
 
	$rbd_io_u_£í
(
io_u
 *io_u)

321 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

323  
‰i
->
io_£í
;

324 
	}
}

326 
	$rbd_io_u_waô_com∂ëe
(
io_u
 *io_u)

328 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

330 
	`rbd_aio_waô_f‹_com∂ëe
(
‰i
->
com∂ëi⁄
);

331 
	}
}

333 
	$rbd_io_u_cmp
(c⁄° *
p1
, c⁄° *
p2
)

335 c⁄° 
io_u
 **
a
 = (c⁄° io_u **Ë
p1
;

336 c⁄° 
io_u
 **
b
 = (c⁄° io_u **Ë
p2
;

337 
uöt64_t
 
©
, 
bt
;

339 
©
 = 
	`utime_sö˚_now
(&(*
a
)->
°¨t_time
);

340 
bt
 = 
	`utime_sö˚_now
(&(*
b
)->
°¨t_time
);

342 i‡(
©
 < 
bt
)

344 i‡(
©
 =
bt
)

348 
	}
}

350 
	$rbd_ôî_evíts
(
thªad_d©a
 *
td
, *
evíts
,

351 
mö_evts
, 
waô
)

353 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

354 
this_evíts
 = 0;

355 
io_u
 *io_u;

356 
i
, 
sidx
 = 0;

358 #ifde‡
CONFIG_RBD_POLL


359 
ªt
 = 0;

360 
evít_num
 = 0;

361 
fio_rbd_iou
 *
‰i
 = 
NULL
;

362 
rbd_com∂ëi⁄_t
 
comps
[
mö_evts
];

363 
uöt64_t
 
cou¡î
;

364 
boﬁ
 
com∂ëed
;

366 
pﬁlfd
 
pfd
;

367 
pfd
.
fd
 = 
rbd
->fd;

368 
pfd
.
evíts
 = 
POLLIN
;

370 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
waô
 ? -1 : 0);

371 i‡(
ªt
 <= 0)

373 i‡(!(
pfd
.
ªvíts
 & 
POLLIN
))

376 
evít_num
 = 
	`rbd_pﬁl_io_evíts
(
rbd
->
image
, 
comps
, 
mö_evts
);

378 
i
 = 0; i < 
evít_num
; i++) {

379 
‰i
 = 
	`rbd_aio_gë_¨g
(
comps
[
i
]);

380 
io_u
 = 
‰i
->io_u;

383 
ªt
 = 
	`ªad
(
rbd
->
fd
, &
cou¡î
, (counter));

384 i‡(
ªt
 <= 0)

385 
	`log_îr
("rbd_iter_events failedÅo decrement semaphore.\n");

387 
com∂ëed
 = 
	`‰i_check_com∂ëe
(
rbd
, 
io_u
, 
evíts
);

388 
	`as£π
(
com∂ëed
);

390 
this_evíts
++;

393 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

394 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
))

396 i‡(
	`rbd_io_u_£í
(
io_u
))

399 i‡(
	`‰i_check_com∂ëe
(
rbd
, 
io_u
, 
evíts
))

400 
this_evíts
++;

401 i‡(
waô
)

402 
rbd
->
s‹t_evíts
[
sidx
++] = 
io_u
;

406 i‡(!
waô
 || !
sidx
)

407  
this_evíts
;

414 i‡(
sidx
 > 1)

415 
	`qs‹t
(
rbd
->
s‹t_evíts
, 
sidx
, (
io_u
 *), 
rbd_io_u_cmp
);

417 
i
 = 0; i < 
sidx
; i++) {

418 
io_u
 = 
rbd
->
s‹t_evíts
[
i
];

420 i‡(
	`‰i_check_com∂ëe
(
rbd
, 
io_u
, 
evíts
)) {

421 
this_evíts
++;

429 i‡(*
evíts
 >
mö_evts
)

432 
	`rbd_io_u_waô_com∂ëe
(
io_u
);

434 i‡(
	`‰i_check_com∂ëe
(
rbd
, 
io_u
, 
evíts
))

435 
this_evíts
++;

438  
this_evíts
;

439 
	}
}

441 
	$fio_rbd_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

442 
max
, c⁄° 
time•ec
 *
t
)

444 
this_evíts
, 
evíts
 = 0;

445 
rbd_›ti⁄s
 *
o
 = 
td
->
eo
;

446 
waô
 = 0;

449 
this_evíts
 = 
	`rbd_ôî_evíts
(
td
, &
evíts
, 
mö
, 
waô
);

451 i‡(
evíts
 >
mö
)

453 i‡(
this_evíts
)

456 i‡(!
o
->
busy_pﬁl
)

457 
waô
 = 1;

459 
n›
;

462  
evíts
;

463 
	}
}

465 
	$fio_rbd_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

467 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

468 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

469 
r
 = -1;

471 
	`fio_ro_check
(
td
, 
io_u
);

473 
‰i
->
io_£í
 = 0;

474 
‰i
->
io_com∂ëe
 = 0;

476 
r
 = 
	`rbd_aio_¸óã_com∂ëi⁄
(
‰i
, 
_fio_rbd_föish_aiocb
,

477 &
‰i
->
com∂ëi⁄
);

478 i‡(
r
 < 0) {

479 
	`log_îr
("rbd_aio_create_completion failed.\n");

480 
Áûed
;

483 i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

484 
r
 = 
	`rbd_aio_wrôe
(
rbd
->
image
, 
io_u
->
off£t
, io_u->
x„r_buÊí
,

485 
io_u
->
x„r_buf
, 
‰i
->
com∂ëi⁄
);

486 i‡(
r
 < 0) {

487 
	`log_îr
("rbd_aio_write failed.\n");

488 
Áûed_comp
;

491 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

492 
r
 = 
	`rbd_aio_ªad
(
rbd
->
image
, 
io_u
->
off£t
, io_u->
x„r_buÊí
,

493 
io_u
->
x„r_buf
, 
‰i
->
com∂ëi⁄
);

495 i‡(
r
 < 0) {

496 
	`log_îr
("rbd_aio_read failed.\n");

497 
Áûed_comp
;

499 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

500 
r
 = 
	`rbd_aio_disˇrd
(
rbd
->
image
, 
io_u
->
off£t
,

501 
io_u
->
x„r_buÊí
, 
‰i
->
com∂ëi⁄
);

502 i‡(
r
 < 0) {

503 
	`log_îr
("rbd_aio_discard failed.\n");

504 
Áûed_comp
;

506 } i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

507 
r
 = 
	`rbd_aio_Êush
(
rbd
->
image
, 
‰i
->
com∂ëi⁄
);

508 i‡(
r
 < 0) {

509 
	`log_îr
("rbd_flush failed.\n");

510 
Áûed_comp
;

513 
	`d¥öt
(
FD_IO
, "%s: W¨nög: unh™dÀd ddú: %d\n", 
__func__
,

514 
io_u
->
ddú
);

515 
r
 = -
EINVAL
;

516 
Áûed_comp
;

519  
FIO_Q_QUEUED
;

520 
Áûed_comp
:

521 
	`rbd_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

522 
Áûed
:

523 
io_u
->
îr‹
 = -
r
;

524 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

525  
FIO_Q_COMPLETED
;

526 
	}
}

528 
	$fio_rbd_öô
(
thªad_d©a
 *
td
)

530 
r
;

531 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

533 i‡(
rbd
->
c⁄√˘ed
)

536 
r
 = 
	`_fio_rbd_c⁄√˘
(
td
);

537 i‡(
r
) {

538 
	`log_îr
("fio_rbd_c⁄√˘ faûed,Ñëu∫ code: %d .\n", 
r
);

539 
Áûed
;

544 
Áûed
:

546 
	}
}

548 
	$fio_rbd_˛ónup
(
thªad_d©a
 *
td
)

550 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

552 i‡(
rbd
) {

553 
	`_fio_rbd_disc⁄√˘
(
rbd
);

554 
	`‰ì
(
rbd
->
aio_evíts
);

555 
	`‰ì
(
rbd
->
s‹t_evíts
);

556 
	`‰ì
(
rbd
);

558 
	}
}

560 
	$fio_rbd_£tup
(
thªad_d©a
 *
td
)

562 
rbd_image_öfo_t
 
öfo
;

563 
fio_fûe
 *
f
;

564 
rbd_d©a
 *
rbd
 = 
NULL
;

565 
r
;

568 
r
 = 
	`_fio_£tup_rbd_d©a
(
td
, &
rbd
);

569 i‡(
r
) {

570 
	`log_îr
("fio_setup_rbd_data failed.\n");

571 
˛ónup
;

573 
td
->
io_›s_d©a
 = 
rbd
;

579 
td
->
o
.
u£_thªad
 = 1;

585 
r
 = 
	`_fio_rbd_c⁄√˘
(
td
);

586 i‡(
r
) {

587 
	`log_îr
("fio_rbd_connect failed.\n");

588 
˛ónup
;

590 
rbd
->
c⁄√˘ed
 = 
åue
;

593 
r
 = 
	`rbd_°©
(
rbd
->
image
, &
öfo
, (info));

594 i‡(
r
 < 0) {

595 
	`log_îr
("rbd_status failed.\n");

596 
˛ónup
;

597 } i‡(
öfo
.
size
 == 0) {

598 
	`log_îr
("image size should beÜargerÅhan zero.\n");

599 
r
 = -
EINVAL
;

600 
˛ónup
;

603 
	`d¥öt
(
FD_IO
, "rbd-ígöe: imagêsize: %" 
PRIu64
 "\n", 
öfo
.
size
);

609 i‡(!
td
->
fûes_ödex
) {

610 
	`add_fûe
(
td
,Åd->
o
.
fûíame
 ? : "rbd", 0, 0);

611 
td
->
o
.
ƒ_fûes
 =Åd->o.nr_files ? : 1;

612 
td
->
o
.
›í_fûes
++;

614 
f
 = 
td
->
fûes
[0];

615 
f
->
ªÆ_fûe_size
 = 
öfo
.
size
;

619 
˛ónup
:

620 
	`fio_rbd_˛ónup
(
td
);

621  
r
;

622 
	}
}

624 
	$fio_rbd_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

627 
	}
}

629 
	$fio_rbd_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

631 #i‡
	`deföed
(
CONFIG_RBD_INVAL
)

632 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

634  
	`rbd_övÆid©e_ˇche
(
rbd
->
image
);

638 
	}
}

640 
	$fio_rbd_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

642 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

644 i‡(
‰i
) {

645 
io_u
->
ígöe_d©a
 = 
NULL
;

646 
	`‰ì
(
‰i
);

648 
	}
}

650 
	$fio_rbd_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

652 
fio_rbd_iou
 *
‰i
;

654 
‰i
 = 
	`ˇŒoc
(1, (*fri));

655 
‰i
->
io_u
 = io_u;

656 
io_u
->
ígöe_d©a
 = 
‰i
;

658 
	}
}

660 
i€ngöe_›s
 
	gi€ngöe
 = {

661 .
«me
 = "rbd",

662 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

663 .
	g£tup
 = 
fio_rbd_£tup
,

664 .
	göô
 = 
fio_rbd_öô
,

665 .
	gqueue
 = 
fio_rbd_queue
,

666 .
	ggëevíts
 = 
fio_rbd_gëevíts
,

667 .
	gevít
 = 
fio_rbd_evít
,

668 .
	g˛ónup
 = 
fio_rbd_˛ónup
,

669 .
	g›í_fûe
 = 
fio_rbd_›í
,

670 .
	gövÆid©e
 = 
fio_rbd_övÆid©e
,

671 .
	g›ti⁄s
 = 
›ti⁄s
,

672 .
	gio_u_öô
 = 
fio_rbd_io_u_öô
,

673 .
	gio_u_‰ì
 = 
fio_rbd_io_u_‰ì
,

674 .
	g›ti⁄_°ru˘_size
 = (
rbd_›ti⁄s
),

677 
fio_öô
 
	$fio_rbd_ªgi°î
()

679 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

680 
	}
}

682 
fio_exô
 
	$fio_rbd_uƒegi°î
()

684 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

685 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/rdma.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

28 
	~<î∫o.h
>

29 
	~<as£π.h
>

30 
	~<√töë/ö.h
>

31 
	~<¨∑/öë.h
>

32 
	~<√tdb.h
>

33 
	~<sys/pﬁl.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/sockë.h
>

36 
	~<sys/time.h
>

37 
	~<sys/ªsour˚.h
>

39 
	~<±hªad.h
>

40 
	~<öây≥s.h
>

42 
	~"../fio.h
"

43 
	~"../hash.h
"

44 
	~"../›tgroup.h
"

46 
	~<rdma/rdma_cma.h
>

48 
	#FIO_RDMA_MAX_IO_DEPTH
 512

	)

50 
	erdma_io_mode
 {

51 
	mFIO_RDMA_UNKNOWN
 = 0,

52 
	mFIO_RDMA_MEM_WRITE
,

53 
	mFIO_RDMA_MEM_READ
,

54 
	mFIO_RDMA_CHA_SEND
,

55 
	mFIO_RDMA_CHA_RECV


58 
	srdmaio_›ti⁄s
 {

59 
thªad_d©a
 *
	mtd
;

60 
	mp‹t
;

61 
rdma_io_mode
 
	mvîb
;

62 *
	mböd«me
;

65 
	$°r_ho°«me_cb
(*
d©a
, c⁄° *
öput
)

67 
rdmaio_›ti⁄s
 *
o
 = 
d©a
;

69 i‡(
o
->
td
->o.
fûíame
)

70 
	`‰ì
(
o
->
td
->o.
fûíame
);

71 
o
->
td
->o.
fûíame
 = 
	`°rdup
(
öput
);

73 
	}
}

75 
fio_›ti⁄
 
	g›ti⁄s
[] = {

77 .
«me
 = "hostname",

78 .
	g ame
 = "rdmaÉngine hostname",

79 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

80 .
	gcb
 = 
°r_ho°«me_cb
,

81 .
	ghñp
 = "Hostname for RDMA IOÉngine",

82 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

83 .
	ggroup
 = 
FIO_OPT_G_RDMA
,

86 .
	g«me
 = "bindname",

87 .
	g ame
 = "rdmaÉngine bindname",

88 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

89 .
	goff1
 = 
off£tof
(
rdmaio_›ti⁄s
, 
böd«me
),

90 .
	ghñp
 = "Bind for RDMA IOÉngine",

91 .
	gdef
 = "",

92 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

93 .
	ggroup
 = 
FIO_OPT_G_RDMA
,

96 .
	g«me
 = "port",

97 .
	g ame
 = "rdmaÉngineÖort",

98 .
	gty≥
 = 
FIO_OPT_INT
,

99 .
	goff1
 = 
off£tof
(
rdmaio_›ti⁄s
, 
p‹t
),

100 .
	gmövÆ
 = 1,

101 .
	gmaxvÆ
 = 65535,

102 .
	ghñp
 = "PortÅo use for RDMA connections",

103 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

104 .
	ggroup
 = 
FIO_OPT_G_RDMA
,

107 .
	g«me
 = "verb",

108 .
	g ame
 = "RDMAÉngine verb",

109 .
	gÆüs
 = "proto",

110 .
	gty≥
 = 
FIO_OPT_STR
,

111 .
	goff1
 = 
off£tof
(
rdmaio_›ti⁄s
, 
vîb
),

112 .
	ghñp
 = "RDMAÉngine verb",

113 .
	gdef
 = "write",

114 .
	gposvÆ
 = {

115 { .
ivÆ
 = "write",

116 .
	govÆ
 = 
FIO_RDMA_MEM_WRITE
,

117 .
	ghñp
 = "Memory Write",

119 { .
	givÆ
 = "read",

120 .
	govÆ
 = 
FIO_RDMA_MEM_READ
,

121 .
	ghñp
 = "Memory Read",

123 { .
	givÆ
 = "send",

124 .
	govÆ
 = 
FIO_RDMA_CHA_SEND
,

125 .
	ghñp
 = "Posted Send",

127 { .
	givÆ
 = "recv",

128 .
	govÆ
 = 
FIO_RDMA_CHA_RECV
,

129 .
	ghñp
 = "Posted Receive",

132 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

133 .
	ggroup
 = 
FIO_OPT_G_RDMA
,

136 .
	g«me
 = 
NULL
,

140 
	sªmŸe_u
 {

141 
uöt64_t
 
	mbuf
;

142 
uöt32_t
 
	mrkey
;

143 
uöt32_t
 
	msize
;

146 
	srdma_öfo_blk
 {

147 
uöt32_t
 
	mmode
;

148 
uöt32_t
 
	mƒ
;

151 
uöt32_t
 
	mmax_bs
;

152 
ªmŸe_u
 
	mrmt_us
[
FIO_RDMA_MAX_IO_DEPTH
];

155 
	srdma_io_u_d©a
 {

156 
uöt64_t
 
	mwr_id
;

157 
ibv_£nd_wr
 
	msq_wr
;

158 
ibv_ªcv_wr
 
	mrq_wr
;

159 
ibv_sge
 
	mrdma_sgl
;

162 
	srdmaio_d©a
 {

163 
	mis_˛õ¡
;

164 
rdma_io_mode
 
	mrdma_¥Ÿocﬁ
;

165 
	mho°
[64];

166 
sockaddr_ö
 
	maddr
;

168 
ibv_ªcv_wr
 
	mrq_wr
;

169 
ibv_sge
 
	mªcv_sgl
;

170 
rdma_öfo_blk
 
	mªcv_buf
;

171 
ibv_mr
 *
	mªcv_mr
;

173 
ibv_£nd_wr
 
	msq_wr
;

174 
ibv_sge
 
	m£nd_sgl
;

175 
rdma_öfo_blk
 
	m£nd_buf
;

176 
ibv_mr
 *
	m£nd_mr
;

178 
ibv_comp_ch™√l
 *
	mch™√l
;

179 
ibv_cq
 *
	mcq
;

180 
ibv_pd
 *
	mpd
;

181 
ibv_qp
 *
	mqp
;

183 
±hªad_t
 
	mcmthªad
;

184 
rdma_evít_ch™√l
 *
	mcm_ch™√l
;

185 
rdma_cm_id
 *
	mcm_id
;

186 
rdma_cm_id
 *
	mchûd_cm_id
;

188 
	mcq_evít_num
;

190 
ªmŸe_u
 *
	mrmt_us
;

191 
	mrmt_ƒ
;

192 
io_u
 **
	mio_us_queued
;

193 
	mio_u_queued_ƒ
;

194 
io_u
 **
	mio_us_Êight
;

195 
	mio_u_Êight_ƒ
;

196 
io_u
 **
	mio_us_com∂ëed
;

197 
	mio_u_com∂ëed_ƒ
;

199 
‰™d_°©e
 
	mønd_°©e
;

202 
	$˛õ¡_ªcv
(
thªad_d©a
 *
td
, 
ibv_wc
 *
wc
)

204 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

205 
max_bs
;

207 i‡(
wc
->
byã_Àn
 !(
rd
->
ªcv_buf
)) {

208 
	`log_îr
("Re˚ived bogu†d©a, sizê%d\n", 
wc
->
byã_Àn
);

212 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

213 i‡(
max_bs
 > 
	`¡ohl
(
rd
->
ªcv_buf
.max_bs)) {

214 
	`log_îr
("fio: Server's block size (%d) must be greaterÅhan or "

216 
	`¡ohl
(
rd
->
ªcv_buf
.
max_bs
), max_bs);

221 i‡((
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
) ||

222 (
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_READ
)) {

224 
i
 = 0;

226 
rd
->
rmt_ƒ
 = 
	`¡ohl
‘d->
ªcv_buf
.
ƒ
);

228 
i
 = 0; i < 
rd
->
rmt_ƒ
; i++) {

229 
rd
->
rmt_us
[
i
].
buf
 = 
	`be64_to_˝u
‘d->
ªcv_buf
.rmt_us[i].buf);

230 
rd
->
rmt_us
[
i
].
rkey
 = 
	`¡ohl
‘d->
ªcv_buf
.rmt_us[i].rkey);

231 
rd
->
rmt_us
[
i
].
size
 = 
	`¡ohl
‘d->
ªcv_buf
.rmt_us[i].size);

233 
	`d¥öt
(
FD_IO
,

234 "fio: Re˚ivedÑkey %xádd∏%" 
PRIx64


235 "Üí %d fromÖìr\n", 
rd
->
rmt_us
[
i
].
rkey
,

236 
rd
->
rmt_us
[
i
].
buf
,Ñd->rmt_us[i].
size
);

241 
	}
}

243 
	$£rvî_ªcv
(
thªad_d©a
 *
td
, 
ibv_wc
 *
wc
)

245 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

246 
max_bs
;

248 i‡(
wc
->
wr_id
 =
FIO_RDMA_MAX_IO_DEPTH
) {

249 
rd
->
rdma_¥Ÿocﬁ
 = 
	`¡ohl
‘d->
ªcv_buf
.
mode
);

252 i‡(
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_CHA_SEND
)

253 
rd
->
rdma_¥Ÿocﬁ
 = 
FIO_RDMA_CHA_RECV
;

255 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

256 i‡(
max_bs
 < 
	`¡ohl
(
rd
->
ªcv_buf
.max_bs)) {

257 
	`log_îr
("fio: Server's block size (%d) must be greaterÅhan or "

259 
	`¡ohl
(
rd
->
ªcv_buf
.
max_bs
), max_bs);

266 
	}
}

268 
	$cq_evít_h™dÀr
(
thªad_d©a
 *
td
, 
ibv_wc_›code
 
›code
)

270 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

271 
ibv_wc
 
wc
;

272 
rdma_io_u_d©a
 *
r_io_u_d
;

273 
ªt
;

274 
com≥vnum
 = 0;

275 
i
;

277 (
ªt
 = 
	`ibv_pﬁl_cq
(
rd
->
cq
, 1, &
wc
)) == 1) {

278 
ªt
 = 0;

279 
com≥vnum
++;

281 i‡(
wc
.
°©us
) {

282 
	`log_îr
("fio: cq completion status %d(%s)\n",

283 
wc
.
°©us
, 
	`ibv_wc_°©us_°r
(wc.status));

287 
wc
.
›code
) {

289 
IBV_WC_RECV
:

290 i‡(
rd
->
is_˛õ¡
 == 1)

291 
ªt
 = 
	`˛õ¡_ªcv
(
td
, &
wc
);

293 
ªt
 = 
	`£rvî_ªcv
(
td
, &
wc
);

295 i‡(
ªt
)

298 i‡(
wc
.
wr_id
 =
FIO_RDMA_MAX_IO_DEPTH
)

301 
i
 = 0; i < 
rd
->
io_u_Êight_ƒ
; i++) {

302 
r_io_u_d
 = 
rd
->
io_us_Êight
[
i
]->
ígöe_d©a
;

304 i‡(
wc
.
wr_id
 =
r_io_u_d
->
rq_wr
.wr_id) {

305 
rd
->
io_us_Êight
[
i
]->
ªsid
 =

306 
rd
->
io_us_Êight
[
i
]->
buÊí


307 - 
wc
.
byã_Àn
;

309 
rd
->
io_us_Êight
[
i
]->
îr‹
 = 0;

311 
rd
->
io_us_com∂ëed
[rd->

312 
io_u_com∂ëed_ƒ
]

313 
rd
->
io_us_Êight
[
i
];

314 
rd
->
io_u_com∂ëed_ƒ
++;

318 i‡(
i
 =
rd
->
io_u_Êight_ƒ
)

319 
	`log_îr
("fio:Ñecv w∏%" 
PRId64
 "Çot found\n",

320 
wc
.
wr_id
);

323 
rd
->
io_us_Êight
[
i
] =

324 
rd
->
io_us_Êight
[rd->
io_u_Êight_ƒ
 - 1];

325 
rd
->
io_u_Êight_ƒ
--;

330 
IBV_WC_SEND
:

331 
IBV_WC_RDMA_WRITE
:

332 
IBV_WC_RDMA_READ
:

333 i‡(
wc
.
wr_id
 =
FIO_RDMA_MAX_IO_DEPTH
)

336 
i
 = 0; i < 
rd
->
io_u_Êight_ƒ
; i++) {

337 
r_io_u_d
 = 
rd
->
io_us_Êight
[
i
]->
ígöe_d©a
;

339 i‡(
wc
.
wr_id
 =
r_io_u_d
->
sq_wr
.wr_id) {

340 
rd
->
io_us_com∂ëed
[rd->

341 
io_u_com∂ëed_ƒ
]

342 
rd
->
io_us_Êight
[
i
];

343 
rd
->
io_u_com∂ëed_ƒ
++;

347 i‡(
i
 =
rd
->
io_u_Êight_ƒ
)

348 
	`log_îr
("fio: síd w∏%" 
PRId64
 "Çot found\n",

349 
wc
.
wr_id
);

352 
rd
->
io_us_Êight
[
i
] =

353 
rd
->
io_us_Êight
[rd->
io_u_Êight_ƒ
 - 1];

354 
rd
->
io_u_Êight_ƒ
--;

360 
	`log_öfo
("fio: unknown completionÉvent %d\n",

361 
wc
.
›code
);

364 
rd
->
cq_evít_num
++;

367 i‡(
ªt
) {

368 
	`log_îr
("fio:Öﬁ»îr‹ %d\n", 
ªt
);

372  
com≥vnum
;

373 
	}
}

379 
	$rdma_pﬁl_waô
(
thªad_d©a
 *
td
, 
ibv_wc_›code
 
›code
)

381 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

382 
ibv_cq
 *
ev_cq
;

383 *
ev_˘x
;

384 
ªt
;

386 i‡(
rd
->
cq_evít_num
 > 0) {

387 
rd
->
cq_evít_num
--;

391 
agaö
:

392 i‡(
	`ibv_gë_cq_evít
(
rd
->
ch™√l
, &
ev_cq
, &
ev_˘x
) != 0) {

393 
	`log_îr
("fio: FailedÅo get cqÉvent!\n");

396 i‡(
ev_cq
 !
rd
->
cq
) {

397 
	`log_îr
("fio: Unknown CQ!\n");

400 i‡(
	`ibv_ªq_nŸify_cq
(
rd
->
cq
, 0) != 0) {

401 
	`log_îr
("fio: FailedÅo setÇotify!\n");

405 
ªt
 = 
	`cq_evít_h™dÀr
(
td
, 
›code
);

406 i‡(
ªt
 == 0)

407 
agaö
;

409 
	`ibv_ack_cq_evíts
(
rd
->
cq
, 
ªt
);

411 
rd
->
cq_evít_num
--;

413  
ªt
;

414 
	}
}

416 
	$fio_rdmaio_£tup_qp
(
thªad_d©a
 *
td
)

418 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

419 
ibv_qp_öô_©å
 
öô_©å
;

420 
qp_dïth
 = 
td
->
o
.
iodïth
 * 2;

422 i‡(
rd
->
is_˛õ¡
 == 0)

423 
rd
->
pd
 = 
	`ibv_Æloc_pd
‘d->
chûd_cm_id
->
vîbs
);

425 
rd
->
pd
 = 
	`ibv_Æloc_pd
‘d->
cm_id
->
vîbs
);

427 i‡(
rd
->
pd
 =
NULL
) {

428 
	`log_îr
("fio: ibv_alloc_pd fail: %m\n");

432 i‡(
rd
->
is_˛õ¡
 == 0)

433 
rd
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
‘d->
chûd_cm_id
->
vîbs
);

435 
rd
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
‘d->
cm_id
->
vîbs
);

436 i‡(
rd
->
ch™√l
 =
NULL
) {

437 
	`log_îr
("fio: ibv_create_comp_channel fail: %m\n");

438 
îr1
;

441 i‡(
qp_dïth
 < 16)

442 
qp_dïth
 = 16;

444 i‡(
rd
->
is_˛õ¡
 == 0)

445 
rd
->
cq
 = 
	`ibv_¸óã_cq
‘d->
chûd_cm_id
->
vîbs
,

446 
qp_dïth
, 
rd
,Ñd->
ch™√l
, 0);

448 
rd
->
cq
 = 
	`ibv_¸óã_cq
‘d->
cm_id
->
vîbs
,

449 
qp_dïth
, 
rd
,Ñd->
ch™√l
, 0);

450 i‡(
rd
->
cq
 =
NULL
) {

451 
	`log_îr
("fio: ibv_create_cq failed: %m\n");

452 
îr2
;

455 i‡(
	`ibv_ªq_nŸify_cq
(
rd
->
cq
, 0) != 0) {

456 
	`log_îr
("fio: ibv_req_notify_cq failed: %m\n");

457 
îr3
;

461 
	`mem£t
(&
öô_©å
, 0, (init_attr));

462 
öô_©å
.
ˇp
.
max_£nd_wr
 = 
qp_dïth
;

463 
öô_©å
.
ˇp
.
max_ªcv_wr
 = 
qp_dïth
;

464 
öô_©å
.
ˇp
.
max_ªcv_sge
 = 1;

465 
öô_©å
.
ˇp
.
max_£nd_sge
 = 1;

466 
öô_©å
.
qp_ty≥
 = 
IBV_QPT_RC
;

467 
öô_©å
.
£nd_cq
 = 
rd
->
cq
;

468 
öô_©å
.
ªcv_cq
 = 
rd
->
cq
;

470 i‡(
rd
->
is_˛õ¡
 == 0) {

471 i‡(
	`rdma_¸óã_qp
(
rd
->
chûd_cm_id
,Ñd->
pd
, &
öô_©å
) != 0) {

472 
	`log_îr
("fio:Ñdma_create_qp failed: %m\n");

473 
îr3
;

475 
rd
->
qp
 =Ñd->
chûd_cm_id
->qp;

477 i‡(
	`rdma_¸óã_qp
(
rd
->
cm_id
,Ñd->
pd
, &
öô_©å
) != 0) {

478 
	`log_îr
("fio:Ñdma_create_qp failed: %m\n");

479 
îr3
;

481 
rd
->
qp
 =Ñd->
cm_id
->qp;

486 
îr3
:

487 
	`ibv_de°roy_cq
(
rd
->
cq
);

488 
îr2
:

489 
	`ibv_de°roy_comp_ch™√l
(
rd
->
ch™√l
);

490 
îr1
:

491 
	`ibv_dóŒoc_pd
(
rd
->
pd
);

494 
	}
}

496 
	$fio_rdmaio_£tup_c⁄åﬁ_msg_buf„rs
(
thªad_d©a
 *
td
)

498 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

500 
rd
->
ªcv_mr
 = 
	`ibv_ªg_mr
‘d->
pd
, &rd->
ªcv_buf
, (rd->recv_buf),

501 
IBV_ACCESS_LOCAL_WRITE
);

502 i‡(
rd
->
ªcv_mr
 =
NULL
) {

503 
	`log_îr
("fio:Ñecv_bufÑeg_mr failed: %m\n");

507 
rd
->
£nd_mr
 = 
	`ibv_ªg_mr
‘d->
pd
, &rd->
£nd_buf
, (rd->send_buf),

509 i‡(
rd
->
£nd_mr
 =
NULL
) {

510 
	`log_îr
("fio: send_bufÑeg_mr failed: %m\n");

511 
	`ibv_dîeg_mr
(
rd
->
ªcv_mr
);

517 
rd
->
ªcv_sgl
.
addr
 = (
uöt64_t
Ë()&rd->
ªcv_buf
;

518 
rd
->
ªcv_sgl
.
Àngth
 = ‘d->
ªcv_buf
);

519 
rd
->
ªcv_sgl
.
lkey
 =Ñd->
ªcv_mr
->lkey;

520 
rd
->
rq_wr
.
sg_li°
 = &rd->
ªcv_sgl
;

521 
rd
->
rq_wr
.
num_sge
 = 1;

522 
rd
->
rq_wr
.
wr_id
 = 
FIO_RDMA_MAX_IO_DEPTH
;

525 
rd
->
£nd_sgl
.
addr
 = (
uöt64_t
Ë()&rd->
£nd_buf
;

526 
rd
->
£nd_sgl
.
Àngth
 = ‘d->
£nd_buf
);

527 
rd
->
£nd_sgl
.
lkey
 =Ñd->
£nd_mr
->lkey;

529 
rd
->
sq_wr
.
›code
 = 
IBV_WR_SEND
;

530 
rd
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

531 
rd
->
sq_wr
.
sg_li°
 = &rd->
£nd_sgl
;

532 
rd
->
sq_wr
.
num_sge
 = 1;

533 
rd
->
sq_wr
.
wr_id
 = 
FIO_RDMA_MAX_IO_DEPTH
;

536 
	}
}

538 
	$gë_√xt_ch™√l_evít
(
thªad_d©a
 *
td
,

539 
rdma_evít_ch™√l
 *
ch™√l
,

540 
rdma_cm_evít_ty≥
 
waô_evít
)

542 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

543 
rdma_cm_evít
 *
evít
;

544 
ªt
;

546 
ªt
 = 
	`rdma_gë_cm_evít
(
ch™√l
, &
evít
);

547 i‡(
ªt
) {

548 
	`log_îr
("fio:Ñdma_gë_cm_evít: %d\n", 
ªt
);

552 i‡(
evít
->evíà!
waô_evít
) {

553 
	`log_îr
("fio:Évent is %s instead of %s\n",

554 
	`rdma_evít_°r
(
evít
->event),

555 
	`rdma_evít_°r
(
waô_evít
));

559 
evít
->event) {

560 
RDMA_CM_EVENT_CONNECT_REQUEST
:

561 
rd
->
chûd_cm_id
 = 
evít
->
id
;

567 
	`rdma_ack_cm_evít
(
evít
);

570 
	}
}

572 
	$fio_rdmaio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

574 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

575 
rdma_io_u_d©a
 *
r_io_u_d
;

577 
r_io_u_d
 = 
io_u
->
ígöe_d©a
;

579 
rd
->
rdma_¥Ÿocﬁ
) {

580 
FIO_RDMA_MEM_WRITE
:

581 
FIO_RDMA_MEM_READ
:

582 
r_io_u_d
->
rdma_sgl
.
addr
 = (
uöt64_t
Ë()
io_u
->
buf
;

583 
r_io_u_d
->
rdma_sgl
.
lkey
 = 
io_u
->
mr
->lkey;

584 
r_io_u_d
->
sq_wr
.
wr_id
 =Ñ_io_u_d->wr_id;

585 
r_io_u_d
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

586 
r_io_u_d
->
sq_wr
.
sg_li°
 = &r_io_u_d->
rdma_sgl
;

587 
r_io_u_d
->
sq_wr
.
num_sge
 = 1;

589 
FIO_RDMA_CHA_SEND
:

590 
r_io_u_d
->
rdma_sgl
.
addr
 = (
uöt64_t
Ë()
io_u
->
buf
;

591 
r_io_u_d
->
rdma_sgl
.
lkey
 = 
io_u
->
mr
->lkey;

592 
r_io_u_d
->
rdma_sgl
.
Àngth
 = 
io_u
->
buÊí
;

593 
r_io_u_d
->
sq_wr
.
wr_id
 =Ñ_io_u_d->wr_id;

594 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_SEND
;

595 
r_io_u_d
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

596 
r_io_u_d
->
sq_wr
.
sg_li°
 = &r_io_u_d->
rdma_sgl
;

597 
r_io_u_d
->
sq_wr
.
num_sge
 = 1;

599 
FIO_RDMA_CHA_RECV
:

600 
r_io_u_d
->
rdma_sgl
.
addr
 = (
uöt64_t
Ë()
io_u
->
buf
;

601 
r_io_u_d
->
rdma_sgl
.
lkey
 = 
io_u
->
mr
->lkey;

602 
r_io_u_d
->
rdma_sgl
.
Àngth
 = 
io_u
->
buÊí
;

603 
r_io_u_d
->
rq_wr
.
wr_id
 =Ñ_io_u_d->wr_id;

604 
r_io_u_d
->
rq_wr
.
sg_li°
 = &r_io_u_d->
rdma_sgl
;

605 
r_io_u_d
->
rq_wr
.
num_sge
 = 1;

608 
	`log_îr
("fio: unknow¿rdm®¥Ÿocﬁ - %d\n", 
rd
->
rdma_¥Ÿocﬁ
);

613 
	}
}

615 
io_u
 *
	$fio_rdmaio_evít
(
thªad_d©a
 *
td
, 
evít
)

617 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

618 
io_u
 *io_u;

619 
i
;

621 
io_u
 = 
rd
->
io_us_com∂ëed
[0];

622 
i
 = 0; i < 
rd
->
io_u_com∂ëed_ƒ
 - 1; i++)

623 
rd
->
io_us_com∂ëed
[
i
] =Ñd->io_us_completed[i + 1];

625 
rd
->
io_u_com∂ëed_ƒ
--;

627 
	`d¥öt_io_u
(
io_u
, "fio_rdmaio_event");

629  
io_u
;

630 
	}
}

632 
	$fio_rdmaio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

633 
max
, c⁄° 
time•ec
 *
t
)

635 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

636 
ibv_wc_›code
 
comp_›code
;

637 
ibv_cq
 *
ev_cq
;

638 *
ev_˘x
;

639 
ªt
, 
r
 = 0;

640 
comp_›code
 = 
IBV_WC_RDMA_WRITE
;

642 
rd
->
rdma_¥Ÿocﬁ
) {

643 
FIO_RDMA_MEM_WRITE
:

644 
comp_›code
 = 
IBV_WC_RDMA_WRITE
;

646 
FIO_RDMA_MEM_READ
:

647 
comp_›code
 = 
IBV_WC_RDMA_READ
;

649 
FIO_RDMA_CHA_SEND
:

650 
comp_›code
 = 
IBV_WC_SEND
;

652 
FIO_RDMA_CHA_RECV
:

653 
comp_›code
 = 
IBV_WC_RECV
;

656 
	`log_îr
("fio: unknow¿rdm®¥Ÿocﬁ - %d\n", 
rd
->
rdma_¥Ÿocﬁ
);

660 i‡(
rd
->
cq_evít_num
 > 0) {

661 
rd
->
cq_evít_num
--;

665 
agaö
:

666 i‡(
	`ibv_gë_cq_evít
(
rd
->
ch™√l
, &
ev_cq
, &
ev_˘x
) != 0) {

667 
	`log_îr
("fio: FailedÅo get cqÉvent!\n");

670 i‡(
ev_cq
 !
rd
->
cq
) {

671 
	`log_îr
("fio: Unknown CQ!\n");

674 i‡(
	`ibv_ªq_nŸify_cq
(
rd
->
cq
, 0) != 0) {

675 
	`log_îr
("fio: FailedÅo setÇotify!\n");

679 
ªt
 = 
	`cq_evít_h™dÀr
(
td
, 
comp_›code
);

680 i‡(
ªt
 < 1)

681 
agaö
;

683 
	`ibv_ack_cq_evíts
(
rd
->
cq
, 
ªt
);

685 
r
 +
ªt
;

686 i‡(
r
 < 
mö
)

687 
agaö
;

689 
rd
->
cq_evít_num
 -
r
;

691  
r
;

692 
	}
}

694 
	$fio_rdmaio_£nd
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

695 
ƒ
)

697 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

698 
ibv_£nd_wr
 *
bad_wr
;

700 
ibv_wc_›code
 
comp_›code
;

701 
comp_›code
 = 
IBV_WC_RDMA_WRITE
;

703 
i
;

704 
ödex
;

705 
rdma_io_u_d©a
 *
r_io_u_d
;

707 
r_io_u_d
 = 
NULL
;

709 
i
 = 0; i < 
ƒ
; i++) {

711 
rd
->
rdma_¥Ÿocﬁ
) {

712 
FIO_RDMA_MEM_WRITE
:

714 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

715 
ödex
 = 
	`__ønd
(&
rd
->
ønd_°©e
Ë%Ñd->
rmt_ƒ
;

716 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_RDMA_WRITE
;

717 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
rkey
 = 
rd
->
rmt_us
[
ödex
].rkey;

718 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
ªmŸe_addr
 = \

719 
rd
->
rmt_us
[
ödex
].
buf
;

720 
r_io_u_d
->
sq_wr
.
sg_li°
->
Àngth
 = 
io_us
[
i
]->
buÊí
;

722 
FIO_RDMA_MEM_READ
:

724 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

725 
ödex
 = 
	`__ønd
(&
rd
->
ønd_°©e
Ë%Ñd->
rmt_ƒ
;

726 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_RDMA_READ
;

727 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
rkey
 = 
rd
->
rmt_us
[
ödex
].rkey;

728 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
ªmŸe_addr
 = \

729 
rd
->
rmt_us
[
ödex
].
buf
;

730 
r_io_u_d
->
sq_wr
.
sg_li°
->
Àngth
 = 
io_us
[
i
]->
buÊí
;

732 
FIO_RDMA_CHA_SEND
:

733 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

734 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_SEND
;

735 
r_io_u_d
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

738 
	`log_îr
("fio: unknownÑdmaÖrotocol - %d\n",

739 
rd
->
rdma_¥Ÿocﬁ
);

743 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &
r_io_u_d
->
sq_wr
, &
bad_wr
) != 0) {

744 
	`log_îr
("fio: ibv_post_send fail: %m\n");

748 
	`d¥öt_io_u
(
io_us
[
i
], "fio_rdmaio_send");

754  
i
;

755 
	}
}

757 
	$fio_rdmaio_ªcv
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

758 
ƒ
)

760 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

761 
ibv_ªcv_wr
 *
bad_wr
;

762 
rdma_io_u_d©a
 *
r_io_u_d
;

763 
i
;

765 
i
 = 0;

766 i‡(
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_CHA_RECV
) {

768 
i
 = 0; i < 
ƒ
; i++) {

769 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

770 i‡(
	`ibv_po°_ªcv
(
rd
->
qp
, &
r_io_u_d
->
rq_wr
, &
bad_wr
) !=

772 
	`log_îr
("fio: ibv_post_recv fail: %m\n");

776 } i‡((
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_READ
)

777 || (
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
)) {

779 i‡(
	`ibv_po°_ªcv
(
rd
->
qp
, &rd->
rq_wr
, &
bad_wr
) != 0) {

780 
	`log_îr
("fio: ibv_post_recv fail: %m\n");

784 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_RECV
);

786 
	`d¥öt
(
FD_IO
, "fio:Ñecv FINISH message\n");

787 
td
->
d⁄e
 = 1;

791  
i
;

792 
	}
}

794 
	$fio_rdmaio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

796 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

798 
	`fio_ro_check
(
td
, 
io_u
);

800 i‡(
rd
->
io_u_queued_ƒ
 =()
td
->
o
.
iodïth
)

801  
FIO_Q_BUSY
;

803 
rd
->
io_us_queued
[rd->
io_u_queued_ƒ
] = 
io_u
;

804 
rd
->
io_u_queued_ƒ
++;

806 
	`d¥öt_io_u
(
io_u
, "fio_rdmaio_queue");

808  
FIO_Q_QUEUED
;

809 
	}
}

811 
	$fio_rdmaio_queued
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

812 
ƒ
)

814 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

815 
time•ec
 
now
;

816 
i
;

818 i‡(!
	`fio_fûl_issue_time
(
td
))

821 
	`fio_gëtime
(&
now
, 
NULL
);

823 
i
 = 0; i < 
ƒ
; i++) {

824 
io_u
 *io_u = 
io_us
[
i
];

827 
rd
->
io_us_Êight
[rd->
io_u_Êight_ƒ
] = 
io_u
;

828 
rd
->
io_u_Êight_ƒ
++;

830 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

831 
	`io_u_queued
(
td
, 
io_u
);

833 
	}
}

835 
	$fio_rdmaio_commô
(
thªad_d©a
 *
td
)

837 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

838 
io_u
 **
io_us
;

839 
ªt
;

841 i‡(!
rd
->
io_us_queued
)

844 
io_us
 = 
rd
->
io_us_queued
;

847 i‡(
rd
->
is_˛õ¡
)

848 
ªt
 = 
	`fio_rdmaio_£nd
(
td
, 
io_us
, 
rd
->
io_u_queued_ƒ
);

849 i‡(!
rd
->
is_˛õ¡
)

850 
ªt
 = 
	`fio_rdmaio_ªcv
(
td
, 
io_us
, 
rd
->
io_u_queued_ƒ
);

852 
ªt
 = 0;

854 i‡(
ªt
 > 0) {

855 
	`fio_rdmaio_queued
(
td
, 
io_us
, 
ªt
);

856 
	`io_u_m¨k_submô
(
td
, 
ªt
);

857 
rd
->
io_u_queued_ƒ
 -
ªt
;

858 
io_us
 +
ªt
;

859 
ªt
 = 0;

862 } 
rd
->
io_u_queued_ƒ
);

864  
ªt
;

865 
	}
}

867 
	$fio_rdmaio_c⁄√˘
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

869 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

870 
rdma_c⁄n_∑øm
 
c⁄n_∑øm
;

871 
ibv_£nd_wr
 *
bad_wr
;

873 
	`mem£t
(&
c⁄n_∑øm
, 0, (conn_param));

874 
c⁄n_∑øm
.
ª•⁄dî_ªsour˚s
 = 1;

875 
c⁄n_∑øm
.
öôüt‹_dïth
 = 1;

876 
c⁄n_∑øm
.
ªåy_cou¡
 = 10;

878 i‡(
	`rdma_c⁄√˘
(
rd
->
cm_id
, &
c⁄n_∑øm
) != 0) {

879 
	`log_îr
("fio:Ñdma_connect fail: %m\n");

883 i‡(
gë_√xt_ch™√l_evít


884 (
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ESTABLISHED
) != 0) {

885 
	`log_îr
("fio: wait for RDMA_CM_EVENT_ESTABLISHED\n");

890 
rd
->
£nd_buf
.
mode
 = 
	`ht⁄l
‘d->
rdma_¥Ÿocﬁ
);

891 
rd
->
£nd_buf
.
ƒ
 = 
	`ht⁄l
(
td
->
o
.
iodïth
);

893 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &rd->
sq_wr
, &
bad_wr
) != 0) {

894 
	`log_îr
("fio: ibv_post_send fail: %m\n");

898 i‡(
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_SEND
) < 0)

902 i‡(
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_RECV
) < 0)

913 
	`u¶ìp
(500000);

916 
	}
}

918 
	$fio_rdmaio_ac˚±
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

920 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

921 
rdma_c⁄n_∑øm
 
c⁄n_∑øm
;

922 
ibv_£nd_wr
 *
bad_wr
;

923 
ªt
 = 0;

926 
	`mem£t
(&
c⁄n_∑øm
, 0, (conn_param));

927 
c⁄n_∑øm
.
ª•⁄dî_ªsour˚s
 = 1;

928 
c⁄n_∑øm
.
öôüt‹_dïth
 = 1;

930 i‡(
	`rdma_ac˚±
(
rd
->
chûd_cm_id
, &
c⁄n_∑øm
) != 0) {

931 
	`log_îr
("fio:Ñdma_accept: %m\n");

935 i‡(
gë_√xt_ch™√l_evít


936 (
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ESTABLISHED
) != 0) {

937 
	`log_îr
("fio: wait for RDMA_CM_EVENT_ESTABLISHED\n");

942 
ªt
 = 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_RECV
) < 0;

944 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &rd->
sq_wr
, &
bad_wr
) != 0) {

945 
	`log_îr
("fio: ibv_post_send fail: %m\n");

949 i‡(
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_SEND
) < 0)

952  
ªt
;

953 
	}
}

955 
	$fio_rdmaio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

957 i‡(
	`td_ªad
(
td
))

958  
	`fio_rdmaio_ac˚±
(
td
, 
f
);

960  
	`fio_rdmaio_c⁄√˘
(
td
, 
f
);

961 
	}
}

963 
	$fio_rdmaio_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

965 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

966 
ibv_£nd_wr
 *
bad_wr
;

974 i‡((
rd
->
is_˛õ¡
 =1Ë&& (‘d->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
)

975 || (
rd
->
rdma_¥Ÿocﬁ
 ==

976 
FIO_RDMA_MEM_READ
))) {

977 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &rd->
sq_wr
, &
bad_wr
) != 0) {

978 
	`log_îr
("fio: ibv_post_send fail: %m\n");

982 
	`d¥öt
(
FD_IO
, "fio: close information sent success\n");

983 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_SEND
);

986 i‡(
rd
->
is_˛õ¡
 == 1)

987 
	`rdma_disc⁄√˘
(
rd
->
cm_id
);

989 
	`rdma_disc⁄√˘
(
rd
->
chûd_cm_id
);

991 
	`rdma_disc⁄√˘
(
rd
->
cm_id
);

996 i‡(
	`gë_√xt_ch™√l_evít
(
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_DISCONNECTED
) != 0) {

997 
	`log_îr
("fio: wait for RDMA_CM_EVENT_DISCONNECTED\n");

1002 
	`ibv_de°roy_cq
(
rd
->
cq
);

1003 
	`ibv_de°roy_qp
(
rd
->
qp
);

1005 i‡(
rd
->
is_˛õ¡
 == 1)

1006 
	`rdma_de°roy_id
(
rd
->
cm_id
);

1008 
	`rdma_de°roy_id
(
rd
->
chûd_cm_id
);

1009 
	`rdma_de°roy_id
(
rd
->
cm_id
);

1012 
	`ibv_de°roy_comp_ch™√l
(
rd
->
ch™√l
);

1013 
	`ibv_dóŒoc_pd
(
rd
->
pd
);

1016 
	}
}

1018 
	$©⁄
(
thªad_d©a
 *
td
, c⁄° *
ho°
,

1019 
sockaddr_ö
 *
addr
)

1021 i‡(
	`öë_©⁄
(
ho°
, &
addr
->
sö_addr
) != 1) {

1022 
ho°ít
 *
hít
;

1024 
hít
 = 
	`gëho°by«me
(
ho°
);

1025 i‡(!
hít
) {

1026 
	`td_vîr‹
(
td
, 
î∫o
, "gethostbyname");

1030 
	`mem˝y
(&
addr
->
sö_addr
, 
hít
->
h_addr
, 4);

1033 
	}
}

1035 
	$fio_rdmaio_£tup_c⁄√˘
(
thªad_d©a
 *
td
, c⁄° *
ho°
,

1036 
p‹t
)

1038 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

1039 
rdmaio_›ti⁄s
 *
o
 = 
td
->
eo
;

1040 
sockaddr_°‹age
 
addrb
;

1041 
ibv_ªcv_wr
 *
bad_wr
;

1042 
îr
;

1044 
rd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

1045 
rd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1047 
îr
 = 
	`©⁄
(
td
, 
ho°
, &
rd
->
addr
);

1048 i‡(
îr
)

1049  
îr
;

1052 i‡(
	`°rcmp
(
o
->
böd«me
, "") != 0) {

1053 
addrb
.
ss_Ámûy
 = 
AF_INET
;

1054 
îr
 = 
	`©⁄
(
td
, 
o
->
böd«me
, (
sockaddr_ö
 *)&
addrb
);

1055 i‡(
îr
)

1056  
îr
;

1057 
îr
 = 
	`rdma_ªsﬁve_addr
(
rd
->
cm_id
, (
sockaddr
 *)&
addrb
,

1058 (
sockaddr
 *)&
rd
->
addr
, 2000);

1061 
îr
 = 
	`rdma_ªsﬁve_addr
(
rd
->
cm_id
, 
NULL
,

1062 (
sockaddr
 *)&
rd
->
addr
, 2000);

1065 i‡(
îr
 != 0) {

1066 
	`log_îr
("fio:Ñdma_ªsﬁve_addr: %d\n", 
îr
);

1070 
îr
 = 
	`gë_√xt_ch™√l_evít
(
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ADDR_RESOLVED
);

1071 i‡(
îr
 != 0) {

1072 
	`log_îr
("fio: gë_√xt_ch™√l_evít: %d\n", 
îr
);

1077 
îr
 = 
	`rdma_ªsﬁve_rouã
(
rd
->
cm_id
, 2000);

1078 i‡(
îr
 != 0) {

1079 
	`log_îr
("fio:Ñdma_ªsﬁve_rouã: %d\n", 
îr
);

1083 
îr
 = 
	`gë_√xt_ch™√l_evít
(
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ROUTE_RESOLVED
);

1084 i‡(
îr
 != 0) {

1085 
	`log_îr
("fio: gë_√xt_ch™√l_evít: %d\n", 
îr
);

1090 i‡(
	`fio_rdmaio_£tup_qp
(
td
) != 0)

1093 i‡(
	`fio_rdmaio_£tup_c⁄åﬁ_msg_buf„rs
(
td
) != 0)

1097 
îr
 = 
	`ibv_po°_ªcv
(
rd
->
qp
, &rd->
rq_wr
, &
bad_wr
);

1098 i‡(
îr
 != 0) {

1099 
	`log_îr
("fio: ibv_po°_ªcv faû: %d\n", 
îr
);

1104 
	}
}

1106 
	$fio_rdmaio_£tup_li°í
(
thªad_d©a
 *
td
, 
p‹t
)

1108 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

1109 
rdmaio_›ti⁄s
 *
o
 = 
td
->
eo
;

1110 
ibv_ªcv_wr
 *
bad_wr
;

1111 
°©e
 = 
td
->
run°©e
;

1113 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

1115 
rd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

1116 
rd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1118 i‡(
	`°rcmp
(
o
->
böd«me
, "") == 0)

1119 
rd
->
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

1121 
rd
->
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(*
o
->
böd«me
);

1124 i‡(
	`rdma_böd_addr
(
rd
->
cm_id
, (
sockaddr
 *)&rd->
addr
) != 0) {

1125 
	`log_îr
("fio:Ñdma_bind_addr fail: %m\n");

1129 i‡(
	`rdma_li°í
(
rd
->
cm_id
, 3) != 0) {

1130 
	`log_îr
("fio:Ñdma_listen fail: %m\n");

1134 
	`log_öfo
("fio: waiting for connection\n");

1137 i‡(
gë_√xt_ch™√l_evít


1138 (
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_CONNECT_REQUEST
) != 0) {

1139 
	`log_îr
("fio: wait for RDMA_CM_EVENT_CONNECT_REQUEST\n");

1143 i‡(
	`fio_rdmaio_£tup_qp
(
td
) != 0)

1146 i‡(
	`fio_rdmaio_£tup_c⁄åﬁ_msg_buf„rs
(
td
) != 0)

1150 i‡(
	`ibv_po°_ªcv
(
rd
->
qp
, &rd->
rq_wr
, &
bad_wr
) != 0) {

1151 
	`log_îr
("fio: ibv_post_recv fail: %m\n");

1155 
	`td_£t_run°©e
(
td
, 
°©e
);

1157 
	}
}

1159 
	$check_£t_æimôs
(
thªad_d©a
 *
td
)

1161 #ifde‡
CONFIG_RLIMIT_MEMLOCK


1162 
æimô
 
æ
;

1165 i‡(
	`gëæimô
(
RLIMIT_MEMLOCK
, &
æ
) != 0) {

1166 
	`log_îr
("fio: getrlimit fail: %d(%s)\n",

1167 
î∫o
, 
	`°ªº‹
(errno));

1172 i‡((
æ
.
æim_cur
 !
RLIM_INFINITY
)

1173 && (
æ
.
æim_cur
 < 
td
->
‹ig_buf„r_size
)) {

1174 
	`log_îr
("fio: so· RLIMIT_MEMLOCK is: %" 
PRId64
 "\n",

1175 
æ
.
æim_cur
);

1176 
	`log_îr
("fio:Åotal block size is: %zd\n",

1177 
td
->
‹ig_buf„r_size
);

1179 
æ
.
æim_cur
 =Ñl.
æim_max
;

1180 i‡(
	`£ålimô
(
RLIMIT_MEMLOCK
, &
æ
) != 0) {

1181 
	`log_îr
("fio: setrlimit fail: %d(%s)\n",

1182 
î∫o
, 
	`°ªº‹
(errno));

1183 
	`log_îr
("fio: you mayÅryÉnlarge MEMLOCK byÑoot\n");

1184 
	`log_îr
("# ulimit -l unlimited\n");

1191 
	}
}

1193 
	$com∑t_›ti⁄s
(
thªad_d©a
 *
td
)

1200 
rdmaio_›ti⁄s
 *
o
 = 
td
->
eo
;

1201 *
modï
, *
p‹ç
;

1202 *
fûíame
 = 
td
->
o
.filename;

1204 i‡(!
fûíame
)

1207 
p‹ç
 = 
	`°rchr
(
fûíame
, '/');

1208 i‡(
p‹ç
 =
NULL
)

1211 *
p‹ç
 = '\0';

1212 
p‹ç
++;

1214 
o
->
p‹t
 = 
	`°πﬁ
(
p‹ç
, 
NULL
, 10);

1215 i‡(!
o
->
p‹t
 || o->port > 65535)

1216 
bad_ho°
;

1218 
modï
 = 
	`°rchr
(
p‹ç
, '/');

1219 i‡(
modï
 !
NULL
) {

1220 *
modï
 = '\0';

1221 
modï
++;

1224 i‡(
modï
) {

1225 i‡(!
	`°∫cmp
("rdma_wrôe", 
modï
, 
	`°æí
(modep)) ||

1226 !
	`°∫cmp
("RDMA_WRITE", 
modï
, 
	`°æí
(modep)))

1227 
o
->
vîb
 = 
FIO_RDMA_MEM_WRITE
;

1228 i‡(!
	`°∫cmp
("rdma_ªad", 
modï
, 
	`°æí
(modep)) ||

1229 !
	`°∫cmp
("RDMA_READ", 
modï
, 
	`°æí
(modep)))

1230 
o
->
vîb
 = 
FIO_RDMA_MEM_READ
;

1231 i‡(!
	`°∫cmp
("£nd", 
modï
, 
	`°æí
(modep)) ||

1232 !
	`°∫cmp
("SEND", 
modï
, 
	`°æí
(modep)))

1233 
o
->
vîb
 = 
FIO_RDMA_CHA_SEND
;

1235 
bad_ho°
;

1237 
o
->
vîb
 = 
FIO_RDMA_MEM_WRITE
;

1242 
bad_ho°
:

1243 
	`log_îr
("fio: badÑdm®ho°/p‹t/¥Ÿocﬁ: %s\n", 
td
->
o
.
fûíame
);

1245 
	}
}

1247 
	$fio_rdmaio_öô
(
thªad_d©a
 *
td
)

1249 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

1250 
rdmaio_›ti⁄s
 *
o
 = 
td
->
eo
;

1251 
max_bs
;

1252 
ªt
, 
i
;

1254 i‡(
	`td_rw
(
td
)) {

1255 
	`log_îr
("fio:Ñdma connections must beÑead OR write\n");

1258 i‡(
	`td_øndom
(
td
)) {

1259 
	`log_îr
("fio: RDMAÇetwork IO can't beÑandom\n");

1263 i‡(
	`com∑t_›ti⁄s
(
td
))

1266 i‡(!
o
->
p‹t
) {

1267 
	`log_îr
("fio:ÇoÖort has been specified which isÑequired "

1272 i‡(
	`check_£t_æimôs
(
td
))

1275 
rd
->
rdma_¥Ÿocﬁ
 = 
o
->
vîb
;

1276 
rd
->
cq_evít_num
 = 0;

1278 
rd
->
cm_ch™√l
 = 
	`rdma_¸óã_evít_ch™√l
();

1279 i‡(!
rd
->
cm_ch™√l
) {

1280 
	`log_îr
("fio:Ñdma_create_event_channel fail: %m\n");

1284 
ªt
 = 
	`rdma_¸óã_id
(
rd
->
cm_ch™√l
, &rd->
cm_id
,Ñd, 
RDMA_PS_TCP
);

1285 i‡(
ªt
) {

1286 
	`log_îr
("fio:Ñdma_create_id fail: %m\n");

1290 i‡((
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
) ||

1291 (
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_READ
)) {

1292 
rd
->
rmt_us
 =

1293 
	`mÆloc
(
FIO_RDMA_MAX_IO_DEPTH
 * (
ªmŸe_u
));

1294 
	`mem£t
(
rd
->
rmt_us
, 0,

1295 
FIO_RDMA_MAX_IO_DEPTH
 * (
ªmŸe_u
));

1296 
rd
->
rmt_ƒ
 = 0;

1299 
rd
->
io_us_queued
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

1300 
	`mem£t
(
rd
->
io_us_queued
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

1301 
rd
->
io_u_queued_ƒ
 = 0;

1303 
rd
->
io_us_Êight
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

1304 
	`mem£t
(
rd
->
io_us_Êight
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

1305 
rd
->
io_u_Êight_ƒ
 = 0;

1307 
rd
->
io_us_com∂ëed
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

1308 
	`mem£t
(
rd
->
io_us_com∂ëed
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

1309 
rd
->
io_u_com∂ëed_ƒ
 = 0;

1311 i‡(
	`td_ªad
(
td
)) {

1312 
rd
->
is_˛õ¡
 = 0;

1313 
td
->
Êags
 |
TD_F_NO_PROGRESS
;

1315 
ªt
 = 
	`fio_rdmaio_£tup_li°í
(
td
, 
o
->
p‹t
);

1317 
rd
->
is_˛õ¡
 = 1;

1318 
ªt
 = 
	`fio_rdmaio_£tup_c⁄√˘
(
td
,Åd->
o
.
fûíame
, o->
p‹t
);

1321 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

1322 
rd
->
£nd_buf
.
max_bs
 = 
	`ht⁄l
(max_bs);

1325 
i
 = 0; i < 
td
->
io_u_‰ìli°
.
ƒ
; i++) {

1326 
io_u
 *io_u = 
td
->
io_u_‰ìli°
.
io_us
[
i
];

1328 
io_u
->
ígöe_d©a
 = 
	`mÆloc
((
rdma_io_u_d©a
));

1329 
	`mem£t
(
io_u
->
ígöe_d©a
, 0, (
rdma_io_u_d©a
));

1330 ((
rdma_io_u_d©a
 *)
io_u
->
ígöe_d©a
)->
wr_id
 = 
i
;

1332 
io_u
->
mr
 = 
	`ibv_ªg_mr
(
rd
->
pd
, io_u->
buf
, 
max_bs
,

1333 
IBV_ACCESS_LOCAL_WRITE
 |

1334 
IBV_ACCESS_REMOTE_READ
 |

1335 
IBV_ACCESS_REMOTE_WRITE
);

1336 i‡(
io_u
->
mr
 =
NULL
) {

1337 
	`log_îr
("fio: ibv_reg_mr io_u failed: %m\n");

1341 
rd
->
£nd_buf
.
rmt_us
[
i
].
buf
 =

1342 
	`˝u_to_be64
((
uöt64_t
Ë()
io_u
->
buf
);

1343 
rd
->
£nd_buf
.
rmt_us
[
i
].
rkey
 = 
	`ht⁄l
(
io_u
->
mr
->rkey);

1344 
rd
->
£nd_buf
.
rmt_us
[
i
].
size
 = 
	`ht⁄l
(
max_bs
);

1347 
	`log_öfo
("fio: SídÑkey %xádd∏%" 
PRIx64
 "Üí %dÅÿ˛õ¡\n", 
io_u
->
mr
->
rkey
, io_u->
buf
, 
max_bs
); */

1351 
rd
->
£nd_buf
.
ƒ
 = 
	`ht⁄l
(
i
);

1353  
ªt
;

1354 
	}
}

1356 
	$fio_rdmaio_˛ónup
(
thªad_d©a
 *
td
)

1358 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

1360 i‡(
rd
)

1361 
	`‰ì
(
rd
);

1362 
	}
}

1364 
	$fio_rdmaio_£tup
(
thªad_d©a
 *
td
)

1366 
rdmaio_d©a
 *
rd
;

1368 i‡(!
td
->
fûes_ödex
) {

1369 
	`add_fûe
(
td
,Åd->
o
.
fûíame
 ?: "rdma", 0, 0);

1370 
td
->
o
.
ƒ_fûes
 =Åd->o.nr_files ?: 1;

1371 
td
->
o
.
›í_fûes
++;

1374 i‡(!
td
->
io_›s_d©a
) {

1375 
rd
 = 
	`mÆloc
((*rd));

1377 
	`mem£t
(
rd
, 0, (*rd));

1378 
	`öô_ønd_£ed
(&
rd
->
ønd_°©e
, (Ë
GOLDEN_RATIO_PRIME
, 0);

1379 
td
->
io_›s_d©a
 = 
rd
;

1383 
	}
}

1385 
i€ngöe_›s
 
	gi€ngöe_rw
 = {

1386 .
«me
 = "rdma",

1387 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1388 .
	g£tup
 = 
fio_rdmaio_£tup
,

1389 .
	göô
 = 
fio_rdmaio_öô
,

1390 .
	g¥ï
 = 
fio_rdmaio_¥ï
,

1391 .
	gqueue
 = 
fio_rdmaio_queue
,

1392 .
	gcommô
 = 
fio_rdmaio_commô
,

1393 .
	ggëevíts
 = 
fio_rdmaio_gëevíts
,

1394 .
	gevít
 = 
fio_rdmaio_evít
,

1395 .
	g˛ónup
 = 
fio_rdmaio_˛ónup
,

1396 .
	g›í_fûe
 = 
fio_rdmaio_›í_fûe
,

1397 .
	g˛o£_fûe
 = 
fio_rdmaio_˛o£_fûe
,

1398 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_UNIDIR
 | 
FIO_PIPEIO
,

1399 .
	g›ti⁄s
 = 
›ti⁄s
,

1400 .
	g›ti⁄_°ru˘_size
 = (
rdmaio_›ti⁄s
),

1403 
fio_öô
 
	$fio_rdmaio_ªgi°î
()

1405 
	`ªgi°î_i€ngöe
(&
i€ngöe_rw
);

1406 
	}
}

1408 
fio_exô
 
	$fio_rdmaio_uƒegi°î
()

1410 
	`uƒegi°î_i€ngöe
(&
i€ngöe_rw
);

1411 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/sg.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<î∫o.h
>

11 
	~<as£π.h
>

12 
	~<sys/pﬁl.h
>

14 
	~"../fio.h
"

16 #ifde‡
FIO_HAVE_SGIO


18 
	#MAX_10B_LBA
 0xFFFFFFFFULL

	)

19 
	#SCSI_TIMEOUT_MS
 30000

20 
	#MAX_SB
 64

21 

	)

22 
	ssgio_cmd
 {

23 
	mcdb
[16];

24 
	msb
[
MAX_SB
];

25 
	mƒ
;

28 
	ssgio_d©a
 {

29 
sgio_cmd
 *
	mcmds
;

30 
io_u
 **
	mevíts
;

31 
pﬁlfd
 *
	mpfds
;

32 *
	mfd_Êags
;

33 *
	msgbuf
;

34 
	mbs
;

35 
	mty≥_checked
;

38 
	$sgio_hdr_öô
(
sgio_d©a
 *
sd
, 
sg_io_hdr
 *
hdr
,

39 
io_u
 *io_u, 
fs
)

41 
sgio_cmd
 *
sc
 = &
sd
->
cmds
[
io_u
->
ödex
];

43 
	`mem£t
(
hdr
, 0, (*hdr));

44 
	`mem£t
(
sc
->
cdb
, 0, (sc->cdb));

46 
hdr
->
öãrÁ˚_id
 = 'S';

47 
hdr
->
cmdp
 = 
sc
->
cdb
;

48 
hdr
->
cmd_Àn
 = (
sc
->
cdb
);

49 
hdr
->
sbp
 = 
sc
->
sb
;

50 
hdr
->
mx_sb_Àn
 = (
sc
->
sb
);

51 
hdr
->
∑ck_id
 = 
io_u
->
ödex
;

52 
hdr
->
u§_±r
 = 
io_u
;

54 i‡(
fs
) {

55 
hdr
->
dx„Ω
 = 
io_u
->
x„r_buf
;

56 
hdr
->
dx„r_Àn
 = 
io_u
->
x„r_buÊí
;

58 
	}
}

60 
	$pﬁlö_evíts
(
pﬁlfd
 *
pfds
, 
fds
)

62 
i
;

64 
i
 = 0; i < 
fds
; i++)

65 i‡(
pfds
[
i
].
ªvíts
 & 
POLLIN
)

69 
	}
}

71 
	$sg_fd_ªad
(
fd
, *
d©a
, 
size_t
 
size
)

73 
îr
 = 0;

75 
size
) {

76 
ssize_t
 
ªt
;

78 
ªt
 = 
	`ªad
(
fd
, 
d©a
, 
size
);

79 i‡(
ªt
 < 0) {

80 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

82 
îr
 = 
î∫o
;

84 } i‡(!
ªt
)

87 
d©a
 +
ªt
;

88 
size
 -
ªt
;

92 i‡(
îr
)

93  
îr
;

94 i‡(
size
)

95  
EAGAIN
;

98 
	}
}

100 
	$fio_sgio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

101 
max
,

102 c⁄° 
time•ec
 
fio_unu£d
 *
t
)

104 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

105 
À·
 = 
max
, 
evítNum
, 
ªt
, 
r
 = 0;

106 *
buf
 = 
sd
->
sgbuf
;

107 
i
, 
evíts
;

108 
fio_fûe
 *
f
;

113 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

117 i‡(!
mö
)

118 
sd
->
fd_Êags
[
i
] = 
	`fio_£t_fd_n⁄blockög
(
f
->
fd
, "sg");

120 
sd
->
fd_Êags
[
i
] = -1;

122 
sd
->
pfds
[
i
].
fd
 = 
f
->fd;

123 
sd
->
pfds
[
i
].
evíts
 = 
POLLIN
;

126 
À·
) {

127 *
p
;

129 
	`d¥öt
(
FD_IO
, "sgio_gëevíts: sd %p:Üe·=%d\n", 
sd
, 
À·
);

132 i‡(!
mö
)

135 
ªt
 = 
	`pﬁl
(
sd
->
pfds
, 
td
->
o
.
ƒ_fûes
, -1);

136 i‡(
ªt
 < 0) {

137 i‡(!
r
)

138 
r
 = -
î∫o
;

139 
	`td_vîr‹
(
td
, 
î∫o
, "poll");

141 } i‡(!
ªt
)

144 i‡(
	`pﬁlö_evíts
(
sd
->
pfds
, 
td
->
o
.
ƒ_fûes
))

148 i‡(
r
 < 0)

151 
ª_ªad
:

152 
p
 = 
buf
;

153 
evíts
 = 0;

154 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

155 
evítNum
 = 0;ÉvítNum < 
À·
;ÉventNum++) {

156 
ªt
 = 
	`sg_fd_ªad
(
f
->
fd
, 
p
, (
sg_io_hdr
));

157 
	`d¥öt
(
FD_IO
, "sgio_gëevíts:Ñë: %d\n", 
ªt
);

158 i‡(
ªt
) {

159 
r
 = -
ªt
;

160 
	`td_vîr‹
(
td
, 
r
, "sg_read");

163 
p
 +(
sg_io_hdr
);

164 
evíts
++;

165 
	`d¥öt
(
FD_IO
, "sgio_gëevíts:Évíts: %d\n", 
evíts
);

169 i‡(
r
 < 0 && !
evíts
)

171 i‡(!
evíts
) {

172 
	`u¶ìp
(1000);

173 
ª_ªad
;

176 
À·
 -
evíts
;

177 
r
 +
evíts
;

179 
i
 = 0; i < 
evíts
; i++) {

180 
sg_io_hdr
 *
hdr
 = (sg_io_hd∏*Ë
buf
 + 
i
;

181 
sd
->
evíts
[
i
] = 
hdr
->
u§_±r
;

184 i‡(
hdr
->
öfo
 & 
SG_INFO_CHECK
) {

185 
io_u
 *io_u;

186 
io_u
 = (io_u *)(
hdr
->
u§_±r
);

187 
	`mem˝y
(&
io_u
->
hdr
, hdr, (
sg_io_hdr
));

188 
sd
->
evíts
[
i
]->
îr‹
 = 
EIO
;

193 i‡(!
mö
) {

194 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

195 i‡(
sd
->
fd_Êags
[
i
] == -1)

198 i‡(
	`f˙é
(
f
->
fd
, 
F_SETFL
, 
sd
->
fd_Êags
[
i
]) < 0)

199 
	`log_îr
("fio: sg faûedÅÿª°‹êf˙é fœgs: %s\n", 
	`°ªº‹
(
î∫o
));

203  
r
;

204 
	}
}

206 
	$fio_sgio_io˘l_doio
(
thªad_d©a
 *
td
,

207 
fio_fûe
 *
f
, 
io_u
 *io_u)

209 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

210 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

211 
ªt
;

213 
sd
->
evíts
[0] = 
io_u
;

215 
ªt
 = 
	`io˘l
(
f
->
fd
, 
SG_IO
, 
hdr
);

216 i‡(
ªt
 < 0)

217  
ªt
;

220 i‡(
hdr
->
öfo
 & 
SG_INFO_CHECK
)

221 
io_u
->
îr‹
 = 
EIO
;

223  
FIO_Q_COMPLETED
;

224 
	}
}

226 
	$fio_sgio_rw_doio
(
fio_fûe
 *
f
, 
io_u
 *io_u, 
do_sync
)

228 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

229 
ªt
;

231 
ªt
 = 
	`wrôe
(
f
->
fd
, 
hdr
, (*hdr));

232 i‡(
ªt
 < 0)

233  
ªt
;

235 i‡(
do_sync
) {

236 
ªt
 = 
	`ªad
(
f
->
fd
, 
hdr
, (*hdr));

237 i‡(
ªt
 < 0)

238  
ªt
;

241 i‡(
hdr
->
öfo
 & 
SG_INFO_CHECK
)

242 
io_u
->
îr‹
 = 
EIO
;

244  
FIO_Q_COMPLETED
;

247  
FIO_Q_QUEUED
;

248 
	}
}

250 
	$fio_sgio_doio
(
thªad_d©a
 *
td
, 
io_u
 *io_u, 
do_sync
)

252 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

253 
ªt
;

255 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

256 
ªt
 = 
	`fio_sgio_io˘l_doio
(
td
, 
f
, 
io_u
);

257 
td
->
îr‹
 = 
io_u
->error;

259 
ªt
 = 
	`fio_sgio_rw_doio
(
f
, 
io_u
, 
do_sync
);

260 i‡(
do_sync
)

261 
td
->
îr‹
 = 
io_u
->error;

264  
ªt
;

265 
	}
}

267 
	$fio_sgio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

269 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

270 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

271 
ƒ_blocks
, 
lba
;

273 i‡(
io_u
->
x„r_buÊí
 & (
sd
->
bs
 - 1)) {

274 
	`log_îr
("read/writeÇot sectoráligned\n");

275  
EINVAL
;

278 
ƒ_blocks
 = 
io_u
->
x„r_buÊí
 / 
sd
->
bs
;

279 
lba
 = 
io_u
->
off£t
 / 
sd
->
bs
;

281 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

282 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 1);

284 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

285 i‡(
lba
 < 
MAX_10B_LBA
)

286 
hdr
->
cmdp
[0] = 0x28;

288 
hdr
->
cmdp
[0] = 0x88;

289 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

290 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 1);

292 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

293 i‡(
lba
 < 
MAX_10B_LBA
)

294 
hdr
->
cmdp
[0] = 0x2a;

296 
hdr
->
cmdp
[0] = 0x8a;

298 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 0);

299 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

300 i‡(
lba
 < 
MAX_10B_LBA
)

301 
hdr
->
cmdp
[0] = 0x35;

303 
hdr
->
cmdp
[0] = 0x91;

310 i‡(
hdr
->
dx„r_dúe˘i⁄
 !
SG_DXFER_NONE
) {

311 i‡(
lba
 < 
MAX_10B_LBA
) {

312 
hdr
->
cmdp
[2] = (Ë((
lba
 >> 24) & 0xff);

313 
hdr
->
cmdp
[3] = (Ë((
lba
 >> 16) & 0xff);

314 
hdr
->
cmdp
[4] = (Ë((
lba
 >> 8) & 0xff);

315 
hdr
->
cmdp
[5] = (Ë(
lba
 & 0xff);

316 
hdr
->
cmdp
[7] = (Ë((
ƒ_blocks
 >> 8) & 0xff);

317 
hdr
->
cmdp
[8] = (Ë(
ƒ_blocks
 & 0xff);

319 
hdr
->
cmdp
[2] = (Ë((
lba
 >> 56) & 0xff);

320 
hdr
->
cmdp
[3] = (Ë((
lba
 >> 48) & 0xff);

321 
hdr
->
cmdp
[4] = (Ë((
lba
 >> 40) & 0xff);

322 
hdr
->
cmdp
[5] = (Ë((
lba
 >> 32) & 0xff);

323 
hdr
->
cmdp
[6] = (Ë((
lba
 >> 24) & 0xff);

324 
hdr
->
cmdp
[7] = (Ë((
lba
 >> 16) & 0xff);

325 
hdr
->
cmdp
[8] = (Ë((
lba
 >> 8) & 0xff);

326 
hdr
->
cmdp
[9] = (Ë(
lba
 & 0xff);

327 
hdr
->
cmdp
[10] = (Ë((
ƒ_blocks
 >> 32) & 0xff);

328 
hdr
->
cmdp
[11] = (Ë((
ƒ_blocks
 >> 16) & 0xff);

329 
hdr
->
cmdp
[12] = (Ë((
ƒ_blocks
 >> 8) & 0xff);

330 
hdr
->
cmdp
[13] = (Ë(
ƒ_blocks
 & 0xff);

334 
hdr
->
timeout
 = 
SCSI_TIMEOUT_MS
;

336 
	}
}

338 
	$fio_sgio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

340 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

341 
ªt
, 
do_sync
 = 0;

343 
	`fio_ro_check
(
td
, 
io_u
);

345 i‡(
td
->
o
.
sync_io
 ||Åd->o.
odúe˘
 || 
	`ddú_sync
(
io_u
->
ddú
))

346 
do_sync
 = 1;

348 
ªt
 = 
	`fio_sgio_doio
(
td
, 
io_u
, 
do_sync
);

350 i‡(
ªt
 < 0)

351 
io_u
->
îr‹
 = 
î∫o
;

352 i‡(
hdr
->
°©us
) {

353 
io_u
->
ªsid
 = 
hdr
->resid;

354 
io_u
->
îr‹
 = 
EIO
;

357 i‡(
io_u
->
îr‹
) {

358 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

359  
FIO_Q_COMPLETED
;

362  
ªt
;

363 
	}
}

365 
io_u
 *
	$fio_sgio_evít
(
thªad_d©a
 *
td
, 
evít
)

367 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

369  
sd
->
evíts
[
evít
];

370 
	}
}

372 
	$fio_sgio_ªad_ˇ∑côy
(
thªad_d©a
 *
td
, *
bs
,

373 *
max_lba
)

379 
sg_io_hdr
 
hdr
;

380 
cmd
[16];

381 
sb
[64];

382 
buf
[32];

383 
ªt
;

384 
fd
 = -1;

386 
fio_fûe
 *
f
 = 
td
->
fûes
[0];

389 
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDONLY
);

390 i‡(
fd
 < 0)

391  -
î∫o
;

393 
	`mem£t
(&
hdr
, 0, (hdr));

394 
	`mem£t
(
cmd
, 0, (cmd));

395 
	`mem£t
(
sb
, 0, (sb));

396 
	`mem£t
(
buf
, 0, (buf));

399 
hdr
.
öãrÁ˚_id
 = 'S';

400 
hdr
.
cmdp
 = 
cmd
;

401 
hdr
.
cmd_Àn
 = 10;

402 
hdr
.
sbp
 = 
sb
;

403 
hdr
.
mx_sb_Àn
 = (
sb
);

404 
hdr
.
timeout
 = 
SCSI_TIMEOUT_MS
;

405 
hdr
.
cmdp
[0] = 0x25;

406 
hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

407 
hdr
.
dx„Ω
 = 
buf
;

408 
hdr
.
dx„r_Àn
 = (
buf
);

410 
ªt
 = 
	`io˘l
(
fd
, 
SG_IO
, &
hdr
);

411 i‡(
ªt
 < 0) {

412 
	`˛o£
(
fd
);

413  
ªt
;

416 *
bs
 = (
buf
[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7];

417 *
max_lba
 = ((
buf
[0] << 24Ë| (buf[1] << 16Ë| (buf[2] << 8Ë| buf[3]Ë& 
MAX_10B_LBA
;

423 i‡(*
max_lba
 =
MAX_10B_LBA
) {

424 
hdr
.
cmd_Àn
 = 16;

425 
hdr
.
cmdp
[0] = 0x9e;

426 
hdr
.
cmdp
[1] = 0x10;

427 
hdr
.
cmdp
[10] = (Ë(((
buf
) >> 24) & 0xff);

428 
hdr
.
cmdp
[11] = (Ë(((
buf
) >> 16) & 0xff);

429 
hdr
.
cmdp
[12] = (Ë(((
buf
) >> 8) & 0xff);

430 
hdr
.
cmdp
[13] = (Ë((
buf
) & 0xff);

432 
hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

433 
hdr
.
dx„Ω
 = 
buf
;

434 
hdr
.
dx„r_Àn
 = (
buf
);

436 
ªt
 = 
	`io˘l
(
fd
, 
SG_IO
, &
hdr
);

437 i‡(
ªt
 < 0) {

438 
	`˛o£
(
fd
);

439  
ªt
;

443 i‡(
hdr
.
öfo
 & 
SG_INFO_CHECK
)

444 
	`td_vîr‹
(
td
, 
EIO
, "fio_sgio_read_capacity");

446 *
bs
 = (
buf
[8] << 24) | (buf[9] << 16) | (buf[10] << 8) | buf[11];

447 *
max_lba
 = (()
buf
[0] << 56) |

448 (()
buf
[1] << 48) |

449 (()
buf
[2] << 40) |

450 (()
buf
[3] << 32) |

451 (()
buf
[4] << 24) |

452 (()
buf
[5] << 16) |

453 (()
buf
[6] << 8) |

454 ()
buf
[7];

457 
	`˛o£
(
fd
);

459 
	}
}

461 
	$fio_sgio_˛ónup
(
thªad_d©a
 *
td
)

463 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

465 i‡(
sd
) {

466 
	`‰ì
(
sd
->
evíts
);

467 
	`‰ì
(
sd
->
cmds
);

468 
	`‰ì
(
sd
->
fd_Êags
);

469 
	`‰ì
(
sd
->
pfds
);

470 
	`‰ì
(
sd
->
sgbuf
);

471 
	`‰ì
(
sd
);

473 
	}
}

475 
	$fio_sgio_öô
(
thªad_d©a
 *
td
)

477 
sgio_d©a
 *
sd
;

479 
sd
 = 
	`mÆloc
((*sd));

480 
	`mem£t
(
sd
, 0, (*sd));

481 
sd
->
cmds
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
sgio_cmd
));

482 
	`mem£t
(
sd
->
cmds
, 0, 
td
->
o
.
iodïth
 * (
sgio_cmd
));

483 
sd
->
evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

484 
	`mem£t
(
sd
->
evíts
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

485 
sd
->
pfds
 = 
	`mÆloc
((
pﬁlfd
Ë* 
td
->
o
.
ƒ_fûes
);

486 
	`mem£t
(
sd
->
pfds
, 0, (
pﬁlfd
Ë* 
td
->
o
.
ƒ_fûes
);

487 
sd
->
fd_Êags
 = 
	`mÆloc
((Ë* 
td
->
o
.
ƒ_fûes
);

488 
	`mem£t
(
sd
->
fd_Êags
, 0, (Ë* 
td
->
o
.
ƒ_fûes
);

489 
sd
->
sgbuf
 = 
	`mÆloc
((
sg_io_hdr
Ë* 
td
->
o
.
iodïth
);

490 
	`mem£t
(
sd
->
sgbuf
, 0, (
sg_io_hdr
Ë* 
td
->
o
.
iodïth
);

491 
sd
->
ty≥_checked
 = 0;

492 
td
->
io_›s_d©a
 = 
sd
;

497 
td
->
o
.
ovîride_sync
 = 1;

499 
	}
}

501 
	$fio_sgio_ty≥_check
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

503 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

504 
bs
 = 0;

505 
max_lba
 = 0;

507 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

508 i‡(
	`io˘l
(
f
->
fd
, 
BLKSSZGET
, &
bs
) < 0) {

509 
	`td_vîr‹
(
td
, 
î∫o
, "ioctl");

512 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
) {

513 
vîsi⁄
, 
ªt
;

515 i‡(
	`io˘l
(
f
->
fd
, 
SG_GET_VERSION_NUM
, &
vîsi⁄
) < 0) {

516 
	`td_vîr‹
(
td
, 
î∫o
, "ioctl");

520 
ªt
 = 
	`fio_sgio_ªad_ˇ∑côy
(
td
, &
bs
, &
max_lba
);

521 i‡(
ªt
) {

522 
	`td_vîr‹
(
td
,Åd->
îr‹
, "fio_sgio_read_capacity");

523 
	`log_îr
("ioengine sg unableÅoÑead capacity successfully\n");

527 
	`td_vîr‹
(
td
, 
EINVAL
, "wrong fileÅype");

528 
	`log_îr
("ioengine sg only works on block or character devices\n");

532 
sd
->
bs
 = bs;

534 i‡(
max_lba
 >
MAX_10B_LBA
) {

535 
	`d¥öt
(
FD_IO
, "sgio_type_check: using 16 byteÑead/write "

537 
MAX_10B_LBA
, 
max_lba
);

540 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

541 
td
->
io_›s
->
gëevíts
 = 
NULL
;

542 
td
->
io_›s
->
evít
 = 
NULL
;

544 
sd
->
ty≥_checked
 = 1;

547 
	}
}

549 
	$fio_sgio_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

551 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

552 
ªt
;

554 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

555 i‡(
ªt
)

556  
ªt
;

558 i‡(
sd
 && !sd->
ty≥_checked
 && 
	`fio_sgio_ty≥_check
(
td
, 
f
)) {

559 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

564 
	}
}

570 *
	$fio_sgio_îrdëaûs
(
io_u
 *io_u)

572 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

573 
	#MAXERRDETAIL
 1024

	)

574 
	#MAXMSGCHUNK
 128

	)

575 *
msg
, 
msgchunk
[
MAXMSGCHUNK
];

576 
i
;

578 
msg
 = 
	`ˇŒoc
(1, 
MAXERRDETAIL
);

579 
	`°r˝y
(
msg
, "");

585 i‡(
hdr
->
öfo
 & 
SG_INFO_CHECK
) {

586 i‡(
hdr
->
ho°_°©us
) {

587 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "SG Ho° Sètus: 0x%02x; ", 
hdr
->
ho°_°©us
);

588 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

589 
hdr
->
ho°_°©us
) {

591 
	`°æˇt
(
msg
, "SG_ERR_DID_NO_CONNECT", 
MAXERRDETAIL
);

594 
	`°æˇt
(
msg
, "SG_ERR_DID_BUS_BUSY", 
MAXERRDETAIL
);

597 
	`°æˇt
(
msg
, "SG_ERR_DID_TIME_OUT", 
MAXERRDETAIL
);

600 
	`°æˇt
(
msg
, "SG_ERR_DID_BAD_TARGET", 
MAXERRDETAIL
);

603 
	`°æˇt
(
msg
, "SG_ERR_DID_ABORT", 
MAXERRDETAIL
);

606 
	`°æˇt
(
msg
, "SG_ERR_DID_PARITY", 
MAXERRDETAIL
);

609 
	`°æˇt
(
msg
, "SG_ERR_DID_ERROR (öã∫ÆÉº‹)", 
MAXERRDETAIL
);

612 
	`°æˇt
(
msg
, "SG_ERR_DID_RESET", 
MAXERRDETAIL
);

615 
	`°æˇt
(
msg
, "SG_ERR_DID_BAD_INTR (u√x≥˘ed)", 
MAXERRDETAIL
);

618 
	`°æˇt
(
msg
, "SG_ERR_DID_PASSTHROUGH", 
MAXERRDETAIL
);

621 
	`°æˇt
(
msg
, "SG_ERR_DID_SOFT_ERROR (drivîÑëry?)", 
MAXERRDETAIL
);

624 
	`°æˇt
(
msg
, "SG_ERR_DID_IMM_RETRY", 
MAXERRDETAIL
);

627 
	`°æˇt
(
msg
, "SG_ERR_DID_REQUEUE", 
MAXERRDETAIL
);

630 
	`°æˇt
(
msg
, "SG_ERR_DID_TRANSPORT_DISRUPTED", 
MAXERRDETAIL
);

633 
	`°æˇt
(
msg
, "SG_ERR_DID_TRANSPORT_FAILFAST", 
MAXERRDETAIL
);

636 
	`°æˇt
(
msg
, "SG_ERR_DID_TARGET_FAILURE", 
MAXERRDETAIL
);

639 
	`°æˇt
(
msg
, "SG_ERR_DID_NEXUS_FAILURE", 
MAXERRDETAIL
);

642 
	`°æˇt
(
msg
, "SG_ERR_DID_ALLOC_FAILURE", 
MAXERRDETAIL
);

645 
	`°æˇt
(
msg
, "SG_ERR_DID_MEDIUM_ERROR", 
MAXERRDETAIL
);

648 
	`°æˇt
(
msg
, "Unknown", 
MAXERRDETAIL
);

651 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

653 i‡(
hdr
->
drivî_°©us
) {

654 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "SG Drivî Sètus: 0x%02x; ", 
hdr
->
drivî_°©us
);

655 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

656 
hdr
->
drivî_°©us
 & 0x0F) {

658 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_BUSY", 
MAXERRDETAIL
);

661 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_SOFT", 
MAXERRDETAIL
);

664 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_MEDIA", 
MAXERRDETAIL
);

667 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_ERROR", 
MAXERRDETAIL
);

670 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_INVALID", 
MAXERRDETAIL
);

673 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_TIMEOUT", 
MAXERRDETAIL
);

676 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_HARD", 
MAXERRDETAIL
);

679 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_SENSE", 
MAXERRDETAIL
);

682 
	`°æˇt
(
msg
, "Unknown", 
MAXERRDETAIL
);

685 
	`°æˇt
(
msg
, "; ", 
MAXERRDETAIL
);

686 
hdr
->
drivî_°©us
 & 0xF0) {

688 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_RETRY", 
MAXERRDETAIL
);

691 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_ABORT", 
MAXERRDETAIL
);

694 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_REMAP", 
MAXERRDETAIL
);

697 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_DIE", 
MAXERRDETAIL
);

700 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_SENSE", 
MAXERRDETAIL
);

703 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

705 i‡(
hdr
->
°©us
) {

706 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "SG SCSI Sètus: 0x%02x; ", 
hdr
->
°©us
);

707 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

709 
hdr
->
°©us
) {

711 
	`°æˇt
(
msg
, "CHECK_CONDITION", 
MAXERRDETAIL
);

714 
	`°æˇt
(
msg
, "CONDITION_MET", 
MAXERRDETAIL
);

717 
	`°æˇt
(
msg
, "BUSY", 
MAXERRDETAIL
);

720 
	`°æˇt
(
msg
, "INTERMEDIATE", 
MAXERRDETAIL
);

723 
	`°æˇt
(
msg
, "INTERMEDIATE_CONDITION_MET", 
MAXERRDETAIL
);

726 
	`°æˇt
(
msg
, "RESERVATION_CONFLICT", 
MAXERRDETAIL
);

729 
	`°æˇt
(
msg
, "COMMAND_TERMINATED", 
MAXERRDETAIL
);

732 
	`°æˇt
(
msg
, "TASK_SET_FULL", 
MAXERRDETAIL
);

735 
	`°æˇt
(
msg
, "ACA_ACTIVE", 
MAXERRDETAIL
);

738 
	`°æˇt
(
msg
, "TASK_ABORTED", 
MAXERRDETAIL
);

741 
	`°æˇt
(
msg
, "Unknown", 
MAXERRDETAIL
);

744 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

746 i‡(
hdr
->
sb_Àn_wr
) {

747 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "Sí£ D©®(%d byãs):", 
hdr
->
sb_Àn_wr
);

748 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

749 
i
 = 0; i < 
hdr
->
sb_Àn_wr
; i++) {

750 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, " %02x", 
hdr
->
sbp
[
i
]);

751 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

753 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

755 i‡(
hdr
->
ªsid
 != 0) {

756 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "SG Drivî: %d byã†ouào‡%dÇŸÅøns„ºed. ", 
hdr
->
ªsid
, hdr->
dx„r_Àn
);

757 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

761 i‡(!(
hdr
->
öfo
 & 
SG_INFO_CHECK
Ë&& !
	`°æí
(
msg
))

762 
	`°∫˝y
(
msg
, "SG Driver didÇotÑeportá Host, Driver or Device check",

763 
MAXERRDETAIL
 - 1);

765  
msg
;

766 
	}
}

771 
	$fio_sgio_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

785 
bs
 = 0;

786 
max_lba
 = 0;

787 
ªt
;

789 i‡(
	`fio_fûe_size_known
(
f
))

792 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
 && f->fûëy≥ !
FIO_TYPE_CHAR
) {

793 
	`td_vîr‹
(
td
, 
EINVAL
, "wrong fileÅype");

794 
	`log_îr
("ioengine sg only works on block or character devices\n");

798 
ªt
 = 
	`fio_sgio_ªad_ˇ∑côy
(
td
, &
bs
, &
max_lba
);

799 i‡(
ªt
 ) {

800 
	`td_vîr‹
(
td
,Åd->
îr‹
, "fio_sgio_read_capacity");

801 
	`log_îr
("ioengine sg unableÅo successfullyÉxecuteÑead capacityÅo get block sizeánd maximumÜba\n");

805 
f
->
ªÆ_fûe_size
 = (
max_lba
 + 1Ë* 
bs
;

806 
	`fio_fûe_£t_size_known
(
f
);

808 
	}
}

811 
i€ngöe_›s
 
	gi€ngöe
 = {

812 .
«me
 = "sg",

813 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

814 .
	göô
 = 
fio_sgio_öô
,

815 .
	g¥ï
 = 
fio_sgio_¥ï
,

816 .
	gqueue
 = 
fio_sgio_queue
,

817 .
	ggëevíts
 = 
fio_sgio_gëevíts
,

818 .
	gîrdëaûs
 = 
fio_sgio_îrdëaûs
,

819 .
	gevít
 = 
fio_sgio_evít
,

820 .
	g˛ónup
 = 
fio_sgio_˛ónup
,

821 .
	g›í_fûe
 = 
fio_sgio_›í
,

822 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

823 .
	ggë_fûe_size
 = 
fio_sgio_gë_fûe_size
,

824 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_RAWIO
,

834 
	$fio_sgio_öô
(
thªad_d©a
 
fio_unu£d
 *
td
)

836 
	`log_îr
("fio: ioengine sgÇotávailable\n");

838 
	}
}

840 
i€ngöe_›s
 
	gi€ngöe
 = {

841 .
«me
 = "sg",

842 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

843 .
	göô
 = 
fio_sgio_öô
,

848 
fio_öô
 
	$fio_sgio_ªgi°î
()

850 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

851 
	}
}

853 
fio_exô
 
	$fio_sgio_uƒegi°î
()

855 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

856 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/skeleton_external.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<î∫o.h
>

14 
	~<as£π.h
>

16 
	~"../fio.h
"

17 
	~"../›tgroup.h
"

31 
	sfio_skñë⁄_›ti⁄s
 {

32 *
	m∑d
;

33 
	mdummy
;

36 
fio_›ti⁄
 
	g›ti⁄s
[] = {

38 .
«me
 = "dummy",

39 .
	g ame
 = "ldummy",

40 .
	gty≥
 = 
FIO_OPT_STR_SET
,

41 .
	goff1
 = 
off£tof
(
fio_skñë⁄_›ti⁄s
, 
dummy
),

42 .
	ghñp
 = "Set dummy",

43 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

44 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

47 .
	g«me
 = 
NULL
,

57 
io_u
 *
	$fio_skñë⁄_evít
(
thªad_d©a
 *
td
, 
evít
)

59  
NULL
;

60 
	}
}

68 
	$fio_skñë⁄_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

69 
max
, c⁄° 
time•ec
 *
t
)

72 
	}
}

78 
	$fio_skñë⁄_ˇn˚l
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

81 
	}
}

93 
	$fio_skñë⁄_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

98 
	`fio_ro_check
(
td
, 
io_u
);

106  
FIO_Q_COMPLETED
;

107 
	}
}

114 
	$fio_skñë⁄_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

117 
	}
}

124 
	$fio_skñë⁄_öô
(
thªad_d©a
 *
td
)

127 
	}
}

134 
	$fio_skñë⁄_˛ónup
(
thªad_d©a
 *
td
)

136 
	}
}

142 
	$fio_skñë⁄_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

144  
	`gíîic_›í_fûe
(
td
, 
f
);

145 
	}
}

150 
	$fio_skñë⁄_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

152  
	`gíîic_˛o£_fûe
(
td
, 
f
);

153 
	}
}

159 
i€ngöe_›s
 
	gi€ngöe
 = {

160 .
«me
 = "engine_name",

161 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

162 .
	göô
 = 
fio_skñë⁄_öô
,

163 .
	g¥ï
 = 
fio_skñë⁄_¥ï
,

164 .
	gqueue
 = 
fio_skñë⁄_queue
,

165 .
	gˇn˚l
 = 
fio_skñë⁄_ˇn˚l
,

166 .
	ggëevíts
 = 
fio_skñë⁄_gëevíts
,

167 .
	gevít
 = 
fio_skñë⁄_evít
,

168 .
	g˛ónup
 = 
fio_skñë⁄_˛ónup
,

169 .
	g›í_fûe
 = 
fio_skñë⁄_›í
,

170 .
	g˛o£_fûe
 = 
fio_skñë⁄_˛o£
,

171 .
	g›ti⁄s
 = 
›ti⁄s
,

172 .
	g›ti⁄_°ru˘_size
 = (
fio_skñë⁄_›ti⁄s
),

	@/home/ysjin/Desktop/fio/fio/engines/solarisaio.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

8 
	~<sig«l.h
>

9 
	~<î∫o.h
>

11 
	~"../fio.h
"

13 
	~<sys/asynch.h
>

15 
	ssﬁ¨ißio_d©a
 {

16 
io_u
 **
	maio_evíts
;

17 
	maio_≥ndög
;

18 
	mƒ
;

19 
	mmax_dïth
;

22 
	$fio_sﬁ¨ißio_ˇn˚l
(
thªad_d©a
 
fio_unu£d
 *
td
,

23 
io_u
 *io_u)

25  
	`aioˇn˚l
(&
io_u
->
ªsu…p
);

26 
	}
}

28 
	$fio_sﬁ¨ißio_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
,

29 
io_u
 *io_u)

31 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

33 
io_u
->
ªsu…p
.
aio_ªtu∫
 = 
AIO_INPROGRESS
;

34 
io_u
->
ígöe_d©a
 = 
sd
;

36 
	}
}

38 
	$waô_f‹_evít
(
timevÆ
 *
tv
)

40 
sﬁ¨ißio_d©a
 *
sd
;

41 
io_u
 *io_u;

42 
aio_ªsu…_t
 *
ªs
;

44 
ªs
 = 
	`aiowaô
(
tv
);

45 i‡(
ªs
 =(
aio_ªsu…_t
 *) -1) {

46 
îr
 = 
î∫o
;

48 i‡(
îr
 !
EINVAL
) {

49 
	`log_îr
("fio: sﬁ¨ißiÿgŸ %d i¿aiowaô\n", 
îr
);

50 
	`exô
(
îr
);

53 } i‡(!
ªs
)

56 
io_u
 = 
	`c⁄èöî_of
(
ªs
, io_u, 
ªsu…p
);

57 
sd
 = 
io_u
->
ígöe_d©a
;

59 i‡(
io_u
->
ªsu…p
.
aio_ªtu∫
 >= 0) {

60 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - io_u->
ªsu…p
.
aio_ªtu∫
;

61 
io_u
->
îr‹
 = 0;

63 
io_u
->
îr‹
 = io_u->
ªsu…p
.
aio_î∫o
;

69 
sd
->
aio_evíts
[sd->
aio_≥ndög
] = 
io_u
;

70 
	`wrôe_b¨rõr
();

71 
sd
->
aio_≥ndög
++;

72 
sd
->
ƒ
--;

73 
	}
}

75 
	$fio_sﬁ¨ißio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

76 
max
, c⁄° 
time•ec
 *
t
)

78 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

79 
timevÆ
 
tv
;

80 
ªt
;

82 i‡(!
mö
 || !
t
) {

83 
tv
.
tv_£c
 = 0;

84 
tv
.
tv_u£c
 = 0;

86 
tv
.
tv_£c
 = 
t
->tv_sec;

87 
tv
.
tv_u£c
 = 
t
->
tv_n£c
 / 1000;

90 
sd
->
aio_≥ndög
 < 
mö
)

91 
	`waô_f‹_evít
(&
tv
);

96 
ªt
 = 
sd
->
aio_≥ndög
;

97 
sd
->
aio_≥ndög
 -
ªt
;

98  
ªt
;

99 
	}
}

101 
io_u
 *
	$fio_sﬁ¨ißio_evít
(
thªad_d©a
 *
td
, 
evít
)

103 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

105  
sd
->
aio_evíts
[
evít
];

106 
	}
}

108 
	$fio_sﬁ¨ißio_queue
(
thªad_d©a
 
fio_unu£d
 *
td
,

109 
io_u
 *io_u)

111 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

112 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

113 
off_t
 
off
;

114 
ªt
;

116 
	`fio_ro_check
(
td
, 
io_u
);

118 i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

119 i‡(
sd
->
ƒ
)

120  
FIO_Q_BUSY
;

121 i‡(
	`fsync
(
f
->
fd
) < 0)

122 
io_u
->
îr‹
 = 
î∫o
;

124  
FIO_Q_COMPLETED
;

127 i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
) {

128 i‡(
sd
->
ƒ
)

129  
FIO_Q_BUSY
;

130 i‡(
	`fd©async
(
f
->
fd
) < 0)

131 
io_u
->
îr‹
 = 
î∫o
;

133  
FIO_Q_COMPLETED
;

136 i‡(
sd
->
ƒ
 =sd->
max_dïth
)

137  
FIO_Q_BUSY
;

139 
off
 = 
io_u
->
off£t
;

140 i‡(
io_u
->
ddú
 =
DDIR_READ
)

141 
ªt
 = 
	`ai‹ód
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 
off
,

142 
SEEK_SET
, &
io_u
->
ªsu…p
);

144 
ªt
 = 
	`aiowrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 
off
,

145 
SEEK_SET
, &
io_u
->
ªsu…p
);

146 i‡(
ªt
) {

147 
io_u
->
îr‹
 = 
î∫o
;

148 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

149  
FIO_Q_COMPLETED
;

152 
sd
->
ƒ
++;

153  
FIO_Q_QUEUED
;

154 
	}
}

156 
	$fio_sﬁ¨ißio_˛ónup
(
thªad_d©a
 *
td
)

158 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

160 i‡(
sd
) {

161 
	`‰ì
(
sd
->
aio_evíts
);

162 
	`‰ì
(
sd
);

164 
	}
}

169 #ifde‡
USE_SIGNAL_COMPLETIONS


170 
	$fio_sﬁ¨ißio_sigio
(
sig
)

172 
	`waô_f‹_evít
(
NULL
);

173 
	}
}

175 
	$fio_sﬁ¨ißio_öô_sigio
()

177 
siga˘i⁄
 
a˘
;

179 
	`mem£t
(&
a˘
, 0, (act));

180 
a˘
.
ß_h™dÀr
 = 
fio_sﬁ¨ißio_sigio
;

181 
a˘
.
ß_Êags
 = 
SA_RESTART
;

182 
	`siga˘i⁄
(
SIGIO
, &
a˘
, 
NULL
);

183 
	}
}

186 
	$fio_sﬁ¨ißio_öô
(
thªad_d©a
 *
td
)

188 
sﬁ¨ißio_d©a
 *
sd
 = 
	`mÆloc
((*sd));

189 
max_dïth
;

191 
max_dïth
 = 
td
->
o
.
iodïth
;

192 i‡(
max_dïth
 > 
MAXASYNCHIO
) {

193 
max_dïth
 = 
MAXASYNCHIO
;

194 
	`log_öfo
("fio:Üower depthÅo %d dueÅo OS constraints\n",

195 
max_dïth
);

198 
	`mem£t
(
sd
, 0, (*sd));

199 
sd
->
aio_evíts
 = 
	`mÆloc
(
max_dïth
 * (
io_u
 *));

200 
	`mem£t
(
sd
->
aio_evíts
, 0, 
max_dïth
 * (
io_u
 *));

201 
sd
->
max_dïth
 = max_depth;

203 #ifde‡
USE_SIGNAL_COMPLETIONS


204 
	`fio_sﬁ¨ißio_öô_sigio
();

207 
td
->
io_›s_d©a
 = 
sd
;

209 
	}
}

211 
i€ngöe_›s
 
	gi€ngöe
 = {

212 .
«me
 = "solarisaio",

213 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

214 .
	göô
 = 
fio_sﬁ¨ißio_öô
,

215 .
	g¥ï
 = 
fio_sﬁ¨ißio_¥ï
,

216 .
	gqueue
 = 
fio_sﬁ¨ißio_queue
,

217 .
	gˇn˚l
 = 
fio_sﬁ¨ißio_ˇn˚l
,

218 .
	ggëevíts
 = 
fio_sﬁ¨ißio_gëevíts
,

219 .
	gevít
 = 
fio_sﬁ¨ißio_evít
,

220 .
	g˛ónup
 = 
fio_sﬁ¨ißio_˛ónup
,

221 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

222 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

223 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

226 
fio_öô
 
	$fio_sﬁ¨ißio_ªgi°î
()

228 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

229 
	}
}

231 
fio_exô
 
	$fio_sﬁ¨ißio_uƒegi°î
()

233 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

234 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/splice.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<as£π.h
>

13 
	~<sys/pﬁl.h
>

14 
	~<sys/mm™.h
>

16 
	~"../fio.h
"

18 
	s•li˚io_d©a
 {

19 
	mpùe
[2];

20 
	mvm•li˚_to_u£r
;

21 
	mvm•li˚_to_u£r_m≠
;

29 
	$fio_•li˚_ªad_ﬁd
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

31 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

32 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

33 
ªt
, 
ªt2
, 
buÊí
;

34 
off_t
 
off£t
;

35 *
p
;

37 
off£t
 = 
io_u
->offset;

38 
buÊí
 = 
io_u
->
x„r_buÊí
;

39 
p
 = 
io_u
->
x„r_buf
;

40 
buÊí
) {

41 
this_Àn
 = 
buÊí
;

43 i‡(
this_Àn
 > 
SPLICE_DEF_SIZE
)

44 
this_Àn
 = 
SPLICE_DEF_SIZE
;

46 
ªt
 = 
	`•li˚
(
f
->
fd
, &
off£t
, 
sd
->
pùe
[1], 
NULL
, 
this_Àn
, 
SPLICE_F_MORE
);

47 i‡(
ªt
 < 0) {

48 i‡(
î∫o
 =
ENODATA
 ||Éºnÿ=
EAGAIN
)

51  -
î∫o
;

54 
buÊí
 -
ªt
;

56 
ªt
) {

57 
ªt2
 = 
	`ªad
(
sd
->
pùe
[0], 
p
, 
ªt
);

58 i‡(
ªt2
 < 0)

59  -
î∫o
;

61 
ªt
 -
ªt2
;

62 
p
 +
ªt2
;

66  
io_u
->
x„r_buÊí
;

67 
	}
}

73 
	$fio_•li˚_ªad
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

75 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

76 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

77 
iovec
 
iov
;

78 
ªt
 , 
buÊí
, 
mm≠_Àn
;

79 
off_t
 
off£t
;

80 *
m≠
;

81 *
p
;

83 
ªt
 = 0;

84 
off£t
 = 
io_u
->offset;

85 
mm≠_Àn
 = 
buÊí
 = 
io_u
->
x„r_buÊí
;

87 i‡(
sd
->
vm•li˚_to_u£r_m≠
) {

88 
m≠
 = 
	`mm≠
(
io_u
->
x„r_buf
, 
buÊí
, 
PROT_READ
, 
MAP_PRIVATE
|
OS_MAP_ANON
, 0, 0);

89 i‡(
m≠
 =
MAP_FAILED
) {

90 
	`td_vîr‹
(
td
, 
î∫o
, "mmap io_u");

94 
p
 = 
m≠
;

96 
m≠
 = 
NULL
;

97 
p
 = 
io_u
->
x„r_buf
;

100 
buÊí
) {

101 
this_Àn
 = 
buÊí
;

102 
Êags
 = 0;

104 i‡(
this_Àn
 > 
SPLICE_DEF_SIZE
) {

105 
this_Àn
 = 
SPLICE_DEF_SIZE
;

106 
Êags
 = 
SPLICE_F_MORE
;

109 
ªt
 = 
	`•li˚
(
f
->
fd
, &
off£t
, 
sd
->
pùe
[1], 
NULL
, 
this_Àn
,
Êags
);

110 i‡(
ªt
 < 0) {

111 i‡(
î∫o
 =
ENODATA
 ||Éºnÿ=
EAGAIN
)

114 
	`td_vîr‹
(
td
, 
î∫o
, "splice-from-fd");

118 
buÊí
 -
ªt
;

119 
iov
.
iov_ba£
 = 
p
;

120 
iov
.
iov_Àn
 = 
ªt
;

122 
iov
.
iov_Àn
) {

123 
ªt
 = 
	`vm•li˚
(
sd
->
pùe
[0], &
iov
, 1, 
SPLICE_F_MOVE
);

124 i‡(
ªt
 < 0) {

125 i‡(
î∫o
 =
EFAULT
 &&

126 
sd
->
vm•li˚_to_u£r_m≠
) {

127 
sd
->
vm•li˚_to_u£r_m≠
 = 0;

128 
	`munm≠
(
m≠
, 
mm≠_Àn
);

129 
m≠
 = 
NULL
;

130 
p
 = 
io_u
->
x„r_buf
;

131 
iov
.
iov_ba£
 = 
p
;

134 i‡(
î∫o
 =
EBADF
) {

135 
ªt
 = -
EBADF
;

138 
	`td_vîr‹
(
td
, 
î∫o
, "vmsplice");

140 } i‡(!
ªt
) {

141 
	`td_vîr‹
(
td
, 
ENODATA
, "vmsplice");

142 
ªt
 = -1;

146 
iov
.
iov_Àn
 -
ªt
;

147 
iov
.
iov_ba£
 +
ªt
;

148 
p
 +
ªt
;

150 i‡(
ªt
 < 0)

154 i‡(
sd
->
vm•li˚_to_u£r_m≠
 && 
	`munm≠
(
m≠
, 
mm≠_Àn
) < 0) {

155 
	`td_vîr‹
(
td
, 
î∫o
, "munnap io_u");

158 i‡(
ªt
 < 0)

159  
ªt
;

161  
io_u
->
x„r_buÊí
;

162 
	}
}

168 
	$fio_•li˚_wrôe
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

170 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

171 
iovec
 
iov
 = {

172 .
iov_ba£
 = 
io_u
->
x„r_buf
,

173 .
iov_Àn
 = 
io_u
->
x„r_buÊí
,

175 
pﬁlfd
 
pfd
 = { .
fd
 = 
sd
->
pùe
[1], .
evíts
 = 
POLLOUT
, };

176 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

177 
off_t
 
off
 = 
io_u
->
off£t
;

178 
ªt
, 
ªt2
;

180 
iov
.
iov_Àn
) {

181 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0)

182  
î∫o
;

184 
ªt
 = 
	`vm•li˚
(
sd
->
pùe
[1], &
iov
, 1, 
SPLICE_F_NONBLOCK
);

185 i‡(
ªt
 < 0)

186  -
î∫o
;

188 
iov
.
iov_Àn
 -
ªt
;

189 
iov
.
iov_ba£
 +
ªt
;

191 
ªt
) {

192 
ªt2
 = 
	`•li˚
(
sd
->
pùe
[0], 
NULL
, 
f
->
fd
, &
off
, 
ªt
, 0);

193 i‡(
ªt2
 < 0)

194  -
î∫o
;

196 
ªt
 -
ªt2
;

200  
io_u
->
x„r_buÊí
;

201 
	}
}

203 
	$fio_•li˚io_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

205 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

206 
ªt
 = 0;

208 
	`fio_ro_check
(
td
, 
io_u
);

210 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

211 i‡(
sd
->
vm•li˚_to_u£r
) {

212 
ªt
 = 
	`fio_•li˚_ªad
(
td
, 
io_u
);

218 i‡(
ªt
 =-
EBADF
)

219 
sd
->
vm•li˚_to_u£r
 = 0;

221 i‡(!
sd
->
vm•li˚_to_u£r
)

222 
ªt
 = 
	`fio_•li˚_ªad_ﬁd
(
td
, 
io_u
);

223 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

224 
ªt
 = 
	`fio_•li˚_wrôe
(
td
, 
io_u
);

225 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

226 
ªt
 = 
	`do_io_u_åim
(
td
, 
io_u
);

228 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

230 i‡(
ªt
 !(Ë
io_u
->
x„r_buÊí
) {

231 i‡(
ªt
 >= 0) {

232 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

233 
io_u
->
îr‹
 = 0;

234  
FIO_Q_COMPLETED
;

236 
io_u
->
îr‹
 = 
î∫o
;

239 i‡(
io_u
->
îr‹
) {

240 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

241 i‡(
io_u
->
îr‹
 =
EINVAL
)

242 
	`log_îr
("fio:ÜooksÜike splice doesn't work onÅhis"

246  
FIO_Q_COMPLETED
;

247 
	}
}

249 
	$fio_•li˚io_˛ónup
(
thªad_d©a
 *
td
)

251 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

253 i‡(
sd
) {

254 
	`˛o£
(
sd
->
pùe
[0]);

255 
	`˛o£
(
sd
->
pùe
[1]);

256 
	`‰ì
(
sd
);

258 
	}
}

260 
	$fio_•li˚io_öô
(
thªad_d©a
 *
td
)

262 
•li˚io_d©a
 *
sd
 = 
	`mÆloc
((*sd));

264 i‡(
	`pùe
(
sd
->
pùe
) < 0) {

265 
	`td_vîr‹
(
td
, 
î∫o
, "pipe");

266 
	`‰ì
(
sd
);

273 
sd
->
vm•li˚_to_u£r
 = 1;

279 
sd
->
vm•li˚_to_u£r_m≠
 = 1;

285 i‡(
	`td_ªad
(
td
))

286 
td
->
o
.
mem_Æign
 = 1;

288 
td
->
io_›s_d©a
 = 
sd
;

290 
	}
}

292 
i€ngöe_›s
 
	gi€ngöe
 = {

293 .
«me
 = "splice",

294 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

295 .
	göô
 = 
fio_•li˚io_öô
,

296 .
	gqueue
 = 
fio_•li˚io_queue
,

297 .
	g˛ónup
 = 
fio_•li˚io_˛ónup
,

298 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

299 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

300 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

301 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_PIPEIO
,

304 
fio_öô
 
	$fio_•li˚io_ªgi°î
()

306 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

307 
	}
}

309 
fio_exô
 
	$fio_•li˚io_uƒegi°î
()

311 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

312 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/sync.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<sys/uio.h
>

12 
	~<î∫o.h
>

13 
	~<as£π.h
>

15 
	~"../fio.h
"

16 
	~"../›tgroup.h
"

17 
	~"../lib/ønd.h
"

22 
	#LAST_POS
(
f
Ë((f)->
ígöe_pos
)

	)

24 
	ssyncio_d©a
 {

25 
iovec
 *
	miovecs
;

26 
io_u
 **
	mio_us
;

27 
	mqueued
;

28 
	mevíts
;

29 
	mqueued_byãs
;

31 
	mœ°_off£t
;

32 
fio_fûe
 *
	mœ°_fûe
;

33 
fio_ddú
 
	mœ°_ddú
;

35 
‰™d_°©e
 
	mønd_°©e
;

38 #ifde‡
FIO_HAVE_PWRITEV2


39 
	spsyncv2_›ti⁄s
 {

40 *
	m∑d
;

41 
	mhùri
;

42 
	mhùri_≥r˚¡age
;

45 
fio_›ti⁄
 
	g›ti⁄s
[] = {

47 .
«me
 = "hipri",

48 .
	g ame
 = "RWF_HIPRI",

49 .
	gty≥
 = 
FIO_OPT_STR_SET
,

50 .
	goff1
 = 
off£tof
(
psyncv2_›ti⁄s
, 
hùri
),

51 .
	ghñp
 = "Set RWF_HIPRI forÖwritev2/preadv2",

52 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

53 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

56 .
	g«me
 = "hipri_percentage",

57 .
	g ame
 = "RWF_HIPRI_PERCENTAGE",

58 .
	gty≥
 = 
FIO_OPT_INT
,

59 .
	goff1
 = 
off£tof
(
psyncv2_›ti⁄s
, 
hùri_≥r˚¡age
),

60 .
	gmövÆ
 = 0,

61 .
	gmaxvÆ
 = 100,

62 .
	gdef
 = "100",

63 .
	ghñp
 = "Probabilistically set RWF_HIPRI forÖwritev2/preadv2",

64 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

65 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

68 .
	g«me
 = 
NULL
,

73 
	$fio_syncio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

75 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

77 i‡(!
	`ddú_rw
(
io_u
->
ddú
))

80 i‡(
	`LAST_POS
(
f
Ë!-1ULL && LAST_POS(fË=
io_u
->
off£t
)

83 i‡(
	`l£ek
(
f
->
fd
, 
io_u
->
off£t
, 
SEEK_SET
) == -1) {

84 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

89 
	}
}

91 
	$fio_io_íd
(
thªad_d©a
 *
td
, 
io_u
 *io_u, 
ªt
)

93 i‡(
io_u
->
fûe
 && 
ªt
 >0 && 
	`ddú_rw
(io_u->
ddú
))

94 
	`LAST_POS
(
io_u
->
fûe
Ëio_u->
off£t
 + 
ªt
;

96 i‡(
ªt
 !(Ë
io_u
->
x„r_buÊí
) {

97 i‡(
ªt
 >= 0) {

98 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

99 
io_u
->
îr‹
 = 0;

100  
FIO_Q_COMPLETED
;

102 
io_u
->
îr‹
 = 
î∫o
;

105 i‡(
io_u
->
îr‹
) {

106 
	`io_u_log_îr‹
(
td
, 
io_u
);

107 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

110  
FIO_Q_COMPLETED
;

111 
	}
}

113 #ifde‡
CONFIG_PWRITEV


114 
	$fio_pvsyncio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

116 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

117 
iovec
 *
iov
 = &
sd
->
iovecs
[0];

118 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

119 
ªt
;

121 
	`fio_ro_check
(
td
, 
io_u
);

123 
iov
->
iov_ba£
 = 
io_u
->
x„r_buf
;

124 
iov
->
iov_Àn
 = 
io_u
->
x„r_buÊí
;

126 i‡(
io_u
->
ddú
 =
DDIR_READ
)

127 
ªt
 = 
	`¥ódv
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
);

128 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

129 
ªt
 = 
	`pwrôev
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
);

130 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

131 
	`do_io_u_åim
(
td
, 
io_u
);

132  
FIO_Q_COMPLETED
;

134 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

136  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

137 
	}
}

140 #ifde‡
FIO_HAVE_PWRITEV2


141 
	$fio_pvsyncio2_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

143 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

144 
psyncv2_›ti⁄s
 *
o
 = 
td
->
eo
;

145 
iovec
 *
iov
 = &
sd
->
iovecs
[0];

146 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

147 
ªt
, 
Êags
 = 0;

149 
	`fio_ro_check
(
td
, 
io_u
);

151 i‡(
o
->
hùri
 &&

152 (
	`ønd32_bëwìn
(&
sd
->
ønd_°©e
, 1, 100Ë<
o
->
hùri_≥r˚¡age
))

153 
Êags
 |
RWF_HIPRI
;

155 
iov
->
iov_ba£
 = 
io_u
->
x„r_buf
;

156 
iov
->
iov_Àn
 = 
io_u
->
x„r_buÊí
;

158 i‡(
io_u
->
ddú
 =
DDIR_READ
)

159 
ªt
 = 
	`¥ódv2
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
, 
Êags
);

160 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

161 
ªt
 = 
	`pwrôev2
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
, 
Êags
);

162 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

163 
	`do_io_u_åim
(
td
, 
io_u
);

164  
FIO_Q_COMPLETED
;

166 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

168  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

169 
	}
}

173 
	$fio_psyncio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

175 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

176 
ªt
;

178 
	`fio_ro_check
(
td
, 
io_u
);

180 i‡(
io_u
->
ddú
 =
DDIR_READ
)

181 
ªt
 = 
	`¥ód
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

182 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

183 
ªt
 = 
	`pwrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

184 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

185 
	`do_io_u_åim
(
td
, 
io_u
);

186  
FIO_Q_COMPLETED
;

188 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

190  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

191 
	}
}

193 
	$fio_syncio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

195 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

196 
ªt
;

198 
	`fio_ro_check
(
td
, 
io_u
);

200 i‡(
io_u
->
ddú
 =
DDIR_READ
)

201 
ªt
 = 
	`ªad
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

202 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

203 
ªt
 = 
	`wrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

204 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

205 
	`do_io_u_åim
(
td
, 
io_u
);

206  
FIO_Q_COMPLETED
;

208 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

210  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

211 
	}
}

213 
	$fio_vsyncio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

214 
max
,

215 c⁄° 
time•ec
 
fio_unu£d
 *
t
)

217 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

218 
ªt
;

220 i‡(
mö
) {

221 
ªt
 = 
sd
->
evíts
;

222 
sd
->
evíts
 = 0;

224 
ªt
 = 0;

226 
	`d¥öt
(
FD_IO
, "vsyncio_gëevíts: mö=%d,max=%d: %d\n", 
mö
, 
max
, 
ªt
);

227  
ªt
;

228 
	}
}

230 
io_u
 *
	$fio_vsyncio_evít
(
thªad_d©a
 *
td
, 
evít
)

232 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

234  
sd
->
io_us
[
evít
];

235 
	}
}

237 
	$fio_vsyncio_≠≥nd
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

239 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

241 i‡(
	`ddú_sync
(
io_u
->
ddú
))

244 i‡(
io_u
->
off£t
 =
sd
->
œ°_off£t
 && io_u->
fûe
 =sd->
œ°_fûe
 &&

245 
io_u
->
ddú
 =
sd
->
œ°_ddú
)

249 
	}
}

251 
	$fio_vsyncio_£t_iov
(
syncio_d©a
 *
sd
, 
io_u
 *io_u,

252 
idx
)

254 
sd
->
io_us
[
idx
] = 
io_u
;

255 
sd
->
iovecs
[
idx
].
iov_ba£
 = 
io_u
->
x„r_buf
;

256 
sd
->
iovecs
[
idx
].
iov_Àn
 = 
io_u
->
x„r_buÊí
;

257 
sd
->
œ°_off£t
 = 
io_u
->
off£t
 + io_u->
x„r_buÊí
;

258 
sd
->
œ°_fûe
 = 
io_u
->
fûe
;

259 
sd
->
œ°_ddú
 = 
io_u
->
ddú
;

260 
sd
->
queued_byãs
 +
io_u
->
x„r_buÊí
;

261 
sd
->
queued
++;

262 
	}
}

264 
	$fio_vsyncio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

266 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

268 
	`fio_ro_check
(
td
, 
io_u
);

270 i‡(!
	`fio_vsyncio_≠≥nd
(
td
, 
io_u
)) {

271 
	`d¥öt
(
FD_IO
, "vsyncio_queue:Çÿ≠≥nd (%d)\n", 
sd
->
queued
);

276 i‡(
sd
->
queued
)

277  
FIO_Q_BUSY
;

278 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

279 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

281  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

284 
sd
->
queued
 = 0;

285 
sd
->
queued_byãs
 = 0;

286 
	`fio_vsyncio_£t_iov
(
sd
, 
io_u
, 0);

288 i‡(
sd
->
queued
 =
td
->
o
.
iodïth
) {

289 
	`d¥öt
(
FD_IO
, "vsyncio_queue: max dïth %d\n", 
sd
->
queued
);

290  
FIO_Q_BUSY
;

293 
	`d¥öt
(
FD_IO
, "vsyncio_queue:áppend\n");

294 
	`fio_vsyncio_£t_iov
(
sd
, 
io_u
, sd->
queued
);

297 
	`d¥öt
(
FD_IO
, "vsyncio_queue: dïthÇow %d\n", 
sd
->
queued
);

298  
FIO_Q_QUEUED
;

299 
	}
}

304 
	$fio_vsyncio_íd
(
thªad_d©a
 *
td
, 
ssize_t
 
byãs
)

306 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

307 
io_u
 *io_u;

308 
i
;

309 
îr
;

314 i‡(
byãs
 =
sd
->
queued_byãs
)

317 
îr
 = 
î∫o
;

318 
i
 = 0; i < 
sd
->
queued
; i++) {

319 
io_u
 = 
sd
->
io_us
[
i
];

321 i‡(
byãs
 == -1) {

322 
io_u
->
îr‹
 = 
îr
;

324 
this_io
;

326 
this_io
 = 
byãs
;

327 i‡(
this_io
 > 
io_u
->
x„r_buÊí
)

328 
this_io
 = 
io_u
->
x„r_buÊí
;

330 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
this_io
;

331 
io_u
->
îr‹
 = 0;

332 
byãs
 -
this_io
;

336 i‡(
byãs
 == -1) {

337 
	`td_vîr‹
(
td
, 
îr
, "xfer vsync");

338  -
îr
;

342 
	}
}

344 
	$fio_vsyncio_commô
(
thªad_d©a
 *
td
)

346 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

347 
fio_fûe
 *
f
;

348 
ssize_t
 
ªt
;

350 i‡(!
sd
->
queued
)

353 
	`io_u_m¨k_submô
(
td
, 
sd
->
queued
);

354 
f
 = 
sd
->
œ°_fûe
;

356 i‡(
	`l£ek
(
f
->
fd
, 
sd
->
io_us
[0]->
off£t
, 
SEEK_SET
) == -1) {

357 
îr
 = -
î∫o
;

359 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

360  
îr
;

363 i‡(
sd
->
œ°_ddú
 =
DDIR_READ
)

364 
ªt
 = 
	`ªadv
(
f
->
fd
, 
sd
->
iovecs
, sd->
queued
);

366 
ªt
 = 
	`wrôev
(
f
->
fd
, 
sd
->
iovecs
, sd->
queued
);

368 
	`d¥öt
(
FD_IO
, "vsyncio_commô: %d\n", (Ë
ªt
);

369 
sd
->
evíts
 = sd->
queued
;

370 
sd
->
queued
 = 0;

371  
	`fio_vsyncio_íd
(
td
, 
ªt
);

372 
	}
}

374 
	$fio_vsyncio_öô
(
thªad_d©a
 *
td
)

376 
syncio_d©a
 *
sd
;

378 
sd
 = 
	`mÆloc
((*sd));

379 
	`mem£t
(
sd
, 0, (*sd));

380 
sd
->
œ°_off£t
 = -1ULL;

381 
sd
->
iovecs
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
iovec
));

382 
sd
->
io_us
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

383 
	`öô_ønd
(&
sd
->
ønd_°©e
, 0);

385 
td
->
io_›s_d©a
 = 
sd
;

387 
	}
}

389 
	$fio_vsyncio_˛ónup
(
thªad_d©a
 *
td
)

391 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

393 i‡(
sd
) {

394 
	`‰ì
(
sd
->
iovecs
);

395 
	`‰ì
(
sd
->
io_us
);

396 
	`‰ì
(
sd
);

398 
	}
}

400 
i€ngöe_›s
 
	gi€ngöe_rw
 = {

401 .
«me
 = "sync",

402 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

403 .
	g¥ï
 = 
fio_syncio_¥ï
,

404 .
	gqueue
 = 
fio_syncio_queue
,

405 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

406 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

407 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

408 .
	gÊags
 = 
FIO_SYNCIO
,

411 
i€ngöe_›s
 
	gi€ngöe_¥w
 = {

412 .
«me
 = "psync",

413 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

414 .
	gqueue
 = 
fio_psyncio_queue
,

415 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

416 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

417 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

418 .
	gÊags
 = 
FIO_SYNCIO
,

421 
i€ngöe_›s
 
	gi€ngöe_vrw
 = {

422 .
«me
 = "vsync",

423 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

424 .
	göô
 = 
fio_vsyncio_öô
,

425 .
	g˛ónup
 = 
fio_vsyncio_˛ónup
,

426 .
	gqueue
 = 
fio_vsyncio_queue
,

427 .
	gcommô
 = 
fio_vsyncio_commô
,

428 .
	gevít
 = 
fio_vsyncio_evít
,

429 .
	ggëevíts
 = 
fio_vsyncio_gëevíts
,

430 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

431 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

432 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

433 .
	gÊags
 = 
FIO_SYNCIO
,

436 #ifde‡
CONFIG_PWRITEV


437 
i€ngöe_›s
 
	gi€ngöe_pvrw
 = {

438 .
«me
 = "pvsync",

439 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

440 .
	göô
 = 
fio_vsyncio_öô
,

441 .
	g˛ónup
 = 
fio_vsyncio_˛ónup
,

442 .
	gqueue
 = 
fio_pvsyncio_queue
,

443 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

444 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

445 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

446 .
	gÊags
 = 
FIO_SYNCIO
,

450 #ifde‡
FIO_HAVE_PWRITEV2


451 
i€ngöe_›s
 
	gi€ngöe_pvrw2
 = {

452 .
«me
 = "pvsync2",

453 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

454 .
	göô
 = 
fio_vsyncio_öô
,

455 .
	g˛ónup
 = 
fio_vsyncio_˛ónup
,

456 .
	gqueue
 = 
fio_pvsyncio2_queue
,

457 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

458 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

459 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

460 .
	gÊags
 = 
FIO_SYNCIO
,

461 .
	g›ti⁄s
 = 
›ti⁄s
,

462 .
	g›ti⁄_°ru˘_size
 = (
psyncv2_›ti⁄s
),

466 
fio_öô
 
	$fio_syncio_ªgi°î
()

468 
	`ªgi°î_i€ngöe
(&
i€ngöe_rw
);

469 
	`ªgi°î_i€ngöe
(&
i€ngöe_¥w
);

470 
	`ªgi°î_i€ngöe
(&
i€ngöe_vrw
);

471 #ifde‡
CONFIG_PWRITEV


472 
	`ªgi°î_i€ngöe
(&
i€ngöe_pvrw
);

474 #ifde‡
FIO_HAVE_PWRITEV2


475 
	`ªgi°î_i€ngöe
(&
i€ngöe_pvrw2
);

477 
	}
}

479 
fio_exô
 
	$fio_syncio_uƒegi°î
()

481 
	`uƒegi°î_i€ngöe
(&
i€ngöe_rw
);

482 
	`uƒegi°î_i€ngöe
(&
i€ngöe_¥w
);

483 
	`uƒegi°î_i€ngöe
(&
i€ngöe_vrw
);

484 #ifde‡
CONFIG_PWRITEV


485 
	`uƒegi°î_i€ngöe
(&
i€ngöe_pvrw
);

487 #ifde‡
FIO_HAVE_PWRITEV2


488 
	`uƒegi°î_i€ngöe
(&
i€ngöe_pvrw2
);

490 
	}
}

	@/home/ysjin/Desktop/fio/fio/engines/windowsaio.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sig«l.h
>

11 
	~<î∫o.h
>

13 
	~"../fio.h
"

15 
	$BOOL
 (
	tWINAPI
 *
	tCANCELIOEX
)(
	tHANDLE
 
	thFûe
, 
	tLPOVERLAPPED
 
	tÕOvîœµed
);

17 
	`gëî∫o_‰om_wö_îr‹
 (
DWORD
 
code
, 
de„ºno
);

19 
	sfio_ovîœµed
 {

20 
OVERLAPPED
 
o
;

21 
io_u
 *io_u;

22 
BOOL
 
io_com∂ëe
;

25 
	swödowßio_d©a
 {

26 
io_u
 **
aio_evíts
;

27 
HANDLE
 
io˝
;

28 
HANDLE
 
iŸhªad
;

29 
HANDLE
 
iocom∂ëe_evít
;

30 
BOOL
 
iŸhªad_ru¬ög
;

33 
	sthªad_˘x
 {

34 
HANDLE
 
io˝
;

35 
wödowßio_d©a
 *
wd
;

38 
DWORD
 
WINAPI
 
	`IoCom∂ëi⁄Routöe
(
LPVOID
 
ÕP¨amëî
);

40 
	$fio_wödowßio_öô
(
thªad_d©a
 *
td
)

42 
wödowßio_d©a
 *
wd
;

43 
rc
 = 0;

45 
wd
 = 
	`ˇŒoc
(1, (
wödowßio_d©a
));

46 i‡(
wd
 =
NULL
) {

47 
	`log_îr
("windowsaio: failedÅoállocate memory forÉngine data\n");

48 
rc
 = 1;

51 i‡(!
rc
) {

52 
wd
->
aio_evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
*));

53 i‡(
wd
->
aio_evíts
 =
NULL
) {

54 
	`log_îr
("windowsaio: failedÅoállocate memory foráioÉventsÜist\n");

55 
rc
 = 1;

59 i‡(!
rc
) {

61 
wd
->
iocom∂ëe_evít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

62 i‡(
wd
->
iocom∂ëe_evít
 =
NULL
) {

63 
	`log_îr
("windowsaio: failedÅo create io completeÉvent handle\n");

64 
rc
 = 1;

68 i‡(
rc
) {

69 i‡(
wd
 !
NULL
) {

70 i‡(
wd
->
aio_evíts
 !
NULL
)

71 
	`‰ì
(
wd
->
aio_evíts
);

73 
	`‰ì
(
wd
);

77 
td
->
io_›s_d©a
 = 
wd
;

79 i‡(!
rc
) {

80 
thªad_˘x
 *
˘x
;

81 
wödowßio_d©a
 *
wd
;

82 
HANDLE
 
hFûe
;

84 
hFûe
 = 
	`Cª©eIoCom∂ëi⁄P‹t
(
INVALID_HANDLE_VALUE
, 
NULL
, 0, 0);

85 i‡(
hFûe
 =
INVALID_HANDLE_VALUE
) {

86 
	`log_îr
("windowsaio: failedÅo create io completionÖort\n");

87 
rc
 = 1;

90 
wd
 = 
td
->
io_›s_d©a
;

91 
wd
->
iŸhªad_ru¬ög
 = 
TRUE
;

92 
wd
->
io˝
 = 
hFûe
;

94 i‡(!
rc
)

95 
˘x
 = 
	`mÆloc
((
thªad_˘x
));

97 i‡(!
rc
 && 
˘x
 =
NULL
) {

98 
	`log_îr
("windowsaio: failedÅoállocate memory forÅhread context structure\n");

99 
	`Clo£H™dÀ
(
hFûe
);

100 
rc
 = 1;

103 i‡(!
rc
) {

104 
DWORD
 
thªadid
;

106 
˘x
->
io˝
 = 
hFûe
;

107 
˘x
->
wd
 = wd;

108 
wd
->
iŸhªad
 = 
	`Cª©eThªad
(
NULL
, 0, 
IoCom∂ëi⁄Routöe
, 
˘x
, 0, &
thªadid
);

110 i‡(
wd
->
iŸhªad
 !
NULL
)

111 
	`fio_£èfföôy
(
thªadid
, 
td
->
o
.
˝umask
);

113 
	`log_îr
("windowsaio: failedÅo create io completionÅhread\n");

116 i‡(
rc
 || 
wd
->
iŸhªad
 =
NULL
)

117 
rc
 = 1;

120  
rc
;

121 
	}
}

123 
	$fio_wödowßio_˛ónup
(
thªad_d©a
 *
td
)

125 
wödowßio_d©a
 *
wd
;

127 
wd
 = 
td
->
io_›s_d©a
;

129 i‡(
wd
 !
NULL
) {

130 
wd
->
iŸhªad_ru¬ög
 = 
FALSE
;

131 
	`WaôF‹SögÀObje˘
(
wd
->
iŸhªad
, 
INFINITE
);

133 
	`Clo£H™dÀ
(
wd
->
iŸhªad
);

134 
	`Clo£H™dÀ
(
wd
->
iocom∂ëe_evít
);

136 
	`‰ì
(
wd
->
aio_evíts
);

137 
	`‰ì
(
wd
);

139 
td
->
io_›s_d©a
 = 
NULL
;

141 
	}
}

143 
	$wödowßio_övÆid©e_ˇche
(
fio_fûe
 *
f
)

145 
DWORD
 
îr‹
;

146 
DWORD
 
ish¨emode
 = (
FILE_SHARE_DELETE
 | 
FILE_SHARE_READ
 |

147 
FILE_SHARE_WRITE
);

148 
HANDLE
 
ihFûe
;

149 
rc
 = 0;

157 
	`d¥öt
(
FD_IO
, "windowaio:áttempt invalidate cache for %s\n",

158 
f
->
fûe_«me
);

159 
ihFûe
 = 
	`Cª©eFûe
(
f
->
fûe_«me
, 0, 
ish¨emode
, 
NULL
, 
OPEN_EXISTING
,

160 
FILE_FLAG_NO_BUFFERING
, 
NULL
);

162 i‡(
ihFûe
 !
INVALID_HANDLE_VALUE
) {

163 i‡(!
	`Clo£H™dÀ
(
ihFûe
)) {

164 
îr‹
 = 
	`GëLa°Eº‹
();

165 
	`log_öfo
("windowsaio: invalidation fd close %s "

166 "Áûed:Éº‹ %d\n", 
f
->
fûe_«me
, 
îr‹
);

167 
rc
 = 1;

170 
îr‹
 = 
	`GëLa°Eº‹
();

171 i‡(
îr‹
 !
ERROR_FILE_NOT_FOUND
) {

172 
	`log_öfo
("windowsaio: cache invalidation of %s failed: "

173 "îr‹ %d\n", 
f
->
fûe_«me
, 
îr‹
);

174 
rc
 = 1;

178  
rc
;

179 
	}
}

181 
	$fio_wödowßio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

183 
rc
 = 0;

184 
DWORD
 
Êags
 = 
FILE_FLAG_POSIX_SEMANTICS
 | 
FILE_FLAG_OVERLAPPED
;

185 
DWORD
 
sh¨emode
 = 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
;

186 
DWORD
 
›ímode
 = 
OPEN_ALWAYS
;

187 
DWORD
 
ac˚ss
;

189 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

191 i‡(
f
->
fûëy≥
 =
FIO_TYPE_PIPE
) {

192 
	`log_îr
("windowsaio:ÖipesáreÇot supported\n");

196 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

197 
	`log_îr
("windowsaio: can'tÑead/writeÅo stdin/out\n");

201 i‡(
td
->
o
.
odúe˘
)

202 
Êags
 |
FILE_FLAG_NO_BUFFERING
;

203 i‡(
td
->
o
.
sync_io
)

204 
Êags
 |
FILE_FLAG_WRITE_THROUGH
;

210 
td
->
o
.
Ádvi£_höt
) {

211 
F_ADV_TYPE
:

212 i‡(
	`td_øndom
(
td
))

213 
Êags
 |
FILE_FLAG_RANDOM_ACCESS
;

215 
Êags
 |
FILE_FLAG_SEQUENTIAL_SCAN
;

217 
F_ADV_RANDOM
:

218 
Êags
 |
FILE_FLAG_RANDOM_ACCESS
;

220 
F_ADV_SEQUENTIAL
:

221 
Êags
 |
FILE_FLAG_SEQUENTIAL_SCAN
;

223 
F_ADV_NONE
:

226 
	`log_îr
("fio: unknow¿Ádvi£Åy≥ %d\n", 
td
->
o
.
Ádvi£_höt
);

229 i‡(!
	`td_wrôe
(
td
Ë|| 
ªad_⁄ly
)

230 
ac˚ss
 = 
GENERIC_READ
;

232 
ac˚ss
 = (
GENERIC_READ
 | 
GENERIC_WRITE
);

234 i‡(
td
->
o
.
¸óã_⁄_›í
)

235 
›ímode
 = 
OPEN_ALWAYS
;

237 
›ímode
 = 
OPEN_EXISTING
;

241 i‡(
td
->
o
.
övÆid©e_ˇche
 && !td->o.
odúe˘
)

242 
	`wödowßio_övÆid©e_ˇche
(
f
);

244 
f
->
hFûe
 = 
	`Cª©eFûe
(f->
fûe_«me
, 
ac˚ss
, 
sh¨emode
,

245 
NULL
, 
›ímode
, 
Êags
, NULL);

247 i‡(
f
->
hFûe
 =
INVALID_HANDLE_VALUE
) {

248 
	`log_îr
("wödowßio: faûedÅÿ›í fûê\"%s\"\n", 
f
->
fûe_«me
);

249 
rc
 = 1;

254 i‡(!
rc
 && 
td
->
io_›s_d©a
 !
NULL
) {

255 
wödowßio_d©a
 *
wd
;

257 
wd
 = 
td
->
io_›s_d©a
;

259 i‡(
	`Cª©eIoCom∂ëi⁄P‹t
(
f
->
hFûe
, 
wd
->
io˝
, 0, 0Ë=
NULL
) {

260 
	`log_îr
("windowsaio: failedÅo create io completionÖort\n");

261 
rc
 = 1;

265  
rc
;

266 
	}
}

268 
	$fio_wödowßio_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
, 
fio_fûe
 *
f
)

270 
rc
 = 0;

272 
	`d¥öt
(
FD_FILE
, "fd clo£ %s\n", 
f
->
fûe_«me
);

274 i‡(
f
->
hFûe
 !
INVALID_HANDLE_VALUE
) {

275 i‡(!
	`Clo£H™dÀ
(
f
->
hFûe
)) {

276 
	`log_öfo
("wödowßio: faûedÅÿ˛o£ fûêh™dÀ f‹ \"%s\"\n", 
f
->
fûe_«me
);

277 
rc
 = 1;

281 
f
->
hFûe
 = 
INVALID_HANDLE_VALUE
;

282  
rc
;

283 
	}
}

285 
BOOL
 
	$timeout_expúed
(
DWORD
 
°¨t_cou¡
, DWORD 
íd_cou¡
)

287 
BOOL
 
expúed
 = 
FALSE
;

288 
DWORD
 
cuºít_time
;

290 
cuºít_time
 = 
	`GëTickCou¡
();

292 i‡((
íd_cou¡
 > 
°¨t_cou¡
Ë&& 
cuºít_time
 >=Énd_count)

293 
expúed
 = 
TRUE
;

294 i‡(
cuºít_time
 < 
°¨t_cou¡
 && cuºít_timê> 
íd_cou¡
)

295 
expúed
 = 
TRUE
;

297  
expúed
;

298 
	}
}

300 
io_u
* 
	$fio_wödowßio_evít
(
thªad_d©a
 *
td
, 
evít
)

302 
wödowßio_d©a
 *
wd
 = 
td
->
io_›s_d©a
;

303  
wd
->
aio_evíts
[
evít
];

304 
	}
}

306 
	$fio_wödowßio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

307 
max
,

308 c⁄° 
time•ec
 *
t
)

310 
wödowßio_d©a
 *
wd
 = 
td
->
io_›s_d©a
;

311 
dequeued
 = 0;

312 
io_u
 *io_u;

313 
i
;

314 
fio_ovîœµed
 *
fov
;

315 
DWORD
 
°¨t_cou¡
 = 0;

316 
DWORD
 
íd_cou¡
 = 0;

317 
DWORD
 
°©us
;

318 
DWORD
 
mswaô
 = 250;

320 i‡(
t
 !
NULL
) {

321 
mswaô
 = (
t
->
tv_£c
 * 1000Ë+ (t->
tv_n£c
 / 1000000);

322 
°¨t_cou¡
 = 
	`GëTickCou¡
();

323 
íd_cou¡
 = 
°¨t_cou¡
 + (
t
->
tv_£c
 * 1000Ë+ (t->
tv_n£c
 / 1000000);

327 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

328 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
))

331 
fov
 = (
fio_ovîœµed
*)
io_u
->
ígöe_d©a
;

333 i‡(
fov
->
io_com∂ëe
) {

334 
fov
->
io_com∂ëe
 = 
FALSE
;

335 
wd
->
aio_evíts
[
dequeued
] = 
io_u
;

336 
dequeued
++;

340 i‡(
dequeued
 >
mö
)

343 i‡(
dequeued
 < 
mö
) {

344 
°©us
 = 
	`WaôF‹SögÀObje˘
(
wd
->
iocom∂ëe_evít
, 
mswaô
);

345 i‡(
°©us
 !
WAIT_OBJECT_0
 && 
dequeued
 >
mö
)

349 i‡(
dequeued
 >
mö
 ||

350 (
t
 !
NULL
 && 
	`timeout_expúed
(
°¨t_cou¡
, 
íd_cou¡
)))

354  
dequeued
;

355 
	}
}

357 
	$fio_wödowßio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

359 
fio_ovîœµed
 *
o
 = 
io_u
->
ígöe_d©a
;

360 
LPOVERLAPPED
 
ÕOvl
 = &
o
->o;

361 
BOOL
 
suc˚ss
 = 
FALSE
;

362 
rc
 = 
FIO_Q_COMPLETED
;

364 
	`fio_ro_check
(
td
, 
io_u
);

366 
ÕOvl
->
I¡î«l
 = 0;

367 
ÕOvl
->
I¡î«lHigh
 = 0;

368 
ÕOvl
->
Off£t
 = 
io_u
->
off£t
 & 0xFFFFFFFF;

369 
ÕOvl
->
Off£tHigh
 = 
io_u
->
off£t
 >> 32;

371 
io_u
->
ddú
) {

372 
DDIR_WRITE
:

373 
suc˚ss
 = 
	`WrôeFûe
(
io_u
->
fûe
->
hFûe
, io_u->
x„r_buf
,

374 
io_u
->
x„r_buÊí
, 
NULL
, 
ÕOvl
);

376 
DDIR_READ
:

377 
suc˚ss
 = 
	`RódFûe
(
io_u
->
fûe
->
hFûe
, io_u->
x„r_buf
,

378 
io_u
->
x„r_buÊí
, 
NULL
, 
ÕOvl
);

380 
DDIR_SYNC
:

381 
DDIR_DATASYNC
:

382 
DDIR_SYNC_FILE_RANGE
:

383 
suc˚ss
 = 
	`FlushFûeBuf„rs
(
io_u
->
fûe
->
hFûe
);

384 i‡(!
suc˚ss
) {

385 
	`log_îr
("windowsaio: failedÅo flush file buffers\n");

386 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

389  
FIO_Q_COMPLETED
;

390 
DDIR_TRIM
:

391 
	`log_îr
("windowsaio: manual TRIM isn't supported on Windows\n");

392 
io_u
->
îr‹
 = 1;

393 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

394  
FIO_Q_COMPLETED
;

396 
	`as£π
(0);

400 i‡(
suc˚ss
 || 
	`GëLa°Eº‹
(Ë=
ERROR_IO_PENDING
)

401 
rc
 = 
FIO_Q_QUEUED
;

403 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

404 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

407  
rc
;

408 
	}
}

411 
DWORD
 
WINAPI
 
	$IoCom∂ëi⁄Routöe
(
LPVOID
 
ÕP¨amëî
)

413 
OVERLAPPED
 *
ovl
;

414 
fio_ovîœµed
 *
fov
;

415 
io_u
 *io_u;

416 
wödowßio_d©a
 *
wd
;

417 
thªad_˘x
 *
˘x
;

418 
ULONG_PTR
 
ulKey
 = 0;

419 
DWORD
 
byãs
;

421 
˘x
 = (
thªad_˘x
*)
ÕP¨amëî
;

422 
wd
 = 
˘x
->wd;

425 
BOOL
 
ªt
;

427 
ªt
 = 
	`GëQueuedCom∂ëi⁄Sètus
(
˘x
->
io˝
, &
byãs
, &
ulKey
,

428 &
ovl
, 250);

429 i‡(!
ªt
 && 
ovl
 =
NULL
)

432 
fov
 = 
	`CONTAINING_RECORD
(
ovl
, 
fio_ovîœµed
, 
o
);

433 
io_u
 = 
fov
->io_u;

435 i‡(
ovl
->
I¡î«l
 =
ERROR_SUCCESS
) {

436 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ovl
->
I¡î«lHigh
;

437 
io_u
->
îr‹
 = 0;

439 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

440 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

443 
fov
->
io_com∂ëe
 = 
TRUE
;

444 
	`SëEvít
(
wd
->
iocom∂ëe_evít
);

445 } 
˘x
->
wd
->
iŸhªad_ru¬ög
);

447 
	`Clo£H™dÀ
(
˘x
->
io˝
);

448 
	`‰ì
(
˘x
);

450 
	}
}

452 
	$fio_wödowßio_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

454 
fio_ovîœµed
 *
o
 = 
io_u
->
ígöe_d©a
;

456 i‡(
o
) {

457 
io_u
->
ígöe_d©a
 = 
NULL
;

458 
	`‰ì
(
o
);

460 
	}
}

462 
	$fio_wödowßio_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

464 
fio_ovîœµed
 *
o
;

466 
o
 = 
	`mÆloc
((*o));

467 
o
->
io_com∂ëe
 = 
FALSE
;

468 
o
->
io_u
 = io_u;

469 
o
->o.
hEvít
 = 
NULL
;

470 
io_u
->
ígöe_d©a
 = 
o
;

472 
	}
}

474 
i€ngöe_›s
 
	gi€ngöe
 = {

475 .
«me
 = "windowsaio",

476 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

477 .
	göô
 = 
fio_wödowßio_öô
,

478 .
	gqueue
 = 
fio_wödowßio_queue
,

479 .
	ggëevíts
 = 
fio_wödowßio_gëevíts
,

480 .
	gevít
 = 
fio_wödowßio_evít
,

481 .
	g˛ónup
 = 
fio_wödowßio_˛ónup
,

482 .
	g›í_fûe
 = 
fio_wödowßio_›í_fûe
,

483 .
	g˛o£_fûe
 = 
fio_wödowßio_˛o£_fûe
,

484 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

485 .
	gio_u_öô
 = 
fio_wödowßio_io_u_öô
,

486 .
	gio_u_‰ì
 = 
fio_wödowßio_io_u_‰ì
,

489 
fio_öô
 
	$fio_wödowßio_ªgi°î
()

491 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

492 
	}
}

494 
fio_exô
 
	$fio_wödowßio_uƒegi°î
()

496 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

497 
	}
}

	@/home/ysjin/Desktop/fio/fio/err.h

1 #i‚de‡
FIO_ERR_H


2 
	#FIO_ERR_H


	)

12 
	#MAX_ERRNO
 4095

	)

14 
	#IS_ERR_VALUE
(
x
Ë((xË>(
uöçå_t
)-
MAX_ERRNO
)

	)

16 
ölöe
 *
	$ERR_PTR
(
uöçå_t
 
îr‹
)

18  (*Ë
îr‹
;

19 
	}
}

21 
ölöe
 
uöçå_t
 
	$PTR_ERR
(c⁄° *
±r
)

23  (
uöçå_t
Ë
±r
;

24 
	}
}

26 
ölöe
 
uöçå_t
 
	$IS_ERR
(c⁄° *
±r
)

28  
	`IS_ERR_VALUE
((
uöçå_t
)
±r
);

29 
	}
}

31 
ölöe
 
uöçå_t
 
	$IS_ERR_OR_NULL
(c⁄° *
±r
)

33  !
±r
 || 
	`IS_ERR_VALUE
((
uöçå_t
)ptr);

34 
	}
}

36 
ölöe
 
	$PTR_ERR_OR_ZERO
(c⁄° *
±r
)

38 i‡(
	`IS_ERR
(
±r
))

39  
	`PTR_ERR
(
±r
);

42 
	}
}

	@/home/ysjin/Desktop/fio/fio/eta.c

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<°rög.h
>

8 
	~"fio.h
"

9 
	~"lib/pow2.h
"

11 
	g__run_°r
[
REAL_MAX_JOBS
 + 1];

12 
	grun_°r
[
__THREAD_RUNSTR_SZ
(
REAL_MAX_JOBS
) + 1];

14 
	$upd©e_c⁄dí£d_°r
(*
r°r
, *
run_°r_c⁄dí£d
)

16 i‡(*
r°r
) {

17 *
r°r
) {

18 
ƒ
 = 1;

20 *
run_°r_c⁄dí£d
++ = *
r°r
++;

21 *(
r°r
 - 1) == *rstr) {

22 
r°r
++;

23 
ƒ
++;

25 
run_°r_c⁄dí£d
 +
	`•rötf
‘un_°r_c⁄dí£d, "(%u),", 
ƒ
);

27 
run_°r_c⁄dí£d
--;

29 *
run_°r_c⁄dí£d
 = '\0';

30 
	}
}

35 
	$check_°r_upd©e
(
thªad_d©a
 *
td
)

37 
c
 = 
__run_°r
[
td
->
thªad_numbî
 - 1];

39 
td
->
run°©e
) {

40 
TD_REAPED
:

41 i‡(
td
->
îr‹
)

42 
c
 = 'X';

43 i‡(
td
->
sig
)

44 
c
 = 'K';

46 
c
 = '_';

48 
TD_EXITED
:

49 
c
 = 'E';

51 
TD_RAMP
:

52 
c
 = '/';

54 
TD_RUNNING
:

55 i‡(
	`td_rw
(
td
)) {

56 i‡(
	`td_øndom
(
td
)) {

57 i‡(
td
->
o
.
rwmix
[
DDIR_READ
] == 100)

58 
c
 = 'r';

59 i‡(
td
->
o
.
rwmix
[
DDIR_WRITE
] == 100)

60 
c
 = 'w';

62 
c
 = 'm';

64 i‡(
td
->
o
.
rwmix
[
DDIR_READ
] == 100)

65 
c
 = 'R';

66 i‡(
td
->
o
.
rwmix
[
DDIR_WRITE
] == 100)

67 
c
 = 'W';

69 
c
 = 'M';

71 } i‡(
	`td_ªad
(
td
)) {

72 i‡(
	`td_øndom
(
td
))

73 
c
 = 'r';

75 
c
 = 'R';

76 } i‡(
	`td_wrôe
(
td
)) {

77 i‡(
	`td_øndom
(
td
))

78 
c
 = 'w';

80 
c
 = 'W';

82 i‡(
	`td_øndom
(
td
))

83 
c
 = 'd';

85 
c
 = 'D';

88 
TD_PRE_READING
:

89 
c
 = 'p';

91 
TD_VERIFYING
:

92 
c
 = 'V';

94 
TD_FSYNCING
:

95 
c
 = 'F';

97 
TD_FINISHING
:

98 
c
 = 'f';

100 
TD_CREATED
:

101 
c
 = 'C';

103 
TD_INITIALIZED
:

104 
TD_SETTING_UP
:

105 
c
 = 'I';

107 
TD_NOT_CREATED
:

108 
c
 = 'P';

111 
	`log_îr
("°©ê%d\n", 
td
->
run°©e
);

114 
__run_°r
[
td
->
thªad_numbî
 - 1] = 
c
;

115 
	`upd©e_c⁄dí£d_°r
(
__run_°r
, 
run_°r
);

116 
	}
}

121 
	$ëa_to_°r
(*
°r
, 
ëa_£c
)

123 
d
, 
h
, 
m
, 
s
;

124 
di•_hour
 = 0;

126 i‡(
ëa_£c
 == -1) {

127 
	`•rötf
(
°r
, "--");

131 
s
 = 
ëa_£c
 % 60;

132 
ëa_£c
 /= 60;

133 
m
 = 
ëa_£c
 % 60;

134 
ëa_£c
 /= 60;

135 
h
 = 
ëa_£c
 % 24;

136 
ëa_£c
 /= 24;

137 
d
 = 
ëa_£c
;

139 i‡(
d
) {

140 
di•_hour
 = 1;

141 
°r
 +
	`•rötf
(°r, "%02ud:", 
d
);

144 i‡(
h
 || 
di•_hour
)

145 
°r
 +
	`•rötf
(°r, "%02uh:", 
h
);

147 
°r
 +
	`•rötf
(°r, "%02um:", 
m
);

148 
°r
 +
	`•rötf
(°r, "%02us", 
s
);

149 
	}
}

154 
	$thªad_ëa
(
thªad_d©a
 *
td
)

156 
byãs_tŸÆ
, 
byãs_d⁄e
;

157 
ëa_£c
 = 0;

158 
ñ≠£d
;

159 
uöt64_t
 
timeout
;

161 
ñ≠£d
 = (
	`mtime_sö˚_now
(&
td
->
ïoch
) + 999) / 1000;

162 
timeout
 = 
td
->
o
.timeout / 1000000UL;

164 
byãs_tŸÆ
 = 
td
->
tŸÆ_io_size
;

166 i‡(
td
->
Êags
 & 
TD_F_NO_PROGRESS
)

169 i‡(
td
->
o
.
fûl_devi˚
 &&Åd->o.
size
 == -1ULL) {

170 i‡(!
td
->
fûl_devi˚_size
 ||Åd->fill_device_size == -1ULL)

173 
byãs_tŸÆ
 = 
td
->
fûl_devi˚_size
;

176 i‡(
td
->
o
.
z⁄e_size
 &&Åd->o.
z⁄e_skù
 && 
byãs_tŸÆ
) {

177 
ƒ_z⁄es
;

178 
uöt64_t
 
z⁄e_byãs
;

180 
z⁄e_byãs
 = 
byãs_tŸÆ
 + 
td
->
o
.
z⁄e_size
 +Åd->o.
z⁄e_skù
;

181 
ƒ_z⁄es
 = (
z⁄e_byãs
 - 1Ë/ (
td
->
o
.
z⁄e_size
 +Åd->o.
z⁄e_skù
);

182 
byãs_tŸÆ
 -
ƒ_z⁄es
 * 
td
->
o
.
z⁄e_skù
;

190 i‡(
td
->
o
.
do_vîify
 &&Åd->o.
vîify
 && 
	`td_wrôe
(td)) {

191 i‡(
	`td_rw
(
td
)) {

192 
≥rc
 = 50;

194 i‡(
td
->
o
.
rwmix
[
DDIR_WRITE
])

195 
≥rc
 = 
td
->
o
.
rwmix
[
DDIR_WRITE
];

197 
byãs_tŸÆ
 +(byãs_tŸÆ * 
≥rc
) / 100;

199 
byãs_tŸÆ
 <<= 1;

202 i‡(
td
->
run°©e
 =
TD_RUNNING
 ||Åd->run°©ê=
TD_VERIFYING
) {

203 
≥rc
, 
≥rc_t
;

205 
byãs_d⁄e
 = 
	`ddú_rw_sum
(
td
->
io_byãs
);

207 i‡(
byãs_tŸÆ
) {

208 
≥rc
 = (Ë
byãs_d⁄e
 / (Ë
byãs_tŸÆ
;

209 i‡(
≥rc
 > 1.0)

210 
≥rc
 = 1.0;

212 
≥rc
 = 0.0;

214 i‡(
td
->
o
.
time_ba£d
) {

215 i‡(
timeout
) {

216 
≥rc_t
 = (Ë
ñ≠£d
 / (Ë
timeout
;

217 i‡(
≥rc_t
 < 
≥rc
)

218 
≥rc
 = 
≥rc_t
;

224 
≥rc
 = 0.0;

228 i‡(
≥rc
 == 0.0) {

229 
ëa_£c
 = 
timeout
;

231 
ëa_£c
 = (Ë(
ñ≠£d
 * (1.0 / 
≥rc
)) -Élapsed;

234 i‡(
td
->
o
.
timeout
 &&

235 
ëa_£c
 > (
timeout
 + 
d⁄e_£cs
 - 
ñ≠£d
))

236 
ëa_£c
 = 
timeout
 + 
d⁄e_£cs
 - 
ñ≠£d
;

237 } i‡(
td
->
run°©e
 =
TD_NOT_CREATED
 ||Åd->run°©ê=
TD_CREATED


238 || 
td
->
run°©e
 =
TD_INITIALIZED


239 || 
td
->
run°©e
 =
TD_SETTING_UP


240 || 
td
->
run°©e
 =
TD_RAMP


241 || 
td
->
run°©e
 =
TD_PRE_READING
) {

242 
öt64_t
 
t_ëa
 = 0, 
r_ëa
 = 0;

243 
øã_byãs
;

249 i‡(
td
->
o
.
timeout
) {

250 
uöt64_t
 
__timeout
 = 
td
->
o
.
timeout
;

251 
uöt64_t
 
°¨t_dñay
 = 
td
->
o
.start_delay;

252 
uöt64_t
 
ømp_time
 = 
td
->
o
.ramp_time;

254 
t_ëa
 = 
__timeout
 + 
°¨t_dñay
;

255 i‡(!
td
->
ømp_time_ovî
) {

256 
t_ëa
 +
ømp_time
;

258 
t_ëa
 /= 1000000ULL;

260 i‡((
td
->
run°©e
 =
TD_RAMP
Ë&& 
	`ö_ømp_time
(td)) {

261 
ømp_À·
;

263 
ømp_À·
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

264 
ømp_À·
 = (ramp_left + 999) / 1000;

265 i‡(
ømp_À·
 <
t_ëa
)

266 
t_ëa
 -
ømp_À·
;

269 
øã_byãs
 = 0;

270 i‡(
	`td_ªad
(
td
))

271 
øã_byãs
 = 
td
->
o
.
øã
[
DDIR_READ
];

272 i‡(
	`td_wrôe
(
td
))

273 
øã_byãs
 +
td
->
o
.
øã
[
DDIR_WRITE
];

274 i‡(
	`td_åim
(
td
))

275 
øã_byãs
 +
td
->
o
.
øã
[
DDIR_TRIM
];

277 i‡(
øã_byãs
) {

278 
r_ëa
 = 
byãs_tŸÆ
 / 
øã_byãs
;

279 
r_ëa
 +(
td
->
o
.
°¨t_dñay
 / 1000000ULL);

282 i‡(
r_ëa
 && 
t_ëa
)

283 
ëa_£c
 = 
	`mö
(
r_ëa
, 
t_ëa
);

284 i‡(
r_ëa
)

285 
ëa_£c
 = 
r_ëa
;

286 i‡(
t_ëa
)

287 
ëa_£c
 = 
t_ëa
;

289 
ëa_£c
 = 0;

294 
ëa_£c
 = 0;

297  
ëa_£c
;

298 
	}
}

300 
	$ˇlc_øã
(
unifõd_rw_ªp
, 
mtime
,

301 *
io_byãs
,

302 *
¥ev_io_byãs
, 
uöt64_t
 *
øã
)

304 
i
;

306 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

307 
diff
, 
this_øã
;

309 
diff
 = 
io_byãs
[
i
] - 
¥ev_io_byãs
[i];

310 i‡(
mtime
)

311 
this_øã
 = ((1000 * 
diff
Ë/ 
mtime
) / 1024;

313 
this_øã
 = 0;

315 i‡(
unifõd_rw_ªp
) {

316 
øã
[
i
] = 0;

317 
øã
[0] +
this_øã
;

319 
øã
[
i
] = 
this_øã
;

321 
¥ev_io_byãs
[
i
] = 
io_byãs
[i];

323 
	}
}

325 
	$ˇlc_i›s
(
unifõd_rw_ªp
, 
mtime
,

326 *
io_i›s
,

327 *
¥ev_io_i›s
, *
i›s
)

329 
i
;

331 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

332 
diff
, 
this_i›s
;

334 
diff
 = 
io_i›s
[
i
] - 
¥ev_io_i›s
[i];

335 i‡(
mtime
)

336 
this_i›s
 = (
diff
 * 1000Ë/ 
mtime
;

338 
this_i›s
 = 0;

340 i‡(
unifõd_rw_ªp
) {

341 
i›s
[
i
] = 0;

342 
i›s
[0] +
this_i›s
;

344 
i›s
[
i
] = 
this_i›s
;

346 
¥ev_io_i›s
[
i
] = 
io_i›s
[i];

348 
	}
}

353 
boﬁ
 
	$ëa_time_wôhö_¶ack
(
time
)

355  
time
 > ((
ëa_öãrvÆ_m£c
 * 95) / 100);

356 
	}
}

362 
boﬁ
 
	$ˇlc_thªad_°©us
(
jobs_ëa
 *
je
, 
f‹˚
)

364 
thªad_d©a
 *
td
;

365 
i
, 
unifõd_rw_ªp
;

366 
uöt64_t
 
øã_time
, 
di•_time
, 
bw_avg_time
, *
ëa_£cs
;

367 
io_byãs
[
DDIR_RWDIR_CNT
];

368 
io_i›s
[
DDIR_RWDIR_CNT
];

369 
time•ec
 
now
;

371 
øã_io_byãs
[
DDIR_RWDIR_CNT
];

372 
di•_io_byãs
[
DDIR_RWDIR_CNT
];

373 
di•_io_i›s
[
DDIR_RWDIR_CNT
];

374 
time•ec
 
øã_¥ev_time
, 
di•_¥ev_time
;

376 i‡(!
f‹˚
) {

377 i‡(!(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) &&

378 
f_out
 =
°dout
)

379  
Ál£
;

380 i‡(
ãmp_°Æl_ts
 || 
ëa_¥öt
 =
FIO_ETA_NEVER
)

381  
Ál£
;

383 i‡(!
	`ißây
(
STDOUT_FILENO
Ë&& (
ëa_¥öt
 !
FIO_ETA_ALWAYS
))

384  
Ál£
;

387 i‡(!
	`ddú_rw_sum
(
øã_io_byãs
))

388 
	`fûl_°¨t_time
(&
øã_¥ev_time
);

389 i‡(!
	`ddú_rw_sum
(
di•_io_byãs
))

390 
	`fûl_°¨t_time
(&
di•_¥ev_time
);

392 
ëa_£cs
 = 
	`mÆloc
(
thªad_numbî
 * (
uöt64_t
));

393 
	`mem£t
(
ëa_£cs
, 0, 
thªad_numbî
 * (
uöt64_t
));

395 
je
->
ñ≠£d_£c
 = (
	`mtime_sö˚_gíesis
() + 999) / 1000;

397 
io_byãs
[
DDIR_READ
] = io_byãs[
DDIR_WRITE
] = io_byãs[
DDIR_TRIM
] = 0;

398 
io_i›s
[
DDIR_READ
] = io_i›s[
DDIR_WRITE
] = io_i›s[
DDIR_TRIM
] = 0;

399 
bw_avg_time
 = 
ULONG_MAX
;

400 
unifõd_rw_ªp
 = 0;

401 
	`f‹_óch_td
(
td
, 
i
) {

402 
unifõd_rw_ªp
 +
td
->
o
.unified_rw_rep;

403 i‡(
	`is_powî_of_2
(
td
->
o
.
kb_ba£
))

404 
je
->
is_pow2
 = 1;

405 
je
->
unô_ba£
 = 
td
->
o
.unit_base;

406 i‡(
td
->
o
.
bw_avg_time
 < bw_avg_time)

407 
bw_avg_time
 = 
td
->
o
.bw_avg_time;

408 i‡(
td
->
run°©e
 =
TD_RUNNING
 ||Åd->run°©ê=
TD_VERIFYING


409 || 
td
->
run°©e
 =
TD_FSYNCING


410 || 
td
->
run°©e
 =
TD_PRE_READING


411 || 
td
->
run°©e
 =
TD_FINISHING
) {

412 
je
->
ƒ_ru¬ög
++;

413 i‡(
	`td_ªad
(
td
)) {

414 
je
->
t_øã
[0] +
td
->
o
.
øã
[
DDIR_READ
];

415 
je
->
t_i›s
[0] +
td
->
o
.
øã_i›s
[
DDIR_READ
];

416 
je
->
m_øã
[0] +
td
->
o
.
øãmö
[
DDIR_READ
];

417 
je
->
m_i›s
[0] +
td
->
o
.
øã_i›s_mö
[
DDIR_READ
];

419 i‡(
	`td_wrôe
(
td
)) {

420 
je
->
t_øã
[1] +
td
->
o
.
øã
[
DDIR_WRITE
];

421 
je
->
t_i›s
[1] +
td
->
o
.
øã_i›s
[
DDIR_WRITE
];

422 
je
->
m_øã
[1] +
td
->
o
.
øãmö
[
DDIR_WRITE
];

423 
je
->
m_i›s
[1] +
td
->
o
.
øã_i›s_mö
[
DDIR_WRITE
];

425 i‡(
	`td_åim
(
td
)) {

426 
je
->
t_øã
[2] +
td
->
o
.
øã
[
DDIR_TRIM
];

427 
je
->
t_i›s
[2] +
td
->
o
.
øã_i›s
[
DDIR_TRIM
];

428 
je
->
m_øã
[2] +
td
->
o
.
øãmö
[
DDIR_TRIM
];

429 
je
->
m_i›s
[2] +
td
->
o
.
øã_i›s_mö
[
DDIR_TRIM
];

432 
je
->
fûes_›í
 +
td
->
ƒ_›í_fûes
;

433 } i‡(
td
->
run°©e
 =
TD_RAMP
) {

434 
je
->
ƒ_ru¬ög
++;

435 
je
->
ƒ_ømp
++;

436 } i‡(
td
->
run°©e
 =
TD_SETTING_UP
)

437 
je
->
ƒ_£âög_up
++;

438 i‡(
td
->
run°©e
 < 
TD_RUNNING
)

439 
je
->
ƒ_≥ndög
++;

441 i‡(
je
->
ñ≠£d_£c
 >= 3)

442 
ëa_£cs
[
i
] = 
	`thªad_ëa
(
td
);

444 
ëa_£cs
[
i
] = 
INT_MAX
;

446 
	`check_°r_upd©e
(
td
);

448 i‡(
td
->
run°©e
 > 
TD_SETTING_UP
) {

449 
ddú
;

451 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

452 i‡(
unifõd_rw_ªp
) {

453 
io_byãs
[0] +
td
->io_byãs[
ddú
];

454 
io_i›s
[0] +
td
->
io_blocks
[
ddú
];

456 
io_byãs
[
ddú
] +
td
->io_bytes[ddir];

457 
io_i›s
[
ddú
] +
td
->
io_blocks
[ddir];

463 i‡(
exôÆl_⁄_ãrmö©e
) {

464 
je
->
ëa_£c
 = 
INT_MAX
;

465 
	`f‹_óch_td
(
td
, 
i
) {

466 i‡(
ëa_£cs
[
i
] < 
je
->
ëa_£c
)

467 
je
->
ëa_£c
 = 
ëa_£cs
[
i
];

470 
ëa_°⁄e
 = 0;

472 
je
->
ëa_£c
 = 0;

473 
	`f‹_óch_td
(
td
, 
i
) {

474 i‡((
td
->
run°©e
 =
TD_NOT_CREATED
Ë&&Åd->
o
.
°⁄ewÆl
)

475 
ëa_°⁄e
 +
ëa_£cs
[
i
];

477 i‡(
ëa_£cs
[
i
] > 
je
->
ëa_£c
)

478 
je
->
ëa_£c
 = 
ëa_£cs
[
i
];

481 
je
->
ëa_£c
 +
ëa_°⁄e
;

484 
	`‰ì
(
ëa_£cs
);

486 
	`fio_gëtime
(&
now
, 
NULL
);

487 
øã_time
 = 
	`mtime_sö˚
(&
øã_¥ev_time
, &
now
);

489 i‡(
wrôe_bw_log
 && 
øã_time
 > 
bw_avg_time
 && !
	`ö_ømp_time
(
td
)) {

490 
	`ˇlc_øã
(
unifõd_rw_ªp
, 
øã_time
, 
io_byãs
, 
øã_io_byãs
,

491 
je
->
øã
);

492 
	`mem˝y
(&
øã_¥ev_time
, &
now
, (now));

493 
	`add_agg_ßm∂e
(
	`ßm∂e_vÆ
(
je
->
øã
[
DDIR_READ
]), DDIR_READ, 0);

494 
	`add_agg_ßm∂e
(
	`ßm∂e_vÆ
(
je
->
øã
[
DDIR_WRITE
]), DDIR_WRITE, 0);

495 
	`add_agg_ßm∂e
(
	`ßm∂e_vÆ
(
je
->
øã
[
DDIR_TRIM
]), DDIR_TRIM, 0);

498 
di•_time
 = 
	`mtime_sö˚
(&
di•_¥ev_time
, &
now
);

500 i‡(!
f‹˚
 && !
	`ëa_time_wôhö_¶ack
(
di•_time
))

501  
Ál£
;

503 
	`ˇlc_øã
(
unifõd_rw_ªp
, 
di•_time
, 
io_byãs
, 
di•_io_byãs
, 
je
->
øã
);

504 
	`ˇlc_i›s
(
unifõd_rw_ªp
, 
di•_time
, 
io_i›s
, 
di•_io_i›s
, 
je
->
i›s
);

506 
	`mem˝y
(&
di•_¥ev_time
, &
now
, (now));

508 i‡(!
f‹˚
 && !
je
->
ƒ_ru¬ög
 && !je->
ƒ_≥ndög
)

509  
Ál£
;

511 
je
->
ƒ_thªads
 = 
thªad_numbî
;

512 
	`upd©e_c⁄dí£d_°r
(
__run_°r
, 
run_°r
);

513 
	`mem˝y
(
je
->
run_°r
,Ñun_°r, 
	`°æí
(run_str));

514  
åue
;

515 
	}
}

517 
	$di•œy_thªad_°©us
(
jobs_ëa
 *
je
)

519 
time•ec
 
di•_ëa_√w_löe
;

520 
ëa_√w_löe_öô
, 
ëa_√w_löe_≥ndög
;

521 
löñí_œ°
;

522 
ëa_good
;

523 
ouçut
[
	`__THREAD_RUNSTR_SZ
(
REAL_MAX_JOBS
Ë+ 512], *
p
 = output;

524 
ëa_°r
[128];

525 
≥rc
 = 0.0;

527 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ñ≠£d_£c
) {

528 
≥rc
 = (Ë
je
->
ñ≠£d_£c
 / (Ë(je->ñ≠£d_£¯+ je->
ëa_£c
);

529 
	`ëa_to_°r
(
ëa_°r
, 
je
->
ëa_£c
);

532 i‡(
ëa_√w_löe_≥ndög
) {

533 
ëa_√w_löe_≥ndög
 = 0;

534 
löñí_œ°
 = 0;

535 
p
 +
	`•rötf
(p, "\n");

538 
p
 +
	`•rötf
’, "Jobs: %d (f=%d)", 
je
->
ƒ_ru¬ög
, je->
fûes_›í
);

541 i‡(
je
->
m_øã
[0] || je->m_rate[1] || je->m_rate[2] ||

542 
je
->
t_øã
[0] || je->t_rate[1] || je->t_rate[2]) {

543 *
å
, *
mr
;

545 
mr
 = 
	`num2°r
(
je
->
m_øã
[0] + je->m_rate[1] + je->m_rate[2],

546 
je
->
sig_figs
, 0, je->
is_pow2
, 
N2S_BYTEPERSEC
);

547 
å
 = 
	`num2°r
(
je
->
t_øã
[0] + je->t_rate[1] + je->t_rate[2],

548 
je
->
sig_figs
, 0, je->
is_pow2
, 
N2S_BYTEPERSEC
);

550 
p
 +
	`•rötf
’, ", %s-%s", 
mr
, 
å
);

551 
	`‰ì
(
å
);

552 
	`‰ì
(
mr
);

553 } i‡(
je
->
m_i›s
[0] || je->m_iops[1] || je->m_iops[2] ||

554 
je
->
t_i›s
[0] || je->t_iops[1] || je->t_iops[2]) {

555 
p
 +
	`•rötf
(p, ", %d-%d IOPS",

556 
je
->
m_i›s
[0] + je->m_iops[1] + je->m_iops[2],

557 
je
->
t_i›s
[0] + je->t_iops[1] + je->t_iops[2]);

561 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ƒ_ru¬ög
) {

562 
≥rc_°r
[32];

563 *
i›s_°r
[
DDIR_RWDIR_CNT
];

564 *
øã_°r
[
DDIR_RWDIR_CNT
];

565 
size_t
 
À·
;

566 
l
;

567 
ddú
;

568 
löñí
;

570 i‡((!
je
->
ëa_£c
 && !
ëa_good
Ë|| je->
ƒ_ømp
 =je->
ƒ_ru¬ög
 ||

571 
je
->
ëa_£c
 == -1)

572 
	`°r˝y
(
≥rc_°r
, "-.-%");

574 
mu…
 = 100.0;

576 i‡(
je
->
ƒ_£âög_up
 && je->
ƒ_ru¬ög
)

577 
mu…
 *(1.0 - (Ë
je
->
ƒ_£âög_up
 / (Ëje->
ƒ_ru¬ög
);

579 
ëa_good
 = 1;

580 
≥rc
 *
mu…
;

581 
	`•rötf
(
≥rc_°r
, "%3.1f%%", 
≥rc
);

584 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

585 
øã_°r
[
ddú
] = 
	`num2°r
(
je
->
øã
[ddir], 4,

586 1024, 
je
->
is_pow2
, je->
unô_ba£
);

587 
i›s_°r
[
ddú
] = 
	`num2°r
(
je
->
i›s
[ddú], 4, 1, 0, 
N2S_NONE
);

590 
À·
 = (
ouçut
Ë- (
p
 - output) - 1;

592 i‡(
je
->
øã
[
DDIR_TRIM
] || je->
i›s
[DDIR_TRIM])

593 
l
 = 
	`¢¥ötf
(
p
, 
À·
,

595 
je
->
run_°r
, 
≥rc_°r
, 
øã_°r
[
DDIR_READ
],

596 
øã_°r
[
DDIR_WRITE
],Ñ©e_°r[
DDIR_TRIM
],

597 
i›s_°r
[
DDIR_READ
], i›s_°r[
DDIR_WRITE
],

598 
i›s_°r
[
DDIR_TRIM
], 
ëa_°r
);

600 
l
 = 
	`¢¥ötf
(
p
, 
À·
,

602 
je
->
run_°r
, 
≥rc_°r
,

603 
øã_°r
[
DDIR_READ
],Ñ©e_°r[
DDIR_WRITE
],

604 
i›s_°r
[
DDIR_READ
], i›s_°r[
DDIR_WRITE
],

605 
ëa_°r
);

607 i‡(
l
 >
À·
)

608 
l
 = 
À·
 - 1;

609 
p
 +
l
;

610 
löñí
 = 
p
 - 
ouçut
;

611 i‡(
l
 >0 && 
löñí
 < 
löñí_œ°
)

612 
p
 +
	`•rötf
’, "%*s", 
löñí_œ°
 - 
löñí
, "");

613 
löñí_œ°
 = 
löñí
;

615 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

616 
	`‰ì
(
øã_°r
[
ddú
]);

617 
	`‰ì
(
i›s_°r
[
ddú
]);

620 
p
 +
	`•rötf
(p, "\r");

622 
	`¥ötf
("%s", 
ouçut
);

624 i‡(!
ëa_√w_löe_öô
) {

625 
	`fio_gëtime
(&
di•_ëa_√w_löe
, 
NULL
);

626 
ëa_√w_löe_öô
 = 1;

627 } i‡(
ëa_√w_löe
 && 
	`mtime_sö˚_now
(&
di•_ëa_√w_löe
) >Éta_new_line) {

628 
	`fio_gëtime
(&
di•_ëa_√w_löe
, 
NULL
);

629 
ëa_√w_löe_≥ndög
 = 1;

632 
	`fÊush
(
°dout
);

633 
	}
}

635 
jobs_ëa
 *
	$gë_jobs_ëa
(
boﬁ
 
f‹˚
, 
size_t
 *
size
)

637 
jobs_ëa
 *
je
;

639 i‡(!
thªad_numbî
)

640  
NULL
;

642 *
size
 = (*
je
Ë+ 
THREAD_RUNSTR_SZ
 + 8;

643 
je
 = 
	`mÆloc
(*
size
);

644 i‡(!
je
)

645  
NULL
;

646 
	`mem£t
(
je
, 0, *
size
);

648 i‡(!
	`ˇlc_thªad_°©us
(
je
, 
f‹˚
)) {

649 
	`‰ì
(
je
);

650  
NULL
;

653 *
size
 = (*
je
Ë+ 
	`°æí
((*Ëje->
run_°r
) + 1;

654  
je
;

655 
	}
}

657 
	$¥öt_thªad_°©us
()

659 
jobs_ëa
 *
je
;

660 
size_t
 
size
;

662 
je
 = 
	`gë_jobs_ëa
(
Ál£
, &
size
);

663 i‡(
je
)

664 
	`di•œy_thªad_°©us
(
je
);

666 
	`‰ì
(
je
);

667 
	}
}

669 
	$¥öt_°©us_öô
(
thr_numbî
)

671 
__run_°r
[
thr_numbî
] = 'P';

672 
	`upd©e_c⁄dí£d_°r
(
__run_°r
, 
run_°r
);

673 
	}
}

	@/home/ysjin/Desktop/fio/fio/exp/test-expression-parser.c

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~"../y.èb.h
"

27 
evÆu©e_¨ôhmëic_ex¥essi⁄
(c⁄° *
buf„r
, *
ivÆ
,

28 *
dvÆ
, 
im∂õd_unôs
, 
is_time
);

30 
	$maö
(
¨gc
, *
¨gv
[])

32 
rc
, 
bye
 = 0;

33 
ªsu…
;

34 
dªsu…
;

35 
buf„r
[100];

38 i‡(
	`fgës
(
buf„r
, 90, 
°dö
Ë=
NULL
)

40 
rc
 = 
	`°æí
(
buf„r
);

41 i‡(
rc
 > 0 && 
buf„r
[rc - 1] == '\n')

42 
buf„r
[
rc
 - 1] = '\0';

43 
rc
 = 
	`evÆu©e_¨ôhmëic_ex¥essi⁄
(
buf„r
, &
ªsu…
, &
dªsu…
, 1.0, 0);

44 i‡(!
rc
) {

45 
	`¥ötf
("%Œd (%20.20lf)\n", 
ªsu…
, 
dªsu…
);

47 
	`Ârötf
(
°dîr
, "SyntaxÉrror\n");

48 
ªsu…
 = 0;

49 
dªsu…
 = 0;

51 } !
bye
);

53 
	}
}

	@/home/ysjin/Desktop/fio/fio/fifo.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~"fifo.h
"

28 
fifo
 *
	$fifo_Æloc
(
size
)

30 
fifo
 *fifo;

32 
fifo
 = 
	`mÆloc
((fifo));

33 i‡(!
fifo
)

34  
NULL
;

36 
fifo
->
buf„r
 = 
	`mÆloc
(
size
);

37 
fifo
->
size
 = size;

38 
fifo
->
ö
 = fifo->
out
 = 0;

40  
fifo
;

41 
	}
}

43 
	$fifo_‰ì
(
fifo
 *fifo)

45 
	`‰ì
(
fifo
->
buf„r
);

46 
	`‰ì
(
fifo
);

47 
	}
}

49 
	$fifo_put
(
fifo
 *fifo, *
buf„r
, 
Àn
)

51 
l
;

53 
Àn
 = 
	`mö
÷í, 
	`fifo_room
(
fifo
));

56 
l
 = 
	`mö
(
Àn
, 
fifo
->
size
 - (fifo->
ö
 & (fifo->size - 1)));

57 
	`mem˝y
(
fifo
->
buf„r
 + (fifo->
ö
 & (fifo->
size
 - 1)), buf„r, 
l
);

60 
	`mem˝y
(
fifo
->
buf„r
, buf„∏+ 
l
, 
Àn
 -Ü);

67 
fifo
->
ö
 +
Àn
;

69  
Àn
;

70 
	}
}

72 
	$fifo_gë
(
fifo
 *fifo, *
buf
, 
Àn
)

74 
Àn
 = 
	`mö
÷í, 
fifo
->
ö
 - fifo->
out
);

76 i‡(
buf
) {

77 
l
;

82 
l
 = 
	`mö
(
Àn
, 
fifo
->
size
 - (fifo->
out
 & (fifo->size - 1)));

83 
	`mem˝y
(
buf
, 
fifo
->
buf„r
 + (fifo->
out
 & (fifo->
size
 - 1)), 
l
);

88 
	`mem˝y
(
buf
 + 
l
, 
fifo
->
buf„r
, 
Àn
 -Ü);

91 
fifo
->
out
 +
Àn
;

93 i‡(
fifo
->
ö
 =fifo->
out
)

94 
fifo
->
ö
 = fifo->
out
 = 0;

96  
Àn
;

97 
	}
}

	@/home/ysjin/Desktop/fio/fio/fifo.h

1 #i‚de‡
FIO_FIFO_H


2 
	#FIO_FIFO_H


	)

23 
	~"mömax.h
"

25 
	sfifo
 {

26 *
	mbuf„r
;

27 
	msize
;

28 
	mö
;

29 
	mout
;

32 
fifo
 *
fifo_Æloc
();

33 
fifo_put
(
fifo
 *, *, );

34 
fifo_gë
(
fifo
 *, *, );

35 
fifo_‰ì
(
fifo
 *);

37 
ölöe
 
	$fifo_Àn
(
fifo
 *fifo)

39  
fifo
->
ö
 - fifo->
out
;

40 
	}
}

42 
ölöe
 
	$fifo_room
(
fifo
 *fifo)

44  
fifo
->
size
 - fifo->
ö
 + fifo->
out
;

45 
	}
}

	@/home/ysjin/Desktop/fio/fio/file.h

1 #i‚de‡
FIO_FILE_H


2 
	#FIO_FILE_H


	)

4 
	~<°rög.h
>

5 
	~"compûî/compûî.h
"

6 
	~"io_ddú.h
"

7 
	~"Êi°.h
"

8 
	~"lib/zùf.h
"

9 
	~"lib/axm≠.h
"

10 
	~"lib/lf§.h
"

11 
	~"lib/gauss.h
"

16 
	efio_fûëy≥
 {

17 
	mFIO_TYPE_FILE
 = 1,

18 
	mFIO_TYPE_BLOCK
,

19 
	mFIO_TYPE_CHAR
,

20 
	mFIO_TYPE_PIPE
,

23 
	efio_fûe_Êags
 {

24 
	mFIO_FILE_›í
 = 1 << 0,

25 
	mFIO_FILE_˛osög
 = 1 << 1,

26 
	mFIO_FILE_exãnd
 = 1 << 2,

27 
	mFIO_FILE_d⁄e
 = 1 << 3,

28 
	mFIO_FILE_size_known
 = 1 << 4,

29 
	mFIO_FILE_hashed
 = 1 << 5,

30 
	mFIO_FILE_∑πül_mm≠
 = 1 << 6,

31 
	mFIO_FILE_axm≠
 = 1 << 7,

32 
	mFIO_FILE_lf§
 = 1 << 8,

35 
	efûe_lock_mode
 {

36 
	mFILE_LOCK_NONE
,

37 
	mFILE_LOCK_EXCLUSIVE
,

38 
	mFILE_LOCK_READWRITE
,

47 
	mFIO_FSERVICE_RANDOM
 = 1,

48 
	mFIO_FSERVICE_RR
 = 2,

49 
	mFIO_FSERVICE_SEQ
 = 3,

50 
	m__FIO_FSERVICE_NONUNIFORM
 = 0x100,

51 
	mFIO_FSERVICE_ZIPF
 = 
__FIO_FSERVICE_NONUNIFORM
 | 4,

52 
	mFIO_FSERVICE_PARETO
 = 
__FIO_FSERVICE_NONUNIFORM
 | 5,

53 
	mFIO_FSERVICE_GAUSS
 = 
__FIO_FSERVICE_NONUNIFORM
 | 6,

55 
	mFIO_FSERVICE_SHIFT
 = 10,

62 
	efio_ÁŒoˇã_mode
 {

63 
	mFIO_FALLOCATE_NONE
 = 1,

64 
	mFIO_FALLOCATE_POSIX
 = 2,

65 
	mFIO_FALLOCATE_KEEP_SIZE
 = 3,

66 
	mFIO_FALLOCATE_NATIVE
 = 4,

73 
	sfio_fûe
 {

74 
Êi°_hód
 
	mhash_li°
;

75 
fio_fûëy≥
 
	mfûëy≥
;

77 
	mfd
;

78 
	mshadow_fd
;

79 #ifde‡
WIN32


80 
HANDLE
 
	mhFûe
;

81 
HANDLE
 
	mioCP
;

87 
	mmaj‹
, 
	mmö‹
;

88 
	mfûío
;

89 
	mbs
;

90 *
	mfûe_«me
;

96 
uöt64_t
 
	mªÆ_fûe_size
;

97 
uöt64_t
 
	mfûe_off£t
;

98 
uöt64_t
 
	mio_size
;

103 
uöt64_t
 
	mœ°_pos
[
DDIR_RWDIR_CNT
];

104 
uöt64_t
 
	mœ°_°¨t
[
DDIR_RWDIR_CNT
];

106 
uöt64_t
 
	mfú°_wrôe
;

107 
uöt64_t
 
	mœ°_wrôe
;

113 
uöt64_t
 *
	mœ°_wrôe_comp
;

114 
	mœ°_wrôe_idx
;

120 
uöt64_t
 
	mígöe_pos
;

121 *
	mígöe_d©a
;

128 
fio_muãx
 *
	mlock
;

129 
fio_rwlock
 *
	mrwlock
;

136 
axm≠
 *
	mio_axm≠
;

137 
fio_lf§
 
	mlf§
;

144 
zùf_°©e
 
	mzùf
;

145 
gauss_°©e
 
	mgauss
;

148 
	mª„ªn˚s
;

149 
fio_fûe_Êags
 
	mÊags
;

151 
disk_utû
 *
	mdu
;

154 
	#FILE_ENG_DATA
(
f
Ë((f)->
ígöe_d©a
)

	)

155 
	#FILE_SET_ENG_DATA
(
f
, 
d©a
Ë((f)->
ígöe_d©a
 = (d©a))

	)

157 
	#FILE_FLAG_FNS
(
«me
) \

158 
ölöe
 
fio_fûe_£t_
##
	`«me
(
fio_fûe
 *
f
) \

160 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†| 
FIO_FILE_
##
«me
); \

162 
ölöe
 
fio_fûe_˛ór_
##
	`«me
(
fio_fûe
 *
f
) \

164 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†& ~
FIO_FILE_
##
«me
); \

166 
ölöe
 
fio_fûe_
##
	`«me
(
fio_fûe
 *
f
) \

168  ((
f
)->
Êags
 & 
FIO_FILE_
##
«me
) != 0; \

169 }

	)

171 
FILE_FLAG_FNS
(
›í
);

172 
FILE_FLAG_FNS
(
˛osög
);

173 
FILE_FLAG_FNS
(
exãnd
);

174 
FILE_FLAG_FNS
(
d⁄e
);

175 
FILE_FLAG_FNS
(
size_known
);

176 
FILE_FLAG_FNS
(
hashed
);

177 
FILE_FLAG_FNS
(
∑πül_mm≠
);

178 
FILE_FLAG_FNS
(
axm≠
);

179 
FILE_FLAG_FNS
(
lf§
);

180 #unde‡
FILE_FLAG_FNS


185 
	gthªad_d©a
;

186 
˛o£_fûes
(
thªad_d©a
 *);

187 
˛o£_™d_‰ì_fûes
(
thªad_d©a
 *);

188 
uöt64_t
 
gë_°¨t_off£t
(
thªad_d©a
 *, 
fio_fûe
 *);

189 
__mu°_check
 
£tup_fûes
(
thªad_d©a
 *);

190 
__mu°_check
 
fûe_övÆid©e_ˇche
(
thªad_d©a
 *, 
fio_fûe
 *);

191 #ifde‡
__˝lu•lus


194 
__mu°_check
 
gíîic_›í_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

195 
__mu°_check
 
gíîic_˛o£_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

196 
__mu°_check
 
gíîic_gë_fûe_size
(
thªad_d©a
 *, 
fio_fûe
 *);

197 #ifde‡
__˝lu•lus


200 
__mu°_check
 
fûe_lookup_›í
(
fio_fûe
 *
f
, 
Êags
);

201 
boﬁ
 
__mu°_check
 
¥e_ªad_fûes
(
thªad_d©a
 *);

202 
gë_ønd_fûe_size
(
thªad_d©a
 *
td
);

203 
add_fûe
(
thªad_d©a
 *, const *, , );

204 
add_fûe_ex˛usive
(
thªad_d©a
 *, const *);

205 
gë_fûe
(
fio_fûe
 *);

206 
__mu°_check
 
put_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

207 
put_fûe_log
(
thªad_d©a
 *, 
fio_fûe
 *);

208 
lock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *, 
fio_ddú
);

209 
u∆ock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

210 
u∆ock_fûe_Æl
(
thªad_d©a
 *, 
fio_fûe
 *);

211 
add_dú_fûes
(
thªad_d©a
 *, const *);

212 
boﬁ
 
öô_øndom_m≠
(
thªad_d©a
 *);

213 
dup_fûes
(
thªad_d©a
 *, thread_data *);

214 
gë_fûío
(
thªad_d©a
 *, const *);

215 
‰ì_ªÀa£_fûes
(
thªad_d©a
 *);

216 
fûe£tup_mem_‰ì
();

217 
fio_fûe_ª£t
(
thªad_d©a
 *, 
fio_fûe
 *);

218 
boﬁ
 
fio_fûes_d⁄e
(
thªad_d©a
 *);

219 
boﬁ
 
exi°s_™d_nŸ_ªgfûe
(const *);

220 
fio_£t_dúe˘io
(
thªad_d©a
 *, 
fio_fûe
 *);

	@/home/ysjin/Desktop/fio/fio/filehash.c

1 
	~<°dlib.h
>

2 
	~<as£π.h
>

4 
	~"fio.h
"

5 
	~"Êi°.h
"

6 
	~"hash.h
"

7 
	~"fûehash.h
"

8 
	~"smÆloc.h
"

9 
	~"lib/bloom.h
"

11 
	#HASH_BUCKETS
 512

	)

12 
	#HASH_MASK
 (
HASH_BUCKETS
 - 1)

	)

14 
	#BLOOM_SIZE
 16*1024*1024

	)

16 
	gfûe_hash_size
 = 
HASH_BUCKETS
 * (
Êi°_hód
);

18 
Êi°_hód
 *
	gfûe_hash
;

19 
fio_muãx
 *
	ghash_lock
;

20 
bloom
 *
	gfûe_bloom
;

22 
	$hash
(c⁄° *
«me
)

24  
	`jhash
(
«me
, 
	`°æí
“ame), 0Ë& 
HASH_MASK
;

25 
	}
}

27 
	$fio_fûe_hash_lock
()

29 i‡(
hash_lock
)

30 
	`fio_muãx_down
(
hash_lock
);

31 
	}
}

33 
	$fio_fûe_hash_u∆ock
()

35 i‡(
hash_lock
)

36 
	`fio_muãx_up
(
hash_lock
);

37 
	}
}

39 
	$ªmove_fûe_hash
(
fio_fûe
 *
f
)

41 
	`fio_muãx_down
(
hash_lock
);

43 i‡(
	`fio_fûe_hashed
(
f
)) {

44 
	`as£π
(!
	`Êi°_em±y
(&
f
->
hash_li°
));

45 
	`Êi°_dñ_öô
(&
f
->
hash_li°
);

46 
	`fio_fûe_˛ór_hashed
(
f
);

49 
	`fio_muãx_up
(
hash_lock
);

50 
	}
}

52 
fio_fûe
 *
	$__lookup_fûe_hash
(c⁄° *
«me
)

54 
Êi°_hód
 *
buckë
 = &
fûe_hash
[
	`hash
(
«me
)];

55 
Êi°_hód
 *
n
;

57 
	`Êi°_f‹_óch
(
n
, 
buckë
) {

58 
fio_fûe
 *
f
 = 
	`Êi°_íåy
(
n
, fio_fûe, 
hash_li°
);

60 i‡(!
f
->
fûe_«me
)

63 i‡(!
	`°rcmp
(
f
->
fûe_«me
, 
«me
)) {

64 
	`as£π
(
f
->
fd
 != -1);

65  
f
;

69  
NULL
;

70 
	}
}

72 
fio_fûe
 *
	$lookup_fûe_hash
(c⁄° *
«me
)

74 
fio_fûe
 *
f
;

76 
	`fio_muãx_down
(
hash_lock
);

77 
f
 = 
	`__lookup_fûe_hash
(
«me
);

78 
	`fio_muãx_up
(
hash_lock
);

79  
f
;

80 
	}
}

82 
fio_fûe
 *
	$add_fûe_hash
(
fio_fûe
 *
f
)

84 
fio_fûe
 *
Æüs
;

86 i‡(
	`fio_fûe_hashed
(
f
))

87  
NULL
;

89 
	`INIT_FLIST_HEAD
(&
f
->
hash_li°
);

91 
	`fio_muãx_down
(
hash_lock
);

93 
Æüs
 = 
	`__lookup_fûe_hash
(
f
->
fûe_«me
);

94 i‡(!
Æüs
) {

95 
	`fio_fûe_£t_hashed
(
f
);

96 
	`Êi°_add_èû
(&
f
->
hash_li°
, &
fûe_hash
[
	`hash
(f->
fûe_«me
)]);

99 
	`fio_muãx_up
(
hash_lock
);

100  
Æüs
;

101 
	}
}

103 
boﬁ
 
	$fûe_bloom_exi°s
(c⁄° *
‚ame
, 
boﬁ
 
£t
)

105  
	`bloom_°rög
(
fûe_bloom
, 
‚ame
, 
	`°æí
(‚ame), 
£t
);

106 
	}
}

108 
	$fûe_hash_exô
()

110 
i
, 
has_íåõs
 = 0;

112 
	`fio_muãx_down
(
hash_lock
);

113 
i
 = 0; i < 
HASH_BUCKETS
; i++)

114 
has_íåõs
 +!
	`Êi°_em±y
(&
fûe_hash
[
i
]);

115 
	`fio_muãx_up
(
hash_lock
);

117 i‡(
has_íåõs
)

118 
	`log_îr
("fio: file hashÇotÉmpty onÉxit\n");

120 
	`s‰ì
(
fûe_hash
);

121 
fûe_hash
 = 
NULL
;

122 
	`fio_muãx_ªmove
(
hash_lock
);

123 
hash_lock
 = 
NULL
;

124 
	`bloom_‰ì
(
fûe_bloom
);

125 
fûe_bloom
 = 
NULL
;

126 
	}
}

128 
	$fûe_hash_öô
()

130 
i
;

132 
fûe_hash
 = 
	`smÆloc
(
fûe_hash_size
);

134 
i
 = 0; i < 
HASH_BUCKETS
; i++)

135 
	`INIT_FLIST_HEAD
(&
fûe_hash
[
i
]);

137 
hash_lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

138 
fûe_bloom
 = 
	`bloom_√w
(
BLOOM_SIZE
);

139 
	}
}

	@/home/ysjin/Desktop/fio/fio/filehash.h

1 #i‚de‡
FIO_FILE_HASH_H


2 
	#FIO_FILE_HASH_H


	)

4 
	~"lib/ty≥s.h
"

6 
fûe_hash_öô
();

7 
fûe_hash_exô
();

8 
fio_fûe
 *
lookup_fûe_hash
(const *);

9 
fio_fûe
 *
add_fûe_hash
(fio_file *);

10 
ªmove_fûe_hash
(
fio_fûe
 *);

11 
fio_fûe_hash_lock
();

12 
fio_fûe_hash_u∆ock
();

13 
boﬁ
 
fûe_bloom_exi°s
(const *, bool);

	@/home/ysjin/Desktop/fio/fio/filelock.c

6 
	~<öây≥s.h
>

7 
	~<°rög.h
>

8 
	~<uni°d.h
>

9 
	~<as£π.h
>

11 
	~"Êi°.h
"

12 
	~"fûñock.h
"

13 
	~"smÆloc.h
"

14 
	~"muãx.h
"

15 
	~"hash.h
"

16 
	~"log.h
"

18 
	sfio_fûñock
 {

19 
uöt32_t
 
	mhash
;

20 
fio_muãx
 
	mlock
;

21 
Êi°_hód
 
	mli°
;

22 
	mª„ªn˚s
;

25 
	#MAX_FILELOCKS
 128

	)

27 
	sfûñock_d©a
 {

28 
Êi°_hód
 
	mli°
;

29 
fio_muãx
 
	mlock
;

31 
Êi°_hód
 
	m‰ì_li°
;

32 
fio_fûñock
 
	mffs
[
MAX_FILELOCKS
];

33 } *
	gÊd
;

35 
	$put_fûñock
(
fio_fûñock
 *
ff
)

37 
	`Êi°_add
(&
ff
->
li°
, &
Êd
->
‰ì_li°
);

38 
	}
}

40 
fio_fûñock
 *
	$__gë_fûñock
()

42 
fio_fûñock
 *
ff
;

44 i‡(
	`Êi°_em±y
(&
Êd
->
‰ì_li°
))

45  
NULL
;

47 
ff
 = 
	`Êi°_fú°_íåy
(&
Êd
->
‰ì_li°
, 
fio_fûñock
, 
li°
);

48 
	`Êi°_dñ_öô
(&
ff
->
li°
);

49  
ff
;

50 
	}
}

52 
fio_fûñock
 *
	$gë_fûñock
(
åylock
, *
ªåy
)

54 
fio_fûñock
 *
ff
;

57 
ff
 = 
	`__gë_fûñock
();

58 i‡(
ff
 || 
åylock
)

61 
	`fio_muãx_up
(&
Êd
->
lock
);

62 
	`u¶ìp
(1000);

63 
	`fio_muãx_down
(&
Êd
->
lock
);

64 *
ªåy
 = 1;

67  
ff
;

68 
	}
}

70 
	$fio_fûñock_öô
()

72 
i
;

74 
Êd
 = 
	`smÆloc
((*fld));

75 i‡(!
Êd
)

78 
	`INIT_FLIST_HEAD
(&
Êd
->
li°
);

79 
	`INIT_FLIST_HEAD
(&
Êd
->
‰ì_li°
);

81 i‡(
	`__fio_muãx_öô
(&
Êd
->
lock
, 
FIO_MUTEX_UNLOCKED
))

82 
îr
;

84 
i
 = 0; i < 
MAX_FILELOCKS
; i++) {

85 
fio_fûñock
 *
ff
 = &
Êd
->
ffs
[
i
];

87 i‡(
	`__fio_muãx_öô
(&
ff
->
lock
, 
FIO_MUTEX_UNLOCKED
))

88 
îr
;

89 
	`Êi°_add_èû
(&
ff
->
li°
, &
Êd
->
‰ì_li°
);

93 
îr
:

94 
	`fio_fûñock_exô
();

96 
	}
}

98 
	$fio_fûñock_exô
()

100 i‡(!
Êd
)

103 
	`as£π
(
	`Êi°_em±y
(&
Êd
->
li°
));

104 
	`__fio_muãx_ªmove
(&
Êd
->
lock
);

106 !
	`Êi°_em±y
(&
Êd
->
‰ì_li°
)) {

107 
fio_fûñock
 *
ff
;

109 
ff
 = 
	`Êi°_fú°_íåy
(&
Êd
->
‰ì_li°
, 
fio_fûñock
, 
li°
);

111 
	`Êi°_dñ_öô
(&
ff
->
li°
);

112 
	`__fio_muãx_ªmove
(&
ff
->
lock
);

115 
	`s‰ì
(
Êd
);

116 
Êd
 = 
NULL
;

117 
	}
}

119 
fio_fûñock
 *
	$fio_hash_föd
(
uöt32_t
 
hash
)

121 
Êi°_hód
 *
íåy
;

122 
fio_fûñock
 *
ff
;

124 
	`Êi°_f‹_óch
(
íåy
, &
Êd
->
li°
) {

125 
ff
 = 
	`Êi°_íåy
(
íåy
, 
fio_fûñock
, 
li°
);

126 i‡(
ff
->
hash
 == hash)

127  
ff
;

130  
NULL
;

131 
	}
}

133 
fio_fûñock
 *
	$fio_hash_gë
(
uöt32_t
 
hash
, 
åylock
)

135 
fio_fûñock
 *
ff
;

137 
ff
 = 
	`fio_hash_föd
(
hash
);

138 i‡(!
ff
) {

139 
ªåy
 = 0;

141 
ff
 = 
	`gë_fûñock
(
åylock
, &
ªåy
);

142 i‡(!
ff
)

143  
NULL
;

150 i‡(
ªåy
) {

151 
fio_fûñock
 *
__ff
;

153 
__ff
 = 
	`fio_hash_föd
(
hash
);

154 i‡(
__ff
) {

155 
	`put_fûñock
(
ff
);

156  
__ff
;

160 
ff
->
hash
 = hash;

161 
ff
->
ª„ªn˚s
 = 0;

162 
	`Êi°_add
(&
ff
->
li°
, &
Êd
->list);

165  
ff
;

166 
	}
}

168 
boﬁ
 
	$__fio_lock_fûe
(c⁄° *
‚ame
, 
åylock
)

170 
fio_fûñock
 *
ff
;

171 
uöt32_t
 
hash
;

173 
hash
 = 
	`jhash
(
‚ame
, 
	`°æí
(fname), 0);

175 
	`fio_muãx_down
(&
Êd
->
lock
);

176 
ff
 = 
	`fio_hash_gë
(
hash
, 
åylock
);

177 i‡(
ff
)

178 
ff
->
ª„ªn˚s
++;

179 
	`fio_muãx_up
(&
Êd
->
lock
);

181 i‡(!
ff
) {

182 
	`as£π
(!
åylock
);

183  
åue
;

186 i‡(!
åylock
) {

187 
	`fio_muãx_down
(&
ff
->
lock
);

188  
Ál£
;

191 i‡(!
	`fio_muãx_down_åylock
(&
ff
->
lock
))

192  
Ál£
;

194 
	`fio_muãx_down
(&
Êd
->
lock
);

200 i‡(
ff
->
ª„ªn˚s
 != 1) {

201 
ff
->
ª„ªn˚s
--;

202 
ff
 = 
NULL
;

205 
	`fio_muãx_up
(&
Êd
->
lock
);

207 i‡(
ff
) {

208 
	`fio_muãx_down
(&
ff
->
lock
);

209  
Ál£
;

212  
åue
;

213 
	}
}

215 
boﬁ
 
	$fio_åylock_fûe
(c⁄° *
‚ame
)

217  
	`__fio_lock_fûe
(
‚ame
, 1);

218 
	}
}

220 
	$fio_lock_fûe
(c⁄° *
‚ame
)

222 
	`__fio_lock_fûe
(
‚ame
, 0);

223 
	}
}

225 
	$fio_u∆ock_fûe
(c⁄° *
‚ame
)

227 
fio_fûñock
 *
ff
;

228 
uöt32_t
 
hash
;

230 
hash
 = 
	`jhash
(
‚ame
, 
	`°æí
(fname), 0);

232 
	`fio_muãx_down
(&
Êd
->
lock
);

234 
ff
 = 
	`fio_hash_föd
(
hash
);

235 i‡(
ff
) {

236 
ªfs
 = --
ff
->
ª„ªn˚s
;

237 
	`fio_muãx_up
(&
ff
->
lock
);

238 i‡(!
ªfs
) {

239 
	`Êi°_dñ_öô
(&
ff
->
li°
);

240 
	`put_fûñock
(
ff
);

243 
	`log_îr
("fio: fileÇot found for unlocking\n");

245 
	`fio_muãx_up
(&
Êd
->
lock
);

246 
	}
}

	@/home/ysjin/Desktop/fio/fio/filelock.h

1 #i‚de‡
FIO_LOCK_FILE_H


2 
	#FIO_LOCK_FILE_H


	)

4 
	~"lib/ty≥s.h
"

6 
fio_lock_fûe
(const *);

7 
boﬁ
 
fio_åylock_fûe
(const *);

8 
fio_u∆ock_fûe
(const *);

10 
fio_fûñock_öô
();

11 
fio_fûñock_exô
();

	@/home/ysjin/Desktop/fio/fio/filesetup.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°rög.h
>

4 
	~<as£π.h
>

5 
	~<dúít.h
>

6 
	~<libgí.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/mm™.h
>

9 
	~<sys/ty≥s.h
>

11 
	~"fio.h
"

12 
	~"smÆloc.h
"

13 
	~"fûehash.h
"

14 
	~"›ti⁄s.h
"

15 
	~"os/os.h
"

16 
	~"hash.h
"

17 
	~"lib/axm≠.h
"

19 #ifde‡
CONFIG_LINUX_FALLOCATE


20 
	~<löux/ÁŒoc.h
>

23 
FLIST_HEAD
(
fûíame_li°
);

28 
	sfûe_«me
 {

29 
Êi°_hód
 
	mli°
;

30 *
	mfûíame
;

33 
ölöe
 
	$˛ór_îr‹
(
thªad_d©a
 *
td
)

35 
td
->
îr‹
 = 0;

36 
td
->
vîr‹
[0] = '\0';

37 
	}
}

39 
	$«tive_ÁŒoˇã
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

41 
boﬁ
 
suc˚ss
;

43 
suc˚ss
 = 
	`fio_ÁŒoˇã
(
f
, 0, f->
ªÆ_fûe_size
);

44 
	`d¥öt
(
FD_FILE
, "native fallocate of file %s size %llu was "

45 "%ssuc˚ssful\n", 
f
->
fûe_«me
,

46 (Ë
f
->
ªÆ_fûe_size
,

47 !
suc˚ss
 ? "un": "");

49 i‡(
suc˚ss
)

50  
Ál£
;

52 i‡(
î∫o
 =
ENOSYS
)

53 
	`d¥öt
(
FD_FILE
, "native fallocate isÇot implemented\n");

55  
åue
;

56 
	}
}

58 
	$ÁŒoˇã_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

60 i‡(
td
->
o
.
fûl_devi˚
)

63 
td
->
o
.
ÁŒoˇã_mode
) {

64 
FIO_FALLOCATE_NATIVE
:

65 
	`«tive_ÁŒoˇã
(
td
, 
f
);

67 
FIO_FALLOCATE_NONE
:

69 #ifde‡
CONFIG_POSIX_FALLOCATE


70 
FIO_FALLOCATE_POSIX
: {

71 
r
;

73 
	`d¥öt
(
FD_FILE
, "posix_fallocate file %s size %llu\n",

74 
f
->
fûe_«me
,

75 (Ë
f
->
ªÆ_fûe_size
);

77 
r
 = 
	`posix_ÁŒoˇã
(
f
->
fd
, 0, f->
ªÆ_fûe_size
);

78 i‡(
r
 > 0)

79 
	`log_îr
("fio:Öosix_ÁŒoˇã faûs: %s\n", 
	`°ªº‹
(
r
));

83 #ifde‡
CONFIG_LINUX_FALLOCATE


84 
FIO_FALLOCATE_KEEP_SIZE
: {

85 
r
;

87 
	`d¥öt
(
FD_FILE
, "fallocate(FALLOC_FL_KEEP_SIZE) "

88 "fûê%†sizê%Œu\n", 
f
->
fûe_«me
,

89 (Ë
f
->
ªÆ_fûe_size
);

91 
r
 = 
	`ÁŒoˇã
(
f
->
fd
, 
FALLOC_FL_KEEP_SIZE
, 0, f->
ªÆ_fûe_size
);

92 i‡(
r
 != 0)

93 
	`td_vîr‹
(
td
, 
î∫o
, "fallocate");

99 
	`log_îr
("fio: unknow¿ÁŒoˇã mode: %d\n", 
td
->
o
.
ÁŒoˇã_mode
);

100 
	`as£π
(0);

102 
	}
}

107 
	$exãnd_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

109 
√w_œyout
 = 0, 
u∆ök_fûe
 = 0, 
Êags
;

110 
À·
;

111 
bs
;

112 *
b
 = 
NULL
;

114 i‡(
ªad_⁄ly
) {

115 
	`log_îr
("fio:ÑefusingÉxtend of file dueÅoÑead-only\n");

124 i‡(
	`td_ªad
(
td
) ||

125 (
	`td_wrôe
(
td
Ë&&Åd->
o
.
ovîwrôe
 && !td->o.
fûe_≠≥nd
) ||

126 (
	`td_wrôe
(
td
Ë&& 
	`td_i€ngöe_Êagged
—d, 
FIO_NOEXTEND
)))

127 
√w_œyout
 = 1;

128 i‡(
	`td_wrôe
(
td
Ë&& !td->
o
.
ovîwrôe
 && !td->o.
fûe_≠≥nd
)

129 
u∆ök_fûe
 = 1;

131 i‡(
u∆ök_fûe
 || 
√w_œyout
) {

132 
ªt
;

134 
	`d¥öt
(
FD_FILE
, "œyouàu∆ök %s\n", 
f
->
fûe_«me
);

136 
ªt
 = 
	`td_io_u∆ök_fûe
(
td
, 
f
);

137 i‡(
ªt
 !0 &&Ñë !
ENOENT
) {

138 
	`td_vîr‹
(
td
, 
î∫o
, "unlink");

143 
Êags
 = 
O_WRONLY
;

144 i‡(
td
->
o
.
Ælow_¸óã
)

145 
Êags
 |
O_CREAT
;

146 i‡(
√w_œyout
)

147 
Êags
 |
O_TRUNC
;

149 #ifde‡
WIN32


150 
Êags
 |
_O_BINARY
;

153 
	`d¥öt
(
FD_FILE
, "›í fûê%s, fœg†%x\n", 
f
->
fûe_«me
, 
Êags
);

154 
f
->
fd
 = 
	`›í
(f->
fûe_«me
, 
Êags
, 0644);

155 i‡(
f
->
fd
 < 0) {

156 
îr
 = 
î∫o
;

158 i‡(
îr
 =
ENOENT
 && !
td
->
o
.
Ælow_¸óã
)

159 
	`log_îr
("fio: file creation disallowed by "

162 
	`td_vîr‹
(
td
, 
îr
, "open");

166 
	`ÁŒoˇã_fûe
(
td
, 
f
);

171 i‡(!
√w_œyout
)

172 
d⁄e
;

178 i‡(!
td
->
o
.
fûl_devi˚
) {

179 
	`d¥öt
(
FD_FILE
, "åunˇã fûê%s, sizê%Œu\n", 
f
->
fûe_«me
,

180 (Ë
f
->
ªÆ_fûe_size
);

181 i‡(
	`·runˇã
(
f
->
fd
, f->
ªÆ_fûe_size
) == -1) {

182 i‡(
î∫o
 !
EFBIG
) {

183 
	`td_vîr‹
(
td
, 
î∫o
, "ftruncate");

184 
îr
;

189 
À·
 = 
f
->
ªÆ_fûe_size
;

190 
bs
 = 
td
->
o
.
max_bs
[
DDIR_WRITE
];

191 i‡(
bs
 > 
À·
)

192 
bs
 = 
À·
;

194 
b
 = 
	`mÆloc
(
bs
);

195 i‡(!
b
) {

196 
	`td_vîr‹
(
td
, 
î∫o
, "malloc");

197 
îr
;

200 
À·
 && !
td
->
ãrmö©e
) {

201 
ssize_t
 
r
;

203 i‡(
bs
 > 
À·
)

204 
bs
 = 
À·
;

206 
	`fûl_io_buf„r
(
td
, 
b
, 
bs
, bs);

208 
r
 = 
	`wrôe
(
f
->
fd
, 
b
, 
bs
);

210 i‡(
r
 > 0) {

211 
À·
 -
r
;

214 i‡(
r
 < 0) {

215 
__e
 = 
î∫o
;

217 i‡(
__e
 =
ENOSPC
) {

218 i‡(
td
->
o
.
fûl_devi˚
)

220 
	`log_öfo
("fio: ENOSPC onÜaying out "

224 
	`td_vîr‹
(
td
, 
î∫o
, "write");

226 
	`td_vîr‹
(
td
, 
EIO
, "write");

232 i‡(
td
->
ãrmö©e
) {

233 
	`d¥öt
(
FD_FILE
, "ãrmö©êu∆ök %s\n", 
f
->
fûe_«me
);

234 
	`td_io_u∆ök_fûe
(
td
, 
f
);

235 } i‡(
td
->
o
.
¸óã_fsync
) {

236 i‡(
	`fsync
(
f
->
fd
) < 0) {

237 
	`td_vîr‹
(
td
, 
î∫o
, "fsync");

238 
îr
;

241 i‡(
td
->
o
.
fûl_devi˚
 && !
	`td_wrôe
(td)) {

242 
	`fio_fûe_˛ór_size_known
(
f
);

243 i‡(
	`td_io_gë_fûe_size
(
td
, 
f
))

244 
îr
;

245 i‡(
f
->
io_size
 > f->
ªÆ_fûe_size
)

246 
f
->
io_size
 = f->
ªÆ_fûe_size
;

249 
	`‰ì
(
b
);

250 
d⁄e
:

252 
îr
:

253 
	`˛o£
(
f
->
fd
);

254 
f
->
fd
 = -1;

255 i‡(
b
)

256 
	`‰ì
(
b
);

258 
	}
}

260 
boﬁ
 
	$¥e_ªad_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

262 
r
, 
did_›í
 = 0, 
ﬁd_run°©e
;

263 
À·
;

264 
bs
;

265 
boﬁ
 
ªt
 = 
åue
;

266 *
b
;

268 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_PIPEIO
) ||

269 
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
))

270  
åue
;

272 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
)

273  
åue
;

275 i‡(!
	`fio_fûe_›í
(
f
)) {

276 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

277 
	`log_îr
("fio: cannotÖre-read, failedÅo open file\n");

278  
Ál£
;

280 
did_›í
 = 1;

283 
ﬁd_run°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_PRE_READING
);

285 
À·
 = 
f
->
io_size
;

286 
bs
 = 
td
->
o
.
max_bs
[
DDIR_READ
];

287 i‡(
bs
 > 
À·
)

288 
bs
 = 
À·
;

290 
b
 = 
	`mÆloc
(
bs
);

291 i‡(!
b
) {

292 
	`td_vîr‹
(
td
, 
î∫o
, "malloc");

293 
ªt
 = 
Ál£
;

294 
îr‹
;

296 
	`mem£t
(
b
, 0, 
bs
);

298 i‡(
	`l£ek
(
f
->
fd
, f->
fûe_off£t
, 
SEEK_SET
) < 0) {

299 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

300 
	`log_îr
("fio: failedÅoÜseekÖre-read file\n");

301 
ªt
 = 
Ál£
;

302 
îr‹
;

305 
À·
 && !
td
->
ãrmö©e
) {

306 i‡(
bs
 > 
À·
)

307 
bs
 = 
À·
;

309 
r
 = 
	`ªad
(
f
->
fd
, 
b
, 
bs
);

311 i‡(
r
 =(Ë
bs
) {

312 
À·
 -
bs
;

315 
	`td_vîr‹
(
td
, 
EIO
, "pre_read");

320 
îr‹
:

321 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_run°©e
);

323 i‡(
did_›í
)

324 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

326 
	`‰ì
(
b
);

327  
ªt
;

328 
	}
}

330 
	$gë_ønd_fûe_size
(
thªad_d©a
 *
td
)

332 
ªt
, 
sized
;

333 
uöt64_t
 
‰™d_max
;

334 
r
;

336 
‰™d_max
 = 
	`ønd_max
(&
td
->
fûe_size_°©e
);

337 
r
 = 
	`__ønd
(&
td
->
fûe_size_°©e
);

338 
sized
 = 
td
->
o
.
fûe_size_high
 -Åd->o.
fûe_size_low
;

339 
ªt
 = (Ë((Ë
sized
 * (
r
 / (
‰™d_max
 + 1.0)));

340 
ªt
 +
td
->
o
.
fûe_size_low
;

341 
ªt
 -‘ë % 
td
->
o
.
rw_mö_bs
);

342  
ªt
;

343 
	}
}

345 
	$fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

347 
°©
 
°
;

349 i‡(
	`°©
(
f
->
fûe_«me
, &
°
) == -1) {

350 
	`td_vîr‹
(
td
, 
î∫o
, "fstat");

354 
f
->
ªÆ_fûe_size
 = 
°
.
°_size
;

356 
	}
}

358 
	$bdev_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

360 
byãs
 = 0;

361 
r
;

363 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

364 
	`log_îr
("fio: failed opening blockdev %s for size check\n",

365 
f
->
fûe_«me
);

369 
r
 = 
	`blockdev_size
(
f
, &
byãs
);

370 i‡(
r
) {

371 
	`td_vîr‹
(
td
, 
r
, "blockdev_size");

372 
îr
;

375 i‡(!
byãs
) {

376 
	`log_îr
("%s: zîÿsized block devi˚?\n", 
f
->
fûe_«me
);

377 
îr
;

380 
f
->
ªÆ_fûe_size
 = 
byãs
;

381 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

383 
îr
:

384 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

386 
	}
}

388 
	$ch¨_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

390 #ifde‡
FIO_HAVE_CHARDEV_SIZE


391 
byãs
 = 0;

392 
r
;

394 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

395 
	`log_îr
("fio: failed opening chardev %s for size check\n",

396 
f
->
fûe_«me
);

400 
r
 = 
	`ch¨dev_size
(
f
, &
byãs
);

401 i‡(
r
) {

402 
	`td_vîr‹
(
td
, 
r
, "chardev_size");

403 
îr
;

406 i‡(!
byãs
) {

407 
	`log_îr
("%s: zîÿsized ch¨ devi˚?\n", 
f
->
fûe_«me
);

408 
îr
;

411 
f
->
ªÆ_fûe_size
 = 
byãs
;

412 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

414 
îr
:

415 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

418 
f
->
ªÆ_fûe_size
 = -1ULL;

421 
	}
}

423 
	$gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

425 
ªt
 = 0;

427 i‡(
	`fio_fûe_size_known
(
f
))

430 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
)

431 
ªt
 = 
	`fûe_size
(
td
, 
f
);

432 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
)

433 
ªt
 = 
	`bdev_size
(
td
, 
f
);

434 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
)

435 
ªt
 = 
	`ch¨_size
(
td
, 
f
);

437 
f
->
ªÆ_fûe_size
 = -1;

438 
	`log_öfo
("%s: faûedÅÿgë fûêsizêo‡%s\n", 
td
->
o
.
«me
,

439 
f
->
fûe_«me
);

447 i‡(
ªt
)

448  
ªt
;

456 i‡(
f
->
fûe_off£t
 > f->
ªÆ_fûe_size
) {

457 
	`log_îr
("%s: off£àexãnd†íd (%Œu > %Œu)\n", 
td
->
o
.
«me
,

458 (Ë
f
->
fûe_off£t
,

459 (Ë
f
->
ªÆ_fûe_size
);

463 
	`fio_fûe_£t_size_known
(
f
);

465 
	}
}

467 
	$__fûe_övÆid©e_ˇche
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

468 
off
,

469 
Àn
)

471 
îrvÆ
 = 0, 
ªt
 = 0;

473 #ifde‡
CONFIG_ESX


477 i‡(
Àn
 == -1ULL)

478 
Àn
 = 
f
->
io_size
;

479 i‡(
off
 == -1ULL)

480 
off
 = 
f
->
fûe_off£t
;

482 i‡(
Àn
 =-1ULL || 
off
 == -1ULL)

485 i‡(
td
->
io_›s
->
övÆid©e
) {

486 
	`d¥öt
(
FD_IO
, "övÆid©ê%†ˇchê%s\n", 
td
->
io_›s
->
«me
,

487 
f
->
fûe_«me
);

488 
ªt
 = 
td
->
io_›s
->
	`övÆid©e
—d, 
f
);

489 i‡(
ªt
 < 0)

490 
îrvÆ
 = -
ªt
;

491 } i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
)) {

492 
	`d¥öt
(
FD_IO
, "invalidateÇot supported by ioengine %s\n",

493 
td
->
io_›s
->
«me
);

494 
ªt
 = 0;

495 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

496 
	`d¥öt
(
FD_IO
, "declare unneeded cache %s: %llu/%llu\n",

497 
f
->
fûe_«me
, 
off
, 
Àn
);

498 
ªt
 = 
	`posix_Ádvi£
(
f
->
fd
, 
off
, 
Àn
, 
POSIX_FADV_DONTNEED
);

499 i‡(
ªt
)

500 
îrvÆ
 = 
ªt
;

501 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

502 
ªåy_cou¡
 = 0;

504 
	`d¥öt
(
FD_IO
, "dr›Öagêˇchê%s\n", 
f
->
fûe_«me
);

505 
ªt
 = 
	`blockdev_övÆid©e_ˇche
(
f
);

506 
ªt
 < 0 && 
î∫o
 =
EAGAIN
 && 
ªåy_cou¡
++ < 25) {

513 
	`u¶ìp
(10000);

514 
ªt
 = 
	`blockdev_övÆid©e_ˇche
(
f
);

516 i‡(
ªt
 < 0 && 
î∫o
 =
EACCES
 && 
	`gëeuid
()) {

517 i‡(!
	`fio_did_w¨n
(
FIO_WARN_ROOT_FLUSH
)) {

518 
	`log_îr
("fio: onlyÑoot may flush block "

521 
ªt
 = 0;

523 i‡(
ªt
 < 0)

524 
îrvÆ
 = 
î∫o
;

525 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
 ||

526 
f
->
fûëy≥
 =
FIO_TYPE_PIPE
) {

527 
	`d¥öt
(
FD_IO
, "övÆid©ênŸ suµ‹ãd %s\n", 
f
->
fûe_«me
);

528 
ªt
 = 0;

537 i‡(
îrvÆ
)

538 
	`log_öfo
("fio: cache invalidation of %s failed: %s\n",

539 
f
->
fûe_«me
, 
	`°ªº‹
(
îrvÆ
));

543 
	}
}

545 
	$fûe_övÆid©e_ˇche
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

547 i‡(!
	`fio_fûe_›í
(
f
))

550  
	`__fûe_övÆid©e_ˇche
(
td
, 
f
, -1ULL, -1ULL);

551 
	}
}

553 
	$gíîic_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
, 
fio_fûe
 *
f
)

555 
ªt
 = 0;

557 
	`d¥öt
(
FD_FILE
, "fd clo£ %s\n", 
f
->
fûe_«me
);

559 
	`ªmove_fûe_hash
(
f
);

561 i‡(
	`˛o£
(
f
->
fd
) < 0)

562 
ªt
 = 
î∫o
;

564 
f
->
fd
 = -1;

566 i‡(
f
->
shadow_fd
 != -1) {

567 
	`˛o£
(
f
->
shadow_fd
);

568 
f
->
shadow_fd
 = -1;

571 
f
->
ígöe_pos
 = 0;

572  
ªt
;

573 
	}
}

575 
	$fûe_lookup_›í
(
fio_fûe
 *
f
, 
Êags
)

577 
fio_fûe
 *
__f
;

578 
‰om_hash
;

580 
__f
 = 
	`lookup_fûe_hash
(
f
->
fûe_«me
);

581 i‡(
__f
) {

582 
	`d¥öt
(
FD_FILE
, "found fûêö hash %s\n", 
f
->
fûe_«me
);

583 
f
->
lock
 = 
__f
->lock;

584 
‰om_hash
 = 1;

586 
	`d¥öt
(
FD_FILE
, "fûênŸ found i¿hash %s\n", 
f
->
fûe_«me
);

587 
‰om_hash
 = 0;

590 #ifde‡
WIN32


591 
Êags
 |
_O_BINARY
;

594 
f
->
fd
 = 
	`›í
(f->
fûe_«me
, 
Êags
, 0600);

595  
‰om_hash
;

596 
	}
}

598 
	$fûe_˛o£_shadow_fds
(
thªad_d©a
 *
td
)

600 
fio_fûe
 *
f
;

601 
num_˛o£d
 = 0;

602 
i
;

604 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

605 i‡(
f
->
shadow_fd
 == -1)

608 
	`˛o£
(
f
->
shadow_fd
);

609 
f
->
shadow_fd
 = -1;

610 
num_˛o£d
++;

613  
num_˛o£d
;

614 
	}
}

616 
	$gíîic_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

618 
is_°d
 = 0;

619 
Êags
 = 0;

620 
‰om_hash
 = 0;

622 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

624 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

625 i‡(
	`td_rw
(
td
)) {

626 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

629 
is_°d
 = 1;

634 i‡(
	`td_wrôe
(
td
))

635 
f_out
 = 
°dîr
;

638 i‡(
	`td_åim
(
td
))

639 
skù_Êags
;

640 i‡(
td
->
o
.
odúe˘
)

641 
Êags
 |
OS_O_DIRECT
;

642 i‡(
td
->
o
.
ﬂtomic
) {

643 i‡(!
FIO_O_ATOMIC
) {

644 
	`td_vîr‹
(
td
, 
EINVAL
, "OS doesÇot supportátomic IO");

647 
Êags
 |
OS_O_DIRECT
 | 
FIO_O_ATOMIC
;

649 i‡(
td
->
o
.
sync_io
)

650 
Êags
 |
O_SYNC
;

651 i‡(
td
->
o
.
¸óã_⁄_›í
 &&Åd->o.
Ælow_¸óã
)

652 
Êags
 |
O_CREAT
;

653 
skù_Êags
:

654 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
)

655 
Êags
 |
FIO_O_NOATIME
;

657 
›í_agaö
:

658 i‡(
	`td_wrôe
(
td
)) {

659 i‡(!
ªad_⁄ly
)

660 
Êags
 |
O_RDWR
;

662 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
 && 
td
->
o
.
Ælow_¸óã
)

663 
Êags
 |
O_CREAT
;

665 i‡(
is_°d
)

666 
f
->
fd
 = 
	`dup
(
STDOUT_FILENO
);

668 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
Êags
);

669 } i‡(
	`td_ªad
(
td
)) {

670 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
 && !
ªad_⁄ly
)

671 
Êags
 |
O_RDWR
;

673 
Êags
 |
O_RDONLY
;

675 i‡(
is_°d
)

676 
f
->
fd
 = 
	`dup
(
STDIN_FILENO
);

678 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
Êags
);

679 } i‡(
	`td_åim
(
td
)) {

680 
	`as£π
(!
	`td_rw
(
td
));

681 
Êags
 |
O_RDWR
;

682 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
Êags
);

685 i‡(
f
->
fd
 == -1) {

686 
buf
[
FIO_VERROR_SIZE
];

687 
__e
 = 
î∫o
;

689 i‡(
__e
 =
EPERM
 && (
Êags
 & 
FIO_O_NOATIME
)) {

690 
Êags
 &~
FIO_O_NOATIME
;

691 
›í_agaö
;

693 i‡(
__e
 =
EMFILE
 && 
	`fûe_˛o£_shadow_fds
(
td
))

694 
›í_agaö
;

696 
	`¢¥ötf
(
buf
, (buf), "›í(%s)", 
f
->
fûe_«me
);

698 i‡(
__e
 =
EINVAL
 && (
Êags
 & 
OS_O_DIRECT
)) {

699 
	`log_îr
("fio:ÜooksÜike your file system doesÇot " \

703 
	`td_vîr‹
(
td
, 
__e
, 
buf
);

707 i‡(!
‰om_hash
 && 
f
->
fd
 != -1) {

708 i‡(
	`add_fûe_hash
(
f
)) {

709 
fio_unu£d
 
ªt
;

719 i‡(
f
->
shadow_fd
 == -1)

720 
f
->
shadow_fd
 = f->
fd
;

726 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

728 
›í_agaö
;

733 
	}
}

739 
	$gíîic_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

741  
	`gë_fûe_size
(
td
, 
f
);

742 
	}
}

747 
	$gë_fûe_sizes
(
thªad_d©a
 *
td
)

749 
fio_fûe
 *
f
;

750 
i
;

751 
îr
 = 0;

753 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

754 
	`d¥öt
(
FD_FILE
, "gë fûêsizêf‹ %p/%d/%s\n", 
f
, 
i
,

755 
f
->
fûe_«me
);

757 i‡(
	`td_io_gë_fûe_size
(
td
, 
f
)) {

758 i‡(
td
->
îr‹
 !
ENOENT
) {

759 
	`log_îr
("%s\n", 
td
->
vîr‹
);

760 
îr
 = 1;

763 
	`˛ór_îr‹
(
td
);

773 i‡(
f
->
ªÆ_fûe_size
 =-1ULL && 
td
->
o
.
size
)

774 
f
->
ªÆ_fûe_size
 = 
td
->
o
.
size
 /Åd->o.
ƒ_fûes
;

777  
îr
;

778 
	}
}

780 
	sfio_mou¡
 {

781 
Êi°_hód
 
	mli°
;

782 c⁄° *
	mba£
;

783 
	m__ba£
[256];

784 
	mkey
;

790 
	$gë_fs_‰ì_cou¡s
(
thªad_d©a
 *
td
)

792 
Êi°_hód
 *
n
, *
tmp
;

793 
ªt
 = 0;

794 
fio_mou¡
 *
fm
;

795 
	`FLIST_HEAD
(
li°
);

796 
fio_fûe
 *
f
;

797 
i
;

799 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

800 
°©
 
sb
;

801 
buf
[256];

803 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
 || f->fûëy≥ =
FIO_TYPE_CHAR
) {

804 i‡(
f
->
ªÆ_fûe_size
 != -1ULL)

805 
ªt
 +
f
->
ªÆ_fûe_size
;

807 } i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
)

810 
buf
[255] = '\0';

811 
	`°∫˝y
(
buf
, 
f
->
fûe_«me
, 255);

813 i‡(
	`°©
(
buf
, &
sb
) < 0) {

814 i‡(
î∫o
 !
ENOENT
)

816 
	`°r˝y
(
buf
, ".");

817 i‡(
	`°©
(
buf
, &
sb
) < 0)

821 
fm
 = 
NULL
;

822 
	`Êi°_f‹_óch
(
n
, &
li°
) {

823 
fm
 = 
	`Êi°_íåy
(
n
, 
fio_mou¡
, 
li°
);

824 i‡(
fm
->
key
 =
sb
.
°_dev
)

827 
fm
 = 
NULL
;

830 i‡(
fm
)

833 
fm
 = 
	`ˇŒoc
(1, (*fm));

834 
	`°∫˝y
(
fm
->
__ba£
, 
buf
, (fm->__base) - 1);

835 
fm
->
ba£
 = 
	`ba£«me
(fm->
__ba£
);

836 
fm
->
key
 = 
sb
.
°_dev
;

837 
	`Êi°_add
(&
fm
->
li°
, &list);

840 
	`Êi°_f‹_óch_ß„
(
n
, 
tmp
, &
li°
) {

841 
sz
;

843 
fm
 = 
	`Êi°_íåy
(
n
, 
fio_mou¡
, 
li°
);

844 
	`Êi°_dñ
(&
fm
->
li°
);

846 
sz
 = 
	`gë_fs_‰ì_size
(
fm
->
ba£
);

847 i‡(
sz
 && sz != -1ULL)

848 
ªt
 +
sz
;

850 
	`‰ì
(
fm
);

853  
ªt
;

854 
	}
}

856 
uöt64_t
 
	$gë_°¨t_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

858 
thªad_›ti⁄s
 *
o
 = &
td
->o;

859 
Æign_bs
;

860 
off£t
;

862 i‡(
o
->
fûe_≠≥nd
 && 
f
->
fûëy≥
 =
FIO_TYPE_FILE
)

863  
f
->
ªÆ_fûe_size
;

865 i‡(
o
->
°¨t_off£t_≥r˚¡
 > 0) {

869 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
°¨t_off£t_Æign
)) {

870 
Æign_bs
 = 
o
->
°¨t_off£t_Æign
;

873 
Æign_bs
 = 
	`td_mö_bs
(
td
);

877 
off£t
 = (
f
->
ªÆ_fûe_size
 * 
o
->
°¨t_off£t_≥r˚¡
 / 100) +

878 (
td
->
subjob_numbî
 * 
o
->
off£t_ö¸emít
);

884 
off£t
 = (off£à/ 
Æign_bs
 + (offset %álign_bs != 0)) *álign_bs;

888 
off£t
 = 
o
->
°¨t_off£t
 +

889 
td
->
subjob_numbî
 * 
o
->
off£t_ö¸emít
;

892  
off£t
;

893 
	}
}

898 
	$£tup_fûes
(
thªad_d©a
 *
td
)

900 
tŸÆ_size
, 
exãnd_size
;

901 
thªad_›ti⁄s
 *
o
 = &
td
->o;

902 
fio_fûe
 *
f
;

903 
i
, 
ƒ_fs_exåa
 = 0;

904 
îr
 = 0, 
√ed_exãnd
;

905 
ﬁd_°©e
;

906 c⁄° 
bs
 = 
	`td_mö_bs
(
td
);

907 
uöt64_t
 
fs
 = 0;

909 
	`d¥öt
(
FD_FILE
, "setup files\n");

911 
ﬁd_°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_SETTING_UP
);

913 i‡(
o
->
ªad_iﬁog_fûe
)

914 
d⁄e
;

923 i‡(
td
->
io_›s
->
£tup
)

924 
îr
 = 
td
->
io_›s
->
	`£tup
(td);

926 
îr
 = 
	`gë_fûe_sizes
(
td
);

928 i‡(
îr
)

929 
îr_out
;

935 
tŸÆ_size
 = 0;

936 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

937 
f
->
fûío
 = 
i
;

938 i‡(
f
->
ªÆ_fûe_size
 == -1ULL)

939 
tŸÆ_size
 = -1ULL;

941 
tŸÆ_size
 +
f
->
ªÆ_fûe_size
;

944 i‡(
o
->
fûl_devi˚
)

945 
td
->
fûl_devi˚_size
 = 
	`gë_fs_‰ì_cou¡s
(td);

950 i‡((!
tŸÆ_size
 ||ÅŸÆ_sizê=-1ULLË&& !
o
->
size
 &&

951 !
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
Ë&& !
o
->
fûl_devi˚
 &&

952 !(
o
->
ƒ_fûes
 && (o->
fûe_size_low
 || o->
fûe_size_high
))) {

953 
	`log_îr
("%s: youÇìdÅÿ•ecify size=\n", 
o
->
«me
);

954 
	`td_vîr‹
(
td
, 
EINVAL
, "total_file_size");

955 
îr_out
;

962 i‡(!
o
->
fûe_size_low
 && o->
ƒ_fûes
) {

963 
uöt64_t
 
Æl_fs
;

965 
fs
 = 
o
->
size
 / o->
ƒ_fûes
;

966 
Æl_fs
 = 
fs
 * 
o
->
ƒ_fûes
;

968 i‡(
Æl_fs
 < 
o
->
size
)

969 
ƒ_fs_exåa
 = (
o
->
size
 - 
Æl_fs
Ë/ 
bs
;

977 
exãnd_size
 = 
tŸÆ_size
 = 0;

978 
√ed_exãnd
 = 0;

979 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

980 
f
->
fûe_off£t
 = 
	`gë_°¨t_off£t
(
td
, f);

990 i‡(!
o
->
fûe_size_low
) {

997 
f
->
io_size
 = 
fs
;

998 i‡(
ƒ_fs_exåa
) {

999 
ƒ_fs_exåa
--;

1000 
f
->
io_size
 +
bs
;

1011 i‡(!
f
->
io_size
) {

1012 i‡(
f
->
fûe_off£t
 > f->
ªÆ_fûe_size
)

1013 
îr_off£t
;

1014 
f
->
io_size
 = f->
ªÆ_fûe_size
 - f->
fûe_off£t
;

1015 i‡(!
f
->
io_size
)

1016 
	`log_öfo
("fio: file %s may be ignored\n",

1017 
f
->
fûe_«me
);

1019 } i‡(
f
->
ªÆ_fûe_size
 < 
o
->
fûe_size_low
 ||

1020 
f
->
ªÆ_fûe_size
 > 
o
->
fûe_size_high
) {

1021 i‡(
f
->
fûe_off£t
 > 
o
->
fûe_size_low
)

1022 
îr_off£t
;

1027 i‡(
o
->
fûe_size_low
 =o->
fûe_size_high
)

1028 
f
->
io_size
 = 
o
->
fûe_size_low
 - f->
fûe_off£t
;

1030 
f
->
io_size
 = 
	`gë_ønd_fûe_size
(
td
)

1031 - 
f
->
fûe_off£t
;

1034 
f
->
io_size
 = f->
ªÆ_fûe_size
 - f->
fûe_off£t
;

1036 i‡(
f
->
io_size
 == -1ULL)

1037 
tŸÆ_size
 = -1ULL;

1039 i‡(
o
->
size_≥r˚¡
 && o->size_percent != 100) {

1040 
uöt64_t
 
fûe_size
;

1042 
fûe_size
 = 
f
->
io_size
 + f->
fûe_off£t
;

1043 
f
->
io_size
 = (
fûe_size
 *

1044 
o
->
size_≥r˚¡
) / 100;

1045 i‡(
f
->
io_size
 > (
fûe_size
 - f->
fûe_off£t
))

1046 
f
->
io_size
 = 
fûe_size
 - f->
fûe_off£t
;

1048 
f
->
io_size
 -(f->io_sizê% 
	`td_mö_bs
(
td
));

1050 
tŸÆ_size
 +
f
->
io_size
;

1053 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
 &&

1054 (
f
->
io_size
 + f->
fûe_off£t
Ë> f->
ªÆ_fûe_size
 &&

1055 !
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
)) {

1056 i‡(!
o
->
¸óã_⁄_›í
) {

1057 
√ed_exãnd
++;

1058 
exãnd_size
 +(
f
->
io_size
 + f->
fûe_off£t
);

1059 
	`fio_fûe_£t_exãnd
(
f
);

1061 
f
->
ªÆ_fûe_size
 = f->
io_size
 + f->
fûe_off£t
;

1065 i‡(
td
->
o
.
block_îr‹_hi°
) {

1066 
Àn
;

1068 
	`as£π
(
td
->
o
.
ƒ_fûes
 == 1);

1069 
f
 = 
td
->
fûes
[0];

1070 
Àn
 = 
f
->
io_size
 / 
td
->
o
.
bs
[
DDIR_TRIM
];

1071 i‡(
Àn
 > 
MAX_NR_BLOCK_INFOS
 ||Üen <= 0) {

1072 
	`log_îr
("fio: cannot calculate block histogram with "

1074 
Àn
, 
MAX_NR_BLOCK_INFOS
);

1075 
	`td_vîr‹
(
td
, 
EINVAL
, "block_error_hist");

1076 
îr_out
;

1079 
td
->
ts
.
ƒ_block_öfos
 = 
Àn
;

1080 
i
 = 0; i < 
Àn
; i++)

1081 
td
->
ts
.
block_öfos
[
i
] =

1082 
	`BLOCK_INFO
(0, 
BLOCK_STATE_UNINIT
);

1084 
td
->
ts
.
ƒ_block_öfos
 = 0;

1086 i‡(!
o
->
size
 || (
tŸÆ_size
 && o->size >Åotal_size))

1087 
o
->
size
 = 
tŸÆ_size
;

1089 i‡(
o
->
size
 < 
	`td_mö_bs
(
td
)) {

1090 
	`log_îr
("fio: blocksizeÅooÜarge for data set\n");

1091 
îr_out
;

1099 i‡(
√ed_exãnd
) {

1100 
ãmp_°Æl_ts
 = 1;

1101 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

1102 
	`log_öfo
("%s: Laying out IO file%s (%u file%s / %s%lluMiB)\n",

1103 
o
->
«me
,

1104 
√ed_exãnd
 > 1 ? "s" : "",

1105 
√ed_exãnd
,

1106 
√ed_exãnd
 > 1 ? "s" : "",

1107 
√ed_exãnd
 > 1 ? "total " : "",

1108 
exãnd_size
 >> 20);

1111 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1112 
ﬁd_Àn
 = -1ULL, 
exãnd_Àn
 = -1ULL;

1114 i‡(!
	`fio_fûe_exãnd
(
f
))

1117 
	`as£π
(
f
->
fûëy≥
 =
FIO_TYPE_FILE
);

1118 
	`fio_fûe_˛ór_exãnd
(
f
);

1119 i‡(!
o
->
fûl_devi˚
) {

1120 
ﬁd_Àn
 = 
f
->
ªÆ_fûe_size
;

1121 
exãnd_Àn
 = 
f
->
io_size
 + f->
fûe_off£t
 -

1122 
ﬁd_Àn
;

1124 
f
->
ªÆ_fûe_size
 = (f->
io_size
 + f->
fûe_off£t
);

1125 
îr
 = 
	`exãnd_fûe
(
td
, 
f
);

1126 i‡(
îr
)

1129 
îr
 = 
	`__fûe_övÆid©e_ˇche
(
td
, 
f
, 
ﬁd_Àn
,

1130 
exãnd_Àn
);

1135 i‡(
f
->
fd
 != -1)

1136 
	`˛o£
(
f
->
fd
);

1138 
f
->
fd
 = -1;

1139 i‡(
îr
)

1142 
ãmp_°Æl_ts
 = 0;

1145 i‡(
îr
)

1146 
îr_out
;

1148 i‡(!
o
->
z⁄e_size
)

1149 
o
->
z⁄e_size
 = o->
size
;

1155 i‡(!
o
->
ªad_iﬁog_fûe
) {

1156 i‡(
o
->
io_size
)

1157 
td
->
tŸÆ_io_size
 = 
o
->
io_size
 * o->
lo›s
;

1159 
td
->
tŸÆ_io_size
 = 
o
->
size
 * o->
lo›s
;

1162 
d⁄e
:

1163 i‡(
o
->
¸óã_⁄ly
)

1164 
td
->
d⁄e
 = 1;

1166 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

1168 
îr_off£t
:

1169 
	`log_îr
("%s: youÇìdÅÿ•ecify vÆid off£t=\n", 
o
->
«me
);

1170 
îr_out
:

1171 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

1173 
	}
}

1175 
boﬁ
 
	$¥e_ªad_fûes
(
thªad_d©a
 *
td
)

1177 
fio_fûe
 *
f
;

1178 
i
;

1180 
	`d¥öt
(
FD_FILE
, "pre_read files\n");

1182 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1183 i‡(!
	`¥e_ªad_fûe
(
td
, 
f
))

1184  
Ál£
;

1187  
åue
;

1188 
	}
}

1190 
	$__öô_ønd_di°ributi⁄
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1192 
ønge_size
, 
£ed
;

1193 
ƒ™ges
;

1194 
uöt64_t
 
fsize
;

1196 
ønge_size
 = 
	`mö
(
td
->
o
.
mö_bs
[
DDIR_READ
],Åd->o.mö_bs[
DDIR_WRITE
]);

1197 
fsize
 = 
	`mö
(
f
->
ªÆ_fûe_size
, f->
io_size
);

1199 
ƒ™ges
 = (
fsize
 + 
ønge_size
 - 1) /Ñange_size;

1201 
£ed
 = 
	`jhash
(
f
->
fûe_«me
, 
	`°æí
(f->fûe_«me), 0Ë* 
td
->
thªad_numbî
;

1202 i‡(!
td
->
o
.
ønd_ª≥©abÀ
)

1203 
£ed
 = 
td
->
ønd_£eds
[4];

1205 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
)

1206 
	`zùf_öô
(&
f
->
zùf
, 
ƒ™ges
, 
td
->
o
.
zùf_thëa
.
u
.f, 
£ed
);

1207 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
)

1208 
	`∑ªto_öô
(&
f
->
zùf
, 
ƒ™ges
, 
td
->
o
.
∑ªto_h
.
u
.f, 
£ed
);

1209 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_GAUSS
)

1210 
	`gauss_öô
(&
f
->
gauss
, 
ƒ™ges
, 
td
->
o
.
gauss_dev
.
u
.f, 
£ed
);

1211 
	}
}

1213 
boﬁ
 
	$öô_ønd_di°ributi⁄
(
thªad_d©a
 *
td
)

1215 
fio_fûe
 *
f
;

1216 
i
;

1217 
°©e
;

1219 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_RANDOM
)

1220  
Ál£
;

1222 
°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_SETTING_UP
);

1224 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1225 
	`__öô_ønd_di°ributi⁄
(
td
, 
f
);

1227 
	`td_ª°‹e_run°©e
(
td
, 
°©e
);

1228  
åue
;

1229 
	}
}

1236 
	$check_ønd_gí_limôs
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

1237 
uöt64_t
 
blocks
)

1239 i‡(
blocks
 <
FRAND32_MAX
)

1241 i‡(
td
->
o
.
øndom_gíî©‹
 !
FIO_RAND_GEN_TAUSWORTHE
)

1249 
	`log_öfo
("fio: file %sÉxceeds 32-bitÅauswortheÑandom generator.\n",

1250 
f
->
fûe_«me
);

1252 i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
øndom_gíî©‹
)) {

1253 
	`log_öfo
("fio: SwitchingÅoÅausworthe64. UseÅhe "

1256 
td
->
o
.
øndom_gíî©‹
 = 
FIO_RAND_GEN_TAUSWORTHE64
;

1263 
	`log_öfo
("fio: UseÅheÑandom_generator= optionÅo switchÅoÜfsr or "

1266 
	}
}

1268 
boﬁ
 
	$öô_øndom_m≠
(
thªad_d©a
 *
td
)

1270 
blocks
;

1271 
fio_fûe
 *
f
;

1272 
i
;

1274 i‡(
	`öô_ønd_di°ributi⁄
(
td
))

1275  
åue
;

1276 i‡(!
	`td_øndom
(
td
))

1277  
åue
;

1279 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1280 
uöt64_t
 
fsize
 = 
	`mö
(
f
->
ªÆ_fûe_size
, f->
io_size
);

1282 
blocks
 = 
fsize
 / (Ë
td
->
o
.
rw_mö_bs
;

1284 i‡(
	`check_ønd_gí_limôs
(
td
, 
f
, 
blocks
))

1285  
Ál£
;

1287 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_LFSR
) {

1288 
£ed
;

1290 
£ed
 = 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
];

1292 i‡(!
	`lf§_öô
(&
f
->
lf§
, 
blocks
, 
£ed
, 0)) {

1293 
	`fio_fûe_£t_lf§
(
f
);

1296 } i‡(!
td
->
o
.
n‹™domm≠
) {

1297 
f
->
io_axm≠
 = 
	`axm≠_√w
(
blocks
);

1298 i‡(
f
->
io_axm≠
) {

1299 
	`fio_fûe_£t_axm≠
(
f
);

1302 } i‡(
td
->
o
.
n‹™domm≠
)

1305 i‡(!
td
->
o
.
so·øndomm≠
) {

1306 
	`log_îr
("fio: failedállocatingÑandom map. IfÑunning"

1310  
Ál£
;

1313 
	`log_öfo
("fio: file %s failedállocatingÑandom map. Running "

1314 "job wôhout.\n", 
f
->
fûe_«me
);

1317  
åue
;

1318 
	}
}

1320 
	$˛o£_fûes
(
thªad_d©a
 *
td
)

1322 
fio_fûe
 *
f
;

1323 
i
;

1325 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1326 i‡(
	`fio_fûe_›í
(
f
))

1327 
	`td_io_˛o£_fûe
(
td
, 
f
);

1329 
	}
}

1331 
	$˛o£_™d_‰ì_fûes
(
thªad_d©a
 *
td
)

1333 
fio_fûe
 *
f
;

1334 
i
;

1335 
boﬁ
 
u£_‰ì
 = 
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOFILEHASH
);

1337 
	`d¥öt
(
FD_FILE
, "close files\n");

1339 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1340 i‡(
td
->
o
.
u∆ök
 && 
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

1341 
	`d¥öt
(
FD_FILE
, "‰ì u∆ök %s\n", 
f
->
fûe_«me
);

1342 
	`td_io_u∆ök_fûe
(
td
, 
f
);

1345 i‡(
	`fio_fûe_›í
(
f
))

1346 
	`td_io_˛o£_fûe
(
td
, 
f
);

1348 
	`ªmove_fûe_hash
(
f
);

1350 i‡(
td
->
o
.
u∆ök
 && 
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

1351 
	`d¥öt
(
FD_FILE
, "‰ì u∆ök %s\n", 
f
->
fûe_«me
);

1352 
	`td_io_u∆ök_fûe
(
td
, 
f
);

1355 i‡(
u£_‰ì
)

1356 
	`‰ì
(
f
->
fûe_«me
);

1358 
	`s‰ì
(
f
->
fûe_«me
);

1359 
f
->
fûe_«me
 = 
NULL
;

1360 i‡(
	`fio_fûe_axm≠
(
f
)) {

1361 
	`axm≠_‰ì
(
f
->
io_axm≠
);

1362 
f
->
io_axm≠
 = 
NULL
;

1364 i‡(
u£_‰ì
)

1365 
	`‰ì
(
f
);

1367 
	`s‰ì
(
f
);

1370 
td
->
o
.
fûíame
 = 
NULL
;

1371 
	`‰ì
(
td
->
fûes
);

1372 
	`‰ì
(
td
->
fûe_locks
);

1373 
td
->
fûes_ödex
 = 0;

1374 
td
->
fûes
 = 
NULL
;

1375 
td
->
fûe_locks
 = 
NULL
;

1376 
td
->
o
.
fûe_lock_mode
 = 
FILE_LOCK_NONE
;

1377 
td
->
o
.
ƒ_fûes
 = 0;

1378 
	}
}

1380 
	$gë_fûe_ty≥
(
fio_fûe
 *
f
)

1382 
°©
 
sb
;

1384 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-"))

1385 
f
->
fûëy≥
 = 
FIO_TYPE_PIPE
;

1387 
f
->
fûëy≥
 = 
FIO_TYPE_FILE
;

1389 #ifde‡
WIN32


1392 i‡(
	`°∫cmp
(
f
->
fûe_«me
, "\\\\.\\", 4) == 0)

1393 
f
->
fûëy≥
 = 
FIO_TYPE_BLOCK
;

1396 i‡(!
	`°©
(
f
->
fûe_«me
, &
sb
)) {

1397 i‡(
	`S_ISBLK
(
sb
.
°_mode
))

1398 
f
->
fûëy≥
 = 
FIO_TYPE_BLOCK
;

1399 i‡(
	`S_ISCHR
(
sb
.
°_mode
))

1400 
f
->
fûëy≥
 = 
FIO_TYPE_CHAR
;

1401 i‡(
	`S_ISFIFO
(
sb
.
°_mode
))

1402 
f
->
fûëy≥
 = 
FIO_TYPE_PIPE
;

1404 
	}
}

1406 
boﬁ
 
	$__is_Æªady_Æloˇãd
(c⁄° *
‚ame
, 
boﬁ
 
£t
)

1408 
Êi°_hód
 *
íåy
;

1409 
boﬁ
 
ªt
;

1411 
ªt
 = 
	`fûe_bloom_exi°s
(
‚ame
, 
£t
);

1412 i‡(!
ªt
)

1413  
ªt
;

1415 
	`Êi°_f‹_óch
(
íåy
, &
fûíame_li°
) {

1416 
fûe_«me
 *
‚
;

1418 
‚
 = 
	`Êi°_íåy
(
íåy
, 
fûe_«me
, 
li°
);

1420 i‡(!
	`°rcmp
(
‚
->
fûíame
, 
‚ame
))

1421  
åue
;

1424  
Ál£
;

1425 
	}
}

1427 
boﬁ
 
	$is_Æªady_Æloˇãd
(c⁄° *
‚ame
)

1429 
boﬁ
 
ªt
;

1431 
	`fio_fûe_hash_lock
();

1432 
ªt
 = 
	`__is_Æªady_Æloˇãd
(
‚ame
, 
Ál£
);

1433 
	`fio_fûe_hash_u∆ock
();

1435  
ªt
;

1436 
	}
}

1438 
	$£t_Æªady_Æloˇãd
(c⁄° *
‚ame
)

1440 
fûe_«me
 *
‚
;

1442 
‚
 = 
	`mÆloc
((
fûe_«me
));

1443 
‚
->
fûíame
 = 
	`°rdup
(
‚ame
);

1445 
	`fio_fûe_hash_lock
();

1446 i‡(!
	`__is_Æªady_Æloˇãd
(
‚ame
, 
åue
)) {

1447 
	`Êi°_add_èû
(&
‚
->
li°
, &
fûíame_li°
);

1448 
‚
 = 
NULL
;

1450 
	`fio_fûe_hash_u∆ock
();

1452 i‡(
‚
) {

1453 
	`‰ì
(
‚
->
fûíame
);

1454 
	`‰ì
(
‚
);

1456 
	}
}

1458 
	$‰ì_Æªady_Æloˇãd
()

1460 
Êi°_hód
 *
íåy
, *
tmp
;

1461 
fûe_«me
 *
‚
;

1463 i‡(
	`Êi°_em±y
(&
fûíame_li°
))

1466 
	`fio_fûe_hash_lock
();

1467 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
fûíame_li°
) {

1468 
‚
 = 
	`Êi°_íåy
(
íåy
, 
fûe_«me
, 
li°
);

1469 
	`‰ì
(
‚
->
fûíame
);

1470 
	`Êi°_dñ
(&
‚
->
li°
);

1471 
	`‰ì
(
‚
);

1474 
	`fio_fûe_hash_u∆ock
();

1475 
	}
}

1477 
fio_fûe
 *
	$Æloc_√w_fûe
(
thªad_d©a
 *
td
)

1479 
fio_fûe
 *
f
;

1481 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOFILEHASH
))

1482 
f
 = 
	`ˇŒoc
(1, (*f));

1484 
f
 = 
	`sˇŒoc
(1, (*f));

1485 i‡(!
f
) {

1486 
	`as£π
(0);

1487  
NULL
;

1490 
f
->
fd
 = -1;

1491 
f
->
shadow_fd
 = -1;

1492 
	`fio_fûe_ª£t
(
td
, 
f
);

1493  
f
;

1494 
	}
}

1496 
boﬁ
 
	$exi°s_™d_nŸ_ªgfûe
(c⁄° *
fûíame
)

1498 
°©
 
sb
;

1500 i‡(
	`l°©
(
fûíame
, &
sb
) == -1)

1501  
Ál£
;

1503 #i‚de‡
WIN32


1504 i‡(
	`S_ISREG
(
sb
.
°_mode
))

1505  
Ál£
;

1509 i‡(
	`S_ISREG
(
sb
.
°_mode
Ë&& 
	`°∫cmp
(
fûíame
, "\\\\.\\", 4) != 0)

1510  
Ál£
;

1513  
åue
;

1514 
	}
}

1516 
boﬁ
 
	$¸óã_w‹k_dús
(
thªad_d©a
 *
td
, c⁄° *
‚ame
)

1518 
∑th
[
PATH_MAX
];

1519 *
°¨t
, *
íd
;

1521 i‡(
td
->
o
.
dúe˘‹y
) {

1522 
	`¢¥ötf
(
∑th
, 
PATH_MAX
, "%s%c%s", 
td
->
o
.
dúe˘‹y
,

1523 
FIO_OS_PATH_SEPARATOR
, 
‚ame
);

1524 
°¨t
 = 
	`°r°r
(
∑th
, 
‚ame
);

1526 
	`¢¥ötf
(
∑th
, 
PATH_MAX
, "%s", 
‚ame
);

1527 
°¨t
 = 
∑th
;

1530 
íd
 = 
°¨t
;

1531 (
íd
 = 
	`°rchr
”nd, 
FIO_OS_PATH_SEPARATOR
)Ë!
NULL
) {

1532 i‡(
íd
 =
°¨t
)

1534 *
íd
 = '\0';

1535 
î∫o
 = 0;

1536 #ifde‡
CONFIG_HAVE_MKDIR_TWO


1537 i‡(
	`mkdú
(
∑th
, 0600Ë&& 
î∫o
 !
EEXIST
) {

1539 i‡(
	`mkdú
(
∑th
Ë&& 
î∫o
 !
EEXIST
) {

1541 
	`log_îr
("fio: failedÅo create dir (%s): %d\n",

1542 
°¨t
, 
î∫o
);

1543  
Ál£
;

1545 *
íd
 = 
FIO_OS_PATH_SEPARATOR
;

1546 
íd
++;

1548 
td
->
Êags
 |
TD_F_DIRS_CREATED
;

1549  
åue
;

1550 
	}
}

1552 
	$add_fûe
(
thªad_d©a
 *
td
, c⁄° *
‚ame
, 
numjob
, 
öc
)

1554 
cur_fûes
 = 
td
->
fûes_ödex
;

1555 
fûe_«me
[
PATH_MAX
];

1556 
fio_fûe
 *
f
;

1557 
Àn
 = 0;

1559 
	`d¥öt
(
FD_FILE
, "add fûê%s\n", 
‚ame
);

1561 i‡(
td
->
o
.
dúe˘‹y
)

1562 
Àn
 = 
	`£t_«me_idx
(
fûe_«me
, 
PATH_MAX
, 
td
->
o
.
dúe˘‹y
, 
numjob
,

1563 
td
->
o
.
unique_fûíame
);

1565 
	`•rötf
(
fûe_«me
 + 
Àn
, "%s", 
‚ame
);

1567 i‡(
	`°rchr
(
‚ame
, 
FIO_OS_PATH_SEPARATOR
) &&

1568 !(
td
->
Êags
 & 
TD_F_DIRS_CREATED
) &&

1569 !
	`¸óã_w‹k_dús
(
td
, 
‚ame
))

1573 i‡(
numjob
 && 
	`is_Æªady_Æloˇãd
(
fûe_«me
) &&

1574 !
	`exi°s_™d_nŸ_ªgfûe
(
‚ame
))

1577 
f
 = 
	`Æloc_√w_fûe
(
td
);

1579 i‡(
td
->
fûes_size
 <td->
fûes_ödex
) {

1580 
√w_size
 = 
td
->
o
.
ƒ_fûes
 + 1;

1582 
	`d¥öt
(
FD_FILE
, "ªsizêfûê¨øyÅÿ%d fûes\n", 
√w_size
);

1584 
td
->
fûes
 = 
	`ªÆloc
—d->fûes, 
√w_size
 * (
f
));

1585 i‡(
td
->
fûes
 =
NULL
) {

1586 
	`log_îr
("fio:Ñealloc OOM\n");

1587 
	`as£π
(0);

1589 i‡(
td
->
o
.
fûe_lock_mode
 !
FILE_LOCK_NONE
) {

1590 
td
->
fûe_locks
 = 
	`ªÆloc
—d->fûe_locks, 
√w_size
);

1591 i‡(!
td
->
fûe_locks
) {

1592 
	`log_îr
("fio:Ñealloc OOM\n");

1593 
	`as£π
(0);

1595 
td
->
fûe_locks
[
cur_fûes
] = 
FILE_LOCK_NONE
;

1597 
td
->
fûes_size
 = 
√w_size
;

1599 
td
->
fûes
[
cur_fûes
] = 
f
;

1600 
f
->
fûío
 = 
cur_fûes
;

1605 i‡(
td
->
io_›s
 && 
	`td_i€ngöe_Êagged
—d, 
FIO_DISKLESSIO
))

1606 
f
->
ªÆ_fûe_size
 = -1ULL;

1608 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOFILEHASH
))

1609 
f
->
fûe_«me
 = 
	`°rdup
(file_name);

1611 
f
->
fûe_«me
 = 
	`smÆloc_°rdup
(file_name);

1612 i‡(!
f
->
fûe_«me
)

1613 
	`as£π
(0);

1615 
	`gë_fûe_ty≥
(
f
);

1617 
td
->
o
.
fûe_lock_mode
) {

1618 
FILE_LOCK_NONE
:

1620 
FILE_LOCK_READWRITE
:

1621 
f
->
rwlock
 = 
	`fio_rwlock_öô
();

1623 
FILE_LOCK_EXCLUSIVE
:

1624 
f
->
lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

1627 
	`log_îr
("fio: unknow¿lock mode: %d\n", 
td
->
o
.
fûe_lock_mode
);

1628 
	`as£π
(0);

1631 
td
->
fûes_ödex
++;

1633 i‡(
td
->
o
.
numjobs
 > 1)

1634 
	`£t_Æªady_Æloˇãd
(
fûe_«me
);

1636 i‡(
öc
)

1637 
td
->
o
.
ƒ_fûes
++;

1639 
	`d¥öt
(
FD_FILE
, "fûê%∞\"%s\"áddedáà%d\n", 
f
, f->
fûe_«me
,

1640 
cur_fûes
);

1642  
cur_fûes
;

1643 
	}
}

1645 
	$add_fûe_ex˛usive
(
thªad_d©a
 *
td
, c⁄° *
‚ame
)

1647 
fio_fûe
 *
f
;

1648 
i
;

1650 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1651 i‡(!
	`°rcmp
(
f
->
fûe_«me
, 
‚ame
))

1652  
i
;

1655  
	`add_fûe
(
td
, 
‚ame
, 0, 1);

1656 
	}
}

1658 
	$gë_fûe
(
fio_fûe
 *
f
)

1660 
	`d¥öt
(
FD_FILE
, "gë fûê%s,Ñef=%d\n", 
f
->
fûe_«me
, f->
ª„ªn˚s
);

1661 
	`as£π
(
	`fio_fûe_›í
(
f
));

1662 
f
->
ª„ªn˚s
++;

1663 
	}
}

1665 
	$put_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1667 
f_ªt
 = 0, 
ªt
 = 0;

1669 
	`d¥öt
(
FD_FILE
, "puàfûê%s,Ñef=%d\n", 
f
->
fûe_«me
, f->
ª„ªn˚s
);

1671 i‡(!
	`fio_fûe_›í
(
f
)) {

1672 
	`as£π
(
f
->
fd
 == -1);

1676 
	`as£π
(
f
->
ª„ªn˚s
);

1677 i‡(--
f
->
ª„ªn˚s
)

1680 i‡(
	`should_fsync
(
td
Ë&&Åd->
o
.
fsync_⁄_˛o£
) {

1681 
f_ªt
 = 
	`fsync
(
f
->
fd
);

1682 i‡(
f_ªt
 < 0)

1683 
f_ªt
 = 
î∫o
;

1686 i‡(
td
->
io_›s
->
˛o£_fûe
)

1687 
ªt
 = 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

1689 i‡(!
ªt
)

1690 
ªt
 = 
f_ªt
;

1692 
td
->
ƒ_›í_fûes
--;

1693 
	`fio_fûe_˛ór_›í
(
f
);

1694 
	`as£π
(
f
->
fd
 == -1);

1695  
ªt
;

1696 
	}
}

1698 
	$lock_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
)

1700 i‡(!
f
->
lock
 || 
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_NONE
)

1703 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_READWRITE
) {

1704 i‡(
ddú
 =
DDIR_READ
)

1705 
	`fio_rwlock_ªad
(
f
->
rwlock
);

1707 
	`fio_rwlock_wrôe
(
f
->
rwlock
);

1708 } i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_EXCLUSIVE
)

1709 
	`fio_muãx_down
(
f
->
lock
);

1711 
td
->
fûe_locks
[
f
->
fûío
] =Åd->
o
.
fûe_lock_mode
;

1712 
	}
}

1714 
	$u∆ock_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1716 i‡(!
f
->
lock
 || 
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_NONE
)

1719 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_READWRITE
)

1720 
	`fio_rwlock_u∆ock
(
f
->
rwlock
);

1721 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_EXCLUSIVE
)

1722 
	`fio_muãx_up
(
f
->
lock
);

1724 
td
->
fûe_locks
[
f
->
fûío
] = 
FILE_LOCK_NONE
;

1725 
	}
}

1727 
	$u∆ock_fûe_Æl
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1729 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_NONE
 || !td->
fûe_locks
)

1731 i‡(
td
->
fûe_locks
[
f
->
fûío
] !
FILE_LOCK_NONE
)

1732 
	`u∆ock_fûe
(
td
, 
f
);

1733 
	}
}

1735 
boﬁ
 
	$ªcur£_dú
(
thªad_d©a
 *
td
, c⁄° *
dú«me
)

1737 
dúít
 *
dú
;

1738 
boﬁ
 
ªt
 = 
Ál£
;

1739 
DIR
 *
D
;

1741 
D
 = 
	`›ídú
(
dú«me
);

1742 i‡(!
D
) {

1743 
buf
[
FIO_VERROR_SIZE
];

1745 
	`¢¥ötf
(
buf
, 
FIO_VERROR_SIZE
, "›ídú(%s)", 
dú«me
);

1746 
	`td_vîr‹
(
td
, 
î∫o
, 
buf
);

1747  
åue
;

1750 (
dú
 = 
	`ªaddú
(
D
)Ë!
NULL
) {

1751 
fuŒ_∑th
[
PATH_MAX
];

1752 
°©
 
sb
;

1754 i‡(!
	`°rcmp
(
dú
->
d_«me
, ".") || !strcmp(dir->d_name, ".."))

1757 
	`•rötf
(
fuŒ_∑th
, "%s%c%s", 
dú«me
, 
FIO_OS_PATH_SEPARATOR
, 
dú
->
d_«me
);

1759 i‡(
	`l°©
(
fuŒ_∑th
, &
sb
) == -1) {

1760 i‡(
î∫o
 !
ENOENT
) {

1761 
	`td_vîr‹
(
td
, 
î∫o
, "stat");

1762 
ªt
 = 
åue
;

1767 i‡(
	`S_ISREG
(
sb
.
°_mode
)) {

1768 
	`add_fûe
(
td
, 
fuŒ_∑th
, 0, 1);

1771 i‡(!
	`S_ISDIR
(
sb
.
°_mode
))

1774 
ªt
 = 
	`ªcur£_dú
(
td
, 
fuŒ_∑th
);

1775 i‡(
ªt
)

1779 
	`˛o£dú
(
D
);

1780  
ªt
;

1781 
	}
}

1783 
	$add_dú_fûes
(
thªad_d©a
 *
td
, c⁄° *
∑th
)

1785 
ªt
 = 
	`ªcur£_dú
(
td
, 
∑th
);

1787 i‡(!
ªt
)

1788 
	`log_öfo
("fio: o≥ndúádded %d fûes\n", 
td
->
o
.
ƒ_fûes
);

1790  
ªt
;

1791 
	}
}

1793 
	$dup_fûes
(
thªad_d©a
 *
td
, thªad_d©®*
‹g
)

1795 
fio_fûe
 *
f
;

1796 
i
;

1798 
	`d¥öt
(
FD_FILE
, "du∞fûes: %d\n", 
‹g
->
fûes_ödex
);

1800 i‡(!
‹g
->
fûes
)

1803 
td
->
fûes
 = 
	`mÆloc
(
‹g
->
fûes_ödex
 * (
f
));

1805 i‡(
td
->
o
.
fûe_lock_mode
 !
FILE_LOCK_NONE
)

1806 
td
->
fûe_locks
 = 
	`mÆloc
(
‹g
->
fûes_ödex
);

1808 
	`f‹_óch_fûe
(
‹g
, 
f
, 
i
) {

1809 
fio_fûe
 *
__f
;

1811 
__f
 = 
	`Æloc_√w_fûe
(
td
);

1813 i‡(
f
->
fûe_«me
) {

1814 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOFILEHASH
))

1815 
__f
->
fûe_«me
 = 
	`°rdup
(
f
->file_name);

1817 
__f
->
fûe_«me
 = 
	`smÆloc_°rdup
(
f
->file_name);

1818 i‡(!
__f
->
fûe_«me
)

1819 
	`as£π
(0);

1821 
__f
->
fûëy≥
 = 
f
->filetype;

1824 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_EXCLUSIVE
)

1825 
__f
->
lock
 = 
f
->lock;

1826 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_READWRITE
)

1827 
__f
->
rwlock
 = 
f
->rwlock;

1829 
td
->
fûes
[
i
] = 
__f
;

1831 
	}
}

1836 
	$gë_fûío
(
thªad_d©a
 *
td
, c⁄° *
‚ame
)

1838 
fio_fûe
 *
f
;

1839 
i
;

1841 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1842 i‡(!
	`°rcmp
(
f
->
fûe_«me
, 
‚ame
))

1843  
i
;

1846 
	}
}

1851 
	$‰ì_ªÀa£_fûes
(
thªad_d©a
 *
td
)

1853 
	`˛o£_fûes
(
td
);

1854 
td
->
o
.
ƒ_fûes
 = 0;

1855 
td
->
o
.
›í_fûes
 = 0;

1856 
td
->
fûes_ödex
 = 0;

1857 
	}
}

1859 
	$fio_fûe_ª£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1861 
i
;

1863 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1864 
f
->
œ°_pos
[
i
] = f->
fûe_off£t
;

1865 
f
->
œ°_°¨t
[
i
] = -1ULL;

1868 i‡(
	`fio_fûe_axm≠
(
f
))

1869 
	`axm≠_ª£t
(
f
->
io_axm≠
);

1870 i‡(
	`fio_fûe_lf§
(
f
))

1871 
	`lf§_ª£t
(&
f
->
lf§
, 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
]);

1872 
	}
}

1874 
boﬁ
 
	$fio_fûes_d⁄e
(
thªad_d©a
 *
td
)

1876 
fio_fûe
 *
f
;

1877 
i
;

1879 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1880 i‡(!
	`fio_fûe_d⁄e
(
f
))

1881  
Ál£
;

1883  
åue
;

1884 
	}
}

1887 
	$fûe£tup_mem_‰ì
()

1889 
	`‰ì_Æªady_Æloˇãd
();

1890 
	}
}

1895 
	$fio_£t_dúe˘io
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1897 #ifde‡
FIO_OS_DIRECTIO


1898 
ªt
 = 
	`fio_£t_odúe˘
(
f
);

1900 i‡(
ªt
) {

1901 
	`td_vîr‹
(
td
, 
ªt
, "fio_set_directio");

1902 #i‡
	`deföed
(
__sun__
)

1903 i‡(
ªt
 =
ENOTTY
) {

1904 
	`log_îr
("fio: doing directIOÅo RAW devices or ZFSÇot supported\n");

1906 
	`log_îr
("fio:Åhe file system doesÇot seemÅo support direct IO\n");

1909 
	`log_îr
("fio:Åhe file system doesÇot seemÅo support direct IO\n");

1916 
	`log_îr
("fio: direct IO isÇot supported onÅhis host operating system\n");

1919 
	}
}

	@/home/ysjin/Desktop/fio/fio/fio.c

24 
	~<uni°d.h
>

25 
	~<loˇÀ.h
>

26 
	~<time.h
>

28 
	~"fio.h
"

29 
	~"smÆloc.h
"

31 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

33 
ªt
 = 1;

35 
	`compûëime_as£π
(
TD_NR
 <
TD_ENG_FLAG_SHIFT
, "TD_ENG_FLAG_SHIFT");

37 i‡(
	`öôülize_fio
(
ívp
))

40 #i‡!
	`deföed
(
CONFIG_GETTIMEOFDAY
Ë&& !deföed(
CONFIG_CLOCK_GETTIME
)

44 i‡(
	`fio_£rvî_¸óã_sk_key
())

45 
d⁄e
;

47 i‡(
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
))

48 
d⁄e_key
;

54 
	`£tvbuf
(
°dout
, 
NULL
, 
_IOLBF
, 0);

56 
	`fio_time_öô
();

58 i‡(
ƒ_˛õ¡s
) {

59 
	`£t_gíesis_time
();

61 i‡(
	`fio_°¨t_Æl_˛õ¡s
())

62 
d⁄e_key
;

63 
ªt
 = 
	`fio_h™dÀ_˛õ¡s
(&
fio_˛õ¡_›s
);

65 
ªt
 = 
	`fio_backíd
(
NULL
);

67 
d⁄e_key
:

68 
	`fio_£rvî_de°roy_sk_key
();

69 
d⁄e
:

70 
	`deöôülize_fio
();

71  
ªt
;

72 
	}
}

	@/home/ysjin/Desktop/fio/fio/fio.h

1 #i‚de‡
FIO_H


2 
	#FIO_H


	)

4 
	~<sched.h
>

5 
	~<limôs.h
>

6 
	~<±hªad.h
>

7 
	~<sys/time.h
>

8 
	~<sys/ªsour˚.h
>

9 
	~<î∫o.h
>

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<°rög.h
>

14 
	~<öây≥s.h
>

15 
	~<as£π.h
>

17 
	~"compûî/compûî.h
"

18 
	~"thªad_›ti⁄s.h
"

19 
	~"Êi°.h
"

20 
	~"fifo.h
"

21 
	~"¨ch/¨ch.h
"

22 
	~"os/os.h
"

23 
	~"muãx.h
"

24 
	~"log.h
"

25 
	~"debug.h
"

26 
	~"fûe.h
"

27 
	~"io_ddú.h
"

28 
	~"i€ngöes.h
"

29 
	~"iﬁog.h
"

30 
	~"hñ≥rs.h
"

31 
	~"›ti⁄s.h
"

32 
	~"¥ofûe.h
"

33 
	~"fio_time.h
"

34 
	~"gëtime.h
"

35 
	~"o¶ib/gë›t.h
"

36 
	~"lib/ønd.h
"

37 
	~"lib/rbåì.h
"

38 
	~"lib/num2°r.h
"

39 
	~"˛õ¡.h
"

40 
	~"£rvî.h
"

41 
	~"°©.h
"

42 
	~"Êow.h
"

43 
	~"io_u.h
"

44 
	~"io_u_queue.h
"

45 
	~"w‹kqueue.h
"

46 
	~"°ódy°©e.h
"

48 #ifde‡
CONFIG_SOLARISAIO


49 
	~<sys/asynch.h
>

52 #ifde‡
CONFIG_LIBNUMA


53 
	~<löux/mempﬁicy.h
>

54 
	~<numa.h
>

59 
	#MPOL_LOCAL
 
MPOL_MAX


	)

62 #ifde‡
CONFIG_CUDA


63 
	~<cuda.h
>

70 
	mRW_SEQ_SEQ
 = 0,

71 
	mRW_SEQ_IDENT
,

75 
	m__TD_F_VER_BACKLOG
 = 0,

76 
	m__TD_F_TRIM_BACKLOG
,

77 
	m__TD_F_READ_IOLOG
,

78 
	m__TD_F_REFILL_BUFFERS
,

79 
	m__TD_F_SCRAMBLE_BUFFERS
,

80 
	m__TD_F_VER_NONE
,

81 
	m__TD_F_PROFILE_OPS
,

82 
	m__TD_F_COMPRESS
,

83 
	m__TD_F_COMPRESS_LOG
,

84 
	m__TD_F_VSTATE_SAVED
,

85 
	m__TD_F_NEED_LOCK
,

86 
	m__TD_F_CHILD
,

87 
	m__TD_F_NO_PROGRESS
,

88 
	m__TD_F_REGROW_LOGS
,

89 
	m__TD_F_MMAP_KEEP
,

90 
	m__TD_F_DIRS_CREATED
,

91 
	m__TD_F_CHECK_RATE
,

92 
	m__TD_F_LAST
,

96 
	mTD_F_VER_BACKLOG
 = 1U << 
__TD_F_VER_BACKLOG
,

97 
	mTD_F_TRIM_BACKLOG
 = 1U << 
__TD_F_TRIM_BACKLOG
,

98 
	mTD_F_READ_IOLOG
 = 1U << 
__TD_F_READ_IOLOG
,

99 
	mTD_F_REFILL_BUFFERS
 = 1U << 
__TD_F_REFILL_BUFFERS
,

100 
	mTD_F_SCRAMBLE_BUFFERS
 = 1U << 
__TD_F_SCRAMBLE_BUFFERS
,

101 
	mTD_F_VER_NONE
 = 1U << 
__TD_F_VER_NONE
,

102 
	mTD_F_PROFILE_OPS
 = 1U << 
__TD_F_PROFILE_OPS
,

103 
	mTD_F_COMPRESS
 = 1U << 
__TD_F_COMPRESS
,

104 
	mTD_F_COMPRESS_LOG
 = 1U << 
__TD_F_COMPRESS_LOG
,

105 
	mTD_F_VSTATE_SAVED
 = 1U << 
__TD_F_VSTATE_SAVED
,

106 
	mTD_F_NEED_LOCK
 = 1U << 
__TD_F_NEED_LOCK
,

107 
	mTD_F_CHILD
 = 1U << 
__TD_F_CHILD
,

108 
	mTD_F_NO_PROGRESS
 = 1U << 
__TD_F_NO_PROGRESS
,

109 
	mTD_F_REGROW_LOGS
 = 1U << 
__TD_F_REGROW_LOGS
,

110 
	mTD_F_MMAP_KEEP
 = 1U << 
__TD_F_MMAP_KEEP
,

111 
	mTD_F_DIRS_CREATED
 = 1U << 
__TD_F_DIRS_CREATED
,

112 
	mTD_F_CHECK_RATE
 = 1U << 
__TD_F_CHECK_RATE
,

116 
	mFIO_RAND_BS_OFF
 = 0,

117 
	mFIO_RAND_BS1_OFF
,

118 
	mFIO_RAND_BS2_OFF
,

119 
	mFIO_RAND_VER_OFF
,

120 
	mFIO_RAND_MIX_OFF
,

121 
	mFIO_RAND_FILE_OFF
,

122 
	mFIO_RAND_BLOCK_OFF
,

123 
	mFIO_RAND_FILE_SIZE_OFF
,

124 
	mFIO_RAND_TRIM_OFF
,

125 
	mFIO_RAND_BUF_OFF
,

126 
	mFIO_RAND_SEQ_RAND_READ_OFF
,

127 
	mFIO_RAND_SEQ_RAND_WRITE_OFF
,

128 
	mFIO_RAND_SEQ_RAND_TRIM_OFF
,

129 
	mFIO_RAND_START_DELAY
,

130 
	mFIO_DEDUPE_OFF
,

131 
	mFIO_RAND_POISSON_OFF
,

132 
	mFIO_RAND_ZONE_OFF
,

133 
	mFIO_RAND_POISSON2_OFF
,

134 
	mFIO_RAND_POISSON3_OFF
,

135 
	mFIO_RAND_NR_OFFS
,

139 
	mIO_MODE_INLINE
 = 0,

140 
	mIO_MODE_OFFLOAD
 = 1,

142 
	mRATE_PROCESS_LINEAR
 = 0,

143 
	mRATE_PROCESS_POISSON
 = 1,

147 
	mF_ADV_NONE
 = 0,

148 
	mF_ADV_TYPE
,

149 
	mF_ADV_RANDOM
,

150 
	mF_ADV_SEQUENTIAL
,

157 
sk_out_assign
(
sk_out
 *);

158 
sk_out_dr›
();

160 
	sz⁄e_•lô_ödex
 {

161 
uöt8_t
 
	msize_≥rc
;

162 
uöt8_t
 
	msize_≥rc_¥ev
;

163 
uöt64_t
 
	msize
;

164 
uöt64_t
 
	msize_¥ev
;

170 
	sthªad_d©a
 {

171 
Êi°_hód
 
	m›t_li°
;

172 
	mÊags
;

173 
thªad_›ti⁄s
 
	mo
;

174 *
	meo
;

175 
±hªad_t
 
	mthªad
;

176 
	mthªad_numbî
;

177 
	msubjob_numbî
;

178 
	mgroupid
;

179 
thªad_°©
 
ts
 
__©åibuã__
 ((
Æig√d
(8)));

181 
	m˛õ¡_ty≥
;

183 
io_log
 *
	m¶©_log
;

184 
io_log
 *
	m˛©_log
;

185 
io_log
 *
	m˛©_hi°_log
;

186 
io_log
 *
	mœt_log
;

187 
io_log
 *
	mbw_log
;

188 
io_log
 *
	mi›s_log
;

190 
w‹kqueue
 
	mlog_com¥ess_wq
;

192 
thªad_d©a
 *
	m∑ª¡
;

194 
uöt64_t
 
	m°©_io_byãs
[
DDIR_RWDIR_CNT
];

195 
time•ec
 
	mbw_ßm∂e_time
;

197 
uöt64_t
 
	m°©_io_blocks
[
DDIR_RWDIR_CNT
];

198 
time•ec
 
	mi›s_ßm∂e_time
;

200 vﬁ©ûê
	mupd©e_rußge
;

201 
fio_muãx
 *
	mrußge_£m
;

202 
rußge
 
	mru_°¨t
;

203 
rußge
 
	mru_íd
;

205 
fio_fûe
 **
	mfûes
;

206 *
	mfûe_locks
;

207 
	mfûes_size
;

208 
	mfûes_ödex
;

209 
	mƒ_›í_fûes
;

210 
	mƒ_d⁄e_fûes
;

212 
	m√xt_fûe
;

213 
‰™d_°©e
 
	m√xt_fûe_°©e
;

216 
zùf_°©e
 
	m√xt_fûe_zùf
;

217 
gauss_°©e
 
	m√xt_fûe_gauss
;

220 
	mzùf_thëa
;

221 
	m∑ªto_h
;

222 
	mgauss_dev
;

224 
	mîr‹
;

225 
	msig
;

226 
	md⁄e
;

227 
	m°›_io
;

228 
pid_t
 
	mpid
;

229 *
	m‹ig_buf„r
;

230 
size_t
 
	m‹ig_buf„r_size
;

231 vﬁ©ûê
	mrun°©e
;

232 vﬁ©ûê
boﬁ
 
	mãrmö©e
;

233 
boﬁ
 
	mœ°_was_sync
;

234 
fio_ddú
 
	mœ°_ddú
;

236 
	mmm≠fd
;

238 *
	miﬁog_buf
;

239 
FILE
 *
	miﬁog_f
;

241 
	mønd_£eds
[
FIO_RAND_NR_OFFS
];

243 
‰™d_°©e
 
	mb§™ge_°©e
[
DDIR_RWDIR_CNT
];

244 
‰™d_°©e
 
	mvîify_°©e
;

245 
‰™d_°©e
 
	måim_°©e
;

246 
‰™d_°©e
 
	mdñay_°©e
;

248 
‰™d_°©e
 
	mbuf_°©e
;

249 
‰™d_°©e
 
	mbuf_°©e_¥ev
;

250 
‰™d_°©e
 
	mdedu≥_°©e
;

251 
‰™d_°©e
 
	mz⁄e_°©e
;

253 
z⁄e_•lô_ödex
 **
	mz⁄e_°©e_ödex
;

255 
	mvîify_b©ch
;

256 
	måim_b©ch
;

258 
thªad_io_li°
 *
	mv°©e
;

260 
	mshm_id
;

266 
i€ngöe_›s
 *
	mio_›s
;

267 
	mio_›s_öô
;

272 *
	mio_›s_d©a
;

273 *
	mio_›s_dlh™dÀ
;

278 
	mcur_dïth
;

283 
	mio_u_queued
;

288 
	mio_u_ö_Êight
;

293 
io_u_rög
 
	mio_u_ªqueues
;

294 
io_u_queue
 
	mio_u_‰ìli°
;

295 
io_u_queue
 
	mio_u_Æl
;

296 
±hªad_muãx_t
 
	mio_u_lock
;

297 
±hªad_c⁄d_t
 
	m‰ì_c⁄d
;

302 
Êi°_hód
 
	mvîify_li°
;

303 
±hªad_t
 *
	mvîify_thªads
;

304 
	mƒ_vîify_thªads
;

305 
±hªad_c⁄d_t
 
	mvîify_c⁄d
;

306 
	mvîify_thªad_exô
;

311 
uöt64_t
 
	møã_bps
[
DDIR_RWDIR_CNT
];

312 
uöt64_t
 
	møã_√xt_io_time
[
DDIR_RWDIR_CNT
];

313 
	møã_byãs
[
DDIR_RWDIR_CNT
];

314 
	møã_blocks
[
DDIR_RWDIR_CNT
];

315 
	møã_io_issue_byãs
[
DDIR_RWDIR_CNT
];

316 
time•ec
 
	mœ°øã
[
DDIR_RWDIR_CNT
];

317 
öt64_t
 
	mœ°_u£c
[
DDIR_RWDIR_CNT
];

318 
‰™d_°©e
 
	mpoiss⁄_°©e
[
DDIR_RWDIR_CNT
];

323 
w‹kqueue
 
	mio_wq
;

325 
uöt64_t
 
	mtŸÆ_io_size
;

326 
uöt64_t
 
	mfûl_devi˚_size
;

331 
uöt64_t
 
	mio_issues
[
DDIR_RWDIR_CNT
];

332 
uöt64_t
 
	mio_issue_byãs
[
DDIR_RWDIR_CNT
];

333 
uöt64_t
 
	mlo›s
;

338 
uöt64_t
 
	mio_blocks
[
DDIR_RWDIR_CNT
];

339 
uöt64_t
 
	mthis_io_blocks
[
DDIR_RWDIR_CNT
];

340 
uöt64_t
 
	mio_byãs
[
DDIR_RWDIR_CNT
];

341 
uöt64_t
 
	mthis_io_byãs
[
DDIR_RWDIR_CNT
];

342 
uöt64_t
 
	mio_skù_byãs
;

343 
uöt64_t
 
	mz⁄e_byãs
;

344 
fio_muãx
 *
	mmuãx
;

345 
uöt64_t
 
	mbyãs_d⁄e
[
DDIR_RWDIR_CNT
];

350 
‰™d_°©e
 
	møndom_°©e
;

352 
time•ec
 
	m°¨t
;

353 
time•ec
 
	mïoch
;

354 
	munix_ïoch
;

355 
time•ec
 
	mœ°_issue
;

356 
	mtime_off£t
;

357 
time•ec
 
	mts_ˇche
;

358 
time•ec
 
	mãrmö©e_time
;

359 
	mts_ˇche_ƒ
;

360 
	mts_ˇche_mask
;

361 
boﬁ
 
	mømp_time_ovî
;

366 
time•ec
 
	mœãncy_ts
;

367 
	mœãncy_qd
;

368 
	mœãncy_qd_high
;

369 
	mœãncy_qd_low
;

370 
	mœãncy_Áûed
;

371 
uöt64_t
 
	mœãncy_ios
;

372 
	mœãncy_íd_run
;

377 
‰™d_°©e
 
	mrwmix_°©e
;

378 
	mrwmix_issues
;

379 
fio_ddú
 
	mrwmix_ddú
;

380 
	mddú_£q_ƒ
;

385 
‰™d_°©e
 
	m£q_ønd_°©e
[
DDIR_RWDIR_CNT
];

391 
rb_roŸ
 
	mio_hi°_åì
;

392 
Êi°_hód
 
	mio_hi°_li°
;

393 
	mio_hi°_Àn
;

398 
Êi°_hód
 
	mio_log_li°
;

403 
Êi°_hód
 
	måim_li°
;

404 
	måim_íåõs
;

406 
Êi°_hód
 
	m√xt_ønd_li°
;

411 
	mfûe_£rvi˚_ƒ
;

412 
	mfûe_£rvi˚_À·
;

413 
fio_fûe
 *
	mfûe_£rvi˚_fûe
;

415 
	msync_fûe_ønge_ƒ
;

420 
‰™d_°©e
 
	mfûe_size_°©e
;

425 
	mtŸÆ_îr_cou¡
;

426 
	mfú°_îr‹
;

428 
fio_Êow
 *
	mÊow
;

433 
¥of_io_›s
 
	m¥of_io_›s
;

434 *
	m¥of_d©a
;

436 *
	mpö√d_mem
;

438 
°ódy°©e_d©a
 
	mss
;

440 
	mvîr‹
[
FIO_VERROR_SIZE
];

442 #ifde‡
CONFIG_CUDA


446 
	mgpu_dev_˙t
;

447 
	mgpu_dev_id
;

448 
CUdevi˚
 
	mcu_dev
;

449 
CUc⁄ãxt
 
	mcu_˘x
;

450 
CUdevi˚±r
 
	mdev_mem_±r
;

459 
	mFIO_ETA_AUTO
,

460 
	mFIO_ETA_ALWAYS
,

461 
	mFIO_ETA_NEVER
,

464 
	#__td_vîr‹
(
td
, 
îr
, 
msg
, 
func
) \

466 
____e
 = (
îr
); \

467 i‡((
td
)->
îr‹
) \

469 (
td
)->
îr‹
 = 
____e
; \

470 i‡(!(
td
)->
fú°_îr‹
) \

471 
	`¢¥ötf
(
td
->
vîr‹
, —d->vîr‹), "fûe:%s:%d, func=%s,Éº‹=%s", 
__FILE__
, 
__LINE__
, (
func
), (
msg
)); \

472 } 0)

	)

475 
	#td_˛ór_îr‹
(
td
) do { \

476 (
td
)->
îr‹
 = 0; \

477 i‡((
td
)->
∑ª¡
) \

478 (
td
)->
∑ª¡
->
îr‹
 = 0; \

479 } 0)

	)

481 
	#td_vîr‹
(
td
, 
îr
, 
func
) do { \

482 
	`__td_vîr‹
((
td
), (
îr
), 
	`°ªº‹
(”º)), (
func
)); \

483 i‡((
td
)->
∑ª¡
) \

484 
	`__td_vîr‹
((
td
)->
∑ª¡
, (
îr
), 
	`°ªº‹
(”º)), (
func
)); \

485 } 0)

	)

487 
	#td_vmsg
(
td
, 
îr
, 
msg
, 
func
) do { \

488 
	`__td_vîr‹
((
td
), (
îr
), (
msg
), (
func
)); \

489 i‡((
td
)->
∑ª¡
) \

490 
	`__td_vîr‹
((
td
)->
∑ª¡
, (
îr
), (
msg
), (
func
)); \

491 } 0)

	)

493 
	#__fio_°rögify_1
(
x
Ë#x

	)

494 
	#__fio_°rögify
(
x
Ë
	`__fio_°rögify_1
(x)

	)

496 
exôÆl_⁄_ãrmö©e
;

497 
thªad_numbî
;

498 
°©_numbî
;

499 
shm_id
;

500 
groupid
;

501 
ouçut_f‹m©
;

502 
≠≥nd_ãr£_ouçut
;

503 
ãmp_°Æl_ts
;

504 
uöçå_t
 
∑ge_mask
, 
∑ge_size
;

505 
ªad_⁄ly
;

506 
ëa_¥öt
;

507 
ëa_√w_löe
;

508 
ëa_öãrvÆ_m£c
;

509 
d⁄e_£cs
;

510 
fio_gtod_ofÊﬂd
;

511 
fio_gtod_˝u
;

512 
fio_cs
 
fio_˛ock_sour˚
;

513 
fio_˛ock_sour˚_£t
;

514 
w¨nögs_Áèl
;

515 
ãr£_vîsi⁄
;

516 
is_backíd
;

517 
ƒ_˛õ¡s
;

518 
log_sy¶og
;

519 
°©us_öãrvÆ
;

520 c⁄° 
fio_vîsi⁄_°rög
[];

521 *
åiggî_fûe
;

522 *
åiggî_cmd
;

523 *
åiggî_ªmŸe_cmd
;

524 
åiggî_timeout
;

525 *
aux_∑th
;

527 
thªad_d©a
 *
thªads
;

529 
boﬁ
 
ëa_time_wôhö_¶ack
(
time
);

531 
ölöe
 
	$fio_ro_check
(c⁄° 
thªad_d©a
 *
td
, 
io_u
 *io_u)

533 
	`as£π
(!(
io_u
->
ddú
 =
DDIR_WRITE
 && !
	`td_wrôe
(
td
)));

534 
	}
}

536 
	#REAL_MAX_JOBS
 4096

	)

538 
ölöe
 
	$should_fsync
(
thªad_d©a
 *
td
)

540 i‡(
td
->
œ°_was_sync
)

542 i‡(
	`td_wrôe
(
td
Ë||Åd->
o
.
ovîride_sync
)

546 
	}
}

551 
__mu°_check
 
fio_öô_›ti⁄s
();

552 
__mu°_check
 
∑r£_›ti⁄s
(, **);

553 
∑r£_jobs_öi
(*, , , );

554 
∑r£_cmd_löe
(, **, );

555 
fio_backíd
(
sk_out
 *);

556 
ª£t_fio_°©e
();

557 
˛ór_io_°©e
(
thªad_d©a
 *, );

558 
fio_›ti⁄s_∑r£
(
thªad_d©a
 *, **, );

559 
fio_keyw‹ds_öô
();

560 
fio_keyw‹ds_exô
();

561 
fio_cmd_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

562 
fio_cmd_i€ngöe_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

563 
fio_fûl_deÁu…_›ti⁄s
(
thªad_d©a
 *);

564 
fio_show_›ti⁄_hñp
(const *);

565 
fio_›ti⁄s_£t_i€ngöe_›ts
(
›ti⁄
 *
l⁄g_›ti⁄s
, 
thªad_d©a
 *
td
);

566 
fio_›ti⁄s_dup_™d_öô
(
›ti⁄
 *);

567 
fio_›ti⁄s_mem_du≥
(
thªad_d©a
 *);

568 
td_fûl_ønd_£eds
(
thªad_d©a
 *);

569 
td_fûl_vîify_°©e_£ed
(
thªad_d©a
 *);

570 
add_job_›ts
(const **, );

571 
i€ngöe_lﬂd
(
thªad_d©a
 *);

572 
boﬁ
 
∑r£_dryrun
();

573 
fio_ru¬ög_‹_≥ndög_io_thªads
();

574 
fio_£t_fd_n⁄blockög
(, const *);

575 
sig_show_°©us
(
sig
);

576 
thªad_d©a
 *
gë_globÆ_›ti⁄s
();

578 
uöçå_t
 
∑ge_mask
;

579 
uöçå_t
 
∑ge_size
;

580 
öôülize_fio
(*
ívp
[]);

581 
deöôülize_fio
();

583 
	#FIO_GETOPT_JOB
 0x89000000

	)

584 
	#FIO_GETOPT_IOENGINE
 0x98000000

	)

585 
	#FIO_NR_OPTIONS
 (
FIO_MAX_OPTS
 + 128)

	)

590 
¥öt_thªad_°©us
();

591 
¥öt_°©us_öô
();

592 *
fio_uöt_to_kmg
(
vÆ
);

601 
	mTD_NOT_CREATED
 = 0,

602 
	mTD_CREATED
,

603 
	mTD_INITIALIZED
,

604 
	mTD_RAMP
,

605 
	mTD_SETTING_UP
,

606 
	mTD_RUNNING
,

607 
	mTD_PRE_READING
,

608 
	mTD_VERIFYING
,

609 
	mTD_FSYNCING
,

610 
	mTD_FINISHING
,

611 
	mTD_EXITED
,

612 
	mTD_REAPED
,

613 
	mTD_LAST
,

614 
	mTD_NR
,

617 
	#TD_ENG_FLAG_SHIFT
 17

	)

618 
	#TD_ENG_FLAG_MASK
 ((1U << 17Ë- 1)

	)

620 
ölöe
 
	$td_£t_i€ngöe_Êags
(
thªad_d©a
 *
td
)

622 
td
->
Êags
 = (~(
TD_ENG_FLAG_MASK
 << 
TD_ENG_FLAG_SHIFT
) &Åd->flags) |

623 (
td
->
io_›s
->
Êags
 << 
TD_ENG_FLAG_SHIFT
);

624 
	}
}

626 
ölöe
 
boﬁ
 
	$td_i€ngöe_Êagged
(
thªad_d©a
 *
td
,

627 
fio_i€ngöe_Êags
 
Êags
)

629  ((
td
->
Êags
 >> 
TD_ENG_FLAG_SHIFT
) & flags) != 0;

630 
	}
}

632 
td_£t_run°©e
(
thªad_d©a
 *, );

633 
td_bump_run°©e
(
thªad_d©a
 *, );

634 
td_ª°‹e_run°©e
(
thªad_d©a
 *, );

635 c⁄° *
run°©e_to_«me
(
run°©e
);

641 
	#FIO_REAP_TIMEOUT
 300

	)

643 
	#TERMINATE_ALL
 (-1U)

	)

644 
fio_ãrmö©e_thªads
();

645 
fio_m¨k_td_ãrmö©e
(
thªad_d©a
 *);

650 
__mu°_check
 
fio_pö_mem‹y
(
thªad_d©a
 *);

651 
fio_u≈ö_mem‹y
(
thªad_d©a
 *);

652 
__mu°_check
 
Æloˇã_io_mem
(
thªad_d©a
 *);

653 
‰ì_io_mem
(
thªad_d©a
 *);

654 
‰ì_thªads_shm
();

656 #ifde‡
FIO_INTERNAL


657 
	#PTR_ALIGN
(
±r
, 
mask
) \

658 (*Ë(((
uöçå_t
Ë(
±r
Ë+ (
mask
)Ë& ~(mask))

	)

664 
ª£t_Æl_°©s
(
thªad_d©a
 *);

666 
io_queue_evít
(
thªad_d©a
 *
td
, 
io_u
 *io_u, *
ªt
,

667 
fio_ddú
 
ddú
, 
uöt64_t
 *
byãs_issued
, 
‰om_vîify
,

668 
time•ec
 *
comp_time
);

673 
œt_èrgë_check
(
thªad_d©a
 *);

674 
œt_èrgë_öô
(
thªad_d©a
 *);

675 
œt_èrgë_ª£t
(
thªad_d©a
 *);

680 
	#f‹_óch_td
(
td
, 
i
) \

681 (
i
Ë0, (
td
Ë&
thªads
[0]; (iË< (Ë
thªad_numbî
; (i)++, (td)++)

	)

682 
	#f‹_óch_fûe
(
td
, 
f
, 
i
) \

683 i‡((
td
)->
fûes_ödex
) \

684 (
i
Ë0, (
f
Ë(
td
)->
fûes
[0]; \

685 (
i
Ë< (
td
)->
o
.
ƒ_fûes
 && ((
f
Ë—d)->
fûes
[i]Ë!
NULL
; \

686 (
i
)++)

	)

688 
	#fio_as£π
(
td
, 
c⁄d
) do { \

689 i‡(!(
c⁄d
)) { \

690 *
__foo
 = 
NULL
; \

691 
	`Ârötf
(
°dîr
, "fûe:%s:%d,ás£π %†Áûed\n", 
__FILE__
, 
__LINE__
, #cond); \

692 
	`td_£t_run°©e
((
td
), 
TD_EXITED
); \

693 (
td
)->
îr‹
 = 
EFAULT
; \

694 *
__foo
 = 0; \

696 } 0)

	)

698 
ölöe
 
boﬁ
 
	$fio_fûl_issue_time
(
thªad_d©a
 *
td
)

700 i‡(
td
->
o
.
ªad_iﬁog_fûe
 ||

701 !
td
->
o
.
dißbÀ_˛©
 || !td->o.
dißbÀ_¶©
 || !td->o.
dißbÀ_bw
)

702  
åue
;

704  
Ál£
;

705 
	}
}

707 
ölöe
 
boﬁ
 
	$›ti⁄_check_øã
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

709 
thªad_›ti⁄s
 *
o
 = &
td
->o;

714 i‡(
o
->
øã
[
ddú
] || o->
øãmö
[ddú] || o->
øã_i›s
[ddir] ||

715 
o
->
øã_i›s_mö
[
ddú
])

716  
åue
;

718  
Ál£
;

719 
	}
}

721 
ölöe
 
boﬁ
 
	$__should_check_øã
(
thªad_d©a
 *
td
,

722 
fio_ddú
 
ddú
)

724  (
td
->
Êags
 & 
TD_F_CHECK_RATE
) != 0;

725 
	}
}

727 
ölöe
 
boﬁ
 
	$should_check_øã
(
thªad_d©a
 *
td
)

729 i‡(
	`__should_check_øã
(
td
, 
DDIR_READ
Ë&&Åd->
byãs_d⁄e
[DDIR_READ])

730  
åue
;

731 i‡(
	`__should_check_øã
(
td
, 
DDIR_WRITE
Ë&&Åd->
byãs_d⁄e
[DDIR_WRITE])

732  
åue
;

733 i‡(
	`__should_check_øã
(
td
, 
DDIR_TRIM
Ë&&Åd->
byãs_d⁄e
[DDIR_TRIM])

734  
åue
;

736  
Ál£
;

737 
	}
}

739 
ölöe
 
	$td_max_bs
(
thªad_d©a
 *
td
)

741 
max_bs
;

743 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

744  
	`max
(
td
->
o
.
max_bs
[
DDIR_TRIM
], max_bs);

745 
	}
}

747 
ölöe
 
	$td_mö_bs
(
thªad_d©a
 *
td
)

749 
mö_bs
;

751 
mö_bs
 = 
	`mö
(
td
->
o
.mö_bs[
DDIR_READ
],Åd->o.mö_bs[
DDIR_WRITE
]);

752  
	`mö
(
td
->
o
.
mö_bs
[
DDIR_TRIM
], min_bs);

753 
	}
}

755 
ölöe
 
boﬁ
 
	$td_async_¥o˚ssög
(
thªad_d©a
 *
td
)

757  (
td
->
Êags
 & 
TD_F_NEED_LOCK
) != 0;

758 
	}
}

764 
ölöe
 
	$td_io_u_lock
(
thªad_d©a
 *
td
)

766 i‡(
	`td_async_¥o˚ssög
(
td
))

767 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

768 
	}
}

770 
ölöe
 
	$td_io_u_u∆ock
(
thªad_d©a
 *
td
)

772 i‡(
	`td_async_¥o˚ssög
(
td
))

773 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

774 
	}
}

776 
ölöe
 
	$td_io_u_‰ì_nŸify
(
thªad_d©a
 *
td
)

778 i‡(
	`td_async_¥o˚ssög
(
td
))

779 
	`±hªad_c⁄d_sig«l
(&
td
->
‰ì_c⁄d
);

780 
	}
}

782 
ölöe
 
	$td_Êags_˛ór
(
thªad_d©a
 *
td
, *
Êags
,

783 
vÆue
)

785 i‡(!
	`td_async_¥o˚ssög
(
td
))

786 *
Êags
 &~
vÆue
;

788 
	`__sync_„tch_™d_™d
(
Êags
, ~
vÆue
);

789 
	}
}

791 
ölöe
 
	$td_Êags_£t
(
thªad_d©a
 *
td
, *
Êags
,

792 
vÆue
)

794 i‡(!
	`td_async_¥o˚ssög
(
td
))

795 *
Êags
 |
vÆue
;

797 
	`__sync_„tch_™d_‹
(
Êags
, 
vÆue
);

798 
	}
}

800 c⁄° *
fio_gë_¨ch_°rög
();

801 c⁄° *
fio_gë_os_°rög
();

804 
	m__FIO_OUTPUT_TERSE
 = 0,

805 
	m__FIO_OUTPUT_JSON
 = 1,

806 
	m__FIO_OUTPUT_NORMAL
 = 2,

807 
	m__FIO_OUTPUT_JSON_PLUS
 = 3,

808 
	mFIO_OUTPUT_NR
 = 4,

810 
	mFIO_OUTPUT_TERSE
 = 1U << 
__FIO_OUTPUT_TERSE
,

811 
	mFIO_OUTPUT_JSON
 = 1U << 
__FIO_OUTPUT_JSON
,

812 
	mFIO_OUTPUT_NORMAL
 = 1U << 
__FIO_OUTPUT_NORMAL
,

813 
	mFIO_OUTPUT_JSON_PLUS
 = 1U << 
__FIO_OUTPUT_JSON_PLUS
,

817 
	mFIO_RAND_DIST_RANDOM
 = 0,

818 
	mFIO_RAND_DIST_ZIPF
,

819 
	mFIO_RAND_DIST_PARETO
,

820 
	mFIO_RAND_DIST_GAUSS
,

821 
	mFIO_RAND_DIST_ZONED
,

822 
	mFIO_RAND_DIST_ZONED_ABS
,

825 
	#FIO_DEF_ZIPF
 1.1

	)

826 
	#FIO_DEF_PARETO
 0.2

	)

829 
	mFIO_RAND_GEN_TAUSWORTHE
 = 0,

830 
	mFIO_RAND_GEN_LFSR
,

831 
	mFIO_RAND_GEN_TAUSWORTHE64
,

835 
	mFIO_CPUS_SHARED
 = 0,

836 
	mFIO_CPUS_SPLIT
,

839 
exec_åiggî
(const *);

840 
check_åiggî_fûe
();

	@/home/ysjin/Desktop/fio/fio/fio_time.h

1 #i‚de‡
FIO_TIME_H


2 
	#FIO_TIME_H


	)

4 
	~<time.h
>

5 
	~<sys/time.h
>

6 
	~"lib/ty≥s.h
"

8 
	gthªad_d©a
;

9 
uöt64_t
 
¡ime_sö˚
(c⁄° 
time•ec
 *, const timespec *);

10 
uöt64_t
 
¡ime_sö˚_now
(c⁄° 
time•ec
 *);

11 
uöt64_t
 
utime_sö˚
(c⁄° 
time•ec
 *, const timespec *);

12 
uöt64_t
 
utime_sö˚_now
(c⁄° 
time•ec
 *);

13 
uöt64_t
 
mtime_sö˚
(c⁄° 
time•ec
 *, const timespec *);

14 
uöt64_t
 
mtime_sö˚_now
(c⁄° 
time•ec
 *);

15 
uöt64_t
 
mtime_sö˚_tv
(c⁄° 
timevÆ
 *, const timeval *);

16 
uöt64_t
 
time_sö˚_now
(c⁄° 
time•ec
 *);

17 
uöt64_t
 
time_sö˚_gíesis
();

18 
uöt64_t
 
mtime_sö˚_gíesis
();

19 
uöt64_t
 
utime_sö˚_gíesis
();

20 
uöt64_t
 
u£c_•ö
();

21 
uöt64_t
 
u£c_¶ìp
(
thªad_d©a
 *, );

22 
fûl_°¨t_time
(
time•ec
 *);

23 
£t_gíesis_time
();

24 
boﬁ
 
ømp_time_ovî
(
thªad_d©a
 *);

25 
boﬁ
 
ö_ømp_time
(
thªad_d©a
 *);

26 
fio_time_öô
();

27 
time•ec_add_m£c
(
time•ec
 *, );

28 
£t_ïoch_time
(
thªad_d©a
 *, );

	@/home/ysjin/Desktop/fio/fio/flist.h

1 #i‚de‡
_LINUX_FLIST_H


2 
	#_LINUX_FLIST_H


	)

4 
	~<°dlib.h
>

5 
	~<°ddef.h
>

7 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

8 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

9 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

21 
	sÊi°_hód
 {

22 
Êi°_hód
 *
	m√xt
, *
	m¥ev
;

25 
	#FLIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

27 
	#FLIST_HEAD
(
«me
) \

28 
Êi°_hód
 
«me
 = 
	`FLIST_HEAD_INIT
“ame)

	)

30 
	#INIT_FLIST_HEAD
(
±r
) do { \

31 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

32 } 0)

	)

40 
ölöe
 
	$__Êi°_add
(
Êi°_hód
 *
√w_íåy
,

41 
Êi°_hód
 *
¥ev
,

42 
Êi°_hód
 *
√xt
)

44 
√xt
->
¥ev
 = 
√w_íåy
;

45 
√w_íåy
->
√xt
 =Çext;

46 
√w_íåy
->
¥ev
 =Örev;

47 
¥ev
->
√xt
 = 
√w_íåy
;

48 
	}
}

58 
ölöe
 
	$Êi°_add
(
Êi°_hód
 *
√w_íåy
,

59 
Êi°_hód
 *
hód
)

61 
	`__Êi°_add
(
√w_íåy
, 
hód
, hód->
√xt
);

62 
	}
}

64 
ölöe
 
	$Êi°_add_èû
(
Êi°_hód
 *
√w_íåy
,

65 
Êi°_hód
 *
hód
)

67 
	`__Êi°_add
(
√w_íåy
, 
hód
->
¥ev
, head);

68 
	}
}

77 
ölöe
 
	$__Êi°_dñ
(
Êi°_hód
 *
¥ev
,

78 
Êi°_hód
 * 
√xt
)

80 
√xt
->
¥ev
 =Örev;

81 
¥ev
->
√xt
 =Çext;

82 
	}
}

90 
ölöe
 
	$Êi°_dñ
(
Êi°_hód
 *
íåy
)

92 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

93 
íåy
->
√xt
 = 
NULL
;

94 
íåy
->
¥ev
 = 
NULL
;

95 
	}
}

101 
ölöe
 
	$Êi°_dñ_öô
(
Êi°_hód
 *
íåy
)

103 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

104 
	`INIT_FLIST_HEAD
(
íåy
);

105 
	}
}

111 
ölöe
 
	$Êi°_em±y
(c⁄° 
Êi°_hód
 *
hód
)

113  
hód
->
√xt
 == head;

114 
	}
}

116 
ölöe
 
	$__Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

117 
Êi°_hód
 *
¥ev
,

118 
Êi°_hód
 *
√xt
)

120 
Êi°_hód
 *
fú°
 = 
li°
->
√xt
;

121 
Êi°_hód
 *
œ°
 = 
li°
->
¥ev
;

123 
fú°
->
¥ev
 =Örev;

124 
¥ev
->
√xt
 = 
fú°
;

126 
œ°
->
√xt
 =Çext;

127 
√xt
->
¥ev
 = 
œ°
;

128 
	}
}

130 
ölöe
 
	$Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

131 
Êi°_hód
 *
hód
)

133 i‡(!
	`Êi°_em±y
(
li°
))

134 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

135 
	}
}

137 
ölöe
 
	$Êi°_•li˚_èû
(
Êi°_hód
 *
li°
,

138 
Êi°_hód
 *
hód
)

140 i‡(!
	`Êi°_em±y
(
li°
))

141 
	`__Êi°_•li˚
(
li°
, 
hód
->
¥ev
, head);

142 
	}
}

144 
ölöe
 
	$Êi°_•li˚_èû_öô
(
Êi°_hód
 *
li°
,

145 
Êi°_hód
 *
hód
)

147 i‡(!
	`Êi°_em±y
(
li°
)) {

148 
	`__Êi°_•li˚
(
li°
, 
hód
->
¥ev
, head);

149 
	`INIT_FLIST_HEAD
(
li°
);

151 
	}
}

153 
ölöe
 
	$Êi°_•li˚_öô
(
Êi°_hód
 *
li°
,

154 
Êi°_hód
 *
hód
)

156 i‡(!
	`Êi°_em±y
(
li°
)) {

157 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

158 
	`INIT_FLIST_HEAD
(
li°
);

160 
	}
}

168 
	#Êi°_íåy
(
±r
, 
ty≥
, 
membî
) \

169 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

171 
	#Êi°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

172 
	`Êi°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

174 
	#Êi°_œ°_íåy
(
±r
, 
ty≥
, 
membî
) \

175 
	`Êi°_íåy
((
±r
)->
¥ev
, 
ty≥
, 
membî
)

	)

182 
	#Êi°_f‹_óch
(
pos
, 
hód
) \

183 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

191 
	#Êi°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

192 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

193 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

195 
Êi°_s‹t
(*
¥iv
, 
Êi°_hód
 *
hód
,

196 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
, Êi°_hód *
b
));

	@/home/ysjin/Desktop/fio/fio/flow.c

1 
	~"fio.h
"

2 
	~"muãx.h
"

3 
	~"smÆloc.h
"

4 
	~"Êi°.h
"

6 
	sfio_Êow
 {

7 
	mªfs
;

8 
Êi°_hód
 
	mli°
;

9 
	mid
;

10 
	mÊow_cou¡î
;

13 
Êi°_hód
 *
	gÊow_li°
;

14 
fio_muãx
 *
	gÊow_lock
;

16 
	$Êow_thªshﬁd_ex˚eded
(
thªad_d©a
 *
td
)

18 
fio_Êow
 *
Êow
 = 
td
->flow;

19 
Êow_cou¡î
;

21 i‡(!
Êow
)

24 i‡(
td
->
o
.
Êow
 > 0)

25 
Êow_cou¡î
 = 
Êow
->flow_counter;

27 
Êow_cou¡î
 = -
Êow
->flow_counter;

29 i‡(
Êow_cou¡î
 > 
td
->
o
.
Êow_w©îm¨k
) {

30 i‡(
td
->
o
.
Êow_¶ìp
) {

31 
	`io_u_quõs˚
(
td
);

32 
	`u¶ìp
(
td
->
o
.
Êow_¶ìp
);

40 
Êow
->
Êow_cou¡î
 +
td
->
o
.flow;

42 
	}
}

44 
fio_Êow
 *
	$Êow_gë
(
id
)

46 
fio_Êow
 *
Êow
 = 
NULL
;

47 
Êi°_hód
 *
n
;

49 i‡(!
Êow_lock
)

50  
NULL
;

52 
	`fio_muãx_down
(
Êow_lock
);

54 
	`Êi°_f‹_óch
(
n
, 
Êow_li°
) {

55 
Êow
 = 
	`Êi°_íåy
(
n
, 
fio_Êow
, 
li°
);

56 i‡(
Êow
->
id
 == id)

59 
Êow
 = 
NULL
;

62 i‡(!
Êow
) {

63 
Êow
 = 
	`smÆloc
((*flow));

64 i‡(!
Êow
) {

65 
	`fio_muãx_up
(
Êow_lock
);

66  
NULL
;

68 
Êow
->
ªfs
 = 0;

69 
	`INIT_FLIST_HEAD
(&
Êow
->
li°
);

70 
Êow
->
id
 = id;

71 
Êow
->
Êow_cou¡î
 = 0;

73 
	`Êi°_add_èû
(&
Êow
->
li°
, 
Êow_li°
);

76 
Êow
->
ªfs
++;

77 
	`fio_muãx_up
(
Êow_lock
);

78  
Êow
;

79 
	}
}

81 
	$Êow_put
(
fio_Êow
 *
Êow
)

83 i‡(!
Êow_lock
)

86 
	`fio_muãx_down
(
Êow_lock
);

88 i‡(!--
Êow
->
ªfs
) {

89 
	`Êi°_dñ
(&
Êow
->
li°
);

90 
	`s‰ì
(
Êow
);

93 
	`fio_muãx_up
(
Êow_lock
);

94 
	}
}

96 
	$Êow_öô_job
(
thªad_d©a
 *
td
)

98 i‡(
td
->
o
.
Êow
)

99 
td
->
Êow
 = 
	`Êow_gë
—d->
o
.
Êow_id
);

100 
	}
}

102 
	$Êow_exô_job
(
thªad_d©a
 *
td
)

104 i‡(
td
->
Êow
) {

105 
	`Êow_put
(
td
->
Êow
);

106 
td
->
Êow
 = 
NULL
;

108 
	}
}

110 
	$Êow_öô
()

112 
Êow_li°
 = 
	`smÆloc
((*flow_list));

113 i‡(!
Êow_li°
) {

114 
	`log_îr
("fio: smallocÖoolÉxhausted\n");

118 
Êow_lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

119 i‡(!
Êow_lock
) {

120 
	`log_îr
("fio: failedÅoállocate flowÜock\n");

121 
	`s‰ì
(
Êow_li°
);

125 
	`INIT_FLIST_HEAD
(
Êow_li°
);

126 
	}
}

128 
	$Êow_exô
()

130 i‡(
Êow_lock
)

131 
	`fio_muãx_ªmove
(
Êow_lock
);

132 i‡(
Êow_li°
)

133 
	`s‰ì
(
Êow_li°
);

134 
	}
}

	@/home/ysjin/Desktop/fio/fio/flow.h

1 #i‚de‡
FIO_FLOW_H


2 
	#FIO_FLOW_H


	)

4 
Êow_thªshﬁd_ex˚eded
(
thªad_d©a
 *
td
);

5 
Êow_öô_job
(
thªad_d©a
 *
td
);

6 
Êow_exô_job
(
thªad_d©a
 *
td
);

8 
Êow_exô
();

9 
Êow_öô
();

	@/home/ysjin/Desktop/fio/fio/gclient.c

1 
	~<mÆloc.h
>

2 
	~<°rög.h
>

4 
	~<glib.h
>

5 
	~<ˇúo.h
>

6 
	~<gtk/gtk.h
>

8 
	~"fio.h
"

9 
	~"gfio.h
"

10 
	~"ghñ≥rs.h
"

11 
	~"g›ti⁄s.h
"

12 
	~"gîr‹.h
"

13 
	~"gøph.h
"

14 
	~"g˛õ¡.h
"

15 
	~"¥ötög.h
"

16 
	~"lib/pow2.h
"

18 
gfio_di•œy_ts
(
fio_˛õ¡
 *
˛õ¡
, 
thªad_°©
 *
ts
,

19 
group_run_°©s
 *
rs
);

21 
gboﬁón
 
	$ªsu…s_wödow_dñëe
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

23 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

25 
	`gtk_widgë_de°roy
(
w
);

26 
ge
->
ªsu…s_wödow
 = 
NULL
;

27 
ge
->
ªsu…s_nŸebook
 = 
NULL
;

28  
TRUE
;

29 
	}
}

31 
	$ªsu…s_˛o£
(
GtkWidgë
 *
w
, 
gpoöãr
 *
d©a
)

33 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

35 
	`gtk_widgë_de°roy
(
ge
->
ªsu…s_wödow
);

36 
	}
}

38 
	$ªsu…s_¥öt
(
GtkWidgë
 *
w
, 
gpoöãr
 *
d©a
)

40 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

42 
	`gfio_¥öt_ªsu…s
(
ge
);

43 
	}
}

45 
GtkA˘i⁄E¡ry
 
	gªsu…s_míu_ôems
[] = {

46 { "FûeMíuA˘i⁄", 
GTK_STOCK_FILE
, "Fûe", 
NULL
, NULL, NULL},

47 { "GøphMíuA˘i⁄", 
GTK_STOCK_FILE
, "Gøph", 
NULL
, NULL, NULL},

48 { "PrötFûe", 
GTK_STOCK_PRINT
, "Pröt", "<C⁄åﬁ>P", 
NULL
, 
G_CALLBACK
(
ªsu…s_¥öt
) },

49 { "Clo£Fûe", 
GTK_STOCK_CLOSE
, "Clo£", "<C⁄åﬁ>W", 
NULL
, 
G_CALLBACK
(
ªsu…s_˛o£
) },

51 
göt
 
	gªsu…s_nmíu_ôems
 = 
ARRAY_SIZE
(
ªsu…s_míu_ôems
);

53 c⁄° 
gch¨
 *
	gªsu…s_ui_°rög
 = " \
<ui> \
<menubarÇame=\"MainMenu\"> \
<menuÇame=\"FileMenu\"áction=\"FileMenuAction\"> \
<menuitemÇame=\"Print\"áction=\"PrintFile\" /> \
<menuitemÇame=\"Close\"áction=\"CloseFile\" /> \
</menu> \
<menuÇame=\"GraphMenu\"áction=\"GraphMenuAction\"> \
</menu>\
</menubar> \
</ui> \
";

66 
GtkWidgë
 *
	$gë_ªsu…s_míub¨
(
GtkWidgë
 *
wödow
, 
gui_íåy
 *
ge
)

68 
GtkA˘i⁄Group
 *
a˘i⁄_group
;

69 
GtkWidgë
 *
widgë
;

70 
GEº‹
 *
îr‹
 = 0;

72 
ge
->
ªsu…s_uim™agî
 = 
	`gtk_ui_m™agî_√w
();

74 
a˘i⁄_group
 = 
	`gtk_a˘i⁄_group_√w
("ResultsMenu");

75 
	`gtk_a˘i⁄_group_add_a˘i⁄s
(
a˘i⁄_group
, 
ªsu…s_míu_ôems
, 
ªsu…s_nmíu_ôems
, 
ge
);

77 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
(
ge
->
ªsu…s_uim™agî
, 
a˘i⁄_group
, 0);

78 
	`gtk_ui_m™agî_add_ui_‰om_°rög
(
	`GTK_UI_MANAGER
(
ge
->
ªsu…s_uim™agî
), 
ªsu…s_ui_°rög
, -1, &
îr‹
);

80 
	`gtk_wödow_add_ac˚l_group
(
	`GTK_WINDOW
(
wödow
), 
	`gtk_ui_m™agî_gë_ac˚l_group
(
ge
->
ªsu…s_uim™agî
));

82 
widgë
 = 
	`gtk_ui_m™agî_gë_widgë
(
ge
->
ªsu…s_uim™agî
, "/MainMenu");

83  
widgë
;

84 
	}
}

86 
GtkWidgë
 *
	$gë_ªsu…s_wödow
(
gui_íåy
 *
ge
)

88 
GtkWidgë
 *
wö
, *
nŸebook
, *
vbox
;

90 i‡(
ge
->
ªsu…s_wödow
)

91  
ge
->
ªsu…s_nŸebook
;

93 
wö
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

94 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
wö
), "Results");

95 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
wö
), 1024, 768);

96 
	`g_sig«l_c⁄√˘
(
wö
, "dñëe-evít", 
	`G_CALLBACK
(
ªsu…s_wödow_dñëe
), 
ge
);

97 
	`g_sig«l_c⁄√˘
(
wö
, "de°roy", 
	`G_CALLBACK
(
ªsu…s_wödow_dñëe
), 
ge
);

99 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

100 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
wö
), 
vbox
);

102 
ge
->
ªsu…s_míu
 = 
	`gë_ªsu…s_míub¨
(
wö
, ge);

103 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
ge
->
ªsu…s_míu
, 
FALSE
, FALSE, 0);

105 
nŸebook
 = 
	`gtk_nŸebook_√w
();

106 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
(
	`GTK_NOTEBOOK
(
nŸebook
), 1);

107 
	`gtk_nŸebook_p›up_íabÀ
(
	`GTK_NOTEBOOK
(
nŸebook
));

108 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
vbox
), 
nŸebook
);

110 
ge
->
ªsu…s_wödow
 = 
wö
;

111 
ge
->
ªsu…s_nŸebook
 = 
nŸebook
;

112  
ge
->
ªsu…s_nŸebook
;

113 
	}
}

115 
	$gfio_ãxt_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

117 
cmd_ãxt_pdu
 *
p
 = (cmd_ãxt_pdu *Ë
cmd
->
∑ylﬂd
;

118 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

119 
gui_íåy
 *
ge
 = 
gc
->ge;

120 
gui
 *
ui
 = 
ge
->ui;

121 
GtkTªeIãr
 
ôî
;

122 
tm
 *tm;

123 
time_t
 
£c
;

124 
tmp
[64], 
timebuf
[80];

126 
£c
 = 
p
->
log_£c
;

127 
tm
 = 
	`loˇ…ime
(&
£c
);

128 
	`°r·ime
(
tmp
, —mp), "%Y-%m-%d %H:%M:%S", 
tm
);

129 
	`•rötf
(
timebuf
, "%s.%03ld", 
tmp
, (Ë
p
->
log_u£c
 / 1000);

131 
	`gdk_thªads_íãr
();

133 
	`gtk_li°_°‹e_≠≥nd
(
ui
->
log_modñ
, &
ôî
);

134 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 0, 
timebuf
, -1);

135 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 1, 
˛õ¡
->
ho°«me
, -1);

136 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 2, 
	`log_gë_Àvñ
(
p
->
Àvñ
), -1);

137 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 3, 
p
->
buf
, -1);

139 i‡(
p
->
Àvñ
 =
FIO_LOG_ERR
)

140 
	`gfio_võw_log
(
ui
);

142 
	`gdk_thªads_Àave
();

143 
	}
}

145 
	$disk_utû_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

147 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

149 
ge
->
disk_utû_vbox
 = 
NULL
;

150 
	`gtk_widgë_de°roy
(
w
);

151 
	}
}

153 
GtkWidgë
 *
	$gfio_disk_utû_gë_vbox
(
gui_íåy
 *
ge
)

155 
GtkWidgë
 *
vbox
, *
box
, *
s¸ﬁl
, *
ªs_nŸebook
;

157 i‡(
ge
->
disk_utû_vbox
)

158  
ge
->
disk_utû_vbox
;

160 
s¸ﬁl
 = 
	`gë_s¸ﬁÀd_wödow
(5);

161 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

162 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

163 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

165 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
vbox
);

166 
ªs_nŸebook
 = 
	`gë_ªsu…s_wödow
(
ge
);

168 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
ªs_nŸebook
), 
s¸ﬁl
, 
	`gtk_œbñ_√w
("Disk utilization"));

169 
ge
->
disk_utû_vbox
 = 
box
;

170 
	`g_sig«l_c⁄√˘
(
vbox
, "de°roy", 
	`G_CALLBACK
(
disk_utû_de°roy
), 
ge
);

172  
ge
->
disk_utû_vbox
;

173 
	}
}

175 
	$__gfio_disk_utû_show
(
GtkWidgë
 *
ªs_nŸebook
,

176 
gfio_˛õ¡
 *
gc
, 
cmd_du_pdu
 *
p
)

178 
GtkWidgë
 *
box
, *
‰ame
, *
íåy
, *
vbox
, *
utû_vbox
;

179 
gui_íåy
 *
ge
 = 
gc
->ge;

180 
utû
;

181 
tmp
[16];

183 
utû_vbox
 = 
	`gfio_disk_utû_gë_vbox
(
ge
);

185 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

186 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
utû_vbox
), 
vbox
);

188 
‰ame
 = 
	`gtk_‰ame_√w
((*Ë
p
->
dus
.
«me
);

189 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 2);

191 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

192 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

194 
‰ame
 = 
	`gtk_‰ame_√w
("Read");

195 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 2);

196 
vbox
 = 
	`gtk_hbox_√w
(
TRUE
, 3);

197 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

198 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "IOs");

199 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ios
[0]);

200 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Merges");

201 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
mîges
[0]);

202 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Sectors");

203 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
£˘‹s
[0]);

204 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Ticks");

205 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ticks
[0]);

207 
‰ame
 = 
	`gtk_‰ame_√w
("Write");

208 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 2);

209 
vbox
 = 
	`gtk_hbox_√w
(
TRUE
, 3);

210 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

211 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "IOs");

212 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ios
[1]);

213 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Merges");

214 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
mîges
[1]);

215 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Sectors");

216 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
£˘‹s
[1]);

217 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Ticks");

218 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ticks
[1]);

220 
‰ame
 = 
	`gtk_‰ame_√w
("Shared");

221 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 2);

222 
vbox
 = 
	`gtk_hbox_√w
(
TRUE
, 3);

223 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

224 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "IOÅicks");

225 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
io_ticks
);

226 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Time in queue");

227 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
time_ö_queue
);

229 
utû
 = 0.0;

230 i‡(
p
->
dus
.
s
.
m£c
)

231 
utû
 = (Ë100 * 
p
->
dus
.
s
.
io_ticks
 / (Ëp->dus.s.
m£c
;

232 i‡(
utû
 > 100.0)

233 
utû
 = 100.0;

235 
	`•rötf
(
tmp
, "%3.2f%%", 
utû
);

236 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Disk utilization");

237 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

239 
	`gtk_widgë_show_Æl
(
ge
->
ªsu…s_wödow
);

241 
	}
}

243 
	$gfio_disk_utû_show
(
gfio_˛õ¡
 *
gc
)

245 
gui_íåy
 *
ge
 = 
gc
->ge;

246 
GtkWidgë
 *
ªs_nŸebook
;

247 
i
;

249 i‡(!
gc
->
ƒ_du
)

252 
ªs_nŸebook
 = 
	`gë_ªsu…s_wödow
(
ge
);

254 
i
 = 0; i < 
gc
->
ƒ_du
; i++) {

255 
cmd_du_pdu
 *
p
 = &
gc
->
du
[
i
];

257 
	`__gfio_disk_utû_show
(
ªs_nŸebook
, 
gc
, 
p
);

260 
	`gtk_widgë_show_Æl
(
ge
->
ªsu…s_wödow
);

262 
	}
}

264 
	$gfio_disk_utû_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

266 
cmd_du_pdu
 *
p
 = (cmd_du_pdu *Ë
cmd
->
∑ylﬂd
;

267 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

268 
gui_íåy
 *
ge
 = 
gc
->ge;

269 
ƒ
 = 
gc
->
ƒ_du
;

271 
gc
->
du
 = 
	`ªÆloc
(gc->du, (
ƒ
 + 1Ë* (
cmd_du_pdu
));

272 
	`mem˝y
(&
gc
->
du
[
ƒ
], 
p
, (*p));

273 
gc
->
ƒ_du
++;

275 
	`gdk_thªads_íãr
();

276 i‡(
ge
->
ªsu…s_wödow
)

277 
	`__gfio_disk_utû_show
(
ge
->
ªsu…s_nŸebook
, 
gc
, 
p
);

279 
	`gfio_disk_utû_show
(
gc
);

280 
	`gdk_thªads_Àave
();

281 
	}
}

283 
	gsum_°©_ƒ
;

285 
	$gfio_thªad_°©us_›
(
fio_˛õ¡
 *
˛õ¡
,

286 
fio_√t_cmd
 *
cmd
)

288 
cmd_ts_pdu
 *
p
 = (cmd_ts_pdu *Ë
cmd
->
∑ylﬂd
;

290 
	`gfio_di•œy_ts
(
˛õ¡
, &
p
->
ts
, &p->
rs
);

292 i‡(
sum_°©_˛õ¡s
 == 1)

295 
	`sum_thªad_°©s
(&
˛õ¡_ts
, &
p
->
ts
, 
sum_°©_ƒ
 == 1);

296 
	`sum_group_°©s
(&
˛õ¡_gs
, &
p
->
rs
);

298 
˛õ¡_ts
.
membîs
++;

299 
˛õ¡_ts
.
thªad_numbî
 = 
p
->
ts
.thread_number;

300 
˛õ¡_ts
.
groupid
 = 
p
->
ts
.groupid;

301 
˛õ¡_ts
.
sig_figs
 = 
p
->
ts
.sig_figs;

303 i‡(++
sum_°©_ƒ
 =
sum_°©_˛õ¡s
) {

304 
	`°r˝y
(
˛õ¡_ts
.
«me
, "All clients");

305 
	`gfio_di•œy_ts
(
˛õ¡
, &
˛õ¡_ts
, &
˛õ¡_gs
);

307 
	}
}

309 
	$gfio_group_°©s_›
(
fio_˛õ¡
 *
˛õ¡
,

310 
fio_√t_cmd
 *
cmd
)

313 
	}
}

315 
	$gfio_upd©e_thªad_°©us
(
gui_íåy
 *
ge
,

316 *
°©us_mesßge
, 
≥rc
)

318 
mesßge
[100];

319 c⁄° *
m
 = 
mesßge
;

321 
	`°∫˝y
(
mesßge
, 
°©us_mesßge
, (message) - 1);

322 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 
m
);

323 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 
≥rc
 / 100.0);

324 
	`gtk_widgë_queue_døw
(
ge
->
ui
->
wödow
);

325 
	}
}

327 
	$gfio_upd©e_thªad_°©us_Æl
(
gui
 *
ui
, *
°©us_mesßge
,

328 
≥rc
)

330 
mesßge
[100];

331 c⁄° *
m
 = 
mesßge
;

333 
	`°∫˝y
(
mesßge
, 
°©us_mesßge
, (message) - 1);

334 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), 
m
);

335 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), 
≥rc
 / 100.0);

336 
	`gtk_widgë_queue_døw
(
ui
->
wödow
);

337 
	}
}

342 
	$gfio_upd©e_˛õ¡_ëa
(
fio_˛õ¡
 *
˛õ¡
, 
jobs_ëa
 *
je
)

344 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

345 
gui_íåy
 *
ge
 = 
gc
->ge;

346 
ëa_good
;

347 
ëa_°r
[128];

348 
ouçut
[256];

349 
tmp
[32];

350 
≥rc
 = 0.0;

351 
i2p
 = 0;

353 
	`gdk_thªads_íãr
();

355 
ëa_°r
[0] = '\0';

356 
ouçut
[0] = '\0';

358 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ñ≠£d_£c
) {

359 
≥rc
 = (Ë
je
->
ñ≠£d_£c
 / (Ë(je->ñ≠£d_£¯+ je->
ëa_£c
);

360 
	`ëa_to_°r
(
ëa_°r
, 
je
->
ëa_£c
);

363 
	`•rötf
(
tmp
, "%u", 
je
->
ƒ_ru¬ög
);

364 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
jobs
), 
tmp
);

365 
	`•rötf
(
tmp
, "%u", 
je
->
fûes_›í
);

366 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
fûes
), 
tmp
);

368 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ƒ_ru¬ög
) {

369 *
i›s_°r
[
DDIR_RWDIR_CNT
];

370 *
øã_°r
[
DDIR_RWDIR_CNT
];

371 *
øã_Æt
[
DDIR_RWDIR_CNT
];

372 
tmp
[128];

373 
i
;

375 i‡((!
je
->
ëa_£c
 && !
ëa_good
Ë|| je->
ƒ_ømp
 =je->
ƒ_ru¬ög
)

376 
	`°r˝y
(
ouçut
, "-.-% done");

378 
ëa_good
 = 1;

379 
≥rc
 *= 100.0;

380 
	`•rötf
(
ouçut
, "%3.1f%% d⁄e", 
≥rc
);

383 
i›s_°r
[0] = 
	`num2°r
(
je
->
i›s
[0], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

384 
i›s_°r
[1] = 
	`num2°r
(
je
->
i›s
[1], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

385 
i›s_°r
[2] = 
	`num2°r
(
je
->
i›s
[2], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

387 
øã_°r
[0] = 
	`num2°r
(
je
->
øã
[0], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

388 
øã_Æt
[0] = 
	`num2°r
(
je
->
øã
[0], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

389 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[0], 
øã_Æt
[0]);

390 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_bw
), 
tmp
);

391 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_i›s
), 
i›s_°r
[0]);

393 
øã_°r
[1] = 
	`num2°r
(
je
->
øã
[1], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

394 
øã_Æt
[1] = 
	`num2°r
(
je
->
øã
[1], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

395 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[1], 
øã_Æt
[1]);

396 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_bw
), 
tmp
);

397 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_i›s
), 
i›s_°r
[1]);

399 
øã_°r
[2] = 
	`num2°r
(
je
->
øã
[2], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

400 
øã_Æt
[2] = 
	`num2°r
(
je
->
øã
[2], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

401 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[2], 
øã_Æt
[2]);

402 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
åim_bw
), 
tmp
);

403 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
åim_i›s
), 
i›s_°r
[2]);

405 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
i›s_gøph
, ge->gøphs.
ªad_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[0], 
i›s_°r
[0]);

406 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
i›s_gøph
, ge->gøphs.
wrôe_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[1], 
i›s_°r
[1]);

407 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
i›s_gøph
, ge->gøphs.
åim_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[2], 
i›s_°r
[2]);

408 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
b™dwidth_gøph
, ge->gøphs.
ªad_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[0], 
øã_°r
[0]);

409 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
b™dwidth_gøph
, ge->gøphs.
wrôe_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[1], 
øã_°r
[1]);

410 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
b™dwidth_gøph
, ge->gøphs.
åim_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[2], 
øã_°r
[2]);

412 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

413 
	`‰ì
(
øã_°r
[
i
]);

414 
	`‰ì
(
øã_Æt
[
i
]);

415 
	`‰ì
(
i›s_°r
[
i
]);

419 i‡(
ëa_°r
[0]) {

420 *
d°
 = 
ouçut
 + 
	`°æí
(output);

422 
	`•rötf
(
d°
, " - %s", 
ëa_°r
);

425 
	`gfio_upd©e_thªad_°©us
(
ge
, 
ouçut
, 
≥rc
);

426 
	`gdk_thªads_Àave
();

427 
	}
}

432 
	$gfio_upd©e_Æl_ëa
(
jobs_ëa
 *
je
)

434 
gui
 *
ui
 = &
maö_ui
;

435 
ëa_good
;

436 
ëa_°r
[128];

437 
ouçut
[256];

438 
≥rc
 = 0.0;

439 
i
, 
i2p
 = 0;

441 
	`gdk_thªads_íãr
();

443 
ëa_°r
[0] = '\0';

444 
ouçut
[0] = '\0';

446 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ñ≠£d_£c
) {

447 
≥rc
 = (Ë
je
->
ñ≠£d_£c
 / (Ë(je->ñ≠£d_£¯+ je->
ëa_£c
);

448 
	`ëa_to_°r
(
ëa_°r
, 
je
->
ëa_£c
);

451 
	`íåy_£t_öt_vÆue
(
ui
->
ëa
.
jobs
, 
je
->
ƒ_ru¬ög
);

453 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ƒ_ru¬ög
) {

454 *
i›s_°r
[
DDIR_RWDIR_CNT
];

455 *
øã_°r
[
DDIR_RWDIR_CNT
];

456 *
øã_Æt
[
DDIR_RWDIR_CNT
];

457 
tmp
[128];

459 i‡((!
je
->
ëa_£c
 && !
ëa_good
Ë|| je->
ƒ_ømp
 =je->
ƒ_ru¬ög
)

460 
	`°r˝y
(
ouçut
, "-.-% done");

462 
ëa_good
 = 1;

463 
≥rc
 *= 100.0;

464 
	`•rötf
(
ouçut
, "%3.1f%% d⁄e", 
≥rc
);

467 
i›s_°r
[0] = 
	`num2°r
(
je
->
i›s
[0], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

468 
i›s_°r
[1] = 
	`num2°r
(
je
->
i›s
[1], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

469 
i›s_°r
[2] = 
	`num2°r
(
je
->
i›s
[2], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

471 
øã_°r
[0] = 
	`num2°r
(
je
->
øã
[0], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

472 
øã_Æt
[0] = 
	`num2°r
(
je
->
øã
[0], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

473 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[0], 
øã_Æt
[0]);

474 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
ªad_bw
), 
tmp
);

475 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
ªad_i›s
), 
i›s_°r
[0]);

477 
øã_°r
[1] = 
	`num2°r
(
je
->
øã
[1], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

478 
øã_Æt
[1] = 
	`num2°r
(
je
->
øã
[1], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

479 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[1], 
øã_Æt
[1]);

480 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
wrôe_bw
), 
tmp
);

481 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
wrôe_i›s
), 
i›s_°r
[1]);

483 
øã_°r
[2] = 
	`num2°r
(
je
->
øã
[2], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

484 
øã_Æt
[2] = 
	`num2°r
(
je
->
øã
[2], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

485 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[2], 
øã_Æt
[2]);

486 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
åim_bw
), 
tmp
);

487 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
åim_i›s
), 
i›s_°r
[2]);

489 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
i›s_gøph
, ui->gøphs.
ªad_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[0], 
i›s_°r
[0]);

490 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
i›s_gøph
, ui->gøphs.
wrôe_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[1], 
i›s_°r
[1]);

491 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
i›s_gøph
, ui->gøphs.
åim_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[2], 
i›s_°r
[2]);

492 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
b™dwidth_gøph
, ui->gøphs.
ªad_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[0], 
øã_°r
[0]);

493 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
b™dwidth_gøph
, ui->gøphs.
wrôe_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[1], 
øã_°r
[1]);

494 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
b™dwidth_gøph
, ui->gøphs.
åim_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[2], 
øã_°r
[2]);

496 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

497 
	`‰ì
(
øã_°r
[
i
]);

498 
	`‰ì
(
øã_Æt
[
i
]);

499 
	`‰ì
(
i›s_°r
[
i
]);

503 i‡(
ëa_°r
[0]) {

504 *
d°
 = 
ouçut
 + 
	`°æí
(output);

506 
	`•rötf
(
d°
, " - %s", 
ëa_°r
);

509 
	`gfio_upd©e_thªad_°©us_Æl
(
ui
, 
ouçut
, 
≥rc
);

510 
	`gdk_thªads_Àave
();

511 
	}
}

513 
	$gfio_¥obe_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

515 
cmd_¥obe_ª∂y_pdu
 *
¥obe
 = (cmd_¥obe_ª∂y_pdu *Ë
cmd
->
∑ylﬂd
;

516 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

517 
gui_íåy
 *
ge
 = 
gc
->ge;

518 c⁄° *
os
, *
¨ch
;

520 
os
 = 
	`fio_gë_os_°rög
(
¥obe
->os);

521 i‡(!
os
)

522 
os
 = "unknown";

524 
¨ch
 = 
	`fio_gë_¨ch_°rög
(
¥obe
->arch);

525 i‡(!
¨ch
)

526 
os
 = "unknown";

528 i‡(!
˛õ¡
->
«me
)

529 
˛õ¡
->
«me
 = 
	`°rdup
((*Ë
¥obe
->
ho°«me
);

531 
gc
->
˛õ¡_˝us
 = 
	`À32_to_˝u
(
¥obe
->
˝us
);

532 
gc
->
˛õ¡_Êags
 = 
	`À64_to_˝u
(
¥obe
->
Êags
);

534 
	`gdk_thªads_íãr
();

536 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
ho°«me
), (*)Örobe->hostname);

537 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
os
), os);

538 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
¨ch
),árch);

539 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
fio_vî
), (*Ë¥obe->
fio_vîsi⁄
);

541 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_CONNECTED
);

543 
	`gdk_thªads_Àave
();

544 
	}
}

546 
	$gfio_quô_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

548 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

550 
	`gdk_thªads_íãr
();

551 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_NEW
);

552 
	`gdk_thªads_Àave
();

553 
	}
}

555 
thªad_›ti⁄s
 *
	$gfio_˛õ¡_add_job
(
gfio_˛õ¡
 *
gc
,

556 
thªad_›ti⁄s_∑ck
 *
t›
)

558 
gfio_˛õ¡_›ti⁄s
 *
gco
;

560 
gco
 = 
	`ˇŒoc
(1, (*gco));

561 
	`c⁄vît_thªad_›ti⁄s_to_˝u
(&
gco
->
o
, 
t›
);

562 
	`INIT_FLIST_HEAD
(&
gco
->
li°
);

563 
	`Êi°_add_èû
(&
gco
->
li°
, &
gc
->
o_li°
);

564 
gc
->
o_li°_ƒ
 = 1;

565  &
gco
->
o
;

566 
	}
}

568 
	$gfio_add_job_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

570 
cmd_add_job_pdu
 *
p
 = (cmd_add_job_pdu *Ë
cmd
->
∑ylﬂd
;

571 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

572 
gui_íåy
 *
ge
 = 
gc
->ge;

573 
thªad_›ti⁄s
 *
o
;

574 *
c1
, *
c2
, *
c3
, *
c4
;

575 
tmp
[80];

576 
i2p
;

578 
p
->
thªad_numbî
 = 
	`À32_to_˝u
(p->thread_number);

579 
p
->
groupid
 = 
	`À32_to_˝u
(p->groupid);

580 
o
 = 
	`gfio_˛õ¡_add_job
(
gc
, &
p
->
t›
);

582 
	`gdk_thªads_íãr
();

584 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
ge
->
ëa
.
«mes
), (
gch¨
 *Ë
o
->
«me
);

585 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
ge
->
ëa
.
«mes
), 0);

587 
	`•rötf
(
tmp
, "%†%s", 
o
->
odúe˘
 ? "dúe˘" : "buf„ªd", 
	`ddú_°r
(o->
td_ddú
));

588 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
iŸy≥
, 
tmp
);

590 
i2p
 = 
	`is_powî_of_2
(
o
->
kb_ba£
);

591 
c1
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_READ
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

592 
c2
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_READ
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

593 
c3
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_WRITE
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

594 
c4
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_WRITE
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

596 
	`•rötf
(
tmp
, "%s-%s,%s-%s", 
c1
, 
c2
, 
c3
, 
c4
);

597 
	`‰ì
(
c1
);

598 
	`‰ì
(
c2
);

599 
	`‰ì
(
c3
);

600 
	`‰ì
(
c4
);

601 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
bs
, 
tmp
);

603 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
i€ngöe
, (c⁄° *Ë
o
->ioengine);

605 
	`•rötf
(
tmp
, "%u", 
o
->
iodïth
);

606 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
iodïth
, 
tmp
);

608 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iŸy≥
, 0);

609 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
bs
, 0);

610 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
i€ngöe
, 0);

611 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iodïth
, 0);

613 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_JOB_SENT
);

615 
	`gdk_thªads_Àave
();

616 
	}
}

618 
	$gfio_upd©e_job_›
(
fio_˛õ¡
 *
˛õ¡
,

619 
fio_√t_cmd
 *
cmd
)

621 
uöt32_t
 *
pdu_îr‹
 = (uöt32_à*Ë
cmd
->
∑ylﬂd
;

622 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

624 
gc
->
upd©e_job_°©us
 = 
	`À32_to_˝u
(*
pdu_îr‹
);

625 
gc
->
upd©e_job_d⁄e
 = 1;

626 
	}
}

628 
	$gfio_˛õ¡_timed_out
(
fio_˛õ¡
 *
˛õ¡
)

630 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

631 
buf
[256];

633 
	`gdk_thªads_íãr
();

635 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_NEW
);

636 
	`˛ór_ge_ui_öfo
(
gc
->
ge
);

638 
	`•rötf
(
buf
, "Clõ¡ %s:ÅimeouàèlkögÅÿ£rvî.\n", 
˛õ¡
->
ho°«me
);

639 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Nëw‹kÅimeout", 
buf
);

641 
	`gdk_thªads_Àave
();

642 
	}
}

644 
	$gfio_˛õ¡_°›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

646 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

648 
	`gdk_thªads_íãr
();

650 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_JOB_DONE
);

652 i‡(
gc
->
îr_íåy
)

653 
	`íåy_£t_öt_vÆue
(
gc
->
îr_íåy
, 
˛õ¡
->
îr‹
);

655 
	`gdk_thªads_Àave
();

656 
	}
}

658 
	$gfio_˛õ¡_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

660 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

662 
	`gdk_thªads_íãr
();

663 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_JOB_STARTED
);

664 
	`gdk_thªads_Àave
();

665 
	}
}

667 
	$gfio_˛õ¡_job_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

669 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

671 
	`gdk_thªads_íãr
();

672 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_JOB_RUNNING
);

673 
	`gdk_thªads_Àave
();

674 
	}
}

676 
	$gfio_add_tŸÆ_dïths_åì
(
GtkLi°St‹e
 *
modñ
,

677 
thªad_°©
 *
ts
, 
Àn
)

679 
io_u_di°
[
FIO_IO_U_MAP_NR
];

680 
GtkTªeIãr
 
ôî
;

682 c⁄° 
add_mask
 = 0x17e;

683 
i
, 
j
;

685 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

687 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

689 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 0, "Total", -1);

691 
i
 = 1, 
j
 = 0; i < 
Àn
; i++) {

692 
fbuf
[32];

694 i‡(!(
add_mask
 & (1UL << (
i
 - 1))))

695 
	`•rötf
(
fbuf
, "0.0%%");

697 
	`•rötf
(
fbuf
, "%3.1f%%", 
io_u_di°
[
j
]);

698 
j
++;

701 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
fbuf
, -1);

704 
	}
}

706 
	$gfio_add_íd_ªsu…s
(
gfio_˛õ¡
 *
gc
, 
thªad_°©
 *
ts
,

707 
group_run_°©s
 *
rs
)

709 
ƒ
 = 
gc
->
ƒ_ªsu…s
;

711 
gc
->
ªsu…s
 = 
	`ªÆloc
(gc->ªsu…s, (
ƒ
 + 1Ë* (
íd_ªsu…s
));

712 
	`mem˝y
(&
gc
->
ªsu…s
[
ƒ
].
ts
,Ås, (*ts));

713 
	`mem˝y
(&
gc
->
ªsu…s
[
ƒ
].
gs
, 
rs
, (*rs));

714 
gc
->
ƒ_ªsu…s
++;

715 
	}
}

717 
	$gfio_add_sc_dïths_åì
(
GtkLi°St‹e
 *
modñ
,

718 
thªad_°©
 *
ts
, 
Àn
,

719 
submô
)

721 
io_u_di°
[
FIO_IO_U_MAP_NR
];

722 
GtkTªeIãr
 
ôî
;

724 c⁄° 
add_mask
 = 0x1f9;

725 
i
, 
j
;

727 i‡(
submô
)

728 
	`°©_ˇlc_di°
(
ts
->
io_u_submô
,Ås->
tŸÆ_submô
, 
io_u_di°
);

730 
	`°©_ˇlc_di°
(
ts
->
io_u_com∂ëe
,Ås->
tŸÆ_com∂ëe
, 
io_u_di°
);

732 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

734 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 0, 
submô
 ? "Submit" : "Complete", -1);

736 
i
 = 1, 
j
 = 0; i < 
Àn
; i++) {

737 
fbuf
[32];

739 i‡(!(
add_mask
 & (1UL << (
i
 - 1))))

740 
	`•rötf
(
fbuf
, "0.0%%");

742 
	`•rötf
(
fbuf
, "%3.1f%%", 
io_u_di°
[
j
]);

743 
j
++;

746 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
fbuf
, -1);

749 
	}
}

751 
	$gfio_show_io_dïths
(
GtkWidgë
 *
vbox
, 
thªad_°©
 *
ts
)

753 
GtkWidgë
 *
‰ame
, *
box
, *
åì_võw
 = 
NULL
;

754 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

755 
GtkLi°St‹e
 *
modñ
;

756 
i
;

757 c⁄° *
œbñs
[] = { "Depth", "0", "1", "2", "4", "8", "16", "32", "64", ">= 64" };

758 c⁄° 
ƒ_œbñs
 = 
	`ARRAY_SIZE
(
œbñs
);

759 
GTy≥
 
ty≥s
[
ƒ_œbñs
];

761 
‰ame
 = 
	`gtk_‰ame_√w
("IO depths");

762 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

764 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

765 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

767 
i
 = 0; i < 
ƒ_œbñs
; i++)

768 
ty≥s
[
i
] = 
G_TYPE_STRING
;

770 
modñ
 = 
	`gtk_li°_°‹e_√wv
(
ƒ_œbñs
, 
ty≥s
);

772 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

773 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

775 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

776 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

778 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

779 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

781 
i
 = 0; i < 
ƒ_œbñs
; i++)

782 
	`åì_võw_cﬁumn
(
åì_võw
, 
i
, 
œbñs
[i], 
ALIGN_RIGHT
 | 
UNSORTABLE
);

784 
	`gfio_add_tŸÆ_dïths_åì
(
modñ
, 
ts
, 
ƒ_œbñs
);

785 
	`gfio_add_sc_dïths_åì
(
modñ
, 
ts
, 
ƒ_œbñs
, 1);

786 
	`gfio_add_sc_dïths_åì
(
modñ
, 
ts
, 
ƒ_œbñs
, 0);

788 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
åì_võw
, 
TRUE
, TRUE, 3);

789 
	}
}

791 
	$gfio_show_˝u_ußge
(
GtkWidgë
 *
vbox
, 
thªad_°©
 *
ts
)

793 
GtkWidgë
 *
box
, *
‰ame
, *
íåy
;

794 
u§_˝u
, 
sys_˝u
;

795 
ru¡ime
;

796 
tmp
[32];

798 
ru¡ime
 = 
ts
->
tŸÆ_run_time
;

799 i‡(
ru¡ime
) {

800 
ru¡
 = (Ë
ru¡ime
;

802 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

803 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

805 
u§_˝u
 = 0;

806 
sys_˝u
 = 0;

809 
‰ame
 = 
	`gtk_‰ame_√w
("OSÑesources");

810 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

812 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

813 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

815 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "User CPU");

816 
	`•rötf
(
tmp
, "%3.2f%%", 
u§_˝u
);

817 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

818 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "System CPU");

819 
	`•rötf
(
tmp
, "%3.2f%%", 
sys_˝u
);

820 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

821 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Context switches");

822 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
˘x
);

823 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Major faults");

824 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
majf
);

825 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Minor faults");

826 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
möf
);

827 
	}
}

829 
GtkWidgë
 *
	$gfio_ouçut_œt_buckës
(*
œt
, c⁄° **
œbñs
,

830 
num
)

832 
GtkWidgë
 *
åì_võw
;

833 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

834 
GtkLi°St‹e
 *
modñ
;

835 
GtkTªeIãr
 
ôî
;

836 
GTy≥
 *
ty≥s
;

837 
i
;

839 
ty≥s
 = 
	`mÆloc
(
num
 * (
GTy≥
));

841 
i
 = 0; i < 
num
; i++)

842 
ty≥s
[
i
] = 
G_TYPE_STRING
;

844 
modñ
 = 
	`gtk_li°_°‹e_√wv
(
num
, 
ty≥s
);

845 
	`‰ì
(
ty≥s
);

846 
ty≥s
 = 
NULL
;

848 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

849 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

851 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

852 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

854 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

855 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

857 
i
 = 0; i < 
num
; i++)

858 
	`åì_võw_cﬁumn
(
åì_võw
, 
i
, 
œbñs
[i], 
ALIGN_RIGHT
 | 
UNSORTABLE
);

860 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

862 
i
 = 0; i < 
num
; i++) {

863 
fbuf
[32];

865 i‡(
œt
[
i
] <= 0.0)

866 
	`•rötf
(
fbuf
, "0.00");

868 
	`•rötf
(
fbuf
, "%3.2f%%", 
œt
[
i
]);

870 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
fbuf
, -1);

873  
åì_võw
;

874 
	}
}

876 
gøph
 *
	$£tup_œt_buckë_gøph
(c⁄° *
tôÀ
, *
œt
,

877 c⁄° **
œbñs
,

878 
Àn
,

879 
xdim
, 
ydim
)

881 
gøph
 *
g
;

882 
i
;

884 
g
 = 
	`gøph_√w
(
xdim
, 
ydim
, 
gfio_gøph_f⁄t
);

885 
	`gøph_tôÀ
(
g
, 
tôÀ
);

886 
	`gøph_x_tôÀ
(
g
, "Buckets");

887 
	`gøph_y_tôÀ
(
g
, "Percent");

889 
i
 = 0; i < 
Àn
; i++) {

890 
gøph_œbñ_t
 
l
;

892 
l
 = 
	`gøph_add_œbñ
(
g
, 
œbñs
[
i
]);

893 
	`gøph_add_d©a
(
g
, 
l
, 
œt
[
i
]);

896  
g
;

897 
	}
}

899 
	$⁄_expo£_œt_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvít
 *
evít
, 
gpoöãr
 
p
)

901 
gøph
 *
g
 = 
p
;

902 
ˇúo_t
 *
¸
;

904 
¸
 = 
	`gdk_ˇúo_¸óã
(
	`gtk_widgë_gë_wödow
(
w
));

906 i‡(
	`gøph_has_toﬁtùs
(
g
)) {

907 
	`g_obje˘_£t
(
w
, "has-toﬁtù", 
TRUE
, 
NULL
);

908 
	`g_sig«l_c⁄√˘
(
w
, "quîy-toﬁtù", 
	`G_CALLBACK
(
˛©_gøph_toﬁtù
), 
g
);

911 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

912 
	`b¨_gøph_døw
(
g
, 
¸
);

913 
	`ˇúo_de°roy
(
¸
);

915  
FALSE
;

916 
	}
}

918 
göt
 
	$⁄_c⁄fig_œt_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvítC⁄figuª
 *
evít
,

919 
gpoöãr
 
d©a
)

921 
guöt
 
width
 = 
	`gtk_widgë_gë_Æloˇãd_width
(
w
);

922 
guöt
 
height
 = 
	`gtk_widgë_gë_Æloˇãd_height
(
w
);

923 
gøph
 *
g
 = 
d©a
;

925 
	`gøph_£t_size
(
g
, 
width
, 
height
);

926 
	`gøph_£t_size
(
g
, 
width
, 
height
);

927 
	`gøph_£t_posôi⁄
(
g
, 0, 0);

928  
TRUE
;

929 
	}
}

931 
	$gfio_show_œãncy_buckës
(
gfio_˛õ¡
 *
gc
, 
GtkWidgë
 *
vbox
,

932 
thªad_°©
 *
ts
)

934 
io_u_œt
[
FIO_IO_U_LAT_N_NR
 + 
FIO_IO_U_LAT_U_NR
 + 
FIO_IO_U_LAT_M_NR
];

935 c⁄° *
ønges
[] = { "2ns", "4ns", "10ns", "20ns", "50ns", "100ns",

941 
°¨t
, 
íd
, 
i
;

942 c⁄° 
tŸÆ
 = 
FIO_IO_U_LAT_U_NR
 + 
FIO_IO_U_LAT_M_NR
;

943 
GtkWidgë
 *
‰ame
, *
åì_võw
, *
hbox
, *
com∂ëi⁄_vbox
, *
døwög_¨ó
;

944 
gui_íåy
 *
ge
 = 
gc
->ge;

946 
	`°©_ˇlc_œt_n
(
ts
, 
io_u_œt
);

947 
	`°©_ˇlc_œt_u
(
ts
, &
io_u_œt
[
FIO_IO_U_LAT_N_NR
]);

948 
	`°©_ˇlc_œt_m
(
ts
, &
io_u_œt
[
FIO_IO_U_LAT_N_NR
 + 
FIO_IO_U_LAT_U_NR
]);

953 
°¨t
 = 
íd
 = -1U;

954 
i
 = 0; i < 
tŸÆ
; i++) {

955 i‡(
io_u_œt
[
i
] == 0.00)

958 i‡(
°¨t
 == -1U)

959 
°¨t
 = 
i
;

960 
íd
 = 
i
;

966 i‡(
°¨t
 == -1U)

969 
åì_võw
 = 
	`gfio_ouçut_œt_buckës
(&
io_u_œt
[
°¨t
], &
ønges
[°¨t], 
íd
 - start + 1);

970 
ge
->
œt_buckë_gøph
 = 
	`£tup_œt_buckë_gøph
("L©ícy buckës", &
io_u_œt
[
°¨t
], &
ønges
[°¨t], 
íd
 - start + 1, 700.0, 300.0);

972 
‰ame
 = 
	`gtk_‰ame_√w
("Latency buckets");

973 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

975 
com∂ëi⁄_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

976 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
com∂ëi⁄_vbox
);

977 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

978 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
hbox
);

980 
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

981 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
døwög_¨ó
), 700, 300);

982 
	`gtk_widgë_modify_bg
(
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_whôe
);

983 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
døwög_¨ó
);

984 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`G_CALLBACK
(
⁄_expo£_œt_døwög_¨ó
), 
ge
->
œt_buckë_gøph
);

985 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), "c⁄figuª_evít", 
	`G_CALLBACK
(
⁄_c⁄fig_œt_døwög_¨ó
), 
ge
->
œt_buckë_gøph
);

987 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
åì_võw
, 
TRUE
, TRUE, 3);

988 
	}
}

990 
	$gfio_show_œt
(
GtkWidgë
 *
vbox
, c⁄° *
«me
, 
mö
,

991 
max
, 
món
, 
dev
)

993 c⁄° *
ba£
 = "(nsec)";

994 
GtkWidgë
 *
hbox
, *
œbñ
, *
‰ame
;

995 *
möp
, *
maxp
;

996 
tmp
[64];

998 i‡(
	`n£c_to_m£c
(&
mö
, &
max
, &
món
, &
dev
))

999 
ba£
 = "(msec)";

1000 i‡(
	`n£c_to_u£c
(&
mö
, &
max
, &
món
, &
dev
))

1001 
ba£
 = "(usec)";

1003 
möp
 = 
	`num2°r
(
mö
, 6, 1, 0, 
N2S_NONE
);

1004 
maxp
 = 
	`num2°r
(
max
, 6, 1, 0, 
N2S_NONE
);

1006 
	`•rötf
(
tmp
, "%†%s", 
«me
, 
ba£
);

1007 
‰ame
 = 
	`gtk_‰ame_√w
(
tmp
);

1008 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1010 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1011 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

1013 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Minimum");

1014 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
möp
);

1015 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Maximum");

1016 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
maxp
);

1017 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Average");

1018 
	`•rötf
(
tmp
, "%5.02f", 
món
);

1019 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1020 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Standard deviation");

1021 
	`•rötf
(
tmp
, "%5.02f", 
dev
);

1022 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1024 
	`‰ì
(
möp
);

1025 
	`‰ì
(
maxp
);

1026 
	}
}

1028 
GtkWidgë
 *
	$gfio_ouçut_˛©_≥r˚¡ûes
(*
ovÆs
,

1029 
fio_Â64_t
 *
∂i°
,

1030 
Àn
,

1031 c⁄° *
ba£
,

1032 
sˇÀ
)

1034 
GTy≥
 
ty≥s
[
FIO_IO_U_LIST_MAX_LEN
];

1035 
GtkWidgë
 *
åì_võw
;

1036 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

1037 
GtkLi°St‹e
 *
modñ
;

1038 
GtkTªeIãr
 
ôî
;

1039 
i
, 
j
;

1041 
i
 = 0; i < 
Àn
; i++)

1042 
ty≥s
[
i
] = 
G_TYPE_ULONG
;

1044 
modñ
 = 
	`gtk_li°_°‹e_√wv
(
Àn
, 
ty≥s
);

1046 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

1047 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

1049 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

1050 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

1052 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

1053 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

1055 
i
 = 0; i < 
Àn
; i++) {

1056 
fbuf
[8];

1058 
	`•rötf
(
fbuf
, "%2.2f%%", 
∂i°
[
i
].
u
.
f
);

1059 
	`åì_võw_cﬁumn
(
åì_võw
, 
i
, 
fbuf
, 
ALIGN_RIGHT
 | 
UNSORTABLE
);

1062 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

1064 
i
 = 0; i < 
Àn
; i++) {

1065 
j
 = 0; j < 
sˇÀ
; j++)

1066 
ovÆs
[
i
] = (ovals[i] + 999) / 1000;

1067 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, (Ë
ovÆs
[i], -1);

1070  
åì_võw
;

1071 
	}
}

1073 
gøph
 *
	$£tup_˛©_gøph
(*
tôÀ
, *
ovÆs
,

1074 
fio_Â64_t
 *
∂i°
,

1075 
Àn
,

1076 
xdim
, 
ydim
)

1078 
gøph
 *
g
;

1079 
i
;

1081 
g
 = 
	`gøph_√w
(
xdim
, 
ydim
, 
gfio_gøph_f⁄t
);

1082 
	`gøph_tôÀ
(
g
, 
tôÀ
);

1083 
	`gøph_x_tôÀ
(
g
, "Percentile");

1084 
	`gøph_y_tôÀ
(
g
, "Time");

1086 
i
 = 0; i < 
Àn
; i++) {

1087 
gøph_œbñ_t
 
l
;

1088 
fbuf
[8];

1090 
	`•rötf
(
fbuf
, "%2.2f%%", 
∂i°
[
i
].
u
.
f
);

1091 
l
 = 
	`gøph_add_œbñ
(
g
, 
fbuf
);

1092 
	`gøph_add_d©a
(
g
, 
l
, (Ë
ovÆs
[
i
]);

1095  
g
;

1096 
	}
}

1098 
	$gfio_show_˛©_≥r˚¡ûes
(
gfio_˛õ¡
 *
gc
,

1099 
GtkWidgë
 *
vbox
, 
thªad_°©
 *
ts
,

1100 
ddú
)

1102 
uöt64_t
 *
io_u_∂©
 = 
ts
->io_u_∂©[
ddú
];

1103 
ƒ
 = 
ts
->
˛©_°©
[
ddú
].
ßm∂es
;

1104 
fio_Â64_t
 *
∂i°
 = 
ts
->
≥r˚¡ûe_li°
;

1105 
Àn
, 
sˇÀ_down
;

1106 *
ovÆs
, 
möv
, 
maxv
;

1107 c⁄° *
ba£
;

1108 
GtkWidgë
 *
åì_võw
, *
‰ame
, *
hbox
, *
døwög_¨ó
, *
com∂ëi⁄_vbox
;

1109 
gui_íåy
 *
ge
 = 
gc
->ge;

1110 
tmp
[64];

1112 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
io_u_∂©
, 
ƒ
, 
∂i°
, &
ovÆs
, &
maxv
, &
möv
);

1113 i‡(!
Àn
)

1114 
out
;

1120 i‡(
möv
 > 2000000 && 
maxv
 > 99999999ULL) {

1121 
sˇÀ_down
 = 2;

1122 
ba£
 = "msec";

1123 } i‡(
möv
 > 2000 && 
maxv
 > 99999) {

1124 
sˇÀ_down
 = 1;

1125 
ba£
 = "usec";

1127 
sˇÀ_down
 = 0;

1128 
ba£
 = "nsec";

1131 i‡(
ts
->
˛©_≥r˚¡ûes
)

1132 
	`•rötf
(
tmp
, "Com∂ëi⁄Öî˚¡ûe†(%s)", 
ba£
);

1134 
	`•rötf
(
tmp
, "L©ícyÖî˚¡ûe†(%s)", 
ba£
);

1136 
åì_võw
 = 
	`gfio_ouçut_˛©_≥r˚¡ûes
(
ovÆs
, 
∂i°
, 
Àn
, 
ba£
, 
sˇÀ_down
);

1137 
ge
->
˛©_gøph
 = 
	`£tup_˛©_gøph
(
tmp
, 
ovÆs
, 
∂i°
, 
Àn
, 700.0, 300.0);

1139 
‰ame
 = 
	`gtk_‰ame_√w
(
tmp
);

1140 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1142 
com∂ëi⁄_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1143 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
com∂ëi⁄_vbox
);

1144 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1145 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
hbox
);

1146 
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1147 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
døwög_¨ó
), 700, 300);

1148 
	`gtk_widgë_modify_bg
(
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_whôe
);

1149 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
døwög_¨ó
);

1150 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`G_CALLBACK
(
⁄_expo£_œt_døwög_¨ó
), 
ge
->
˛©_gøph
);

1151 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), "c⁄figuª_evít", 
	`G_CALLBACK
(
⁄_c⁄fig_œt_døwög_¨ó
), 
ge
->
˛©_gøph
);

1153 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
åì_võw
, 
TRUE
, TRUE, 3);

1154 
out
:

1155 i‡(
ovÆs
)

1156 
	`‰ì
(
ovÆs
);

1157 
	}
}

1159 
	#GFIO_CLAT
 1

	)

1160 
	#GFIO_SLAT
 2

	)

1161 
	#GFIO_LAT
 4

	)

1163 
	$gfio_show_ddú_°©us
(
gfio_˛õ¡
 *
gc
, 
GtkWidgë
 *
mbox
,

1164 
group_run_°©s
 *
rs
,

1165 
thªad_°©
 *
ts
, 
ddú
)

1167 c⁄° *
ddú_œbñ
[3] = { "Read", "Write", "Trim" };

1168 
GtkWidgë
 *
‰ame
, *
œbñ
, *
box
, *
vbox
, *
maö_vbox
;

1169 
mö
[3], 
max
[3];

1170 
ru¡
;

1171 
bw
, 
i›s
;

1172 
Êags
 = 0;

1173 
món
[3], 
dev
[3];

1174 *
io_p
, *
io_∑…
, *
bw_p
, *
bw_∑…
, *
i›s_p
;

1175 
tmp
[128];

1176 
i2p
;

1178 i‡(!
ts
->
ru¡ime
[
ddú
])

1181 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

1182 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

1184 
bw
 = (1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
;

1186 
i›s
 = (1000 * (
uöt64_t
)
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

1187 
i›s_p
 = 
	`num2°r
(
i›s
, 
ts
->
sig_figs
, 1, 0, 
N2S_PERSEC
);

1189 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1190 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
mbox
), 
box
, 
TRUE
, 
FALSE
, 3);

1192 
‰ame
 = 
	`gtk_‰ame_√w
(
ddú_œbñ
[
ddú
]);

1193 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 5);

1195 
maö_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1196 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
maö_vbox
);

1198 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1199 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
box
, 
TRUE
, 
FALSE
, 3);

1201 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "IO");

1202 
io_p
 = 
	`num2°r
(
ts
->
io_byãs
[
ddú
],Ås->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1203 
io_∑…
 = 
	`num2°r
(
ts
->
io_byãs
[
ddú
],Ås->
sig_figs
, 1, !
i2p
, 
N2S_BYTE
);

1204 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
io_p
, 
io_∑…
);

1205 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1207 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Bandwidth");

1208 
bw_p
 = 
	`num2°r
(
bw
, 
ts
->
sig_figs
, 1, 
i2p
,Ås->
unô_ba£
);

1209 
bw_∑…
 = 
	`num2°r
(
bw
, 
ts
->
sig_figs
, 1, !
i2p
,Ås->
unô_ba£
);

1210 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
bw_p
, 
bw_∑…
);

1211 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1213 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "IOPS");

1214 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
i›s_p
);

1215 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Runtime (msec)");

1216 
	`œbñ_£t_öt_vÆue
(
œbñ
, 
ts
->
ru¡ime
[
ddú
]);

1218 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
[0], &
max
[0], &
món
[0], &
dev
[0])) {

1219 
p_of_agg
 = 100.0;

1220 c⁄° *
bw_°r
 = "KiB/s";

1221 
tmp
[32];

1223 i‡(
rs
->
agg
[
ddú
]) {

1224 
p_of_agg
 = 
món
[0] * 100 / (Ë
rs
->
agg
[
ddú
];

1225 i‡(
p_of_agg
 > 100.0)

1226 
p_of_agg
 = 100.0;

1229 i‡(
món
[0] > 1073741824.9) {

1230 
mö
[0] /= 1048576.0;

1231 
max
[0] /= 1048576.0;

1232 
món
[0] /= 1048576.0;

1233 
dev
[0] /= 1048576.0;

1234 
bw_°r
 = "GiB/s";

1237 i‡(
món
[0] > 1047575.9) {

1238 
mö
[0] /= 1024.0;

1239 
max
[0] /= 1024.0;

1240 
món
[0] /= 1024.0;

1241 
dev
[0] /= 1024.0;

1242 
bw_°r
 = "MiB/s";

1244 
	`•rötf
(
tmp
, "B™dwidth (%s)", 
bw_°r
);

1245 
‰ame
 = 
	`gtk_‰ame_√w
(
tmp
);

1246 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1248 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1249 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

1251 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Minimum");

1252 
	`œbñ_£t_öt_vÆue
(
œbñ
, 
mö
[0]);

1253 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Maximum");

1254 
	`œbñ_£t_öt_vÆue
(
œbñ
, 
max
[0]);

1255 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Percentage of jobs");

1256 
	`•rötf
(
tmp
, "%3.2f%%", 
p_of_agg
);

1257 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1258 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Average");

1259 
	`•rötf
(
tmp
, "%5.02f", 
món
[0]);

1260 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1261 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Standard deviation");

1262 
	`•rötf
(
tmp
, "%5.02f", 
dev
[0]);

1263 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1266 i‡(
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
[0], &
max
[0], &
món
[0], &
dev
[0]))

1267 
Êags
 |
GFIO_SLAT
;

1268 i‡(
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
[1], &
max
[1], &
món
[1], &
dev
[1]))

1269 
Êags
 |
GFIO_CLAT
;

1270 i‡(
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
[2], &
max
[2], &
món
[2], &
dev
[2]))

1271 
Êags
 |
GFIO_LAT
;

1273 i‡(
Êags
) {

1274 
‰ame
 = 
	`gtk_‰ame_√w
("Latency");

1275 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1277 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1278 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

1280 i‡(
Êags
 & 
GFIO_SLAT
)

1281 
	`gfio_show_œt
(
vbox
, "Submissi⁄Ü©ícy", 
mö
[0], 
max
[0], 
món
[0], 
dev
[0]);

1282 i‡(
Êags
 & 
GFIO_CLAT
)

1283 
	`gfio_show_œt
(
vbox
, "Com∂ëi⁄Ü©ícy", 
mö
[1], 
max
[1], 
món
[1], 
dev
[1]);

1284 i‡(
Êags
 & 
GFIO_LAT
)

1285 
	`gfio_show_œt
(
vbox
, "TŸÆÜ©ícy", 
mö
[2], 
max
[2], 
món
[2], 
dev
[2]);

1288 i‡(
ts
->
˛©_≥r˚¡ûes
)

1289 
	`gfio_show_˛©_≥r˚¡ûes
(
gc
, 
maö_vbox
, 
ts
, 
ddú
);

1291 
	`‰ì
(
io_p
);

1292 
	`‰ì
(
bw_p
);

1293 
	`‰ì
(
io_∑…
);

1294 
	`‰ì
(
bw_∑…
);

1295 
	`‰ì
(
i›s_p
);

1296 
	}
}

1298 
	$__gfio_di•œy_íd_ªsu…s
(
GtkWidgë
 *
wö
, 
gfio_˛õ¡
 *
gc
,

1299 
thªad_°©
 *
ts
,

1300 
group_run_°©s
 *
rs
)

1302 
GtkWidgë
 *
box
, *
vbox
, *
íåy
, *
s¸ﬁl
;

1303 
i
;

1305 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1306 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 5);

1307 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1309 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1311 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1312 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
TRUE
, 
FALSE
, 5);

1314 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
vbox
);

1316 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
wö
), 
s¸ﬁl
, 
	`gtk_œbñ_√w
(
ts
->
«me
));

1318 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Name");

1319 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
ts
->
«me
);

1320 i‡(
	`°æí
(
ts
->
des¸ùti⁄
)) {

1321 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Description");

1322 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
ts
->
des¸ùti⁄
);

1324 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Group ID");

1325 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
groupid
);

1326 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Jobs");

1327 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
membîs
);

1328 
gc
->
îr_íåy
 = 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Error");

1329 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
îr‹
);

1330 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "PID");

1331 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
pid
);

1333 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1334 i‡(
ts
->
io_byãs
[
i
])

1335 
	`gfio_show_ddú_°©us
(
gc
, 
vbox
, 
rs
, 
ts
, 
i
);

1338 
	`gfio_show_œãncy_buckës
(
gc
, 
vbox
, 
ts
);

1339 
	`gfio_show_˝u_ußge
(
vbox
, 
ts
);

1340 
	`gfio_show_io_dïths
(
vbox
, 
ts
);

1341 
	}
}

1343 
	$gfio_di•œy_íd_ªsu…s
(
gfio_˛õ¡
 *
gc
)

1345 
gui_íåy
 *
ge
 = 
gc
->ge;

1346 
GtkWidgë
 *
ªs_nŸebook
;

1347 
i
;

1349 
ªs_nŸebook
 = 
	`gë_ªsu…s_wödow
(
ge
);

1351 
i
 = 0; i < 
gc
->
ƒ_ªsu…s
; i++) {

1352 
íd_ªsu…s
 *
e
 = &
gc
->
ªsu…s
[
i
];

1354 
	`__gfio_di•œy_íd_ªsu…s
(
ªs_nŸebook
, 
gc
, &
e
->
ts
, &e->
gs
);

1357 i‡(
	`gfio_disk_utû_show
(
gc
))

1358 
	`gtk_widgë_show_Æl
(
ge
->
ªsu…s_wödow
);

1359 
	}
}

1361 
	$gfio_di•œy_ts
(
fio_˛õ¡
 *
˛õ¡
, 
thªad_°©
 *
ts
,

1362 
group_run_°©s
 *
rs
)

1364 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

1365 
gui_íåy
 *
ge
 = 
gc
->ge;

1367 
	`gfio_add_íd_ªsu…s
(
gc
, 
ts
, 
rs
);

1369 
	`gdk_thªads_íãr
();

1370 i‡(
ge
->
ªsu…s_wödow
)

1371 
	`__gfio_di•œy_íd_ªsu…s
(
ge
->
ªsu…s_nŸebook
, 
gc
, 
ts
, 
rs
);

1373 
	`gfio_di•œy_íd_ªsu…s
(
gc
);

1374 
	`gdk_thªads_Àave
();

1375 
	}
}

1377 
	$gfio_˛õ¡_ªmoved
(
fio_˛õ¡
 *
˛õ¡
)

1379 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

1381 
	`as£π
(
gc
->
˛õ¡
 == client);

1382 
	`fio_put_˛õ¡
(
gc
->
˛õ¡
);

1383 
gc
->
˛õ¡
 = 
NULL
;

1384 
	}
}

1386 
˛õ¡_›s
 
	ggfio_˛õ¡_›s
 = {

1387 .
ãxt
 = 
gfio_ãxt_›
,

1388 .
	gdisk_utû
 = 
gfio_disk_utû_›
,

1389 .
	gthªad_°©us
 = 
gfio_thªad_°©us_›
,

1390 .
	ggroup_°©s
 = 
gfio_group_°©s_›
,

1391 .
	gjobs_ëa
 = 
gfio_upd©e_˛õ¡_ëa
,

1392 .
	gëa
 = 
gfio_upd©e_Æl_ëa
,

1393 .
	g¥obe
 = 
gfio_¥obe_›
,

1394 .
	gquô
 = 
gfio_quô_›
,

1395 .
	gadd_job
 = 
gfio_add_job_›
,

1396 .
	gupd©e_job
 = 
gfio_upd©e_job_›
,

1397 .
	gtimed_out
 = 
gfio_˛õ¡_timed_out
,

1398 .
	g°›
 = 
gfio_˛õ¡_°›
,

1399 .
	g°¨t
 = 
gfio_˛õ¡_°¨t
,

1400 .
	gjob_°¨t
 = 
gfio_˛õ¡_job_°¨t
,

1401 .
	gªmoved
 = 
gfio_˛õ¡_ªmoved
,

1402 .
	gëa_m£c
 = 
FIO_CLIENT_DEF_ETA_MSEC
,

1403 .
	g°ay_c⁄√˘ed
 = 1,

1404 .
	g˛õ¡_ty≥
 = 
FIO_CLIENT_TYPE_GUI
,

	@/home/ysjin/Desktop/fio/fio/gclient.h

1 #i‚de‡
GFIO_CLIENT_H


2 
	#GFIO_CLIENT_H


	)

4 
˛õ¡_›s
 
gfio_˛õ¡_›s
;

6 
gfio_di•œy_íd_ªsu…s
(
gfio_˛õ¡
 *);

8 
	#GFIO_READ_R
 0.13

	)

9 
	#GFIO_READ_G
 0.54

	)

10 
	#GFIO_READ_B
 0.13

	)

11 
	#GFIO_WRITE_R
 1.00

	)

12 
	#GFIO_WRITE_G
 0.00

	)

13 
	#GFIO_WRITE_B
 0.00

	)

14 
	#GFIO_TRIM_R
 0.24

	)

15 
	#GFIO_TRIM_G
 0.18

	)

16 
	#GFIO_TRIM_B
 0.52

	)

	@/home/ysjin/Desktop/fio/fio/gcompat.c

1 
	~<gtk/gtk.h
>

3 
	~"gcom∑t.h
"

5 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 24

7 
GtkWidgë
 *
	$gtk_combo_box_ãxt_√w
()

9  
	`gtk_combo_box_√w
();

10 
	}
}

12 
	$gtk_combo_box_ãxt_≠≥nd_ãxt
(
GtkComboBoxText
 *
combo_box
,

13 c⁄° 
gch¨
 *
ãxt
)

15 
	`gtk_combo_box_≠≥nd_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
), 
ãxt
);

16 
	}
}

18 
	$gtk_combo_box_ãxt_ö£π_ãxt
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
,

19 c⁄° 
gch¨
 *
ãxt
)

21 
	`gtk_combo_box_ö£π_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
), 
posôi⁄
, 
ãxt
);

22 
	}
}

24 
	$gtk_combo_box_ãxt_¥ïíd_ãxt
(
GtkComboBoxText
 *
combo_box
,

25 c⁄° 
gch¨
 *
ãxt
)

27 
	`gtk_combo_box_¥ïíd_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
), 
ãxt
);

28 
	}
}

30 
gch¨
 *
	$gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
GtkComboBoxText
 *
combo_box
)

32  
	`gtk_combo_box_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
));

33 
	}
}

37 #i‡
GTK_MAJOR_VERSION
 < 3

39 
guöt
 
	$gtk_widgë_gë_Æloˇãd_width
(
GtkWidgë
 *
w
)

41  
w
->
Æloˇti⁄
.
width
;

42 
	}
}

44 
guöt
 
	$gtk_widgë_gë_Æloˇãd_height
(
GtkWidgë
 *
w
)

46  
w
->
Æloˇti⁄
.
height
;

47 
	}
}

51 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 18

52 
	$gtk_widgë_£t_ˇn_focus
(
GtkWidgë
 *
widgë
, 
gboﬁón
 
ˇn_focus
)

54 i‡(
ˇn_focus
)

55 
	`GTK_WIDGET_SET_FLAGS
(
widgë
, 
GTK_CAN_FOCUS
);

57 
	`GTK_WIDGET_UNSET_FLAGS
(
widgë
, 
GTK_CAN_FOCUS
);

58 
	}
}

	@/home/ysjin/Desktop/fio/fio/gcompat.h

1 #i‚de‡
GFIO_GTK_COMPAT


2 
	#GFIO_GTK_COMPAT


	)

4 
	~<gtk/gtk.h
>

6 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 24

7 
	gGtkComboBoxText
;

8 
GtkComboBox
 
	tGtkComboBoxText
;

9 
GtkWidgë
 *
gtk_combo_box_ãxt_√w
();

10 
GtkWidgë
 *
gtk_combo_box_ãxt_√w_wôh_íåy
();

11 
gtk_combo_box_ãxt_≠≥nd_ãxt
(
GtkComboBoxText
 *
combo_box
, c⁄° 
gch¨
 *
ãxt
);

12 
gtk_combo_box_ãxt_ö£π_ãxt
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
, c⁄° 
gch¨
 *
ãxt
);

13 
gtk_combo_box_ãxt_¥ïíd_ãxt
(
GtkComboBoxText
 *
combo_box
, c⁄° 
gch¨
 *
ãxt
);

14 
gtk_combo_box_ãxt_ªmove
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
);

15 
gch¨
 *
gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
GtkComboBoxText
 *
combo_box
);

17 
	#GTK_COMBO_BOX_TEXT
 
GTK_COMBO_BOX


	)

20 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 14

21 
ölöe
 
GtkWidgë
 *
	$gtk_dülog_gë_c⁄ã¡_¨ó
(
GtkDülog
 *
dülog
)

23  
dülog
->
vbox
;

24 
	}
}

25 
ölöe
 
GdkWödow
 *
	$gtk_widgë_gë_wödow
(
GtkWidgë
 *
w
)

27  
w
->
wödow
;

28 
	}
}

31 #i‡
GTK_MAJOR_VERSION
 < 3

32 
guöt
 
gtk_widgë_gë_Æloˇãd_width
(
GtkWidgë
 *
w
);

33 
guöt
 
gtk_widgë_gë_Æloˇãd_height
(
GtkWidgë
 *
w
);

36 #i‡
GTK_MAJOR_VERSION
 == 3

37 
	#GFIO_DRAW_EVENT
 "døw"

	)

38 #ñi‡
GTK_MAJOR_VERSION
 == 2

39 
	#GFIO_DRAW_EVENT
 "expo£_evít"

	)

42 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 18

43 
gtk_widgë_£t_ˇn_focus
(
GtkWidgë
 *
widgë
, 
gboﬁón
 
ˇn_focus
);

	@/home/ysjin/Desktop/fio/fio/gerror.c

1 
	~<loˇÀ.h
>

2 
	~<mÆloc.h
>

3 
	~<°rög.h
>

4 
	~<°d¨g.h
>

6 
	~<gtk/gtk.h
>

8 
	~"gfio.h
"

9 
	~"gîr‹.h
"

11 
	$⁄_öfo_b¨_ª•⁄£
(
GtkWidgë
 *
widgë
, 
göt
 
ª•⁄£
,

12 
gpoöãr
 
d©a
)

14 
gui
 *
ui
 = (guò*Ë
d©a
;

16 i‡(
ª•⁄£
 =
GTK_RESPONSE_OK
) {

17 
	`gtk_widgë_de°roy
(
widgë
);

18 
ui
->
îr‹_öfo_b¨
 = 
NULL
;

20 
	}
}

22 
	$ªp‹t_îr‹
(
gui_íåy
 *
ge
, 
GEº‹
 *
îr‹
)

24 
gui
 *
ui
 = 
ge
->ui;

26 i‡(
ui
->
îr‹_öfo_b¨
 =
NULL
) {

27 
GtkWidgë
 *
c⁄èöî
;

29 
ui
->
îr‹_öfo_b¨
 = 
	`gtk_öfo_b¨_√w_wôh_buâ⁄s
(
GTK_STOCK_OK
,

30 
GTK_RESPONSE_OK
, 
NULL
);

31 
	`g_sig«l_c⁄√˘
(
ui
->
îr‹_öfo_b¨
, "ª•⁄£", 
	`G_CALLBACK
(
⁄_öfo_b¨_ª•⁄£
), ui);

32 
	`gtk_öfo_b¨_£t_mesßge_ty≥
(
	`GTK_INFO_BAR
(
ui
->
îr‹_öfo_b¨
),

33 
GTK_MESSAGE_ERROR
);

35 
ui
->
îr‹_œbñ
 = 
	`gtk_œbñ_√w
(
îr‹
->
mesßge
);

36 
c⁄èöî
 = 
	`gtk_öfo_b¨_gë_c⁄ã¡_¨ó
(
	`GTK_INFO_BAR
(
ui
->
îr‹_öfo_b¨
));

37 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
c⁄èöî
), 
ui
->
îr‹_œbñ
);

39 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
ui
->
vbox
), ui->
îr‹_öfo_b¨
, 
FALSE
, FALSE, 0);

40 
	`gtk_widgë_show_Æl
(
ui
->
vbox
);

42 
buf„r
[256];

43 
	`¢¥ötf
(
buf„r
, (buffer), "FailedÅo open file.");

44 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ui
->
îr‹_œbñ
), 
buf„r
);

46 
	}
}

48 
	$gfio_ªp‹t_îr‹
(
gui_íåy
 *
ge
, c⁄° *
f‹m©
, ...)

50 
va_li°
 
¨gs
;

51 
GEº‹
 *
îr‹
;

53 
	`va_°¨t
(
¨gs
, 
f‹m©
);

54 
îr‹
 = 
	`g_îr‹_√w_vÆi°
(
	`g_qu¨k_‰om_°rög
("fio"), 1, 
f‹m©
, 
¨gs
);

55 
	`va_íd
(
¨gs
);

57 
	`ªp‹t_îr‹
(
ge
, 
îr‹
);

58 
	`g_îr‹_‰ì
(
îr‹
);

59 
	}
}

61 
	$gfio_ªp‹t_öfo
(
gui
 *
ui
, c⁄° *
tôÀ
, c⁄° *
mesßge
)

63 
GtkWidgë
 *
dülog
, *
c⁄ã¡
, *
œbñ
;

65 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
(
tôÀ
, 
	`GTK_WINDOW
(
ui
->
wödow
),

66 
GTK_DIALOG_MODAL
 | 
GTK_DIALOG_DESTROY_WITH_PARENT
,

67 
GTK_STOCK_OK
, 
GTK_RESPONSE_OK
, 
NULL
);

69 
c⁄ã¡
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

70 
œbñ
 = 
	`gtk_œbñ_√w
(
mesßge
);

71 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
c⁄ã¡
), 
œbñ
);

72 
	`gtk_widgë_show_Æl
(
dülog
);

73 
	`gtk_dülog_£t_deÁu…_ª•⁄£
(
	`GTK_DIALOG
(
dülog
), 
GTK_RESPONSE_ACCEPT
);

74 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

75 
	`gtk_widgë_de°roy
(
dülog
);

76 
	}
}

	@/home/ysjin/Desktop/fio/fio/gerror.h

1 #i‚de‡
GFIO_ERROR_H


2 
	#GFIO_ERROR_H


	)

4 
gfio_ªp‹t_îr‹
(
gui_íåy
 *
ge
, c⁄° *
f‹m©
, ...);

5 
gfio_ªp‹t_öfo
(
gui
 *
ui
, c⁄° *
tôÀ
, c⁄° *
mesßge
);

	@/home/ysjin/Desktop/fio/fio/gettime-thread.c

1 
	~<uni°d.h
>

2 
	~<m©h.h
>

3 
	~<sys/time.h
>

4 
	~<time.h
>

6 
	~"fio.h
"

7 
	~"smÆloc.h
"

9 
time•ec
 *
	gfio_ts
 = 
NULL
;

10 
	gfio_gtod_ofÊﬂd
 = 0;

11 
±hªad_t
 
	ggtod_thªad
;

12 
os_˝u_mask_t
 
	gfio_gtod_˝umask
;

14 
	$fio_gtod_öô
()

16 i‡(
fio_ts
)

19 
fio_ts
 = 
	`smÆloc
((*fio_ts));

20 i‡(!
fio_ts
)

21 
	`log_îr
("fio: smallocÖoolÉxhausted\n");

22 
	}
}

24 
	$fio_gtod_upd©e
()

26 i‡(
fio_ts
) {

27 
timevÆ
 
__tv
;

29 
	`gëtimeofday
(&
__tv
, 
NULL
);

30 
fio_ts
->
tv_£c
 = 
__tv
.tv_sec;

31 
	`wrôe_b¨rõr
();

32 
fio_ts
->
tv_n£c
 = 
__tv
.
tv_u£c
 * 1000;

33 
	`wrôe_b¨rõr
();

35 
	}
}

37 
	sgtod_˝u_d©a
 {

38 
fio_muãx
 *
	mmuãx
;

39 
	m˝u
;

42 *
	$gtod_thªad_maö
(*
d©a
)

44 
fio_muãx
 *
muãx
 = 
d©a
;

45 
ªt
;

47 
ªt
 = 
	`fio_£èfföôy
(
	`gëtid
(), 
fio_gtod_˝umask
);

49 
	`fio_muãx_up
(
muãx
);

51 i‡(
ªt
 == -1) {

52 
	`log_îr
("gtod: setaffinity failed\n");

53  
NULL
;

62 
thªads
) {

63 
	`fio_gtod_upd©e
();

64 
n›
;

67  
NULL
;

68 
	}
}

70 
	$fio_°¨t_gtod_thªad
()

72 
fio_muãx
 *
muãx
;

73 
±hªad_©å_t
 
©å
;

74 
ªt
;

76 
muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_LOCKED
);

77 i‡(!
muãx
)

80 
	`±hªad_©å_öô
(&
©å
);

81 
	`±hªad_©å_£t°acksize
(&
©å
, 2 * 
PTHREAD_STACK_MIN
);

82 
ªt
 = 
	`±hªad_¸óã
(&
gtod_thªad
, &
©å
, 
gtod_thªad_maö
, 
muãx
);

83 
	`±hªad_©å_de°roy
(&
©å
);

84 i‡(
ªt
) {

85 
	`log_îr
("C™'à¸óã gtodÅhªad: %s\n", 
	`°ªº‹
(
ªt
));

86 
îr
;

89 
ªt
 = 
	`±hªad_dëach
(
gtod_thªad
);

90 i‡(
ªt
) {

91 
	`log_îr
("C™'àdëach gtodÅhªad: %s\n", 
	`°ªº‹
(
ªt
));

92 
îr
;

95 
	`d¥öt
(
FD_MUTEX
, "wait on startup_mutex\n");

96 
	`fio_muãx_down
(
muãx
);

97 
	`d¥öt
(
FD_MUTEX
, "done waiting on startup_mutex\n");

98 
îr
:

99 
	`fio_muãx_ªmove
(
muãx
);

100  
ªt
;

101 
	}
}

103 
	$fio_gtod_£t_˝u
(
˝u
)

105 #ifde‡
FIO_HAVE_CPU_AFFINITY


106 
	`fio_˝u_£t
(&
fio_gtod_˝umask
, 
˝u
);

108 
	}
}

	@/home/ysjin/Desktop/fio/fio/gettime.c

5 
	~<uni°d.h
>

6 
	~<m©h.h
>

7 
	~<sys/time.h
>

8 
	~<time.h
>

10 
	~"fio.h
"

11 
	~"smÆloc.h
"

13 
	~"hash.h
"

14 
	~"os/os.h
"

16 #i‡
deföed
(
ARCH_HAVE_CPU_CLOCK
)

17 #i‚de‡
ARCH_CPU_CLOCK_CYCLES_PER_USEC


18 
	gcy˛es_≥r_m£c
;

19 
	gcy˛es_°¨t
;

20 
	g˛ock_mu…
;

21 
	gmax_cy˛es_mask
;

22 
	gn£cs_f‹_max_cy˛es
;

23 
	g˛ock_shi·
;

24 
	gmax_cy˛es_shi·
;

25 
	#MAX_CLOCK_SEC
 60*60

	)

27 #ifde‡
ARCH_CPU_CLOCK_WRAPS


28 
	gcy˛es_wøp
;

31 
boﬁ
 
	gtsc_ªlübÀ
 = 
Ál£
;

33 
	stv_vÆid
 {

34 
	mw¨√d
;

36 #ifde‡
ARCH_HAVE_CPU_CLOCK


37 #ifde‡
CONFIG_TLS_THREAD


38 
__thªad
 
tv_vÆid
 
	g°©ic_tv_vÆid
;

40 
±hªad_key_t
 
	gtv_és_key
;

44 
fio_cs
 
	gfio_˛ock_sour˚
 = 
FIO_PREFERRED_CLOCK_SOURCE
;

45 
	gfio_˛ock_sour˚_£t
 = 0;

46 
fio_cs
 
	gfio_˛ock_sour˚_öôed
 = 
CS_INVAL
;

48 #ifde‡
FIO_DEBUG_TIME


50 
	#HASH_BITS
 8

	)

51 
	#HASH_SIZE
 (1 << 
HASH_BITS
)

	)

53 
Êi°_hód
 
	ghash
[
HASH_SIZE
];

54 
	ggtod_öôed
;

56 
	sgtod_log
 {

57 
Êi°_hód
 
	mli°
;

58 *
	mˇŒî
;

59 
	mˇŒs
;

62 
gtod_log
 *
	$föd_hash
(*
ˇŒî
)

64 
h
 = 
	`hash_±r
(
ˇŒî
, 
HASH_BITS
);

65 
Êi°_hód
 *
íåy
;

67 
	`Êi°_f‹_óch
(
íåy
, &
hash
[
h
]) {

68 
gtod_log
 *
log
 = 
	`Êi°_íåy
(
íåy
, gtod_log,

69 
li°
);

71 i‡(
log
->
ˇŒî
 == caller)

72  
log
;

75  
NULL
;

76 
	}
}

78 
	$öc_ˇŒî
(*
ˇŒî
)

80 
gtod_log
 *
log
 = 
	`föd_hash
(
ˇŒî
);

82 i‡(!
log
) {

83 
h
;

85 
log
 = 
	`mÆloc
((*log));

86 
	`INIT_FLIST_HEAD
(&
log
->
li°
);

87 
log
->
ˇŒî
 = caller;

88 
log
->
ˇŒs
 = 0;

90 
h
 = 
	`hash_±r
(
ˇŒî
, 
HASH_BITS
);

91 
	`Êi°_add_èû
(&
log
->
li°
, &
hash
[
h
]);

94 
log
->
ˇŒs
++;

95 
	}
}

97 
	$gtod_log_ˇŒî
(*
ˇŒî
)

99 i‡(
gtod_öôed
)

100 
	`öc_ˇŒî
(
ˇŒî
);

101 
	}
}

103 
fio_exô
 
	$fio_dump_gtod
()

105 
tŸÆ_ˇŒs
 = 0;

106 
i
;

108 
i
 = 0; i < 
HASH_SIZE
; i++) {

109 
Êi°_hód
 *
íåy
;

110 
gtod_log
 *
log
;

112 
	`Êi°_f‹_óch
(
íåy
, &
hash
[
i
]) {

113 
log
 = 
	`Êi°_íåy
(
íåy
, 
gtod_log
, 
li°
);

115 
	`¥ötf
("fun˘i⁄ %p, cÆl†%lu\n", 
log
->
ˇŒî
,

116 
log
->
ˇŒs
);

117 
tŸÆ_ˇŒs
 +
log
->
ˇŒs
;

121 
	`¥ötf
("TŸÆ %lu gëtimeofday\n", 
tŸÆ_ˇŒs
);

122 
	}
}

124 
fio_öô
 
	$gtod_öô
()

126 
i
;

128 
i
 = 0; i < 
HASH_SIZE
; i++)

129 
	`INIT_FLIST_HEAD
(&
hash
[
i
]);

131 
gtod_öôed
 = 1;

132 
	}
}

136 #ifde‡
CONFIG_CLOCK_GETTIME


137 
	$fûl_˛ock_gëtime
(
time•ec
 *
ts
)

139 #i‡
	`deföed
(
CONFIG_CLOCK_MONOTONIC_RAW
)

140  
	`˛ock_gëtime
(
CLOCK_MONOTONIC_RAW
, 
ts
);

141 #ñi‡
	`deföed
(
CONFIG_CLOCK_MONOTONIC
)

142  
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, 
ts
);

144  
	`˛ock_gëtime
(
CLOCK_REALTIME
, 
ts
);

146 
	}
}

149 
	$__fio_gëtime
(
time•ec
 *
ç
)

151 
fio_˛ock_sour˚
) {

152 #ifde‡
CONFIG_GETTIMEOFDAY


153 
CS_GTOD
: {

154 
timevÆ
 
tv
;

155 
	`gëtimeofday
(&
tv
, 
NULL
);

157 
ç
->
tv_£c
 = 
tv
.tv_sec;

158 
ç
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

162 #ifde‡
CONFIG_CLOCK_GETTIME


163 
CS_CGETTIME
: {

164 i‡(
	`fûl_˛ock_gëtime
(
ç
) < 0) {

165 
	`log_îr
("fio: clock_gettime fails\n");

166 
	`as£π
(0);

171 #ifde‡
ARCH_HAVE_CPU_CLOCK


172 
CS_CPUCLOCK
: {

173 
uöt64_t
 
n£cs
, 
t
, 
mu…ùÀs
;

174 
tv_vÆid
 *
tv
;

176 #ifde‡
CONFIG_TLS_THREAD


177 
tv
 = &
°©ic_tv_vÆid
;

179 
tv
 = 
	`±hªad_gë•ecific
(
tv_és_key
);

182 
t
 = 
	`gë_˝u_˛ock
();

183 #ifde‡
ARCH_CPU_CLOCK_WRAPS


184 i‡(
t
 < 
cy˛es_°¨t
 && !
cy˛es_wøp
)

185 
cy˛es_wøp
 = 1;

186 i‡(
cy˛es_wøp
 && 
t
 >
cy˛es_°¨t
 && !
tv
->
w¨√d
) {

187 
	`log_îr
("fio: double CPU clock wrap\n");

188 
tv
->
w¨√d
 = 1;

191 #ifde‡
ARCH_CPU_CLOCK_CYCLES_PER_USEC


192 
n£cs
 = 
t
 / 
ARCH_CPU_CLOCK_CYCLES_PER_USEC
 * 1000;

194 
t
 -
cy˛es_°¨t
;

195 
mu…ùÀs
 = 
t
 >> 
max_cy˛es_shi·
;

196 
n£cs
 = 
mu…ùÀs
 * 
n£cs_f‹_max_cy˛es
;

197 
n£cs
 +((
t
 & 
max_cy˛es_mask
Ë* 
˛ock_mu…
Ë>> 
˛ock_shi·
;

199 
ç
->
tv_£c
 = 
n£cs
 / 1000000000ULL;

200 
ç
->
tv_n£c
 = 
n£cs
 % 1000000000ULL;

205 
	`log_îr
("fio: invÆid clock sour˚ %d\n", 
fio_˛ock_sour˚
);

208 
	}
}

210 #ifde‡
FIO_DEBUG_TIME


211 
	$fio_gëtime
(
time•ec
 *
ç
, *
ˇŒî
)

213 
	$fio_gëtime
(
time•ec
 *
ç
, 
fio_unu£d
 *
ˇŒî
)

216 #ifde‡
FIO_DEBUG_TIME


217 i‡(!
ˇŒî
)

218 
ˇŒî
 = 
	`__buûtö_ªtu∫_addªss
(0);

220 
	`gtod_log_ˇŒî
(
ˇŒî
);

222 i‡(
	`fio_u∆ikñy
(
	`fio_gëtime_ofÊﬂd
(
ç
)))

225 
	`__fio_gëtime
(
ç
);

226 
	}
}

228 #i‡
deföed
(
ARCH_HAVE_CPU_CLOCK
Ë&& !deföed(
ARCH_CPU_CLOCK_CYCLES_PER_USEC
)

229 
	$gë_cy˛es_≥r_m£c
()

231 
time•ec
 
s
, 
e
;

232 
uöt64_t
 
c_s
, 
c_e
;

233 
fio_cs
 
ﬁd_cs
 = 
fio_˛ock_sour˚
;

234 
uöt64_t
 
ñ≠£d
;

236 #ifde‡
CONFIG_CLOCK_GETTIME


237 
fio_˛ock_sour˚
 = 
CS_CGETTIME
;

239 
fio_˛ock_sour˚
 = 
CS_GTOD
;

241 
	`__fio_gëtime
(&
s
);

243 
c_s
 = 
	`gë_˝u_˛ock
();

245 
	`__fio_gëtime
(&
e
);

247 
ñ≠£d
 = 
	`utime_sö˚
(&
s
, &
e
);

248 i‡(
ñ≠£d
 >= 1280) {

249 
c_e
 = 
	`gë_˝u_˛ock
();

254 
fio_˛ock_sour˚
 = 
ﬁd_cs
;

255  (
c_e
 - 
c_s
Ë* 1000 / 
ñ≠£d
;

256 
	}
}

258 
	#NR_TIME_ITERS
 50

	)

260 
	$ˇlibøã_˝u_˛ock
()

262 
dñè
, 
món
, 
S
;

263 
uöt64_t
 
möc
, 
maxc
, 
avg
, 
cy˛es
[
NR_TIME_ITERS
];

264 
i
, 
ßm∂es
, 
s·
 = 0;

265 
tmp
, 
max_ticks
, 
max_mu…
;

267 
cy˛es
[0] = 
	`gë_cy˛es_≥r_m£c
();

268 
S
 = 
dñè
 = 
món
 = 0.0;

269 
i
 = 0; i < 
NR_TIME_ITERS
; i++) {

270 
cy˛es
[
i
] = 
	`gë_cy˛es_≥r_m£c
();

271 
dñè
 = 
cy˛es
[
i
] - 
món
;

272 i‡(
dñè
) {

273 
món
 +
dñè
 / (
i
 + 1.0);

274 
S
 +
dñè
 * (
cy˛es
[
i
] - 
món
);

282 i‡(!
cy˛es
[0] && !cy˛es[
NR_TIME_ITERS
 - 1])

285 
S
 = 
	`sqπ
(S / (
NR_TIME_ITERS
 - 1.0));

287 
möc
 = -1ULL;

288 
maxc
 = 
ßm∂es
 = 
avg
 = 0;

289 
i
 = 0; i < 
NR_TIME_ITERS
; i++) {

290 
this
 = 
cy˛es
[
i
];

292 
möc
 = 
	`mö
(
cy˛es
[
i
], minc);

293 
maxc
 = 
	`max
(
cy˛es
[
i
], maxc);

295 i‡((
	`fmax
(
this
, 
món
Ë- 
	`fmö
—his, món)Ë> 
S
)

297 
ßm∂es
++;

298 
avg
 +
this
;

301 
S
 /(Ë
NR_TIME_ITERS
;

303 
i
 = 0; i < 
NR_TIME_ITERS
; i++)

304 
	`d¥öt
(
FD_TIME
, "cy˛es[%d]=%Œu\n", 
i
, (Ë
cy˛es
[i]);

306 
avg
 /
ßm∂es
;

307 
cy˛es_≥r_m£c
 = 
avg
;

308 
	`d¥öt
(
FD_TIME
, "avg: %Œu\n", (Ë
avg
);

309 
	`d¥öt
(
FD_TIME
, "min=%llu, max=%llu, mean=%f, S=%f\n",

310 (Ë
möc
,

311 (Ë
maxc
, 
món
, 
S
);

313 
max_ticks
 = 
MAX_CLOCK_SEC
 * 
cy˛es_≥r_m£c
 * 1000ULL;

314 
max_mu…
 = 
ULLONG_MAX
 / 
max_ticks
;

315 
	`d¥öt
(
FD_TIME
, "\n\nmax_ticks=%llu, __builtin_clzll=%d, "

316 "max_mu…=%Œu\n", 
max_ticks
,

317 
	`__buûtö_˛zŒ
(
max_ticks
), 
max_mu…
);

323 
tmp
 = 
max_mu…
 * 
cy˛es_≥r_m£c
 / 1000000;

324 
tmp
 > 1) {

325 
tmp
 >>= 1;

326 
s·
++;

327 
	`d¥öt
(
FD_TIME
, "tmp=%Œu, s·=%u\n", 
tmp
, 
s·
);

330 
˛ock_shi·
 = 
s·
;

331 
˛ock_mu…
 = (1ULL << 
s·
Ë* 1000000 / 
cy˛es_≥r_m£c
;

332 
	`d¥öt
(
FD_TIME
, "˛ock_shi·=%u, clock_mu…=%Œu\n", 
˛ock_shi·
,

333 
˛ock_mu…
);

339 
max_cy˛es_shi·
 = 
max_cy˛es_mask
 = 0;

340 
tmp
 = 
MAX_CLOCK_SEC
 * 1000ULL * 
cy˛es_≥r_m£c
;

341 
	`d¥öt
(
FD_TIME
, "tmp=%Œu, max_cy˛es_shi·=%u\n", 
tmp
,

342 
max_cy˛es_shi·
);

343 
tmp
 > 1) {

344 
tmp
 >>= 1;

345 
max_cy˛es_shi·
++;

346 
	`d¥öt
(
FD_TIME
, "tmp=%Œu, max_cy˛es_shi·=%u\n", 
tmp
, 
max_cy˛es_shi·
);

353 
n£cs_f‹_max_cy˛es
 = ((1ULL << 
max_cy˛es_shi·
Ë* 
˛ock_mu…
)

354 >> 
˛ock_shi·
;

357 
tmp
 = 0;Åm∞< 
max_cy˛es_shi·
;Åmp++)

358 
max_cy˛es_mask
 |1ULL << 
tmp
;

360 
	`d¥öt
(
FD_TIME
, "max_cycles_shift=%u, 2^max_cycles_shift=%llu, "

363 
max_cy˛es_shi·
, (1ULL << max_cycles_shift),

364 
n£cs_f‹_max_cy˛es
, 
max_cy˛es_mask
);

366 
cy˛es_°¨t
 = 
	`gë_˝u_˛ock
();

367 
	`d¥öt
(
FD_TIME
, "cy˛es_°¨t=%Œu\n", 
cy˛es_°¨t
);

369 
	}
}

371 
	$ˇlibøã_˝u_˛ock
()

373 #ifde‡
ARCH_CPU_CLOCK_CYCLES_PER_USEC


378 
	}
}

381 #i‚de‡
CONFIG_TLS_THREAD


382 
	$fio_loˇl_˛ock_öô
(
is_thªad
)

384 
tv_vÆid
 *
t
;

386 
t
 = 
	`ˇŒoc
(1, (*t));

387 i‡(
	`±hªad_£t•ecific
(
tv_és_key
, 
t
)) {

388 
	`log_îr
("fio: can't set TLS key\n");

389 
	`as£π
(0);

391 
	}
}

393 
	$kûl_tv_és_key
(*
d©a
)

395 
	`‰ì
(
d©a
);

396 
	}
}

398 
	$fio_loˇl_˛ock_öô
(
is_thªad
)

400 
	}
}

403 
	$fio_˛ock_öô
()

405 i‡(
fio_˛ock_sour˚
 =
fio_˛ock_sour˚_öôed
)

408 #i‚de‡
CONFIG_TLS_THREAD


409 i‡(
	`±hªad_key_¸óã
(&
tv_és_key
, 
kûl_tv_és_key
))

410 
	`log_îr
("fio: can't create TLS key\n");

413 
fio_˛ock_sour˚_öôed
 = 
fio_˛ock_sour˚
;

415 i‡(
	`ˇlibøã_˝u_˛ock
())

416 
tsc_ªlübÀ
 = 
Ál£
;

423 i‡(
tsc_ªlübÀ
) {

424 i‡(!
fio_˛ock_sour˚_£t
 && !
	`fio_m⁄Ÿ⁄ic_˛ockã°
(0))

425 
fio_˛ock_sour˚
 = 
CS_CPUCLOCK
;

426 } i‡(
fio_˛ock_sour˚
 =
CS_CPUCLOCK
)

427 
	`log_öfo
("fio: clocksource=cpu mayÇot beÑeliable\n");

428 
	`d¥öt
(
FD_TIME
, "gëtime: clocksour˚=%d\n", (Ë
fio_˛ock_sour˚
);

429 
	}
}

431 
uöt64_t
 
	$¡ime_sö˚
(c⁄° 
time•ec
 *
s
, c⁄° time•e¯*
e
)

433 
öt64_t
 
£c
, 
n£c
;

435 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

436 
n£c
 = 
e
->
tv_n£c
 - 
s
->tv_nsec;

437 i‡(
£c
 > 0 && 
n£c
 < 0) {

438 
£c
--;

439 
n£c
 += 1000000000LL;

445 i‡(
£c
 < 0 || (£¯=0 && 
n£c
 < 0))

448  
n£c
 + (
£c
 * 1000000000LL);

449 
	}
}

451 
uöt64_t
 
	$¡ime_sö˚_now
(c⁄° 
time•ec
 *
s
)

453 
time•ec
 
now
;

455 
	`fio_gëtime
(&
now
, 
NULL
);

456  
	`¡ime_sö˚
(
s
, &
now
);

457 
	}
}

459 
uöt64_t
 
	$utime_sö˚
(c⁄° 
time•ec
 *
s
, c⁄° time•e¯*
e
)

461 
öt64_t
 
£c
, 
u£c
;

463 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

464 
u£c
 = (
e
->
tv_n£c
 - 
s
->tv_nsec) / 1000;

465 i‡(
£c
 > 0 && 
u£c
 < 0) {

466 
£c
--;

467 
u£c
 += 1000000;

473 i‡(
£c
 < 0 || (£¯=0 && 
u£c
 < 0))

476  
u£c
 + (
£c
 * 1000000);

477 
	}
}

479 
uöt64_t
 
	$utime_sö˚_now
(c⁄° 
time•ec
 *
s
)

481 
time•ec
 
t
;

482 #ifde‡
FIO_DEBUG_TIME


483 *
p
 = 
	`__buûtö_ªtu∫_addªss
(0);

485 
	`fio_gëtime
(&
t
, 
p
);

487 
	`fio_gëtime
(&
t
, 
NULL
);

490  
	`utime_sö˚
(
s
, &
t
);

491 
	}
}

493 
uöt64_t
 
	$mtime_sö˚_tv
(c⁄° 
timevÆ
 *
s
, c⁄° timevÆ *
e
)

495 
öt64_t
 
£c
, 
u£c
;

497 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

498 
u£c
 = (
e
->
tv_u£c
 - 
s
->tv_usec);

499 i‡(
£c
 > 0 && 
u£c
 < 0) {

500 
£c
--;

501 
u£c
 += 1000000;

504 i‡(
£c
 < 0 || (£¯=0 && 
u£c
 < 0))

507 
£c
 *= 1000;

508 
u£c
 /= 1000;

509  
£c
 + 
u£c
;

510 
	}
}

512 
uöt64_t
 
	$mtime_sö˚_now
(c⁄° 
time•ec
 *
s
)

514 
time•ec
 
t
;

515 #ifde‡
FIO_DEBUG_TIME


516 *
p
 = 
	`__buûtö_ªtu∫_addªss
(0);

518 
	`fio_gëtime
(&
t
, 
p
);

520 
	`fio_gëtime
(&
t
, 
NULL
);

523  
	`mtime_sö˚
(
s
, &
t
);

524 
	}
}

526 
uöt64_t
 
	$mtime_sö˚
(c⁄° 
time•ec
 *
s
, c⁄° time•e¯*
e
)

528 
öt64_t
 
£c
, 
u£c
;

530 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

531 
u£c
 = (
e
->
tv_n£c
 - 
s
->tv_nsec) / 1000;

532 i‡(
£c
 > 0 && 
u£c
 < 0) {

533 
£c
--;

534 
u£c
 += 1000000;

537 i‡(
£c
 < 0 || (£¯=0 && 
u£c
 < 0))

540 
£c
 *= 1000;

541 
u£c
 /= 1000;

542  
£c
 + 
u£c
;

543 
	}
}

545 
uöt64_t
 
	$time_sö˚_now
(c⁄° 
time•ec
 *
s
)

547  
	`mtime_sö˚_now
(
s
) / 1000;

548 
	}
}

550 #i‡
deföed
(
FIO_HAVE_CPU_AFFINITY
Ë&& deföed(
ARCH_HAVE_CPU_CLOCK
) && \

551 
deföed
(
CONFIG_SYNC_SYNC
Ë&& 
	$deföed
(
CONFIG_CMP_SWAP
)

553 
	#CLOCK_ENTRIES_DEBUG
 100000

	)

554 
	#CLOCK_ENTRIES_TEST
 1000

	)

556 
	s˛ock_íåy
 {

557 
uöt32_t
 
£q
;

558 
uöt32_t
 
˝u
;

559 
uöt64_t
 
tsc
;

562 
	s˛ock_thªad
 {

563 
±hªad_t
 
thªad
;

564 
˝u
;

565 
debug
;

566 
±hªad_muãx_t
 
lock
;

567 
±hªad_muãx_t
 
°¨ãd
;

568 
ƒ_íåõs
;

569 
uöt32_t
 *
£q
;

570 
˛ock_íåy
 *
íåõs
;

573 
ölöe
 
uöt32_t
 
	$©omic32_com∑ª_™d_sw≠
(
uöt32_t
 *
±r
, uöt32_à
ﬁd
,

574 
uöt32_t
 
√w
)

576  
	`__sync_vÆ_com∑ª_™d_sw≠
(
±r
, 
ﬁd
, 
√w
);

577 
	}
}

579 *
	$˛ock_thªad_‚
(*
d©a
)

581 
˛ock_thªad
 *
t
 = 
d©a
;

582 
˛ock_íåy
 *
c
;

583 
os_˝u_mask_t
 
˝u_mask
;

584 
fú°
;

585 
i
;

587 i‡(
	`fio_˝u£t_öô
(&
˝u_mask
)) {

588 
__îr
 = 
î∫o
;

590 
	`log_îr
("˛ock cpu£àöô faûed: %s\n", 
	`°ªº‹
(
__îr
));

591 
îr_out
;

594 
	`fio_˝u_£t
(&
˝u_mask
, 
t
->
˝u
);

596 i‡(
	`fio_£èfföôy
(
	`gëtid
(), 
˝u_mask
) == -1) {

597 
__îr
 = 
î∫o
;

599 
	`log_îr
("˛ock sëafföôy faûed: %s\n", 
	`°ªº‹
(
__îr
));

600 
îr
;

603 
	`±hªad_muãx_lock
(&
t
->
lock
);

604 
	`±hªad_muãx_u∆ock
(&
t
->
°¨ãd
);

606 
fú°
 = 
	`gë_˝u_˛ock
();

607 
c
 = &
t
->
íåõs
[0];

608 
i
 = 0; i < 
t
->
ƒ_íåõs
; i++, 
c
++) {

609 
uöt32_t
 
£q
;

610 
uöt64_t
 
tsc
;

612 
c
->
˝u
 = 
t
->cpu;

614 
£q
 = *
t
->seq;

615 i‡(
£q
 =
UINT_MAX
)

617 
	`__sync_synchr⁄ize
();

618 
tsc
 = 
	`gë_˝u_˛ock
();

619 } 
£q
 !
	`©omic32_com∑ª_™d_sw≠
(
t
->seq, seq, seq + 1));

621 i‡(
£q
 =
UINT_MAX
)

624 
c
->
£q
 = seq;

625 
c
->
tsc
 =Åsc;

628 i‡(
t
->
debug
) {

629 
˛ocks
;

631 
˛ocks
 = 
t
->
íåõs
[
i
 - 1].
tsc
 -Å->entries[0].tsc;

632 
	`log_öfo
("cs: cpu%3d: %Œu clock†£í, fú° %Œu\n", 
t
->
˝u
,

633 
˛ocks
, 
fú°
);

640 i‡(
i
 > 1 && !
t
->
íåõs
[ò- 1].
tsc
 && !t->entries[0].tsc)

641 
îr
;

643 
	`fio_˝u£t_exô
(&
˝u_mask
);

644  
NULL
;

645 
îr
:

646 
	`fio_˝u£t_exô
(&
˝u_mask
);

647 
îr_out
:

649 
	}
}

651 
	$˛ock_cmp
(c⁄° *
p1
, c⁄° *
p2
)

653 c⁄° 
˛ock_íåy
 *
c1
 = 
p1
;

654 c⁄° 
˛ock_íåy
 *
c2
 = 
p2
;

656 i‡(
c1
->
£q
 =
c2
->seq)

657 
	`log_îr
("cs: bug inátomic sequence!\n");

659  
c1
->
£q
 - 
c2
->seq;

660 
	}
}

662 
	$fio_m⁄Ÿ⁄ic_˛ockã°
(
debug
)

664 
˛ock_thªad
 *
˘hªads
;

665 
ƒ_˝us
 = 
	`˝us_⁄löe
();

666 
˛ock_íåy
 *
íåõs
;

667 
ƒ_íåõs
, 
ã¡rõs
, 
Áûed
 = 0;

668 
˛ock_íåy
 *
¥ev
, *
this
;

669 
uöt32_t
 
£q
 = 0;

670 
i
;

672 i‡(
debug
) {

673 
	`log_öfo
("cs:ÑñübÀ_tsc: %s\n", 
tsc_ªlübÀ
 ? "yes" : "no");

675 #ifde‡
FIO_INC_DEBUG


676 
fio_debug
 |1U << 
FD_TIME
;

678 
ƒ_íåõs
 = 
CLOCK_ENTRIES_DEBUG
;

680 
ƒ_íåõs
 = 
CLOCK_ENTRIES_TEST
;

682 
	`ˇlibøã_˝u_˛ock
();

684 i‡(
debug
) {

685 #ifde‡
FIO_INC_DEBUG


686 
fio_debug
 &~(1U << 
FD_TIME
);

690 
˘hªads
 = 
	`mÆloc
(
ƒ_˝us
 * (
˛ock_thªad
));

691 
ã¡rõs
 = 
ƒ_íåõs
 * 
ƒ_˝us
;

692 
íåõs
 = 
	`mÆloc
(
ã¡rõs
 * (
˛ock_íåy
));

694 i‡(
debug
)

695 
	`log_öfo
("cs: Te°ög %u CPUs\n", 
ƒ_˝us
);

697 
i
 = 0; i < 
ƒ_˝us
; i++) {

698 
˛ock_thªad
 *
t
 = &
˘hªads
[
i
];

700 
t
->
˝u
 = 
i
;

701 
t
->
debug
 = debug;

702 
t
->
£q
 = &seq;

703 
t
->
ƒ_íåõs
 =Çr_entries;

704 
t
->
íåõs
 = &íåõs[
i
 * 
ƒ_íåõs
];

705 
	`±hªad_muãx_öô
(&
t
->
lock
, 
NULL
);

706 
	`±hªad_muãx_öô
(&
t
->
°¨ãd
, 
NULL
);

707 
	`±hªad_muãx_lock
(&
t
->
lock
);

708 i‡(
	`±hªad_¸óã
(&
t
->
thªad
, 
NULL
, 
˛ock_thªad_‚
,Å)) {

709 
Áûed
++;

710 
ƒ_˝us
 = 
i
;

715 
i
 = 0; i < 
ƒ_˝us
; i++) {

716 
˛ock_thªad
 *
t
 = &
˘hªads
[
i
];

718 
	`±hªad_muãx_lock
(&
t
->
°¨ãd
);

721 
i
 = 0; i < 
ƒ_˝us
; i++) {

722 
˛ock_thªad
 *
t
 = &
˘hªads
[
i
];

724 
	`±hªad_muãx_u∆ock
(&
t
->
lock
);

727 
i
 = 0; i < 
ƒ_˝us
; i++) {

728 
˛ock_thªad
 *
t
 = &
˘hªads
[
i
];

729 *
ªt
;

731 
	`±hªad_joö
(
t
->
thªad
, &
ªt
);

732 i‡(
ªt
)

733 
Áûed
++;

735 
	`‰ì
(
˘hªads
);

737 i‡(
Áûed
) {

738 i‡(
debug
)

739 
	`log_îr
("Clocksour˚Åe°: %luÅhªad†Áûed\n", 
Áûed
);

740 
îr
;

743 
	`qs‹t
(
íåõs
, 
ã¡rõs
, (
˛ock_íåy
), 
˛ock_cmp
);

746 
¥ev
 = 
NULL
;

747 
Áûed
 = 
i
 = 0; i < 
ã¡rõs
; i++) {

748 
this
 = &
íåõs
[
i
];

750 i‡(!
i
) {

751 
¥ev
 = 
this
;

755 i‡(
¥ev
->
tsc
 > 
this
->tsc) {

756 
uöt64_t
 
diff
 = 
¥ev
->
tsc
 - 
this
->tsc;

758 i‡(!
debug
) {

759 
Áûed
++;

763 
	`log_öfo
("cs: CPU clock mismatch (diff=%llu):\n",

764 (Ë
diff
);

765 
	`log_öfo
("\àCPU%3u: TSC=%Œu, SEQ=%u\n", 
¥ev
->
˝u
, (Ë¥ev->
tsc
,Öªv->
£q
);

766 
	`log_öfo
("\àCPU%3u: TSC=%Œu, SEQ=%u\n", 
this
->
˝u
, (Ëthis->
tsc
,Åhis->
£q
);

767 
Áûed
++;

770 
¥ev
 = 
this
;

773 i‡(
debug
) {

774 i‡(
Áûed
)

775 
	`log_öfo
("cs: Faûed: %lu\n", 
Áûed
);

777 
	`log_öfo
("cs: Pass!\n");

779 
îr
:

780 
	`‰ì
(
íåõs
);

781  !!
Áûed
;

782 
	}
}

786 
	$fio_m⁄Ÿ⁄ic_˛ockã°
(
debug
)

788 i‡(
debug
)

789 
	`log_öfo
("cs: currentÖlatform doesÇot support CPU clocks\n");

791 
	}
}

	@/home/ysjin/Desktop/fio/fio/gettime.h

1 #i‚de‡
FIO_GETTIME_H


2 
	#FIO_GETTIME_H


	)

4 
	~"¨ch/¨ch.h
"

9 
	efio_cs
 {

10 
	mCS_GTOD
 = 1,

11 
	mCS_CGETTIME
,

12 
	mCS_CPUCLOCK
,

13 
	mCS_INVAL
,

16 
fio_gëtime
(
time•ec
 *, *);

17 
fio_gtod_öô
();

18 
fio_˛ock_öô
();

19 
fio_°¨t_gtod_thªad
();

20 
fio_m⁄Ÿ⁄ic_˛ockã°
(
debug
);

21 
fio_loˇl_˛ock_öô
();

23 
time•ec
 *
fio_ts
;

25 
ölöe
 
	$fio_gëtime_ofÊﬂd
(
time•ec
 *
ts
)

27 
time_t
 
œ°_£c
;

29 i‡(!
fio_ts
)

33 
	`ªad_b¨rõr
();

34 
œ°_£c
 = 
ts
->
tv_£c
 = 
fio_ts
->tv_sec;

35 
ts
->
tv_n£c
 = 
fio_ts
->tv_nsec;

36 } 
fio_ts
->
tv_£c
 !
œ°_£c
);

39 
	}
}

41 
fio_gtod_£t_˝u
(
˝u
);

	@/home/ysjin/Desktop/fio/fio/gfio.c

24 
	~<loˇÀ.h
>

25 
	~<mÆloc.h
>

26 
	~<°rög.h
>

28 
	~<glib.h
>

29 
	~<ˇúo.h
>

30 
	~<gtk/gtk.h
>

32 
	~"fio.h
"

33 
	~"gfio.h
"

34 
	~"ghñ≥rs.h
"

35 
	~"g›ti⁄s.h
"

36 
	~"gîr‹.h
"

37 
	~"g˛õ¡.h
"

38 
	~"gøph.h
"

40 
	ggfio_£rvî_ru¬ög
;

41 
	ggfio_gøph_limô
 = 100;

43 
GdkCﬁ‹
 
	ggfio_cﬁ‹_whôe
;

44 
GdkCﬁ‹
 
	ggfio_cﬁ‹_lightyñlow
;

45 c⁄° *
	ggfio_gøph_f⁄t
 = 
GRAPH_DEFAULT_FONT
;

47 (*
	t˛ickfun˘i⁄
)(
	tGtkWidgë
 *
	twidgë
, 
	tgpoöãr
 
	td©a
);

49 
	`c⁄√˘_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
);

50 
	`°¨t_job_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
);

51 
	`£nd_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
);

53 
	sbuâ⁄_•ec
 {

54 c⁄° *
buâ⁄ãxt
;

55 
˛ickfun˘i⁄
 
f
;

56 c⁄° *
toﬁtùãxt
[2];

57 c⁄° 
°¨t_£nsôive
;

58 } 
buâ⁄•e˛i°
[] = {

60 .
buâ⁄ãxt
 = "Connect",

61 .
f
 = 
c⁄√˘_˛icked
,

62 .
toﬁtùãxt
 = { "Disconnect from host", "ConnectÅo host" },

63 .
°¨t_£nsôive
 = 1,

66 .
buâ⁄ãxt
 = "Send",

67 .
f
 = 
£nd_˛icked
,

68 .
toﬁtùãxt
 = { "Síd job des¸ùti⁄Åÿho°", 
NULL
 },

69 .
°¨t_£nsôive
 = 0,

72 .
buâ⁄ãxt
 = "Start Job",

73 .
f
 = 
°¨t_job_˛icked
,

74 .
toﬁtùãxt
 = { "SèπÅhêcuºíàjob o¿thê£rvî", 
NULL
 },

75 .
°¨t_£nsôive
 = 0,

77 
	}
};

79 
	$£tup_i›s_gøph
(
gfio_gøphs
 *
gg
)

81 
gøph
 *
g
;

83 
g
 = 
	`gøph_√w
(
DRAWING_AREA_XDIM
 / 2.0, 
DRAWING_AREA_YDIM
, 
gfio_gøph_f⁄t
);

84 
	`gøph_tôÀ
(
g
, "IOPS (IOs/sec)");

85 
	`gøph_x_tôÀ
(
g
, "Time (secs)");

86 
gg
->
ªad_i›s
 = 
	`gøph_add_œbñ
(
g
, "Read IOPS");

87 
gg
->
wrôe_i›s
 = 
	`gøph_add_œbñ
(
g
, "Write IOPS");

88 
gg
->
åim_i›s
 = 
	`gøph_add_œbñ
(
g
, "Trim IOPS");

89 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
ªad_i›s
, 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

90 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
wrôe_i›s
, 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

91 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
åim_i›s
, 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

92 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
, 
gfio_gøph_limô
);

93 
	`gøph_add_exåa_•a˚
(
g
, 0.0, 0.0, 0.0, 0.0);

94 
	`gøph_£t_gøph_Æl_zî€s
(
g
, 0);

95 
gg
->
i›s_gøph
 = 
g
;

96 
	}
}

98 
	$£tup_b™dwidth_gøph
(
gfio_gøphs
 *
gg
)

100 
gøph
 *
g
;

102 
g
 = 
	`gøph_√w
(
DRAWING_AREA_XDIM
 / 2.0, 
DRAWING_AREA_YDIM
, 
gfio_gøph_f⁄t
);

103 
	`gøph_tôÀ
(
g
, "Bandwidth (bytes/sec)");

104 
	`gøph_x_tôÀ
(
g
, "Time (secs)");

105 
gg
->
ªad_bw
 = 
	`gøph_add_œbñ
(
g
, "Read Bandwidth");

106 
gg
->
wrôe_bw
 = 
	`gøph_add_œbñ
(
g
, "Write Bandwidth");

107 
gg
->
åim_bw
 = 
	`gøph_add_œbñ
(
g
, "Trim Bandwidth");

108 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
ªad_bw
, 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

109 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
wrôe_bw
, 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

110 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
åim_bw
, 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

111 
	`gøph_£t_ba£_off£t
(
g
, 1);

112 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
, 100);

113 
	`gøph_add_exåa_•a˚
(
g
, 0.0, 0.0, 0.0, 0.0);

114 
	`gøph_£t_gøph_Æl_zî€s
(
g
, 0);

115 
gg
->
b™dwidth_gøph
 = 
g
;

116 
	}
}

118 
	$£tup_gøphs
(
gfio_gøphs
 *
g
)

120 
	`£tup_i›s_gøph
(
g
);

121 
	`£tup_b™dwidth_gøph
(
g
);

122 
	}
}

124 
	$˛ór_ge_ui_öfo
(
gui_íåy
 *
ge
)

126 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
ho°«me
), "");

127 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
os
), "");

128 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
¨ch
), "");

129 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
fio_vî
), "");

132 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
«me
), "");

134 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
iŸy≥
, 0, "");

135 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
bs
, 0, "");

136 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
i€ngöe
, 0, "");

137 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
iodïth
, 0, "");

138 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
jobs
), "");

139 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
fûes
), "");

140 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_bw
), "");

141 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_i›s
), "");

142 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_bw
), "");

143 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_i›s
), "");

144 
	}
}

146 
	$£t_míu_íåy_ãxt
(
gui
 *
ui
, c⁄° *
∑th
,

147 c⁄° *
ãxt
)

149 
GtkWidgë
 *
w
;

151 
w
 = 
	`gtk_ui_m™agî_gë_widgë
(
ui
->
uim™agî
, 
∑th
);

152 i‡(
w
)

153 
	`gtk_míu_ôem_£t_œbñ
(
	`GTK_MENU_ITEM
(
w
), 
ãxt
);

155 
	`Ârötf
(
°dîr
, "gfio: c™'àfödÖ©h %s\n", 
∑th
);

156 
	}
}

159 
	$£t_míu_íåy_visibÀ
(
gui
 *
ui
, c⁄° *
∑th
, 
show
)

161 
GtkWidgë
 *
w
;

163 
w
 = 
	`gtk_ui_m™agî_gë_widgë
(
ui
->
uim™agî
, 
∑th
);

164 i‡(
w
)

165 
	`gtk_widgë_£t_£nsôive
(
w
, 
show
);

167 
	`Ârötf
(
°dîr
, "gfio: c™'àfödÖ©h %s\n", 
∑th
);

168 
	}
}

170 
	$£t_job_míu_visibÀ
(
gui
 *
ui
, 
visibÀ
)

172 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu", 
visibÀ
);

173 
	}
}

175 
	$£t_võw_ªsu…s_visibÀ
(
gui
 *
ui
, 
visibÀ
)

177 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/VõwMíu/Resu…s", 
visibÀ
);

178 
	}
}

180 c⁄° *
	$gë_buâ⁄_toﬁtù
(
buâ⁄_•ec
 *
s
, 
£nsôive
)

182 i‡(
s
->
toﬁtùãxt
[
£nsôive
])

183  
s
->
toﬁtùãxt
[
£nsôive
];

185  
s
->
toﬁtùãxt
[0];

186 
	}
}

188 
GtkWidgë
 *
	$add_buâ⁄
(
GtkWidgë
 *
buâ⁄box
,

189 
buâ⁄_•ec
 *
buâ⁄•ec
, 
gpoöãr
 
d©a
)

191 
GtkWidgë
 *
buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
(
buâ⁄•ec
->
buâ⁄ãxt
);

192 
gboﬁón
 
£ns
 = 
buâ⁄•ec
->
°¨t_£nsôive
;

194 
	`g_sig«l_c⁄√˘
(
buâ⁄
, "˛icked", 
	`G_CALLBACK
(
buâ⁄•ec
->
f
), 
d©a
);

195 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
buâ⁄box
), 
buâ⁄
, 
FALSE
, FALSE, 3);

197 
£ns
 = 
buâ⁄•ec
->
°¨t_£nsôive
;

198 
	`gtk_widgë_£t_toﬁtù_ãxt
(
buâ⁄
, 
	`gë_buâ⁄_toﬁtù
(
buâ⁄•ec
, 
£ns
));

199 
	`gtk_widgë_£t_£nsôive
(
buâ⁄
, 
£ns
);

201  
buâ⁄
;

202 
	}
}

204 
	$add_buâ⁄s
(
gui_íåy
 *
ge
, 
buâ⁄_•ec
 *
buâ⁄li°
,

205 
nbuâ⁄s
)

207 
i
;

209 
i
 = 0; i < 
nbuâ⁄s
; i++)

210 
ge
->
buâ⁄
[
i
] = 
	`add_buâ⁄
(ge->
buâ⁄box
, &
buâ⁄li°
[i], ge);

211 
	}
}

217 
	$upd©e_buâ⁄_°©es
(
gui
 *
ui
, 
gui_íåy
 *
ge
)

219 
c⁄√˘_°©e
, 
£nd_°©e
, 
°¨t_°©e
, 
edô_°©e
;

220 c⁄° *
c⁄√˘_°r
 = 
NULL
;

222 
ge
->
°©e
) {

224 
	`gfio_ªp‹t_îr‹
(
ge
, "Bad clõ¡ sèã: %u\n", ge->
°©e
);

226 
GE_STATE_NEW
:

227 
c⁄√˘_°©e
 = 1;

228 
edô_°©e
 = 1;

229 
c⁄√˘_°r
 = "Connect";

230 
£nd_°©e
 = 0;

231 
°¨t_°©e
 = 0;

233 
GE_STATE_CONNECTED
:

234 
c⁄√˘_°©e
 = 1;

235 
edô_°©e
 = 1;

236 
c⁄√˘_°r
 = "Disconnect";

237 
£nd_°©e
 = 1;

238 
°¨t_°©e
 = 0;

240 
GE_STATE_JOB_SENT
:

241 
c⁄√˘_°©e
 = 1;

242 
edô_°©e
 = 1;

243 
c⁄√˘_°r
 = "Disconnect";

244 
£nd_°©e
 = 0;

245 
°¨t_°©e
 = 1;

247 
GE_STATE_JOB_STARTED
:

248 
c⁄√˘_°©e
 = 1;

249 
edô_°©e
 = 1;

250 
c⁄√˘_°r
 = "Disconnect";

251 
£nd_°©e
 = 0;

252 
°¨t_°©e
 = 1;

254 
GE_STATE_JOB_RUNNING
:

255 
c⁄√˘_°©e
 = 1;

256 
edô_°©e
 = 0;

257 
c⁄√˘_°r
 = "Disconnect";

258 
£nd_°©e
 = 0;

259 
°¨t_°©e
 = 0;

261 
GE_STATE_JOB_DONE
:

262 
c⁄√˘_°©e
 = 1;

263 
edô_°©e
 = 0;

264 
c⁄√˘_°r
 = "Connect";

265 
£nd_°©e
 = 0;

266 
°¨t_°©e
 = 0;

270 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_CONNECT
], 
c⁄√˘_°©e
);

271 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_SEND
], 
£nd_°©e
);

272 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_START
], 
°¨t_°©e
);

273 
	`gtk_buâ⁄_£t_œbñ
(
	`GTK_BUTTON
(
ge
->
buâ⁄
[
GFIO_BUTTON_CONNECT
]), 
c⁄√˘_°r
);

274 
	`gtk_widgë_£t_toﬁtù_ãxt
(
ge
->
buâ⁄
[
GFIO_BUTTON_CONNECT
], 
	`gë_buâ⁄_toﬁtù
(&
buâ⁄•e˛i°
[GFIO_BUTTON_CONNECT], 
c⁄√˘_°©e
));

276 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/C⁄√˘", 
c⁄√˘_°©e
);

277 
	`£t_míu_íåy_ãxt
(
ui
, "/MaöMíu/JobMíu/C⁄√˘", 
c⁄√˘_°r
);

279 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/Edô job", 
edô_°©e
);

280 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/Síd job", 
£nd_°©e
);

281 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/Sèπ job", 
°¨t_°©e
);

283 i‡(
ge
->
˛õ¡
 && ge->˛õ¡->
ƒ_ªsu…s
)

284 
	`£t_võw_ªsu…s_visibÀ
(
ui
, 1);

286 
	`£t_võw_ªsu…s_visibÀ
(
ui
, 0);

287 
	}
}

289 
	$gfio_£t_°©e
(
gui_íåy
 *
ge
, 
°©e
)

291 
ge
->
°©e
 = state;

292 
	`upd©e_buâ⁄_°©es
(
ge
->
ui
, ge);

293 
	}
}

295 
	$gfio_ui_£tup_log
(
gui
 *
ui
)

297 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

298 
GtkLi°St‹e
 *
modñ
;

299 
GtkWidgë
 *
åì_võw
;

301 
modñ
 = 
	`gtk_li°_°‹e_√w
(4, 
G_TYPE_STRING
, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING);

303 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

304 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

306 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

307 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

308 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

309 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

311 
	`åì_võw_cﬁumn
(
åì_võw
, 0, "Time", 
ALIGN_RIGHT
 | 
UNSORTABLE
);

312 
	`åì_võw_cﬁumn
(
åì_võw
, 1, "Ho°", 
ALIGN_RIGHT
 | 
UNSORTABLE
);

313 
	`åì_võw_cﬁumn
(
åì_võw
, 2, "Levñ", 
ALIGN_RIGHT
 | 
UNSORTABLE
);

314 
	`åì_võw_cﬁumn
(
åì_võw
, 3, "Text", 
ALIGN_LEFT
 | 
UNSORTABLE
);

316 
ui
->
log_modñ
 = 
modñ
;

317 
ui
->
log_åì
 = 
åì_võw
;

318 
	}
}

320 
göt
 
	$⁄_c⁄fig_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvítC⁄figuª
 *
evít
,

321 
gpoöãr
 
d©a
)

323 
guöt
 
width
 = 
	`gtk_widgë_gë_Æloˇãd_width
(
w
);

324 
guöt
 
height
 = 
	`gtk_widgë_gë_Æloˇãd_height
(
w
);

325 
gfio_gøphs
 *
g
 = 
d©a
;

327 
	`gøph_£t_size
(
g
->
i›s_gøph
, 
width
 / 2.0, 
height
);

328 
	`gøph_£t_posôi⁄
(
g
->
i›s_gøph
, 
width
 / 2.0, 0.0);

329 
	`gøph_£t_size
(
g
->
b™dwidth_gøph
, 
width
 / 2.0, 
height
);

330 
	`gøph_£t_posôi⁄
(
g
->
b™dwidth_gøph
, 0, 0);

331  
TRUE
;

332 
	}
}

334 
	$døw_gøph
(
gøph
 *
g
, 
ˇúo_t
 *
¸
)

336 
	`löe_gøph_døw
(
g
, 
¸
);

337 
	`ˇúo_°roke
(
¸
);

338 
	}
}

340 
gboﬁón
 
	$gøph_toﬁtù
(
GtkWidgë
 *
w
, 
göt
 
x
, göà
y
,

341 
gboﬁón
 
keybﬂrd_mode
, 
GtkToﬁtù
 *
toﬁtù
,

342 
gpoöãr
 
d©a
)

344 
gfio_gøphs
 *
g
 = 
d©a
;

345 c⁄° *
ãxt
 = 
NULL
;

347 i‡(
	`gøph_c⁄èös_xy
(
g
->
i›s_gøph
, 
x
, 
y
))

348 
ãxt
 = 
	`gøph_föd_toﬁtù
(
g
->
i›s_gøph
, 
x
, 
y
);

349 i‡(
	`gøph_c⁄èös_xy
(
g
->
b™dwidth_gøph
, 
x
, 
y
))

350 
ãxt
 = 
	`gøph_föd_toﬁtù
(
g
->
b™dwidth_gøph
, 
x
, 
y
);

352 i‡(
ãxt
) {

353 
	`gtk_toﬁtù_£t_ãxt
(
toﬁtù
, 
ãxt
);

354  
TRUE
;

357  
FALSE
;

358 
	}
}

360 
	$⁄_expo£_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvít
 *
evít
, 
gpoöãr
 
p
)

362 
gfio_gøphs
 *
g
 = 
p
;

363 
ˇúo_t
 *
¸
;

365 
¸
 = 
	`gdk_ˇúo_¸óã
(
	`gtk_widgë_gë_wödow
(
w
));

367 i‡(
	`gøph_has_toﬁtùs
(
g
->
i›s_gøph
) ||

368 
	`gøph_has_toﬁtùs
(
g
->
b™dwidth_gøph
)) {

369 
	`g_obje˘_£t
(
w
, "has-toﬁtù", 
TRUE
, 
NULL
);

370 
	`g_sig«l_c⁄√˘
(
w
, "quîy-toﬁtù", 
	`G_CALLBACK
(
gøph_toﬁtù
), 
g
);

373 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

374 
	`døw_gøph
(
g
->
i›s_gøph
, 
¸
);

375 
	`døw_gøph
(
g
->
b™dwidth_gøph
, 
¸
);

376 
	`ˇúo_de°roy
(
¸
);

378  
FALSE
;

379 
	}
}

384 
	$ge_de°roy
(
gui_íåy
 *
ge
)

386 
gfio_˛õ¡
 *
gc
 = 
ge
->
˛õ¡
;

388 i‡(
gc
) {

389 i‡(
gc
->
˛õ¡
) {

390 i‡(
ge
->
°©e
 >
GE_STATE_CONNECTED
)

391 
	`fio_˛õ¡_ãrmö©e
(
gc
->
˛õ¡
);

393 
	`fio_put_˛õ¡
(
gc
->
˛õ¡
);

395 
	`‰ì
(
gc
);

398 
	`g_hash_èbÀ_ªmove
(
ge
->
ui
->
ge_hash
, &ge->
∑ge_num
);

400 
	`‰ì
(
ge
->
job_fûe
);

401 
	`‰ì
(
ge
->
ho°
);

402 
	`‰ì
(
ge
);

403 
	}
}

405 
	$ge_widgë_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

407 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

409 
	`ge_de°roy
(
ge
);

410 
	}
}

412 
	$gfio_quô
(
gui
 *
ui
)

414 
	`gtk_maö_quô
();

415 
	}
}

417 
quô_˛icked
(
__©åibuã__
((
unu£d
)Ë
GtkWidgë
 *
widgë
,

418 
gpoöãr
 
d©a
)

420 
gui
 *
	gui
 = (guò*Ë
d©a
;

422 
gfio_quô
(
ui
);

425 *
	$job_thªad
(*
¨g
)

427 
gui
 *
ui
 = 
¨g
;

429 
ui
->
h™dÀr_ru¬ög
 = 1;

430 
	`fio_h™dÀ_˛õ¡s
(&
gfio_˛õ¡_›s
);

431 
ui
->
h™dÀr_ru¬ög
 = 0;

432  
NULL
;

433 
	}
}

435 
	$£nd_job_fûe
(
gui_íåy
 *
ge
)

437 
gfio_˛õ¡
 *
gc
 = 
ge
->
˛õ¡
;

438 
ªt
 = 0;

444 !
	`Êi°_em±y
(&
gc
->
o_li°
)) {

445 
gfio_˛õ¡_›ti⁄s
 *
gco
;

447 
gco
 = 
	`Êi°_fú°_íåy
(&
gc
->
o_li°
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

448 
	`Êi°_dñ
(&
gco
->
li°
);

449 
	`‰ì
(
gco
);

452 
ªt
 = 
	`fio_˛õ¡_£nd_öi
(
gc
->
˛õ¡
, 
ge
->
job_fûe
, 
Ál£
);

453 i‡(!
ªt
)

456 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿ£nd fûê%s: %s\n", ge->
job_fûe
, 
	`°ªº‹
(-
ªt
));

458 
	}
}

460 *
	$£rvî_thªad
(*
¨g
)

462 
	`fio_£rvî_¸óã_sk_key
();

463 
is_backíd
 = 1;

464 
gfio_£rvî_ru¬ög
 = 1;

465 
	`fio_°¨t_£rvî
(
NULL
);

466 
gfio_£rvî_ru¬ög
 = 0;

467 
	`fio_£rvî_de°roy_sk_key
();

468  
NULL
;

469 
	}
}

471 
	$gfio_°¨t_£rvî
(
gui
 *
ui
)

473 i‡(!
gfio_£rvî_ru¬ög
) {

474 
gfio_£rvî_ru¬ög
 = 1;

475 
	`±hªad_¸óã
(&
ui
->
£rvî_t
, 
NULL
, 
£rvî_thªad
, NULL);

476 
	`±hªad_dëach
(
ui
->
£rvî_t
);

478 
	}
}

480 
°¨t_job_˛icked
(
__©åibuã__
((
unu£d
)Ë
GtkWidgë
 *
widgë
,

481 
gpoöãr
 
d©a
)

483 
gui_íåy
 *
	gge
 = 
d©a
;

484 
gfio_˛õ¡
 *
	ggc
 = 
ge
->
˛õ¡
;

486 i‡(
	ggc
)

487 
fio_°¨t_˛õ¡
(
gc
->
˛õ¡
);

490 
fûe_›í
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
);

492 
	sc⁄√˘i⁄_widgës


494 
GtkWidgë
 *
	mhíåy
;

495 
GtkWidgë
 *
	mcombo
;

496 
GtkWidgë
 *
	mbuâ⁄
;

499 
	$ho°«me_cb
(
GtkE¡ry
 *
íåy
, 
gpoöãr
 
d©a
)

501 
c⁄√˘i⁄_widgës
 *
cw
 = 
d©a
;

502 
u£s_√t
 = 0, 
is_loˇlho°
 = 0;

503 c⁄° 
gch¨
 *
ãxt
;

504 
gch¨
 *
˘ext
;

511 
˘ext
 = 
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
->
combo
));

512 i‡(!
˘ext
 || !
	`°∫cmp
(ctext, "IPv4", 4) || !strncmp(ctext, "IPv6", 4))

513 
u£s_√t
 = 1;

514 
	`g_‰ì
(
˘ext
);

516 i‡(
u£s_√t
) {

517 
ãxt
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
cw
->
híåy
));

518 i‡(!
	`°rcmp
(
ãxt
, "127.0.0.1") || !strcmp(text, "localhost") ||

519 !
	`°rcmp
(
ãxt
, "::1") || !strcmp(text, "ip6-localhost") ||

520 !
	`°rcmp
(
ãxt
, "ip6-loopback"))

521 
is_loˇlho°
 = 1;

524 i‡(!
u£s_√t
 || 
is_loˇlho°
) {

525 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
->
buâ⁄
), 1);

526 
	`gtk_widgë_£t_£nsôive
(
cw
->
buâ⁄
, 1);

528 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
->
buâ⁄
), 0);

529 
	`gtk_widgë_£t_£nsôive
(
cw
->
buâ⁄
, 0);

531 
	}
}

533 
	$gë_c⁄√˘i⁄_dëaûs
(
gui_íåy
 *
ge
)

535 
GtkWidgë
 *
dülog
, *
box
, *
vbox
, *
hbox
, *
‰ame
, *
≥¡ry
;

536 
c⁄√˘i⁄_widgës
 
cw
;

537 
gui
 *
ui
 = 
ge
->ui;

538 *
ty≥íåy
;

540 i‡(
ge
->
ho°
)

543 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Connection details",

544 
	`GTK_WINDOW
(
ui
->
wödow
),

545 
GTK_DIALOG_DESTROY_WITH_PARENT
,

546 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
,

547 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_REJECT
, 
NULL
);

549 
‰ame
 = 
	`gtk_‰ame_√w
("Hostname / socketÇame");

550 
vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

551 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

553 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

554 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

556 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 10);

557 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

558 
cw
.
híåy
 = 
	`gtk_íåy_√w
();

559 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
cw
.
híåy
), "localhost");

560 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
cw
.
híåy
, 
TRUE
, TRUE, 0);

562 
‰ame
 = 
	`gtk_‰ame_√w
("Port");

563 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

564 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

565 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

567 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

568 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

569 
≥¡ry
 = 
	`¸óã_•öbuâ⁄
(
hbox
, 1, 65535, 
FIO_NET_PORT
);

571 
‰ame
 = 
	`gtk_‰ame_√w
("Type");

572 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

573 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

574 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

576 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

577 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

579 
cw
.
combo
 = 
	`gtk_combo_box_ãxt_√w
();

580 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
), "IPv4");

581 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
), "IPv6");

582 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
), "local socket");

583 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
cw
.
combo
), 0);

585 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
hbox
), 
cw
.
combo
);

587 
‰ame
 = 
	`gtk_‰ame_√w
("Options");

588 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

589 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

590 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

592 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

593 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

595 
cw
.
buâ⁄
 = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
("Auto-spawn fio backend");

596 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
.
buâ⁄
), 1);

597 
	`gtk_widgë_£t_toﬁtù_ãxt
(
cw
.
buâ⁄
, "WhenÑunning fioÜocally, it isÇecessaryÅo haveÅhe backendÑunning onÅhe same system. IfÅhis is checked, gfio will startÅhe backendáutomatically for you if it isn'tálreadyÑunning.");

598 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
cw
.
buâ⁄
, 
FALSE
, FALSE, 6);

603 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
cw
.
híåy
), "ch™ged", 
	`G_CALLBACK
(
ho°«me_cb
), &cw);

604 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
cw
.
combo
), "ch™ged", 
	`G_CALLBACK
(
ho°«me_cb
), &cw);

606 
	`gtk_widgë_show_Æl
(
dülog
);

608 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë!
GTK_RESPONSE_ACCEPT
) {

609 
	`gtk_widgë_de°roy
(
dülog
);

613 
ge
->
ho°
 = 
	`°rdup
(
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
cw
.
híåy
)));

614 
ge
->
p‹t
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
≥¡ry
));

616 
ty≥íåy
 = 
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
));

617 i‡(!
ty≥íåy
 || !
	`°∫cmp
(typeentry, "IPv4", 4))

618 
ge
->
ty≥
 = 
Fio_˛õ¡_ùv4
;

619 i‡(!
	`°∫cmp
(
ty≥íåy
, "IPv6", 4))

620 
ge
->
ty≥
 = 
Fio_˛õ¡_ùv6
;

622 
ge
->
ty≥
 = 
Fio_˛õ¡_sockë
;

623 
	`g_‰ì
(
ty≥íåy
);

625 
ge
->
£rvî_°¨t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
.
buâ⁄
));

627 
	`gtk_widgë_de°roy
(
dülog
);

629 
	}
}

631 
	$gfio_£t_˛õ¡
(
gfio_˛õ¡
 *
gc
, 
fio_˛õ¡
 *
˛õ¡
)

633 
gc
->
˛õ¡
 = 
	`fio_gë_˛õ¡
(client);

634 
˛õ¡
->
˛õ¡_d©a
 = 
gc
;

635 
	}
}

637 
	$gfio_˛õ¡_added
(
gui_íåy
 *
ge
, 
fio_˛õ¡
 *
˛õ¡
)

639 
gfio_˛õ¡_›ti⁄s
 *
gco
;

640 
gfio_˛õ¡
 *
gc
;

642 
gc
 = 
	`ˇŒoc
(1, (*gc));

643 
	`INIT_FLIST_HEAD
(&
gc
->
o_li°
);

644 
gc
->
ge
 = ge;

645 
ge
->
˛õ¡
 = 
gc
;

646 
	`gfio_£t_˛õ¡
(
gc
, 
˛õ¡
);

652 
gco
 = 
	`ˇŒoc
(1, (*gco));

653 
	`INIT_FLIST_HEAD
(&
gco
->
li°
);

654 
	`›ti⁄s_deÁu…_fûl
(&
gco
->
o
);

655 
	`Êi°_add_èû
(&
gco
->
li°
, &
gc
->
o_li°
);

656 
gc
->
o_li°_ƒ
++;

657 
	}
}

659 
	$gfio_˛ór_gøph_d©a
(
gfio_gøphs
 *
g
)

661 
	`gøph_˛ór_vÆues
(
g
->
i›s_gøph
);

662 
	`gøph_˛ór_vÆues
(
g
->
b™dwidth_gøph
);

663 
	}
}

665 
	$c⁄√˘_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

667 
gui_íåy
 *
ge
 = 
d©a
;

668 
gfio_˛õ¡
 *
gc
 = 
ge
->
˛õ¡
;

670 i‡(
ge
->
°©e
 =
GE_STATE_NEW
) {

671 
ªt
;

673 i‡(!
ge
->
job_fûe
)

674 
	`fûe_›í
(
widgë
, 
ge
->
ui
);

675 i‡(!
ge
->
job_fûe
)

678 
gc
 = 
ge
->
˛õ¡
;

680 i‡(!
gc
->
˛õ¡
) {

681 
fio_˛õ¡
 *
˛õ¡
;

683 i‡(
	`gë_c⁄√˘i⁄_dëaûs
(
ge
)) {

684 
	`gfio_ªp‹t_îr‹
(
ge
, "FailedÅo get connection details\n");

688 
˛õ¡
 = 
	`fio_˛õ¡_add_ex∂icô
(&
gfio_˛õ¡_›s
, 
ge
->
ho°
, ge->
ty≥
, ge->
p‹t
);

689 i‡(!
˛õ¡
) {

690 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿadd clõ¡ %s\n", ge->
ho°
);

691 
	`‰ì
(
ge
->
ho°
);

692 
ge
->
ho°
 = 
NULL
;

695 
	`gfio_£t_˛õ¡
(
gc
, 
˛õ¡
);

698 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), "No jobsÑunning");

699 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 0.0);

700 
ªt
 = 
	`fio_˛õ¡_c⁄√˘
(
gc
->
˛õ¡
);

701 i‡(!
ªt
) {

702 i‡(!
ge
->
ui
->
h™dÀr_ru¬ög
)

703 
	`±hªad_¸óã
(&
ge
->
ui
->
t
, 
NULL
, 
job_thªad
, ge->ui);

704 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_CONNECTED
);

705 
	`gfio_˛ór_gøph_d©a
(&
ge
->
gøphs
);

707 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿc⁄√˘Åÿ%s: %s\n", ge->
˛õ¡
->˛õ¡->
ho°«me
, 
	`°ªº‹
(-
ªt
));

710 
	`fio_˛õ¡_ãrmö©e
(
gc
->
˛õ¡
);

711 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_NEW
);

712 
	`˛ór_ge_ui_öfo
(
ge
);

714 
	}
}

716 
	$£nd_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

718 
gui_íåy
 *
ge
 = 
d©a
;

720 i‡(
	`£nd_job_fûe
(
ge
))

721 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_START
], 1);

722 
	}
}

724 
GtkWidgë
 *
√w_˛õ¡_∑ge
(
gui_íåy
 *
ge
);

726 
gui_íåy
 *
	$Æloc_√w_gui_íåy
(
gui
 *
ui
)

728 
gui_íåy
 *
ge
;

730 
ge
 = 
	`mÆloc
((*ge));

731 
	`mem£t
(
ge
, 0, (*ge));

732 
ge
->
°©e
 = 
GE_STATE_NEW
;

733 
ge
->
ui
 = ui;

734  
ge
;

735 
	}
}

737 
gui_íåy
 *
	$gë_√w_ge_wôh_èb
(
gui
 *
ui
, c⁄° *
«me
)

739 
gui_íåy
 *
ge
;

741 
ge
 = 
	`Æloc_√w_gui_íåy
(
ui
);

743 
ge
->
vbox
 = 
	`√w_˛õ¡_∑ge
(ge);

744 
	`g_sig«l_c⁄√˘
(
ge
->
vbox
, "de°roy", 
	`G_CALLBACK
(
ge_widgë_de°roy
), ge);

746 
ge
->
∑ge_œbñ
 = 
	`gtk_œbñ_√w
(
«me
);

747 
ge
->
∑ge_num
 = 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), ge->
vbox
, ge->
∑ge_œbñ
);

749 
	`g_hash_èbÀ_ö£π
(
ui
->
ge_hash
, &
ge
->
∑ge_num
, ge);

751 
	`gtk_widgë_show_Æl
(
ui
->
wödow
);

752  
ge
;

753 
	}
}

755 
	$fûe_√w
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

757 
gui
 *
ui
 = (guò*Ë
d©a
;

758 
gui_íåy
 *
ge
;

760 
ge
 = 
	`gë_√w_ge_wôh_èb
(
ui
, "Untitled");

761 
	`gtk_nŸebook_£t_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 
ge
->
∑ge_num
);

762 
	}
}

768 
gui_íåy
 *
	$gë_ge_‰om_∑ge
(
gui
 *
ui
, 
göt
 
cur_∑ge
,

769 *
¸óãd
)

771 i‡(!
cur_∑ge
) {

772 i‡(
¸óãd
)

773 *
¸óãd
 = 1;

774  
	`gë_√w_ge_wôh_èb
(
ui
, "Untitled");

777 i‡(
¸óãd
)

778 *
¸óãd
 = 0;

780  
	`g_hash_èbÀ_lookup
(
ui
->
ge_hash
, &
cur_∑ge
);

781 
	}
}

783 
gui_íåy
 *
	$gë_ge_‰om_cur_èb
(
gui
 *
ui
)

785 
göt
 
cur_∑ge
;

791 
cur_∑ge
 = 
	`gtk_nŸebook_gë_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
));

792 i‡(
cur_∑ge
)

793  
	`gë_ge_‰om_∑ge
(
ui
, 
cur_∑ge
, 
NULL
);

795  
NULL
;

796 
	}
}

798 
	$fûe_˛o£
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

800 
gui
 *
ui
 = (guò*Ë
d©a
;

801 
gui_íåy
 *
ge
;

806 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

807 i‡(
ge
) {

808 
	`gtk_widgë_de°roy
(
ge
->
vbox
);

812 i‡(
	`g_hash_èbÀ_size
(
ui
->
ge_hash
)) {

813 
	`gfio_ªp‹t_öfo
(
ui
, "Error", "The mainÖage view cannot be closed\n");

817 
	`gfio_quô
(
ui
);

818 
	}
}

820 
	$fûe_add_ª˚¡
(
gui
 *
ui
, c⁄° 
gch¨
 *
uri
)

822 
GtkRe˚¡D©a
 
grd
;

824 
	`mem£t
(&
grd
, 0, (grd));

825 
grd
.
di•œy_«me
 = 
	`°rdup
("gfio");

826 
grd
.
des¸ùti⁄
 = 
	`°rdup
("Fio job file");

827 
grd
.
mime_ty≥
 = 
	`°rdup
(
GFIO_MIME
);

828 
grd
.
≠p_«me
 = 
	`°rdup
(
	`g_gë_≠∂iˇti⁄_«me
());

829 
grd
.
≠p_exec
 = 
	`°rdup
("gfio %f/%u");

831 
	`gtk_ª˚¡_m™agî_add_fuŒ
(
ui
->
ª˚¡m™agî
, 
uri
, &
grd
);

832 
	}
}

834 
gch¨
 *
	$gë_fûíame_‰om_uri
(c⁄° 
gch¨
 *
uri
)

836 i‡(
	`°∫cmp
(
uri
, "file://", 7))

837  
	`°rdup
(
uri
);

839  
	`°rdup
(
uri
 + 7);

840 
	}
}

842 
	$do_fûe_›í
(
gui_íåy
 *
ge
, c⁄° 
gch¨
 *
uri
)

844 
fio_˛õ¡
 *
˛õ¡
;

846 
	`as£π
(!
ge
->
job_fûe
);

848 
ge
->
job_fûe
 = 
	`gë_fûíame_‰om_uri
(
uri
);

850 
˛õ¡
 = 
	`fio_˛õ¡_add_ex∂icô
(&
gfio_˛õ¡_›s
, 
ge
->
ho°
, ge->
ty≥
, ge->
p‹t
);

851 i‡(
˛õ¡
) {

852 *
œbñ
 = 
	`°rdup
(
uri
);

854 
	`ba£«me
(
œbñ
);

855 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
∑ge_œbñ
), 
	`ba£«me
(
œbñ
));

856 
	`‰ì
(
œbñ
);

858 
	`gfio_˛õ¡_added
(
ge
, 
˛õ¡
);

859 
	`fûe_add_ª˚¡
(
ge
->
ui
, 
uri
);

863 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿadd clõ¡ %s\n", ge->
ho°
);

864 
	`‰ì
(
ge
->
ho°
);

865 
ge
->
ho°
 = 
NULL
;

866 
	`‰ì
(
ge
->
job_fûe
);

867 
ge
->
job_fûe
 = 
NULL
;

869 
	}
}

871 
	$do_fûe_›í_wôh_èb
(
gui
 *
ui
, c⁄° 
gch¨
 *
uri
)

873 
gui_íåy
 *
ge
;

874 
göt
 
cur_∑ge
;

875 
ªt
, 
ge_is_√w
 = 0;

881 
cur_∑ge
 = 
	`gtk_nŸebook_gë_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
));

882 
ge
 = 
	`gë_ge_‰om_∑ge
(
ui
, 
cur_∑ge
, &
ge_is_√w
);

883 i‡(
ge
->
˛õ¡
) {

884 
ge
 = 
	`gë_√w_ge_wôh_èb
(
ui
, "Untitled");

885 
ge_is_√w
 = 1;

888 
	`gtk_nŸebook_£t_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 
ge
->
∑ge_num
);

890 i‡(
	`gë_c⁄√˘i⁄_dëaûs
(
ge
)) {

891 i‡(
ge_is_√w
)

892 
	`gtk_widgë_de°roy
(
ge
->
vbox
);

897 
ªt
 = 
	`do_fûe_›í
(
ge
, 
uri
);

899 i‡(!
ªt
) {

900 i‡(
ge
->
£rvî_°¨t
)

901 
	`gfio_°¨t_£rvî
(
ui
);

903 i‡(
ge_is_√w
)

904 
	`gtk_widgë_de°roy
(
ge
->
vbox
);

907  
ªt
;

908 
	}
}

910 
	$ª˚¡_›í
(
GtkA˘i⁄
 *
a˘i⁄
, 
gpoöãr
 
d©a
)

912 
gui
 *
ui
 = (guò*Ë
d©a
;

913 
GtkRe˚¡Info
 *
öfo
;

914 c⁄° 
gch¨
 *
uri
;

916 
öfo
 = 
	`g_obje˘_gë_d©a
(
	`G_OBJECT
(
a˘i⁄
), "gtk-recent-info");

917 
uri
 = 
	`gtk_ª˚¡_öfo_gë_uri
(
öfo
);

919 
	`do_fûe_›í_wôh_èb
(
ui
, 
uri
);

920 
	}
}

922 
	$fûe_›í
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

924 
gui
 *
ui
 = 
d©a
;

925 
GtkWidgë
 *
dülog
;

926 
GtkFûeFûãr
 *
fûãr
;

927 
gch¨
 *
fûíame
;

929 
dülog
 = 
	`gtk_fûe_choo£r_dülog_√w
("Open File",

930 
	`GTK_WINDOW
(
ui
->
wödow
),

931 
GTK_FILE_CHOOSER_ACTION_OPEN
,

932 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_CANCEL
,

933 
GTK_STOCK_OPEN
, 
GTK_RESPONSE_ACCEPT
,

934 
NULL
);

935 
	`gtk_fûe_choo£r_£t_£À˘_mu…ùÀ
(
	`GTK_FILE_CHOOSER
(
dülog
), 
FALSE
);

937 
fûãr
 = 
	`gtk_fûe_fûãr_√w
();

938 
	`gtk_fûe_fûãr_add_∑âîn
(
fûãr
, "*.fio");

939 
	`gtk_fûe_fûãr_add_∑âîn
(
fûãr
, "*.job");

940 
	`gtk_fûe_fûãr_add_∑âîn
(
fûãr
, "*.ini");

941 
	`gtk_fûe_fûãr_add_mime_ty≥
(
fûãr
, 
GFIO_MIME
);

942 
	`gtk_fûe_fûãr_£t_«me
(
fûãr
, "Fio job file");

943 
	`gtk_fûe_choo£r_£t_fûãr
(
	`GTK_FILE_CHOOSER
(
dülog
), 
fûãr
);

945 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë!
GTK_RESPONSE_ACCEPT
) {

946 
	`gtk_widgë_de°roy
(
dülog
);

950 
fûíame
 = 
	`gtk_fûe_choo£r_gë_fûíame
(
	`GTK_FILE_CHOOSER
(
dülog
));

952 
	`gtk_widgë_de°roy
(
dülog
);

954 
	`do_fûe_›í_wôh_èb
(
ui
, 
fûíame
);

955 
	`g_‰ì
(
fûíame
);

956 
	}
}

958 
	$fûe_ßve
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

960 
gui
 *
ui
 = 
d©a
;

961 
GtkWidgë
 *
dülog
;

963 
dülog
 = 
	`gtk_fûe_choo£r_dülog_√w
("Save File",

964 
	`GTK_WINDOW
(
ui
->
wödow
),

965 
GTK_FILE_CHOOSER_ACTION_SAVE
,

966 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_CANCEL
,

967 
GTK_STOCK_SAVE
, 
GTK_RESPONSE_ACCEPT
,

968 
NULL
);

970 
	`gtk_fûe_choo£r_£t_do_ovîwrôe_c⁄fúm©i⁄
(
	`GTK_FILE_CHOOSER
(
dülog
), 
TRUE
);

971 
	`gtk_fûe_choo£r_£t_cuºít_«me
(
	`GTK_FILE_CHOOSER
(
dülog
), "Untitled document");

973 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë=
GTK_RESPONSE_ACCEPT
) {

974 *
fûíame
;

976 
fûíame
 = 
	`gtk_fûe_choo£r_gë_fûíame
(
	`GTK_FILE_CHOOSER
(
dülog
));

978 
	`g_‰ì
(
fûíame
);

980 
	`gtk_widgë_de°roy
(
dülog
);

981 
	}
}

983 
	$võw_log_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

985 
gui
 *
ui
 = (guò*Ë
d©a
;

987 
	`g_obje˘_ªf
(
	`G_OBJECT
(
ui
->
log_åì
));

988 
	`gtk_c⁄èöî_ªmove
(
	`GTK_CONTAINER
(
w
), 
ui
->
log_åì
);

989 
	`gtk_widgë_de°roy
(
w
);

990 
ui
->
log_võw
 = 
NULL
;

991 
	}
}

993 
	$gfio_võw_log
(
gui
 *
ui
)

995 
GtkWidgë
 *
wö
, *
s¸ﬁl
, *
vbox
, *
box
;

997 i‡(
ui
->
log_võw
)

1000 
ui
->
log_võw
 = 
wö
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

1001 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
wö
), "Log");

1002 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
wö
), 700, 500);

1004 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1006 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 5);

1008 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1010 
box
 = 
	`gtk_hbox_√w
(
TRUE
, 0);

1011 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
ui
->
log_åì
, 
TRUE
, TRUE, 0);

1012 
	`g_sig«l_c⁄√˘
(
box
, "de°roy", 
	`G_CALLBACK
(
võw_log_de°roy
), 
ui
);

1013 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
box
);

1015 
vbox
 = 
	`gtk_vbox_√w
(
TRUE
, 5);

1016 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
s¸ﬁl
, 
TRUE
, TRUE, 0);

1018 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
wö
), 
vbox
);

1019 
	`gtk_widgë_show_Æl
(
wö
);

1020 
	}
}

1022 
	$võw_log
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1024 
gui
 *
ui
 = (guò*Ë
d©a
;

1026 
	`gfio_võw_log
(
ui
);

1027 
	}
}

1029 
	$c⁄√˘_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1031 
gui
 *
ui
 = (guò*Ë
d©a
;

1032 
gui_íåy
 *
ge
;

1034 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1035 i‡(
ge
)

1036 
	`c⁄√˘_˛icked
(
w
, 
ge
);

1037 
	}
}

1039 
	$£nd_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1041 
gui
 *
ui
 = (guò*Ë
d©a
;

1042 
gui_íåy
 *
ge
;

1044 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1045 i‡(
ge
)

1046 
	`£nd_˛icked
(
w
, 
ge
);

1047 
	}
}

1049 
	$edô_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1051 
gui
 *
ui
 = (guò*Ë
d©a
;

1052 
gui_íåy
 *
ge
;

1054 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1055 i‡(
ge
 && ge->
˛õ¡
)

1056 
	`g›t_gë_›ti⁄s_wödow
(
ui
->
wödow
, 
ge
->
˛õ¡
);

1057 
	}
}

1059 
	$°¨t_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1061 
gui
 *
ui
 = (guò*Ë
d©a
;

1062 
gui_íåy
 *
ge
;

1064 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1065 i‡(
ge
)

1066 
	`°¨t_job_˛icked
(
w
, 
ge
);

1067 
	}
}

1069 
	$võw_ªsu…s
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1071 
gui
 *
ui
 = (guò*Ë
d©a
;

1072 
gfio_˛õ¡
 *
gc
;

1073 
gui_íåy
 *
ge
;

1075 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1076 i‡(!
ge
)

1079 i‡(
ge
->
ªsu…s_wödow
)

1082 
gc
 = 
ge
->
˛õ¡
;

1083 i‡(
gc
 && gc->
ƒ_ªsu…s
)

1084 
	`gfio_di•œy_íd_ªsu…s
(
gc
);

1085 
	}
}

1087 
	$__upd©e_gøph_£âögs
(
gfio_gøphs
 *
g
)

1089 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
->
i›s_gøph
, 
gfio_gøph_limô
);

1090 
	`gøph_£t_f⁄t
(
g
->
i›s_gøph
, 
gfio_gøph_f⁄t
);

1091 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
->
b™dwidth_gøph
, 
gfio_gøph_limô
);

1092 
	`gøph_£t_f⁄t
(
g
->
b™dwidth_gøph
, 
gfio_gøph_f⁄t
);

1093 
	}
}

1095 
	$ge_upd©e_£âögs_‚
(
gpoöãr
 
key
, gpoöã∏
vÆue
, gpoöã∏
d©a
)

1097 
gui_íåy
 *
ge
 = (gui_íåy *Ë
vÆue
;

1098 
GdkEvít
 *
ev
;

1100 
	`__upd©e_gøph_£âögs
(&
ge
->
gøphs
);

1102 
ev
 = 
	`gdk_evít_√w
(
GDK_EXPOSE
);

1103 
	`g_sig«l_emô_by_«me
(
	`G_OBJECT
(
ge
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`GTK_WIDGET
(ge->gøphs.døwög_¨ó), 
ev
, &ge->graphs);

1104 
	`gdk_evít_‰ì
(
ev
);

1105 
	}
}

1107 
	$upd©e_gøph_limôs
()

1109 
gui
 *
ui
 = &
maö_ui
;

1110 
GdkEvít
 *
ev
;

1112 
	`__upd©e_gøph_£âögs
(&
ui
->
gøphs
);

1114 
ev
 = 
	`gdk_evít_√w
(
GDK_EXPOSE
);

1115 
	`g_sig«l_emô_by_«me
(
	`G_OBJECT
(
ui
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`GTK_WIDGET
(ui->gøphs.døwög_¨ó), 
ev
, &ui->graphs);

1116 
	`gdk_evít_‰ì
(
ev
);

1118 
	`g_hash_èbÀ_f‹óch
(
ui
->
ge_hash
, 
ge_upd©e_£âögs_‚
, 
NULL
);

1119 
	}
}

1121 
	$¥e„ªn˚s
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1123 
GtkWidgë
 *
dülog
, *
‰ame
, *
box
, **
buâ⁄s
, *
vbox
, *
f⁄t
;

1124 
GtkWidgë
 *
hbox
, *
•ö
, *
íåy
, *
•ö_öt
;

1125 
gui
 *
ui
 = (guò*Ë
d©a
;

1126 
i
;

1128 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Preferences",

1129 
	`GTK_WINDOW
(
ui
->
wödow
),

1130 
GTK_DIALOG_DESTROY_WITH_PARENT
,

1131 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
,

1132 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_REJECT
,

1133 
NULL
);

1135 
‰ame
 = 
	`gtk_‰ame_√w
("Graphing");

1136 
vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

1137 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1138 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1139 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

1141 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 5);

1142 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
hbox
, 
FALSE
, FALSE, 5);

1143 
íåy
 = 
	`gtk_œbñ_√w
("Font faceÅo use for graphÜabels");

1144 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
íåy
, 
TRUE
, TRUE, 5);

1146 
f⁄t
 = 
	`gtk_f⁄t_buâ⁄_√w_wôh_f⁄t
(
gfio_gøph_f⁄t
);

1147 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
f⁄t
, 
FALSE
, FALSE, 5);

1149 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1150 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

1152 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 5);

1153 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
TRUE
, TRUE, 5);

1154 
íåy
 = 
	`gtk_œbñ_√w
("MaximumÇumber of dataÖoints in graph (seconds)");

1155 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
íåy
, 
FALSE
, FALSE, 5);

1157 
•ö
 = 
	`¸óã_•öbuâ⁄
(
hbox
, 10, 1000000, 
gfio_gøph_limô
);

1159 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1160 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

1162 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 5);

1163 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
TRUE
, TRUE, 5);

1164 
íåy
 = 
	`gtk_œbñ_√w
("Client ETAÑequest interval (msec)");

1165 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
íåy
, 
FALSE
, FALSE, 5);

1167 
•ö_öt
 = 
	`¸óã_•öbuâ⁄
(
hbox
, 100, 100000, 
gfio_˛õ¡_›s
.
ëa_m£c
);

1168 
‰ame
 = 
	`gtk_‰ame_√w
("DebugÜogging");

1169 
vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

1170 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1171 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1172 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

1174 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 6);

1175 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
vbox
), 
box
);

1177 
buâ⁄s
 = 
	`mÆloc
((
GtkWidgë
 *Ë* 
FD_DEBUG_MAX
);

1179 
i
 = 0; i < 
FD_DEBUG_MAX
; i++) {

1180 i‡(
i
 == 7) {

1181 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 6);

1182 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
vbox
), 
box
);

1186 
buâ⁄s
[
i
] = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
(
debug_Àvñs
[i].
«me
);

1187 
	`gtk_widgë_£t_toﬁtù_ãxt
(
buâ⁄s
[
i
], 
debug_Àvñs
[i].
hñp
);

1188 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
buâ⁄s
[
i
], 
FALSE
, FALSE, 6);

1191 
	`gtk_widgë_show_Æl
(
dülog
);

1193 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë!
GTK_RESPONSE_ACCEPT
) {

1194 
	`gtk_widgë_de°roy
(
dülog
);

1198 
i
 = 0; i < 
FD_DEBUG_MAX
; i++) {

1199 
£t
;

1201 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
buâ⁄s
[
i
]));

1202 i‡(
£t
)

1203 
fio_debug
 |(1UL << 
i
);

1206 
gfio_gøph_f⁄t
 = 
	`°rdup
(
	`gtk_f⁄t_buâ⁄_gë_f⁄t_«me
(
	`GTK_FONT_BUTTON
(
f⁄t
)));

1207 
gfio_gøph_limô
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
•ö
));

1208 
	`upd©e_gøph_limôs
();

1209 
gfio_˛õ¡_›s
.
ëa_m£c
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
•ö_öt
));

1211 
	`gtk_widgë_de°roy
(
dülog
);

1212 
	}
}

1214 
	$about_dülog
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1216 c⁄° *
auth‹s
[] = {

1219 
NULL


1221 c⁄° *
li˚n£
[] = {

1234 *
li˚n£_å™s
;

1236 
li˚n£_å™s
 = 
	`g_°rc⁄ˇt
(
li˚n£
[0], "\n",Üicense[1], "\n",

1237 
li˚n£
[2], "\n", 
NULL
);

1239 
	`gtk_show_about_dülog
(
NULL
,

1242 "li˚n£", 
li˚n£_å™s
,

1244 "auth‹s", 
auth‹s
,

1245 "vîsi⁄", 
fio_vîsi⁄_°rög
,

1249 "wøp-li˚n£", 
TRUE
,

1250 
NULL
);

1252 
	`g_‰ì
(
li˚n£_å™s
);

1253 
	}
}

1255 
GtkA˘i⁄E¡ry
 
	gmíu_ôems
[] = {

1256 { "FûeMíuA˘i⁄", 
GTK_STOCK_FILE
, "Fûe", 
NULL
, NULL, NULL},

1257 { "VõwMíuA˘i⁄", 
GTK_STOCK_FILE
, "Võw", 
NULL
, NULL, NULL},

1258 { "JobMíuA˘i⁄", 
GTK_STOCK_FILE
, "Job", 
NULL
, NULL, NULL},

1259 { "HñpMíuA˘i⁄", 
GTK_STOCK_HELP
, "Hñp", 
NULL
, NULL, NULL},

1260 { "NewFûe", 
GTK_STOCK_NEW
, "New", "<C⁄åﬁ>N", 
NULL
, 
G_CALLBACK
(
fûe_√w
) },

1261 { "Clo£Fûe", 
GTK_STOCK_CLOSE
, "Clo£", "<C⁄åﬁ>W", 
NULL
, 
G_CALLBACK
(
fûe_˛o£
) },

1262 { "O≥nFûe", 
GTK_STOCK_OPEN
, 
NULL
, "<C⁄åﬁ>O", NULL, 
G_CALLBACK
(
fûe_›í
) },

1263 { "SaveFûe", 
GTK_STOCK_SAVE
, 
NULL
, "<C⁄åﬁ>S", NULL, 
G_CALLBACK
(
fûe_ßve
) },

1264 { "Pª„ªn˚s", 
GTK_STOCK_PREFERENCES
, 
NULL
, "<C⁄åﬁ>p", NULL, 
G_CALLBACK
(
¥e„ªn˚s
) },

1265 { "VõwLog", 
NULL
, "Log", "<C⁄åﬁ>l", NULL, 
G_CALLBACK
(
võw_log
) },

1266 { "VõwResu…s", 
NULL
, "Resu…s", "<C⁄åﬁ>R", NULL, 
G_CALLBACK
(
võw_ªsu…s
) },

1267 { "C⁄√˘Job", 
NULL
, "C⁄√˘", "<C⁄åﬁ>D", NULL, 
G_CALLBACK
(
c⁄√˘_job_íåy
) },

1268 { "EdôJob", 
NULL
, "Edô job", "<C⁄åﬁ>E", NULL, 
G_CALLBACK
(
edô_job_íåy
) },

1269 { "SídJob", 
NULL
, "Síd job", "<C⁄åﬁ>X", NULL, 
G_CALLBACK
(
£nd_job_íåy
) },

1270 { "SèπJob", 
NULL
, "Sèπ job", "<C⁄åﬁ>L", NULL, 
G_CALLBACK
(
°¨t_job_íåy
) },

1271 { "Quô", 
GTK_STOCK_QUIT
, 
NULL
, "<C⁄åﬁ>Q", NULL, 
G_CALLBACK
(
quô_˛icked
) },

1272 { "About", 
GTK_STOCK_ABOUT
, 
NULL
, NULL, NULL, 
G_CALLBACK
(
about_dülog
) },

1274 
göt
 
	gnmíu_ôems
 = 
ARRAY_SIZE
(
míu_ôems
);

1276 c⁄° 
gch¨
 *
	gui_°rög
 = " \
<ui> \
<menubarÇame=\"MainMenu\"> \
<menuÇame=\"FileMenu\"áction=\"FileMenuAction\"> \
<menuitemÇame=\"New\"áction=\"NewFile\" /> \
<menuitemÇame=\"Open\"áction=\"OpenFile\" /> \
<menuitemÇame=\"Close\"áction=\"CloseFile\" /> \
<separatorÇame=\"Separator1\"/> \
<menuitemÇame=\"Save\"áction=\"SaveFile\" /> \
<separatorÇame=\"Separator2\"/> \
<menuitemÇame=\"Preferences\"áction=\"Preferences\" /> \
<separatorÇame=\"Separator3\"/> \
<placeholderÇame=\"FileRecentFiles\"/> \
<separatorÇame=\"Separator4\"/> \
<menuitemÇame=\"Quit\"áction=\"Quit\" /> \
</menu> \
<menuÇame=\"JobMenu\"áction=\"JobMenuAction\"> \
<menuitemÇame=\"Connect\"áction=\"ConnectJob\" /> \
<separatorÇame=\"Separator5\"/> \
<menuitemÇame=\"Edit job\"áction=\"EditJob\" /> \
<menuitemÇame=\"Send job\"áction=\"SendJob\" /> \
<separatorÇame=\"Separator6\"/> \
<menuitemÇame=\"Start job\"áction=\"StartJob\" /> \
</menu>\
<menuÇame=\"ViewMenu\"áction=\"ViewMenuAction\"> \
<menuitemÇame=\"Results\"áction=\"ViewResults\" /> \
<separatorÇame=\"Separator7\"/> \
<menuitemÇame=\"Log\"áction=\"ViewLog\" /> \
</menu>\
<menuÇame=\"Help\"áction=\"HelpMenuAction\"> \
<menuitemÇame=\"About\"áction=\"About\" /> \
</menu> \
</menubar> \
</ui> \
";

1312 
GtkWidgë
 *
	$gë_míub¨_míu
(
GtkWidgë
 *
wödow
, 
GtkUIM™agî
 *
ui_m™agî
,

1313 
gui
 *
ui
)

1315 
GtkA˘i⁄Group
 *
a˘i⁄_group
;

1316 
GEº‹
 *
îr‹
 = 0;

1318 
a˘i⁄_group
 = 
	`gtk_a˘i⁄_group_√w
("Menu");

1319 
	`gtk_a˘i⁄_group_add_a˘i⁄s
(
a˘i⁄_group
, 
míu_ôems
, 
nmíu_ôems
, 
ui
);

1321 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
(
ui_m™agî
, 
a˘i⁄_group
, 0);

1322 
	`gtk_ui_m™agî_add_ui_‰om_°rög
(
	`GTK_UI_MANAGER
(
ui_m™agî
), 
ui_°rög
, -1, &
îr‹
);

1324 
	`gtk_wödow_add_ac˚l_group
(
	`GTK_WINDOW
(
wödow
), 
	`gtk_ui_m™agî_gë_ac˚l_group
(
ui_m™agî
));

1326  
	`gtk_ui_m™agî_gë_widgë
(
ui_m™agî
, "/MainMenu");

1327 
	}
}

1329 
	$gfio_ui_£tup
(
GtkSëtögs
 *
£âögs
, 
GtkWidgë
 *
míub¨
,

1330 
GtkWidgë
 *
vbox
, 
GtkUIM™agî
 *
ui_m™agî
)

1332 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
míub¨
, 
FALSE
, FALSE, 0);

1333 
	}
}

1335 
	$combo_íåy_ch™ged
(
GtkComboBox
 *
box
, 
gpoöãr
 
d©a
)

1337 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

1338 
göt
 
ödex
;

1340 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
box
);

1342 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iŸy≥
, 
ödex
);

1343 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
bs
, 
ödex
);

1344 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
i€ngöe
, 
ödex
);

1345 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iodïth
, 
ödex
);

1346 
	}
}

1348 
	$combo_íåy_de°roy
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

1350 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

1352 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
iŸy≥
);

1353 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
bs
);

1354 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
i€ngöe
);

1355 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
iodïth
);

1356 
	}
}

1358 
GtkWidgë
 *
	$√w_˛õ¡_∑ge
(
gui_íåy
 *
ge
)

1360 
GtkWidgë
 *
maö_vbox
, *
¥obe
, *
¥obe_‰ame
, *
¥obe_box
;

1361 
GtkWidgë
 *
s¸ﬁÀd_wödow
, *
bŸtom_Æign
, *
t›_Æign
, *
t›_vbox
;

1363 
maö_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1365 
t›_Æign
 = 
	`gtk_Æignmít_√w
(0, 0, 1, 0);

1366 
t›_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1367 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
t›_Æign
), 
t›_vbox
);

1368 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
t›_Æign
, 
FALSE
, FALSE, 0);

1370 
¥obe
 = 
	`gtk_‰ame_√w
("Job");

1371 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
¥obe
, 
FALSE
, FALSE, 3);

1372 
¥obe_‰ame
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1373 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
¥obe
), 
¥obe_‰ame
);

1375 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1376 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1377 
ge
->
¥obe
.
ho°«me
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Host");

1378 
ge
->
¥obe
.
os
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "OS");

1379 
ge
->
¥obe
.
¨ch
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Architecture");

1380 
ge
->
¥obe
.
fio_vî
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Fio version");

1382 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1383 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1385 
ge
->
ëa
.
«mes
 = 
	`√w_combo_íåy_ö_‰ame
(
¥obe_box
, "Jobs");

1386 
	`g_sig«l_c⁄√˘
(
ge
->
ëa
.
«mes
, "ch™ged", 
	`G_CALLBACK
(
combo_íåy_ch™ged
), ge);

1387 
	`g_sig«l_c⁄√˘
(
ge
->
ëa
.
«mes
, "de°roy", 
	`G_CALLBACK
(
combo_íåy_de°roy
), ge);

1388 
ge
->
ëa
.
iŸy≥
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "IO");

1389 
ge
->
ëa
.
bs
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Blocksize (Read/Write/Trim)");

1390 
ge
->
ëa
.
i€ngöe
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "IO Engine");

1391 
ge
->
ëa
.
iodïth
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "IO Depth");

1392 
ge
->
ëa
.
jobs
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Jobs");

1393 
ge
->
ëa
.
fûes
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Open files");

1395 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1396 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1397 
ge
->
ëa
.
ªad_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Ród BW", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1398 
ge
->
ëa
.
ªad_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Ród IOPS", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1399 
ge
->
ëa
.
wrôe_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "WrôêBW", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1400 
ge
->
ëa
.
wrôe_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "WrôêIOPS", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1401 
ge
->
ëa
.
åim_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Trim BW", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1402 
ge
->
ëa
.
åim_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Trim IOPS", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1408 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1409 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
TRUE
, 
FALSE
, 3);

1411 
ge
->
ëa
.
¸_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1412 
ge
->
ëa
.
¸_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1414 
ge
->
ëa
.
cw_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1415 
ge
->
ëa
.
cw_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1421 
ge
->
gøphs
.
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1422 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
ge
->
gøphs
.
døwög_¨ó
),

1423 
DRAWING_AREA_XDIM
, 
DRAWING_AREA_YDIM
);

1424 
	`gtk_widgë_modify_bg
(
ge
->
gøphs
.
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_lightyñlow
);

1425 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ge
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
,

1426 
	`G_CALLBACK
(
⁄_expo£_døwög_¨ó
), &
ge
->
gøphs
);

1427 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ge
->
gøphs
.
døwög_¨ó
), "configure_event",

1428 
	`G_CALLBACK
(
⁄_c⁄fig_døwög_¨ó
), &
ge
->
gøphs
);

1429 
s¸ﬁÀd_wödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1430 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1431 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1432 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1433 
ge
->
gøphs
.
døwög_¨ó
);

1434 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
s¸ﬁÀd_wödow
, 
TRUE
, TRUE, 0);

1436 
	`£tup_gøphs
(&
ge
->
gøphs
);

1442 
bŸtom_Æign
 = 
	`gtk_Æignmít_√w
(0, 1, 1, 0);

1443 
ge
->
buâ⁄box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1444 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
bŸtom_Æign
), 
ge
->
buâ⁄box
);

1445 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
bŸtom_Æign
, 
FALSE
, FALSE, 0);

1447 
	`add_buâ⁄s
(
ge
, 
buâ⁄•e˛i°
, 
	`ARRAY_SIZE
(buttonspeclist));

1452 
ge
->
thªad_°©us_pb
 = 
	`gtk_¥ogªss_b¨_√w
();

1453 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 0.0);

1454 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), "No connections");

1455 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ge
->
buâ⁄box
), ge->
thªad_°©us_pb
);

1458  
maö_vbox
;

1459 
	}
}

1461 
GtkWidgë
 *
	$√w_maö_∑ge
(
gui
 *
ui
)

1463 
GtkWidgë
 *
maö_vbox
, *
¥obe
, *
¥obe_‰ame
, *
¥obe_box
;

1464 
GtkWidgë
 *
s¸ﬁÀd_wödow
, *
bŸtom_Æign
, *
t›_Æign
, *
t›_vbox
;

1466 
maö_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1472 
t›_Æign
 = 
	`gtk_Æignmít_√w
(0, 0, 1, 0);

1473 
t›_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

1474 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
t›_Æign
), 
t›_vbox
);

1475 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
t›_Æign
, 
FALSE
, FALSE, 0);

1477 
¥obe
 = 
	`gtk_‰ame_√w
("Run statistics");

1478 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
¥obe
, 
FALSE
, FALSE, 3);

1479 
¥obe_‰ame
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1480 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
¥obe
), 
¥obe_‰ame
);

1482 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1483 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1484 
ui
->
ëa
.
jobs
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Running");

1485 
ui
->
ëa
.
ªad_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Ród BW", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1486 
ui
->
ëa
.
ªad_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1487 
ui
->
ëa
.
wrôe_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "WrôêBW", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1488 
ui
->
ëa
.
wrôe_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1489 
ui
->
ëa
.
åim_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Trim BW", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1490 
ui
->
ëa
.
åim_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1496 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1497 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
TRUE
, 
FALSE
, 3);

1499 
ui
->
ëa
.
¸_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1500 
ui
->
ëa
.
¸_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1502 
ui
->
ëa
.
cw_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1503 
ui
->
ëa
.
cw_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1509 
ui
->
gøphs
.
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1510 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
ui
->
gøphs
.
døwög_¨ó
),

1511 
DRAWING_AREA_XDIM
, 
DRAWING_AREA_YDIM
);

1512 
	`gtk_widgë_modify_bg
(
ui
->
gøphs
.
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_lightyñlow
);

1513 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ui
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
,

1514 
	`G_CALLBACK
(
⁄_expo£_døwög_¨ó
), &
ui
->
gøphs
);

1515 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ui
->
gøphs
.
døwög_¨ó
), "configure_event",

1516 
	`G_CALLBACK
(
⁄_c⁄fig_døwög_¨ó
), &
ui
->
gøphs
);

1517 
s¸ﬁÀd_wödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1518 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1519 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1520 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1521 
ui
->
gøphs
.
døwög_¨ó
);

1522 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
s¸ﬁÀd_wödow
,

1523 
TRUE
, TRUE, 0);

1525 
	`£tup_gøphs
(&
ui
->
gøphs
);

1531 
bŸtom_Æign
 = 
	`gtk_Æignmít_√w
(0, 1, 1, 0);

1532 
ui
->
buâ⁄box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1533 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
bŸtom_Æign
), 
ui
->
buâ⁄box
);

1534 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
bŸtom_Æign
, 
FALSE
, FALSE, 0);

1539 
ui
->
thªad_°©us_pb
 = 
	`gtk_¥ogªss_b¨_√w
();

1540 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), 0.0);

1541 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), "No connections");

1542 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ui
->
buâ⁄box
), ui->
thªad_°©us_pb
);

1544  
maö_vbox
;

1545 
	}
}

1547 
gboﬁón
 
	$nŸebook_swôch_∑ge
(
GtkNŸebook
 *
nŸebook
, 
GtkWidgë
 *
widgë
,

1548 
guöt
 
∑ge
, 
gpoöãr
 
d©a
)

1551 
gui
 *
ui
 = (guò*Ë
d©a
;

1552 
gui_íåy
 *
ge
;

1554 i‡(!
∑ge
) {

1555 
	`£t_job_míu_visibÀ
(
ui
, 0);

1556 
	`£t_võw_ªsu…s_visibÀ
(
ui
, 0);

1557  
TRUE
;

1560 
	`£t_job_míu_visibÀ
(
ui
, 1);

1561 
ge
 = 
	`gë_ge_‰om_∑ge
(
ui
, 
∑ge
, 
NULL
);

1562 i‡(
ge
)

1563 
	`upd©e_buâ⁄_°©es
(
ui
, 
ge
);

1565  
TRUE
;

1566 
	}
}

1568 
göt
 
	$com∑ª_ª˚¡_ôems
(
GtkRe˚¡Info
 *
a
, GtkRe˚¡Infÿ*
b
)

1570 
time_t
 
time_a
 = 
	`gtk_ª˚¡_öfo_gë_visôed
(
a
);

1571 
time_t
 
time_b
 = 
	`gtk_ª˚¡_öfo_gë_visôed
(
b
);

1573  
time_b
 - 
time_a
;

1574 
	}
}

1576 
	$add_ª˚¡_fûe_ôems
(
gui
 *
ui
)

1578 c⁄° 
gch¨
 *
gfio
 = 
	`g_gë_≠∂iˇti⁄_«me
();

1579 
GLi°
 *
ôems
, *
ôem
;

1580 
i
 = 0;

1582 i‡(
ui
->
ª˚¡_ui_id
) {

1583 
	`gtk_ui_m™agî_ªmove_ui
(
ui
->
uim™agî
, ui->
ª˚¡_ui_id
);

1584 
	`gtk_ui_m™agî_ísuª_upd©e
(
ui
->
uim™agî
);

1586 
ui
->
ª˚¡_ui_id
 = 
	`gtk_ui_m™agî_√w_mîge_id
(ui->
uim™agî
);

1588 i‡(
ui
->
a˘i⁄group
) {

1589 
	`gtk_ui_m™agî_ªmove_a˘i⁄_group
(
ui
->
uim™agî
, ui->
a˘i⁄group
);

1590 
	`g_obje˘_uƒef
(
ui
->
a˘i⁄group
);

1592 
ui
->
a˘i⁄group
 = 
	`gtk_a˘i⁄_group_√w
("RecentFileActions");

1594 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
(
ui
->
uim™agî
, ui->
a˘i⁄group
, -1);

1596 
ôems
 = 
	`gtk_ª˚¡_m™agî_gë_ôems
(
ui
->
ª˚¡m™agî
);

1597 
ôems
 = 
	`g_li°_s‹t
(ôems, (
GCom∑ªFunc
Ë
com∑ª_ª˚¡_ôems
);

1599 
ôem
 = 
ôems
; iãm && iãm->
d©a
; iãm = 
	`g_li°_√xt
(item)) {

1600 
GtkRe˚¡Info
 *
öfo
 = (GtkRe˚¡Infÿ*Ë
ôem
->
d©a
;

1601 
gch¨
 *
a˘i⁄_«me
;

1602 c⁄° 
gch¨
 *
œbñ
;

1603 
GtkA˘i⁄
 *
a˘i⁄
;

1605 i‡(!
	`gtk_ª˚¡_öfo_has_≠∂iˇti⁄
(
öfo
, 
gfio
))

1611 i‡(!
	`gtk_ª˚¡_öfo_is_loˇl
(
öfo
Ë|| !
	`gtk_ª˚¡_öfo_exi°s
(info))

1614 
a˘i⁄_«me
 = 
	`g_°rdup_¥ötf
("Re˚¡Fûe%u", 
i
++);

1615 
œbñ
 = 
	`gtk_ª˚¡_öfo_gë_di•œy_«me
(
öfo
);

1617 
a˘i⁄
 = 
	`g_obje˘_√w
(
GTK_TYPE_ACTION
,

1618 "«me", 
a˘i⁄_«me
,

1619 "œbñ", 
œbñ
, 
NULL
);

1621 
	`g_obje˘_£t_d©a_fuŒ
(
	`G_OBJECT
(
a˘i⁄
), "gtk-recent-info",

1622 
	`gtk_ª˚¡_öfo_ªf
(
öfo
),

1623 (
GDe°royNŸify
Ë
gtk_ª˚¡_öfo_uƒef
);

1626 
	`g_sig«l_c⁄√˘
(
a˘i⁄
, "a˘iv©e", 
	`G_CALLBACK
(
ª˚¡_›í
), 
ui
);

1628 
	`gtk_a˘i⁄_group_add_a˘i⁄
(
ui
->
a˘i⁄group
, 
a˘i⁄
);

1629 
	`g_obje˘_uƒef
(
a˘i⁄
);

1631 
	`gtk_ui_m™agî_add_ui
(
ui
->
uim™agî
, ui->
ª˚¡_ui_id
,

1633 
œbñ
, 
a˘i⁄_«me
,

1634 
GTK_UI_MANAGER_MENUITEM
, 
FALSE
);

1636 
	`g_‰ì
(
a˘i⁄_«me
);

1638 i‡(
i
 == 8)

1642 
	`g_li°_f‹óch
(
ôems
, (
GFunc
Ë
gtk_ª˚¡_öfo_uƒef
, 
NULL
);

1643 
	`g_li°_‰ì
(
ôems
);

1644 
	}
}

1646 
	$døg_™d_dr›_ª˚ived
(
GtkWidgë
 *
widgë
, 
GdkDøgC⁄ãxt
 *
˘x
,

1647 
göt
 
x
, göà
y
, 
GtkSñe˘i⁄D©a
 *
£ld©a
,

1648 
guöt
 
öfo
, guöà
time
, 
gpoöãr
 *
d©a
)

1650 
gui
 *
ui
 = (guò*Ë
d©a
;

1651 
gch¨
 **
uris
;

1652 
GtkWidgë
 *
sour˚
;

1654 
sour˚
 = 
	`gtk_døg_gë_sour˚_widgë
(
˘x
);

1655 i‡(
sour˚
 && 
widgë
 =
	`gtk_widgë_gë_t›Àvñ
(source)) {

1656 
	`gtk_døg_föish
(
˘x
, 
FALSE
, FALSE, 
time
);

1660 
uris
 = 
	`gtk_£À˘i⁄_d©a_gë_uris
(
£ld©a
);

1661 i‡(!
uris
) {

1662 
	`gtk_døg_föish
(
˘x
, 
FALSE
, FALSE, 
time
);

1666 i‡(
uris
[0])

1667 
	`do_fûe_›í_wôh_èb
(
ui
, 
uris
[0]);

1669 
	`gtk_døg_föish
(
˘x
, 
TRUE
, 
FALSE
, 
time
);

1670 
	`g_°r‰ìv
(
uris
);

1671 
	}
}

1673 
	$öô_ui
(*
¨gc
, **
¨gv
[], 
gui
 *
ui
)

1675 
GtkSëtögs
 *
£âögs
;

1676 
GtkWidgë
 *
vbox
;

1682 #i‡!
	`GLIB_CHECK_VERSION
(2, 31, 0)

1683 i‡(!
	`g_thªad_suµ‹ãd
())

1684 
	`g_thªad_öô
(
NULL
);

1687 
	`gdk_thªads_öô
();

1689 
	`gtk_öô
(
¨gc
, 
¨gv
);

1690 
£âögs
 = 
	`gtk_£âögs_gë_deÁu…
();

1691 
	`gtk_£âögs_£t_l⁄g_¥›îty
(
£âögs
, "gtk_tooltip_timeout", 10, "gfio setting");

1692 #i‡!
	`GLIB_CHECK_VERSION
(2, 36, 0)

1693 
	`g_ty≥_öô
();

1695 
	`gdk_cﬁ‹_∑r£
("#fffff4", &
gfio_cﬁ‹_lightyñlow
);

1696 
	`gdk_cﬁ‹_∑r£
("whôe", &
gfio_cﬁ‹_whôe
);

1698 
ui
->
wödow
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

1699 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
ui
->
wödow
), "fio");

1700 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
ui
->
wödow
), 1024, 768);

1702 
	`g_sig«l_c⁄√˘
(
ui
->
wödow
, "dñëe-evít", 
	`G_CALLBACK
(
quô_˛icked
), ui);

1703 
	`g_sig«l_c⁄√˘
(
ui
->
wödow
, "de°roy", 
	`G_CALLBACK
(
quô_˛icked
), ui);

1705 
ui
->
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

1706 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ui
->
wödow
), ui->
vbox
);

1708 
ui
->
uim™agî
 = 
	`gtk_ui_m™agî_√w
();

1709 
ui
->
míu
 = 
	`gë_míub¨_míu
(ui->
wödow
, ui->
uim™agî
, ui);

1710 
	`gfio_ui_£tup
(
£âögs
, 
ui
->
míu
, ui->
vbox
, ui->
uim™agî
);

1712 
ui
->
ª˚¡m™agî
 = 
	`gtk_ª˚¡_m™agî_gë_deÁu…
();

1713 
	`add_ª˚¡_fûe_ôems
(
ui
);

1715 
ui
->
nŸebook
 = 
	`gtk_nŸebook_√w
();

1716 
	`g_sig«l_c⁄√˘
(
ui
->
nŸebook
, "swôch-∑ge", 
	`G_CALLBACK
(
nŸebook_swôch_∑ge
), ui);

1717 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 1);

1718 
	`gtk_nŸebook_p›up_íabÀ
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
));

1719 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ui
->
vbox
), ui->
nŸebook
);

1721 
vbox
 = 
	`√w_maö_∑ge
(
ui
);

1722 
	`gtk_døg_de°_£t
(
	`GTK_WIDGET
(
ui
->
wödow
), 
GTK_DEST_DEFAULT_ALL
, 
NULL
, 1, 
GDK_ACTION_COPY
);

1723 
	`gtk_døg_de°_add_uri_èrgës
(
	`GTK_WIDGET
(
ui
->
wödow
));

1724 
	`g_sig«l_c⁄√˘
(
ui
->
wödow
, "døg-d©a-ª˚ived", 
	`G_CALLBACK
(
døg_™d_dr›_ª˚ived
), ui);

1726 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 
vbox
, 
	`gtk_œbñ_√w
("Main"));

1728 
	`gfio_ui_£tup_log
(
ui
);

1730 
	`gtk_widgë_show_Æl
(
ui
->
wödow
);

1731 
	}
}

1733 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

1735 i‡(
	`öôülize_fio
(
ívp
))

1737 i‡(
	`fio_öô_›ti⁄s
())

1740 
	`g›t_öô
();

1742 
	`mem£t
(&
maö_ui
, 0, (main_ui));

1743 
maö_ui
.
ge_hash
 = 
	`g_hash_èbÀ_√w
(
g_öt_hash
, 
g_öt_equÆ
);

1745 
	`öô_ui
(&
¨gc
, &
¨gv
, &
maö_ui
);

1747 
	`gdk_thªads_íãr
();

1748 
	`gtk_maö
();

1749 
	`gdk_thªads_Àave
();

1751 
	`g_hash_èbÀ_de°roy
(
maö_ui
.
ge_hash
);

1753 
	`g›t_exô
();

1755 
	}
}

	@/home/ysjin/Desktop/fio/fio/gfio.h

1 #i‚de‡
GFIO_H


2 
	#GFIO_H


	)

4 
	~<gtk/gtk.h
>

6 
	~"gcom∑t.h
"

7 
	~"°©.h
"

8 
	~"thªad_›ti⁄s.h
"

9 
	~"ghñ≥rs.h
"

10 
	~"gøph.h
"

12 
	s¥obe_widgë
 {

13 
GtkWidgë
 *
	mho°«me
;

14 
GtkWidgë
 *
	mos
;

15 
GtkWidgë
 *
	m¨ch
;

16 
GtkWidgë
 *
	mfio_vî
;

19 
	sëa_widgë
 {

20 
GtkWidgë
 *
	m«mes
;

21 
mu…ôext_widgë
 
	miŸy≥
;

22 
mu…ôext_widgë
 
	mbs
;

23 
mu…ôext_widgë
 
	mi€ngöe
;

24 
mu…ôext_widgë
 
	miodïth
;

25 
GtkWidgë
 *
	mjobs
;

26 
GtkWidgë
 *
	mfûes
;

27 
GtkWidgë
 *
	mªad_bw
;

28 
GtkWidgë
 *
	mªad_i›s
;

29 
GtkWidgë
 *
	m¸_bw
;

30 
GtkWidgë
 *
	m¸_i›s
;

31 
GtkWidgë
 *
	mwrôe_bw
;

32 
GtkWidgë
 *
	mwrôe_i›s
;

33 
GtkWidgë
 *
	mcw_bw
;

34 
GtkWidgë
 *
	mcw_i›s
;

35 
GtkWidgë
 *
	måim_bw
;

36 
GtkWidgë
 *
	måim_i›s
;

39 
	sgfio_gøphs
 {

40 
	#DRAWING_AREA_XDIM
 1000

	)

41 
	#DRAWING_AREA_YDIM
 400

	)

42 
GtkWidgë
 *
	mdøwög_¨ó
;

43 
gøph
 *
	mi›s_gøph
;

44 
gøph_œbñ_t
 
	mªad_i›s
;

45 
gøph_œbñ_t
 
	mwrôe_i›s
;

46 
gøph_œbñ_t
 
	måim_i›s
;

47 
gøph
 *
	mb™dwidth_gøph
;

48 
gøph_œbñ_t
 
	mªad_bw
;

49 
gøph_œbñ_t
 
	mwrôe_bw
;

50 
gøph_œbñ_t
 
	måim_bw
;

56 
	sgui
 {

57 
GtkUIM™agî
 *
	muim™agî
;

58 
GtkRe˚¡M™agî
 *
	mª˚¡m™agî
;

59 
GtkA˘i⁄Group
 *
	ma˘i⁄group
;

60 
guöt
 
	mª˚¡_ui_id
;

61 
GtkWidgë
 *
	mmíu
;

62 
GtkWidgë
 *
	mwödow
;

63 
GtkWidgë
 *
	mvbox
;

64 
GtkWidgë
 *
	mthªad_°©us_pb
;

65 
GtkWidgë
 *
	mbuâ⁄box
;

66 
GtkWidgë
 *
	mnŸebook
;

67 
GtkWidgë
 *
	mîr‹_öfo_b¨
;

68 
GtkWidgë
 *
	mîr‹_œbñ
;

69 
GtkLi°St‹e
 *
	mlog_modñ
;

70 
GtkWidgë
 *
	mlog_åì
;

71 
GtkWidgë
 *
	mlog_võw
;

72 
gfio_gøphs
 
	mgøphs
;

73 
¥obe_widgë
 
	m¥obe
;

74 
ëa_widgë
 
	mëa
;

75 
±hªad_t
 
	m£rvî_t
;

77 
±hªad_t
 
	mt
;

78 
	mh™dÀr_ru¬ög
;

80 
GHashTabÀ
 *
	mge_hash
;

81 } 
	gmaö_ui
;

84 
	mGE_STATE_NEW
 = 1,

85 
	mGE_STATE_CONNECTED
,

86 
	mGE_STATE_JOB_SENT
,

87 
	mGE_STATE_JOB_STARTED
,

88 
	mGE_STATE_JOB_RUNNING
,

89 
	mGE_STATE_JOB_DONE
,

93 
	mGFIO_BUTTON_CONNECT
 = 0,

94 
	mGFIO_BUTTON_SEND
,

95 
	mGFIO_BUTTON_START
,

96 
	mGFIO_BUTTON_NR
,

102 
	sgui_íåy
 {

103 
gui
 *
	mui
;

105 
GtkWidgë
 *
	mvbox
;

106 
GtkWidgë
 *
	mjob_nŸebook
;

107 
GtkWidgë
 *
	mthªad_°©us_pb
;

108 
GtkWidgë
 *
	mbuâ⁄box
;

109 
GtkWidgë
 *
	mbuâ⁄
[
GFIO_BUTTON_NR
];

110 
GtkWidgë
 *
	mnŸebook
;

111 
GtkWidgë
 *
	mîr‹_öfo_b¨
;

112 
GtkWidgë
 *
	mîr‹_œbñ
;

113 
GtkWidgë
 *
	mªsu…s_wödow
;

114 
GtkWidgë
 *
	mªsu…s_nŸebook
;

115 
GtkUIM™agî
 *
	mªsu…s_uim™agî
;

116 
GtkWidgë
 *
	mªsu…s_míu
;

117 
GtkWidgë
 *
	mdisk_utû_vbox
;

118 
GtkLi°St‹e
 *
	mlog_modñ
;

119 
GtkWidgë
 *
	mlog_åì
;

120 
GtkWidgë
 *
	mlog_võw
;

121 
gfio_gøphs
 
	mgøphs
;

122 
¥obe_widgë
 
	m¥obe
;

123 
ëa_widgë
 
	mëa
;

124 
GtkWidgë
 *
	m∑ge_œbñ
;

125 
göt
 
	m∑ge_num
;

126 
	m°©e
;

128 
gøph
 *
	m˛©_gøph
;

129 
gøph
 *
	mœt_buckë_gøph
;

131 
gfio_˛õ¡
 *
	m˛õ¡
;

132 *
	mjob_fûe
;

133 *
	mho°
;

134 
	mp‹t
;

135 
	mty≥
;

136 
	m£rvî_°¨t
;

139 
	síd_ªsu…s
 {

140 
group_run_°©s
 
	mgs
;

141 
thªad_°©
 
	mts
;

144 
	sgfio_˛õ¡_›ti⁄s
 {

145 
Êi°_hód
 
	mli°
;

146 
thªad_›ti⁄s
 
	mo
;

149 
	sgfio_˛õ¡
 {

150 
gui_íåy
 *
	mge
;

151 
fio_˛õ¡
 *
	m˛õ¡
;

152 
GtkWidgë
 *
	mîr_íåy
;

153 
uöt32_t
 
	m˛õ¡_˝us
;

154 
uöt64_t
 
	m˛õ¡_Êags
;

156 
Êi°_hód
 
	mo_li°
;

157 
	mo_li°_ƒ
;

159 
íd_ªsu…s
 *
	mªsu…s
;

160 
	mƒ_ªsu…s
;

162 
uöt32_t
 
	mupd©e_job_°©us
;

163 vﬁ©ûê
uöt32_t
 
	mupd©e_job_d⁄e
;

165 
cmd_du_pdu
 *
	mdu
;

166 
	mƒ_du
;

169 
	#GFIO_MIME
 "ãxt/fio"

	)

171 
gfio_võw_log
(
gui
 *
ui
);

172 
gfio_£t_°©e
(
gui_íåy
 *
ge
, 
°©e
);

173 
˛ór_ge_ui_öfo
(
gui_íåy
 *
ge
);

175 c⁄° *
gfio_gøph_f⁄t
;

176 
GdkCﬁ‹
 
gfio_cﬁ‹_whôe
;

177 
GdkCﬁ‹
 
gfio_cﬁ‹_lightyñlow
;

	@/home/ysjin/Desktop/fio/fio/ghelpers.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<gtk/gtk.h
>

5 
	~"gcom∑t.h
"

6 
	~"ghñ≥rs.h
"

8 
GtkWidgë
 *
	$√w_combo_íåy_ö_‰ame
(
GtkWidgë
 *
box
, c⁄° *
œbñ
)

10 
GtkWidgë
 *
íåy
, *
‰ame
;

12 
‰ame
 = 
	`gtk_‰ame_√w
(
œbñ
);

13 
íåy
 = 
	`gtk_combo_box_ãxt_√w
();

14 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 3);

15 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
íåy
);

17  
íåy
;

18 
	}
}

20 
GtkWidgë
 *
	$√w_öfo_íåy_ö_‰ame
(
GtkWidgë
 *
box
, c⁄° *
œbñ
)

22 
GtkWidgë
 *
íåy
, *
‰ame
;

24 
‰ame
 = 
	`gtk_‰ame_√w
(
œbñ
);

25 
íåy
 = 
	`gtk_íåy_√w
();

26 
	`gtk_edôabÀ_£t_edôabÀ
(
	`GTK_EDITABLE
(
íåy
), 0);

27 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 3);

28 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
íåy
);

30  
íåy
;

31 
	}
}

33 
	$fûl_cﬁ‹_‰om_rgb
(
GdkCﬁ‹
 *
c
, 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
)

35 
göt
 
R
, 
G
, 
B
;

36 
gch¨
 
tmp
[8];

38 
	`mem£t
(
c
, 0, (*c));

39 
R
 = 
r
 * 255;

40 
G
 = 
g
 * 255;

41 
B
 = 
b
 * 255;

42 
	`¢¥ötf
(
tmp
, —mp), "#%02x%02x%02x", 
R
, 
G
, 
B
);

43 
	`gdk_cﬁ‹_∑r£
(
tmp
, 
c
);

44 
	}
}

46 
GtkWidgë
 *
	$√w_öfo_íåy_ö_‰ame_rgb
(
GtkWidgë
 *
box
, c⁄° *
œbñ
,

47 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
)

49 
GtkWidgë
 *
íåy
;

50 
GdkCﬁ‹
 
c
;

52 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, 
œbñ
);

53 
	`fûl_cﬁ‹_‰om_rgb
(&
c
, 
r
, 
g
, 
b
);

54 
	`gtk_widgë_modify_ãxt
(
íåy
, 
GTK_STATE_NORMAL
, &
c
);

55  
íåy
;

56 
	}
}

58 
GtkWidgë
 *
	$√w_öfo_œbñ_ö_‰ame
(
GtkWidgë
 *
box
, c⁄° *
œbñ
)

60 
GtkWidgë
 *
œbñ_widgë
;

61 
GtkWidgë
 *
‰ame
;

63 
‰ame
 = 
	`gtk_‰ame_√w
(
œbñ
);

64 
œbñ_widgë
 = 
	`gtk_œbñ_√w
(
NULL
);

65 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 3);

66 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
œbñ_widgë
);

68  
œbñ_widgë
;

69 
	}
}

71 
GtkWidgë
 *
	$¸óã_•öbuâ⁄
(
GtkWidgë
 *
hbox
, 
mö
, 
max
, 
defvÆ
)

73 
GtkWidgë
 *
buâ⁄
, *
box
;

75 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

76 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
hbox
), 
box
);

78 
buâ⁄
 = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(
mö
, 
max
, 1.0);

79 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
buâ⁄
, 
TRUE
, TRUE, 0);

81 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
buâ⁄
), 
GTK_UPDATE_IF_VALID
);

82 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
buâ⁄
), 
defvÆ
);

84  
buâ⁄
;

85 
	}
}

87 
	$œbñ_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
)

89 
tmp
[80];

91 
	`•rötf
(
tmp
, "%u", 
vÆ
);

92 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
íåy
), 
tmp
);

93 
	}
}

95 
	$íåy_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
)

97 
tmp
[80];

99 
	`•rötf
(
tmp
, "%u", 
vÆ
);

100 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

101 
	}
}

103 
GtkTªeVõwCﬁumn
 *
	$åì_võw_cﬁumn
(
GtkWidgë
 *
åì_võw
, 
ödex
, c⁄° *
tôÀ
, 
Êags
)

105 
GtkCñlRídîî
 *
ªndîî
;

106 
GtkTªeVõwCﬁumn
 *
cﬁ
;

107 
xÆign
 = 0.0;

108 
P™goAlignmít
 
Æign
;

109 
gboﬁón
 
visibÀ
;

111 
Æign
 = (
Êags
 & 
ALIGN_LEFT
Ë? 
PANGO_ALIGN_LEFT
 :

112 (
Êags
 & 
ALIGN_RIGHT
Ë? 
PANGO_ALIGN_RIGHT
 :

113 
PANGO_ALIGN_CENTER
;

114 
visibÀ
 = !(
Êags
 & 
INVISIBLE
);

116 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

117 
cﬁ
 = 
	`gtk_åì_võw_cﬁumn_√w
();

119 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
cﬁ
, 
tôÀ
);

120 i‡(!(
Êags
 & 
UNSORTABLE
))

121 
	`gtk_åì_võw_cﬁumn_£t_s‹t_cﬁumn_id
(
cﬁ
, 
ödex
);

122 
	`gtk_åì_võw_cﬁumn_£t_ªsizabÀ
(
cﬁ
, 
TRUE
);

123 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
cﬁ
, 
ªndîî
, 
TRUE
);

124 
	`gtk_åì_võw_cﬁumn_£t_ex∑nd
(
cﬁ
, 
TRUE
);

125 
	`gtk_åì_võw_cﬁumn_add_©åibuã
(
cﬁ
, 
ªndîî
, "ãxt", 
ödex
);

126 
	`g_obje˘_£t
(
	`G_OBJECT
(
ªndîî
), "Æignmít", 
Æign
, 
NULL
);

127 
Æign
) {

128 
PANGO_ALIGN_LEFT
:

129 
xÆign
 = 0.0;

131 
PANGO_ALIGN_CENTER
:

132 
xÆign
 = 0.5;

134 
PANGO_ALIGN_RIGHT
:

135 
xÆign
 = 1.0;

138 
	`gtk_˚Œ_ªndîî_£t_Æignmít
(
	`GTK_CELL_RENDERER
(
ªndîî
), 
xÆign
, 0.5);

139 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
visibÀ
);

140 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
åì_võw
), 
cﬁ
);

141  
cﬁ
;

142 
	}
}

144 
	$mu…ôext_add_íåy
(
mu…ôext_widgë
 *
mt
, c⁄° *
ãxt
)

146 
mt
->
ãxt
 = 
	`ªÆloc
(mt->ãxt, (mt->
max_ãxt
 + 1) * (*));

147 
mt
->
ãxt
[mt->
max_ãxt
] = 
	`°rdup
(text);

148 
mt
->
max_ãxt
++;

149 
	}
}

151 
	$mu…ôext_£t_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
)

153 i‡(
ödex
 >
mt
->
max_ãxt
)

155 i‡(!
mt
->
ãxt
 || !mt->ãxt[
ödex
])

158 
mt
->
cur_ãxt
 = 
ödex
;

159 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
mt
->
íåy
), mt->
ãxt
[
ödex
]);

160 
	}
}

162 
	$mu…ôext_upd©e_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
,

163 c⁄° *
ãxt
)

165 i‡(!
mt
->
ãxt
)

168 i‡(
mt
->
ãxt
[
ödex
])

169 
	`‰ì
(
mt
->
ãxt
[
ödex
]);

171 
mt
->
ãxt
[
ödex
] = 
	`°rdup
(text);

172 i‡(
mt
->
cur_ãxt
 =
ödex
)

173 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
mt
->
íåy
), mt->
ãxt
[
ödex
]);

174 
	}
}

176 
	$mu…ôext_‰ì
(
mu…ôext_widgë
 *
mt
)

178 
i
;

180 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
mt
->
íåy
), "");

182 
i
 = 0; i < 
mt
->
max_ãxt
; i++) {

183 i‡(
mt
->
ãxt
[
i
])

184 
	`‰ì
(
mt
->
ãxt
[
i
]);

187 
	`‰ì
(
mt
->
ãxt
);

188 
mt
->
cur_ãxt
 = -1;

189 
mt
->
max_ãxt
 = 0;

190 
	}
}

192 
GtkWidgë
 *
	$gë_s¸ﬁÀd_wödow
(
göt
 
b‹dî_width
)

194 
GtkWidgë
 *
s¸ﬁl
;

196 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

197 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 
b‹dî_width
);

198 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

200  
s¸ﬁl
;

201 
	}
}

	@/home/ysjin/Desktop/fio/fio/ghelpers.h

1 #i‚de‡
GFIO_HELPERS_H


2 
	#GFIO_HELPERS_H


	)

4 
GtkWidgë
 *
√w_combo_íåy_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

5 
GtkWidgë
 *
√w_öfo_íåy_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

6 
GtkWidgë
 *
√w_öfo_œbñ_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

7 
GtkWidgë
 *
√w_öfo_íåy_ö_‰ame_rgb
(GtkWidgë *
box
, c⁄° *
œbñ
,

8 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
);

9 
GtkWidgë
 *
¸óã_•öbuâ⁄
(GtkWidgë *
hbox
, 
mö
, 
max
, 
defvÆ
);

10 
œbñ_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
);

11 
íåy_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
);

13 
GtkWidgë
 *
gë_s¸ﬁÀd_wödow
(
göt
 
b‹dî_width
);

15 
	smu…ôext_widgë
 {

16 
GtkWidgë
 *
	míåy
;

17 **
	mãxt
;

18 
	mcur_ãxt
;

19 
	mmax_ãxt
;

22 
mu…ôext_add_íåy
(
mu…ôext_widgë
 *
mt
, c⁄° *
ãxt
);

23 
mu…ôext_£t_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
);

24 
mu…ôext_upd©e_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
,

25 c⁄° *
ãxt
);

26 
mu…ôext_‰ì
(
mu…ôext_widgë
 *
mt
);

28 
	#ALIGN_LEFT
 1

	)

29 
	#ALIGN_RIGHT
 2

	)

30 
	#INVISIBLE
 4

	)

31 
	#UNSORTABLE
 8

	)

33 
GtkTªeVõwCﬁumn
 *
åì_võw_cﬁumn
(
GtkWidgë
 *
åì_võw
, 
ödex
, c⁄° *
tôÀ
, 
Êags
);

	@/home/ysjin/Desktop/fio/fio/goptions.c

1 
	~<loˇÀ.h
>

2 
	~<mÆloc.h
>

3 
	~<°rög.h
>

5 
	~<glib.h
>

6 
	~<ˇúo.h
>

7 
	~<gtk/gtk.h
>

9 
	~"fio.h
"

10 
	~"gfio.h
"

11 
	~"ghñ≥rs.h
"

12 
	~"gîr‹.h
"

13 
	~"∑r£.h
"

14 
	~"›tgroup.h
"

16 
	sg›t
 {

17 
GtkWidgë
 *
	mbox
;

18 
	m›t_ödex
;

19 
	m›t_ty≥
;

20 
gul⁄g
 
	msig_h™dÀr
;

21 
g›t_job_võw
 *
	mgjv
;

22 
Êi°_hód
 
	mch™ged_li°
;

25 
	sg›t_combo
 {

26 
g›t
 
	mg›t
;

27 
GtkWidgë
 *
	mcombo
;

30 
	sg›t_öt
 {

31 
g›t
 
	mg›t
;

32 
	mœ°vÆ
;

33 
GtkWidgë
 *
	m•ö
;

36 
	sg›t_boﬁ
 {

37 
g›t
 
	mg›t
;

38 
GtkWidgë
 *
	mcheck
;

41 
	sg›t_°r
 {

42 
g›t
 
	mg›t
;

43 
GtkWidgë
 *
	míåy
;

46 
	sg›t_°r_vÆ
 {

47 
g›t
 
	mg›t
;

48 
GtkWidgë
 *
	m•ö
;

49 
GtkWidgë
 *
	mcombo
;

50 
	mmaxödex
;

53 
	#GOPT_RANGE_SPIN
 4

	)

55 
	sg›t_ønge
 {

56 
g›t
 
	mg›t
;

57 
GtkWidgë
 *
	m•ös
[
GOPT_RANGE_SPIN
];

60 
	sg›t_°r_mu…i
 {

61 
g›t
 
	mg›t
;

62 
GtkWidgë
 *
	mchecks
[
PARSE_MAX_VP
];

66 
	mGOPT_COMBO_INT
 = 1,

67 
	mGOPT_COMBO_STR
,

68 
	mGOPT_INT
,

69 
	mGOPT_BOOL
,

70 
	mGOPT_STR
,

71 
	mGOPT_STR_VAL
,

72 
	mGOPT_RANGE
,

73 
	mGOPT_STR_MULTI
,

76 
	sg›t_‰ame_widgë
 {

77 
GtkWidgë
 *
	mvbox
[2];

78 
	mƒ
;

81 
	sg›t_job_võw
 {

82 
g›t_‰ame_widgë
 
	mg_widgës
[
__FIO_OPT_G_NR
];

83 
GtkWidgë
 *
	mvboxes
[
__FIO_OPT_C_NR
];

84 
g›t
 *
	mg›ts
[
FIO_MAX_OPTS
];

85 
GtkWidgë
 *
	mdülog
;

86 
GtkWidgë
 *
	mjob_combo
;

87 
gfio_˛õ¡
 *
	m˛õ¡
;

88 
Êi°_hód
 
	mch™ged_li°
;

89 
thªad_›ti⁄s
 *
	mo
;

90 
	mö_job_swôch
;

93 
GNode
 *
	gg›t_dï_åì
;

95 
GtkWidgë
 *
	$g›t_gë_group_‰ame
(
g›t_job_võw
 *
gjv
,

96 
GtkWidgë
 *
box
, 
uöt64_t
 
groupmask
)

98 
uöt64_t
 
mask
, 
group
;

99 c⁄° 
›t_group
 *
og
;

100 
GtkWidgë
 *
‰ame
, *
hbox
;

101 
g›t_‰ame_widgë
 *
gfw
;

103 i‡(!
groupmask
)

106 
mask
 = 
groupmask
;

107 
og
 = 
	`›t_group_ˇt_‰om_mask
(&
mask
);

108 i‡(!
og
)

109  
NULL
;

111 
group
 = 
	`ffz64
(~
groupmask
);

112 
gfw
 = &
gjv
->
g_widgës
[
group
];

113 i‡(!
gfw
->
vbox
[0]) {

114 
‰ame
 = 
	`gtk_‰ame_√w
(
og
->
«me
);

115 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 3);

116 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

117 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

118 
gfw
->
vbox
[0] = 
	`gtk_vbox_√w
(
TRUE
, 5);

119 
gfw
->
vbox
[1] = 
	`gtk_vbox_√w
(
TRUE
, 5);

120 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
gfw
->
vbox
[0], 
TRUE
, TRUE, 5);

121 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
gfw
->
vbox
[1], 
TRUE
, TRUE, 5);

124 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

125 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
gfw
->
vbox
[gfw->
ƒ
++ & 1]), 
hbox
, 
FALSE
, FALSE, 5);

126  
hbox
;

127 
	}
}

132 
	$g›t_£t_chûdªn_visibÀ
(
g›t_job_võw
 *
gjv
,

133 
fio_›ti⁄
 *
∑ª¡
,

134 
gboﬁón
 
visibÀ
)

136 
GNode
 *
chûd
, *
node
;

138 i‡(
∑ª¡
->
hide_⁄_£t
)

139 
visibÀ
 = !visible;

141 
node
 = 
	`g_node_föd
(
g›t_dï_åì
, 
G_IN_ORDER
, 
G_TRAVERSE_ALL
, 
∑ª¡
);

142 
chûd
 = 
	`g_node_fú°_chûd
(
node
);

143 
chûd
) {

144 
fio_›ti⁄
 *
o
 = 
chûd
->
d©a
;

145 
g›t
 *
g
 = 
o
->
gui_d©a
;

146 
GtkWidgë
 *
widgë
 = 
g
->
box
;

151 i‡(
	`g_node_n_chûdªn
(
chûd
))

152 
	`g›t_£t_chûdªn_visibÀ
(
gjv
, 
o
, 
visibÀ
);

154 
	`gtk_widgë_£t_£nsôive
(
widgë
, 
visibÀ
);

155 
chûd
 = 
	`g_node_√xt_siblög
(child);

157 
	}
}

159 
	$g›t_m¨k_ödex
(
g›t_job_võw
 *
gjv
, 
g›t
 *gopt,

160 
idx
, 
ty≥
)

162 
	`INIT_FLIST_HEAD
(&
g›t
->
ch™ged_li°
);

164 
	`as£π
(!
gjv
->
g›ts
[
idx
]);

165 
g›t
->
›t_ödex
 = 
idx
;

166 
g›t
->
›t_ty≥
 = 
ty≥
;

167 
g›t
->
gjv
 = gjv;

168 
gjv
->
g›ts
[
idx
] = 
g›t
;

169 
	}
}

171 
	$g›t_dülog_upd©e_≠∂y_buâ⁄
(
g›t_job_võw
 *
gjv
)

173 
GtkDülog
 *
dülog
 = 
	`GTK_DIALOG
(
gjv
->dialog);

174 
gboﬁón
 
£t
;

176 
£t
 = !
	`Êi°_em±y
(&
gjv
->
ch™ged_li°
);

177 
	`gtk_dülog_£t_ª•⁄£_£nsôive
(
dülog
, 
GTK_RESPONSE_APPLY
, 
£t
);

179 i‡(
£t
) {

180 
	`gtk_widgë_£t_£nsôive
(
gjv
->
job_combo
, 0);

181 
	`gtk_widgë_£t_toﬁtù_ãxt
(
gjv
->
job_combo
, "Apply option changes before switchingÅoáÇew job");

183 
	`gtk_widgë_£t_£nsôive
(
gjv
->
job_combo
, 1);

184 
	`gtk_widgë_£t_toﬁtù_ãxt
(
gjv
->
job_combo
, "Change current job");

186 
	}
}

188 
	$g›t_ch™ged
(
g›t
 *gopt)

190 
g›t_job_võw
 *
gjv
 = 
g›t
->gjv;

192 i‡(
gjv
->
ö_job_swôch
)

199 i‡(
	`Êi°_em±y
(&
g›t
->
ch™ged_li°
)) {

200 
	`Êi°_add_èû
(&
g›t
->
ch™ged_li°
, &
gjv
->changed_list);

201 
	`g›t_dülog_upd©e_≠∂y_buâ⁄
(
gjv
);

203 
	}
}

205 
	$g›t_°r_ch™ged
(
GtkE¡ry
 *
íåy
, 
gpoöãr
 
d©a
)

207 
g›t_°r
 *
s
 = (g›t_°∏*Ë
d©a
;

208 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
s
->
g›t
.
›t_ödex
];

209 c⁄° 
gch¨
 *
ãxt
;

210 
£t
;

212 
	`g›t_ch™ged
(&
s
->
g›t
);

214 
ãxt
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
s
->
íåy
));

215 
£t
 = 
	`°rcmp
(
ãxt
, "") != 0;

217 
	`g›t_£t_chûdªn_visibÀ
(
s
->
g›t
.
gjv
, 
o
, 
£t
);

218 
	}
}

220 
	$g›t_°r_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

222 
g›t_°r
 *
s
 = (g›t_°∏*Ë
d©a
;

224 
	`‰ì
(
s
);

225 
	`gtk_widgë_de°roy
(
w
);

226 
	}
}

228 
	$g›t_°r_°‹e_£t_vÆ
(
g›t_°r
 *
s
, c⁄° *
ãxt
)

230 i‡(
ãxt
)

231 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
s
->
íåy
), 
ãxt
);

232 
	}
}

234 
g›t
 *
	$g›t_√w_°r_°‹e
(
g›t_job_võw
 *
gjv
,

235 
fio_›ti⁄
 *
o
, c⁄° *
ãxt
,

236 
idx
)

238 
g›t_°r
 *
s
;

239 
GtkWidgë
 *
œbñ
;

241 
s
 = 
	`ˇŒoc
(1, (*s));

243 
s
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

244 i‡(!
o
->
 ame
)

245 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

247 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

249 
s
->
íåy
 = 
	`gtk_íåy_√w
();

250 
	`g›t_m¨k_ödex
(
gjv
, &
s
->
g›t
, 
idx
, 
GOPT_STR
);

251 
	`gtk_edôabÀ_£t_edôabÀ
(
	`GTK_EDITABLE
(
s
->
íåy
), 1);

253 i‡(
ãxt
)

254 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
ãxt
);

255 i‡(
o
->
def
)

256 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
o
->
def
);

258 
s
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(s->
íåy
), "ch™ged", 
	`G_CALLBACK
(
g›t_°r_ch™ged
), s);

259 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
s
->
íåy
), "de°roy", 
	`G_CALLBACK
(
g›t_°r_de°roy
), s);

261 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
s
->
g›t
.
box
), s->
íåy
, 
FALSE
, FALSE, 0);

262 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
s
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

263  &
s
->
g›t
;

264 
	}
}

266 
	$g›t_combo_ch™ged
(
GtkComboBox
 *
box
, 
gpoöãr
 
d©a
)

268 
g›t_combo
 *
c
 = (g›t_combÿ*Ë
d©a
;

269 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
c
->
g›t
.
›t_ödex
];

270 
ödex
;

272 
	`g›t_ch™ged
(&
c
->
g›t
);

274 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
));

276 
	`g›t_£t_chûdªn_visibÀ
(
c
->
g›t
.
gjv
, 
o
, 
ödex
);

277 
	}
}

279 
	$g›t_combo_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

281 
g›t_combo
 *
c
 = (g›t_combÿ*Ë
d©a
;

283 
	`‰ì
(
c
);

284 
	`gtk_widgë_de°roy
(
w
);

285 
	}
}

287 
g›t_combo
 *
	$__g›t_√w_combo
(
g›t_job_võw
 *
gjv
,

288 
fio_›ti⁄
 *
o
,

289 
idx
, 
ty≥
)

291 
g›t_combo
 *
c
;

292 
GtkWidgë
 *
œbñ
;

294 
c
 = 
	`ˇŒoc
(1, (*c));

296 
c
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

297 i‡(!
o
->
 ame
)

298 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

300 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

302 
c
->
combo
 = 
	`gtk_combo_box_ãxt_√w
();

303 
	`g›t_m¨k_ödex
(
gjv
, &
c
->
g›t
, 
idx
, 
ty≥
);

304 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
c
->
combo
), "de°roy", 
	`G_CALLBACK
(
g›t_combo_de°roy
), c);

306 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
c
->
g›t
.
box
), c->
combo
, 
FALSE
, FALSE, 0);

307 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
c
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

309  
c
;

310 
	}
}

312 
	$g›t_combo_°r_£t_vÆ
(
g›t_combo
 *
c
, c⁄° *
ãxt
)

314 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
c
->
g›t
.
›t_ödex
];

315 
vÆue_∑ú
 *
vp
;

316 
i
;

318 
i
 = 0;

319 
vp
 = &
o
->
posvÆ
[0];

320 
vp
->
ivÆ
) {

321 i‡(!
	`°rcmp
(
vp
->
ivÆ
, 
ãxt
)) {

322 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
i
);

325 
vp
++;

326 
i
++;

328 
	}
}

330 
g›t
 *
	$g›t_√w_combo_°r
(
g›t_job_võw
 *
gjv
,

331 
fio_›ti⁄
 *
o
, c⁄° *
ãxt
,

332 
idx
)

334 
g›t_combo
 *
c
;

335 
vÆue_∑ú
 *
vp
;

336 
i
, 
a˘ive
 = 0;

338 
c
 = 
	`__g›t_√w_combo
(
gjv
, 
o
, 
idx
, 
GOPT_COMBO_STR
);

340 
i
 = 0;

341 
vp
 = &
o
->
posvÆ
[0];

342 
vp
->
ivÆ
) {

343 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
c
->
combo
), 
vp
->
ivÆ
);

344 i‡(
o
->
def
 && !
	`°rcmp
(
vp
->
ivÆ
, o->def))

345 
a˘ive
 = 
i
;

346 
vp
++;

347 
i
++;

350 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
a˘ive
);

351 i‡(
ãxt
)

352 
	`g›t_combo_°r_£t_vÆ
(
c
, 
ãxt
);

353 
c
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(c->
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_combo_ch™ged
), c);

354  &
c
->
g›t
;

355 
	}
}

357 
	$g›t_combo_öt_£t_vÆ
(
g›t_combo
 *
c
, 
ù
)

359 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
c
->
g›t
.
›t_ödex
];

360 
vÆue_∑ú
 *
vp
;

361 
i
;

363 
i
 = 0;

364 
vp
 = &
o
->
posvÆ
[0];

365 
vp
->
ivÆ
) {

366 i‡(
vp
->
ovÆ
 =
ù
) {

367 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
i
);

370 
vp
++;

371 
i
++;

373 
	}
}

375 
g›t
 *
	$g›t_√w_combo_öt
(
g›t_job_võw
 *
gjv
,

376 
fio_›ti⁄
 *
o
, *
ù
,

377 
idx
)

379 
g›t_combo
 *
c
;

380 
vÆue_∑ú
 *
vp
;

381 
i
, 
a˘ive
 = 0;

383 
c
 = 
	`__g›t_√w_combo
(
gjv
, 
o
, 
idx
, 
GOPT_COMBO_INT
);

385 
i
 = 0;

386 
vp
 = &
o
->
posvÆ
[0];

387 
vp
->
ivÆ
) {

388 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
c
->
combo
), 
vp
->
ivÆ
);

389 i‡(
ù
 && 
vp
->
ovÆ
 == *ip)

390 
a˘ive
 = 
i
;

391 
vp
++;

392 
i
++;

395 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
a˘ive
);

396 i‡(
ù
)

397 
	`g›t_combo_öt_£t_vÆ
(
c
, *
ù
);

398 
c
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(c->
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_combo_ch™ged
), c);

399  &
c
->
g›t
;

400 
	}
}

402 
	$g›t_°r_mu…i_toggÀd
(
GtkToggÀBuâ⁄
 *
buâ⁄
, 
gpoöãr
 
d©a
)

404 
g›t_°r_mu…i
 *
m
 = (g›t_°r_mu…ò*Ë
d©a
;

406 
	`g›t_ch™ged
(&
m
->
g›t
);

407 
	}
}

409 
	$g›t_°r_mu…i_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

411 
g›t_°r_mu…i
 *
m
 = (g›t_°r_mu…ò*Ë
d©a
;

413 
	`‰ì
(
m
);

414 
	`gtk_widgë_de°roy
(
w
);

415 
	}
}

417 
	$g›t_°r_mu…i_£t_vÆ
(
g›t_°r_mu…i
 *
m
, 
vÆ
)

419 
	}
}

421 
g›t
 *
	$g›t_√w_°r_mu…i
(
g›t_job_võw
 *
gjv
,

422 
fio_›ti⁄
 *
o
, 
idx
)

424 
g›t_°r_mu…i
 *
m
;

425 
vÆue_∑ú
 *
vp
;

426 
GtkWidgë
 *
‰ame
, *
hbox
;

427 
i
;

429 
m
 = 
	`ˇŒoc
(1, (*m));

430 
m
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

431 
	`g›t_m¨k_ödex
(
gjv
, &
m
->
g›t
, 
idx
, 
GOPT_STR_MULTI
);

433 i‡(!
o
->
 ame
)

434 
‰ame
 = 
	`gtk_‰ame_√w
(
o
->
«me
);

436 
‰ame
 = 
	`gtk_‰ame_√w
(
o
->
 ame
);

437 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
m
->
g›t
.
box
), 
‰ame
, 
FALSE
, FALSE, 3);

439 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

440 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

442 
i
 = 0;

443 
vp
 = &
o
->
posvÆ
[0];

444 
vp
->
ivÆ
) {

445 
m
->
checks
[
i
] = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
(
vp
->
ivÆ
);

446 
	`gtk_widgë_£t_toﬁtù_ãxt
(
m
->
checks
[
i
], 
vp
->
hñp
);

447 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
m
->
checks
[
i
], 
FALSE
, FALSE, 3);

448 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
m
->
checks
[
i
]), "toggÀd", 
	`G_CALLBACK
(
g›t_°r_mu…i_toggÀd
), m);

449 
vp
++;

450 
i
++;

453 
	`g›t_°r_mu…i_£t_vÆ
(
m
, 0);

454 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
m
->
g›t
.
box
), "de°roy", 
	`G_CALLBACK
(
g›t_°r_mu…i_de°roy
), m);

455  &
m
->
g›t
;

456 
	}
}

458 
	$g›t_öt_ch™ged
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

460 
g›t_öt
 *
i
 = (g›t_öà*Ë
d©a
;

461 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
->
g›t
.
›t_ödex
];

462 
GtkAdju°mít
 *
adj
;

463 
vÆue
, 
dñè
;

465 
	`g›t_ch™ged
(&
i
->
g›t
);

467 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
•ö
);

468 
vÆue
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

469 
dñè
 = 
vÆue
 - 
i
->
œ°vÆ
;

470 
i
->
œ°vÆ
 = 
vÆue
;

472 i‡(
o
->
öv_›t
) {

473 
g›t
 *
b_öv
 = 
o
->
öv_›t
->
gui_d©a
;

474 
g›t_öt
 *
i_öv
 = 
	`c⁄èöî_of
(
b_öv
, g›t_öt, 
g›t
);

475 
cur_vÆ
;

477 
	`as£π
(
o
->
ty≥
 =o->
öv_›t
->type);

479 
cur_vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue
(
	`GTK_SPIN_BUTTON
(
i_öv
->
•ö
));

480 
cur_vÆ
 -
dñè
;

481 
	`g_sig«l_h™dÀr_block
(
	`G_OBJECT
(
i_öv
->
•ö
), i_öv->
g›t
.
sig_h™dÀr
);

482 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
i_öv
->
•ö
), 
cur_vÆ
);

483 
	`g_sig«l_h™dÀr_unblock
(
	`G_OBJECT
(
i_öv
->
•ö
), i_öv->
g›t
.
sig_h™dÀr
);

485 
	}
}

487 
	$g›t_öt_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

489 
g›t_öt
 *
i
 = (g›t_öà*Ë
d©a
;

491 
	`‰ì
(
i
);

492 
	`gtk_widgë_de°roy
(
w
);

493 
	}
}

495 
	$g›t_öt_£t_vÆ
(
g›t_öt
 *
i
, 
p
)

497 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
i
->
•ö
), 
p
);

498 
i
->
œ°vÆ
 = 
p
;

499 
	}
}

501 
g›t_öt
 *
	$__g›t_√w_öt
(
g›t_job_võw
 *
gjv
,

502 
fio_›ti⁄
 *
o
,

503 *
p
, 
idx
)

505 
defvÆ
;

506 
g›t_öt
 *
i
;

507 
guöt
 
maxvÆ
, 
öãrvÆ
;

508 
GtkWidgë
 *
œbñ
;

510 
i
 = 
	`ˇŒoc
(1, (*i));

511 
i
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

512 i‡(!
o
->
 ame
)

513 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

515 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

517 
maxvÆ
 = 
o
->maxval;

518 i‡(!
maxvÆ
)

519 
maxvÆ
 = 
UINT_MAX
;

521 
defvÆ
 = 0;

522 i‡(
p
)

523 
defvÆ
 = *
p
;

524 i‡(
o
->
def
) {

525 
vÆ
;

527 
	`check_°r_byãs
(
o
->
def
, &
vÆ
, o);

528 
defvÆ
 = 
vÆ
;

531 
öãrvÆ
 = 1.0;

532 i‡(
o
->
öãrvÆ
)

533 
öãrvÆ
 = 
o
->interval;

535 
i
->
•ö
 = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(
o
->
mövÆ
, 
maxvÆ
, 
öãrvÆ
);

536 
	`g›t_m¨k_ödex
(
gjv
, &
i
->
g›t
, 
idx
, 
GOPT_INT
);

537 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
i
->
•ö
), 
GTK_UPDATE_IF_VALID
);

538 i‡(
p
)

539 
	`g›t_öt_£t_vÆ
(
i
, *
p
);

541 
	`g›t_öt_£t_vÆ
(
i
, 
defvÆ
);

542 
i
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(i->
•ö
), "vÆue-ch™ged", 
	`G_CALLBACK
(
g›t_öt_ch™ged
), i);

543 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
i
->
•ö
), "de°roy", 
	`G_CALLBACK
(
g›t_öt_de°roy
), i);

545 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
i
->
g›t
.
box
), i->
•ö
, 
FALSE
, FALSE, 0);

546 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
i
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

548  
i
;

549 
	}
}

551 
g›t
 *
	$g›t_√w_öt
(
g›t_job_võw
 *
gjv
,

552 
fio_›ti⁄
 *
o
, *
ù
,

553 
idx
)

555 
uŒp
;

556 
g›t_öt
 *
i
;

558 i‡(
ù
) {

559 
uŒp
 = *
ù
;

560 
i
 = 
	`__g›t_√w_öt
(
gjv
, 
o
, &
uŒp
, 
idx
);

562 
i
 = 
	`__g›t_√w_öt
(
gjv
, 
o
, 
NULL
, 
idx
);

564  &
i
->
g›t
;

565 
	}
}

567 
g›t
 *
	$g›t_√w_uŒ⁄g
(
g›t_job_võw
 *
gjv
,

568 
fio_›ti⁄
 *
o
, *
p
,

569 
idx
)

571 
g›t_öt
 *
i
;

573 
i
 = 
	`__g›t_√w_öt
(
gjv
, 
o
, 
p
, 
idx
);

574  &
i
->
g›t
;

575 
	}
}

577 
	$g›t_boﬁ_toggÀd
(
GtkToggÀBuâ⁄
 *
buâ⁄
, 
gpoöãr
 
d©a
)

579 
g›t_boﬁ
 *
b
 = (g›t_boﬁ *Ë
d©a
;

580 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
b
->
g›t
.
›t_ödex
];

581 
gboﬁón
 
£t
;

583 
	`g›t_ch™ged
(&
b
->
g›t
);

585 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
));

587 i‡(
o
->
öv_›t
) {

588 
g›t
 *
g_öv
 = 
o
->
öv_›t
->
gui_d©a
;

589 
g›t_boﬁ
 *
b_öv
 = 
	`c⁄èöî_of
(
g_öv
, g›t_boﬁ, 
g›t
);

591 
	`as£π
(
o
->
ty≥
 =o->
öv_›t
->type);

593 
	`g_sig«l_h™dÀr_block
(
	`G_OBJECT
(
b_öv
->
check
), b_öv->
g›t
.
sig_h™dÀr
);

594 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b_öv
->
check
), !
£t
);

595 
	`g_sig«l_h™dÀr_unblock
(
	`G_OBJECT
(
b_öv
->
check
), b_öv->
g›t
.
sig_h™dÀr
);

598 
	`g›t_£t_chûdªn_visibÀ
(
b
->
g›t
.
gjv
, 
o
, 
£t
);

599 
	}
}

601 
	$g›t_boﬁ_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

603 
g›t_boﬁ
 *
b
 = (g›t_boﬁ *Ë
d©a
;

605 
	`‰ì
(
b
);

606 
	`gtk_widgë_de°roy
(
w
);

607 
	}
}

609 
	$g›t_boﬁ_£t_vÆ
(
g›t_boﬁ
 *
b
, 
vÆ
)

611 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
), 
vÆ
);

612 
	}
}

614 
g›t
 *
	$g›t_√w_boﬁ
(
g›t_job_võw
 *
gjv
,

615 
fio_›ti⁄
 *
o
, *
vÆ
,

616 
idx
)

618 
g›t_boﬁ
 *
b
;

619 
GtkWidgë
 *
œbñ
;

620 
def°©e
 = 0;

622 
b
 = 
	`ˇŒoc
(1, (*b));

623 
b
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

624 i‡(!
o
->
 ame
)

625 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

627 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

629 
b
->
check
 = 
	`gtk_check_buâ⁄_√w
();

630 
	`g›t_m¨k_ödex
(
gjv
, &
b
->
g›t
, 
idx
, 
GOPT_BOOL
);

631 i‡(
o
->
def
 && !
	`°rcmp
(o->def, "1"))

632 
def°©e
 = 1;

634 i‡(
o
->
√g
)

635 
def°©e
 = !defstate;

637 i‡(
vÆ
)

638 
	`g›t_boﬁ_£t_vÆ
(
b
, *
vÆ
);

640 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
), 
def°©e
);

641 
b
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(b->
check
), "toggÀd", 
	`G_CALLBACK
(
g›t_boﬁ_toggÀd
), b);

642 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
b
->
check
), "de°roy", 
	`G_CALLBACK
(
g›t_boﬁ_de°roy
), b);

644 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
b
->
g›t
.
box
), b->
check
, 
FALSE
, FALSE, 0);

645 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
b
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

646  &
b
->
g›t
;

647 
	}
}

654 
	$ønge_vÆue_ch™ged
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

656 
g›t_ønge
 *
r
 = (g›t_øngê*Ë
d©a
;

657 
ch™ged
 = -1, 
i
;

658 
göt
 
vÆ
, 
mvÆ
;

660 
	`g›t_ch™ged
(&
r
->
g›t
);

662 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++) {

663 i‡(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]Ë=
•ö
) {

664 
ch™ged
 = 
i
;

669 
	`as£π
(
ch™ged
 != -1);

674 i‡(
ch™ged
 == 0 || changed == 2) {

675 
GtkWidgë
 *
m•ö
 = 
r
->
•ös
[
ch™ged
 + 1];

677 
vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
ch™ged
]));

678 
mvÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
m•ö
));

679 i‡(
vÆ
 > 
mvÆ
)

680 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
m•ö
), 
vÆ
);

682 
GtkWidgë
 *
m•ö
 = 
r
->
•ös
[
ch™ged
 - 1];

684 
vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
ch™ged
]));

685 
mvÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
m•ö
));

686 i‡(
vÆ
 < 
mvÆ
)

687 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
m•ö
), 
vÆ
);

689 
	}
}

691 
	$g›t_ønge_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

693 
g›t_ønge
 *
r
 = (g›t_øngê*Ë
d©a
;

695 
	`‰ì
(
r
);

696 
	`gtk_widgë_de°roy
(
w
);

697 
	}
}

699 
	$g›t_öt_ønge_£t_vÆ
(
g›t_ønge
 *
r
, *
vÆs
)

701 
i
;

703 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++)

704 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]), 
vÆs
[i]);

705 
	}
}

707 
g›t
 *
	$g›t_√w_öt_ønge
(
g›t_job_võw
 *
gjv
,

708 
fio_›ti⁄
 *
o
, **
ù
,

709 
idx
)

711 
g›t_ønge
 *
r
;

712 
GtkWidgë
 *
œbñ
;

713 
guöt
 
öãrvÆ
;

714 
defvÆs
[
GOPT_RANGE_SPIN
];

715 
göt
 
maxvÆ
;

716 
i
;

718 
r
 = 
	`ˇŒoc
(1, (*r));

719 
r
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

720 
	`g›t_m¨k_ödex
(
gjv
, &
r
->
g›t
, 
idx
, 
GOPT_RANGE
);

721 i‡(!
o
->
 ame
)

722 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

724 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

726 
maxvÆ
 = 
o
->maxval;

727 i‡(!
maxvÆ
)

728 
maxvÆ
 = 
INT_MAX
;

730 
	`mem£t
(
defvÆs
, 0, (defvals));

731 i‡(
o
->
def
) {

732 
vÆ
;

734 
	`check_°r_byãs
(
o
->
def
, &
vÆ
, o);

735 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++)

736 
defvÆs
[
i
] = 
vÆ
;

739 
öãrvÆ
 = 1.0;

740 i‡(
o
->
öãrvÆ
)

741 
öãrvÆ
 = 
o
->interval;

743 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++) {

744 
r
->
•ös
[
i
] = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(
o
->
mövÆ
, 
maxvÆ
, 
öãrvÆ
);

745 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]), 
GTK_UPDATE_IF_VALID
);

746 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
r
->
g›t
.
box
),Ñ->
•ös
[
i
], 
FALSE
, FALSE, 0);

749 i‡(
ù
)

750 
	`g›t_öt_ønge_£t_vÆ
(
r
, *
ù
);

752 
	`g›t_öt_ønge_£t_vÆ
(
r
, 
defvÆs
);

754 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++)

755 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
r
->
•ös
[
i
]), "vÆue-ch™ged", 
	`G_CALLBACK
(
ønge_vÆue_ch™ged
),Ñ);

757 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
r
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

758 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
r
->
g›t
.
box
), "de°roy", 
	`G_CALLBACK
(
g›t_ønge_de°roy
),Ñ);

759  &
r
->
g›t
;

760 
	}
}

762 
	$g›t_°r_vÆ_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

764 
g›t_°r_vÆ
 *
g
 = (g›t_°r_vÆ *Ë
d©a
;

766 
	`‰ì
(
g
);

767 
	`gtk_widgë_de°roy
(
w
);

768 
	}
}

770 
	$g›t_°r_vÆ_•ö_wøµed
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

772 
g›t_°r_vÆ
 *
g
 = (g›t_°r_vÆ *Ë
d©a
;

773 
vÆ
;

774 
GtkAdju°mít
 *
adj
;

775 
göt
 
ödex
;

777 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
•ö
);

778 
vÆ
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

783 i‡(!
vÆ
) {

784 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
));

785 i‡(
ödex
 + 1 <
g
->
maxödex
) {

786 
vÆ
 = 1;

787 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), ++
ödex
);

789 
vÆ
 = 1023;

790 
	`gtk_•ö_buâ⁄_£t_vÆue
(
•ö
, 
vÆ
);

792 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
));

793 i‡(
ödex
) {

794 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), --
ödex
);

795 
	`gtk_•ö_buâ⁄_£t_vÆue
(
•ö
, 1023);

797 
	`gtk_•ö_buâ⁄_£t_vÆue
(
•ö
, 0);

799 
	}
}

801 
	$g›t_°r_vÆ_ch™ged
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

803 
g›t_°r_vÆ
 *
g
 = (g›t_°r_vÆ *Ë
d©a
;

805 
	`g›t_ch™ged
(&
g
->
g›t
);

806 
	}
}

808 
	$g›t_°r_vÆ_£t_vÆ
(
g›t_°r_vÆ
 *
g
, 
vÆ
)

810 
i
 = 0;

813 i‡(!
vÆ
 || (val % 1024))

816 
i
++;

817 
vÆ
 /= 1024;

820 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 
vÆ
);

821 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), 
i
);

822 
	}
}

824 
g›t
 *
	$g›t_√w_°r_vÆ
(
g›t_job_võw
 *
gjv
,

825 
fio_›ti⁄
 *
o
,

826 *
p
, 
idx
)

828 
g›t_°r_vÆ
 *
g
;

829 c⁄° 
gch¨
 *
po°fix
[] = { "B", "KiB", "MiB", "GiB", "PiB", "PiB", "" };

830 
GtkWidgë
 *
œbñ
;

831 
i
;

833 
g
 = 
	`ˇŒoc
(1, (*g));

834 
g
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

835 i‡(!
o
->
 ame
)

836 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

838 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

839 
	`g›t_m¨k_ödex
(
gjv
, &
g
->
g›t
, 
idx
, 
GOPT_STR_VAL
);

841 
g
->
•ö
 = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(0.0, 1023.0, 1.0);

842 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 
GTK_UPDATE_IF_VALID
);

843 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 0);

844 
	`gtk_•ö_buâ⁄_£t_wøp
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 1);

845 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
g
->
g›t
.
box
), g->
•ö
, 
FALSE
, FALSE, 0);

846 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
•ö
), "wøµed", 
	`G_CALLBACK
(
g›t_°r_vÆ_•ö_wøµed
), g);

847 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
•ö
), "ch™ged", 
	`G_CALLBACK
(
g›t_°r_vÆ_ch™ged
), g);

849 
g
->
combo
 = 
	`gtk_combo_box_ãxt_√w
();

850 
i
 = 0;

851 
	`°æí
(
po°fix
[
i
])) {

852 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
g
->
combo
), 
po°fix
[
i
]);

853 
i
++;

855 
g
->
maxödex
 = 
i
 - 1;

856 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), 0);

857 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
g
->
g›t
.
box
), g->
combo
, 
FALSE
, FALSE, 0);

858 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
g
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 3);

860 i‡(
p
)

861 
	`g›t_°r_vÆ_£t_vÆ
(
g
, *
p
);

863 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_°r_vÆ_ch™ged
), g);

865 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
g›t
.
box
), "de°roy", 
	`G_CALLBACK
(
g›t_°r_vÆ_de°roy
), g);

866  &
g
->
g›t
;

867 
	}
}

869 
	$g›t_£t_›ti⁄
(
g›t_job_võw
 *
gjv
, 
fio_›ti⁄
 *
o
,

870 
g›t
 *g›t, 
thªad_›ti⁄s
 *
to
)

872 
o
->
ty≥
) {

873 
FIO_OPT_STR_VAL
: {

874 *
uŒp
 = 
NULL
;

875 
g›t_°r_vÆ
 *
g
;

877 i‡(
o
->
off1
)

878 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

880 
g
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r_vÆ
, gopt);

881 i‡(
uŒp
)

882 
	`g›t_°r_vÆ_£t_vÆ
(
g
, *
uŒp
);

885 
FIO_OPT_STR_VAL_TIME
: {

886 *
uŒp
 = 
NULL
;

887 
g›t_öt
 *
i
;

889 i‡(
o
->
off1
)

890 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

892 
i
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_öt
, gopt);

893 i‡(
uŒp
)

894 
	`g›t_öt_£t_vÆ
(
i
, *
uŒp
);

897 
FIO_OPT_INT
:

898 i‡(
o
->
posvÆ
[0].
ivÆ
) {

899 *
ù
 = 
NULL
;

900 
g›t_combo
 *
c
;

902 i‡(
o
->
off1
)

903 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

905 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

906 i‡(
ù
)

907 
	`g›t_combo_öt_£t_vÆ
(
c
, *
ù
);

909 *
ù
 = 
NULL
;

910 
g›t_öt
 *
i
;

912 i‡(
o
->
off1
)

913 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

915 
i
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_öt
, gopt);

916 i‡(
ù
)

917 
	`g›t_öt_£t_vÆ
(
i
, *
ù
);

920 
FIO_OPT_STR_SET
:

921 
FIO_OPT_BOOL
: {

922 *
ù
 = 
NULL
;

923 
g›t_boﬁ
 *
b
;

925 i‡(
o
->
off1
)

926 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

928 
b
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_boﬁ
, gopt);

929 i‡(
ù
)

930 
	`g›t_boﬁ_£t_vÆ
(
b
, *
ù
);

933 
FIO_OPT_STR
: {

934 i‡(
o
->
posvÆ
[0].
ivÆ
) {

935 *
ù
 = 
NULL
;

936 
g›t_combo
 *
c
;

938 i‡(
o
->
off1
)

939 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

941 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

942 i‡(
ù
)

943 
	`g›t_combo_öt_£t_vÆ
(
c
, *
ù
);

945 
g›t_°r
 *
s
;

946 *
ãxt
 = 
NULL
;

948 i‡(
o
->
off1
) {

949 **
p
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

951 
ãxt
 = *
p
;

954 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r
, gopt);

955 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
ãxt
);

960 
FIO_OPT_STR_STORE
: {

961 
g›t_combo
 *
c
;

962 *
ãxt
 = 
NULL
;

964 i‡(
o
->
off1
) {

965 **
p
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

966 
ãxt
 = *
p
;

969 i‡(!
o
->
posvÆ
[0].
ivÆ
) {

970 
g›t_°r
 *
s
;

972 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r
, gopt);

973 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
ãxt
);

977 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

978 i‡(
ãxt
)

979 
	`g›t_combo_°r_£t_vÆ
(
c
, 
ãxt
);

982 
FIO_OPT_STR_MULTI
:

985 
FIO_OPT_RANGE
: {

986 
g›t_ønge
 *
r
;

987 *
ù
[4] = { 
	`td_v¨
(
to
, 
o
, o->
off1
),

988 
	`td_v¨
(
to
, 
o
, o->
off2
),

989 
	`td_v¨
(
to
, 
o
, o->
off3
),

990 
	`td_v¨
(
to
, 
o
, o->
off4
) };

992 
r
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_ønge
, gopt);

993 
	`g›t_öt_ønge_£t_vÆ
(
r
, *
ù
);

997 
FIO_OPT_FLOAT_LIST
:

999 
FIO_OPT_DEPRECATED
:

1002 
	`¥ötf
("ign‹êty≥ %u\n", 
o
->
ty≥
);

1005 
	}
}

1007 
	$g›t_add_›ti⁄
(
g›t_job_võw
 *
gjv
, 
GtkWidgë
 *
hbox
,

1008 
fio_›ti⁄
 *
o
, 
›t_ödex
,

1009 
thªad_›ti⁄s
 *
to
)

1011 
g›t
 *
go
 = 
NULL
;

1013 
o
->
ty≥
) {

1014 
FIO_OPT_STR_VAL
: {

1015 *
uŒp
 = 
NULL
;

1017 i‡(
o
->
off1
)

1018 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1020 
go
 = 
	`g›t_√w_°r_vÆ
(
gjv
, 
o
, 
uŒp
, 
›t_ödex
);

1023 
FIO_OPT_STR_VAL_TIME
: {

1024 *
uŒp
 = 
NULL
;

1026 i‡(
o
->
off1
)

1027 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1029 
go
 = 
	`g›t_√w_uŒ⁄g
(
gjv
, 
o
, 
uŒp
, 
›t_ödex
);

1032 
FIO_OPT_INT
:

1033 i‡(
o
->
posvÆ
[0].
ivÆ
) {

1034 *
ù
 = 
NULL
;

1036 i‡(
o
->
off1
)

1037 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1039 
go
 = 
	`g›t_√w_combo_öt
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1041 *
ù
 = 
NULL
;

1043 i‡(
o
->
off1
)

1044 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1046 
go
 = 
	`g›t_√w_öt
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1049 
FIO_OPT_STR_SET
:

1050 
FIO_OPT_BOOL
: {

1051 *
ù
 = 
NULL
;

1053 i‡(
o
->
off1
)

1054 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1056 
go
 = 
	`g›t_√w_boﬁ
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1059 
FIO_OPT_STR
: {

1060 i‡(
o
->
posvÆ
[0].
ivÆ
) {

1061 *
ù
 = 
NULL
;

1063 i‡(
o
->
off1
)

1064 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1066 
go
 = 
	`g›t_√w_combo_öt
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1069 
go
 = 
	`g›t_√w_°r_°‹e
(
gjv
, 
o
, 
NULL
, 
›t_ödex
);

1074 
FIO_OPT_STR_STORE
: {

1075 *
ãxt
 = 
NULL
;

1077 i‡(
o
->
off1
) {

1078 **
p
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1079 
ãxt
 = *
p
;

1082 i‡(!
o
->
posvÆ
[0].
ivÆ
) {

1083 
go
 = 
	`g›t_√w_°r_°‹e
(
gjv
, 
o
, 
ãxt
, 
›t_ödex
);

1087 
go
 = 
	`g›t_√w_combo_°r
(
gjv
, 
o
, 
ãxt
, 
›t_ödex
);

1090 
FIO_OPT_STR_MULTI
:

1091 
go
 = 
	`g›t_√w_°r_mu…i
(
gjv
, 
o
, 
›t_ödex
);

1093 
FIO_OPT_RANGE
: {

1094 *
ù
[4] = { 
	`td_v¨
(
to
, 
o
, o->
off1
),

1095 
	`td_v¨
(
to
, 
o
, o->
off2
),

1096 
	`td_v¨
(
to
, 
o
, o->
off3
),

1097 
	`td_v¨
(
to
, 
o
, o->
off4
) };

1099 
go
 = 
	`g›t_√w_öt_ønge
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1103 
FIO_OPT_FLOAT_LIST
:

1105 
FIO_OPT_DEPRECATED
:

1108 
	`¥ötf
("ign‹êty≥ %u\n", 
o
->
ty≥
);

1112 i‡(
go
) {

1113 
GtkWidgë
 *
de°
;

1115 i‡(
o
->
hñp
)

1116 
	`gtk_widgë_£t_toﬁtù_ãxt
(
go
->
box
, 
o
->
hñp
);

1118 
o
->
gui_d©a
 = 
go
;

1120 
de°
 = 
	`g›t_gë_group_‰ame
(
gjv
, 
hbox
, 
o
->
group
);

1121 i‡(!
de°
)

1122 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
go
->
box
, 
FALSE
, FALSE, 5);

1124 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
de°
), 
go
->
box
, 
FALSE
, FALSE, 5);

1126 
	}
}

1128 
	$g›t_add_›ti⁄s
(
g›t_job_võw
 *
gjv
,

1129 
thªad_›ti⁄s
 *
to
)

1131 
GtkWidgë
 *
hbox
 = 
NULL
;

1132 
i
;

1137 
i
 = 0; 
fio_›ti⁄s
[i].
«me
; i++) {

1138 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
];

1139 
uöt64_t
 
mask
 = 
o
->
ˇãg‹y
;

1140 c⁄° 
›t_group
 *
og
;

1142 (
og
 = 
	`›t_group_‰om_mask
(&
mask
)Ë!
NULL
) {

1143 
GtkWidgë
 *
vbox
 = 
gjv
->
vboxes
[
	`ffz64
(~
og
->
mask
)];

1145 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1146 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
hbox
, 
FALSE
, FALSE, 5);

1147 
	`g›t_add_›ti⁄
(
gjv
, 
hbox
, 
o
, 
i
, 
to
);

1150 
	}
}

1152 
	$g›t_£t_›ti⁄s
(
g›t_job_võw
 *
gjv
,

1153 
thªad_›ti⁄s
 *
to
)

1155 
i
;

1157 
i
 = 0; 
fio_›ti⁄s
[i].
«me
; i++) {

1158 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
];

1159 
g›t
 *g›à
gjv
->
g›ts
[
i
];

1161 
	`g›t_£t_›ti⁄
(
gjv
, 
o
, 
g›t
, 
to
);

1163 
	}
}

1165 
GtkWidgë
 *
	$g›t_add_èb
(
GtkWidgë
 *
nŸebook
, c⁄° *
«me
)

1167 
GtkWidgë
 *
box
, *
vbox
, *
s¸ﬁl
;

1169 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1170 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 5);

1171 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1173 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1174 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1175 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

1176 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
vbox
);

1177 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
nŸebook
), 
s¸ﬁl
, 
	`gtk_œbñ_√w
(
«me
));

1178  
vbox
;

1179 
	}
}

1181 
GtkWidgë
 *
	$g›t_add_group_èb
(
GtkWidgë
 *
nŸebook
,

1182 c⁄° 
›t_group
 *
og
)

1184  
	`g›t_add_èb
(
nŸebook
, 
og
->
«me
);

1185 
	}
}

1187 
	$g›t_add_group_èbs
(
GtkWidgë
 *
nŸebook
, 
g›t_job_võw
 *
gjv
)

1189 c⁄° 
›t_group
 *
og
;

1190 
i
;

1192 
i
 = 0;

1194 
uöt64_t
 
mask
 = (1ULL << 
i
);

1196 
og
 = 
	`›t_group_‰om_mask
(&
mask
);

1197 i‡(!
og
)

1199 
gjv
->
vboxes
[
i
] = 
	`g›t_add_group_èb
(
nŸebook
, 
og
);

1200 
i
++;

1202 
	}
}

1204 
	$g›t_h™dÀ_°r_mu…i_ch™ged
(
g›t_job_võw
 *
gjv
,

1205 
g›t_°r_mu…i
 *
m
,

1206 
fio_›ti⁄
 *
o
)

1208 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1209 
vÆue_∑ú
 *
vp
;

1210 
gboﬁón
 
£t
;

1211 
guöt
 
vÆ
 = 0;

1212 
i
;

1214 
i
 = 0;

1215 
vp
 = &
o
->
posvÆ
[0];

1216 
vp
->
ivÆ
) {

1217 i‡(!
m
->
checks
[
i
])

1219 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
m
->
checks
[
i
]));

1220 i‡(
£t
) {

1221 i‡(
vp
->
‹vÆ
)

1222 
vÆ
 |
vp
->
ovÆ
;

1224 
vÆ
 = 
vp
->
ovÆ
;

1226 
i
++;

1227 
vp
++;

1230 i‡(
o
->
off1
)

1231 *
ù
 = 
vÆ
;

1232 
	}
}

1234 
	$g›t_h™dÀ_ønge_ch™ged
(
g›t_job_võw
 *
gjv
,

1235 
g›t_ønge
 *
r
,

1236 
fio_›ti⁄
 *
o
)

1238 *
ù
[4] = { 
	`td_v¨
(
gjv
->
o
, o, o->
off1
),

1239 
	`td_v¨
(
gjv
->
o
, o, o->
off2
),

1240 
	`td_v¨
(
gjv
->
o
, o, o->
off3
),

1241 
	`td_v¨
(
gjv
->
o
, o, o->
off4
) };

1242 
göt
 
vÆ
;

1243 
i
;

1245 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++) {

1246 
vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]));

1247 *
ù
[
i
] = 
vÆ
;

1249 
	}
}

1251 
	$g›t_h™dÀ_°r_vÆ_ch™ged
(
g›t_job_võw
 *
gjv
,

1252 
g›t_°r_vÆ
 *
s
,

1253 
fio_›ti⁄
 *
o
)

1255 *
uŒp
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1256 
GtkAdju°mít
 *
adj
;

1257 
göt
 
ödex
;

1259 i‡(!
uŒp
)

1265 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
	`GTK_SPIN_BUTTON
(
s
->
•ö
));

1266 *
uŒp
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

1271 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
s
->
combo
));

1272 
ödex
--)

1273 *
uŒp
 *= 1024ULL;

1274 
	}
}

1276 
	$g›t_h™dÀ_°r_ch™ged
(
g›t_job_võw
 *
gjv
,

1277 
g›t_°r
 *
s
, 
fio_›ti⁄
 *
o
)

1279 **
p
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1281 i‡(*
p
)

1282 
	`‰ì
(*
p
);

1284 *
p
 = 
	`°rdup
(
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
s
->
íåy
)));

1285 
	}
}

1287 
	$g›t_h™dÀ_boﬁ_ch™ged
(
g›t_job_võw
 *
gjv
,

1288 
g›t_boﬁ
 *
b
, 
fio_›ti⁄
 *
o
)

1290 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1291 
gboﬁón
 
£t
;

1293 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
));

1294 *
ù
 = 
£t
;

1295 
	}
}

1297 
	$g›t_h™dÀ_öt_ch™ged
(
g›t_job_võw
 *
gjv
,

1298 
g›t_öt
 *
i
, 
fio_›ti⁄
 *
o
)

1300 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1301 
GtkAdju°mít
 *
adj
;

1302 
guöt
 
vÆ
;

1304 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
	`GTK_SPIN_BUTTON
(
i
->
•ö
));

1305 
vÆ
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

1306 *
ù
 = 
vÆ
;

1307 
	}
}

1309 
	$g›t_h™dÀ_combo_°r_ch™ged
(
g›t_job_võw
 *
gjv
,

1310 
g›t_combo
 *
c
,

1311 
fio_›ti⁄
 *
o
)

1313 **
p
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1315 i‡(*
p
)

1316 
	`‰ì
(*
p
);

1318 *
p
 = 
	`°rdup
(
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
c
->
combo
)));

1319 
	}
}

1321 
	$g›t_h™dÀ_combo_öt_ch™ged
(
g›t_job_võw
 *
gjv
,

1322 
g›t_combo
 *
c
,

1323 
fio_›ti⁄
 *
o
)

1325 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1326 
göt
 
ödex
;

1328 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
));

1329 *
ù
 = 
o
->
posvÆ
[
ödex
].
ovÆ
;

1330 
	}
}

1332 
	$g›t_h™dÀ_ch™ged
(
g›t
 *gopt)

1334 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
g›t
->
›t_ödex
];

1335 
g›t_job_võw
 *
gjv
 = 
g›t
->gjv;

1337 
g›t
->
›t_ty≥
) {

1338 
GOPT_COMBO_INT
: {

1339 
g›t_combo
 *
c
;

1341 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

1342 
	`g›t_h™dÀ_combo_öt_ch™ged
(
gjv
, 
c
, 
o
);

1345 
GOPT_COMBO_STR
: {

1346 
g›t_combo
 *
c
;

1348 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

1349 
	`g›t_h™dÀ_combo_°r_ch™ged
(
gjv
, 
c
, 
o
);

1352 
GOPT_INT
: {

1353 
g›t_öt
 *
i
;

1355 
i
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_öt
, gopt);

1356 
	`g›t_h™dÀ_öt_ch™ged
(
gjv
, 
i
, 
o
);

1359 
GOPT_BOOL
: {

1360 
g›t_boﬁ
 *
b
;

1362 
b
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_boﬁ
, gopt);

1363 
	`g›t_h™dÀ_boﬁ_ch™ged
(
gjv
, 
b
, 
o
);

1366 
GOPT_STR
: {

1367 
g›t_°r
 *
s
;

1369 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r
, gopt);

1370 
	`g›t_h™dÀ_°r_ch™ged
(
gjv
, 
s
, 
o
);

1373 
GOPT_STR_VAL
: {

1374 
g›t_°r_vÆ
 *
s
;

1376 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r_vÆ
, gopt);

1377 
	`g›t_h™dÀ_°r_vÆ_ch™ged
(
gjv
, 
s
, 
o
);

1380 
GOPT_RANGE
: {

1381 
g›t_ønge
 *
r
;

1383 
r
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_ønge
, gopt);

1384 
	`g›t_h™dÀ_ønge_ch™ged
(
gjv
, 
r
, 
o
);

1387 
GOPT_STR_MULTI
: {

1388 
g›t_°r_mu…i
 *
m
;

1390 
m
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r_mu…i
, gopt);

1391 
	`g›t_h™dÀ_°r_mu…i_ch™ged
(
gjv
, 
m
, 
o
);

1395 
	`log_îr
("gfio: bad o±i⁄Åy≥: %d\n", 
g›t
->
›t_ty≥
);

1398 
	}
}

1400 
	$g›t_ªp‹t_upd©e_°©us
(
g›t_job_võw
 *
gjv
)

1402 
gfio_˛õ¡
 *
gc
 = 
gjv
->
˛õ¡
;

1403 
tmp
[80];

1405 
	`•rötf
(
tmp
, "\nCom∂ëed wôhÉº‹: %d\n", 
gc
->
upd©e_job_°©us
);

1406 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Upd©êjob", 
tmp
);

1407 
	}
}

1409 
	$g›t_h™dÀ_ch™ged_›ti⁄s
(
g›t_job_võw
 *
gjv
)

1411 
gfio_˛õ¡
 *
gc
 = 
gjv
->
˛õ¡
;

1412 
Êi°_hód
 *
íåy
;

1413 
uöt64_t
 
waôid
 = 0;

1414 
g›t
 *gopt;

1415 
ªt
;

1417 
	`Êi°_f‹_óch
(
íåy
, &
gjv
->
ch™ged_li°
) {

1418 
g›t
 = 
	`Êi°_íåy
(
íåy
, g›t, 
ch™ged_li°
);

1419 
	`g›t_h™dÀ_ch™ged
(
g›t
);

1422 
gc
->
upd©e_job_°©us
 = 0;

1423 
gc
->
upd©e_job_d⁄e
 = 0;

1425 
ªt
 = 
	`fio_˛õ¡_upd©e_›ti⁄s
(
gc
->
˛õ¡
, 
gjv
->
o
, &
waôid
);

1426 i‡(
ªt
)

1427 
d⁄e
;

1429 
ªt
 = 
	`fio_˛õ¡_waô_f‹_ª∂y
(
gc
->
˛õ¡
, 
waôid
);

1430 i‡(
ªt
)

1431 
d⁄e
;

1433 
	`as£π
(
gc
->
upd©e_job_d⁄e
);

1434 i‡(
gc
->
upd©e_job_°©us
)

1435 
d⁄e
;

1437 !
	`Êi°_em±y
(&
gjv
->
ch™ged_li°
)) {

1438 
g›t
 = 
	`Êi°_fú°_íåy
(&
gjv
->
ch™ged_li°
, gopt, changed_list);

1439 
	`Êi°_dñ_öô
(&
g›t
->
ch™ged_li°
);

1442 
d⁄e
:

1443 
	`g›t_dülog_upd©e_≠∂y_buâ⁄
(
gjv
);

1444  
ªt
;

1445 
	}
}

1447 
göt
 
	$g›t_dülog_ˇn˚l
(
göt
 
ª•⁄£
)

1449 
ª•⁄£
) {

1450 
GTK_RESPONSE_NONE
:

1451 
GTK_RESPONSE_REJECT
:

1452 
GTK_RESPONSE_DELETE_EVENT
:

1453 
GTK_RESPONSE_CANCEL
:

1454 
GTK_RESPONSE_NO
:

1459 
	}
}

1461 
göt
 
	$g›t_dülog_d⁄e
(
göt
 
ª•⁄£
)

1463 
ª•⁄£
) {

1464 
GTK_RESPONSE_ACCEPT
:

1465 
GTK_RESPONSE_OK
:

1466 
GTK_RESPONSE_YES
:

1471 
	}
}

1473 
	$g›t_h™dÀ_›ti⁄_dülog
(
g›t_job_võw
 *
gjv
)

1475 
göt
 
ª•⁄£
;

1478 
ª•⁄£
 = 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
gjv
->
dülog
));

1480 i‡(
	`g›t_dülog_ˇn˚l
(
ª•⁄£
) ||

1481 
	`g›t_dülog_d⁄e
(
ª•⁄£
))

1487 
	`g›t_h™dÀ_ch™ged_›ti⁄s
(
gjv
);

1488 
	`g›t_ªp‹t_upd©e_°©us
(
gjv
);

1491 i‡(
	`g›t_dülog_ˇn˚l
(
ª•⁄£
))

1494 
	`g›t_h™dÀ_ch™ged_›ti⁄s
(
gjv
);

1495 
	}
}

1497 
	$g›t_job_ch™ged
(
GtkComboBox
 *
box
, 
gpoöãr
 
d©a
)

1499 
g›t_job_võw
 *
gjv
 = (g›t_job_võw *Ë
d©a
;

1500 
gfio_˛õ¡_›ti⁄s
 *
gco
 = 
NULL
;

1501 
gfio_˛õ¡
 *
gc
 = 
gjv
->
˛õ¡
;

1502 
Êi°_hód
 *
íåy
;

1503 
gch¨
 *
job
;

1509 i‡(!
	`Êi°_em±y
(&
gjv
->
ch™ged_li°
)) {

1510 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Internal Error", "Modified options on job switch.\nThat shouldÇot beÖossible!\n");

1514 
job
 = 
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
gjv
->
job_combo
));

1515 
	`Êi°_f‹_óch
(
íåy
, &
gc
->
o_li°
) {

1516 c⁄° *
«me
;

1518 
gco
 = 
	`Êi°_íåy
(
íåy
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

1519 
«me
 = 
gco
->
o
.name;

1520 i‡(!
«me
 || !
	`°æí
(name))

1521 
«me
 = "Default job";

1523 i‡(!
	`°rcmp
(
«me
, 
job
))

1526 
gco
 = 
NULL
;

1529 i‡(!
gco
) {

1530 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Internal Error", "CouldÇot find job description.\nThat shouldÇot beÖossible!\n");

1534 
gjv
->
ö_job_swôch
 = 1;

1535 
	`g›t_£t_›ti⁄s
(
gjv
, &
gco
->
o
);

1536 
gjv
->
ö_job_swôch
 = 0;

1537 
	}
}

1539 
	$g›t_gë_›ti⁄s_wödow
(
GtkWidgë
 *
wödow
, 
gfio_˛õ¡
 *
gc
)

1541 
GtkWidgë
 *
dülog
, *
nŸebook
, *
vbox
, *
t›vbox
, *
combo
;

1542 
gfio_˛õ¡_›ti⁄s
 *
gco
;

1543 
Êi°_hód
 *
íåy
;

1544 
g›t_job_võw
 *
gjv
;

1546 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Fio options",

1547 
	`GTK_WINDOW
(
wödow
), 
GTK_DIALOG_DESTROY_WITH_PARENT
,

1548 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
,

1549 
GTK_STOCK_APPLY
, 
GTK_RESPONSE_APPLY
,

1550 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_REJECT
, 
NULL
);

1552 
combo
 = 
	`gtk_combo_box_ãxt_√w
();

1553 
	`Êi°_f‹_óch
(
íåy
, &
gc
->
o_li°
) {

1554 
thªad_›ti⁄s
 *
o
;

1555 c⁄° *
«me
;

1557 
gco
 = 
	`Êi°_íåy
(
íåy
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

1558 
o
 = &
gco
->o;

1559 
«me
 = 
o
->name;

1560 i‡(!
«me
 || !
	`°æí
(name))

1561 
«me
 = "Default job";

1563 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
combo
), 
«me
);

1565 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
combo
), 0);

1567 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
dülog
), 1024, 768);

1569 
t›vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

1570 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
t›vbox
), 
combo
, 
FALSE
, FALSE, 5);

1572 
vbox
 = 
	`gtk_vbox_√w
(
TRUE
, 5);

1573 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
t›vbox
), 
vbox
, 
TRUE
, TRUE, 5);

1575 
nŸebook
 = 
	`gtk_nŸebook_√w
();

1576 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
(
	`GTK_NOTEBOOK
(
nŸebook
), 1);

1577 
	`gtk_nŸebook_p›up_íabÀ
(
	`GTK_NOTEBOOK
(
nŸebook
));

1578 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
nŸebook
, 
TRUE
, TRUE, 5);

1580 
gjv
 = 
	`ˇŒoc
(1, (*gjv));

1581 
	`INIT_FLIST_HEAD
(&
gjv
->
ch™ged_li°
);

1582 
gco
 = 
	`Êi°_fú°_íåy
(&
gc
->
o_li°
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

1583 
gjv
->
o
 = &
gco
->o;

1584 
gjv
->
dülog
 = dialog;

1585 
gjv
->
˛õ¡
 = 
gc
;

1586 
gjv
->
job_combo
 = 
combo
;

1587 
	`g›t_add_group_èbs
(
nŸebook
, 
gjv
);

1588 
	`g›t_add_›ti⁄s
(
gjv
, &
gco
->
o
);

1589 
	`g›t_dülog_upd©e_≠∂y_buâ⁄
(
gjv
);

1591 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_job_ch™ged
), 
gjv
);

1593 
	`gtk_widgë_show_Æl
(
dülog
);

1595 
	`g›t_h™dÀ_›ti⁄_dülog
(
gjv
);

1597 
	`gtk_widgë_de°roy
(
dülog
);

1598 
	`‰ì
(
gjv
);

1599 
	}
}

1604 
	$g›t_öô
()

1606 
i
;

1608 
g›t_dï_åì
 = 
	`g_node_√w
(
NULL
);

1610 
i
 = 0; 
fio_›ti⁄s
[i].
«me
; i++) {

1611 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
];

1612 
GNode
 *
node
, *
≈¨ít
;

1618 
node
 = 
	`g_node_√w
(
o
);

1619 
≈¨ít
 = 
g›t_dï_åì
;

1620 i‡(
o
->
∑ª¡
) {

1621 
fio_›ti⁄
 *
∑ª¡
;

1623 
∑ª¡
 = 
	`fio_›ti⁄_föd
(
o
->parent);

1624 
≈¨ít
 = 
	`g_node_föd
(
g›t_dï_åì
, 
G_IN_ORDER
, 
G_TRAVERSE_ALL
, 
∑ª¡
);

1625 i‡(!
≈¨ít
) {

1626 
	`log_îr
("fio: didÇŸ födÖ¨íà%†f‹ o± %s\n", 
o
->
«me
, o->
∑ª¡
);

1627 
≈¨ít
 = 
g›t_dï_åì
;

1631 
	`g_node_ö£π
(
≈¨ít
, -1, 
node
);

1633 
	}
}

1635 
	$g›t_exô
()

1637 
	`g_node_de°roy
(
g›t_dï_åì
);

1638 
g›t_dï_åì
 = 
NULL
;

1639 
	}
}

	@/home/ysjin/Desktop/fio/fio/goptions.h

1 #i‚de‡
GFIO_OPTIONS_H


2 
	#GFIO_OPTIONS_H


	)

4 
g›t_gë_›ti⁄s_wödow
(
GtkWidgë
 *
wödow
, 
gfio_˛õ¡
 *
gc
);

5 
g›t_öô
();

6 
g›t_exô
();

	@/home/ysjin/Desktop/fio/fio/graph.c

23 
	~<°rög.h
>

24 
	~<mÆloc.h
>

25 
	~<m©h.h
>

26 
	~<as£π.h
>

27 
	~<°dlib.h
>

29 
	~<ˇúo.h
>

30 
	~<gtk/gtk.h
>

32 
	~"tickm¨ks.h
"

33 
	~"gøph.h
"

34 
	~"Êi°.h
"

35 
	~"lib/¥io_åì.h
"

36 
	~"ˇúo_ãxt_hñ≥rs.h
"

41 
	#TOOLTIP_DELTA
 0.08

	)

43 
	sxyvÆue
 {

44 
	mx
, 
	my
;

48 
	mGV_F_ON_PRIO
 = 1,

49 
	mGV_F_PRIO_SKIP
 = 2,

52 
	sgøph_vÆue
 {

53 
Êi°_hód
 
	mli°
;

54 
¥io_åì_node
 
	mnode
;

55 
Êi°_hód
 
	mÆüs
;

56 
	mÊags
;

57 *
	mtoﬁtù
;

58 *
	mvÆue
;

61 
	sgøph_œbñ
 {

62 
Êi°_hód
 
	mli°
;

63 *
	mœbñ
;

64 
Êi°_hód
 
	mvÆue_li°
;

65 
¥io_åì_roŸ
 
	m¥io_åì
;

66 
	mr
, 
	mg
, 
	mb
;

67 
	mhide
;

68 
	mvÆue_cou¡
;

69 
gøph
 *
	m∑ª¡
;

72 
	stick_vÆue
 {

73 
	moff£t
;

74 
	mvÆue
;

77 
	sgøph
 {

78 *
	mtôÀ
;

79 *
	mxtôÀ
;

80 *
	mytôÀ
;

81 
	mxdim
, 
	mydim
;

82 
	mxoff£t
, 
	myoff£t
;

83 
Êi°_hód
 
	mœbñ_li°
;

84 
	m≥r_œbñ_limô
;

85 c⁄° *
	mf⁄t
;

86 
gøph_axis_unô_ch™ge_ˇŒback
 
	mx_axis_unô_ch™ge_ˇŒback
;

87 
gøph_axis_unô_ch™ge_ˇŒback
 
	my_axis_unô_ch™ge_ˇŒback
;

88 
	mba£_off£t
;

89 
	md⁄t_gøph_Æl_zî€s
;

90 
	mÀ·_exåa
;

91 
	mright_exåa
;

92 
	mt›_exåa
;

93 
	mbŸtom_exåa
;

95 
	mxtick_zîo
;

96 
	mxtick_dñè
;

97 
	mxtick_zîo_vÆ
;

98 
	mxtick_⁄e_vÆ
;

99 
	mytick_zîo
;

100 
	mytick_dñè
;

101 
	mytick_zîo_vÆ
;

102 
	mytick_⁄e_vÆ
;

105 
	$gøph_£t_size
(
gøph
 *
g
, 
xdim
, 
ydim
)

107 
g
->
xdim
 = xdim;

108 
g
->
ydim
 = ydim;

109 
	}
}

111 
	$gøph_£t_posôi⁄
(
gøph
 *
g
, 
xoff£t
, 
yoff£t
)

113 
g
->
xoff£t
 = xoffset;

114 
g
->
yoff£t
 = yoffset;

115 
	}
}

117 
gøph
 *
	$gøph_√w
(
xdim
, 
ydim
, c⁄° *
f⁄t
)

119 
gøph
 *
g
;

121 
g
 = 
	`ˇŒoc
(1, (*g));

122 
	`INIT_FLIST_HEAD
(&
g
->
œbñ_li°
);

123 
	`gøph_£t_size
(
g
, 
xdim
, 
ydim
);

124 
g
->
≥r_œbñ_limô
 = -1;

125 
g
->
f⁄t
 = font;

126 i‡(!
g
->
f⁄t
)

127 
g
->
f⁄t
 = 
GRAPH_DEFAULT_FONT
;

128  
g
;

129 
	}
}

131 
	$gøph_£t_f⁄t
(
gøph
 *
g
, c⁄° *
f⁄t
)

133 
g
->
f⁄t
 = font;

134 
	}
}

136 
	$gøph_x_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
)

138 
g
->
x_axis_unô_ch™ge_ˇŒback
 = 
f
;

139 
	}
}

141 
	$gøph_y_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
)

143 
g
->
y_axis_unô_ch™ge_ˇŒback
 = 
f
;

144 
	}
}

146 
	$cou¡_œbñs
(
gøph
 *
g
)

148 
Êi°_hód
 *
íåy
;

149 
cou¡
 = 0;

151 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
)

152 
cou¡
++;

154  
cou¡
;

155 
	}
}

157 
	$cou¡_vÆues
(
gøph_œbñ
 *
l
)

159 
Êi°_hód
 *
íåy
;

160 
cou¡
 = 0;

162 
	`Êi°_f‹_óch
(
íåy
, &
l
->
vÆue_li°
)

163 
cou¡
++;

165  
cou¡
;

166 
	}
}

168 (*
	tdoubÀ_com∑øt‹
)(
	ta
, 
	tb
);

170 
	$mödoubÀ
(
a
, 
b
)

172  
a
 < 
b
 ?á : b;

173 
	}
}

175 
	$maxdoubÀ
(
a
, 
b
)

177  
a
 < 
b
 ? b :á;

178 
	}
}

180 
	$föd_doubÀ_vÆues
(
gøph_œbñ
 *
l
, 
doubÀ_com∑øt‹
 
cmp
)

182 
Êi°_hód
 *
íåy
;

183 
™swî
 = 0.0, 
tmp
;

184 
fú°
 = 1;

186 i‡(
	`Êi°_em±y
(&
l
->
vÆue_li°
))

189 
	`Êi°_f‹_óch
(
íåy
, &
l
->
vÆue_li°
) {

190 
gøph_vÆue
 *
i
;

192 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

193 
tmp
 = *(*Ë
i
->
vÆue
;

194 i‡(
fú°
) {

195 
™swî
 = 
tmp
;

196 
fú°
 = 0;

198 
™swî
 = 
	`cmp
◊nswî, 
tmp
);

201  
™swî
;

202 
	}
}

204 
	$föd_doubÀ_d©a
(
gøph
 *
g
, 
doubÀ_com∑øt‹
 
cmp
)

206 
Êi°_hód
 *
íåy
;

207 
gøph_œbñ
 *
i
;

208 
fú°
 = 1;

209 
™swî
, 
tmp
;

211 i‡(
	`Êi°_em±y
(&
g
->
œbñ_li°
))

214 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

215 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

216 
tmp
 = 
	`föd_doubÀ_vÆues
(
i
, 
cmp
);

217 i‡(
fú°
) {

218 
™swî
 = 
tmp
;

219 
fú°
 = 0;

221 
™swî
 = 
	`cmp
(
tmp
,ánswer);

224  
™swî
;

225 
	}
}

227 
	$föd_mö_d©a
(
gøph
 *
g
)

229  
	`föd_doubÀ_d©a
(
g
, 
mödoubÀ
);

230 
	}
}

232 
	$föd_max_d©a
(
gøph
 *
g
)

234  
	`föd_doubÀ_d©a
(
g
, 
maxdoubÀ
);

235 
	}
}

237 
	$døw_b¨s
(
gøph
 *
bg
, 
ˇúo_t
 *
¸
, 
gøph_œbñ
 *
lb
,

238 
œbñ_off£t
, 
b¨_width
,

239 
möd©a
, 
maxd©a
)

241 
Êi°_hód
 *
íåy
;

242 
x1
, 
y1
, 
x2
, 
y2
;

243 
b¨_num
 = 0;

244 
domaö
, 
ønge
, 
v
;

246 
domaö
 = (
maxd©a
 - 
möd©a
);

247 
ønge
 = (Ë
bg
->
ydim
 * 0.80;

248 
	`ˇúo_°roke
(
¸
);

249 
	`Êi°_f‹_óch
(
íåy
, &
lb
->
vÆue_li°
) {

250 
gøph_vÆue
 *
i
;

252 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

254 
x1
 = 
œbñ_off£t
 + (Ë
b¨_num
 * 
b¨_width
 + (bar_width * 0.05);

255 
x2
 = 
x1
 + 
b¨_width
 * 0.90;

256 
y2
 = 
bg
->
ydim
 * 0.90;

257 
v
 = *(*Ë
i
->
vÆue
;

258 
y1
 = 
y2
 - (((
v
 - 
möd©a
Ë/ 
domaö
Ë* 
ønge
);

259 
	`ˇúo_move_to
(
¸
, 
x1
, 
y1
);

260 
	`ˇúo_löe_to
(
¸
, 
x1
, 
y2
);

261 
	`ˇúo_löe_to
(
¸
, 
x2
, 
y2
);

262 
	`ˇúo_löe_to
(
¸
, 
x2
, 
y1
);

263 
	`ˇúo_˛o£_∑th
(
¸
);

264 
	`ˇúo_fûl
(
¸
);

265 
	`ˇúo_°roke
(
¸
);

266 
b¨_num
++;

268 
	}
}

270 
	$gøph_døw_comm⁄
(
gøph
 *
g
, 
ˇúo_t
 *
¸
, *
x1
,

271 *
y1
, *
x2
, *
y2
)

273 c⁄° 
shade_cﬁ
[3][3] = { { 0.55, 0.54, 0.54 },

276 
i
;

278 *
x1
 = 0.10 * 
g
->
xdim
;

279 *
x2
 = 0.95 * 
g
->
xdim
;

280 *
y1
 = 0.10 * 
g
->
ydim
;

281 *
y2
 = 0.90 * 
g
->
ydim
;

286 
	`ˇúo_£t_löe_width
(
¸
, 1.0);

287 
i
 = 0; i < 3; i++) {

288 
off£t
 = 
i
 + 1.0;

290 
	`ˇúo_£t_sour˚_rgb
(
¸
, 
shade_cﬁ
[
i
][0], shade_col[i][1], shade_col[i][2]);

291 
	`ˇúo_move_to
(
¸
, 
off£t
 + *
x1
, *
y1
 - offset);

292 
	`ˇúo_löe_to
(
¸
, *
x2
 + 
off£t
, *
y1
 - offset);

293 
	`ˇúo_löe_to
(
¸
, *
x2
 + 
off£t
, *
y2
 - offset);

294 
	`ˇúo_°roke
(
¸
);

297 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

298 
	`ˇúo_£t_löe_width
(
¸
, 1.2);

300 
	`ˇúo_move_to
(
¸
, *
x1
, *
y1
);

301 
	`ˇúo_löe_to
(
¸
, *
x1
, *
y2
);

302 
	`ˇúo_löe_to
(
¸
, *
x2
, *
y2
);

303 
	`ˇúo_löe_to
(
¸
, *
x2
, *
y1
);

304 
	`ˇúo_löe_to
(
¸
, *
x1
, *
y1
);

305 
	`ˇúo_°roke
(
¸
);

307 
	`døw_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, g->
xdim
 / 2, g->
ydim
 / 20, 20.0, g->
tôÀ
);

308 
	`døw_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, g->
xdim
 / 2, g->
ydim
 * 0.97, 14.0, g->
xtôÀ
);

309 
	`døw_vîtiˇl_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, g->
xdim
 * 0.02, g->
ydim
 / 2, 14.0, g->
ytôÀ
);

310 
	`ˇúo_°roke
(
¸
);

311 
	}
}

313 
	$gøph_døw_x_ticks
(
gøph
 *
g
, 
ˇúo_t
 *
¸
,

314 
x1
, 
y1
, 
x2
, 
y2
,

315 
möx
, 
maxx
, 
¡icks
, 
add_tm_ãxt
)

317 
tickm¨k
 *
tm
;

318 
tx
;

319 
i
, 
powî_of_ãn
;

320 
dash
[] = { 1.0, 2.0 };

322 
¡icks
 = 
	`ˇlc_tickm¨ks
(
möx
, 
maxx
,Çticks, &
tm
, &
powî_of_ãn
,

323 
g
->
x_axis_unô_ch™ge_ˇŒback
 =
NULL
, g->
ba£_off£t
);

324 i‡(
g
->
x_axis_unô_ch™ge_ˇŒback
)

325 
g
->
	`x_axis_unô_ch™ge_ˇŒback
(g, 
powî_of_ãn
);

327 
i
 = 0; i < 
¡icks
; i++) {

328 
tx
 = (((
tm
[
i
].
vÆue
Ë- 
möx
Ë/ (
maxx
 - möx)Ë* (
x2
 - 
x1
) + x1;

333 i‡(!
i
) {

334 
g
->
xtick_zîo
 = 
tx
;

335 
g
->
xtick_zîo_vÆ
 = 
tm
[0].
vÆue
;

336 } i‡(
i
 == 1) {

337 
g
->
xtick_dñè
 = (
tm
[1].
vÆue
 -Åm[0].vÆueË/ (
tx
 - g->
xtick_zîo
);

338 
g
->
xtick_⁄e_vÆ
 = 
tm
[1].
vÆue
;

342 i‡(
x1
 - 
tx
 > 0.01 ||Åx - 
x2
 > 0.01)

346 
	`ˇúo_£t_löe_width
(
¸
, 1.0);

347 
	`ˇúo_move_to
(
¸
, 
tx
, 
y2
);

348 
	`ˇúo_löe_to
(
¸
, 
tx
, 
y2
 + (y2 - 
y1
) * 0.03);

349 
	`ˇúo_°roke
(
¸
);

352 
	`ˇúo_ßve
(
¸
);

353 
	`ˇúo_£t_dash
(
¸
, 
dash
, 2, 0.66);

354 
	`ˇúo_£t_löe_width
(
¸
, 0.33);

355 
	`ˇúo_move_to
(
¸
, 
tx
, 
y1
);

356 
	`ˇúo_löe_to
(
¸
, 
tx
, 
y2
);

357 
	`ˇúo_°roke
(
¸
);

358 
	`ˇúo_ª°‹e
(
¸
);

360 i‡(!
add_tm_ãxt
)

364 
	`døw_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, 
tx
, 
y2
 * 1.04, 12.0, 
tm
[
i
].
°rög
);

365 
	`ˇúo_°roke
(
¸
);

367 
	}
}

369 
	$gøph_døw_y_ticks
(
gøph
 *
g
, 
ˇúo_t
 *
¸
,

370 
x1
, 
y1
, 
x2
, 
y2
,

371 
möy
, 
maxy
, 
¡icks
, 
add_tm_ãxt
)

373 
tickm¨k
 *
tm
;

374 
ty
;

375 
i
, 
powî_of_ãn
;

376 
dash
[] = { 1.0, 2.0 };

378 
¡icks
 = 
	`ˇlc_tickm¨ks
(
möy
, 
maxy
,Çticks, &
tm
, &
powî_of_ãn
,

379 
g
->
y_axis_unô_ch™ge_ˇŒback
 =
NULL
, g->
ba£_off£t
);

380 i‡(
g
->
y_axis_unô_ch™ge_ˇŒback
)

381 
g
->
	`y_axis_unô_ch™ge_ˇŒback
(g, 
powî_of_ãn
);

388 
maxy
 = 
tm
[
¡icks
 - 1].
vÆue
;

390 
i
 = 0; i < 
¡icks
; i++) {

391 
ty
 = 
y2
 - (((
tm
[
i
].
vÆue
Ë- 
möy
Ë/ (
maxy
 - möy)Ë* (y2 - 
y1
);

396 i‡(!
i
) {

397 
g
->
ytick_zîo
 = 
ty
;

398 
g
->
ytick_zîo_vÆ
 = 
tm
[0].
vÆue
;

399 } i‡(
i
 == 1) {

400 
g
->
ytick_dñè
 = (
tm
[1].
vÆue
 -Åm[0].vÆueË/ (
ty
 - g->
ytick_zîo
);

401 
g
->
ytick_⁄e_vÆ
 = 
tm
[1].
vÆue
;

405 i‡(
y1
 - 
ty
 > 0.01 ||Åy - 
y2
 > 0.01)

409 
	`ˇúo_move_to
(
¸
, 
x1
, 
ty
);

410 
	`ˇúo_löe_to
(
¸
, 
x1
 - (
x2
 - x1Ë* 0.02, 
ty
);

411 
	`ˇúo_°roke
(
¸
);

414 
	`ˇúo_ßve
(
¸
);

415 
	`ˇúo_£t_dash
(
¸
, 
dash
, 2, 0.66);

416 
	`ˇúo_£t_löe_width
(
¸
, 0.33);

417 
	`ˇúo_move_to
(
¸
, 
x1
, 
ty
);

418 
	`ˇúo_löe_to
(
¸
, 
x2
, 
ty
);

419 
	`ˇúo_°roke
(
¸
);

420 
	`ˇúo_ª°‹e
(
¸
);

422 i‡(!
add_tm_ãxt
)

426 
	`døw_right_ju°ifõd_ãxt
(
¸
, 
g
->
f⁄t
, 
x1
 - (
x2
 - x1Ë* 0.025, 
ty
, 12.0, 
tm
[
i
].
°rög
);

427 
	`ˇúo_°roke
(
¸
);

433  
maxy
;

434 
	}
}

436 
	$b¨_gøph_døw
(
gøph
 *
bg
, 
ˇúo_t
 *
¸
)

438 
x1
, 
y1
, 
x2
, 
y2
;

439 
•a˚_≥r_œbñ
, 
b¨_width
;

440 
œbñ_off£t
, 
möd©a
, 
maxd©a
;

441 
i
, 
∆abñs
;

442 
gøph_œbñ
 *
lb
;

443 
Êi°_hód
 *
íåy
;

445 
	`ˇúo_ßve
(
¸
);

446 
	`ˇúo_å™¶©e
(
¸
, 
bg
->
xoff£t
, bg->
yoff£t
);

447 
	`gøph_døw_comm⁄
(
bg
, 
¸
, &
x1
, &
y1
, &
x2
, &
y2
);

449 
∆abñs
 = 
	`cou¡_œbñs
(
bg
);

450 
•a˚_≥r_œbñ
 = (
x2
 - 
x1
Ë/ (Ë
∆abñs
;

456 
möd©a
 = 
	`föd_mö_d©a
(
bg
);

457 i‡(
möd©a
 > 0)

458 
möd©a
 = 0;

460 
maxd©a
 = 
	`föd_max_d©a
(
bg
);

462 i‡(
	`Ábs
(
maxd©a
 - 
möd©a
) < 1e-20) {

463 
	`døw_˚¡îed_ãxt
(
¸
, 
bg
->
f⁄t
,

464 
x1
 + (
x2
 - x1) / 2.0,

465 
y1
 + (
y2
 - y1) / 2.0, 20.0, "No good data");

469 
maxd©a
 = 
	`gøph_døw_y_ticks
(
bg
, 
¸
, 
x1
, 
y1
, 
x2
, 
y2
, 
möd©a
, maxdata, 10, 1);

470 
i
 = 0;

471 
	`Êi°_f‹_óch
(
íåy
, &
bg
->
œbñ_li°
) {

472 
nvÆues
;

474 
lb
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

475 
nvÆues
 = 
	`cou¡_vÆues
(
lb
);

476 
b¨_width
 = (
•a˚_≥r_œbñ
 - s∑˚_≥r_œbñ * 0.2Ë/ (Ë
nvÆues
;

477 
œbñ_off£t
 = 
bg
->
xdim
 * 0.1 + 
•a˚_≥r_œbñ
 * (Ë
i
 + space_per_label * 0.1;

478 
	`døw_b¨s
(
bg
, 
¸
, 
lb
, 
œbñ_off£t
, 
b¨_width
, 
möd©a
, 
maxd©a
);

480 
	`døw_˚¡îed_ãxt
(
¸
, 
bg
->
f⁄t
, 
x1
 + 
•a˚_≥r_œbñ
 * (
i
 + 0.5), bg->
ydim
 * 0.93,

481 12.0, 
lb
->
œbñ
);

482 
i
++;

484 
	`ˇúo_°roke
(
¸
);

485 
	`ˇúo_ª°‹e
(
¸
);

486 
	}
}

488 (*
	txy_vÆue_exåa˘‹
)(
	tgøph_vÆue
 *
	tv
);

490 
	$gëx
(
gøph_vÆue
 *
v
)

492 
xyvÆue
 *
xy
 = 
v
->
vÆue
;

493  
xy
->
x
;

494 
	}
}

496 
	$gëy
(
gøph_vÆue
 *
v
)

498 
xyvÆue
 *
xy
 = 
v
->
vÆue
;

499  
xy
->
y
;

500 
	}
}

502 
	$föd_xy_vÆue
(
gøph
 *
g
, 
xy_vÆue_exåa˘‹
 
gëvÆue
, 
doubÀ_com∑øt‹
 
cmp
)

504 
tmp
, 
™swî
 = 0.0;

505 
gøph_œbñ
 *
i
;

506 
gøph_vÆue
 *
j
;

507 
Êi°_hód
 *
jíåy
, *
íåy
;

508 
fú°
 = 1;

510 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

511 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

513 
	`Êi°_f‹_óch
(
jíåy
, &
i
->
vÆue_li°
) {

514 
j
 = 
	`Êi°_íåy
(
jíåy
, 
gøph_vÆue
, 
li°
);

515 
tmp
 = 
	`gëvÆue
(
j
);

516 i‡(
fú°
) {

517 
fú°
 = 0;

518 
™swî
 = 
tmp
;

520 
™swî
 = 
	`cmp
(
tmp
,ánswer);

524  
™swî
;

525 
	}
}

527 
	$löe_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
)

529 
x1
, 
y1
, 
x2
, 
y2
;

530 
möx
, 
möy
, 
maxx
, 
maxy
, 
gmöx
, 
gmöy
, 
gmaxx
, 
gmaxy
;

531 
tx
, 
ty
, 
t›_exåa
, 
bŸtom_exåa
, 
À·_exåa
, 
right_exåa
;

532 
gøph_œbñ
 *
i
;

533 
gøph_vÆue
 *
j
;

534 
good_d©a
 = 1, 
fú°
 = 1;

535 
Êi°_hód
 *
íåy
, *
À¡ry
;

537 
	`ˇúo_ßve
(
¸
);

538 
	`ˇúo_å™¶©e
(
¸
, 
g
->
xoff£t
, g->
yoff£t
);

539 
	`gøph_døw_comm⁄
(
g
, 
¸
, &
x1
, &
y1
, &
x2
, &
y2
);

541 
möx
 = 
	`föd_xy_vÆue
(
g
, 
gëx
, 
mödoubÀ
);

542 
maxx
 = 
	`föd_xy_vÆue
(
g
, 
gëx
, 
maxdoubÀ
);

543 
möy
 = 
	`föd_xy_vÆue
(
g
, 
gëy
, 
mödoubÀ
);

550 i‡(
möy
 > 0)

551 
möy
 = 0;

553 
maxy
 = 
	`föd_xy_vÆue
(
g
, 
gëy
, 
maxdoubÀ
);

555 i‡(
	`Ábs
(
maxx
 - 
möx
Ë< 1e-20 || fabs(
maxy
 - 
möy
) < 1e-20) {

556 
good_d©a
 = 0;

557 
möx
 = 0.0;

558 
möy
 = 0.0;

559 
maxx
 = 10.0;

560 
maxy
 = 100.0;

563 
t›_exåa
 = 0.0;

564 
bŸtom_exåa
 = 0.0;

565 
À·_exåa
 = 0.0;

566 
right_exåa
 = 0.0;

568 i‡(
g
->
t›_exåa
 > 0.001)

569 
t›_exåa
 = 
	`Ábs
(
maxy
 - 
möy
Ë* 
g
->top_extra;

570 i‡(
g
->
bŸtom_exåa
 > 0.001)

571 
bŸtom_exåa
 = 
	`Ábs
(
maxy
 - 
möy
Ë* 
g
->bottom_extra;

572 i‡(
g
->
À·_exåa
 > 0.001)

573 
À·_exåa
 = 
	`Ábs
(
maxx
 - 
möx
Ë* 
g
->left_extra;

574 i‡(
g
->
right_exåa
 > 0.001)

575 
right_exåa
 = 
	`Ábs
(
maxx
 - 
möx
Ë* 
g
->right_extra;

577 
gmöx
 = 
möx
 - 
À·_exåa
;

578 
gmaxx
 = 
maxx
 + 
right_exåa
;

579 
gmöy
 = 
möy
 - 
bŸtom_exåa
;

580 
gmaxy
 = 
maxy
 + 
t›_exåa
;

582 
	`gøph_døw_x_ticks
(
g
, 
¸
, 
x1
, 
y1
, 
x2
, 
y2
, 
gmöx
, 
gmaxx
, 10, 
good_d©a
);

583 
gmaxy
 = 
	`gøph_døw_y_ticks
(
g
, 
¸
, 
x1
, 
y1
, 
x2
, 
y2
, 
gmöy
, gmaxy, 10, 
good_d©a
);

585 i‡(!
good_d©a
)

586 
skù_d©a
;

588 
	`ˇúo_£t_löe_width
(
¸
, 1.5);

589 
	`ˇúo_£t_löe_joö
(
¸
, 
CAIRO_LINE_JOIN_ROUND
);

591 
	`Êi°_f‹_óch
(
À¡ry
, &
g
->
œbñ_li°
) {

592 
i
 = 
	`Êi°_íåy
(
À¡ry
, 
gøph_œbñ
, 
li°
);

593 
fú°
 = 1;

594 i‡(
i
->
hide
 || i->
r
 < 0)

597 
	`ˇúo_£t_sour˚_rgb
(
¸
, 
i
->
r
, i->
g
, i->
b
);

598 
	`Êi°_f‹_óch
(
íåy
, &
i
->
vÆue_li°
) {

599 
j
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

600 
tx
 = ((
	`gëx
(
j
Ë- 
gmöx
Ë/ (
gmaxx
 - gmöx)Ë* (
x2
 - 
x1
) + x1;

601 
ty
 = 
y2
 - ((
	`gëy
(
j
Ë- 
gmöy
Ë/ (
gmaxy
 - gmöy)Ë* (y2 - 
y1
);

602 i‡(
fú°
) {

603 
	`ˇúo_move_to
(
¸
, 
tx
, 
ty
);

604 
fú°
 = 0;

606 
	`ˇúo_löe_to
(
¸
, 
tx
, 
ty
);

608 
	`ˇúo_°roke
(
¸
);

611 
skù_d©a
:

612 
	`ˇúo_ª°‹e
(
¸
);

613 
	}
}

615 
	$£t°rög
(**
°r
, c⁄° *
vÆue
)

617 
	`‰ì
(*
°r
);

618 *
°r
 = 
	`°rdup
(
vÆue
);

619 
	}
}

621 
	$gøph_tôÀ
(
gøph
 *
bg
, c⁄° *
tôÀ
)

623 
	`£t°rög
(&
bg
->
tôÀ
,Åitle);

624 
	}
}

626 
	$gøph_x_tôÀ
(
gøph
 *
bg
, c⁄° *
tôÀ
)

628 
	`£t°rög
(&
bg
->
xtôÀ
, 
tôÀ
);

629 
	}
}

631 
	$gøph_y_tôÀ
(
gøph
 *
bg
, c⁄° *
tôÀ
)

633 
	`£t°rög
(&
bg
->
ytôÀ
, 
tôÀ
);

634 
	}
}

636 
gøph_œbñ
 *
	$gøph_föd_œbñ
(
gøph
 *
bg
,

637 c⁄° *
œbñ
)

639 
Êi°_hód
 *
íåy
;

640 
gøph_œbñ
 *
i
;

642 
	`Êi°_f‹_óch
(
íåy
, &
bg
->
œbñ_li°
) {

643 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

645 i‡(
	`°rcmp
(
œbñ
, 
i
->label) == 0)

646  
i
;

649  
NULL
;

650 
	}
}

652 
gøph_œbñ_t
 
	$gøph_add_œbñ
(
gøph
 *
bg
, c⁄° *
œbñ
)

654 
gøph_œbñ
 *
i
;

656 
i
 = 
	`gøph_föd_œbñ
(
bg
, 
œbñ
);

657 i‡(
i
)

658  
i
;

659 
i
 = 
	`ˇŒoc
(1, (*i));

660 
	`INIT_FLIST_HEAD
(&
i
->
vÆue_li°
);

661 
i
->
∑ª¡
 = 
bg
;

662 
	`£t°rög
(&
i
->
œbñ
,Üabel);

663 
	`Êi°_add_èû
(&
i
->
li°
, &
bg
->
œbñ_li°
);

664 
	`INIT_PRIO_TREE_ROOT
(&
i
->
¥io_åì
);

665  
i
;

666 
	}
}

668 
	$__gøph_vÆue_dr›
(
gøph_œbñ
 *
l
, 
gøph_vÆue
 *
v
)

670 
	`Êi°_dñ_öô
(&
v
->
li°
);

671 i‡(
v
->
toﬁtù
)

672 
	`‰ì
(
v
->
toﬁtù
);

673 
	`‰ì
(
v
->
vÆue
);

674 
	`‰ì
(
v
);

675 
l
->
vÆue_cou¡
--;

676 
	}
}

678 
	$gøph_vÆue_dr›
(
gøph_œbñ
 *
l
, 
gøph_vÆue
 *
v
)

680 i‡(
v
->
Êags
 & 
GV_F_PRIO_SKIP
) {

681 
	`__gøph_vÆue_dr›
(
l
, 
v
);

688 !(
v
->
Êags
 & 
GV_F_ON_PRIO
)) {

689 
	`as£π
(!
	`Êi°_em±y
(&
v
->
Æüs
));

690 
v
 = 
	`Êi°_fú°_íåy
(&v->
Æüs
, 
gøph_vÆue
,álias);

693 
	`¥io_åì_ªmove
(&
l
->
¥io_åì
, &
v
->
node
);

698 !
	`Êi°_em±y
(&
v
->
Æüs
)) {

699 
gøph_vÆue
 *
a
;

701 
a
 = 
	`Êi°_fú°_íåy
(&
v
->
Æüs
, 
gøph_vÆue
,álias);

702 
	`Êi°_dñ_öô
(&
a
->
Æüs
);

704 
	`__gøph_vÆue_dr›
(
l
, 
a
);

707 
	`__gøph_vÆue_dr›
(
l
, 
v
);

708 
	}
}

710 
	$gøph_œbñ_add_vÆue
(
gøph_œbñ
 *
i
, *
vÆue
,

711 c⁄° *
toﬁtù
)

713 
gøph
 *
g
 = 
i
->
∑ª¡
;

714 
gøph_vÆue
 *
x
;

716 
x
 = 
	`mÆloc
((*x));

717 
	`mem£t
(
x
, 0, (*x));

718 
	`INIT_FLIST_HEAD
(&
x
->
Æüs
);

719 
	`INIT_FLIST_HEAD
(&
x
->
li°
);

720 
	`Êi°_add_èû
(&
x
->
li°
, &
i
->
vÆue_li°
);

721 
i
->
vÆue_cou¡
++;

722 
x
->
vÆue
 = value;

724 i‡(
toﬁtù
) {

725 
xvÆ
 = 
	`gëx
(
x
);

726 
möx
 = 
xvÆ
 - (
g
->
xtick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

727 
maxx
 = 
xvÆ
 + (
g
->
xtick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

728 
¥io_åì_node
 *
ªt
;

734 
möx
 = minx * 1000.0;

735 
maxx
 = maxx * 1000.0;

737 
	`INIT_PRIO_TREE_NODE
(&
x
->
node
);

738 
x
->
node
.
°¨t
 = 
möx
;

739 
x
->
node
.
œ°
 = 
maxx
;

740 
x
->
toﬁtù
 = 
	`°rdup
(tooltip);

741 i‡(
x
->
node
.
œ°
 =x->node.
°¨t
) {

742 
x
->
node
.
œ°
 +
	`Ábs
(
g
->
xtick_dñè
);

743 i‡(
x
->
node
.
œ°
 =x->node.
°¨t
)

744 
x
->
node
.
œ°
++;

751 
ªt
 = 
	`¥io_åì_ö£π
(&
i
->
¥io_åì
, &
x
->
node
);

752 i‡(
ªt
 !&
x
->
node
) {

753 
gøph_vÆue
 *
Æüs
;

755 
Æüs
 = 
	`c⁄èöî_of
(
ªt
, 
gøph_vÆue
, 
node
);

756 
	`Êi°_add_èû
(&
x
->
Æüs
, &alias->alias);

758 
x
->
Êags
 = 
GV_F_ON_PRIO
;

760 
x
->
Êags
 = 
GV_F_PRIO_SKIP
;

762 i‡(
g
->
≥r_œbñ_limô
 != -1 &&

763 
i
->
vÆue_cou¡
 > 
g
->
≥r_œbñ_limô
) {

764 
to_dr›
 = 1;

772 i‡(
i
->
vÆue_cou¡
 - 
g
->
≥r_œbñ_limô
 >= 2)

773 
to_dr›
 = 2;

775 
to_dr›
-- && !
	`Êi°_em±y
(&
i
->
vÆue_li°
)) {

776 
x
 = 
	`Êi°_fú°_íåy
(&
i
->
vÆue_li°
, 
gøph_vÆue
, 
li°
);

777 
	`gøph_vÆue_dr›
(
i
, 
x
);

782 i‡(
i
->
vÆue_cou¡
 <
g
->
≥r_œbñ_limô
)

786 
	}
}

788 
	$gøph_add_d©a
(
gøph
 *
bg
, 
gøph_œbñ_t
 
œbñ
, c⁄° 
vÆue
)

790 
gøph_œbñ
 *
i
 = 
œbñ
;

791 *
d
;

793 
d
 = 
	`mÆloc
((*d));

794 *
d
 = 
vÆue
;

796 
	`gøph_œbñ_add_vÆue
(
i
, 
d
, 
NULL
);

798 
	}
}

800 
	$gøph_n⁄zîo_y
(
gøph_œbñ
 *
l
)

802 
Êi°_hód
 *
íåy
;

804 
	`Êi°_f‹_óch
(
íåy
, &
l
->
vÆue_li°
) {

805 
gøph_vÆue
 *
v
;

807 
v
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

808 i‡(
	`gëy
(
v
) != 0.0)

813 
	}
}

815 
	$gøph_add_xy_d©a
(
gøph
 *
bg
, 
gøph_œbñ_t
 
œbñ
,

816 c⁄° 
x
, c⁄° 
y
, c⁄° *
toﬁtù
)

818 
gøph_œbñ
 *
i
 = 
œbñ
;

819 
xyvÆue
 *
xy
;

821 i‡(
bg
->
d⁄t_gøph_Æl_zî€s
 && 
y
 =0.0 && !
	`gøph_n⁄zîo_y
(
i
))

822 
i
->
hide
 = 1;

824 
i
->
hide
 = 0;

826 
xy
 = 
	`mÆloc
((*xy));

827 
xy
->
x
 = x;

828 
xy
->
y
 = y;

830 
	`gøph_œbñ_add_vÆue
(
i
, 
xy
, 
toﬁtù
);

832 
	}
}

834 
	$gøph_‰ì_vÆues
(
gøph_œbñ
 *
l
)

836 
gøph_vÆue
 *
i
;

838 !
	`Êi°_em±y
(&
l
->
vÆue_li°
)) {

839 
i
 = 
	`Êi°_fú°_íåy
(&
l
->
vÆue_li°
, 
gøph_vÆue
, 
li°
);

840 
	`gøph_vÆue_dr›
(
l
, 
i
);

842 
	}
}

844 
	$gøph_‰ì_œbñs
(
gøph
 *
g
)

846 
gøph_œbñ
 *
i
;

848 !
	`Êi°_em±y
(&
g
->
œbñ_li°
)) {

849 
i
 = 
	`Êi°_fú°_íåy
(&
g
->
œbñ_li°
, 
gøph_œbñ
, 
li°
);

850 
	`Êi°_dñ
(&
i
->
li°
);

851 
	`gøph_‰ì_vÆues
(
i
);

852 
	`‰ì
(
i
);

854 
	}
}

856 
	$gøph_˛ór_vÆues
(
gøph
 *
g
)

858 
Êi°_hód
 *
node
;

859 
gøph_œbñ
 *
i
;

861 
	`Êi°_f‹_óch
(
node
, &
g
->
œbñ_li°
) {

862 
i
 = 
	`Êi°_íåy
(
node
, 
gøph_œbñ
, 
li°
);

863 
	`gøph_‰ì_vÆues
(
i
);

865 
	}
}

867 
	$gøph_£t_cﬁ‹
(
gøph
 *
gr
, 
gøph_œbñ_t
 
œbñ
, 
ªd
,

868 
gªí
, 
blue
)

870 
gøph_œbñ
 *
i
 = 
œbñ
;

871 
r
, 
g
, 
b
;

873 i‡(
ªd
 < 0.0) {

874 
r
 = -1.0;

875 
g
 = -1.0;

876 
b
 = -1.0;

878 
r
 = 
	`Ábs
(
ªd
);

879 
g
 = 
	`Ábs
(
gªí
);

880 
b
 = 
	`Ábs
(
blue
);

882 i‡(
r
 > 1.0)

883 
r
 = 1.0;

884 i‡(
g
 > 1.0)

885 
g
 = 1.0;

886 i‡(
b
 > 1.0)

887 
b
 = 1.0;

890 
i
->
r
 =Ñ;

891 
i
->
g
 = g;

892 
i
->
b
 = b;

893 
	}
}

895 
	$gøph_‰ì
(
gøph
 *
bg
)

897 
	`‰ì
(
bg
->
tôÀ
);

898 
	`‰ì
(
bg
->
xtôÀ
);

899 
	`‰ì
(
bg
->
ytôÀ
);

900 
	`gøph_‰ì_œbñs
(
bg
);

901 
	}
}

907 
	$löe_gøph_£t_d©a_cou¡_limô
(
gøph
 *
g
, 
≥r_œbñ_limô
)

909 
g
->
≥r_œbñ_limô
 =Öer_label_limit;

910 
	}
}

912 
	$gøph_add_exåa_•a˚
(
gøph
 *
g
, 
À·_≥r˚¡
,

913 
right_≥r˚¡
, 
t›_≥r˚¡
,

914 
bŸtom_≥r˚¡
)

916 
g
->
À·_exåa
 = 
À·_≥r˚¡
;

917 
g
->
right_exåa
 = 
right_≥r˚¡
;

918 
g
->
t›_exåa
 = 
t›_≥r˚¡
;

919 
g
->
bŸtom_exåa
 = 
bŸtom_≥r˚¡
;

920 
	}
}

927 
	$gøph_£t_ba£_off£t
(
gøph
 *
g
, 
ba£_off£t
)

929 
g
->
ba£_off£t
 = base_offset;

930 
	}
}

932 
	$gøph_has_toﬁtùs
(
gøph
 *
g
)

934 
Êi°_hód
 *
íåy
;

935 
gøph_œbñ
 *
i
;

937 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

938 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

940 i‡(!
	`¥io_åì_em±y
(&
i
->
¥io_åì
))

945 
	}
}

947 
	$gøph_c⁄èös_xy
(
gøph
 *
g
, 
x
, 
y
)

949 
fú°_x
 = 
g
->
xoff£t
;

950 
œ°_x
 = 
g
->
xoff£t
 + g->
xdim
;

951 
fú°_y
 = 
g
->
yoff£t
;

952 
œ°_y
 = 
g
->
yoff£t
 + g->
ydim
;

954  (
x
 >
fú°_x
 && x <
œ°_x
Ë&& (
y
 >
fú°_y
 && y <
œ°_y
);

955 
	}
}

957 c⁄° *
	$gøph_föd_toﬁtù
(
gøph
 *
g
, 
ix
, 
iy
)

959 
x
 = 
ix
, 
y
 = 
iy
;

960 
¥io_åì_ôî
 
ôî
;

961 
¥io_åì_node
 *
n
;

962 
gøph_vÆue
 *
be°
 = 
NULL
;

963 
Êi°_hód
 *
íåy
;

964 
be°_dñè
;

965 
maxy
, 
möy
;

967 
x
 -
g
->
xoff£t
;

968 
y
 -
g
->
yoff£t
;

970 
x
 = 
g
->
xtick_zîo_vÆ
 + ((x - g->
xtick_zîo
Ë* g->
xtick_dñè
);

971 
y
 = 
g
->
ytick_zîo_vÆ
 + ((y - g->
ytick_zîo
Ë* g->
ytick_dñè
);

973 
x
 = x * 1000.0;

974 
maxy
 = 
y
 + (
g
->
ytick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

975 
möy
 = 
y
 - (
g
->
ytick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

976 
be°_dñè
 = 
UINT_MAX
;

977 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

978 
gøph_œbñ
 *
i
;

980 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

981 i‡(
i
->
hide
)

984 
	`INIT_PRIO_TREE_ITER
(&
ôî
);

985 
	`¥io_åì_ôî_öô
(&
ôî
, &
i
->
¥io_åì
, 
x
, x);

987 
n
 = 
	`¥io_åì_√xt
(&
ôî
);

988 i‡(!
n
)

992 
gøph_vÆue
 *
v
, *
roŸv
;

993 
yvÆ
, 
ydiff
;

995 
v
 = 
	`c⁄èöî_of
(
n
, 
gøph_vÆue
, 
node
);

996 
roŸv
 = 
v
;

998 
yvÆ
 = 
	`gëy
(
v
);

999 
ydiff
 = 
	`Ábs
(
yvÆ
 - 
y
);

1004 i‡(
ydiff
 < 
be°_dñè
) {

1005 
be°_dñè
 = 
ydiff
;

1006 i‡(!
be°_dñè
 ||

1007 (
yvÆ
 >
möy
 && yvÆ <
maxy
)) {

1008 
be°
 = 
v
;

1012 i‡(!
	`Êi°_em±y
(&
v
->
Æüs
))

1013 
v
 = 
	`Êi°_fú°_íåy
(&v->
Æüs
, 
gøph_vÆue
,álias);

1014 } 
v
 !
roŸv
);

1015 } (
n
 = 
	`¥io_åì_√xt
(&
ôî
)Ë!
NULL
);

1020 i‡(
be°
)

1024 i‡(
be°
)

1025  
be°
->
toﬁtù
;

1027  
NULL
;

1028 
	}
}

1030 
	$gøph_£t_gøph_Æl_zî€s
(
gøph
 *
g
, 
£t
)

1032 
g
->
d⁄t_gøph_Æl_zî€s
 = !
£t
;

1033 
	}
}

	@/home/ysjin/Desktop/fio/fio/graph.h

1 #i‚de‡
GRAPH_H


2 
	#GRAPH_H


	)

4 
	ggøph
;

5 
	ggøph_œbñ
;

7 
gøph_œbñ
 * 
	tgøph_œbñ_t
;

9 
	#GRAPH_DEFAULT_FONT
 "S™†12"

	)

11 
gøph
 *
gøph_√w
(
xdim
, 
ydim
, c⁄° *
f⁄t
);

13 
gøph_£t_size
(
gøph
 *
g
, 
xdim
, 
ydim
);

15 
gøph_£t_posôi⁄
(
gøph
 *
g
, 
xoff£t
, 
yoff£t
);

17 
b¨_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
);

19 
löe_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
);

21 
löe_gøph_£t_d©a_cou¡_limô
(
gøph
 *
g
, 
≥r_œbñ_limô
);

26 
gøph_£t_f⁄t
(
gøph
 *
g
, c⁄° *
f⁄t
);

27 
gøph_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

29 
gøph_x_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

31 
gøph_y_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

33 
gøph_œbñ_t
 
gøph_add_œbñ
(
gøph
 *
g
, c⁄° *
œbñ
);

55 
gøph_add_d©a
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
, c⁄° 
vÆue
);

57 
gøph_add_xy_d©a
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
,

58 c⁄° 
x
, c⁄° 
y
, c⁄° *
toﬁtù
);

61 
gøph_£t_cﬁ‹
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
,

62 
ªd
, 
gªí
, 
blue
);

63 
	#INVISIBLE_COLOR
 (-1.0)

	)

70 
gøph_‰ì
(
gøph
 *
bg
);

73 (*
	tgøph_axis_unô_ch™ge_ˇŒback
)(
	tgøph
 *
	tg
, 
	tpowî_of_ãn
);

74 
	`gøph_x_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
);

75 
	`gøph_y_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
);

83 
	`gøph_add_exåa_•a˚
(
gøph
 *
g
, 
À·_≥r˚¡
, 
right_≥r˚¡
,

84 
t›_≥r˚¡
, 
bŸtom_≥r˚¡
);

89 
	`gøph_has_toﬁtùs
(
gøph
 *
g
);

90 c⁄° *
	`gøph_föd_toﬁtù
(
gøph
 *
g
, 
x
, 
y
);

91 
	`gøph_c⁄èös_xy
(
gøph
 *
p
, 
x
, 
y
);

93 
	`gøph_£t_ba£_off£t
(
gøph
 *
g
, 
ba£_off£t
);

94 
	`gøph_£t_gøph_Æl_zî€s
(
gøph
 *
g
, 
£t
);

96 
	`gøph_˛ór_vÆues
(
gøph
 *
g
);

	@/home/ysjin/Desktop/fio/fio/hash.h

1 #i‚de‡
_LINUX_HASH_H


2 
	#_LINUX_HASH_H


	)

4 
	~<öây≥s.h
>

5 
	~"¨ch/¨ch.h
"

21 #i‡
BITS_PER_LONG
 == 32

23 
	#GOLDEN_RATIO_PRIME
 0x9e370001UL

	)

24 #ñi‡
BITS_PER_LONG
 == 64

26 
	#GOLDEN_RATIO_PRIME
 0x9e37fffffffc0001UL

	)

28 #îr‹ 
Deföe
 
GOLDEN_RATIO_PRIME
 
your
 
w‹dsize
.

44 
	#GOLDEN_RATIO_32
 0x61C88647

	)

45 
	#GOLDEN_RATIO_64
 0x61C8864680B583EBuŒ

	)

47 
ölöe
 
	$__hash_l⁄g
(
uöt64_t
 
vÆ
)

49 
uöt64_t
 
hash
 = 
vÆ
;

51 #i‡
BITS_PER_LONG
 == 64

52 
hash
 *
GOLDEN_RATIO_64
;

55 
uöt64_t
 
n
 = 
hash
;

56 
n
 <<= 18;

57 
hash
 -
n
;

58 
n
 <<= 33;

59 
hash
 -
n
;

60 
n
 <<= 3;

61 
hash
 +
n
;

62 
n
 <<= 3;

63 
hash
 -
n
;

64 
n
 <<= 4;

65 
hash
 +
n
;

66 
n
 <<= 2;

67 
hash
 +
n
;

70  
hash
;

71 
	}
}

73 
ölöe
 
	$hash_l⁄g
(
vÆ
, 
bôs
)

76  
	`__hash_l⁄g
(
vÆ
Ë>> (
BITS_PER_LONG
 - 
bôs
);

77 
	}
}

79 
ölöe
 
uöt64_t
 
	$__hash_u64
(
uöt64_t
 
vÆ
)

81  
vÆ
 * 
GOLDEN_RATIO_64
;

82 
	}
}

84 
ölöe
 
	$hash_±r
(*
±r
, 
bôs
)

86  
	`hash_l⁄g
((
uöçå_t
)
±r
, 
bôs
);

87 
	}
}

93 
	#JHASH_INITVAL
 
GOLDEN_RATIO_32


	)

95 
ölöe
 
uöt32_t
 
	$rﬁ32
(
uöt32_t
 
w‹d
, uöt32_à
shi·
)

97  (
w‹d
 << 
shi·
) | (word >> (32 - shift));

98 
	}
}

101 
	#__jhash_mix
(
a
, 
b
, 
c
) \

103 
a
 -
c
;á ^
	`rﬁ32
(c, 4); c +
b
; \

104 
b
 -
a
; b ^
	`rﬁ32
◊, 6);á +
c
; \

105 
c
 -
b
; c ^
	`rﬁ32
(b, 8); b +
a
; \

106 
a
 -
c
;á ^
	`rﬁ32
(c, 16); c +
b
; \

107 
b
 -
a
; b ^
	`rﬁ32
◊, 19);á +
c
; \

108 
c
 -
b
; c ^
	`rﬁ32
(b, 4); b +
a
; \

109 }

	)

112 
	#__jhash_föÆ
(
a
, 
b
, 
c
) \

114 
c
 ^
b
; c -
	`rﬁ32
(b, 14); \

115 
a
 ^
c
;á -
	`rﬁ32
(c, 11); \

116 
b
 ^
a
; b -
	`rﬁ32
(a, 25); \

117 
c
 ^
b
; c -
	`rﬁ32
(b, 16); \

118 
a
 ^
c
;á -
	`rﬁ32
(c, 4); \

119 
b
 ^
a
; b -
	`rﬁ32
(a, 14); \

120 
c
 ^
b
; c -
	`rﬁ32
(b, 24); \

121 }

	)

123 
ölöe
 
uöt32_t
 
	$jhash
(c⁄° *
key
, 
uöt32_t
 
Àngth
, uöt32_à
öôvÆ
)

125 c⁄° 
uöt8_t
 *
k
 = 
key
;

126 
uöt32_t
 
a
, 
b
, 
c
;

129 
a
 = 
b
 = 
c
 = 
JHASH_INITVAL
 + 
Àngth
 + 
öôvÆ
;

132 
Àngth
 > 12) {

133 
a
 +*
k
;

134 
b
 +*(
k
 + 4);

135 
c
 +*(
k
 + 8);

136 
	`__jhash_mix
(
a
, 
b
, 
c
);

137 
Àngth
 -= 12;

138 
k
 += 12;

143 
Àngth
) {

144 12: 
c
 +(
uöt32_t
Ë
k
[11] << 24;

145 11: 
c
 +(
uöt32_t
Ë
k
[10] << 16;

146 10: 
c
 +(
uöt32_t
Ë
k
[9] << 8;

147 9: 
c
 +
k
[8];

148 8: 
b
 +(
uöt32_t
Ë
k
[7] << 24;

149 7: 
b
 +(
uöt32_t
Ë
k
[6] << 16;

150 6: 
b
 +(
uöt32_t
Ë
k
[5] << 8;

151 5: 
b
 +
k
[4];

152 4: 
a
 +(
uöt32_t
Ë
k
[3] << 24;

153 3: 
a
 +(
uöt32_t
Ë
k
[2] << 16;

154 2: 
a
 +(
uöt32_t
Ë
k
[1] << 8;

155 1: 
a
 +
k
[0];

156 
	`__jhash_föÆ
(
a
, 
b
, 
c
);

161  
c
;

162 
	}
}

	@/home/ysjin/Desktop/fio/fio/helper_thread.c

1 
	~"fio.h
"

2 
	~"smÆloc.h
"

3 
	~"hñ≥r_thªad.h
"

4 
	~"°ódy°©e.h
"

6 
	shñ≥r_d©a
 {

7 vﬁ©ûê
	mexô
;

8 vﬁ©ûê
	mª£t
;

9 vﬁ©ûê
	mdo_°©
;

10 
sk_out
 *
	msk_out
;

11 
±hªad_t
 
	mthªad
;

12 
±hªad_muãx_t
 
	mlock
;

13 
±hªad_c⁄d_t
 
	mc⁄d
;

14 
fio_muãx
 *
	m°¨tup_muãx
;

15 } *
	ghñ≥r_d©a
;

17 
	$hñ≥r_thªad_de°roy
()

19 
	`±hªad_c⁄d_de°roy
(&
hñ≥r_d©a
->
c⁄d
);

20 
	`±hªad_muãx_de°roy
(&
hñ≥r_d©a
->
lock
);

21 
	`s‰ì
(
hñ≥r_d©a
);

22 
	}
}

24 
	$hñ≥r_ª£t
()

26 i‡(!
hñ≥r_d©a
)

29 
	`±hªad_muãx_lock
(&
hñ≥r_d©a
->
lock
);

31 i‡(!
hñ≥r_d©a
->
ª£t
) {

32 
hñ≥r_d©a
->
ª£t
 = 1;

33 
	`±hªad_c⁄d_sig«l
(&
hñ≥r_d©a
->
c⁄d
);

36 
	`±hªad_muãx_u∆ock
(&
hñ≥r_d©a
->
lock
);

37 
	}
}

39 
	$hñ≥r_do_°©
()

41 i‡(!
hñ≥r_d©a
)

44 
	`±hªad_muãx_lock
(&
hñ≥r_d©a
->
lock
);

45 
hñ≥r_d©a
->
do_°©
 = 1;

46 
	`±hªad_c⁄d_sig«l
(&
hñ≥r_d©a
->
c⁄d
);

47 
	`±hªad_muãx_u∆ock
(&
hñ≥r_d©a
->
lock
);

48 
	}
}

50 
boﬁ
 
	$hñ≥r_should_exô
()

52 i‡(!
hñ≥r_d©a
)

53  
åue
;

55  
hñ≥r_d©a
->
exô
;

56 
	}
}

58 
	$hñ≥r_thªad_exô
()

60 *
ªt
;

62 
	`±hªad_muãx_lock
(&
hñ≥r_d©a
->
lock
);

63 
hñ≥r_d©a
->
exô
 = 1;

64 
	`±hªad_c⁄d_sig«l
(&
hñ≥r_d©a
->
c⁄d
);

65 
	`±hªad_muãx_u∆ock
(&
hñ≥r_d©a
->
lock
);

67 
	`±hªad_joö
(
hñ≥r_d©a
->
thªad
, &
ªt
);

68 
	}
}

70 *
	$hñ≥r_thªad_maö
(*
d©a
)

72 
hñ≥r_d©a
 *
hd
 = 
d©a
;

73 
m£c_to_√xt_evít
, 
√xt_log
, 
√xt_ss
 = 
STEADYSTATE_MSEC
;

74 
timevÆ
 
tv
;

75 
time•ec
 
ts
, 
œ°_du
, 
œ°_ss
;

76 
ªt
 = 0;

78 
	`sk_out_assign
(
hd
->
sk_out
);

80 
	`gëtimeofday
(&
tv
, 
NULL
);

81 
ts
.
tv_£c
 = 
tv
.tv_sec;

82 
ts
.
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

83 
	`mem˝y
(&
œ°_du
, &
ts
, (ts));

84 
	`mem˝y
(&
œ°_ss
, &
ts
, (ts));

86 
	`fio_muãx_up
(
hd
->
°¨tup_muãx
);

88 
m£c_to_√xt_evít
 = 
DISK_UTIL_MSEC
;

89 !
ªt
 && !
hd
->
exô
) {

90 
uöt64_t
 
sö˚_du
, 
sö˚_ss
 = 0;

92 
	`time•ec_add_m£c
(&
ts
, 
m£c_to_√xt_evít
);

94 
	`±hªad_muãx_lock
(&
hd
->
lock
);

95 
	`±hªad_c⁄d_timedwaô
(&
hd
->
c⁄d
, &hd->
lock
, &
ts
);

97 
	`gëtimeofday
(&
tv
, 
NULL
);

98 
ts
.
tv_£c
 = 
tv
.tv_sec;

99 
ts
.
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

101 i‡(
hd
->
ª£t
) {

102 
	`mem˝y
(&
œ°_du
, &
ts
, (ts));

103 
	`mem˝y
(&
œ°_ss
, &
ts
, (ts));

104 
hd
->
ª£t
 = 0;

107 
	`±hªad_muãx_u∆ock
(&
hd
->
lock
);

109 
sö˚_du
 = 
	`mtime_sö˚
(&
œ°_du
, &
ts
);

110 i‡(
sö˚_du
 >
DISK_UTIL_MSEC
 || DISK_UTIL_MSEC - since_du < 10) {

111 
ªt
 = 
	`upd©e_io_ticks
();

112 
	`time•ec_add_m£c
(&
œ°_du
, 
DISK_UTIL_MSEC
);

113 
m£c_to_√xt_evít
 = 
DISK_UTIL_MSEC
;

114 i‡(
sö˚_du
 >
DISK_UTIL_MSEC
)

115 
m£c_to_√xt_evít
 -(
sö˚_du
 - 
DISK_UTIL_MSEC
);

117 
m£c_to_√xt_evít
 = 
DISK_UTIL_MSEC
 - 
sö˚_du
;

119 i‡(
hd
->
do_°©
) {

120 
hd
->
do_°©
 = 0;

121 
	`__show_ru¬ög_run_°©s
();

124 
√xt_log
 = 
	`ˇlc_log_ßm∂es
();

125 i‡(!
√xt_log
)

126 
√xt_log
 = 
DISK_UTIL_MSEC
;

128 i‡(
°ódy°©e_íabÀd
) {

129 
sö˚_ss
 = 
	`mtime_sö˚
(&
œ°_ss
, &
ts
);

130 i‡(
sö˚_ss
 >
STEADYSTATE_MSEC
 || STEADYSTATE_MSEC - since_ss < 10) {

131 
	`°ódy°©e_check
();

132 
	`time•ec_add_m£c
(&
œ°_ss
, 
sö˚_ss
);

133 i‡(
sö˚_ss
 > 
STEADYSTATE_MSEC
)

134 
√xt_ss
 = 
STEADYSTATE_MSEC
 - (
sö˚_ss
 - STEADYSTATE_MSEC);

136 
√xt_ss
 = 
STEADYSTATE_MSEC
;

138 
√xt_ss
 = 
STEADYSTATE_MSEC
 - 
sö˚_ss
;

141 
m£c_to_√xt_evít
 = 
	`mö
(mö(
√xt_log
, m£c_to_√xt_evít), 
√xt_ss
);

142 
	`d¥öt
(
FD_HELPERTHREAD
, "sö˚_ss: %Œu,Çext_ss: %u,Çext_log: %u, m£c_to_√xt_evít: %u\n", ()
sö˚_ss
, 
√xt_ss
, 
√xt_log
, 
m£c_to_√xt_evít
);

144 i‡(!
is_backíd
)

145 
	`¥öt_thªad_°©us
();

148 
	`fio_wrôeout_logs
(
Ál£
);

150 
	`sk_out_dr›
();

151  
NULL
;

152 
	}
}

154 
	$hñ≥r_thªad_¸óã
(
fio_muãx
 *
°¨tup_muãx
, 
sk_out
 *sk_out)

156 
hñ≥r_d©a
 *
hd
;

157 
ªt
;

159 
hd
 = 
	`sˇŒoc
(1, (*hd));

161 
	`£tup_disk_utû
();

162 
	`°ódy°©e_£tup
();

164 
hd
->
sk_out
 = sk_out;

166 
ªt
 = 
	`muãx_c⁄d_öô_psh¨ed
(&
hd
->
lock
, &hd->
c⁄d
);

167 i‡(
ªt
)

170 
hd
->
°¨tup_muãx
 = startup_mutex;

172 
ªt
 = 
	`±hªad_¸óã
(&
hd
->
thªad
, 
NULL
, 
hñ≥r_thªad_maö
, hd);

173 i‡(
ªt
) {

174 
	`log_îr
("C™'à¸óã hñ≥∏thªad: %s\n", 
	`°ªº‹
(
ªt
));

178 
hñ≥r_d©a
 = 
hd
;

180 
	`d¥öt
(
FD_MUTEX
, "wait on startup_mutex\n");

181 
	`fio_muãx_down
(
°¨tup_muãx
);

182 
	`d¥öt
(
FD_MUTEX
, "done waiting on startup_mutex\n");

184 
	}
}

	@/home/ysjin/Desktop/fio/fio/helper_thread.h

1 #i‚de‡
FIO_HELPER_THREAD_H


2 
	#FIO_HELPER_THREAD_H


	)

4 
hñ≥r_ª£t
();

5 
hñ≥r_do_°©
();

6 
boﬁ
 
hñ≥r_should_exô
();

7 
hñ≥r_thªad_de°roy
();

8 
hñ≥r_thªad_exô
();

9 
hñ≥r_thªad_¸óã
(
fio_muãx
 *, 
sk_out
 *);

	@/home/ysjin/Desktop/fio/fio/helpers.c

1 
	~<°dlib.h
>

2 
	~<î∫o.h
>

3 
	~<sys/sockë.h
>

4 
	~<sys/time.h
>

5 
	~<√töë/ö.h
>

6 
	~<uni°d.h
>

8 
	~"compûî/compûî.h
"

9 
	~"¨ch/¨ch.h
"

10 
	~"os/os.h
"

12 #i‚de‡
CONFIG_LINUX_FALLOCATE


13 
	$ÁŒoˇã
(
fd
, 
mode
, 
off_t
 
off£t
, off_à
Àn
)

15 
î∫o
 = 
ENOSYS
;

17 
	}
}

20 #i‚de‡
CONFIG_POSIX_FALLOCATE


21 
	$posix_ÁŒoˇã
(
fd
, 
off_t
 
off£t
, off_à
Àn
)

24 
	}
}

27 #i‚de‡
CONFIG_SYNC_FILE_RANGE


28 
	$sync_fûe_ønge
(
fd
, 
off64_t
 
off£t
, off64_à
nbyãs
, 
Êags
)

30 
î∫o
 = 
ENOSYS
;

32 
	}
}

35 #i‚de‡
CONFIG_POSIX_FADVISE


36 
	$posix_Ádvi£
(
fd
, 
off_t
 
off£t
, off_à
Àn
, 
advi˚
)

39 
	}
}

	@/home/ysjin/Desktop/fio/fio/helpers.h

1 #i‚de‡
FIO_HELPERS_H


2 
	#FIO_HELPERS_H


	)

4 
	~"compûî/compûî.h
"

6 
	~<sys/ty≥s.h
>

7 
	~<time.h
>

9 
ÁŒoˇã
(
fd
, 
mode
, 
off_t
 
off£t
, off_à
Àn
);

10 
posix_ÁŒoˇã
(
fd
, 
off_t
 
off£t
, off_à
Àn
);

11 
sync_fûe_ønge
(
fd
, 
off64_t
 
off£t
, off64_à
nbyãs
,

12 
Êags
);

13 
posix_Ádvi£
(
fd
, 
off_t
 
off£t
, off_à
Àn
, 
advi˚
);

	@/home/ysjin/Desktop/fio/fio/idletime.c

1 
	~<m©h.h
>

2 
	~"js⁄.h
"

3 
	~"idÀtime.h
"

5 vﬁ©ûê
idÀ_¥of_comm⁄
 
	gùc
;

11 
	$ˇlibøã_unô
(*
d©a
)

13 
t
, 
i
, 
j
, 
k
;

14 
time•ec
 
çs
;

15 
tunô
 = 0.0;

17 
i
 = 0; i < 
CALIBRATE_RUNS
; i++) {

19 
	`fio_gëtime
(&
çs
, 
NULL
);

21 
j
 = 0; j < 
CALIBRATE_SCALE
; j++) {

23 
k
=0; k < 
∑ge_size
; k++) {

24 
d©a
[(
k
 + 
j
Ë% 
∑ge_size
] = k % 256;

29 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_PROF_STOP
)

34 
t
 = 
	`utime_sö˚_now
(&
çs
);

35 i‡(!
t
)

39 i‡((
i
 =0Ë|| (()
t
 < 
tunô
))

40 
tunô
 = ()
t
;

43  
tunô
 / 
CALIBRATE_SCALE
;

44 
	}
}

46 
	$‰ì_˝u_afföôy
(
idÀ_¥of_thªad
 *
ùt
)

48 #i‡
	`deföed
(
FIO_HAVE_CPU_AFFINITY
)

49 
	`fio_˝u£t_exô
(&
ùt
->
˝u_mask
);

51 
	}
}

53 
	$£t_˝u_afföôy
(
idÀ_¥of_thªad
 *
ùt
)

55 #i‡
	`deföed
(
FIO_HAVE_CPU_AFFINITY
)

56 i‡(
	`fio_˝u£t_öô
(&
ùt
->
˝u_mask
)) {

57 
	`log_îr
("fio: cpuset init failed\n");

61 
	`fio_˝u_£t
(&
ùt
->
˝u_mask
, i±->
˝u
);

63 i‡(
	`fio_£èfföôy
(
	`gëtid
(), 
ùt
->
˝u_mask
)) {

64 
	`log_îr
("fio: fio_setaffinity failed\n");

65 
	`fio_˝u£t_exô
(&
ùt
->
˝u_mask
);

71 
	`log_îr
("fio: fio_setaffinityÇot supported\n");

74 
	}
}

76 *
	$idÀ_¥of_thªad_‚
(*
d©a
)

78 
ªtvÆ
;

79 
j
, 
k
;

80 
idÀ_¥of_thªad
 *
ùt
 = 
d©a
;

83 
	`±hªad_muãx_lock
(&
ùt
->
öô_lock
);

86 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_ABORT
) {

87 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

88  
NULL
;

91 
ªtvÆ
 = 
	`£t_˝u_afföôy
(
ùt
);

92 i‡(
ªtvÆ
 == -1) {

93 
ùt
->
°©e
 = 
TD_EXITED
;

94 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

95  
NULL
;

98 
ùt
->
ˇli_time
 = 
	`ˇlibøã_unô
(ùt->
d©a
);

101 #i‡
	`deföed
(
CONFIG_SCHED_IDLE
)

102 i‡((
ªtvÆ
 = 
	`fio_£t_sched_idÀ
()))

103 
	`log_îr
("fio: fio_set_sched_idle failed\n");

105 
ªtvÆ
 = -1;

106 
	`log_îr
("fio: fio_set_sched_idleÇot supported\n");

108 i‡(
ªtvÆ
 == -1) {

109 
ùt
->
°©e
 = 
TD_EXITED
;

110 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

111 
do_exô
;

114 
ùt
->
°©e
 = 
TD_INITIALIZED
;

117 
	`±hªad_c⁄d_sig«l
(&
ùt
->
c⁄d
);

118 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

121 
	`±hªad_muãx_lock
(&
ùt
->
°¨t_lock
);

124 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_ABORT
) {

125 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

126 
do_exô
;

130 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_CALI_STOP
) {

131 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

132 
do_exô
;

135 
	`fio_gëtime
(&
ùt
->
çs
, 
NULL
);

136 
ùt
->
°©e
 = 
TD_RUNNING
;

138 
j
 = 0;

140 
k
 = 0; k < 
∑ge_size
; k++) {

141 
ùt
->
d©a
[(
k
 + 
j
Ë% 
∑ge_size
] = k % 256;

142 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_PROF_STOP
) {

143 
	`fio_gëtime
(&
ùt
->
çe
, 
NULL
);

144 
idÀ_¥of_d⁄e
;

147 
j
++;

150 
idÀ_¥of_d⁄e
:

152 
ùt
->
lo›s
 = 
j
 + (Ë
k
 / 
∑ge_size
;

153 
ùt
->
°©e
 = 
TD_EXITED
;

154 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

156 
do_exô
:

157 
	`‰ì_˝u_afföôy
(
ùt
);

158  
NULL
;

159 
	}
}

162 
	$ˇlibøti⁄_°©s
()

164 
i
;

165 
sum
 = 0.0, 
v¨
 = 0.0;

166 
idÀ_¥of_thªad
 *
ùt
;

168 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

169 
ùt
 = &
ùc
.
ùts
[
i
];

170 
sum
 +
ùt
->
ˇli_time
;

173 
ùc
.
ˇli_món
 = 
sum
/ùc.
ƒ_˝us
;

175 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

176 
ùt
 = &
ùc
.
ùts
[
i
];

177 
v¨
 +
	`pow
(
ùt
->
ˇli_time
-
ùc
.
ˇli_món
, 2);

180 
ùc
.
ˇli_°ddev
 = 
	`sqπ
(
v¨
/(ùc.
ƒ_˝us
-1));

181 
	}
}

183 
	$fio_idÀ_¥of_öô
()

185 
i
, 
ªt
;

186 
time•ec
 
ts
;

187 
±hªad_©å_t
 
èâr
;

188 
idÀ_¥of_thªad
 *
ùt
;

190 
ùc
.
ƒ_˝us
 = 
	`˝us_⁄löe
();

191 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_OK
;

193 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

196 i‡((
ªt
 = 
	`±hªad_©å_öô
(&
èâr
))) {

197 
	`log_îr
("fio:Öthªad_©å_öô %s\n", 
	`°ªº‹
(
ªt
));

200 i‡((
ªt
 = 
	`±hªad_©å_£tsc›e
(&
èâr
, 
PTHREAD_SCOPE_SYSTEM
))) {

201 
	`log_îr
("fio:Öthªad_©å_£tsc›ê%s\n", 
	`°ªº‹
(
ªt
));

205 
ùc
.
ùts
 = 
	`mÆloc
(ùc.
ƒ_˝us
 * (
idÀ_¥of_thªad
));

206 i‡(!
ùc
.
ùts
) {

207 
	`log_îr
("fio: malloc failed\n");

211 
ùc
.
buf
 = 
	`mÆloc
(ùc.
ƒ_˝us
 * 
∑ge_size
);

212 i‡(!
ùc
.
buf
) {

213 
	`log_îr
("fio: malloc failed\n");

214 
	`‰ì
(
ùc
.
ùts
);

222 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

223 
ùt
 = &
ùc
.
ùts
[
i
];

225 
ùt
->
˝u
 = 
i
;

226 
ùt
->
°©e
 = 
TD_NOT_CREATED
;

227 
ùt
->
d©a
 = (*)(
ùc
.
buf
 + 
∑ge_size
 * 
i
);

229 i‡((
ªt
 = 
	`±hªad_muãx_öô
(&
ùt
->
öô_lock
, 
NULL
))) {

230 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

231 
	`log_îr
("fio:Öthªad_muãx_öô %s\n", 
	`°ªº‹
(
ªt
));

235 i‡((
ªt
 = 
	`±hªad_muãx_öô
(&
ùt
->
°¨t_lock
, 
NULL
))) {

236 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

237 
	`log_îr
("fio:Öthªad_muãx_öô %s\n", 
	`°ªº‹
(
ªt
));

241 i‡((
ªt
 = 
	`±hªad_c⁄d_öô
(&
ùt
->
c⁄d
, 
NULL
))) {

242 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

243 
	`log_îr
("fio:Öthªad_c⁄d_öô %s\n", 
	`°ªº‹
(
ªt
));

248 
	`±hªad_muãx_lock
(&
ùt
->
öô_lock
);

251 
	`±hªad_muãx_lock
(&
ùt
->
°¨t_lock
);

253 i‡((
ªt
 = 
	`±hªad_¸óã
(&
ùt
->
thªad
, &
èâr
, 
idÀ_¥of_thªad_‚
, ipt))) {

254 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

255 
	`log_îr
("fio:Öthªad_¸óã %s\n", 
	`°ªº‹
(
ªt
));

258 
ùt
->
°©e
 = 
TD_CREATED
;

260 i‡((
ªt
 = 
	`±hªad_dëach
(
ùt
->
thªad
))) {

262 
	`log_îr
("fio:Öthªad_dëach %s\n", 
	`°ªº‹
(
ªt
));

270 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

271 
ùt
 = &
ùc
.
ùts
[
i
];

272 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

275 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_ABORT
)

279 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

280 
ùt
 = &
ùc
.
ùts
[
i
];

281 
	`±hªad_muãx_lock
(&
ùt
->
öô_lock
);

282 (
ùt
->
°©e
 !
TD_EXITED
) &&

283 (
ùt
->
°©e
!=
TD_INITIALIZED
)) {

284 
	`fio_gëtime
(&
ts
, 
NULL
);

285 
ts
.
tv_£c
 += 1;

286 
	`±hªad_c⁄d_timedwaô
(&
ùt
->
c⁄d
, &ùt->
öô_lock
, &
ts
);

288 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

294 i‡(
ùt
->
°©e
 =
TD_EXITED
)

295 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

298 i‡(
ùc
.
°©us
 !
IDLE_PROF_STATUS_ABORT
)

299 
	`ˇlibøti⁄_°©s
();

301 
ùc
.
ˇli_món
 = ipc.
ˇli_°ddev
 = 0.0;

303 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_CALI
)

304 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_CALI_STOP
;

305 
	}
}

307 
	$fio_idÀ_¥of_°¨t
()

309 
i
;

310 
idÀ_¥of_thªad
 *
ùt
;

312 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

316 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

317 
ùt
 = &
ùc
.
ùts
[
i
];

318 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

320 
	}
}

322 
	$fio_idÀ_¥of_°›
()

324 
i
;

325 
uöt64_t
 
ru¡
;

326 
time•ec
 
ts
;

327 
idÀ_¥of_thªad
 *
ùt
;

329 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

332 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_CALI
)

335 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_PROF_STOP
;

338 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

339 
ùt
 = &
ùc
.
ùts
[
i
];

340 
	`±hªad_muãx_lock
(&
ùt
->
°¨t_lock
);

341 (
ùt
->
°©e
 !
TD_EXITED
) &&

342 (
ùt
->
°©e
!=
TD_NOT_CREATED
)) {

343 
	`fio_gëtime
(&
ts
, 
NULL
);

344 
ts
.
tv_£c
 += 1;

346 
	`±hªad_c⁄d_timedwaô
(&
ùt
->
c⁄d
, &ùt->
°¨t_lock
, &
ts
);

348 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

351 i‡(
ùc
.
ˇli_món
 != 0.0) {

352 
ru¡
 = 
	`utime_sö˚
(&
ùt
->
çs
, &ùt->
çe
);

353 i‡(
ru¡
)

354 
ùt
->
idÀ√ss
 = i±->
lo›s
 * 
ùc
.
ˇli_món
 / 
ru¡
;

356 
ùt
->
idÀ√ss
 = 0.0;

358 
ùt
->
idÀ√ss
 = 0.0;

365 
	}
}

371 
	$fio_idÀ_¥of_˝u_°©
(
˝u
)

373 
i
, 
ƒ_˝us
 = 
ùc
.nr_cpus;

374 
idÀ_¥of_thªad
 *
ùt
;

375 
p
 = 0.0;

377 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

380 i‡((
˝u
 >
ƒ_˝us
) || (cpu < -1)) {

381 
	`log_îr
("fio: idleÖrofiling invalid cpu index\n");

385 i‡(
˝u
 == -1) {

386 
i
 = 0; i < 
ƒ_˝us
; i++) {

387 
ùt
 = &
ùc
.
ùts
[
i
];

388 
p
 +
ùt
->
idÀ√ss
;

390 
p
 /
ƒ_˝us
;

392 
ùt
 = &
ùc
.
ùts
[
˝u
];

393 
p
 = 
ùt
->
idÀ√ss
;

396  
p
 * 100.0;

397 
	}
}

399 
	$fio_idÀ_¥of_˛ónup
()

401 i‡(
ùc
.
ùts
) {

402 
	`‰ì
(
ùc
.
ùts
);

403 
ùc
.
ùts
 = 
NULL
;

406 i‡(
ùc
.
buf
) {

407 
	`‰ì
(
ùc
.
buf
);

408 
ùc
.
buf
 = 
NULL
;

410 
	}
}

412 
	$fio_idÀ_¥of_∑r£_›t
(c⁄° *
¨gs
)

414 
ùc
.
›t
 = 
IDLE_PROF_OPT_NONE
;

416 i‡(!
¨gs
) {

417 
	`log_îr
("fio:Émpty idle-prof option string\n");

421 #i‡
	`deföed
(
FIO_HAVE_CPU_AFFINITY
Ë&& deföed(
CONFIG_SCHED_IDLE
)

422 i‡(
	`°rcmp
("ˇlibøã", 
¨gs
) == 0) {

423 
ùc
.
›t
 = 
IDLE_PROF_OPT_CALI
;

424 
	`fio_idÀ_¥of_öô
();

425 
	`fio_idÀ_¥of_°¨t
();

426 
	`fio_idÀ_¥of_°›
();

427 
	`show_idÀ_¥of_°©s
(
FIO_OUTPUT_NORMAL
, 
NULL
, NULL);

429 } i‡(
	`°rcmp
("sy°em", 
¨gs
) == 0) {

430 
ùc
.
›t
 = 
IDLE_PROF_OPT_SYSTEM
;

432 } i‡(
	`°rcmp
("≥r˝u", 
¨gs
) == 0) {

433 
ùc
.
›t
 = 
IDLE_PROF_OPT_PERCPU
;

436 
	`log_îr
("fio: inc‹ª˘ idÀ-¥o‡›ti⁄: %s\n", 
¨gs
);

440 
	`log_îr
("fio: idle-profÇot supported onÅhisÖlatform\n");

443 
	}
}

445 
	$show_idÀ_¥of_°©s
(
ouçut
, 
js⁄_obje˘
 *
∑ª¡
,

446 
buf_ouçut
 *
out
)

448 
i
, 
ƒ_˝us
 = 
ùc
.nr_cpus;

449 
js⁄_obje˘
 *
tmp
;

450 
s
[
MAX_CPU_STR_LEN
];

452 i‡(
ouçut
 =
FIO_OUTPUT_NORMAL
) {

453 i‡(
ùc
.
›t
 > 
IDLE_PROF_OPT_CALI
)

454 
	`log_buf
(
out
, "\nCPU idleness:\n");

455 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_CALI
)

456 
	`log_buf
(
out
, "CPU idleness:\n");

458 i‡(
ùc
.
›t
 >
IDLE_PROF_OPT_SYSTEM
)

459 
	`log_buf
(
out
, " sy°em: %3.2f%%\n", 
	`fio_idÀ_¥of_˝u_°©
(-1));

461 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_PERCPU
) {

462 
	`log_buf
(
out
, "Öî˝u: %3.2f%%", 
	`fio_idÀ_¥of_˝u_°©
(0));

463 
i
 = 1; i < 
ƒ_˝us
; i++)

464 
	`log_buf
(
out
, ", %3.2f%%", 
	`fio_idÀ_¥of_˝u_°©
(
i
));

465 
	`log_buf
(
out
, "\n");

468 i‡(
ùc
.
›t
 >
IDLE_PROF_OPT_CALI
) {

469 
	`log_buf
(
out
, " unô w‹k: món=%3.2fus,", 
ùc
.
ˇli_món
);

470 
	`log_buf
(
out
, " stddev=%3.2f\n", 
ùc
.
ˇli_°ddev
);

474 i‡(
ùc
.
›t
 !
IDLE_PROF_OPT_NONE
)

475 
	`fio_idÀ_¥of_˛ónup
();

480 i‡((
ùc
.
›t
 !
IDLE_PROF_OPT_NONE
Ë&& (
ouçut
 & 
FIO_OUTPUT_JSON
)) {

481 i‡(!
∑ª¡
)

484 
tmp
 = 
	`js⁄_¸óã_obje˘
();

485 i‡(!
tmp
)

488 
	`js⁄_obje˘_add_vÆue_obje˘
(
∑ª¡
, "˝u_idÀ√ss", 
tmp
);

489 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "sy°em", 
	`fio_idÀ_¥of_˝u_°©
(-1));

491 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_PERCPU
) {

492 
i
 = 0; i < 
ƒ_˝us
; i++) {

493 
	`¢¥ötf
(
s
, 
MAX_CPU_STR_LEN
, "˝u-%d", 
i
);

494 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
s
, 
	`fio_idÀ_¥of_˝u_°©
(
i
));

498 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "unô_món", 
ùc
.
ˇli_món
);

499 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "unô_°ddev", 
ùc
.
ˇli_°ddev
);

501 
	`fio_idÀ_¥of_˛ónup
();

503 
	}
}

	@/home/ysjin/Desktop/fio/fio/idletime.h

1 #i‚de‡
FIO_IDLETIME_H


2 
	#FIO_IDLETIME_H


	)

4 
	~"fio.h
"

5 
	~"lib/ouçut_buf„r.h
"

7 
	#CALIBRATE_RUNS
 10

	)

8 
	#CALIBRATE_SCALE
 1000

	)

9 
	#MAX_CPU_STR_LEN
 32

	)

12 
	mIDLE_PROF_OPT_NONE
,

13 
	mIDLE_PROF_OPT_CALI
,

14 
	mIDLE_PROF_OPT_SYSTEM
,

15 
	mIDLE_PROF_OPT_PERCPU


19 
	mIDLE_PROF_STATUS_OK
,

20 
	mIDLE_PROF_STATUS_CALI_STOP
,

21 
	mIDLE_PROF_STATUS_PROF_STOP
,

22 
	mIDLE_PROF_STATUS_ABORT


25 
	sidÀ_¥of_thªad
 {

26 
±hªad_t
 
	mthªad
;

27 
	m˝u
;

28 
	m°©e
;

29 
time•ec
 
	mçs
;

30 
time•ec
 
	mçe
;

31 
	mˇli_time
;

32 
	mlo›s
;

33 
	midÀ√ss
;

34 *
	md©a
;

35 
±hªad_c⁄d_t
 
	mc⁄d
;

36 
±hªad_muãx_t
 
	möô_lock
;

37 
±hªad_muãx_t
 
	m°¨t_lock
;

39 
os_˝u_mask_t
 
	m˝u_mask
;

42 
	sidÀ_¥of_comm⁄
 {

43 
idÀ_¥of_thªad
 *
	mùts
;

44 
	mƒ_˝us
;

45 
	m°©us
;

46 
	m›t
;

47 
	mˇli_món
;

48 
	mˇli_°ddev
;

49 *
	mbuf
;

52 
fio_idÀ_¥of_∑r£_›t
(const *);

54 
fio_idÀ_¥of_öô
();

55 
fio_idÀ_¥of_°¨t
();

56 
fio_idÀ_¥of_°›
();

58 
show_idÀ_¥of_°©s
(, 
js⁄_obje˘
 *, 
buf_ouçut
 *);

	@/home/ysjin/Desktop/fio/fio/init.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<uni°d.h
>

7 
	~<f˙é.h
>

8 
	~<˘y≥.h
>

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

11 
	~<sys/ùc.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<dlf˙.h
>

16 
	~"fio.h
"

17 #i‚de‡
FIO_NO_HAVE_SHM_H


18 
	~<sys/shm.h
>

21 
	~"∑r£.h
"

22 
	~"smÆloc.h
"

23 
	~"fûehash.h
"

24 
	~"vîify.h
"

25 
	~"¥ofûe.h
"

26 
	~"£rvî.h
"

27 
	~"idÀtime.h
"

28 
	~"fûñock.h
"

29 
	~"°ódy°©e.h
"

31 
	~"o¶ib/gë›t.h
"

32 
	~"o¶ib/°rˇ£°r.h
"

34 
	~"¸c/ã°.h
"

35 
	~"lib/pow2.h
"

36 
	~"lib/mem˝y.h
"

38 c⁄° 
	gfio_vîsi⁄_°rög
[] = 
FIO_VERSION
;

40 
	#FIO_RANDSEED
 (0xb1899bedUL)

	)

42 **
	göi_fûe
;

43 
	gmax_jobs
 = 
FIO_MAX_JOBS
;

44 
	gdump_cmdlöe
;

45 
	g∑r£_⁄ly
;

47 
thªad_d©a
 
	gdef_thªad
;

48 
thªad_d©a
 *
	gthªads
 = 
NULL
;

49 **
	gjob_£˘i⁄s
;

50 
	gƒ_job_£˘i⁄s
;

52 
	gexôÆl_⁄_ãrmö©e
 = 0;

53 
	gouçut_f‹m©
 = 
FIO_OUTPUT_NORMAL
;

54 
	gëa_¥öt
 = 
FIO_ETA_AUTO
;

55 
	gëa_öãrvÆ_m£c
 = 1000;

56 
	gëa_√w_löe
 = 0;

57 
FILE
 *
	gf_out
 = 
NULL
;

58 
FILE
 *
	gf_îr
 = 
NULL
;

59 *
	gexec_¥ofûe
 = 
NULL
;

60 
	gw¨nögs_Áèl
 = 0;

61 
	gãr£_vîsi⁄
 = 3;

62 
	gis_backíd
 = 0;

63 
	gƒ_˛õ¡s
 = 0;

64 
	glog_sy¶og
 = 0;

66 
	gwrôe_bw_log
 = 0;

67 
	gªad_⁄ly
 = 0;

68 
	g°©us_öãrvÆ
 = 0;

70 *
	gåiggî_fûe
 = 
NULL
;

71 
	gåiggî_timeout
 = 0;

72 *
	gåiggî_cmd
 = 
NULL
;

73 *
	gåiggî_ªmŸe_cmd
 = 
NULL
;

75 *
	gaux_∑th
 = 
NULL
;

77 
	g¥ev_group_jobs
;

79 
	gfio_debug
 = 0;

80 
	gfio_debug_jobno
 = -1;

81 *
	gfio_debug_jobp
 = 
NULL
;

82 *
	gfio_w¨√d
 = 
NULL
;

84 
	gcmd_›t°r
[256];

85 
boﬁ
 
	gdid_¨g
;

87 
	#FIO_CLIENT_FLAG
 (1 << 16)

	)

93 
›ti⁄
 
	gl_›ts
[
FIO_NR_OPTIONS
] = {

95 .
«me
 = (*) "output",

96 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

97 .
	gvÆ
 = 'o' | 
FIO_CLIENT_FLAG
,

100 .
	g«me
 = (*) "latency-log",

101 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

102 .
	gvÆ
 = 'l' | 
FIO_CLIENT_FLAG
,

105 .
	g«me
 = (*) "bandwidth-log",

106 .
	ghas_¨g
 = 
no_¨gumít
,

107 .
	gvÆ
 = 'b' | 
FIO_CLIENT_FLAG
,

110 .
	g«me
 = (*) "minimal",

111 .
	ghas_¨g
 = 
no_¨gumít
,

112 .
	gvÆ
 = 'm' | 
FIO_CLIENT_FLAG
,

115 .
	g«me
 = (*) "output-format",

116 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

117 .
	gvÆ
 = 'F' | 
FIO_CLIENT_FLAG
,

120 .
	g«me
 = (*) "append-terse",

121 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

122 .
	gvÆ
 = 'f',

125 .
	g«me
 = (*) "version",

126 .
	ghas_¨g
 = 
no_¨gumít
,

127 .
	gvÆ
 = 'v' | 
FIO_CLIENT_FLAG
,

130 .
	g«me
 = (*) "help",

131 .
	ghas_¨g
 = 
no_¨gumít
,

132 .
	gvÆ
 = 'h' | 
FIO_CLIENT_FLAG
,

135 .
	g«me
 = (*) "cmdhelp",

136 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

137 .
	gvÆ
 = 'c' | 
FIO_CLIENT_FLAG
,

140 .
	g«me
 = (*) "enghelp",

141 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

142 .
	gvÆ
 = 'i' | 
FIO_CLIENT_FLAG
,

145 .
	g«me
 = (*) "showcmd",

146 .
	ghas_¨g
 = 
no_¨gumít
,

147 .
	gvÆ
 = 's' | 
FIO_CLIENT_FLAG
,

150 .
	g«me
 = (*) "readonly",

151 .
	ghas_¨g
 = 
no_¨gumít
,

152 .
	gvÆ
 = 'r' | 
FIO_CLIENT_FLAG
,

155 .
	g«me
 = (*) "eta",

156 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

157 .
	gvÆ
 = 'e' | 
FIO_CLIENT_FLAG
,

160 .
	g«me
 = (*) "eta-interval",

161 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

162 .
	gvÆ
 = 'O' | 
FIO_CLIENT_FLAG
,

165 .
	g«me
 = (*) "eta-newline",

166 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

167 .
	gvÆ
 = 'E' | 
FIO_CLIENT_FLAG
,

170 .
	g«me
 = (*) "debug",

171 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

172 .
	gvÆ
 = 'd' | 
FIO_CLIENT_FLAG
,

175 .
	g«me
 = (*) "parse-only",

176 .
	ghas_¨g
 = 
no_¨gumít
,

177 .
	gvÆ
 = 'P' | 
FIO_CLIENT_FLAG
,

180 .
	g«me
 = (*) "section",

181 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

182 .
	gvÆ
 = 'x' | 
FIO_CLIENT_FLAG
,

184 #ifde‡
CONFIG_ZLIB


186 .
	g«me
 = (*) "inflate-log",

187 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

188 .
	gvÆ
 = 'X' | 
FIO_CLIENT_FLAG
,

192 .
	g«me
 = (*) "alloc-size",

193 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

194 .
	gvÆ
 = 'a' | 
FIO_CLIENT_FLAG
,

197 .
	g«me
 = (*) "profile",

198 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

199 .
	gvÆ
 = 'p' | 
FIO_CLIENT_FLAG
,

202 .
	g«me
 = (*) "warnings-fatal",

203 .
	ghas_¨g
 = 
no_¨gumít
,

204 .
	gvÆ
 = 'w' | 
FIO_CLIENT_FLAG
,

207 .
	g«me
 = (*) "max-jobs",

208 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

209 .
	gvÆ
 = 'j' | 
FIO_CLIENT_FLAG
,

212 .
	g«me
 = (*) "terse-version",

213 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

214 .
	gvÆ
 = 'V' | 
FIO_CLIENT_FLAG
,

217 .
	g«me
 = (*) "server",

218 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

219 .
	gvÆ
 = 'S',

221 { .
	g«me
 = (*) "daemonize",

222 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

223 .
	gvÆ
 = 'D',

226 .
	g«me
 = (*) "client",

227 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

228 .
	gvÆ
 = 'C',

231 .
	g«me
 = (*) "remote-config",

232 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

233 .
	gvÆ
 = 'R',

236 .
	g«me
 = (*) "cpuclock-test",

237 .
	ghas_¨g
 = 
no_¨gumít
,

238 .
	gvÆ
 = 'T',

241 .
	g«me
 = (*) "crctest",

242 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

243 .
	gvÆ
 = 'G',

246 .
	g«me
 = (*) "memcpytest",

247 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

248 .
	gvÆ
 = 'M',

251 .
	g«me
 = (*) "idle-prof",

252 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

253 .
	gvÆ
 = 'I',

256 .
	g«me
 = (*) "status-interval",

257 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

258 .
	gvÆ
 = 'L',

261 .
	g«me
 = (*) "trigger-file",

262 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

263 .
	gvÆ
 = 'W',

266 .
	g«me
 = (*) "trigger-timeout",

267 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

268 .
	gvÆ
 = 'B',

271 .
	g«me
 = (*) "trigger",

272 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

273 .
	gvÆ
 = 'H',

276 .
	g«me
 = (*) "trigger-remote",

277 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

278 .
	gvÆ
 = 'J',

281 .
	g«me
 = (*) "aux-path",

282 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

283 .
	gvÆ
 = 'K',

286 .
	g«me
 = 
NULL
,

290 
	$‰ì_thªads_shm
()

292 i‡(
thªads
) {

293 *
ç
 = 
thªads
;

294 #i‚de‡
CONFIG_NO_SHM


295 
shmid_ds
 
sbuf
;

297 
thªads
 = 
NULL
;

298 
	`shmdt
(
ç
);

299 
	`shm˘l
(
shm_id
, 
IPC_RMID
, &
sbuf
);

300 
shm_id
 = -1;

302 
thªads
 = 
NULL
;

303 
	`‰ì
(
ç
);

306 
	}
}

308 
	$‰ì_shm
()

310 i‡(
thªads
) {

311 
	`Êow_exô
();

312 
fio_debug_jobp
 = 
NULL
;

313 
fio_w¨√d
 = 
NULL
;

314 
	`‰ì_thªads_shm
();

317 
	`‰ì
(
åiggî_fûe
);

318 
	`‰ì
(
åiggî_cmd
);

319 
	`‰ì
(
åiggî_ªmŸe_cmd
);

320 
åiggî_fûe
 = 
åiggî_cmd
 = 
åiggî_ªmŸe_cmd
 = 
NULL
;

322 
	`›ti⁄s_‰ì
(
fio_›ti⁄s
, &
def_thªad
.
o
);

323 
	`fio_fûñock_exô
();

324 
	`fûe_hash_exô
();

325 
	`s˛ónup
();

326 
	}
}

334 
	$£tup_thªad_¨ó
()

336 i‡(
thªads
)

344 
size_t
 
size
 = 
max_jobs
 * (
thªad_d©a
);

346 
size
 += 2 * ();

348 #i‚de‡
CONFIG_NO_SHM


349 
shm_id
 = 
	`shmgë
(0, 
size
, 
IPC_CREAT
 | 0600);

350 i‡(
shm_id
 != -1)

352 i‡(
î∫o
 !
EINVAL
 &&Éºnÿ!
ENOMEM
 &&Éºnÿ!
ENOSPC
) {

353 
	`≥º‹
("shmget");

357 
thªads
 = 
	`mÆloc
(
size
);

358 i‡(
thªads
)

362 
max_jobs
 >>= 1;

363 } 
max_jobs
);

365 #i‚de‡
CONFIG_NO_SHM


366 i‡(
shm_id
 == -1)

369 
thªads
 = 
	`shm©
(
shm_id
, 
NULL
, 0);

370 i‡(
thªads
 == (*) -1) {

371 
	`≥º‹
("shmat");

374 i‡(
	`shm_©èch_to_›í_ªmoved
())

375 
	`shm˘l
(
shm_id
, 
IPC_RMID
, 
NULL
);

378 
	`mem£t
(
thªads
, 0, 
max_jobs
 * (
thªad_d©a
));

379 
fio_debug_jobp
 = (*)(
thªads
 + 
max_jobs
);

380 *
fio_debug_jobp
 = -1;

381 
fio_w¨√d
 = 
fio_debug_jobp
 + 1;

382 *
fio_w¨√d
 = 0;

384 
	`Êow_öô
();

387 
	}
}

389 
	$dump_¥öt_›ti⁄
(
¥öt_›ti⁄
 *
p
)

391 c⁄° *
dñim
;

393 i‡(!
	`°rcmp
("des¸ùti⁄", 
p
->
«me
))

394 
dñim
 = "\"";

396 
dñim
 = "";

398 
	`log_öfo
("--%s%s", 
p
->
«me
,Ö->
vÆue
 ? "" : " ");

399 i‡(
p
->
vÆue
)

400 
	`log_öfo
("=%s%s%†", 
dñim
, 
p
->
vÆue
, delim);

401 
	}
}

403 
	$dump_›t_li°
(
thªad_d©a
 *
td
)

405 
Êi°_hód
 *
íåy
;

406 
¥öt_›ti⁄
 *
p
;

408 i‡(
	`Êi°_em±y
(&
td
->
›t_li°
))

411 
	`Êi°_f‹_óch
(
íåy
, &
td
->
›t_li°
) {

412 
p
 = 
	`Êi°_íåy
(
íåy
, 
¥öt_›ti⁄
, 
li°
);

413 
	`dump_¥öt_›ti⁄
(
p
);

415 
	}
}

417 
	$fio_dump_›ti⁄s_‰ì
(
thªad_d©a
 *
td
)

419 !
	`Êi°_em±y
(&
td
->
›t_li°
)) {

420 
¥öt_›ti⁄
 *
p
;

422 
p
 = 
	`Êi°_fú°_íåy
(&
td
->
›t_li°
, 
¥öt_›ti⁄
, 
li°
);

423 
	`Êi°_dñ_öô
(&
p
->
li°
);

424 
	`‰ì
(
p
->
«me
);

425 
	`‰ì
(
p
->
vÆue
);

426 
	`‰ì
(
p
);

428 
	}
}

430 
	$c›y_›t_li°
(
thªad_d©a
 *
d°
, thªad_d©®*
§c
)

432 
Êi°_hód
 *
íåy
;

434 i‡(
	`Êi°_em±y
(&
§c
->
›t_li°
))

437 
	`Êi°_f‹_óch
(
íåy
, &
§c
->
›t_li°
) {

438 
¥öt_›ti⁄
 *
§˝
, *
d°p
;

440 
§˝
 = 
	`Êi°_íåy
(
íåy
, 
¥öt_›ti⁄
, 
li°
);

441 
d°p
 = 
	`mÆloc
((*dstp));

442 
d°p
->
«me
 = 
	`°rdup
(
§˝
->name);

443 i‡(
§˝
->
vÆue
)

444 
d°p
->
vÆue
 = 
	`°rdup
(
§˝
->value);

446 
d°p
->
vÆue
 = 
NULL
;

447 
	`Êi°_add_èû
(&
d°p
->
li°
, &
d°
->
›t_li°
);

449 
	}
}

454 
thªad_d©a
 *
	$gë_√w_job
(
boﬁ
 
globÆ
, 
thªad_d©a
 *
∑ª¡
,

455 
boﬁ
 
¥e£rve_eo
, c⁄° *
job«me
)

457 
thªad_d©a
 *
td
;

459 i‡(
globÆ
)

460  &
def_thªad
;

461 i‡(
	`£tup_thªad_¨ó
()) {

462 
	`log_îr
("error: failedÅo setup shm segment\n");

463  
NULL
;

465 i‡(
thªad_numbî
 >
max_jobs
) {

466 
	`log_îr
("error: maximumÇumber of jobs (%d)Ñeached.\n",

467 
max_jobs
);

468  
NULL
;

471 
td
 = &
thªads
[
thªad_numbî
++];

472 *
td
 = *
∑ª¡
;

474 
	`INIT_FLIST_HEAD
(&
td
->
›t_li°
);

475 i‡(
∑ª¡
 !&
def_thªad
)

476 
	`c›y_›t_li°
(
td
, 
∑ª¡
);

478 
td
->
io_›s
 = 
NULL
;

479 
td
->
io_›s_öô
 = 0;

480 i‡(!
¥e£rve_eo
)

481 
td
->
eo
 = 
NULL
;

483 
td
->
o
.
uid
 =Åd->o.
gid
 = -1U;

485 
	`dup_fûes
(
td
, 
∑ª¡
);

486 
	`fio_›ti⁄s_mem_du≥
(
td
);

488 
	`¥ofûe_add_hooks
(
td
);

490 
td
->
thªad_numbî
 =Åhread_number;

491 
td
->
subjob_numbî
 = 0;

493 i‡(
job«me
)

494 
td
->
o
.
«me
 = 
	`°rdup
(
job«me
);

496 i‡(!
∑ª¡
->
o
.
group_ªp‹tög
 ||Ö¨íà=&
def_thªad
)

497 
°©_numbî
++;

499  
td
;

500 
	}
}

502 
	$put_job
(
thªad_d©a
 *
td
)

504 i‡(
td
 =&
def_thªad
)

507 
	`¥ofûe_td_exô
(
td
);

508 
	`Êow_exô_job
(
td
);

510 i‡(
td
->
îr‹
)

511 
	`log_öfo
("fio: %s\n", 
td
->
vîr‹
);

513 
	`fio_›ti⁄s_‰ì
(
td
);

514 
	`fio_dump_›ti⁄s_‰ì
(
td
);

515 i‡(
td
->
io_›s
)

516 
	`‰ì_i€ngöe
(
td
);

518 i‡(
td
->
o
.
«me
)

519 
	`‰ì
(
td
->
o
.
«me
);

521 
	`mem£t
(&
thªads
[
td
->
thªad_numbî
 - 1], 0, (*td));

522 
thªad_numbî
--;

523 
	}
}

525 
	$__£tup_øã
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

527 
bs
 = 
td
->
o
.
mö_bs
[
ddú
];

529 
	`as£π
(
	`ddú_rw
(
ddú
));

531 i‡(
td
->
o
.
øã
[
ddú
])

532 
td
->
øã_bps
[
ddú
] =Åd->
o
.
øã
[ddir];

534 
td
->
øã_bps
[
ddú
] = (
uöt64_t
Ëtd->
o
.
øã_i›s
[ddú] * 
bs
;

536 i‡(!
td
->
øã_bps
[
ddú
]) {

537 
	`log_îr
("rateÜowerÅhan supported\n");

541 
td
->
øã_√xt_io_time
[
ddú
] = 0;

542 
td
->
øã_io_issue_byãs
[
ddú
] = 0;

543 
td
->
œ°_u£c
[
ddú
] = 0;

545 
	}
}

547 
	$£tup_øã
(
thªad_d©a
 *
td
)

549 
ªt
 = 0;

551 i‡(
td
->
o
.
øã
[
DDIR_READ
] ||Åd->o.
øã_i›s
[DDIR_READ])

552 
ªt
 = 
	`__£tup_øã
(
td
, 
DDIR_READ
);

553 i‡(
td
->
o
.
øã
[
DDIR_WRITE
] ||Åd->o.
øã_i›s
[DDIR_WRITE])

554 
ªt
 |
	`__£tup_øã
(
td
, 
DDIR_WRITE
);

555 i‡(
td
->
o
.
øã
[
DDIR_TRIM
] ||Åd->o.
øã_i›s
[DDIR_TRIM])

556 
ªt
 |
	`__£tup_øã
(
td
, 
DDIR_TRIM
);

558  
ªt
;

559 
	}
}

561 
	$fixed_block_size
(
thªad_›ti⁄s
 *
o
)

563  
o
->
mö_bs
[
DDIR_READ
] =o->
max_bs
[DDIR_READ] &&

564 
o
->
mö_bs
[
DDIR_WRITE
] =o->
max_bs
[DDIR_WRITE] &&

565 
o
->
mö_bs
[
DDIR_TRIM
] =o->
max_bs
[DDIR_TRIM] &&

566 
o
->
mö_bs
[
DDIR_READ
] =o->mö_bs[
DDIR_WRITE
] &&

567 
o
->
mö_bs
[
DDIR_READ
] =o->mö_bs[
DDIR_TRIM
];

568 
	}
}

571 
	$gë_ønd_°¨t_dñay
(
thªad_d©a
 *
td
)

573 
dñayønge
;

574 
uöt64_t
 
‰™d_max
;

575 
r
;

577 
dñayønge
 = 
td
->
o
.
°¨t_dñay_high
 -Åd->o.
°¨t_dñay
;

579 
‰™d_max
 = 
	`ønd_max
(&
td
->
dñay_°©e
);

580 
r
 = 
	`__ønd
(&
td
->
dñay_°©e
);

581 
dñayønge
 = (Ë((Ëdñayøngê* (
r
 / (
‰™d_max
 + 1.0)));

583 
dñayønge
 +
td
->
o
.
°¨t_dñay
;

584  
dñayønge
;

585 
	}
}

590 
	$gcd
(
m
, 
n
)

592 i‡(!
n
)

593  
m
;

595  
	`gcd
(
n
, 
m
 %Ç);

596 
	}
}

602 
	$fixup_›ti⁄s
(
thªad_d©a
 *
td
)

604 
thªad_›ti⁄s
 *
o
 = &
td
->o;

605 
ªt
 = 0;

607 #i‚de‡
CONFIG_PSHARED


608 i‡(!
o
->
u£_thªad
) {

609 
	`log_öfo
("fio:ÅhisÖlatform doesÇot supportÖrocess shared"

612 
o
->
u£_thªad
 = 1;

613 
ªt
 = 
w¨nögs_Áèl
;

617 i‡(
o
->
wrôe_iﬁog_fûe
 && o->
ªad_iﬁog_fûe
) {

618 
	`log_îr
("fio:Ñead iolog overrides write_iolog\n");

619 
	`‰ì
(
o
->
wrôe_iﬁog_fûe
);

620 
o
->
wrôe_iﬁog_fûe
 = 
NULL
;

621 
ªt
 = 
w¨nögs_Áèl
;

627 i‡(
o
->
z⁄e_size
 && o->
›í_fûes
 > 1)

628 
o
->
z⁄e_size
 = 0;

634 i‡(
o
->
z⁄e_size
 && !o->
z⁄e_ønge
)

635 
o
->
z⁄e_ønge
 = o->
z⁄e_size
;

640 i‡(
	`td_ªad
(
td
))

641 
o
->
ovîwrôe
 = 1;

643 i‡(!
o
->
mö_bs
[
DDIR_READ
])

644 
o
->
mö_bs
[
DDIR_READ
] = o->
bs
[DDIR_READ];

645 i‡(!
o
->
max_bs
[
DDIR_READ
])

646 
o
->
max_bs
[
DDIR_READ
] = o->
bs
[DDIR_READ];

647 i‡(!
o
->
mö_bs
[
DDIR_WRITE
])

648 
o
->
mö_bs
[
DDIR_WRITE
] = o->
bs
[DDIR_WRITE];

649 i‡(!
o
->
max_bs
[
DDIR_WRITE
])

650 
o
->
max_bs
[
DDIR_WRITE
] = o->
bs
[DDIR_WRITE];

651 i‡(!
o
->
mö_bs
[
DDIR_TRIM
])

652 
o
->
mö_bs
[
DDIR_TRIM
] = o->
bs
[DDIR_TRIM];

653 i‡(!
o
->
max_bs
[
DDIR_TRIM
])

654 
o
->
max_bs
[
DDIR_TRIM
] = o->
bs
[DDIR_TRIM];

656 
o
->
rw_mö_bs
 = 
	`mö
(o->
mö_bs
[
DDIR_READ
], o->mö_bs[
DDIR_WRITE
]);

657 
o
->
rw_mö_bs
 = 
	`mö
(o->
mö_bs
[
DDIR_TRIM
], o->rw_min_bs);

662 i‡(!
o
->
ba
[
DDIR_READ
] || !
	`td_øndom
(
td
))

663 
o
->
ba
[
DDIR_READ
] = o->
mö_bs
[DDIR_READ];

664 i‡(!
o
->
ba
[
DDIR_WRITE
] || !
	`td_øndom
(
td
))

665 
o
->
ba
[
DDIR_WRITE
] = o->
mö_bs
[DDIR_WRITE];

666 i‡(!
o
->
ba
[
DDIR_TRIM
] || !
	`td_øndom
(
td
))

667 
o
->
ba
[
DDIR_TRIM
] = o->
mö_bs
[DDIR_TRIM];

669 i‡((
o
->
ba
[
DDIR_READ
] !o->
mö_bs
[DDIR_READ] ||

670 
o
->
ba
[
DDIR_WRITE
] !o->
mö_bs
[DDIR_WRITE] ||

671 
o
->
ba
[
DDIR_TRIM
] !o->
mö_bs
[DDIR_TRIM]) &&

672 !
o
->
n‹™domm≠
) {

673 
	`log_îr
("fio: Any use of blockalign=Åurns offÑandommap\n");

674 
o
->
n‹™domm≠
 = 1;

675 
ªt
 = 
w¨nögs_Áèl
;

678 i‡(!
o
->
fûe_size_high
)

679 
o
->
fûe_size_high
 = o->
fûe_size_low
;

681 i‡(
o
->
°¨t_dñay_high
)

682 
o
->
°¨t_dñay
 = 
	`gë_ønd_°¨t_dñay
(
td
);

684 i‡(
o
->
n‹™domm≠
 && o->
vîify
 !
VERIFY_NONE


685 && !
	`fixed_block_size
(
o
)) {

686 
	`log_îr
("fio:Çorandommap given for variable block sizes, "

688 
ªt
 = 
w¨nögs_Áèl
;

690 i‡(
o
->
bs_u«lig√d
 && (o->
odúe˘
 || 
	`td_i€ngöe_Êagged
(
td
, 
FIO_RAWIO
)))

691 
	`log_îr
("fio: bs_unaligned mayÇot work withÑaw io\n");

696 i‡(
o
->
thöktime_•ö
 > o->
thöktime
)

697 
o
->
thöktime_•ö
 = o->
thöktime
;

702 i‡(
o
->
iodïth_low
 > o->
iodïth
 || !o->iodepth_low)

703 
o
->
iodïth_low
 = o->
iodïth
;

708 i‡(
o
->
iodïth_b©ch
 > o->
iodïth
 || !o->iodepth_batch)

709 
o
->
iodïth_b©ch
 = o->
iodïth
;

715 i‡(
o
->
iodïth_b©ch_com∂ëe_mö
 > o->
iodïth_b©ch_com∂ëe_max
)

716 
o
->
iodïth_b©ch_com∂ëe_max
 = o->
iodïth_b©ch_com∂ëe_mö
;

722 i‡(
o
->
£rülize_ovîœp
 && !(
td
->
Êags
 & 
TD_F_READ_IOLOG
) &&

723 (!(
	`td_wrôe
(
td
Ë|| 
	`td_åim
—d)Ë|| 
o
->
iodïth
 == 1))

724 
o
->
£rülize_ovîœp
 = 0;

728 i‡(
o
->
£rülize_ovîœp
 && o->
io_submô_mode
 =
IO_MODE_OFFLOAD
) {

729 
	`log_îr
("fio: checking for in-flight overlaps whenÅhe "

731 
o
->
£rülize_ovîœp
 = 0;

732 
ªt
 = 
w¨nögs_Áèl
;

735 i‡(
o
->
ƒ_fûes
 > 
td
->
fûes_ödex
)

736 
o
->
ƒ_fûes
 = 
td
->
fûes_ödex
;

738 i‡(
o
->
›í_fûes
 > o->
ƒ_fûes
 || !o->open_files)

739 
o
->
›í_fûes
 = o->
ƒ_fûes
;

741 i‡(((
o
->
øã
[
DDIR_READ
] + o->øã[
DDIR_WRITE
] + o->øã[
DDIR_TRIM
]) &&

742 (
o
->
øã_i›s
[
DDIR_READ
] + o->øã_i›s[
DDIR_WRITE
] + o->øã_i›s[
DDIR_TRIM
])) ||

743 ((
o
->
øãmö
[
DDIR_READ
] + o->øãmö[
DDIR_WRITE
] + o->øãmö[
DDIR_TRIM
]) &&

744 (
o
->
øã_i›s_mö
[
DDIR_READ
] + o->øã_i›s_mö[
DDIR_WRITE
] + o->øã_i›s_mö[
DDIR_TRIM
]))) {

745 
	`log_îr
("fio:ÑateándÑate_iopsáre mutuallyÉxclusive\n");

746 
ªt
 = 1;

748 i‡((
o
->
øã
[
DDIR_READ
] && (o->øã[DDIR_READ] < o->
øãmö
[DDIR_READ])) ||

749 (
o
->
øã
[
DDIR_WRITE
] && (o->øã[DDIR_WRITE] < o->
øãmö
[DDIR_WRITE])) ||

750 (
o
->
øã
[
DDIR_TRIM
] && (o->øã[DDIR_TRIM] < o->
øãmö
[DDIR_TRIM])) ||

751 (
o
->
øã_i›s
[
DDIR_READ
] && (o->øã_i›s[DDIR_READ] < o->
øã_i›s_mö
[DDIR_READ])) ||

752 (
o
->
øã_i›s
[
DDIR_WRITE
] && (o->øã_i›s[DDIR_WRITE] < o->
øã_i›s_mö
[DDIR_WRITE])) ||

753 (
o
->
øã_i›s
[
DDIR_TRIM
] && (o->øã_i›s[DDIR_TRIM] < o->
øã_i›s_mö
[DDIR_TRIM]))) {

754 
	`log_îr
("fio: minimumÑateÉxceedsÑate\n");

755 
ªt
 = 1;

758 i‡(!
o
->
timeout
 && o->
time_ba£d
) {

759 
	`log_îr
("fio:Åime_basedÑequiresáÑuntime/timeout setting\n");

760 
o
->
time_ba£d
 = 0;

761 
ªt
 = 
w¨nögs_Áèl
;

764 i‡(
o
->
fûl_devi˚
 && !o->
size
)

765 
o
->
size
 = -1ULL;

767 i‡(
o
->
vîify
 !
VERIFY_NONE
) {

768 i‡(
	`td_wrôe
(
td
Ë&& 
o
->
do_vîify
 && o->
numjobs
 > 1 &&

769 (
o
->
fûíame
 ||

770 !(
o
->
unique_fûíame
 &&

771 
	`°r°r
(
o
->
fûíame_f‹m©
, "$jobname") &&

772 
	`°r°r
(
o
->
fûíame_f‹m©
, "$jobnum") &&

773 
	`°r°r
(
o
->
fûíame_f‹m©
, "$filenum")))) {

774 
	`log_öfo
("fio: multiple writers may overwrite blocks "

777 
ªt
 = 
w¨nögs_Áèl
;

784 i‡(
	`td_wrôe
(
td
Ë&& 
o
->
do_vîify
 && o->
timeout
 &&

785 
o
->
time_ba£d
 && !
	`td_ªad
(
td
Ë&& !o->
vîify_backlog
) {

786 
	`log_öfo
("fio: verificationÑeadÖhase willÇever "

789 
ªt
 = 
w¨nögs_Áèl
;

792 i‡(!
	`fio_›ti⁄_is_£t
(
o
, 
ªfûl_buf„rs
))

793 
o
->
ªfûl_buf„rs
 = 1;

795 i‡(
o
->
max_bs
[
DDIR_WRITE
] !o->
mö_bs
[DDIR_WRITE] &&

796 !
o
->
vîify_öãrvÆ
)

797 
o
->
vîify_öãrvÆ
 = o->
mö_bs
[
DDIR_WRITE
];

803 i‡(
o
->
vîify_öãrvÆ
 > o->
mö_bs
[
DDIR_WRITE
])

804 
o
->
vîify_öãrvÆ
 = o->
mö_bs
[
DDIR_WRITE
];

805 i‡(
	`td_ªad
(
td
Ë&& 
o
->
vîify_öãrvÆ
 > o->
mö_bs
[
DDIR_READ
])

806 
o
->
vîify_öãrvÆ
 = o->
mö_bs
[
DDIR_READ
];

812 i‡(!
o
->
vîify_öãrvÆ
 ||

813 (
o
->
mö_bs
[
DDIR_WRITE
] % o->
vîify_öãrvÆ
) ||

814 (
o
->
max_bs
[
DDIR_WRITE
] % o->
vîify_öãrvÆ
))

815 
o
->
vîify_öãrvÆ
 = 
	`gcd
(o->
mö_bs
[
DDIR_WRITE
],

816 
o
->
max_bs
[
DDIR_WRITE
]);

819 i‡(
o
->
¥e_ªad
) {

820 i‡(
o
->
övÆid©e_ˇche
)

821 
o
->
övÆid©e_ˇche
 = 0;

822 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_PIPEIO
)) {

823 
	`log_öfo
("fio: cannotÖre-read files withán IOÉngine"

825 
ªt
 = 
w¨nögs_Áèl
;

829 i‡(!
o
->
unô_ba£
) {

830 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_BIT_BASED
))

831 
o
->
unô_ba£
 = 1;

833 
o
->
unô_ba£
 = 8;

836 #i‚de‡
FIO_HAVE_ANY_FALLOCATE


838 
o
->
ÁŒoˇã_mode
 = 
FIO_FALLOCATE_NONE
;

841 #i‚de‡
CONFIG_FDATASYNC


842 i‡(
o
->
fd©async_blocks
) {

843 
	`log_öfo
("fio:ÅhisÖlatform doesÇot support fdatasync()"

847 
o
->
fsync_blocks
 = o->
fd©async_blocks
;

848 
o
->
fd©async_blocks
 = 0;

849 
ªt
 = 
w¨nögs_Áèl
;

853 #ifde‡
WIN32


858 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_SYNCIO
Ë&& (
o
->
odúe˘
 || o->
sync_io
)) {

859 
	`log_îr
("fio: Windows doesÇot support direct orÇon-buffered io with"

862 
ªt
 = 1;

872 i‡(
o
->
com¥ess_≥r˚¡age
) {

873 i‡(
o
->
com¥ess_≥r˚¡age
 == 100) {

874 
o
->
zîo_buf„rs
 = 1;

875 
o
->
com¥ess_≥r˚¡age
 = 0;

876 } i‡(!
	`fio_›ti⁄_is_£t
(
o
, 
ªfûl_buf„rs
)) {

877 
o
->
ªfûl_buf„rs
 = 1;

878 
td
->
Êags
 |
TD_F_REFILL_BUFFERS
;

886 i‡(
o
->
øndom_di°ributi⁄
 !
FIO_RAND_DIST_RANDOM
)

887 
o
->
n‹™domm≠
 = 1;

892 i‡(
o
->
size
 && o->sizê< 
	`td_mö_bs
(
td
)) {

893 
	`log_îr
("fio: sizeÅoo small, mustÇot beÜessÅhan minimum block size: %llu < %u\n",

894 (Ë
o
->
size
, 
	`td_mö_bs
(
td
));

895 
ªt
 = 1;

901 i‡(
o
->
ﬂtomic
)

902 
o
->
odúe˘
 = 1;

907 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
ønd_£ed
))

908 
o
->
ønd_ª≥©abÀ
 = 0;

910 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOEXTEND
Ë&& 
o
->
fûe_≠≥nd
) {

911 
	`log_îr
("fio: c™'à≠≥nd/exã¡ wôh IOÉngöê%s\n", 
td
->
io_›s
->
«me
);

912 
ªt
 = 1;

915 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
gtod_˝u
)) {

916 
	`fio_gtod_öô
();

917 
	`fio_gtod_£t_˝u
(
o
->
gtod_˝u
);

918 
fio_gtod_ofÊﬂd
 = 1;

921 
td
->
lo›s
 = 
o
->loops;

922 i‡(!
td
->
lo›s
)

923 
td
->
lo›s
 = 1;

925 i‡(
o
->
block_îr‹_hi°
 && o->
ƒ_fûes
 != 1) {

926 
	`log_îr
("fio: blockÉrror histogram onlyávailable "

928 "¥ovided\n", 
o
->
ƒ_fûes
);

929 
ªt
 = 1;

932 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
˛©_≥r˚¡ûes
) &&

933 !
	`fio_›ti⁄_is_£t
(
o
, 
œt_≥r˚¡ûes
)) {

934 
o
->
œt_≥r˚¡ûes
 = !o->
˛©_≥r˚¡ûes
;

935 } i‡(
	`fio_›ti⁄_is_£t
(
o
, 
œt_≥r˚¡ûes
) &&

936 !
	`fio_›ti⁄_is_£t
(
o
, 
˛©_≥r˚¡ûes
)) {

937 
o
->
˛©_≥r˚¡ûes
 = !o->
œt_≥r˚¡ûes
;

938 } i‡(
	`fio_›ti⁄_is_£t
(
o
, 
œt_≥r˚¡ûes
) &&

939 
	`fio_›ti⁄_is_£t
(
o
, 
˛©_≥r˚¡ûes
) &&

940 
o
->
œt_≥r˚¡ûes
 && o->
˛©_≥r˚¡ûes
) {

941 
	`log_îr
("fio:Üat_percentilesánd clat_percentilesáre "

943 
ªt
 = 1;

946 i‡(
o
->
dißbÀ_œt
)

947 
o
->
œt_≥r˚¡ûes
 = 0;

948 i‡(
o
->
dißbÀ_˛©
)

949 
o
->
˛©_≥r˚¡ûes
 = 0;

954 
o
->
max_œãncy
 *= 1000ULL;

955 
o
->
œãncy_èrgë
 *= 1000ULL;

956 
o
->
œãncy_wödow
 *= 1000ULL;

958  
ªt
;

959 
	}
}

961 
	$öô_ønd_fûe_£rvi˚
(
thªad_d©a
 *
td
)

963 
ƒ™ges
 = 
td
->
o
.
ƒ_fûes
 << 
FIO_FSERVICE_SHIFT
;

964 c⁄° 
£ed
 = 
td
->
ønd_£eds
[
FIO_RAND_FILE_OFF
];

966 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_ZIPF
) {

967 
	`zùf_öô
(&
td
->
√xt_fûe_zùf
, 
ƒ™ges
,Åd->
zùf_thëa
, 
£ed
);

968 
	`zùf_dißbÀ_hash
(&
td
->
√xt_fûe_zùf
);

969 } i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_PARETO
) {

970 
	`∑ªto_öô
(&
td
->
√xt_fûe_zùf
, 
ƒ™ges
,Åd->
∑ªto_h
, 
£ed
);

971 
	`zùf_dißbÀ_hash
(&
td
->
√xt_fûe_zùf
);

972 } i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_GAUSS
) {

973 
	`gauss_öô
(&
td
->
√xt_fûe_gauss
, 
ƒ™ges
,Åd->
gauss_dev
, 
£ed
);

974 
	`gauss_dißbÀ_hash
(&
td
->
√xt_fûe_gauss
);

976 
	}
}

978 
	$td_fûl_vîify_°©e_£ed
(
thªad_d©a
 *
td
)

980 
boﬁ
 
u£64
;

982 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE64
)

983 
u£64
 = 
åue
;

985 
u£64
 = 
Ál£
;

987 
	`öô_ønd_£ed
(&
td
->
vîify_°©e
,Åd->
ønd_£eds
[
FIO_RAND_VER_OFF
],

988 
u£64
);

989 
	}
}

991 
	$td_fûl_ønd_£eds_öã∫Æ
(
thªad_d©a
 *
td
, 
boﬁ
 
u£64
)

993 
i
;

1001 i‡(
	`td_åimwrôe
(
td
)) {

1002 
	`öô_ønd_£ed
(&
td
->
b§™ge_°©e
[
DDIR_READ
],Åd->
ønd_£eds
[
FIO_RAND_BS_OFF
], 
u£64
);

1003 
	`öô_ønd_£ed
(&
td
->
b§™ge_°©e
[
DDIR_WRITE
],Åd->
ønd_£eds
[
FIO_RAND_BS1_OFF
], 
u£64
);

1004 
	`öô_ønd_£ed
(&
td
->
b§™ge_°©e
[
DDIR_TRIM
],Åd->
ønd_£eds
[
FIO_RAND_BS1_OFF
], 
u£64
);

1006 
	`öô_ønd_£ed
(&
td
->
b§™ge_°©e
[
DDIR_READ
],Åd->
ønd_£eds
[
FIO_RAND_BS_OFF
], 
u£64
);

1007 
	`öô_ønd_£ed
(&
td
->
b§™ge_°©e
[
DDIR_WRITE
],Åd->
ønd_£eds
[
FIO_RAND_BS1_OFF
], 
u£64
);

1008 
	`öô_ønd_£ed
(&
td
->
b§™ge_°©e
[
DDIR_TRIM
],Åd->
ønd_£eds
[
FIO_RAND_BS2_OFF
], 
u£64
);

1011 
	`td_fûl_vîify_°©e_£ed
(
td
);

1012 
	`öô_ønd_£ed
(&
td
->
rwmix_°©e
,Åd->
ønd_£eds
[
FIO_RAND_MIX_OFF
], 
Ál£
);

1014 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_RANDOM
)

1015 
	`öô_ønd_£ed
(&
td
->
√xt_fûe_°©e
,Åd->
ønd_£eds
[
FIO_RAND_FILE_OFF
], 
u£64
);

1016 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 & 
__FIO_FSERVICE_NONUNIFORM
)

1017 
	`öô_ønd_fûe_£rvi˚
(
td
);

1019 
	`öô_ønd_£ed
(&
td
->
fûe_size_°©e
,Åd->
ønd_£eds
[
FIO_RAND_FILE_SIZE_OFF
], 
u£64
);

1020 
	`öô_ønd_£ed
(&
td
->
åim_°©e
,Åd->
ønd_£eds
[
FIO_RAND_TRIM_OFF
], 
u£64
);

1021 
	`öô_ønd_£ed
(&
td
->
dñay_°©e
,Åd->
ønd_£eds
[
FIO_RAND_START_DELAY
], 
u£64
);

1022 
	`öô_ønd_£ed
(&
td
->
poiss⁄_°©e
[0],Åd->
ønd_£eds
[
FIO_RAND_POISSON_OFF
], 0);

1023 
	`öô_ønd_£ed
(&
td
->
poiss⁄_°©e
[1],Åd->
ønd_£eds
[
FIO_RAND_POISSON2_OFF
], 0);

1024 
	`öô_ønd_£ed
(&
td
->
poiss⁄_°©e
[2],Åd->
ønd_£eds
[
FIO_RAND_POISSON3_OFF
], 0);

1025 
	`öô_ønd_£ed
(&
td
->
dedu≥_°©e
,Åd->
ønd_£eds
[
FIO_DEDUPE_OFF
], 
Ál£
);

1026 
	`öô_ønd_£ed
(&
td
->
z⁄e_°©e
,Åd->
ønd_£eds
[
FIO_RAND_ZONE_OFF
], 
Ál£
);

1028 i‡(!
	`td_øndom
(
td
))

1031 i‡(
td
->
o
.
ønd_ª≥©abÀ
)

1032 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
] = 
FIO_RANDSEED
 *Åd->
thªad_numbî
;

1034 
	`öô_ønd_£ed
(&
td
->
øndom_°©e
,Åd->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
], 
u£64
);

1036 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1037 
‰™d_°©e
 *
s
 = &
td
->
£q_ønd_°©e
[
i
];

1039 
	`öô_ønd_£ed
(
s
, 
td
->
ønd_£eds
[
FIO_RAND_SEQ_RAND_READ_OFF
], 
Ál£
);

1041 
	}
}

1043 
	$td_fûl_ønd_£eds
(
thªad_d©a
 *
td
)

1045 
boﬁ
 
u£64
;

1047 i‡(
td
->
o
.
ÆÃ™d_ª≥©abÀ
) {

1048 
i
;

1050 
i
 = 0; i < 
FIO_RAND_NR_OFFS
; i++)

1051 
td
->
ønd_£eds
[
i
] = 
FIO_RANDSEED
 *Åd->
thªad_numbî


1052 + 
i
;

1055 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE64
)

1056 
u£64
 = 
åue
;

1058 
u£64
 = 
Ál£
;

1060 
	`td_fûl_ønd_£eds_öã∫Æ
(
td
, 
u£64
);

1062 
	`öô_ønd_£ed
(&
td
->
buf_°©e
,Åd->
ønd_£eds
[
FIO_RAND_BUF_OFF
], 
u£64
);

1063 
	`‰™d_c›y
(&
td
->
buf_°©e_¥ev
, &td->
buf_°©e
);

1064 
	}
}

1070 
	$i€ngöe_lﬂd
(
thªad_d©a
 *
td
)

1072 i‡(!
td
->
o
.
i€ngöe
) {

1073 
	`log_îr
("fio: internal fault,Ço IOÉngine specified\n");

1077 i‡(
td
->
io_›s
) {

1078 
i€ngöe_›s
 *
›s
;

1079 *
dlh™dÀ
;

1084 i‡(!
	`°rcmp
(
td
->
io_›s
->
«me
,Åd->
o
.
i€ngöe
)) {

1094 
dlh™dÀ
 = 
td
->
io_›s_dlh™dÀ
;

1095 
›s
 = 
	`lﬂd_i€ngöe
(
td
);

1096 i‡(
›s
 =
td
->
io_›s
 && 
dlh™dÀ
 =td->
io_›s_dlh™dÀ
) {

1097 i‡(
dlh™dÀ
)

1098 
	`dl˛o£
(
dlh™dÀ
);

1102 i‡(
dlh™dÀ
 && dlh™dÀ !
td
->
io_›s_dlh™dÀ
)

1103 
	`dl˛o£
(
dlh™dÀ
);

1106 
	`‰ì_i€ngöe
(
td
);

1109 
td
->
io_›s
 = 
	`lﬂd_i€ngöe
(td);

1110 i‡(!
td
->
io_›s
) {

1111 
	`log_îr
("fio: failedÅoÜoadÉngine\n");

1115 i‡(
td
->
io_›s
->
›ti⁄_°ru˘_size
 &&Åd->io_›s->
›ti⁄s
) {

1122 *
‹igeo
 = 
td
->
eo
;

1126 i‡(!
‹igeo
 && 
td
 !&
def_thªad
 && def_thªad.
eo
 &&

1127 
def_thªad
.
io_›s
->
›ti⁄s
 =
td
->io_ops->options)

1128 
‹igeo
 = 
def_thªad
.
eo
;

1130 
	`›ti⁄s_öô
(
td
->
io_›s
->
›ti⁄s
);

1131 
td
->
eo
 = 
	`mÆloc
—d->
io_›s
->
›ti⁄_°ru˘_size
);

1137 i‡(
‹igeo
) {

1138 
	`mem˝y
(
td
->
eo
, 
‹igeo
,Åd->
io_›s
->
›ti⁄_°ru˘_size
);

1139 
	`›ti⁄s_mem_du≥
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

1141 
	`mem£t
(
td
->
eo
, 0,Åd->
io_›s
->
›ti⁄_°ru˘_size
);

1142 
	`fûl_deÁu…_›ti⁄s
(
td
->
eo
,Åd->
io_›s
->
›ti⁄s
);

1144 *(
thªad_d©a
 **)
td
->
eo
 =Åd;

1147 i‡(
td
->
o
.
odúe˘
)

1148 
td
->
io_›s
->
Êags
 |
FIO_RAWIO
;

1150 
	`td_£t_i€ngöe_Êags
(
td
);

1152 
	}
}

1154 
	$öô_Êags
(
thªad_d©a
 *
td
)

1156 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1157 
i
;

1159 i‡(
o
->
vîify_backlog
)

1160 
td
->
Êags
 |
TD_F_VER_BACKLOG
;

1161 i‡(
o
->
åim_backlog
)

1162 
td
->
Êags
 |
TD_F_TRIM_BACKLOG
;

1163 i‡(
o
->
ªad_iﬁog_fûe
)

1164 
td
->
Êags
 |
TD_F_READ_IOLOG
;

1165 i‡(
o
->
ªfûl_buf„rs
)

1166 
td
->
Êags
 |
TD_F_REFILL_BUFFERS
;

1170 i‡(
o
->
s¸ambÀ_buf„rs
 && 
	`fio_›ti⁄_is_£t
(o, scramble_buffers))

1171 
td
->
Êags
 |
TD_F_SCRAMBLE_BUFFERS
;

1176 i‡(
o
->
s¸ambÀ_buf„rs
 && !(o->
zîo_buf„rs
 &&

1177 
	`fio_›ti⁄_is_£t
(
o
, 
zîo_buf„rs
)))

1178 
td
->
Êags
 |
TD_F_SCRAMBLE_BUFFERS
;

1179 i‡(
o
->
vîify
 !
VERIFY_NONE
)

1180 
td
->
Êags
 |
TD_F_VER_NONE
;

1182 i‡(
o
->
vîify_async
 || o->
io_submô_mode
 =
IO_MODE_OFFLOAD
)

1183 
td
->
Êags
 |
TD_F_NEED_LOCK
;

1185 i‡(
o
->
mem_ty≥
 =
MEM_CUDA_MALLOC
)

1186 
td
->
Êags
 &~
TD_F_SCRAMBLE_BUFFERS
;

1188 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1189 i‡(
	`›ti⁄_check_øã
(
td
, 
i
)) {

1190 
td
->
Êags
 |
TD_F_CHECK_RATE
;

1194 
	}
}

1196 
	$£tup_øndom_£eds
(
thªad_d©a
 *
td
)

1198 
£ed
;

1199 
i
;

1201 i‡(!
td
->
o
.
ønd_ª≥©abÀ
 && !
	`fio_›ti⁄_is_£t
(&td->o, 
ønd_£ed
)) {

1202 
ªt
 = 
	`öô_øndom_£eds
(
td
->
ønd_£eds
, (td->rand_seeds));

1203 i‡(!
ªt
)

1204 
	`td_fûl_ønd_£eds
(
td
);

1205  
ªt
;

1208 
£ed
 = 
td
->
o
.
ønd_£ed
;

1209 
i
 = 0; i < 4; i++)

1210 
£ed
 *= 0x9e370001UL;

1212 
i
 = 0; i < 
FIO_RAND_NR_OFFS
; i++) {

1213 
td
->
ønd_£eds
[
i
] = 
£ed
 *Åd->
thªad_numbî
 + i;

1214 
£ed
 *= 0x9e370001UL;

1217 
	`td_fûl_ønd_£eds
(
td
);

1219 
	}
}

1222 
	mFPRE_NONE
 = 0,

1223 
	mFPRE_JOBNAME
,

1224 
	mFPRE_JOBNUM
,

1225 
	mFPRE_FILENUM


1228 
	sÂª_keyw‹d
 {

1229 c⁄° *
	mkeyw‹d
;

1230 
size_t
 
	m°æí
;

1231 
	mkey
;

1232 } 
	gÂª_keyw‹ds
[] = {

1233 { .
keyw‹d
 = "$job«me", .
	gkey
 = 
FPRE_JOBNAME
, },

1234 { .
	gkeyw‹d
 = "$jobnum", .
	gkey
 = 
FPRE_JOBNUM
, },

1235 { .
	gkeyw‹d
 = "$fûíum", .
	gkey
 = 
FPRE_FILENUM
, },

1236 { .
	gkeyw‹d
 = 
NULL
, },

1239 *
	$make_fûíame
(*
buf
, 
size_t
 
buf_size
,
thªad_›ti⁄s
 *
o
,

1240 c⁄° *
job«me
, 
jobnum
, 
fûíum
)

1242 
Âª_keyw‹d
 *
f
;

1243 
c›y
[
PATH_MAX
];

1244 
size_t
 
d°_À·
 = 
PATH_MAX
 - 1;

1246 i‡(!
o
->
fûíame_f‹m©
 || !
	`°æí
(o->filename_format)) {

1247 
	`•rötf
(
buf
, "%s.%d.%d", 
job«me
, 
jobnum
, 
fûíum
);

1248  
buf
;

1251 
f
 = &
Âª_keyw‹ds
[0]; f->
keyw‹d
; f++)

1252 
f
->
°æí
 = 
	`°æí
(f->
keyw‹d
);

1254 
buf
[
buf_size
 - 1] = '\0';

1255 
	`°∫˝y
(
buf
, 
o
->
fûíame_f‹m©
, 
buf_size
 - 1);

1257 
	`mem£t
(
c›y
, 0, (copy));

1258 
f
 = &
Âª_keyw‹ds
[0]; f->
keyw‹d
; f++) {

1260 
size_t
 
¥e_Àn
, 
po°_°¨t
 = 0;

1261 *
°r
, *
d°
 = 
c›y
;

1263 
°r
 = 
	`°rˇ£°r
(
buf
, 
f
->
keyw‹d
);

1264 i‡(!
°r
)

1267 
¥e_Àn
 = 
°r
 - 
buf
;

1268 i‡(
	`°æí
(
°r
Ë!
f
->
°æí
)

1269 
po°_°¨t
 = 
¥e_Àn
 + 
f
->
°æí
;

1271 i‡(
¥e_Àn
) {

1272 
	`°∫˝y
(
d°
, 
buf
, 
¥e_Àn
);

1273 
d°
 +
¥e_Àn
;

1274 
d°_À·
 -
¥e_Àn
;

1277 
f
->
key
) {

1278 
FPRE_JOBNAME
: {

1279 
ªt
;

1281 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%s", 
job«me
);

1282 i‡(
ªt
 < 0)

1284 i‡(
ªt
 > 
d°_À·
) {

1285 
	`log_îr
("fio:Åruncated filename\n");

1286 
d°
 +
d°_À·
;

1287 
d°_À·
 = 0;

1289 
d°
 +
ªt
;

1290 
d°_À·
 -
ªt
;

1294 
FPRE_JOBNUM
: {

1295 
ªt
;

1297 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%d", 
jobnum
);

1298 i‡(
ªt
 < 0)

1300 i‡(
ªt
 > 
d°_À·
) {

1301 
	`log_îr
("fio:Åruncated filename\n");

1302 
d°
 +
d°_À·
;

1303 
d°_À·
 = 0;

1305 
d°
 +
ªt
;

1306 
d°_À·
 -
ªt
;

1310 
FPRE_FILENUM
: {

1311 
ªt
;

1313 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%d", 
fûíum
);

1314 i‡(
ªt
 < 0)

1316 i‡(
ªt
 > 
d°_À·
) {

1317 
	`log_îr
("fio:Åruncated filename\n");

1318 
d°
 +
d°_À·
;

1319 
d°_À·
 = 0;

1321 
d°
 +
ªt
;

1322 
d°_À·
 -
ªt
;

1327 
	`as£π
(0);

1331 i‡(
po°_°¨t
)

1332 
	`°∫˝y
(
d°
, 
buf
 + 
po°_°¨t
, 
d°_À·
);

1334 
	`°∫˝y
(
buf
, 
c›y
, 
buf_size
 - 1);

1338  
buf
;

1339 
	}
}

1341 
boﬁ
 
	$∑r£_dryrun
()

1343  
dump_cmdlöe
 || 
∑r£_⁄ly
;

1344 
	}
}

1346 
	$gí_log_«me
(*
«me
, 
size_t
 
size
, c⁄° *
logty≥
,

1347 c⁄° *
log«me
, 
num
,

1348 c⁄° *
suf
, 
≥r_job
)

1350 i‡(
≥r_job
)

1351 
	`¢¥ötf
(
«me
, 
size
, "%s_%s.%d.%s", 
log«me
, 
logty≥
, 
num
, 
suf
);

1353 
	`¢¥ötf
(
«me
, 
size
, "%s_%s.%s", 
log«me
, 
logty≥
, 
suf
);

1354 
	}
}

1356 
	$check_waôìs
(*
waôì
)

1358 
thªad_d©a
 *
td
;

1359 
i
, 
ªt
 = 0;

1361 
	`f‹_óch_td
(
td
, 
i
) {

1362 i‡(
td
->
subjob_numbî
)

1365 
ªt
 +!
	`°rcmp
(
td
->
o
.
«me
, 
waôì
);

1368  
ªt
;

1369 
	}
}

1371 
boﬁ
 
	$waô_f‹_ok
(c⁄° *
job«me
, 
thªad_›ti⁄s
 *
o
)

1373 
nw
;

1375 i‡(!
o
->
waô_f‹
)

1376  
åue
;

1378 i‡(!
	`°rcmp
(
job«me
, 
o
->
waô_f‹
)) {

1379 
	`log_îr
("%s:á job cannot wait for itself (wait_for=%s).\n",

1380 
job«me
, 
o
->
waô_f‹
);

1381  
Ál£
;

1384 i‡(!(
nw
 = 
	`check_waôìs
(
o
->
waô_f‹
))) {

1385 
	`log_îr
("%s: waôì job %†unknown.\n", 
job«me
, 
o
->
waô_f‹
);

1386  
Ál£
;

1389 i‡(
nw
 > 1) {

1390 
	`log_îr
("%s: multiple waitees %s found,\n"

1392 
job«me
, 
o
->
waô_f‹
);

1393  
Ál£
;

1396  
åue
;

1397 
	}
}

1404 
	$add_job
(
thªad_d©a
 *
td
, c⁄° *
job«me
, 
job_add_num
,

1405 
ªcur£d
, 
˛õ¡_ty≥
)

1407 
i
;

1408 
‚ame
[
PATH_MAX
];

1409 
numjobs
, 
fûe_Ælo˚d
;

1410 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1411 
log«me
[
PATH_MAX
 + 32];

1416 i‡(
td
 =&
def_thªad
)

1419 
	`öô_Êags
(
td
);

1424 i‡(
	`∑r£_dryrun
()) {

1425 
	`put_job
(
td
);

1429 
td
->
˛õ¡_ty≥
 = client_type;

1431 i‡(
	`¥ofûe_td_öô
(
td
))

1432 
îr
;

1434 i‡(
	`i€ngöe_lﬂd
(
td
))

1435 
îr
;

1437 
fûe_Ælo˚d
 = 0;

1438 i‡(!
o
->
fûíame
 && !
td
->
fûes_ödex
 && !o->
ªad_iﬁog_fûe
) {

1439 
fûe_Ælo˚d
 = 1;

1441 i‡(
o
->
ƒ_fûes
 =1 && 
	`exi°s_™d_nŸ_ªgfûe
(
job«me
))

1442 
	`add_fûe
(
td
, 
job«me
, 
job_add_num
, 0);

1444 
i
 = 0; i < 
o
->
ƒ_fûes
; i++)

1445 
	`add_fûe
(
td
, 
	`make_fûíame
(
‚ame
, (‚ame), 
o
, 
job«me
, 
job_add_num
, 
i
), job_add_num, 0);

1449 i‡(
	`fixup_›ti⁄s
(
td
))

1450 
îr
;

1455 i‡(!
	`waô_f‹_ok
(
job«me
, 
o
))

1456 
îr
;

1458 
	`Êow_öô_job
(
td
);

1464 i‡(
td
->
eo
)

1465 *(
thªad_d©a
 **)
td
->
eo
 = 
NULL
;

1467 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
)) {

1468 
fio_fûe
 *
f
;

1470 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1471 
f
->
ªÆ_fûe_size
 = -1ULL;

1474 
td
->
muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_LOCKED
);

1476 
td
->
ts
.
˛©_≥r˚¡ûes
 = 
o
->clat_percentiles;

1477 
td
->
ts
.
œt_≥r˚¡ûes
 = 
o
->lat_percentiles;

1478 
td
->
ts
.
≥r˚¡ûe_¥ecisi⁄
 = 
o
->percentile_precision;

1479 
	`mem˝y
(
td
->
ts
.
≥r˚¡ûe_li°
, 
o
->percentile_list, (o->percentile_list));

1480 
td
->
ts
.
sig_figs
 = 
o
->sig_figs;

1482 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1483 
td
->
ts
.
˛©_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

1484 
td
->
ts
.
¶©_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

1485 
td
->
ts
.
œt_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

1486 
td
->
ts
.
bw_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

1487 
td
->
ts
.
i›s_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

1489 
td
->
ts
.
sync_°©
.
mö_vÆ
 = 
ULONG_MAX
;

1490 
td
->
ddú_£q_ƒ
 = 
o
->ddir_seq_nr;

1492 i‡((
o
->
°⁄ewÆl
 || o->
√w_group
Ë&& 
¥ev_group_jobs
) {

1493 
¥ev_group_jobs
 = 0;

1494 
groupid
++;

1495 i‡(
groupid
 =
INT_MAX
) {

1496 
	`log_îr
("fio:Åoo many groups defined\n");

1497 
îr
;

1501 
td
->
groupid
 = groupid;

1502 
¥ev_group_jobs
++;

1504 i‡(
	`£tup_øndom_£eds
(
td
)) {

1505 
	`td_vîr‹
(
td
, 
î∫o
, "setup_random_seeds");

1506 
îr
;

1509 i‡(
	`£tup_øã
(
td
))

1510 
îr
;

1512 i‡(
o
->
wrôe_œt_log
) {

1513 
log_∑øms
 
p
 = {

1514 .
td
 =Åd,

1515 .
avg_m£c
 = 
o
->
log_avg_m£c
,

1516 .
hi°_m£c
 = 
o
->
log_hi°_m£c
,

1517 .
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
,

1518 .
log_ty≥
 = 
IO_LOG_TYPE_LAT
,

1519 .
log_off£t
 = 
o
->log_offset,

1520 .
log_gz
 = 
o
->log_gz,

1521 .
log_gz_°‹e
 = 
o
->log_gz_store,

1523 c⁄° *
¥e
 = 
o
->
œt_log_fûe
 ? o->œt_log_fûê: o->
«me
;

1524 c⁄° *
suf
;

1526 i‡(
p
.
log_gz_°‹e
)

1527 
suf
 = "log.fz";

1529 
suf
 = "log";

1531 
	`gí_log_«me
(
log«me
, ÷og«me), "œt", 
¥e
,

1532 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1533 
	`£tup_log
(&
td
->
œt_log
, &
p
, 
log«me
);

1535 
	`gí_log_«me
(
log«me
, ÷og«me), "¶©", 
¥e
,

1536 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1537 
	`£tup_log
(&
td
->
¶©_log
, &
p
, 
log«me
);

1539 
	`gí_log_«me
(
log«me
, ÷og«me), "˛©", 
¥e
,

1540 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1541 
	`£tup_log
(&
td
->
˛©_log
, &
p
, 
log«me
);

1544 i‡(
o
->
wrôe_hi°_log
) {

1545 
log_∑øms
 
p
 = {

1546 .
td
 =Åd,

1547 .
avg_m£c
 = 
o
->
log_avg_m£c
,

1548 .
hi°_m£c
 = 
o
->
log_hi°_m£c
,

1549 .
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
,

1550 .
log_ty≥
 = 
IO_LOG_TYPE_HIST
,

1551 .
log_off£t
 = 
o
->log_offset,

1552 .
log_gz
 = 
o
->log_gz,

1553 .
log_gz_°‹e
 = 
o
->log_gz_store,

1555 c⁄° *
¥e
 = 
o
->
hi°_log_fûe
 ? o->hi°_log_fûê: o->
«me
;

1556 c⁄° *
suf
;

1558 #i‚de‡
CONFIG_ZLIB


1559 i‡(
td
->
˛õ¡_ty≥
) {

1560 
	`log_îr
("fio: --write_hist_logÑequires zlib in client/server mode\n");

1561 
îr
;

1565 i‡(
p
.
log_gz_°‹e
)

1566 
suf
 = "log.fz";

1568 
suf
 = "log";

1570 
	`gí_log_«me
(
log«me
, ÷og«me), "˛©_hi°", 
¥e
,

1571 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1572 
	`£tup_log
(&
td
->
˛©_hi°_log
, &
p
, 
log«me
);

1575 i‡(
o
->
wrôe_bw_log
) {

1576 
log_∑øms
 
p
 = {

1577 .
td
 =Åd,

1578 .
avg_m£c
 = 
o
->
log_avg_m£c
,

1579 .
hi°_m£c
 = 
o
->
log_hi°_m£c
,

1580 .
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
,

1581 .
log_ty≥
 = 
IO_LOG_TYPE_BW
,

1582 .
log_off£t
 = 
o
->log_offset,

1583 .
log_gz
 = 
o
->log_gz,

1584 .
log_gz_°‹e
 = 
o
->log_gz_store,

1586 c⁄° *
¥e
 = 
o
->
bw_log_fûe
 ? o->bw_log_fûê: o->
«me
;

1587 c⁄° *
suf
;

1589 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
bw_avg_time
))

1590 
p
.
avg_m£c
 = 
	`mö
(
o
->
log_avg_m£c
, o->
bw_avg_time
);

1592 
o
->
bw_avg_time
 = 
p
.
avg_m£c
;

1594 
p
.
hi°_m£c
 = 
o
->
log_hi°_m£c
;

1595 
p
.
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
;

1597 i‡(
p
.
log_gz_°‹e
)

1598 
suf
 = "log.fz";

1600 
suf
 = "log";

1602 
	`gí_log_«me
(
log«me
, ÷og«me), "bw", 
¥e
,

1603 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1604 
	`£tup_log
(&
td
->
bw_log
, &
p
, 
log«me
);

1606 i‡(
o
->
wrôe_i›s_log
) {

1607 
log_∑øms
 
p
 = {

1608 .
td
 =Åd,

1609 .
avg_m£c
 = 
o
->
log_avg_m£c
,

1610 .
hi°_m£c
 = 
o
->
log_hi°_m£c
,

1611 .
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
,

1612 .
log_ty≥
 = 
IO_LOG_TYPE_IOPS
,

1613 .
log_off£t
 = 
o
->log_offset,

1614 .
log_gz
 = 
o
->log_gz,

1615 .
log_gz_°‹e
 = 
o
->log_gz_store,

1617 c⁄° *
¥e
 = 
o
->
i›s_log_fûe
 ? o->i›s_log_fûê: o->
«me
;

1618 c⁄° *
suf
;

1620 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
i›s_avg_time
))

1621 
p
.
avg_m£c
 = 
	`mö
(
o
->
log_avg_m£c
, o->
i›s_avg_time
);

1623 
o
->
i›s_avg_time
 = 
p
.
avg_m£c
;

1625 
p
.
hi°_m£c
 = 
o
->
log_hi°_m£c
;

1626 
p
.
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
;

1628 i‡(
p
.
log_gz_°‹e
)

1629 
suf
 = "log.fz";

1631 
suf
 = "log";

1633 
	`gí_log_«me
(
log«me
, ÷og«me), "i›s", 
¥e
,

1634 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1635 
	`£tup_log
(&
td
->
i›s_log
, &
p
, 
log«me
);

1638 i‡(!
o
->
«me
)

1639 
o
->
«me
 = 
	`°rdup
(
job«me
);

1641 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

1642 i‡(!
job_add_num
) {

1643 i‡(
is_backíd
 && !
ªcur£d
)

1644 
	`fio_£rvî_£nd_add_job
(
td
);

1646 i‡(!
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
)) {

1647 *
c1
, *
c2
, *
c3
, *
c4
;

1648 *
c5
 = 
NULL
, *
c6
 = NULL;

1649 
i2p
 = 
	`is_powî_of_2
(
o
->
kb_ba£
);

1651 
c1
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_READ
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1652 
c2
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_READ
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1653 
c3
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_WRITE
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1654 
c4
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_WRITE
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1656 i‡(!
o
->
bs_is_£q_ønd
) {

1657 
c5
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_TRIM
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1658 
c6
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_TRIM
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1661 
	`log_öfo
("%s: (g=%d):Ñw=%s, ", 
td
->
o
.
«me
,

1662 
td
->
groupid
,

1663 
	`ddú_°r
(
o
->
td_ddú
));

1665 i‡(
o
->
bs_is_£q_ønd
)

1666 
	`log_öfo
("bs=(R) %s-%s, (W) %s-%s, bs_is_seq_rand, ",

1667 
c1
, 
c2
, 
c3
, 
c4
);

1669 
	`log_öfo
("bs=(R) %s-%s, (W) %s-%s, (T) %s-%s, ",

1670 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
);

1672 
	`log_öfo
("ioengine=%s, iodepth=%u\n",

1673 
td
->
io_›s
->
«me
, 
o
->
iodïth
);

1675 
	`‰ì
(
c1
);

1676 
	`‰ì
(
c2
);

1677 
	`‰ì
(
c3
);

1678 
	`‰ì
(
c4
);

1679 
	`‰ì
(
c5
);

1680 
	`‰ì
(
c6
);

1682 } i‡(
job_add_num
 == 1)

1683 
	`log_öfo
("...\n");

1686 i‡(
	`td_°ódy°©e_öô
(
td
))

1687 
îr
;

1693 
numjobs
 = 
o
->numjobs;

1694 --
numjobs
) {

1695 
thªad_d©a
 *
td_√w
 = 
	`gë_√w_job
(
Ál£
, 
td
, 
åue
, 
job«me
);

1697 i‡(!
td_√w
)

1698 
îr
;

1700 
td_√w
->
o
.
numjobs
 = 1;

1701 
td_√w
->
o
.
°⁄ewÆl
 = 0;

1702 
td_√w
->
o
.
√w_group
 = 0;

1703 
td_√w
->
subjob_numbî
 = 
numjobs
;

1704 
td_√w
->
o
.
ss_dur
 = o->ss_dur * 1000000l;

1705 
td_√w
->
o
.
ss_limô
 = o->ss_limit;

1707 i‡(
fûe_Ælo˚d
) {

1708 i‡(
td_√w
->
fûes
) {

1709 
fio_fûe
 *
f
;

1710 
	`f‹_óch_fûe
(
td_√w
, 
f
, 
i
) {

1711 i‡(
f
->
fûe_«me
)

1712 
	`s‰ì
(
f
->
fûe_«me
);

1713 
	`s‰ì
(
f
);

1715 
	`‰ì
(
td_√w
->
fûes
);

1716 
td_√w
->
fûes
 = 
NULL
;

1718 
td_√w
->
fûes_ödex
 = 0;

1719 
td_√w
->
fûes_size
 = 0;

1720 i‡(
td_√w
->
o
.
fûíame
) {

1721 
	`‰ì
(
td_√w
->
o
.
fûíame
);

1722 
td_√w
->
o
.
fûíame
 = 
NULL
;

1726 i‡(
	`add_job
(
td_√w
, 
job«me
, 
numjobs
, 1, 
˛õ¡_ty≥
))

1727 
îr
;

1731 
îr
:

1732 
	`put_job
(
td
);

1734 
	}
}

1739 
	$add_job_›ts
(c⁄° **
o
, 
˛õ¡_ty≥
)

1741 
thªad_d©a
 *
td
, *
td_∑ª¡
;

1742 
i
, 
ö_globÆ
 = 1;

1743 
job«me
[32];

1745 
i
 = 0;

1746 
td_∑ª¡
 = 
td
 = 
NULL
;

1747 
o
[
i
]) {

1748 i‡(!
	`°∫cmp
(
o
[
i
], "name", 4)) {

1749 
ö_globÆ
 = 0;

1750 i‡(
td
)

1751 
	`add_job
(
td
, 
job«me
, 0, 0, 
˛õ¡_ty≥
);

1752 
td
 = 
NULL
;

1753 
	`•rötf
(
job«me
, "%s", 
o
[
i
] + 5);

1755 i‡(
ö_globÆ
 && !
td_∑ª¡
)

1756 
td_∑ª¡
 = 
	`gë_√w_job
(
åue
, &
def_thªad
, 
Ál£
, 
job«me
);

1757 i‡(!
ö_globÆ
 && !
td
) {

1758 i‡(!
td_∑ª¡
)

1759 
td_∑ª¡
 = &
def_thªad
;

1760 
td
 = 
	`gë_√w_job
(
Ál£
, 
td_∑ª¡
, fÆ£, 
job«me
);

1762 i‡(
ö_globÆ
)

1763 
	`fio_›ti⁄s_∑r£
(
td_∑ª¡
, (**Ë&
o
[
i
], 1);

1765 
	`fio_›ti⁄s_∑r£
(
td
, (**Ë&
o
[
i
], 1);

1766 
i
++;

1769 i‡(
td
)

1770 
	`add_job
(
td
, 
job«me
, 0, 0, 
˛õ¡_ty≥
);

1771 
	}
}

1773 
	$skù_this_£˘i⁄
(c⁄° *
«me
)

1775 
i
;

1777 i‡(!
ƒ_job_£˘i⁄s
)

1779 i‡(!
	`°∫cmp
(
«me
, "global", 6))

1782 
i
 = 0; i < 
ƒ_job_£˘i⁄s
; i++)

1783 i‡(!
	`°rcmp
(
job_£˘i⁄s
[
i
], 
«me
))

1787 
	}
}

1789 
	$is_em±y_‹_commít
(*
löe
)

1791 
i
;

1793 
i
 = 0; i < 
	`°æí
(
löe
); i++) {

1794 i‡(
löe
[
i
] == ';')

1796 i‡(
löe
[
i
] == '#')

1798 i‡(!
	`is•a˚
((Ë
löe
[
i
]Ë&& !
	`is˙ål
(()Üine[i]))

1803 
	}
}

1808 
	$__∑r£_jobs_öi
(
thªad_d©a
 *
td
,

1809 *
fûe
, 
is_buf
, 
°⁄ewÆl_Êag
, 
ty≥
,

1810 
√°ed
, *
«me
, ***
p›ts
, *
a›ts
, *
n›ts
)

1812 
boﬁ
 
globÆ
 = 
Ál£
;

1813 *
°rög
;

1814 
FILE
 *
f
;

1815 *
p
;

1816 
ªt
 = 0, 
°⁄ewÆl
;

1817 
fú°_£˘
 = 1;

1818 
skù_fgës
 = 0;

1819 
öside_skù
 = 0;

1820 **
›ts
;

1821 
i
, 
Æloc_›ts
, 
num_›ts
;

1823 
	`d¥öt
(
FD_PARSE
, "P¨sög inòfûê%s\n", 
fûe
);

1824 
	`as£π
(
td
 || !
√°ed
);

1826 i‡(
is_buf
)

1827 
f
 = 
NULL
;

1829 i‡(!
	`°rcmp
(
fûe
, "-"))

1830 
f
 = 
°dö
;

1832 
f
 = 
	`f›í
(
fûe
, "r");

1834 i‡(!
f
) {

1835 
__îr
 = 
î∫o
;

1837 
	`log_îr
("fio: u«bÀÅÿ›í '%s' job fûe\n", 
fûe
);

1838 i‡(
td
)

1839 
	`td_vîr‹
(
td
, 
__îr
, "job file open");

1844 
°rög
 = 
	`mÆloc
(4096);

1849 i‡(!
√°ed
) {

1850 
«me
 = 
	`mÆloc
(280);

1851 
	`mem£t
(
«me
, 0, 280);

1854 
›ts
 = 
NULL
;

1855 i‡(
√°ed
 && 
p›ts
) {

1856 
›ts
 = *
p›ts
;

1857 
Æloc_›ts
 = *
a›ts
;

1858 
num_›ts
 = *
n›ts
;

1861 i‡(!
›ts
) {

1862 
Æloc_›ts
 = 8;

1863 
›ts
 = 
	`mÆloc
((*Ë* 
Æloc_›ts
);

1864 
num_›ts
 = 0;

1867 
°⁄ewÆl
 = 
°⁄ewÆl_Êag
;

1873 i‡(!
skù_fgës
) {

1874 i‡(
is_buf
)

1875 
p
 = 
	`°r£p
(&
fûe
, "\n");

1877 
p
 = 
	`fgës
(
°rög
, 4096, 
f
);

1878 i‡(!
p
)

1882 
skù_fgës
 = 0;

1883 
	`°rù_bœnk_‰⁄t
(&
p
);

1884 
	`°rù_bœnk_íd
(
p
);

1886 
	`d¥öt
(
FD_PARSE
, "%s\n", 
p
);

1887 i‡(
	`is_em±y_‹_commít
(
p
))

1890 i‡(!
√°ed
) {

1891 i‡(
	`ssˇnf
(
p
, "[%255[^\n]]", 
«me
) != 1) {

1892 i‡(
öside_skù
)

1895 
	`log_îr
("fio: option <%s> outside of "

1896 "[] job se˘i⁄\n", 
p
);

1897 
ªt
 = 1;

1901 
«me
[
	`°æí
(name) - 1] = '\0';

1903 i‡(
	`skù_this_£˘i⁄
(
«me
)) {

1904 
öside_skù
 = 1;

1907 
öside_skù
 = 0;

1909 
	`d¥öt
(
FD_PARSE
, "P¨sög se˘i⁄ [%s]\n", 
«me
);

1911 
globÆ
 = !
	`°∫cmp
(
«me
, "global", 6);

1913 i‡(
dump_cmdlöe
) {

1914 i‡(
fú°_£˘
)

1915 
	`log_öfo
("fio ");

1916 i‡(!
globÆ
)

1917 
	`log_öfo
("--«me=%†", 
«me
);

1918 
fú°_£˘
 = 0;

1921 
td
 = 
	`gë_√w_job
(
globÆ
, &
def_thªad
, 
Ál£
, 
«me
);

1922 i‡(!
td
) {

1923 
ªt
 = 1;

1930 i‡(!
globÆ
 && 
°⁄ewÆl
) {

1931 
td
->
o
.
°⁄ewÆl
 = stonewall;

1932 
°⁄ewÆl
 = 0;

1935 
num_›ts
 = 0;

1936 
	`mem£t
(
›ts
, 0, 
Æloc_›ts
 * (*));

1939 
skù_fgës
 = 1;

1942 i‡(!
skù_fgës
) {

1943 i‡(
is_buf
)

1944 
p
 = 
	`°r£p
(&
fûe
, "\n");

1946 
p
 = 
	`fgës
(
°rög
, 4096, 
f
);

1947 i‡(!
p
)

1949 
	`d¥öt
(
FD_PARSE
, "%s", 
p
);

1952 
skù_fgës
 = 0;

1954 i‡(
	`is_em±y_‹_commít
(
p
))

1957 
	`°rù_bœnk_‰⁄t
(&
p
);

1963 i‡(
p
[0] == '[') {

1964 i‡(
√°ed
) {

1965 
	`log_îr
("NoÇew sections in included files\n");

1969 
skù_fgës
 = 1;

1973 
	`°rù_bœnk_íd
(
p
);

1975 i‡(!
	`°∫cmp
(
p
, "ö˛ude", 
	`°æí
("include"))) {

1976 *
fûíame
 = 
p
 + 
	`°æí
("include") + 1,

1977 *
ts
, *
fuŒ_‚
 = 
NULL
;

1983 i‡(
	`ac˚ss
(
fûíame
, 
F_OK
) &&

1984 (
ts
 = 
	`°ºchr
(
fûe
, '/'))) {

1985 
Àn
 = 
ts
 - 
fûe
 +

1986 
	`°æí
(
fûíame
) + 2;

1988 i‡(!(
fuŒ_‚
 = 
	`ˇŒoc
(1, 
Àn
))) {

1989 
ªt
 = 
ENOMEM
;

1993 
	`°∫˝y
(
fuŒ_‚
,

1994 
fûe
, (
ts
 - file) + 1);

1995 
	`°∫˝y
(
fuŒ_‚
 + (
ts
 - 
fûe
) + 1,

1996 
fûíame
, 
	`°æí
(filename));

1997 
fuŒ_‚
[
Àn
 - 1] = 0;

1998 
fûíame
 = 
fuŒ_‚
;

2001 
ªt
 = 
	`__∑r£_jobs_öi
(
td
, 
fûíame
, 
is_buf
,

2002 
°⁄ewÆl_Êag
, 
ty≥
, 1,

2003 
«me
, &
›ts
,

2004 &
Æloc_›ts
, &
num_›ts
);

2006 i‡(
ªt
) {

2007 
	`log_îr
("Error %d whileÖarsing "

2009 
ªt
, 
fûíame
);

2012 i‡(
fuŒ_‚
)

2013 
	`‰ì
(
fuŒ_‚
);

2015 i‡(
ªt
)

2021 i‡(
num_›ts
 =
Æloc_›ts
) {

2022 
Æloc_›ts
 <<= 1;

2023 
›ts
 = 
	`ªÆloc
(opts,

2024 
Æloc_›ts
 * (*));

2027 
›ts
[
num_›ts
] = 
	`°rdup
(
p
);

2028 
num_›ts
++;

2031 i‡(
√°ed
) {

2032 *
p›ts
 = 
›ts
;

2033 *
a›ts
 = 
Æloc_›ts
;

2034 *
n›ts
 = 
num_›ts
;

2035 
out
;

2038 
ªt
 = 
	`fio_›ti⁄s_∑r£
(
td
, 
›ts
, 
num_›ts
);

2039 i‡(!
ªt
) {

2040 i‡(
dump_cmdlöe
)

2041 
	`dump_›t_li°
(
td
);

2043 
ªt
 = 
	`add_job
(
td
, 
«me
, 0, 0, 
ty≥
);

2045 
	`log_îr
("fio: job %†dr›≥d\n", 
«me
);

2046 
	`put_job
(
td
);

2049 
i
 = 0; i < 
num_›ts
; i++)

2050 
	`‰ì
(
›ts
[
i
]);

2051 
num_›ts
 = 0;

2052 } !
ªt
);

2054 i‡(
dump_cmdlöe
)

2055 
	`log_öfo
("\n");

2057 
i
 = 0;

2058 
i
 < 
ƒ_job_£˘i⁄s
) {

2059 
	`‰ì
(
job_£˘i⁄s
[
i
]);

2060 
i
++;

2063 
	`‰ì
(
›ts
);

2064 
out
:

2065 
	`‰ì
(
°rög
);

2066 i‡(!
√°ed
)

2067 
	`‰ì
(
«me
);

2068 i‡(!
is_buf
 && 
f
 !
°dö
)

2069 
	`f˛o£
(
f
);

2070  
ªt
;

2071 
	}
}

2073 
	$∑r£_jobs_öi
(*
fûe
, 
is_buf
, 
°⁄ewÆl_Êag
, 
ty≥
)

2075  
	`__∑r£_jobs_öi
(
NULL
, 
fûe
, 
is_buf
, 
°⁄ewÆl_Êag
, 
ty≥
,

2076 0, 
NULL
, NULL, NULL, NULL);

2077 
	}
}

2079 
	$fûl_def_thªad
()

2081 
	`mem£t
(&
def_thªad
, 0, (def_thread));

2082 
	`INIT_FLIST_HEAD
(&
def_thªad
.
›t_li°
);

2084 
	`fio_gëafföôy
(
	`gëpid
(), &
def_thªad
.
o
.
˝umask
);

2085 
def_thªad
.
o
.
îr‹_dump
 = 1;

2090 
	`fio_fûl_deÁu…_›ti⁄s
(&
def_thªad
);

2092 
	}
}

2094 
	$show_debug_ˇãg‹õs
()

2096 #ifde‡
FIO_INC_DEBUG


2097 c⁄° 
debug_Àvñ
 *
dl
 = &
debug_Àvñs
[0];

2098 
cuæí
, 
fú°
 = 1;

2100 
cuæí
 = 0;

2101 
dl
->
«me
) {

2102 
has_√xt
 = (
dl
 + 1)->
«me
 !
NULL
;

2104 i‡(
fú°
 || 
cuæí
 + 
	`°æí
(
dl
->
«me
) >= 80) {

2105 i‡(!
fú°
) {

2106 
	`¥ötf
("\n");

2107 
cuæí
 = 0;

2109 
cuæí
 +
	`¥ötf
("\t\t\t%s", 
dl
->
«me
);

2110 
cuæí
 += 3 * (8 - 1);

2111 i‡(
has_√xt
)

2112 
cuæí
 +
	`¥ötf
(",");

2114 
cuæí
 +
	`¥ötf
("%s", 
dl
->
«me
);

2115 i‡(
has_√xt
)

2116 
cuæí
 +
	`¥ötf
(",");

2118 
dl
++;

2119 
fú°
 = 0;

2121 
	`¥ötf
("\n");

2123 
	}
}

2130 
	$ußge
(c⁄° *
«me
)

2132 
	`¥ötf
("%s\n", 
fio_vîsi⁄_°rög
);

2133 
	`¥ötf
("%†[›ti⁄s] [job o±i⁄s] <job fûe(s)>\n", 
«me
);

2134 
	`¥ötf
(" --debug=options\tEnable debugÜogging. May be one/more of:\n");

2135 
	`show_debug_ˇãg‹õs
();

2136 
	`¥ötf
(" --parse-only\t\tParse options only, don't startány IO\n");

2137 
	`¥ötf
(" --output\t\tWrite outputÅo file\n");

2138 
	`¥ötf
(" --bandwidth-log\tGenerateággregate bandwidthÜogs\n");

2139 
	`¥ötf
(" --minimal\t\tMinimal (terse) output\n");

2140 
	`¥ötf
(" --output-format=type\tOutput format (terse,json,json+,normal)\n");

2141 
	`¥ötf
(" --terse-version=type\tSetÅerse version output format"

2143 
	`¥ötf
(" --version\t\tPrint version infoándÉxit\n");

2144 
	`¥ötf
(" --help\t\tPrintÅhisÖage\n");

2145 
	`¥ötf
(" --cpuclock-test\tPerformÅest/validation of CPU clock\n");

2146 
	`¥ötf
(" --crctest=[type]\tTest speed of checksum functions\n");

2147 
	`¥ötf
(" --cmdhelp=cmd\t\tPrint command help, \"all\" foráll of"

2149 
	`¥ötf
(" --enghelp=engine\tPrint ioengine help, orÜist"

2151 
	`¥ötf
(" --enghelp=engine,cmd\tPrint help forán ioengine"

2153 
	`¥ötf
(" --showcmd\t\tTurná job file into commandÜine options\n");

2154 
	`¥ötf
(" --eta=when\t\tWhen ETAÉstimate should beÖrinted\n");

2155 
	`¥ötf
(" \t\tMay be \"always\", \"never\" or \"auto\"\n");

2156 
	`¥ötf
(" --eta-newline=time\tForceáÇewÜine forÉvery 'time'");

2157 
	`¥ötf
("ÖeriodÖassed\n");

2158 
	`¥ötf
(" --status-interval=t\tForce full status dumpÉvery");

2159 
	`¥ötf
(" 't'ÖeriodÖassed\n");

2160 
	`¥ötf
(" --readonly\t\tTurn on safetyÑead-only checks,Öreventing"

2162 
	`¥ötf
(" --section=name\tOnlyÑun specified section in job file,"

2164 
	`¥ötf
(" --alloc-size=kb\tSet smallocÖoolÅoÅhis size in kb"

2166 
	`¥ötf
(" --warnings-fatal\tFioÖarser warningsáre fatal\n");

2167 
	`¥ötf
(" --max-jobs=nr\t\tMaximumÇumber ofÅhreads/processesÅo support\n");

2168 
	`¥ötf
(" --server=args\t\tStartá backend fio server\n");

2169 
	`¥ötf
(" --daemonize=pidfile\tBackground fio server, writeÖidÅo file\n");

2170 
	`¥ötf
(" --client=hostname\tTalkÅoÑemote backend(s) fio serverát hostname\n");

2171 
	`¥ötf
(" --remote-config=file\tTell fio serverÅoÜoadÅhisÜocal job file\n");

2172 
	`¥ötf
(" --idle-prof=option\tReport cpu idleness oná system orÖercpu basis\n"

2175 #ifde‡
CONFIG_ZLIB


2176 
	`¥ötf
(" --inflate-log=log\tInflateánd output compressedÜog\n");

2178 
	`¥ötf
(" --trigger-file=file\tExecuteÅrigger cmd when fileÉxists\n");

2179 
	`¥ötf
(" --trigger-timeout=t\tExecuteÅriggerátÅhisÅime\n");

2180 
	`¥ötf
(" --trigger=cmd\t\tSetÅhis commandásÜocalÅrigger\n");

2181 
	`¥ötf
(" --trigger-remote=cmd\tSetÅhis commandásÑemoteÅrigger\n");

2182 
	`¥ötf
(" --aux-path=path\tUseÅhisÖath for fio state generated files\n");

2183 
	`¥ötf
("\nFio was written by Jens Axboe <axboe@kernel.dk>\n");

2184 
	}
}

2186 #ifde‡
FIO_INC_DEBUG


2187 c⁄° 
debug_Àvñ
 
	gdebug_Àvñs
[] = {

2188 { .
«me
 = "process",

2189 .
	ghñp
 = "Process creation/exitÜogging",

2190 .
	gshi·
 = 
FD_PROCESS
,

2192 { .
	g«me
 = "file",

2193 .
	ghñp
 = "FileÑelatedáctionÜogging",

2194 .
	gshi·
 = 
FD_FILE
,

2196 { .
	g«me
 = "io",

2197 .
	ghñp
 = "IOánd IOÉngineáctionÜogging (offsets, queue, completions,Étc)",

2198 .
	gshi·
 = 
FD_IO
,

2200 { .
	g«me
 = "mem",

2201 .
	ghñp
 = "Memoryállocation/freeingÜogging",

2202 .
	gshi·
 = 
FD_MEM
,

2204 { .
	g«me
 = "blktrace",

2205 .
	ghñp
 = "blktraceáctionÜogging",

2206 .
	gshi·
 = 
FD_BLKTRACE
,

2208 { .
	g«me
 = "verify",

2209 .
	ghñp
 = "IO verificationáctionÜogging",

2210 .
	gshi·
 = 
FD_VERIFY
,

2212 { .
	g«me
 = "random",

2213 .
	ghñp
 = "Random generationÜogging",

2214 .
	gshi·
 = 
FD_RANDOM
,

2216 { .
	g«me
 = "parse",

2217 .
	ghñp
 = "ParserÜogging",

2218 .
	gshi·
 = 
FD_PARSE
,

2220 { .
	g«me
 = "diskutil",

2221 .
	ghñp
 = "Disk utilityÜoggingáctions",

2222 .
	gshi·
 = 
FD_DISKUTIL
,

2224 { .
	g«me
 = "job",

2225 .
	ghñp
 = "LoggingÑelatedÅo creating/destroying jobs",

2226 .
	gshi·
 = 
FD_JOB
,

2228 { .
	g«me
 = "mutex",

2229 .
	ghñp
 = "MutexÜogging",

2230 .
	gshi·
 = 
FD_MUTEX


2232 { .
	g«me
 = "profile",

2233 .
	ghñp
 = "LoggingÑelatedÅoÖrofiles",

2234 .
	gshi·
 = 
FD_PROFILE
,

2236 { .
	g«me
 = "time",

2237 .
	ghñp
 = "LoggingÑelatedÅoÅime keeping functions",

2238 .
	gshi·
 = 
FD_TIME
,

2240 { .
	g«me
 = "net",

2241 .
	ghñp
 = "NetworkÜogging",

2242 .
	gshi·
 = 
FD_NET
,

2244 { .
	g«me
 = "rate",

2245 .
	ghñp
 = "RateÜogging",

2246 .
	gshi·
 = 
FD_RATE
,

2248 { .
	g«me
 = "compress",

2249 .
	ghñp
 = "Log compressionÜogging",

2250 .
	gshi·
 = 
FD_COMPRESS
,

2252 { .
	g«me
 = "steadystate",

2253 .
	ghñp
 = "Steady state detectionÜogging",

2254 .
	gshi·
 = 
FD_STEADYSTATE
,

2256 { .
	g«me
 = "helperthread",

2257 .
	ghñp
 = "HelperÅhreadÜogging",

2258 .
	gshi·
 = 
FD_HELPERTHREAD
,

2260 { .
	g«me
 = 
NULL
, },

2263 
	$£t_debug
(c⁄° *
°rög
)

2265 c⁄° 
debug_Àvñ
 *
dl
;

2266 *
p
 = (*Ë
°rög
;

2267 *
›t
;

2268 
i
;

2270 i‡(!
°rög
)

2273 i‡(!
	`°rcmp
(
°rög
, "?") || !strcmp(string, "help")) {

2274 
	`log_öfo
("fio: dumping debug options:");

2275 
i
 = 0; 
debug_Àvñs
[i].
«me
; i++) {

2276 
dl
 = &
debug_Àvñs
[
i
];

2277 
	`log_öfo
("%s,", 
dl
->
«me
);

2279 
	`log_öfo
("all\n");

2283 (
›t
 = 
	`°r£p
(&
p
, ",")Ë!
NULL
) {

2284 
found
 = 0;

2286 i‡(!
	`°∫cmp
(
›t
, "all", 3)) {

2287 
	`log_öfo
("fio: setáll debug options\n");

2288 
fio_debug
 = ~0UL;

2292 
i
 = 0; 
debug_Àvñs
[i].
«me
; i++) {

2293 
dl
 = &
debug_Àvñs
[
i
];

2294 
found
 = !
	`°∫cmp
(
›t
, 
dl
->
«me
, 
	`°æí
(dl->name));

2295 i‡(!
found
)

2298 i‡(
dl
->
shi·
 =
FD_JOB
) {

2299 
›t
 = 
	`°rchr
(opt, ':');

2300 i‡(!
›t
) {

2301 
	`log_îr
("fio: missing jobÇumber\n");

2304 
›t
++;

2305 
fio_debug_jobno
 = 
	`©oi
(
›t
);

2306 
	`log_öfo
("fio: set debug jobno %d\n",

2307 
fio_debug_jobno
);

2309 
	`log_öfo
("fio: së debug o±i⁄ %s\n", 
›t
);

2310 
fio_debug
 |(1UL << 
dl
->
shi·
);

2315 i‡(!
found
)

2316 
	`log_îr
("fio: debug mask %†nŸ found\n", 
›t
);

2319 
	}
}

2321 
	$£t_debug
(c⁄° *
°rög
)

2323 
	`log_îr
("fio: debugÅracingÇot included in build\n");

2325 
	}
}

2328 
	$fio_›ti⁄s_fûl_›t°rög
()

2330 *
o°r
 = 
cmd_›t°r
;

2331 
i
, 
c
;

2333 
c
 = 
i
 = 0;

2334 
l_›ts
[
i
].
«me
) {

2335 
o°r
[
c
++] = 
l_›ts
[
i
].
vÆ
;

2336 i‡(
l_›ts
[
i
].
has_¨g
 =
ªquúed_¨gumít
)

2337 
o°r
[
c
++] = ':';

2338 i‡(
l_›ts
[
i
].
has_¨g
 =
›ti⁄Æ_¨gumít
) {

2339 
o°r
[
c
++] = ':';

2340 
o°r
[
c
++] = ':';

2342 
i
++;

2344 
o°r
[
c
] = '\0';

2345 
	}
}

2347 
	$˛õ¡_Êag_£t
(
c
)

2349 
i
;

2351 
i
 = 0;

2352 
l_›ts
[
i
].
«me
) {

2353 
vÆ
 = 
l_›ts
[
i
].val;

2355 i‡(
c
 =(
vÆ
 & 0xff))

2356  (
vÆ
 & 
FIO_CLIENT_FLAG
);

2358 
i
++;

2362 
	}
}

2364 
	$∑r£_cmd_˛õ¡
(*
˛õ¡
, *
›t
)

2366 
	`fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, 
›t
);

2367 
	}
}

2369 
	$show_˛o£°_›ti⁄
(c⁄° *
«me
)

2371 
be°_›ti⁄
, 
be°_di°™˚
;

2372 
i
, 
di°™˚
;

2374 *
«me
 == '-')

2375 
«me
++;

2377 
be°_›ti⁄
 = -1;

2378 
be°_di°™˚
 = 
INT_MAX
;

2379 
i
 = 0;

2380 
l_›ts
[
i
].
«me
) {

2381 
di°™˚
 = 
	`°rög_di°™˚
(
«me
, 
l_›ts
[
i
].name);

2382 i‡(
di°™˚
 < 
be°_di°™˚
) {

2383 
be°_di°™˚
 = 
di°™˚
;

2384 
be°_›ti⁄
 = 
i
;

2386 
i
++;

2389 i‡(
be°_›ti⁄
 !-1 && 
	`°rög_di°™˚_ok
(
«me
, 
be°_di°™˚
))

2390 
	`log_îr
("Did you mó¿%s?\n", 
l_›ts
[
be°_›ti⁄
].
«me
);

2391 
	}
}

2393 
	$∑r£_ouçut_f‹m©
(c⁄° *
›èrg
)

2395 *
p
, *
‹ig
, *
›t
;

2396 
ªt
 = 0;

2398 
p
 = 
‹ig
 = 
	`°rdup
(
›èrg
);

2400 
ouçut_f‹m©
 = 0;

2402 (
›t
 = 
	`°r£p
(&
p
, ",")Ë!
NULL
) {

2403 i‡(!
	`°rcmp
(
›t
, "minimal") ||

2404 !
	`°rcmp
(
›t
, "terse") ||

2405 !
	`°rcmp
(
›t
, "csv"))

2406 
ouçut_f‹m©
 |
FIO_OUTPUT_TERSE
;

2407 i‡(!
	`°rcmp
(
›t
, "json"))

2408 
ouçut_f‹m©
 |
FIO_OUTPUT_JSON
;

2409 i‡(!
	`°rcmp
(
›t
, "json+"))

2410 
ouçut_f‹m©
 |(
FIO_OUTPUT_JSON
 | 
FIO_OUTPUT_JSON_PLUS
);

2411 i‡(!
	`°rcmp
(
›t
, "normal"))

2412 
ouçut_f‹m©
 |
FIO_OUTPUT_NORMAL
;

2414 
	`log_îr
("fio: invÆid ouçuàf‹m© %s\n", 
›t
);

2415 
ªt
 = 1;

2420 
	`‰ì
(
‹ig
);

2421  
ªt
;

2422 
	}
}

2424 
	$∑r£_cmd_löe
(
¨gc
, *
¨gv
[], 
˛õ¡_ty≥
)

2426 
thªad_d©a
 *
td
 = 
NULL
;

2427 
c
, 
öi_idx
 = 0, 
lidx
, 
ªt
 = 0, 
do_exô
 = 0, 
exô_vÆ
 = 0;

2428 *
o°r
 = 
cmd_›t°r
;

2429 *
pid_fûe
 = 
NULL
;

2430 *
cur_˛õ¡
 = 
NULL
;

2431 
backíd
 = 0;

2437 
›töd
 = 1;

2439 (
c
 = 
	`gë›t_l⁄g_⁄ly
(
¨gc
, 
¨gv
, 
o°r
, 
l_›ts
, &
lidx
)) != -1) {

2440 i‡((
c
 & 
FIO_CLIENT_FLAG
Ë|| 
	`˛õ¡_Êag_£t
(c)) {

2441 
	`∑r£_cmd_˛õ¡
(
cur_˛õ¡
, 
¨gv
[
›töd
 - 1]);

2442 
c
 &~
FIO_CLIENT_FLAG
;

2445 
c
) {

2447 
smÆloc_poﬁ_size
 = 
	`©oi
(
›èrg
);

2448 
smÆloc_poﬁ_size
 <<= 10;

2449 
	`söô
();

2452 
	`log_îr
("fio: --latency-log is deprecated. UseÖer-jobÜatencyÜog options.\n");

2453 
do_exô
++;

2454 
exô_vÆ
 = 1;

2457 
wrôe_bw_log
 = 1;

2460 
FILE
 *
tmp
;

2462 i‡(
f_out
 && f_ouà!
°dout
)

2463 
	`f˛o£
(
f_out
);

2465 
tmp
 = 
	`f›í
(
›èrg
, "w+");

2466 i‡(!
tmp
) {

2467 
	`log_îr
("fio: ouçuàfûê›íÉº‹: %s\n", 
	`°ªº‹
(
î∫o
));

2468 
exô_vÆ
 = 1;

2469 
do_exô
++;

2472 
f_îr
 = 
f_out
 = 
tmp
;

2476 
ouçut_f‹m©
 = 
FIO_OUTPUT_TERSE
;

2479 i‡(
	`∑r£_ouçut_f‹m©
(
›èrg
)) {

2480 
	`log_îr
("fio: failedÖarsing output-format\n");

2481 
exô_vÆ
 = 1;

2482 
do_exô
++;

2487 
ouçut_f‹m©
 |
FIO_OUTPUT_TERSE
;

2490 
did_¨g
 = 
åue
;

2491 i‡(!
cur_˛õ¡
) {

2492 
	`ußge
(
¨gv
[0]);

2493 
do_exô
++;

2497 
did_¨g
 = 
åue
;

2498 i‡(!
cur_˛õ¡
) {

2499 
	`fio_show_›ti⁄_hñp
(
›èrg
);

2500 
do_exô
++;

2504 
did_¨g
 = 
åue
;

2505 i‡(!
cur_˛õ¡
) {

2506 
	`fio_show_i€ngöe_hñp
(
›èrg
);

2507 
do_exô
++;

2511 
did_¨g
 = 
åue
;

2512 
dump_cmdlöe
 = 1;

2515 
ªad_⁄ly
 = 1;

2518 
did_¨g
 = 
åue
;

2519 i‡(!
cur_˛õ¡
) {

2520 
	`log_öfo
("%s\n", 
fio_vîsi⁄_°rög
);

2521 
do_exô
++;

2525 
ãr£_vîsi⁄
 = 
	`©oi
(
›èrg
);

2526 i‡(!(
ãr£_vîsi⁄
 >= 2 &&Åerse_version <= 5)) {

2527 
	`log_îr
("fio: badÅerse version format\n");

2528 
exô_vÆ
 = 1;

2529 
do_exô
++;

2533 i‡(!
	`°rcmp
("Æways", 
›èrg
))

2534 
ëa_¥öt
 = 
FIO_ETA_ALWAYS
;

2535 i‡(!
	`°rcmp
("√vî", 
›èrg
))

2536 
ëa_¥öt
 = 
FIO_ETA_NEVER
;

2539 
t
 = 0;

2541 i‡(
	`check_°r_time
(
›èrg
, &
t
, 1)) {

2542 
	`log_îr
("fio: faûedÖ¨sögÉèÅimê%s\n", 
›èrg
);

2543 
exô_vÆ
 = 1;

2544 
do_exô
++;

2547 
ëa_√w_löe
 = 
t
 / 1000;

2548 i‡(!
ëa_√w_löe
) {

2549 
	`log_îr
("fio:ÉtaÇewÜineÅimeÅoo short\n");

2550 
exô_vÆ
 = 1;

2551 
do_exô
++;

2556 
t
 = 0;

2558 i‡(
	`check_°r_time
(
›èrg
, &
t
, 1)) {

2559 
	`log_îr
("fio: faûedÖ¨sögÉè i¡îvÆ %s\n", 
›èrg
);

2560 
exô_vÆ
 = 1;

2561 
do_exô
++;

2564 
ëa_öãrvÆ_m£c
 = 
t
 / 1000;

2565 i‡(
ëa_öãrvÆ_m£c
 < 
DISK_UTIL_MSEC
) {

2566 
	`log_îr
("fio:Éè i¡îvÆÅimêtoÿsh‹à(%um£¯mö)\n", 
DISK_UTIL_MSEC
);

2567 
exô_vÆ
 = 1;

2568 
do_exô
++;

2573 i‡(
	`£t_debug
(
›èrg
))

2574 
do_exô
++;

2577 
did_¨g
 = 
åue
;

2578 
∑r£_⁄ly
 = 1;

2581 
size_t
 
√w_size
;

2583 i‡(!
	`°rcmp
(
›èrg
, "global")) {

2584 
	`log_îr
("fio: can't use globalás only "

2586 
do_exô
++;

2587 
exô_vÆ
 = 1;

2590 
√w_size
 = (
ƒ_job_£˘i⁄s
 + 1) * (*);

2591 
job_£˘i⁄s
 = 
	`ªÆloc
(job_£˘i⁄s, 
√w_size
);

2592 
job_£˘i⁄s
[
ƒ_job_£˘i⁄s
] = 
	`°rdup
(
›èrg
);

2593 
ƒ_job_£˘i⁄s
++;

2596 #ifde‡
CONFIG_ZLIB


2598 
exô_vÆ
 = 
	`iﬁog_fûe_öÊ©e
(
›èrg
);

2599 
did_¨g
 = 
åue
;

2600 
do_exô
++;

2604 
did_¨g
 = 
åue
;

2605 i‡(
exec_¥ofûe
)

2606 
	`‰ì
(
exec_¥ofûe
);

2607 
exec_¥ofûe
 = 
	`°rdup
(
›èrg
);

2609 
FIO_GETOPT_JOB
: {

2610 c⁄° *
›t
 = 
l_›ts
[
lidx
].
«me
;

2611 *
vÆ
 = 
›èrg
;

2613 i‡(!
	`°∫cmp
(
›t
, "«me", 4Ë&& 
td
) {

2614 
ªt
 = 
	`add_job
(
td
,Åd->
o
.
«me
 ?: "fio", 0, 0, 
˛õ¡_ty≥
);

2615 i‡(
ªt
)

2616 
out_‰ì
;

2617 
td
 = 
NULL
;

2618 
did_¨g
 = 
åue
;

2620 i‡(!
td
) {

2621 
is_£˘i⁄
 = !
	`°∫cmp
(
›t
, "name", 4);

2622 
globÆ
 = 0;

2624 i‡(!
is_£˘i⁄
 || !
	`°∫cmp
(
vÆ
, "global", 6))

2625 
globÆ
 = 1;

2627 i‡(
is_£˘i⁄
 && 
	`skù_this_£˘i⁄
(
vÆ
))

2630 
td
 = 
	`gë_√w_job
(
globÆ
, &
def_thªad
, 
åue
, 
NULL
);

2631 i‡(!
td
 || 
	`i€ngöe_lﬂd
(td)) {

2632 i‡(
td
) {

2633 
	`put_job
(
td
);

2634 
td
 = 
NULL
;

2636 
do_exô
++;

2637 
exô_vÆ
 = 1;

2640 
	`fio_›ti⁄s_£t_i€ngöe_›ts
(
l_›ts
, 
td
);

2643 i‡((!
vÆ
 || !
	`°æí
(val)) &&

2644 
l_›ts
[
lidx
].
has_¨g
 =
ªquúed_¨gumít
) {

2645 
	`log_îr
("fio: o±i⁄ %†ªquúe†™árgumít\n", 
›t
);

2646 
ªt
 = 1;

2648 
ªt
 = 
	`fio_cmd_›ti⁄_∑r£
(
td
, 
›t
, 
vÆ
);

2650 i‡(
ªt
) {

2651 i‡(
td
) {

2652 
	`put_job
(
td
);

2653 
td
 = 
NULL
;

2655 
do_exô
++;

2656 
exô_vÆ
 = 1;

2659 i‡(!
ªt
 && !
	`°rcmp
(
›t
, "ioengine")) {

2660 i‡(
	`i€ngöe_lﬂd
(
td
)) {

2661 
	`put_job
(
td
);

2662 
td
 = 
NULL
;

2663 
do_exô
++;

2664 
exô_vÆ
 = 1;

2667 
	`fio_›ti⁄s_£t_i€ngöe_›ts
(
l_›ts
, 
td
);

2671 
FIO_GETOPT_IOENGINE
: {

2672 c⁄° *
›t
 = 
l_›ts
[
lidx
].
«me
;

2673 *
vÆ
 = 
›èrg
;

2675 i‡(!
td
)

2678 
ªt
 = 
	`fio_cmd_i€ngöe_›ti⁄_∑r£
(
td
, 
›t
, 
vÆ
);

2682 
w¨nögs_Áèl
 = 1;

2685 
max_jobs
 = 
	`©oi
(
›èrg
);

2686 i‡(!
max_jobs
 || max_job†> 
REAL_MAX_JOBS
) {

2687 
	`log_îr
("fio: invÆid max jobs: %d\n", 
max_jobs
);

2688 
do_exô
++;

2689 
exô_vÆ
 = 1;

2693 
did_¨g
 = 
åue
;

2694 #i‚de‡
CONFIG_NO_SHM


2695 i‡(
ƒ_˛õ¡s
) {

2696 
	`log_îr
("fio: can't be both clientánd server\n");

2697 
do_exô
++;

2698 
exô_vÆ
 = 1;

2701 i‡(
›èrg
)

2702 
	`fio_£rvî_£t_¨g
(
›èrg
);

2703 
is_backíd
 = 1;

2704 
backíd
 = 1;

2706 
	`log_îr
("fio: client/serverÑequires SHM support\n");

2707 
do_exô
++;

2708 
exô_vÆ
 = 1;

2712 i‡(
pid_fûe
)

2713 
	`‰ì
(
pid_fûe
);

2714 
pid_fûe
 = 
	`°rdup
(
›èrg
);

2717 i‡((
ªt
 = 
	`fio_idÀ_¥of_∑r£_›t
(
›èrg
))) {

2719 
did_¨g
 = 
åue
;

2720 
do_exô
++;

2721 i‡(
ªt
 == -1)

2722 
exô_vÆ
 = 1;

2726 
did_¨g
 = 
åue
;

2727 i‡(
is_backíd
) {

2728 
	`log_îr
("fio: can't be both clientánd server\n");

2729 
do_exô
++;

2730 
exô_vÆ
 = 1;

2734 i‡(0 =
	`ac˚ss
(
›èrg
, 
R_OK
)) {

2736 
ho°addr
[
PATH_MAX
] = {0};

2737 
f‹m©°r
[8];

2738 
FILE
 * 
ho°f
 = 
	`f›í
(
›èrg
, "r");

2739 i‡(!
ho°f
) {

2740 
	`log_îr
("fio: couldÇŸ o≥¿˛õ¡Üi° fûê%†f‹Ñód\n", 
›èrg
);

2741 
do_exô
++;

2742 
exô_vÆ
 = 1;

2745 
	`•rötf
(
f‹m©°r
, "%%%ds", 
PATH_MAX
 - 1);

2750 
	`fsˇnf
(
ho°f
, 
f‹m©°r
, 
ho°addr
) == 1) {

2752 i‡(
	`fio_˛õ¡_add
(&
fio_˛õ¡_›s
, 
ho°addr
, &
cur_˛õ¡
)) {

2753 
	`log_îr
("fio: faûedáddög clõ¡ %†‰om fûê%s\n", 
ho°addr
, 
›èrg
);

2754 
do_exô
++;

2755 
exô_vÆ
 = 1;

2759 
	`f˛o£
(
ho°f
);

2762 i‡(
	`fio_˛õ¡_add
(&
fio_˛õ¡_›s
, 
›èrg
, &
cur_˛õ¡
)) {

2763 
	`log_îr
("fio: faûedáddög clõ¡ %s\n", 
›èrg
);

2764 
do_exô
++;

2765 
exô_vÆ
 = 1;

2772 
›töd
 < 
¨gc
) {

2773 i‡(!
	`°∫cmp
(
¨gv
[
›töd
], "--", 2) ||

2774 !
	`°∫cmp
(
¨gv
[
›töd
], "-", 1))

2777 i‡(
	`fio_˛õ¡_add_öi_fûe
(
cur_˛õ¡
, 
¨gv
[
›töd
], 
Ál£
))

2779 
›töd
++;

2783 
did_¨g
 = 
åue
;

2784 i‡(
	`fio_˛õ¡_add_öi_fûe
(
cur_˛õ¡
, 
›èrg
, 
åue
)) {

2785 
do_exô
++;

2786 
exô_vÆ
 = 1;

2790 
did_¨g
 = 
åue
;

2791 
do_exô
++;

2792 
exô_vÆ
 = 
	`fio_m⁄Ÿ⁄ic_˛ockã°
(1);

2795 
did_¨g
 = 
åue
;

2796 
do_exô
++;

2797 
exô_vÆ
 = 
	`fio_¸˘e°
(
›èrg
);

2800 
did_¨g
 = 
åue
;

2801 
do_exô
++;

2802 
exô_vÆ
 = 
	`fio_mem˝y_ã°
(
›èrg
);

2805 
vÆ
;

2807 i‡(
	`check_°r_time
(
›èrg
, &
vÆ
, 1)) {

2808 
	`log_îr
("fio: faûedÖ¨sögÅimê%s\n", 
›èrg
);

2809 
do_exô
++;

2810 
exô_vÆ
 = 1;

2813 i‡(
vÆ
 < 1000) {

2814 
	`log_îr
("fio: status intervalÅoo small\n");

2815 
do_exô
++;

2816 
exô_vÆ
 = 1;

2818 
°©us_öãrvÆ
 = 
vÆ
 / 1000;

2822 i‡(
åiggî_fûe
)

2823 
	`‰ì
(
åiggî_fûe
);

2824 
åiggî_fûe
 = 
	`°rdup
(
›èrg
);

2827 i‡(
åiggî_cmd
)

2828 
	`‰ì
(
åiggî_cmd
);

2829 
åiggî_cmd
 = 
	`°rdup
(
›èrg
);

2832 i‡(
åiggî_ªmŸe_cmd
)

2833 
	`‰ì
(
åiggî_ªmŸe_cmd
);

2834 
åiggî_ªmŸe_cmd
 = 
	`°rdup
(
›èrg
);

2837 i‡(
aux_∑th
)

2838 
	`‰ì
(
aux_∑th
);

2839 
aux_∑th
 = 
	`°rdup
(
›èrg
);

2842 i‡(
	`check_°r_time
(
›èrg
, &
åiggî_timeout
, 1)) {

2843 
	`log_îr
("fio: faûedÖ¨sögÅimê%s\n", 
›èrg
);

2844 
do_exô
++;

2845 
exô_vÆ
 = 1;

2847 
åiggî_timeout
 /= 1000000;

2850 
	`log_îr
("%s: uƒecognized o±i⁄ '%s'\n", 
¨gv
[0],

2851 
¨gv
[
›töd
 - 1]);

2852 
	`show_˛o£°_›ti⁄
(
¨gv
[
›töd
 - 1]);

2854 
do_exô
++;

2855 
exô_vÆ
 = 1;

2858 i‡(
do_exô
)

2862 i‡(
do_exô
 && !(
is_backíd
 || 
ƒ_˛õ¡s
))

2863 
	`exô
(
exô_vÆ
);

2865 i‡(
ƒ_˛õ¡s
 && 
	`fio_˛õ¡s_c⁄√˘
())

2866 
	`exô
(1);

2868 i‡(
is_backíd
 && 
backíd
)

2869  
	`fio_°¨t_£rvî
(
pid_fûe
);

2870 i‡(
pid_fûe
)

2871 
	`‰ì
(
pid_fûe
);

2873 i‡(
td
) {

2874 i‡(!
ªt
) {

2875 
ªt
 = 
	`add_job
(
td
,Åd->
o
.
«me
 ?: "fio", 0, 0, 
˛õ¡_ty≥
);

2876 i‡(
ªt
)

2877 
	`exô
(1);

2881 !
ªt
 && 
›töd
 < 
¨gc
) {

2882 
öi_idx
++;

2883 
öi_fûe
 = 
	`ªÆloc
(öi_fûe, 
öi_idx
 * (*));

2884 
öi_fûe
[
öi_idx
 - 1] = 
	`°rdup
(
¨gv
[
›töd
]);

2885 
›töd
++;

2888 
out_‰ì
:

2889  
öi_idx
;

2890 
	}
}

2892 
	$fio_öô_›ti⁄s
()

2894 
f_out
 = 
°dout
;

2895 
f_îr
 = 
°dîr
;

2897 
	`fio_›ti⁄s_fûl_›t°rög
();

2898 
	`fio_›ti⁄s_dup_™d_öô
(
l_›ts
);

2900 
	`©exô
(
‰ì_shm
);

2902 i‡(
	`fûl_def_thªad
())

2906 
	}
}

2908 
fio_check_›ti⁄s
(
thªad_›ti⁄s
 *);

2910 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

2912 c⁄° 
ty≥
 = 
FIO_CLIENT_TYPE_CLI
;

2913 
job_fûes
, 
i
;

2915 i‡(
	`fio_öô_›ti⁄s
())

2917 i‡(
	`fio_ã°_cc⁄v
(&
def_thªad
.
o
))

2918 
	`log_îr
("fio: failed internal cconvÅest\n");

2920 
job_fûes
 = 
	`∑r£_cmd_löe
(
¨gc
, 
¨gv
, 
ty≥
);

2922 i‡(
job_fûes
 > 0) {

2923 
i
 = 0; i < 
job_fûes
; i++) {

2924 i‡(
i
 && 
	`fûl_def_thªad
())

2926 i‡(
ƒ_˛õ¡s
) {

2927 i‡(
	`fio_˛õ¡s_£nd_öi
(
öi_fûe
[
i
]))

2929 
	`‰ì
(
öi_fûe
[
i
]);

2930 } i‡(!
is_backíd
) {

2931 i‡(
	`∑r£_jobs_öi
(
öi_fûe
[
i
], 0, i, 
ty≥
))

2933 
	`‰ì
(
öi_fûe
[
i
]);

2936 } i‡(
ƒ_˛õ¡s
) {

2937 i‡(
	`fûl_def_thªad
())

2939 i‡(
	`fio_˛õ¡s_£nd_öi
(
NULL
))

2943 
	`‰ì
(
öi_fûe
);

2944 
	`fio_›ti⁄s_‰ì
(&
def_thªad
);

2945 
	`fûe£tup_mem_‰ì
();

2947 i‡(!
thªad_numbî
) {

2948 i‡(
	`∑r£_dryrun
())

2950 i‡(
exec_¥ofûe
)

2952 i‡(
is_backíd
 || 
ƒ_˛õ¡s
)

2954 i‡(
did_¨g
)

2957 
	`log_îr
("No job(s) defined\n\n");

2958 
	`ußge
(
¨gv
[0]);

2962 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

2963 
	`log_öfo
("%s\n", 
fio_vîsi⁄_°rög
);

2966 
	}
}

2968 
	$›ti⁄s_deÁu…_fûl
(
thªad_›ti⁄s
 *
o
)

2970 
	`mem˝y
(
o
, &
def_thªad
.o, (*o));

2971 
	}
}

2973 
thªad_d©a
 *
	$gë_globÆ_›ti⁄s
()

2975  &
def_thªad
;

2976 
	}
}

	@/home/ysjin/Desktop/fio/fio/io_ddir.h

1 #i‚de‡
FIO_DDIR_H


2 
	#FIO_DDIR_H


	)

4 
	efio_ddú
 {

5 
	mDDIR_READ
 = 0,

6 
	mDDIR_WRITE
 = 1,

7 
	mDDIR_TRIM
 = 2,

8 
	mDDIR_SYNC
 = 3,

9 
	mDDIR_DATASYNC
,

10 
	mDDIR_SYNC_FILE_RANGE
,

11 
	mDDIR_WAIT
,

12 
	mDDIR_LAST
,

13 
	mDDIR_INVAL
 = -1,

15 
	mDDIR_RWDIR_CNT
 = 3,

16 
	mDDIR_RWDIR_SYNC_CNT
 = 4,

19 
ölöe
 c⁄° *
	$io_ddú_«me
(
fio_ddú
 
ddú
)

21 c⁄° *
«me
[] = { "read", "write", "trim", "sync",

25 i‡(
ddú
 < 
DDIR_LAST
)

26  
«me
[
ddú
];

29 
	}
}

31 
	etd_ddú
 {

32 
	mTD_DDIR_READ
 = 1 << 0,

33 
	mTD_DDIR_WRITE
 = 1 << 1,

34 
	mTD_DDIR_RAND
 = 1 << 2,

35 
	mTD_DDIR_TRIM
 = 1 << 3,

36 
	mTD_DDIR_RW
 = 
TD_DDIR_READ
 | 
TD_DDIR_WRITE
,

37 
	mTD_DDIR_RANDREAD
 = 
TD_DDIR_READ
 | 
TD_DDIR_RAND
,

38 
	mTD_DDIR_RANDWRITE
 = 
TD_DDIR_WRITE
 | 
TD_DDIR_RAND
,

39 
	mTD_DDIR_RANDRW
 = 
TD_DDIR_RW
 | 
TD_DDIR_RAND
,

40 
	mTD_DDIR_RANDTRIM
 = 
TD_DDIR_TRIM
 | 
TD_DDIR_RAND
,

41 
	mTD_DDIR_TRIMWRITE
 = 
TD_DDIR_TRIM
 | 
TD_DDIR_WRITE
,

44 
	#td_ªad
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_READ
)

	)

45 
	#td_wrôe
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_WRITE
)

	)

46 
	#td_åim
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_TRIM
)

	)

47 
	#td_rw
(
td
Ë((—d)->
o
.
td_ddú
 & 
TD_DDIR_RW
Ë=TD_DDIR_RW)

	)

48 
	#td_øndom
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_RAND
)

	)

49 
	#fûe_øndomm≠
(
td
, 
f
Ë(!—d)->
o
.
n‹™domm≠
 && 
	`fio_fûe_axm≠
((f)))

	)

50 
	#td_åimwrôe
(
td
Ë((—d)->
o
.
td_ddú
 & 
TD_DDIR_TRIMWRITE
) \

51 =
TD_DDIR_TRIMWRITE
)

	)

53 
ölöe
 
	$ddú_sync
(
fio_ddú
 
ddú
)

55  
ddú
 =
DDIR_SYNC
 || ddú =
DDIR_DATASYNC
 ||

56 
ddú
 =
DDIR_SYNC_FILE_RANGE
;

57 
	}
}

59 
ölöe
 
	$ddú_rw
(
fio_ddú
 
ddú
)

61  
ddú
 =
DDIR_READ
 || ddú =
DDIR_WRITE
 || ddú =
DDIR_TRIM
;

62 
	}
}

64 
ölöe
 c⁄° *
	$ddú_°r
(
td_ddú
 
ddú
)

66 c⁄° *
__°r
[] = { 
NULL
, "read", "write", "rw", "rand",

68 "åim", 
NULL
, "trimwrite", NULL, "randtrim" };

70  
__°r
[
ddú
];

71 
	}
}

73 
	#ddú_rw_sum
(
¨r
) \

74 ((
¨r
)[
DDIR_READ
] + (¨r)[
DDIR_WRITE
] + (¨r)[
DDIR_TRIM
])

	)

	@/home/ysjin/Desktop/fio/fio/io_u.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°rög.h
>

4 
	~<sig«l.h
>

5 
	~<time.h
>

6 
	~<as£π.h
>

8 
	~"fio.h
"

9 
	~"hash.h
"

10 
	~"vîify.h
"

11 
	~"åim.h
"

12 
	~"lib/ønd.h
"

13 
	~"lib/axm≠.h
"

14 
	~"îr.h
"

15 
	~"lib/pow2.h
"

16 
	~"mömax.h
"

18 
	sio_com∂ëi⁄_d©a
 {

19 
	mƒ
;

21 
	mîr‹
;

22 
uöt64_t
 
	mbyãs_d⁄e
[
DDIR_RWDIR_CNT
];

23 
time•ec
 
	mtime
;

30 
boﬁ
 
	$øndom_m≠_‰ì
(
fio_fûe
 *
f
, c⁄° 
uöt64_t
 
block
)

32  !
	`axm≠_is£t
(
f
->
io_axm≠
, 
block
);

33 
	}
}

38 
	$m¨k_øndom_m≠
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

40 
mö_bs
 = 
td
->
o
.mö_bs[
io_u
->
ddú
];

41 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

42 
ƒ_blocks
;

43 
uöt64_t
 
block
;

45 
block
 = (
io_u
->
off£t
 - 
f
->
fûe_off£t
Ë/ (
uöt64_t
Ë
mö_bs
;

46 
ƒ_blocks
 = (
io_u
->
buÊí
 + 
mö_bs
 - 1) / min_bs;

48 i‡(!(
io_u
->
Êags
 & 
IO_U_F_BUSY_OK
))

49 
ƒ_blocks
 = 
	`axm≠_£t_ƒ
(
f
->
io_axm≠
, 
block
,Çr_blocks);

51 i‡((
ƒ_blocks
 * 
mö_bs
Ë< 
io_u
->
buÊí
)

52 
io_u
->
buÊí
 = 
ƒ_blocks
 * 
mö_bs
;

53 
	}
}

55 
uöt64_t
 
	$œ°_block
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

56 
fio_ddú
 
ddú
)

58 
uöt64_t
 
max_blocks
;

59 
uöt64_t
 
max_size
;

61 
	`as£π
(
	`ddú_rw
(
ddú
));

67 
max_size
 = 
f
->
io_size
;

68 i‡(
max_size
 > 
f
->
ªÆ_fûe_size
)

69 
max_size
 = 
f
->
ªÆ_fûe_size
;

71 i‡(
td
->
o
.
z⁄e_ønge
)

72 
max_size
 = 
td
->
o
.
z⁄e_ønge
;

74 i‡(
td
->
o
.
mö_bs
[
ddú
] >Åd->o.
ba
[ddir])

75 
max_size
 -
td
->
o
.
mö_bs
[
ddú
] -Åd->o.
ba
[ddir];

77 
max_blocks
 = 
max_size
 / (
uöt64_t
Ë
td
->
o
.
ba
[
ddú
];

78 i‡(!
max_blocks
)

81  
max_blocks
;

82 
	}
}

84 
	sønd_off
 {

85 
Êi°_hód
 
	mli°
;

86 
uöt64_t
 
	moff
;

89 
	$__gë_√xt_ønd_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

90 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
,

91 
uöt64_t
 
œ°b
)

93 
uöt64_t
 
r
;

95 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE
 ||

96 
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE64
) {

98 
r
 = 
	`__ønd
(&
td
->
øndom_°©e
);

100 
	`d¥öt
(
FD_RANDOM
, "of‡ønd %Œu\n", (Ë
r
);

102 *
b
 = 
œ°b
 * (
r
 / (
	`ønd_max
(&
td
->
øndom_°©e
) + 1.0));

104 
uöt64_t
 
off
 = 0;

106 
	`as£π
(
	`fio_fûe_lf§
(
f
));

108 i‡(
	`lf§_√xt
(&
f
->
lf§
, &
off
))

111 *
b
 = 
off
;

117 i‡(!
	`fûe_øndomm≠
(
td
, 
f
))

118 
ªt
;

123 i‡(
	`øndom_m≠_‰ì
(
f
, *
b
))

124 
ªt
;

126 
	`d¥öt
(
FD_RANDOM
, "get_next_rand_offset: offset %llu busy\n",

127 (Ë*
b
);

129 *
b
 = 
	`axm≠_√xt_‰ì
(
f
->
io_axm≠
, *b);

130 i‡(*
b
 =(
uöt64_t
) -1ULL)

132 
ªt
:

134 
	}
}

136 
	$__gë_√xt_ønd_off£t_zùf
(
thªad_d©a
 *
td
,

137 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

138 
uöt64_t
 *
b
)

140 *
b
 = 
	`zùf_√xt
(&
f
->
zùf
);

142 
	}
}

144 
	$__gë_√xt_ønd_off£t_∑ªto
(
thªad_d©a
 *
td
,

145 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

146 
uöt64_t
 *
b
)

148 *
b
 = 
	`∑ªto_√xt
(&
f
->
zùf
);

150 
	}
}

152 
	$__gë_√xt_ønd_off£t_gauss
(
thªad_d©a
 *
td
,

153 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

154 
uöt64_t
 *
b
)

156 *
b
 = 
	`gauss_√xt
(&
f
->
gauss
);

158 
	}
}

160 
	$__gë_√xt_ønd_off£t_z⁄ed_abs
(
thªad_d©a
 *
td
,

161 
fio_fûe
 *
f
,

162 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

164 
z⁄e_•lô_ödex
 *
zsi
;

165 
uöt64_t
 
œ°b
, 
£nd
, 
°ŸÆ
;

166 
v
;

168 
œ°b
 = 
	`œ°_block
(
td
, 
f
, 
ddú
);

169 i‡(!
œ°b
)

172 i‡(!
td
->
o
.
z⁄e_•lô_ƒ
[
ddú
]) {

173 
baû
:

174  
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
œ°b
);

180 
v
 = 
	`ønd32_bëwìn
(&
td
->
z⁄e_°©e
, 1, 100);

186 
zsi
 = &
td
->
z⁄e_°©e_ödex
[
ddú
][
v
 - 1];

187 
°ŸÆ
 = 
zsi
->
size_¥ev
 / 
td
->
o
.
ba
[
ddú
];

188 
£nd
 = 
zsi
->
size
 / 
td
->
o
.
ba
[
ddú
];

193 i‡(
£nd
 == -1U) {

194 i‡(!
	`fio_did_w¨n
(
FIO_WARN_ZONED_BUG
))

195 
	`log_îr
("fio: bug in zoned generation\n");

196 
baû
;

197 } i‡(
£nd
 > 
œ°b
) {

203 
	`log_îr
("fio: zoned_abs sizesÉxceed file size\n");

210 i‡(
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
£nd
 - 
°ŸÆ
) == 1)

213 *
b
 +
°ŸÆ
;

215 
	}
}

217 
	$__gë_√xt_ønd_off£t_z⁄ed
(
thªad_d©a
 *
td
,

218 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

219 
uöt64_t
 *
b
)

221 
v
, 
£nd
, 
°ŸÆ
;

222 
uöt64_t
 
off£t
, 
œ°b
;

223 
z⁄e_•lô_ödex
 *
zsi
;

225 
œ°b
 = 
	`œ°_block
(
td
, 
f
, 
ddú
);

226 i‡(!
œ°b
)

229 i‡(!
td
->
o
.
z⁄e_•lô_ƒ
[
ddú
]) {

230 
baû
:

231  
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
œ°b
);

237 
v
 = 
	`ønd32_bëwìn
(&
td
->
z⁄e_°©e
, 1, 100);

239 
zsi
 = &
td
->
z⁄e_°©e_ödex
[
ddú
][
v
 - 1];

240 
°ŸÆ
 = 
zsi
->
size_≥rc_¥ev
;

241 
£nd
 = 
zsi
->
size_≥rc
;

246 i‡(
£nd
 == -1U) {

247 i‡(!
	`fio_did_w¨n
(
FIO_WARN_ZONED_BUG
))

248 
	`log_îr
("fio: bug in zoned generation\n");

249 
baû
;

257 i‡(
°ŸÆ
)

258 
off£t
 = 
°ŸÆ
 * 
œ°b
 / 100ULL;

260 
off£t
 = 0;

262 
œ°b
 =Üa°b * (
£nd
 - 
°ŸÆ
) / 100ULL;

267 i‡(
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
œ°b
) == 1)

273 i‡(
off£t
)

274 *
b
 +
off£t
;

277 
	}
}

279 
	$Êi°_cmp
(*
d©a
, 
Êi°_hód
 *
a
, Êi°_hód *
b
)

281 
ønd_off
 *
r1
 = 
	`Êi°_íåy
(
a
, ønd_off, 
li°
);

282 
ønd_off
 *
r2
 = 
	`Êi°_íåy
(
b
, ønd_off, 
li°
);

284  
r1
->
off
 - 
r2
->off;

285 
	}
}

287 
	$gë_off_‰om_mëhod
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

288 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

290 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_RANDOM
) {

291 
uöt64_t
 
œ°b
;

293 
œ°b
 = 
	`œ°_block
(
td
, 
f
, 
ddú
);

294 i‡(!
œ°b
)

297  
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
œ°b
);

298 } i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
)

299  
	`__gë_√xt_ønd_off£t_zùf
(
td
, 
f
, 
ddú
, 
b
);

300 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
)

301  
	`__gë_√xt_ønd_off£t_∑ªto
(
td
, 
f
, 
ddú
, 
b
);

302 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_GAUSS
)

303  
	`__gë_√xt_ønd_off£t_gauss
(
td
, 
f
, 
ddú
, 
b
);

304 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED
)

305  
	`__gë_√xt_ønd_off£t_z⁄ed
(
td
, 
f
, 
ddú
, 
b
);

306 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED_ABS
)

307  
	`__gë_√xt_ønd_off£t_z⁄ed_abs
(
td
, 
f
, 
ddú
, 
b
);

309 
	`log_îr
("fio: unknow¿øndom di°ributi⁄: %d\n", 
td
->
o
.
øndom_di°ributi⁄
);

311 
	}
}

317 
ölöe
 
boﬁ
 
	$should_s‹t_io
(
thªad_d©a
 *
td
)

319 i‡(!
td
->
o
.
vîifys‹t_ƒ
 || !td->o.
do_vîify
)

320  
Ál£
;

321 i‡(!
	`td_øndom
(
td
))

322  
Ál£
;

323 i‡(
td
->
run°©e
 !
TD_VERIFYING
)

324  
Ál£
;

325 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE
 ||

326 
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE64
)

327  
Ál£
;

329  
åue
;

330 
	}
}

332 
boﬁ
 
	$should_do_øndom
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

334 
v
;

336 i‡(
td
->
o
.
≥rc_ønd
[
ddú
] == 100)

337  
åue
;

339 
v
 = 
	`ønd32_bëwìn
(&
td
->
£q_ønd_°©e
[
ddú
], 1, 100);

341  
v
 <
td
->
o
.
≥rc_ønd
[
ddú
];

342 
	}
}

344 
	$gë_√xt_ønd_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

345 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

347 
ønd_off
 *
r
;

348 
i
, 
ªt
 = 1;

350 i‡(!
	`should_s‹t_io
(
td
))

351  
	`gë_off_‰om_mëhod
(
td
, 
f
, 
ddú
, 
b
);

353 i‡(!
	`Êi°_em±y
(&
td
->
√xt_ønd_li°
)) {

354 
„tch
:

355 
r
 = 
	`Êi°_fú°_íåy
(&
td
->
√xt_ønd_li°
, 
ønd_off
, 
li°
);

356 
	`Êi°_dñ
(&
r
->
li°
);

357 *
b
 = 
r
->
off
;

358 
	`‰ì
(
r
);

362 
i
 = 0; i < 
td
->
o
.
vîifys‹t_ƒ
; i++) {

363 
r
 = 
	`mÆloc
((*r));

365 
ªt
 = 
	`gë_off_‰om_mëhod
(
td
, 
f
, 
ddú
, &
r
->
off
);

366 i‡(
ªt
) {

367 
	`‰ì
(
r
);

371 
	`Êi°_add
(&
r
->
li°
, &
td
->
√xt_ønd_li°
);

374 i‡(
ªt
 && !
i
)

375  
ªt
;

377 
	`as£π
(!
	`Êi°_em±y
(&
td
->
√xt_ønd_li°
));

378 
	`Êi°_s‹t
(
NULL
, &
td
->
√xt_ønd_li°
, 
Êi°_cmp
);

379 
„tch
;

380 
	}
}

382 
	$lo›_ˇche_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

384 
thªad_›ti⁄s
 *
o
 = &
td
->o;

386 i‡(
o
->
övÆid©e_ˇche
 && !o->
odúe˘
) {

387 
fio_unu£d
 
ªt
;

389 
ªt
 = 
	`fûe_övÆid©e_ˇche
(
td
, 
f
);

391 
	}
}

393 
	$gë_√xt_ønd_block
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

394 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

396 i‡(!
	`gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
))

399 i‡(
td
->
o
.
time_ba£d
 ||

400 (
td
->
o
.
fûe_£rvi˚_ty≥
 & 
__FIO_FSERVICE_NONUNIFORM
)) {

401 
	`fio_fûe_ª£t
(
td
, 
f
);

402 i‡(!
	`gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
))

404 
	`lo›_ˇche_övÆid©e
(
td
, 
f
);

407 
	`d¥öt
(
FD_IO
, "%s:Ñand offset failed,Üast=%llu, size=%llu\n",

408 
f
->
fûe_«me
, (Ëf->
œ°_pos
[
ddú
],

409 (Ë
f
->
ªÆ_fûe_size
);

411 
	}
}

413 
	$gë_√xt_£q_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

414 
fio_ddú
 
ddú
, 
uöt64_t
 *
off£t
)

416 
thªad_›ti⁄s
 *
o
 = &
td
->o;

418 
	`as£π
(
	`ddú_rw
(
ddú
));

424 i‡(
f
->
œ°_pos
[
ddú
] >f->
io_size
 + 
	`gë_°¨t_off£t
(
td
, f) &&

425 
o
->
time_ba£d
) {

426 
f
->
œ°_pos
[
ddú
] = f->
fûe_off£t
;

427 
	`lo›_ˇche_övÆid©e
(
td
, 
f
);

430 i‡(
f
->
œ°_pos
[
ddú
] < f->
ªÆ_fûe_size
) {

431 
uöt64_t
 
pos
;

433 i‡(
f
->
œ°_pos
[
ddú
] =f->
fûe_off£t
 && 
o
->
ddú_£q_add
 < 0) {

434 i‡(
f
->
ªÆ_fûe_size
 > f->
io_size
)

435 
f
->
œ°_pos
[
ddú
] = f->
io_size
;

437 
f
->
œ°_pos
[
ddú
] = f->
ªÆ_fûe_size
;

440 
pos
 = 
f
->
œ°_pos
[
ddú
] - f->
fûe_off£t
;

441 i‡(
pos
 && 
o
->
ddú_£q_add
) {

442 
pos
 +
o
->
ddú_£q_add
;

450 i‡(
pos
 >
f
->
ªÆ_fûe_size
) {

451 i‡(
o
->
ddú_£q_add
 > 0)

452 
pos
 = 
f
->
fûe_off£t
;

454 i‡(
f
->
ªÆ_fûe_size
 > f->
io_size
)

455 
pos
 = 
f
->
io_size
;

457 
pos
 = 
f
->
ªÆ_fûe_size
;

459 
pos
 +
o
->
ddú_£q_add
;

464 *
off£t
 = 
pos
;

469 
	}
}

471 
	$gë_√xt_block
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

472 
fio_ddú
 
ddú
, 
rw_£q
,

473 
boﬁ
 *
is_øndom
)

475 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

476 
uöt64_t
 
b
, 
off£t
;

477 
ªt
;

479 
	`as£π
(
	`ddú_rw
(
ddú
));

481 
b
 = 
off£t
 = -1ULL;

483 i‡(
rw_£q
) {

484 i‡(
	`td_øndom
(
td
)) {

485 i‡(
	`should_do_øndom
(
td
, 
ddú
)) {

486 
ªt
 = 
	`gë_√xt_ønd_block
(
td
, 
f
, 
ddú
, &
b
);

487 *
is_øndom
 = 
åue
;

489 *
is_øndom
 = 
Ál£
;

490 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_BUSY_OK
);

491 
ªt
 = 
	`gë_√xt_£q_off£t
(
td
, 
f
, 
ddú
, &
off£t
);

492 i‡(
ªt
)

493 
ªt
 = 
	`gë_√xt_ønd_block
(
td
, 
f
, 
ddú
, &
b
);

496 *
is_øndom
 = 
Ál£
;

497 
ªt
 = 
	`gë_√xt_£q_off£t
(
td
, 
f
, 
ddú
, &
off£t
);

500 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_BUSY_OK
);

501 *
is_øndom
 = 
Ál£
;

503 i‡(
td
->
o
.
rw_£q
 =
RW_SEQ_SEQ
) {

504 
ªt
 = 
	`gë_√xt_£q_off£t
(
td
, 
f
, 
ddú
, &
off£t
);

505 i‡(
ªt
) {

506 
ªt
 = 
	`gë_√xt_ønd_block
(
td
, 
f
, 
ddú
, &
b
);

507 *
is_øndom
 = 
Ál£
;

509 } i‡(
td
->
o
.
rw_£q
 =
RW_SEQ_IDENT
) {

510 i‡(
f
->
œ°_°¨t
[
ddú
] != -1ULL)

511 
off£t
 = 
f
->
œ°_°¨t
[
ddú
] - f->
fûe_off£t
;

513 
off£t
 = 0;

514 
ªt
 = 0;

516 
	`log_îr
("fio: unknow¿rw_£q=%d\n", 
td
->
o
.
rw_£q
);

517 
ªt
 = 1;

521 i‡(!
ªt
) {

522 i‡(
off£t
 != -1ULL)

523 
io_u
->
off£t
 = offset;

524 i‡(
b
 != -1ULL)

525 
io_u
->
off£t
 = 
b
 * 
td
->
o
.
ba
[
ddú
];

527 
	`log_îr
("fio: bug i¿off£àgíî©i⁄: off£t=%Œu, b=%Œu\n", (Ë
off£t
, (Ë
b
);

528 
ªt
 = 1;

532  
ªt
;

533 
	}
}

540 
	$gë_√xt_off£t
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

541 
boﬁ
 *
is_øndom
)

543 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

544 
fio_ddú
 
ddú
 = 
io_u
->ddir;

545 
rw_£q_hô
 = 0;

547 
	`as£π
(
	`ddú_rw
(
ddú
));

549 i‡(
td
->
o
.
ddú_£q_ƒ
 && !--td->ddir_seq_nr) {

550 
rw_£q_hô
 = 1;

551 
td
->
ddú_£q_ƒ
 =Åd->
o
.ddir_seq_nr;

554 i‡(
	`gë_√xt_block
(
td
, 
io_u
, 
ddú
, 
rw_£q_hô
, 
is_øndom
))

557 i‡(
io_u
->
off£t
 >
f
->
io_size
) {

558 
	`d¥öt
(
FD_IO
, "get_next_offset: offset %llu >= io_size %llu\n",

559 (Ë
io_u
->
off£t
,

560 (Ë
f
->
io_size
);

564 
io_u
->
off£t
 +
f
->
fûe_off£t
;

565 i‡(
io_u
->
off£t
 >
f
->
ªÆ_fûe_size
) {

566 
	`d¥öt
(
FD_IO
, "get_next_offset: offset %llu >= size %llu\n",

567 (Ë
io_u
->
off£t
,

568 (Ë
f
->
ªÆ_fûe_size
);

573 
	}
}

575 
ölöe
 
boﬁ
 
	$io_u_fôs
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

576 
buÊí
)

578 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

580  
io_u
->
off£t
 + 
buÊí
 <
f
->
io_size
 + 
	`gë_°¨t_off£t
(
td
, f);

581 
	}
}

583 
	$gë_√xt_buÊí
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

584 
boﬁ
 
is_øndom
)

586 
ddú
 = 
io_u
->ddir;

587 
buÊí
 = 0;

588 
möbs
, 
maxbs
;

589 
uöt64_t
 
‰™d_max
, 
r
;

590 
boﬁ
 
powî_2
;

592 
	`as£π
(
	`ddú_rw
(
ddú
));

594 i‡(
td
->
o
.
bs_is_£q_ønd
)

595 
ddú
 = 
is_øndom
 ? 
DDIR_WRITE
 : 
DDIR_READ
;

597 
möbs
 = 
td
->
o
.
mö_bs
[
ddú
];

598 
maxbs
 = 
td
->
o
.
max_bs
[
ddú
];

600 i‡(
möbs
 =
maxbs
)

601  
möbs
;

606 i‡(!
	`io_u_fôs
(
td
, 
io_u
, 
möbs
))

609 
‰™d_max
 = 
	`ønd_max
(&
td
->
b§™ge_°©e
[
ddú
]);

611 
r
 = 
	`__ønd
(&
td
->
b§™ge_°©e
[
ddú
]);

613 i‡(!
td
->
o
.
bs•lô_ƒ
[
ddú
]) {

614 
buÊí
 = 1 + (Ë((Ë
maxbs
 *

615 (
r
 / (
‰™d_max
 + 1.0)));

616 i‡(
buÊí
 < 
möbs
)

617 
buÊí
 = 
möbs
;

619 
≥rc
 = 0;

620 
i
;

622 
i
 = 0; i < 
td
->
o
.
bs•lô_ƒ
[
ddú
]; i++) {

623 
bs•lô
 *
b•
 = &
td
->
o
.bs•lô[
ddú
][
i
];

625 
buÊí
 = 
b•
->
bs
;

626 
≥rc
 +
b•
->perc;

627 i‡(!
≥rc
)

629 i‡((
r
 / 
≥rc
 <
‰™d_max
 / 100ULL) &&

630 
	`io_u_fôs
(
td
, 
io_u
, 
buÊí
))

635 
powî_2
 = 
	`is_powî_of_2
(
möbs
);

636 i‡(!
td
->
o
.
bs_u«lig√d
 && 
powî_2
)

637 
buÊí
 &~(
möbs
 - 1);

638 i‡(!
td
->
o
.
bs_u«lig√d
 && !
powî_2
)

639 
buÊí
 -buÊí % 
möbs
;

640 } !
	`io_u_fôs
(
td
, 
io_u
, 
buÊí
));

642  
buÊí
;

643 
	}
}

645 
	$£t_rwmix_byãs
(
thªad_d©a
 *
td
)

647 
diff
;

654 
diff
 = 
td
->
o
.
rwmix
[td->
rwmix_ddú
 ^ 1];

655 
td
->
rwmix_issues
 = (td->
io_issues
[td->
rwmix_ddú
] * 
diff
) / 100;

656 
	}
}

658 
ölöe
 
fio_ddú
 
	$gë_ønd_ddú
(
thªad_d©a
 *
td
)

660 
v
;

662 
v
 = 
	`ønd32_bëwìn
(&
td
->
rwmix_°©e
, 1, 100);

664 i‡(
v
 <
td
->
o
.
rwmix
[
DDIR_READ
])

665  
DDIR_READ
;

667  
DDIR_WRITE
;

668 
	}
}

670 
	$io_u_quõs˚
(
thªad_d©a
 *
td
)

672 
com∂ëed
 = 0;

683 i‡(
td
->
io_u_queued
 ||Åd->
cur_dïth
) {

684 
fio_unu£d
 
ªt
;

686 
ªt
 = 
	`td_io_commô
(
td
);

689 
td
->
io_u_ö_Êight
) {

690 
ªt
;

692 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 1);

693 i‡(
ªt
 > 0)

694 
com∂ëed
 +
ªt
;

697 i‡(
td
->
Êags
 & 
TD_F_REGROW_LOGS
)

698 
	`ªgrow_logs
(
td
);

700  
com∂ëed
;

701 
	}
}

703 
fio_ddú
 
	$øã_ddú
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

705 
fio_ddú
 
odú
 = 
ddú
 ^ 1;

706 
uöt64_t
 
u£c
;

707 
uöt64_t
 
now
;

709 
	`as£π
(
	`ddú_rw
(
ddú
));

710 
now
 = 
	`utime_sö˚_now
(&
td
->
°¨t
);

715 i‡(
td
->
øã_√xt_io_time
[
ddú
] <
now
)

716  
ddú
;

722 i‡(
	`td_rw
(
td
Ë&&Åd->
o
.
rwmix
[
odú
]) {

726 i‡(
td
->
øã_√xt_io_time
[
odú
] <
now
)

727  
odú
;

733 i‡(
td
->
øã_√xt_io_time
[
ddú
] <=

734 
td
->
øã_√xt_io_time
[
odú
]) {

735 
u£c
 = 
td
->
øã_√xt_io_time
[
ddú
] - 
now
;

737 
u£c
 = 
td
->
øã_√xt_io_time
[
odú
] - 
now
;

738 
ddú
 = 
odú
;

741 
u£c
 = 
td
->
øã_√xt_io_time
[
ddú
] - 
now
;

743 i‡(
td
->
o
.
io_submô_mode
 =
IO_MODE_INLINE
)

744 
	`io_u_quõs˚
(
td
);

746 
	`u£c_¶ìp
(
td
, 
u£c
);

747  
ddú
;

748 
	}
}

755 
fio_ddú
 
	$gë_rw_ddú
(
thªad_d©a
 *
td
)

757 
fio_ddú
 
ddú
;

763 i‡(
	`should_fsync
(
td
)) {

764 i‡(
td
->
o
.
fsync_blocks
 &&Åd->
io_issues
[
DDIR_WRITE
] &&

765 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
o
.
fsync_blocks
))

766  
DDIR_SYNC
;

768 i‡(
td
->
o
.
fd©async_blocks
 &&Åd->
io_issues
[
DDIR_WRITE
] &&

769 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
o
.
fd©async_blocks
))

770  
DDIR_DATASYNC
;

772 i‡(
td
->
sync_fûe_ønge_ƒ
 &&Åd->
io_issues
[
DDIR_WRITE
] &&

773 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
sync_fûe_ønge_ƒ
))

774  
DDIR_SYNC_FILE_RANGE
;

777 i‡(
	`td_rw
(
td
)) {

781 i‡(
td
->
io_issues
[td->
rwmix_ddú
] >td->
rwmix_issues
) {

787 
ddú
 = 
	`gë_ønd_ddú
(
td
);

789 i‡(
ddú
 !
td
->
rwmix_ddú
)

790 
	`£t_rwmix_byãs
(
td
);

792 
td
->
rwmix_ddú
 = 
ddú
;

794 
ddú
 = 
td
->
rwmix_ddú
;

795 } i‡(
	`td_ªad
(
td
))

796 
ddú
 = 
DDIR_READ
;

797 i‡(
	`td_wrôe
(
td
))

798 
ddú
 = 
DDIR_WRITE
;

799 i‡(
	`td_åim
(
td
))

800 
ddú
 = 
DDIR_TRIM
;

802 
ddú
 = 
DDIR_INVAL
;

804 
td
->
rwmix_ddú
 = 
	`øã_ddú
—d, 
ddú
);

805  
td
->
rwmix_ddú
;

806 
	}
}

808 
	$£t_rw_ddú
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

810 
fio_ddú
 
ddú
 = 
	`gë_rw_ddú
(
td
);

812 i‡(
	`td_åimwrôe
(
td
)) {

813 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

814 i‡(
f
->
œ°_pos
[
DDIR_WRITE
] =f->œ°_pos[
DDIR_TRIM
])

815 
ddú
 = 
DDIR_TRIM
;

817 
ddú
 = 
DDIR_WRITE
;

820 
io_u
->
ddú
 = io_u->
ac˘_ddú
 = ddir;

822 i‡(
io_u
->
ddú
 =
DDIR_WRITE
 && 
	`td_i€ngöe_Êagged
(
td
, 
FIO_BARRIER
) &&

823 
td
->
o
.
b¨rõr_blocks
 &&

824 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
o
.
b¨rõr_blocks
) &&

825 
td
->
io_issues
[
DDIR_WRITE
])

826 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_BARRIER
);

827 
	}
}

829 
	$put_fûe_log
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

831 
ªt
 = 
	`put_fûe
(
td
, 
f
);

833 i‡(
ªt
)

834 
	`td_vîr‹
(
td
, 
ªt
, "file close");

835 
	}
}

837 
	$put_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

839 i‡(
td
->
∑ª¡
)

840 
td
 =Åd->
∑ª¡
;

842 
	`td_io_u_lock
(
td
);

844 i‡(
io_u
->
fûe
 && !(io_u->
Êags
 & 
IO_U_F_NO_FILE_PUT
))

845 
	`put_fûe_log
(
td
, 
io_u
->
fûe
);

847 
io_u
->
fûe
 = 
NULL
;

848 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_FREE
);

850 i‡(
io_u
->
Êags
 & 
IO_U_F_IN_CUR_DEPTH
) {

851 
td
->
cur_dïth
--;

852 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

854 
	`io_u_qpush
(&
td
->
io_u_‰ìli°
, 
io_u
);

855 
	`td_io_u_u∆ock
(
td
);

856 
	`td_io_u_‰ì_nŸify
(
td
);

857 
	}
}

859 
	$˛ór_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

861 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

862 
	`put_io_u
(
td
, 
io_u
);

863 
	}
}

865 
	$ªqueue_io_u
(
thªad_d©a
 *
td
, 
io_u
 **io_u)

867 
io_u
 *
__io_u
 = *io_u;

868 
fio_ddú
 
ddú
 = 
	`ac˘_ddú
(
__io_u
);

870 
	`d¥öt
(
FD_IO
, "ªqueuê%p\n", 
__io_u
);

872 i‡(
td
->
∑ª¡
)

873 
td
 =Åd->
∑ª¡
;

875 
	`td_io_u_lock
(
td
);

877 
	`io_u_£t
(
td
, 
__io_u
, 
IO_U_F_FREE
);

878 i‡((
__io_u
->
Êags
 & 
IO_U_F_FLIGHT
Ë&& 
	`ddú_rw
(
ddú
))

879 
td
->
io_issues
[
ddú
]--;

881 
	`io_u_˛ór
(
td
, 
__io_u
, 
IO_U_F_FLIGHT
);

882 i‡(
__io_u
->
Êags
 & 
IO_U_F_IN_CUR_DEPTH
) {

883 
td
->
cur_dïth
--;

884 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

887 
	`io_u_Ωush
(&
td
->
io_u_ªqueues
, 
__io_u
);

888 
	`td_io_u_u∆ock
(
td
);

889 
	`td_io_u_‰ì_nŸify
(
td
);

890 *
io_u
 = 
NULL
;

891 
	}
}

893 
	$__fûl_io_u_z⁄e
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

895 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

900 i‡(
td
->
z⁄e_byãs
 >td->
o
.
z⁄e_size
 &&Åd->o.
z⁄e_skù
) {

901 
td
->
z⁄e_byãs
 = 0;

902 
f
->
fûe_off£t
 +
td
->
o
.
z⁄e_ønge
 +Åd->o.
z⁄e_skù
;

907 i‡(
f
->
fûe_off£t
 >f->
ªÆ_fûe_size
)

908 
f
->
fûe_off£t
 = f->
ªÆ_fûe_size
 - f->file_offset;

909 
f
->
œ°_pos
[
io_u
->
ddú
] = f->
fûe_off£t
;

910 
td
->
io_skù_byãs
 +td->
o
.
z⁄e_skù
;

917 i‡(
f
->
œ°_pos
[
io_u
->
ddú
] >(f->
fûe_off£t
 + 
td
->
o
.
z⁄e_ønge
)) {

918 
	`d¥öt
(
FD_IO
, "io_u maöèö z⁄êoff£t=%" 
PRIu64
 "/last_pos=%" PRIu64 "\n",

919 
f
->
fûe_off£t
, f->
œ°_pos
[
io_u
->
ddú
]);

920 
f
->
œ°_pos
[
io_u
->
ddú
] = f->
fûe_off£t
;

927 i‡((
td
->
z⁄e_byãs
 %Åd->
o
.
z⁄e_ønge
) == 0) {

928 
	`fio_fûe_ª£t
(
td
, 
f
);

930 
	}
}

932 
	$fûl_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

934 
boﬁ
 
is_øndom
;

936 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
))

937 
out
;

939 
	`£t_rw_ddú
(
td
, 
io_u
);

944 i‡(!
	`ddú_rw
(
io_u
->
ddú
))

945 
out
;

950 i‡(
td
->
o
.
z⁄e_ønge
) {

951 
	`__fûl_io_u_z⁄e
(
td
, 
io_u
);

958 i‡(
	`gë_√xt_off£t
(
td
, 
io_u
, &
is_øndom
)) {

959 
	`d¥öt
(
FD_IO
, "io_u %p, faûed gëtög off£t\n", 
io_u
);

963 
io_u
->
buÊí
 = 
	`gë_√xt_buÊí
(
td
, io_u, 
is_øndom
);

964 i‡(!
io_u
->
buÊí
) {

965 
	`d¥öt
(
FD_IO
, "io_u %p, faûed gëtög buÊí\n", 
io_u
);

969 i‡(
io_u
->
off£t
 + io_u->
buÊí
 > io_u->
fûe
->
ªÆ_fûe_size
) {

970 
	`d¥öt
(
FD_IO
, "io_u %p, off=0x%llx +Üen=0x%lxÉxceeds file size=0x%llx\n",

971 
io_u
,

972 (Ë
io_u
->
off£t
, io_u->
buÊí
,

973 (Ë
io_u
->
fûe
->
ªÆ_fûe_size
);

980 i‡(
	`td_øndom
(
td
Ë&& 
	`fûe_øndomm≠
—d, 
io_u
->
fûe
))

981 
	`m¨k_øndom_m≠
(
td
, 
io_u
);

983 
out
:

984 
	`d¥öt_io_u
(
io_u
, "fill");

985 
td
->
z⁄e_byãs
 +
io_u
->
buÊí
;

987 
	}
}

989 
	$__io_u_m¨k_m≠
(
uöt64_t
 *
m≠
, 
ƒ
)

991 
idx
 = 0;

993 
ƒ
) {

995 
idx
 = 6;

998 
idx
 = 5;

1001 
idx
 = 4;

1004 
idx
 = 3;

1007 
idx
 = 2;

1010 
idx
 = 1;

1015 
m≠
[
idx
]++;

1016 
	}
}

1018 
	$io_u_m¨k_submô
(
thªad_d©a
 *
td
, 
ƒ
)

1020 
	`__io_u_m¨k_m≠
(
td
->
ts
.
io_u_submô
, 
ƒ
);

1021 
td
->
ts
.
tŸÆ_submô
++;

1022 
	}
}

1024 
	$io_u_m¨k_com∂ëe
(
thªad_d©a
 *
td
, 
ƒ
)

1026 
	`__io_u_m¨k_m≠
(
td
->
ts
.
io_u_com∂ëe
, 
ƒ
);

1027 
td
->
ts
.
tŸÆ_com∂ëe
++;

1028 
	}
}

1030 
	$io_u_m¨k_dïth
(
thªad_d©a
 *
td
, 
ƒ
)

1032 
idx
 = 0;

1034 
td
->
cur_dïth
) {

1036 
idx
 = 6;

1039 
idx
 = 5;

1042 
idx
 = 4;

1045 
idx
 = 3;

1048 
idx
 = 2;

1051 
idx
 = 1;

1056 
td
->
ts
.
io_u_m≠
[
idx
] +
ƒ
;

1057 
	}
}

1059 
	$io_u_m¨k_œt_n£c
(
thªad_d©a
 *
td
, 
n£c
)

1061 
idx
 = 0;

1063 
	`as£π
(
n£c
 < 1000);

1065 
n£c
) {

1067 
idx
 = 9;

1070 
idx
 = 8;

1073 
idx
 = 7;

1076 
idx
 = 6;

1079 
idx
 = 5;

1082 
idx
 = 4;

1085 
idx
 = 3;

1088 
idx
 = 2;

1091 
idx
 = 1;

1096 
	`as£π
(
idx
 < 
FIO_IO_U_LAT_N_NR
);

1097 
td
->
ts
.
io_u_œt_n
[
idx
]++;

1098 
	}
}

1100 
	$io_u_m¨k_œt_u£c
(
thªad_d©a
 *
td
, 
u£c
)

1102 
idx
 = 0;

1104 
	`as£π
(
u£c
 < 1000 && usec >= 1);

1106 
u£c
) {

1108 
idx
 = 9;

1111 
idx
 = 8;

1114 
idx
 = 7;

1117 
idx
 = 6;

1120 
idx
 = 5;

1123 
idx
 = 4;

1126 
idx
 = 3;

1129 
idx
 = 2;

1132 
idx
 = 1;

1137 
	`as£π
(
idx
 < 
FIO_IO_U_LAT_U_NR
);

1138 
td
->
ts
.
io_u_œt_u
[
idx
]++;

1139 
	}
}

1141 
	$io_u_m¨k_œt_m£c
(
thªad_d©a
 *
td
, 
m£c
)

1143 
idx
 = 0;

1145 
	`as£π
(
m£c
 >= 1);

1147 
m£c
) {

1149 
idx
 = 11;

1152 
idx
 = 10;

1155 
idx
 = 9;

1158 
idx
 = 8;

1161 
idx
 = 7;

1164 
idx
 = 6;

1167 
idx
 = 5;

1170 
idx
 = 4;

1173 
idx
 = 3;

1176 
idx
 = 2;

1179 
idx
 = 1;

1184 
	`as£π
(
idx
 < 
FIO_IO_U_LAT_M_NR
);

1185 
td
->
ts
.
io_u_œt_m
[
idx
]++;

1186 
	}
}

1188 
	$io_u_m¨k_œãncy
(
thªad_d©a
 *
td
, 
n£c
)

1190 i‡(
n£c
 < 1000)

1191 
	`io_u_m¨k_œt_n£c
(
td
, 
n£c
);

1192 i‡(
n£c
 < 1000000)

1193 
	`io_u_m¨k_œt_u£c
(
td
, 
n£c
 / 1000);

1195 
	`io_u_m¨k_œt_m£c
(
td
, 
n£c
 / 1000000);

1196 
	}
}

1198 
	$__gë_√xt_fûío_ønd
(
thªad_d©a
 *
td
)

1200 
fûío
;

1202 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_RANDOM
) {

1203 
uöt64_t
 
‰™d_max
 = 
	`ønd_max
(&
td
->
√xt_fûe_°©e
);

1204 
r
;

1206 
r
 = 
	`__ønd
(&
td
->
√xt_fûe_°©e
);

1207  (Ë((Ë
td
->
o
.
ƒ_fûes


1208 * (
r
 / (
‰™d_max
 + 1.0)));

1211 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_ZIPF
)

1212 
fûío
 = 
	`zùf_√xt
(&
td
->
√xt_fûe_zùf
);

1213 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_PARETO
)

1214 
fûío
 = 
	`∑ªto_√xt
(&
td
->
√xt_fûe_zùf
);

1215 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_GAUSS
)

1216 
fûío
 = 
	`gauss_√xt
(&
td
->
√xt_fûe_gauss
);

1218 
	`log_îr
("fio: bad fûê£rvi˚Åy≥: %d\n", 
td
->
o
.
fûe_£rvi˚_ty≥
);

1219 
	`as£π
(0);

1223  
fûío
 >> 
FIO_FSERVICE_SHIFT
;

1224 
	}
}

1229 
fio_fûe
 *
	$gë_√xt_fûe_ønd
(
thªad_d©a
 *
td
,

1230 
fio_fûe_Êags
 
goodf
,

1231 
fio_fûe_Êags
 
badf
)

1233 
fio_fûe
 *
f
;

1234 
‚o
;

1237 
›íed
 = 0;

1239 
‚o
 = 
	`__gë_√xt_fûío_ønd
(
td
);

1241 
f
 = 
td
->
fûes
[
‚o
];

1242 i‡(
	`fio_fûe_d⁄e
(
f
))

1245 i‡(!
	`fio_fûe_›í
(
f
)) {

1246 
îr
;

1248 i‡(
td
->
ƒ_›í_fûes
 >td->
o
.
›í_fûes
)

1249  
	`ERR_PTR
(-
EBUSY
);

1251 
îr
 = 
	`td_io_›í_fûe
(
td
, 
f
);

1252 i‡(
îr
)

1254 
›íed
 = 1;

1257 i‡((!
goodf
 || (
f
->
Êags
 & goodf)Ë&& !(f->Êag†& 
badf
)) {

1258 
	`d¥öt
(
FD_FILE
, "gë_√xt_fûe_ønd: %p\n", 
f
);

1259  
f
;

1261 i‡(
›íed
)

1262 
	`td_io_˛o£_fûe
(
td
, 
f
);

1264 
	}
}

1269 
fio_fûe
 *
	$gë_√xt_fûe_º
(
thªad_d©a
 *
td
, 
goodf
,

1270 
badf
)

1272 
ﬁd_√xt_fûe
 = 
td
->
√xt_fûe
;

1273 
fio_fûe
 *
f
;

1276 
›íed
 = 0;

1278 
f
 = 
td
->
fûes
[td->
√xt_fûe
];

1280 
td
->
√xt_fûe
++;

1281 i‡(
td
->
√xt_fûe
 >td->
o
.
ƒ_fûes
)

1282 
td
->
√xt_fûe
 = 0;

1284 
	`d¥öt
(
FD_FILE
, "åyög fûê%†%x\n", 
f
->
fûe_«me
, f->
Êags
);

1285 i‡(
	`fio_fûe_d⁄e
(
f
)) {

1286 
f
 = 
NULL
;

1290 i‡(!
	`fio_fûe_›í
(
f
)) {

1291 
îr
;

1293 i‡(
td
->
ƒ_›í_fûes
 >td->
o
.
›í_fûes
)

1294  
	`ERR_PTR
(-
EBUSY
);

1296 
îr
 = 
	`td_io_›í_fûe
(
td
, 
f
);

1297 i‡(
îr
) {

1298 
	`d¥öt
(
FD_FILE
, "error %d on open of %s\n",

1299 
îr
, 
f
->
fûe_«me
);

1300 
f
 = 
NULL
;

1303 
›íed
 = 1;

1306 
	`d¥öt
(
FD_FILE
, "goodf=%x, badf=%x, ff=%x\n", 
goodf
, 
badf
,

1307 
f
->
Êags
);

1308 i‡((!
goodf
 || (
f
->
Êags
 & goodf)Ë&& !(f->Êag†& 
badf
))

1311 i‡(
›íed
)

1312 
	`td_io_˛o£_fûe
(
td
, 
f
);

1314 
f
 = 
NULL
;

1315 } 
td
->
√xt_fûe
 !
ﬁd_√xt_fûe
);

1317 
	`d¥öt
(
FD_FILE
, "gë_√xt_fûe_º: %p\n", 
f
);

1318  
f
;

1319 
	}
}

1321 
fio_fûe
 *
	$__gë_√xt_fûe
(
thªad_d©a
 *
td
)

1323 
fio_fûe
 *
f
;

1325 
	`as£π
(
td
->
o
.
ƒ_fûes
 <td->
fûes_ödex
);

1327 i‡(
td
->
ƒ_d⁄e_fûes
 >td->
o
.
ƒ_fûes
) {

1328 
	`d¥öt
(
FD_FILE
, "get_next_file:Çr_open=%d,Çr_done=%d,"

1329 "Çr_fûes=%d\n", 
td
->
ƒ_›í_fûes
,

1330 
td
->
ƒ_d⁄e_fûes
,

1331 
td
->
o
.
ƒ_fûes
);

1332  
NULL
;

1335 
f
 = 
td
->
fûe_£rvi˚_fûe
;

1336 i‡(
f
 && 
	`fio_fûe_›í
(fË&& !
	`fio_fûe_˛osög
(f)) {

1337 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_SEQ
)

1338 
out
;

1339 i‡(
td
->
fûe_£rvi˚_À·
--)

1340 
out
;

1343 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_RR
 ||

1344 
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_SEQ
)

1345 
f
 = 
	`gë_√xt_fûe_º
(
td
, 
FIO_FILE_›í
, 
FIO_FILE_˛osög
);

1347 
f
 = 
	`gë_√xt_fûe_ønd
(
td
, 
FIO_FILE_›í
, 
FIO_FILE_˛osög
);

1349 i‡(
	`IS_ERR
(
f
))

1350  
f
;

1352 
td
->
fûe_£rvi˚_fûe
 = 
f
;

1353 
td
->
fûe_£rvi˚_À·
 =Åd->
fûe_£rvi˚_ƒ
 - 1;

1354 
out
:

1355 i‡(
f
)

1356 
	`d¥öt
(
FD_FILE
, "gë_√xt_fûe: %∞[%s]\n", 
f
, f->
fûe_«me
);

1358 
	`d¥öt
(
FD_FILE
, "get_next_file: NULL\n");

1359  
f
;

1360 
	}
}

1362 
fio_fûe
 *
	$gë_√xt_fûe
(
thªad_d©a
 *
td
)

1364  
	`__gë_√xt_fûe
(
td
);

1365 
	}
}

1367 
	$£t_io_u_fûe
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1369 
fio_fûe
 *
f
;

1372 
f
 = 
	`gë_√xt_fûe
(
td
);

1373 i‡(
	`IS_ERR_OR_NULL
(
f
))

1374  
	`PTR_ERR
(
f
);

1376 
io_u
->
fûe
 = 
f
;

1377 
	`gë_fûe
(
f
);

1379 i‡(!
	`fûl_io_u
(
td
, 
io_u
))

1382 
	`put_fûe_log
(
td
, 
f
);

1383 
	`td_io_˛o£_fûe
(
td
, 
f
);

1384 
io_u
->
fûe
 = 
NULL
;

1385 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 & 
__FIO_FSERVICE_NONUNIFORM
)

1386 
	`fio_fûe_ª£t
(
td
, 
f
);

1388 
	`fio_fûe_£t_d⁄e
(
f
);

1389 
td
->
ƒ_d⁄e_fûes
++;

1390 
	`d¥öt
(
FD_FILE
, "%s: i†d⁄ê(%d o‡%d)\n", 
f
->
fûe_«me
,

1391 
td
->
ƒ_d⁄e_fûes
,Åd->
o
.
ƒ_fûes
);

1396 
	}
}

1398 
	$œt_Áèl
(
thªad_d©a
 *
td
, 
io_com∂ëi⁄_d©a
 *
icd
,

1399 
ä£c
, 
max_n£c
)

1401 i‡(!
td
->
îr‹
)

1402 
	`log_îr
("fio:Ü©ícy o‡%ŒuÇ£¯ex˚ed†•ecifõd max (%ŒuÇ£c)\n", 
ä£c
, 
max_n£c
);

1403 
	`td_vîr‹
(
td
, 
ETIMEDOUT
, "maxÜatencyÉxceeded");

1404 
icd
->
îr‹
 = 
ETIMEDOUT
;

1405 
	}
}

1407 
	$œt_√w_cy˛e
(
thªad_d©a
 *
td
)

1409 
	`fio_gëtime
(&
td
->
œãncy_ts
, 
NULL
);

1410 
td
->
œãncy_ios
 = 
	`ddú_rw_sum
—d->
io_blocks
);

1411 
td
->
œãncy_Áûed
 = 0;

1412 
	}
}

1418 
boﬁ
 
	$__œt_èrgë_Áûed
(
thªad_d©a
 *
td
)

1420 i‡(
td
->
œãncy_qd
 == 1)

1421  
åue
;

1423 
td
->
œãncy_qd_high
 =Åd->
œãncy_qd
;

1425 i‡(
td
->
œãncy_qd
 =td->
œãncy_qd_low
)

1426 
td
->
œãncy_qd_low
--;

1428 
td
->
œãncy_qd
 = (td->œãncy_qd +Åd->
œãncy_qd_low
) / 2;

1430 
	`d¥öt
(
FD_RATE
, "Ram≥d down: %d %d %d\n", 
td
->
œãncy_qd_low
,Åd->
œãncy_qd
,Åd->
œãncy_qd_high
);

1436 
	`io_u_quõs˚
(
td
);

1437 
	`œt_√w_cy˛e
(
td
);

1438  
Ál£
;

1439 
	}
}

1441 
boﬁ
 
	$œt_èrgë_Áûed
(
thªad_d©a
 *
td
)

1443 i‡(
td
->
o
.
œãncy_≥r˚¡ûe
.
u
.
f
 == 100.0)

1444  
	`__œt_èrgë_Áûed
(
td
);

1446 
td
->
œãncy_Áûed
++;

1447  
Ál£
;

1448 
	}
}

1450 
	$œt_èrgë_öô
(
thªad_d©a
 *
td
)

1452 
td
->
œãncy_íd_run
 = 0;

1454 i‡(
td
->
o
.
œãncy_èrgë
) {

1455 
	`d¥öt
(
FD_RATE
, "L©ícyÅ¨gë=%Œu\n", 
td
->
o
.
œãncy_èrgë
);

1456 
	`fio_gëtime
(&
td
->
œãncy_ts
, 
NULL
);

1457 
td
->
œãncy_qd
 = 1;

1458 
td
->
œãncy_qd_high
 =Åd->
o
.
iodïth
;

1459 
td
->
œãncy_qd_low
 = 1;

1460 
td
->
œãncy_ios
 = 
	`ddú_rw_sum
—d->
io_blocks
);

1462 
td
->
œãncy_qd
 =Åd->
o
.
iodïth
;

1463 
	}
}

1465 
	$œt_èrgë_ª£t
(
thªad_d©a
 *
td
)

1467 i‡(!
td
->
œãncy_íd_run
)

1468 
	`œt_èrgë_öô
(
td
);

1469 
	}
}

1471 
	$œt_èrgë_suc˚ss
(
thªad_d©a
 *
td
)

1473 c⁄° 
qd
 = 
td
->
œãncy_qd
;

1474 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1476 
td
->
œãncy_qd_low
 =Åd->
œãncy_qd
;

1483 i‡(
td
->
œãncy_qd_high
 !
o
->
iodïth
)

1484 
td
->
œãncy_qd
 = (td->œãncy_qd +Åd->
œãncy_qd_high
) / 2;

1486 
td
->
œãncy_qd
 *= 2;

1488 i‡(
td
->
œãncy_qd
 > 
o
->
iodïth
)

1489 
td
->
œãncy_qd
 = 
o
->
iodïth
;

1491 
	`d¥öt
(
FD_RATE
, "Ram≥d up: %d %d %d\n", 
td
->
œãncy_qd_low
,Åd->
œãncy_qd
,Åd->
œãncy_qd_high
);

1497 i‡(
td
->
œãncy_qd
 =
qd
) {

1498 i‡(
td
->
œãncy_íd_run
) {

1499 
	`d¥öt
(
FD_RATE
, "Weáre done\n");

1500 
td
->
d⁄e
 = 1;

1502 
	`d¥öt
(
FD_RATE
, "Quiesceánd finalÑun\n");

1503 
	`io_u_quõs˚
(
td
);

1504 
td
->
œãncy_íd_run
 = 1;

1505 
	`ª£t_Æl_°©s
(
td
);

1506 
	`ª£t_io_°©s
(
td
);

1510 
	`œt_√w_cy˛e
(
td
);

1511 
	}
}

1516 
	$œt_èrgë_check
(
thªad_d©a
 *
td
)

1518 
uöt64_t
 
u£c_wödow
;

1519 
uöt64_t
 
ios
;

1520 
suc˚ss_ios
;

1522 
u£c_wödow
 = 
	`utime_sö˚_now
(&
td
->
œãncy_ts
);

1523 i‡(
u£c_wödow
 < 
td
->
o
.
œãncy_wödow
)

1526 
ios
 = 
	`ddú_rw_sum
(
td
->
io_blocks
Ë-Åd->
œãncy_ios
;

1527 
suc˚ss_ios
 = (Ë(
ios
 - 
td
->
œãncy_Áûed
) / () ios;

1528 
suc˚ss_ios
 *= 100.0;

1530 
	`d¥öt
(
FD_RATE
, "Suc˚s†øã: %.2f%% (èrgë %.2f%%)\n", 
suc˚ss_ios
, 
td
->
o
.
œãncy_≥r˚¡ûe
.
u
.
f
);

1532 i‡(
suc˚ss_ios
 >
td
->
o
.
œãncy_≥r˚¡ûe
.
u
.
f
)

1533 
	`œt_èrgë_suc˚ss
(
td
);

1535 
	`__œt_èrgë_Áûed
(
td
);

1536 
	}
}

1542 
boﬁ
 
	$queue_fuŒ
(c⁄° 
thªad_d©a
 *
td
)

1544 c⁄° 
qem±y
 = 
	`io_u_qem±y
(&
td
->
io_u_‰ìli°
);

1546 i‡(
qem±y
)

1547  
åue
;

1548 i‡(!
td
->
o
.
œãncy_èrgë
)

1549  
Ál£
;

1551  
td
->
cur_dïth
 >td->
œãncy_qd
;

1552 
	}
}

1554 
io_u
 *
	$__gë_io_u
(
thªad_d©a
 *
td
)

1556 
io_u
 *io_u = 
NULL
;

1558 i‡(
td
->
°›_io
)

1559  
NULL
;

1561 
	`td_io_u_lock
(
td
);

1563 
agaö
:

1564 i‡(!
	`io_u_ªm±y
(&
td
->
io_u_ªqueues
))

1565 
io_u
 = 
	`io_u_Ω›
(&
td
->
io_u_ªqueues
);

1566 i‡(!
	`queue_fuŒ
(
td
)) {

1567 
io_u
 = 
	`io_u_qp›
(&
td
->
io_u_‰ìli°
);

1569 
io_u
->
fûe
 = 
NULL
;

1570 
io_u
->
buÊí
 = 0;

1571 
io_u
->
ªsid
 = 0;

1572 
io_u
->
íd_io
 = 
NULL
;

1575 i‡(
io_u
) {

1576 
	`as£π
(
io_u
->
Êags
 & 
IO_U_F_FREE
);

1577 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FREE
 | 
IO_U_F_NO_FILE_PUT
 |

1578 
IO_U_F_TRIMMED
 | 
IO_U_F_BARRIER
 |

1579 
IO_U_F_VER_LIST
);

1581 
io_u
->
îr‹
 = 0;

1582 
io_u
->
ac˘_ddú
 = -1;

1583 
td
->
cur_dïth
++;

1584 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

1585 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_IN_CUR_DEPTH
);

1586 
io_u
->
ùo
 = 
NULL
;

1587 } i‡(
	`td_async_¥o˚ssög
(
td
)) {

1592 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

1593 
	`as£π
(!
	`±hªad_c⁄d_waô
(&
td
->
‰ì_c⁄d
, &td->
io_u_lock
));

1594 
agaö
;

1597 
	`td_io_u_u∆ock
(
td
);

1598  
io_u
;

1599 
	}
}

1601 
boﬁ
 
	$check_gë_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1603 i‡(!(
td
->
Êags
 & 
TD_F_TRIM_BACKLOG
))

1604  
Ál£
;

1605 i‡(!
td
->
åim_íåõs
)

1606  
Ál£
;

1608 i‡(
td
->
åim_b©ch
) {

1609 
td
->
åim_b©ch
--;

1610 i‡(
	`gë_√xt_åim
(
td
, 
io_u
))

1611  
åue
;

1612 } i‡(!(
td
->
io_hi°_Àn
 %Åd->
o
.
åim_backlog
) &&

1613 
td
->
œ°_ddú
 !
DDIR_READ
) {

1614 
td
->
åim_b©ch
 =Åd->
o
.trim_batch;

1615 i‡(!
td
->
åim_b©ch
)

1616 
td
->
åim_b©ch
 =Åd->
o
.
åim_backlog
;

1617 i‡(
	`gë_√xt_åim
(
td
, 
io_u
))

1618  
åue
;

1621  
Ál£
;

1622 
	}
}

1624 
boﬁ
 
	$check_gë_vîify
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1626 i‡(!(
td
->
Êags
 & 
TD_F_VER_BACKLOG
))

1627  
Ál£
;

1629 i‡(
td
->
io_hi°_Àn
) {

1630 
gë_vîify
 = 0;

1632 i‡(
td
->
vîify_b©ch
)

1633 
gë_vîify
 = 1;

1634 i‡(!(
td
->
io_hi°_Àn
 %Åd->
o
.
vîify_backlog
) &&

1635 
td
->
œ°_ddú
 !
DDIR_READ
) {

1636 
td
->
vîify_b©ch
 =Åd->
o
.verify_batch;

1637 i‡(!
td
->
vîify_b©ch
)

1638 
td
->
vîify_b©ch
 =Åd->
o
.
vîify_backlog
;

1639 
gë_vîify
 = 1;

1642 i‡(
gë_vîify
 && !
	`gë_√xt_vîify
(
td
, 
io_u
)) {

1643 
td
->
vîify_b©ch
--;

1644  
åue
;

1648  
Ál£
;

1649 
	}
}

1657 
	$smÆl_c⁄ã¡_s¸ambÀ
(
io_u
 *io_u)

1659 
i
, 
ƒ_blocks
 = 
io_u
->
buÊí
 >> 9;

1660 
off£t
;

1661 
uöt64_t
 
boff£t
, *
ùå
;

1662 *
p
;

1664 i‡(!
ƒ_blocks
)

1667 
p
 = 
io_u
->
x„r_buf
;

1668 
boff£t
 = 
io_u
->
off£t
;

1670 i‡(
io_u
->
buf_fûÀd_Àn
)

1671 
io_u
->
buf_fûÀd_Àn
 = 0;

1679 
off£t
 = (
io_u
->
°¨t_time
.
tv_n£c
 ^ 
boff£t
) & 7;

1681 
i
 = 0; i < 
ƒ_blocks
; i++) {

1686 
ùå
 = (*Ë
p
 + (
off£t
 << 6);

1687 *
ùå
 = 
boff£t
;

1689 
ùå
 = (*Ë
p
 + 64 - 2 * (
uöt64_t
);

1690 
ùå
[0] = 
io_u
->
°¨t_time
.
tv_£c
;

1691 
ùå
[1] = 
io_u
->
°¨t_time
.
tv_n£c
;

1693 
p
 += 512;

1694 
boff£t
 += 512;

1696 
	}
}

1702 
io_u
 *
	$gë_io_u
(
thªad_d©a
 *
td
)

1704 
fio_fûe
 *
f
;

1705 
io_u
 *io_u;

1706 
do_s¸ambÀ
 = 0;

1707 
ªt
 = 0;

1709 
io_u
 = 
	`__gë_io_u
(
td
);

1710 i‡(!
io_u
) {

1711 
	`d¥öt
(
FD_IO
, "__get_io_u failed\n");

1712  
NULL
;

1715 i‡(
	`check_gë_vîify
(
td
, 
io_u
))

1716 
out
;

1717 i‡(
	`check_gë_åim
(
td
, 
io_u
))

1718 
out
;

1723 i‡(
io_u
->
fûe
)

1724 
out
;

1729 i‡(
td
->
Êags
 & 
TD_F_READ_IOLOG
) {

1730 i‡(
	`ªad_iﬁog_gë
(
td
, 
io_u
))

1731 
îr_put
;

1732 } i‡(
	`£t_io_u_fûe
(
td
, 
io_u
)) {

1733 
ªt
 = -
EBUSY
;

1734 
	`d¥öt
(
FD_IO
, "io_u %p, sëtög fûêÁûed\n", 
io_u
);

1735 
îr_put
;

1738 
f
 = 
io_u
->
fûe
;

1739 i‡(!
f
) {

1740 
	`d¥öt
(
FD_IO
, "io_u %p, sëtög fûêÁûed\n", 
io_u
);

1741 
îr_put
;

1744 
	`as£π
(
	`fio_fûe_›í
(
f
));

1746 i‡(
	`ddú_rw
(
io_u
->
ddú
)) {

1747 i‡(!
io_u
->
buÊí
 && !
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
)) {

1748 
	`d¥öt
(
FD_IO
, "gë_io_u: zîÿbuÊí o¿%p\n", 
io_u
);

1749 
îr_put
;

1752 
f
->
œ°_°¨t
[
io_u
->
ddú
] = io_u->
off£t
;

1753 
f
->
œ°_pos
[
io_u
->
ddú
] = io_u->
off£t
 + io_u->
buÊí
;

1755 i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

1756 i‡(
td
->
Êags
 & 
TD_F_REFILL_BUFFERS
) {

1757 
	`io_u_fûl_buf„r
(
td
, 
io_u
,

1758 
td
->
o
.
mö_bs
[
DDIR_WRITE
],

1759 
io_u
->
buÊí
);

1760 } i‡((
td
->
Êags
 & 
TD_F_SCRAMBLE_BUFFERS
) &&

1761 !(
td
->
Êags
 & 
TD_F_COMPRESS
))

1762 
do_s¸ambÀ
 = 1;

1763 i‡(
td
->
Êags
 & 
TD_F_VER_NONE
) {

1764 
	`p›uœã_vîify_io_u
(
td
, 
io_u
);

1765 
do_s¸ambÀ
 = 0;

1767 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

1772 
io_u
->
buf_fûÀd_Àn
 = 0;

1779 
io_u
->
x„r_buf
 = io_u->
buf
;

1780 
io_u
->
x„r_buÊí
 = io_u->
buÊí
;

1782 
out
:

1783 
	`as£π
(
io_u
->
fûe
);

1784 i‡(!
	`td_io_¥ï
(
td
, 
io_u
)) {

1785 i‡(!
td
->
o
.
dißbÀ_œt
)

1786 
	`fio_gëtime
(&
io_u
->
°¨t_time
, 
NULL
);

1788 i‡(
do_s¸ambÀ
)

1789 
	`smÆl_c⁄ã¡_s¸ambÀ
(
io_u
);

1791  
io_u
;

1793 
îr_put
:

1794 
	`d¥öt
(
FD_IO
, "get_io_u failed\n");

1795 
	`put_io_u
(
td
, 
io_u
);

1796  
	`ERR_PTR
(
ªt
);

1797 
	}
}

1799 
	$__io_u_log_îr‹
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1801 
îr‹_ty≥_bô
 
eb
 = 
	`td_îr‹_ty≥
(
io_u
->
ddú
, io_u->
îr‹
);

1803 i‡(
	`td_n⁄_Áèl_îr‹
(
td
, 
eb
, 
io_u
->
îr‹
Ë&& !td->
o
.
îr‹_dump
)

1806 
	`log_îr
("fio: io_uÉrror%s%s: %s: %s offset=%llu, buflen=%lu\n",

1807 
io_u
->
fûe
 ? " on file " : "",

1808 
io_u
->
fûe
 ? io_u->fûe->
fûe_«me
 : "",

1809 
	`°ªº‹
(
io_u
->
îr‹
),

1810 
	`io_ddú_«me
(
io_u
->
ddú
),

1811 
io_u
->
off£t
, io_u->
x„r_buÊí
);

1813 i‡(
td
->
io_›s
->
îrdëaûs
) {

1814 *
îr
 = 
td
->
io_›s
->
	`îrdëaûs
(
io_u
);

1816 
	`log_îr
("fio: %s\n", 
îr
);

1817 
	`‰ì
(
îr
);

1820 i‡(!
td
->
îr‹
)

1821 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "io_uÉrror");

1822 
	}
}

1824 
	$io_u_log_îr‹
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1826 
	`__io_u_log_îr‹
(
td
, 
io_u
);

1827 i‡(
td
->
∑ª¡
)

1828 
	`__io_u_log_îr‹
(
td
->
∑ª¡
, 
io_u
);

1829 
	}
}

1831 
ölöe
 
boﬁ
 
	$gtod_ªdu˚
(
thªad_d©a
 *
td
)

1833  (
td
->
o
.
dißbÀ_˛©
 &&Åd->o.
dißbÀ_¶©
 &&Åd->o.
dißbÀ_bw
)

1834 || 
td
->
o
.
gtod_ªdu˚
;

1835 
	}
}

1837 
	$accou¡_io_com∂ëi⁄
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1838 
io_com∂ëi⁄_d©a
 *
icd
,

1839 c⁄° 
fio_ddú
 
idx
, 
byãs
)

1841 c⁄° 
no_ªdu˚
 = !
	`gtod_ªdu˚
(
td
);

1842 
Œn£c
 = 0;

1844 i‡(
td
->
∑ª¡
)

1845 
td
 =Åd->
∑ª¡
;

1847 i‡(!
td
->
o
.
°©s
 || 
	`td_i€ngöe_Êagged
—d, 
FIO_NOSTATS
))

1850 i‡(
no_ªdu˚
)

1851 
Œn£c
 = 
	`¡ime_sö˚
(&
io_u
->
issue_time
, &
icd
->
time
);

1853 i‡(!
td
->
o
.
dißbÀ_œt
) {

1854 
ä£c
;

1856 
ä£c
 = 
	`¡ime_sö˚
(&
io_u
->
°¨t_time
, &
icd
->
time
);

1857 
	`add_œt_ßm∂e
(
td
, 
idx
, 
ä£c
, 
byãs
, 
io_u
->
off£t
);

1859 i‡(
td
->
Êags
 & 
TD_F_PROFILE_OPS
) {

1860 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

1862 i‡(
›s
->
io_u_œt
)

1863 
icd
->
îr‹
 = 
›s
->
	`io_u_œt
(
td
, 
ä£c
);

1866 i‡(
td
->
o
.
max_œãncy
 && 
ä£c
 >Åd->o.max_latency)

1867 
	`œt_Áèl
(
td
, 
icd
, 
ä£c
,Åd->
o
.
max_œãncy
);

1868 i‡(
td
->
o
.
œãncy_èrgë
 && 
ä£c
 >Åd->o.latency_target) {

1869 i‡(
	`œt_èrgë_Áûed
(
td
))

1870 
	`œt_Áèl
(
td
, 
icd
, 
ä£c
,Åd->
o
.
œãncy_èrgë
);

1874 i‡(
	`ddú_rw
(
idx
)) {

1875 i‡(!
td
->
o
.
dißbÀ_˛©
) {

1876 
	`add_˛©_ßm∂e
(
td
, 
idx
, 
Œn£c
, 
byãs
, 
io_u
->
off£t
);

1877 
	`io_u_m¨k_œãncy
(
td
, 
Œn£c
);

1880 i‡(!
td
->
o
.
dißbÀ_bw
 && 
	`≥r_unô_log
—d->
bw_log
))

1881 
	`add_bw_ßm∂e
(
td
, 
io_u
, 
byãs
, 
Œn£c
);

1883 i‡(
no_ªdu˚
 && 
	`≥r_unô_log
(
td
->
i›s_log
))

1884 
	`add_i›s_ßm∂e
(
td
, 
io_u
, 
byãs
);

1885 } i‡(
	`ddú_sync
(
idx
Ë&& !
td
->
o
.
dißbÀ_˛©
)

1886 
	`add_sync_˛©_ßm∂e
(&
td
->
ts
, 
Œn£c
);

1888 i‡(
td
->
ts
.
ƒ_block_öfos
 && 
io_u
->
ddú
 =
DDIR_TRIM
) {

1889 
uöt32_t
 *
öfo
 = 
	`io_u_block_öfo
(
td
, 
io_u
);

1890 i‡(
	`BLOCK_INFO_STATE
(*
öfo
Ë< 
BLOCK_STATE_TRIM_FAILURE
) {

1891 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

1892 *
öfo
 = 
	`BLOCK_INFO
(
BLOCK_STATE_TRIMMED
,

1893 
	`BLOCK_INFO_TRIMS
(*
öfo
) + 1);

1894 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

1895 *
öfo
 = 
	`BLOCK_INFO_SET_STATE
(
BLOCK_STATE_WRITTEN
,

1896 *
öfo
);

1900 
	}
}

1902 
	$fûe_log_wrôe_comp
(c⁄° 
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

1903 
uöt64_t
 
off£t
, 
byãs
)

1905 
idx
;

1907 i‡(!
f
)

1910 i‡(
f
->
fú°_wrôe
 =-1ULL || 
off£t
 < f->first_write)

1911 
f
->
fú°_wrôe
 = 
off£t
;

1912 i‡(
f
->
œ°_wrôe
 =-1ULL || ((
off£t
 + 
byãs
) > f->last_write))

1913 
f
->
œ°_wrôe
 = 
off£t
 + 
byãs
;

1915 i‡(!
f
->
œ°_wrôe_comp
)

1918 
idx
 = 
f
->
œ°_wrôe_idx
++;

1919 
f
->
œ°_wrôe_comp
[
idx
] = 
off£t
;

1920 i‡(
f
->
œ°_wrôe_idx
 =
td
->
o
.
iodïth
)

1921 
f
->
œ°_wrôe_idx
 = 0;

1922 
	}
}

1924 
boﬁ
 
	$should_accou¡
(
thªad_d©a
 *
td
)

1926  
	`ømp_time_ovî
(
td
Ë&& (td->
run°©e
 =
TD_RUNNING
 ||

1927 
td
->
run°©e
 =
TD_VERIFYING
);

1928 
	}
}

1930 
	$io_com∂ëed
(
thªad_d©a
 *
td
, 
io_u
 **
io_u_±r
,

1931 
io_com∂ëi⁄_d©a
 *
icd
)

1933 
io_u
 *io_u = *
io_u_±r
;

1934 
fio_ddú
 
ddú
 = 
io_u
->ddir;

1935 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1937 
	`d¥öt_io_u
(
io_u
, "complete");

1939 
	`as£π
(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
);

1940 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FLIGHT
 | 
IO_U_F_BUSY_OK
);

1945 i‡(
io_u
->
ùo
) {

1949 i‡(
io_u
->
îr‹
)

1950 
	`u∆og_io_põ˚
(
td
, 
io_u
);

1952 
io_u
->
ùo
->
Êags
 &~
IP_F_IN_FLIGHT
;

1953 
	`wrôe_b¨rõr
();

1957 i‡(
	`ddú_sync
(
ddú
)) {

1958 
td
->
œ°_was_sync
 = 
åue
;

1959 i‡(
f
) {

1960 
f
->
fú°_wrôe
 = -1ULL;

1961 
f
->
œ°_wrôe
 = -1ULL;

1963 i‡(
	`should_accou¡
(
td
))

1964 
	`accou¡_io_com∂ëi⁄
(
td
, 
io_u
, 
icd
, 
ddú
, io_u->
buÊí
);

1968 
td
->
œ°_was_sync
 = 
Ál£
;

1969 
td
->
œ°_ddú
 = 
ddú
;

1971 i‡(!
io_u
->
îr‹
 && 
	`ddú_rw
(
ddú
)) {

1972 
byãs
 = 
io_u
->
buÊí
 - io_u->
ªsid
;

1973 
ªt
;

1975 
td
->
io_blocks
[
ddú
]++;

1976 
td
->
io_byãs
[
ddú
] +
byãs
;

1978 i‡(!(
io_u
->
Êags
 & 
IO_U_F_VER_LIST
)) {

1979 
td
->
this_io_blocks
[
ddú
]++;

1980 
td
->
this_io_byãs
[
ddú
] +
byãs
;

1983 i‡(
ddú
 =
DDIR_WRITE
)

1984 
	`fûe_log_wrôe_comp
(
td
, 
f
, 
io_u
->
off£t
, 
byãs
);

1986 i‡(
	`should_accou¡
(
td
))

1987 
	`accou¡_io_com∂ëi⁄
(
td
, 
io_u
, 
icd
, 
ddú
, 
byãs
);

1989 
icd
->
byãs_d⁄e
[
ddú
] +
byãs
;

1991 i‡(
io_u
->
íd_io
) {

1992 
ªt
 = 
io_u
->
	`íd_io
(
td
, 
io_u_±r
);

1993 
io_u
 = *
io_u_±r
;

1994 i‡(
ªt
 && !
icd
->
îr‹
)

1995 
icd
->
îr‹
 = 
ªt
;

1997 } i‡(
io_u
->
îr‹
) {

1998 
icd
->
îr‹
 = 
io_u
->error;

1999 
	`io_u_log_îr‹
(
td
, 
io_u
);

2001 i‡(
icd
->
îr‹
) {

2002 
îr‹_ty≥_bô
 
eb
 = 
	`td_îr‹_ty≥
(
ddú
, 
icd
->
îr‹
);

2004 i‡(!
	`td_n⁄_Áèl_îr‹
(
td
, 
eb
, 
icd
->
îr‹
))

2011 
	`upd©e_îr‹_cou¡
(
td
, 
icd
->
îr‹
);

2012 
	`td_˛ór_îr‹
(
td
);

2013 
icd
->
îr‹
 = 0;

2014 i‡(
io_u
)

2015 
io_u
->
îr‹
 = 0;

2017 
	}
}

2019 
	$öô_icd
(
thªad_d©a
 *
td
, 
io_com∂ëi⁄_d©a
 *
icd
,

2020 
ƒ
)

2022 
ddú
;

2024 i‡(!
	`gtod_ªdu˚
(
td
))

2025 
	`fio_gëtime
(&
icd
->
time
, 
NULL
);

2027 
icd
->
ƒ
 =Çr;

2029 
icd
->
îr‹
 = 0;

2030 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++)

2031 
icd
->
byãs_d⁄e
[
ddú
] = 0;

2032 
	}
}

2034 
	$ios_com∂ëed
(
thªad_d©a
 *
td
,

2035 
io_com∂ëi⁄_d©a
 *
icd
)

2037 
io_u
 *io_u;

2038 
i
;

2040 
i
 = 0; i < 
icd
->
ƒ
; i++) {

2041 
io_u
 = 
td
->
io_›s
->
	`evít
—d, 
i
);

2043 
	`io_com∂ëed
(
td
, &
io_u
, 
icd
);

2045 i‡(
io_u
)

2046 
	`put_io_u
(
td
, 
io_u
);

2048 
	}
}

2053 
	$io_u_sync_com∂ëe
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

2055 
io_com∂ëi⁄_d©a
 
icd
;

2056 
ddú
;

2058 
	`öô_icd
(
td
, &
icd
, 1);

2059 
	`io_com∂ëed
(
td
, &
io_u
, &
icd
);

2061 i‡(
io_u
)

2062 
	`put_io_u
(
td
, 
io_u
);

2064 i‡(
icd
.
îr‹
) {

2065 
	`td_vîr‹
(
td
, 
icd
.
îr‹
, "io_u_sync_complete");

2069 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++)

2070 
td
->
byãs_d⁄e
[
ddú
] +
icd
.bytes_done[ddir];

2073 
	}
}

2078 
	$io_u_queued_com∂ëe
(
thªad_d©a
 *
td
, 
mö_evts
)

2080 
io_com∂ëi⁄_d©a
 
icd
;

2081 
time•ec
 *
tvp
 = 
NULL
;

2082 
ªt
, 
ddú
;

2083 
time•ec
 
ts
 = { .
tv_£c
 = 0, .
tv_n£c
 = 0, };

2085 
	`d¥öt
(
FD_IO
, "io_u_queued_com∂ëe: mö=%d\n", 
mö_evts
);

2087 i‡(!
mö_evts
)

2088 
tvp
 = &
ts
;

2089 i‡(
mö_evts
 > 
td
->
cur_dïth
)

2090 
mö_evts
 = 
td
->
cur_dïth
;

2094 
ªt
 = 
	`td_io_gëevíts
(
td
, 
mö_evts
,Åd->
o
.
iodïth_b©ch_com∂ëe_max
, 
tvp
);

2095 i‡(
ªt
 < 0) {

2096 
	`td_vîr‹
(
td
, -
ªt
, "td_io_getevents");

2097  
ªt
;

2098 } i‡(!
ªt
)

2099  
ªt
;

2101 
	`öô_icd
(
td
, &
icd
, 
ªt
);

2102 
	`ios_com∂ëed
(
td
, &
icd
);

2103 i‡(
icd
.
îr‹
) {

2104 
	`td_vîr‹
(
td
, 
icd
.
îr‹
, "io_u_queued_complete");

2108 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++)

2109 
td
->
byãs_d⁄e
[
ddú
] +
icd
.bytes_done[ddir];

2111  
ªt
;

2112 
	}
}

2117 
	$io_u_queued
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

2119 i‡(!
td
->
o
.
dißbÀ_¶©
 && 
	`ømp_time_ovî
—dË&&Åd->o.
°©s
) {

2120 
¶©_time
;

2122 
¶©_time
 = 
	`¡ime_sö˚
(&
io_u
->
°¨t_time
, &io_u->
issue_time
);

2124 i‡(
td
->
∑ª¡
)

2125 
td
 =Åd->
∑ª¡
;

2127 
	`add_¶©_ßm∂e
(
td
, 
io_u
->
ddú
, 
¶©_time
, io_u->
x„r_buÊí
,

2128 
io_u
->
off£t
);

2130 
	}
}

2135 
‰™d_°©e
 *
	$gë_buf_°©e
(
thªad_d©a
 *
td
)

2137 
v
;

2139 i‡(!
td
->
o
.
dedu≥_≥r˚¡age
)

2140  &
td
->
buf_°©e
;

2141 i‡(
td
->
o
.
dedu≥_≥r˚¡age
 == 100) {

2142 
	`‰™d_c›y
(&
td
->
buf_°©e_¥ev
, &td->
buf_°©e
);

2143  &
td
->
buf_°©e
;

2146 
v
 = 
	`ønd32_bëwìn
(&
td
->
dedu≥_°©e
, 1, 100);

2148 i‡(
v
 <
td
->
o
.
dedu≥_≥r˚¡age
)

2149  &
td
->
buf_°©e_¥ev
;

2151  &
td
->
buf_°©e
;

2152 
	}
}

2154 
	$ßve_buf_°©e
(
thªad_d©a
 *
td
, 
‰™d_°©e
 *
rs
)

2156 i‡(
td
->
o
.
dedu≥_≥r˚¡age
 == 100)

2157 
	`‰™d_c›y
(
rs
, &
td
->
buf_°©e_¥ev
);

2158 i‡(
rs
 =&
td
->
buf_°©e
)

2159 
	`‰™d_c›y
(&
td
->
buf_°©e_¥ev
, 
rs
);

2160 
	}
}

2162 
	$fûl_io_buf„r
(
thªad_d©a
 *
td
, *
buf
, 
mö_wrôe
,

2163 
max_bs
)

2165 
thªad_›ti⁄s
 *
o
 = &
td
->o;

2167 i‡(
o
->
mem_ty≥
 =
MEM_CUDA_MALLOC
)

2170 i‡(
o
->
com¥ess_≥r˚¡age
 || o->
dedu≥_≥r˚¡age
) {

2171 
≥rc
 = 
td
->
o
.
com¥ess_≥r˚¡age
;

2172 
‰™d_°©e
 *
rs
;

2173 
À·
 = 
max_bs
;

2174 
this_wrôe
;

2177 
rs
 = 
	`gë_buf_°©e
(
td
);

2179 
mö_wrôe
 = 
	`mö
(mö_wrôe, 
À·
);

2181 i‡(
≥rc
) {

2182 
this_wrôe
 = 
	`mö_nŸ_zîo
(
mö_wrôe
,

2183 
td
->
o
.
com¥ess_chunk
);

2185 
	`fûl_øndom_buf_≥r˚¡age
(
rs
, 
buf
, 
≥rc
,

2186 
this_wrôe
,Åhis_write,

2187 
o
->
buf„r_∑âîn
,

2188 
o
->
buf„r_∑âîn_byãs
);

2190 
	`fûl_øndom_buf
(
rs
, 
buf
, 
mö_wrôe
);

2191 
this_wrôe
 = 
mö_wrôe
;

2194 
buf
 +
this_wrôe
;

2195 
À·
 -
this_wrôe
;

2196 
	`ßve_buf_°©e
(
td
, 
rs
);

2197 } 
À·
);

2198 } i‡(
o
->
buf„r_∑âîn_byãs
)

2199 
	`fûl_buf„r_∑âîn
(
td
, 
buf
, 
max_bs
);

2200 i‡(
o
->
zîo_buf„rs
)

2201 
	`mem£t
(
buf
, 0, 
max_bs
);

2203 
	`fûl_øndom_buf
(
	`gë_buf_°©e
(
td
), 
buf
, 
max_bs
);

2204 
	}
}

2209 
	$io_u_fûl_buf„r
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

2210 
mö_wrôe
, 
max_bs
)

2212 
io_u
->
buf_fûÀd_Àn
 = 0;

2213 
	`fûl_io_buf„r
(
td
, 
io_u
->
buf
, 
mö_wrôe
, 
max_bs
);

2214 
	}
}

2216 
	$do_sync_fûe_ønge
(c⁄° 
thªad_d©a
 *
td
,

2217 
fio_fûe
 *
f
)

2219 
off64_t
 
off£t
, 
nbyãs
;

2221 
off£t
 = 
f
->
fú°_wrôe
;

2222 
nbyãs
 = 
f
->
œ°_wrôe
 - f->
fú°_wrôe
;

2224 i‡(!
nbyãs
)

2227  
	`sync_fûe_ønge
(
f
->
fd
, 
off£t
, 
nbyãs
, 
td
->
o
.
sync_fûe_ønge
);

2228 
	}
}

2230 
	$do_io_u_sync
(c⁄° 
thªad_d©a
 *
td
, 
io_u
 *io_u)

2232 
ªt
;

2234 i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

2235 
ªt
 = 
	`fsync
(
io_u
->
fûe
->
fd
);

2236 } i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
) {

2237 #ifde‡
CONFIG_FDATASYNC


2238 
ªt
 = 
	`fd©async
(
io_u
->
fûe
->
fd
);

2240 
ªt
 = 
io_u
->
x„r_buÊí
;

2241 
io_u
->
îr‹
 = 
EINVAL
;

2243 } i‡(
io_u
->
ddú
 =
DDIR_SYNC_FILE_RANGE
)

2244 
ªt
 = 
	`do_sync_fûe_ønge
(
td
, 
io_u
->
fûe
);

2246 
ªt
 = 
io_u
->
x„r_buÊí
;

2247 
io_u
->
îr‹
 = 
EINVAL
;

2250 i‡(
ªt
 < 0)

2251 
io_u
->
îr‹
 = 
î∫o
;

2253  
ªt
;

2254 
	}
}

2256 
	$do_io_u_åim
(c⁄° 
thªad_d©a
 *
td
, 
io_u
 *io_u)

2258 #i‚de‡
FIO_HAVE_TRIM


2259 
io_u
->
îr‹
 = 
EINVAL
;

2262 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

2263 
ªt
;

2265 
ªt
 = 
	`os_åim
(
f
, 
io_u
->
off£t
, io_u->
x„r_buÊí
);

2266 i‡(!
ªt
)

2267  
io_u
->
x„r_buÊí
;

2269 
io_u
->
îr‹
 = 
ªt
;

2272 
	}
}

	@/home/ysjin/Desktop/fio/fio/io_u.h

1 #i‚de‡
FIO_IO_U


2 
	#FIO_IO_U


	)

4 
	~"compûî/compûî.h
"

5 
	~"os/os.h
"

6 
	~"log.h
"

7 
	~"io_ddú.h
"

8 
	~"debug.h
"

9 
	~"fûe.h
"

10 
	~"w‹kqueue.h
"

12 #ifde‡
CONFIG_LIBAIO


13 
	~<libaio.h
>

15 #ifde‡
CONFIG_GUASI


16 
	~<guasi.h
>

20 
	mIO_U_F_FREE
 = 1 << 0,

21 
	mIO_U_F_FLIGHT
 = 1 << 1,

22 
	mIO_U_F_NO_FILE_PUT
 = 1 << 2,

23 
	mIO_U_F_IN_CUR_DEPTH
 = 1 << 3,

24 
	mIO_U_F_BUSY_OK
 = 1 << 4,

25 
	mIO_U_F_TRIMMED
 = 1 << 5,

26 
	mIO_U_F_BARRIER
 = 1 << 6,

27 
	mIO_U_F_VER_LIST
 = 1 << 7,

33 
	sio_u
 {

34 
time•ec
 
	m°¨t_time
;

35 
time•ec
 
	missue_time
;

37 
fio_fûe
 *
	mfûe
;

38 
	mÊags
;

39 
fio_ddú
 
	mddú
;

45 
fio_ddú
 
	mac˘_ddú
;

50 
	mnumbîio
;

55 
	mbuÊí
;

56 
	moff£t
;

57 *
	mbuf
;

62 
uöt64_t
 
	mønd_£ed
;

68 *
	mx„r_buf
;

69 
	mx„r_buÊí
;

75 
	mbuf_fûÀd_Àn
;

77 
io_põ˚
 *
	mùo
;

79 
	mªsid
;

80 
	mîr‹
;

86 
	mödex
;

87 
	m£í
;

88 *
	mígöe_d©a
;

92 
Êi°_hód
 
	mvîify_li°
;

93 
w‹kqueue_w‹k
 
	mw‹k
;

99 (*
	míd_io
)(
	mthªad_d©a
 *, 
	mio_u
 **);

102 #ifde‡
CONFIG_LIBAIO


103 
iocb
 
	miocb
;

105 #ifde‡
CONFIG_POSIXAIO


106 
os_aiocb_t
 
	maiocb
;

108 #ifde‡
FIO_HAVE_SGIO


109 
sg_io_hdr
 
	mhdr
;

111 #ifde‡
CONFIG_GUASI


112 
guasi_ªq_t
 
	mgªq
;

114 #ifde‡
CONFIG_SOLARISAIO


115 
aio_ªsu…_t
 
	mªsu…p
;

117 #ifde‡
FIO_HAVE_BINJECT


118 
b_u£r_cmd
 
	mbuc
;

120 #ifde‡
CONFIG_RDMA


121 
ibv_mr
 *
	mmr
;

123 *
	mmm≠_d©a
;

130 
io_u
 *
__gë_io_u
(
thªad_d©a
 *);

131 
io_u
 *
gë_io_u
(
thªad_d©a
 *);

132 
put_io_u
(
thªad_d©a
 *, 
io_u
 *);

133 
˛ór_io_u
(
thªad_d©a
 *, 
io_u
 *);

134 
ªqueue_io_u
(
thªad_d©a
 *, 
io_u
 **);

135 
__mu°_check
 
io_u_sync_com∂ëe
(
thªad_d©a
 *, 
io_u
 *);

136 
__mu°_check
 
io_u_queued_com∂ëe
(
thªad_d©a
 *, );

137 
io_u_queued
(
thªad_d©a
 *, 
io_u
 *);

138 
io_u_quõs˚
(
thªad_d©a
 *);

139 
io_u_log_îr‹
(
thªad_d©a
 *, 
io_u
 *);

140 
io_u_m¨k_dïth
(
thªad_d©a
 *, );

141 
fûl_io_buf„r
(
thªad_d©a
 *, *, , );

142 
io_u_fûl_buf„r
(
thªad_d©a
 *
td
, 
io_u
 *, , );

143 
io_u_m¨k_com∂ëe
(
thªad_d©a
 *, );

144 
io_u_m¨k_submô
(
thªad_d©a
 *, );

145 
boﬁ
 
queue_fuŒ
(c⁄° 
thªad_d©a
 *);

147 
do_io_u_sync
(c⁄° 
thªad_d©a
 *, 
io_u
 *);

148 
do_io_u_åim
(c⁄° 
thªad_d©a
 *, 
io_u
 *);

150 #ifde‡
FIO_INC_DEBUG


151 
ölöe
 
	$d¥öt_io_u
(
io_u
 *io_u, c⁄° *
p
)

153 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

155 i‡(
f
)

156 
	`d¥öt
(
FD_IO
, "%s: io_u %p: off=0x%llx,len=0x%lx,ddir=%d,file=%s\n",

157 
p
, 
io_u
,

158 (Ë
io_u
->
off£t
,

159 
io_u
->
buÊí
, io_u->
ddú
,

160 
f
->
fûe_«me
);

162 
	`d¥öt
(
FD_IO
, "%s: io_u %p: off=0x%llx,len=0x%lx,ddir=%d\n",

163 
p
, 
io_u
,

164 (Ë
io_u
->
off£t
,

165 
io_u
->
buÊí
, io_u->
ddú
);

166 
	}
}

168 
	#d¥öt_io_u
(
io_u
, 
p
)

	)

171 
ölöe
 
fio_ddú
 
	$ac˘_ddú
(
io_u
 *io_u)

173 i‡(
io_u
->
ac˘_ddú
 != -1)

174  
io_u
->
ac˘_ddú
;

176  
io_u
->
ddú
;

177 
	}
}

179 
	#io_u_˛ór
(
td
, 
io_u
, 
vÆ
) \

180 
	`td_Êags_˛ór
((
td
), &(
io_u
->
Êags
), (
vÆ
))

	)

181 
	#io_u_£t
(
td
, 
io_u
, 
vÆ
) \

182 
	`td_Êags_£t
((
td
), &(
io_u
)->
Êags
, (
vÆ
))

	)

	@/home/ysjin/Desktop/fio/fio/io_u_queue.c

1 
	~<°dlib.h
>

2 
	~"io_u_queue.h
"

4 
boﬁ
 
	$io_u_qöô
(
io_u_queue
 *
q
, 
ƒ
)

6 
q
->
io_us
 = 
	`ˇŒoc
(
ƒ
, (
io_u
 *));

7 i‡(!
q
->
io_us
)

8  
Ál£
;

10 
q
->
ƒ
 = 0;

11 
q
->
max
 = 
ƒ
;

12  
åue
;

13 
	}
}

15 
	$io_u_qexô
(
io_u_queue
 *
q
)

17 
	`‰ì
(
q
->
io_us
);

18 
	}
}

20 
boﬁ
 
	$io_u_röô
(
io_u_rög
 *
rög
, 
ƒ
)

22 
rög
->
max
 = 
ƒ
 + 1;

23 i‡(
rög
->
max
 & (ring->max - 1)) {

24 
rög
->
max
--;

25 
rög
->
max
 |=Ñing->max >> 1;

26 
rög
->
max
 |=Ñing->max >> 2;

27 
rög
->
max
 |=Ñing->max >> 4;

28 
rög
->
max
 |=Ñing->max >> 8;

29 
rög
->
max
 |=Ñing->max >> 16;

30 
rög
->
max
++;

33 
rög
->rög = 
	`ˇŒoc
‘ög->
max
, (
io_u
 *));

34 i‡(!
rög
->ring)

35  
Ál£
;

37 
rög
->
hód
 =Ñög->
èû
 = 0;

38  
åue
;

39 
	}
}

41 
	$io_u_ªxô
(
io_u_rög
 *
rög
)

43 
	`‰ì
(
rög
->ring);

44 
	}
}

	@/home/ysjin/Desktop/fio/fio/io_u_queue.h

1 #i‚de‡
FIO_IO_U_QUEUE


2 
	#FIO_IO_U_QUEUE


	)

4 
	~<as£π.h
>

5 
	~"lib/ty≥s.h
"

7 
	gio_u
;

9 
	sio_u_queue
 {

10 
io_u
 **
	mio_us
;

11 
	mƒ
;

12 
	mmax
;

15 
ölöe
 
io_u
 *
	$io_u_qp›
(
io_u_queue
 *
q
)

17 i‡(
q
->
ƒ
) {

18 c⁄° 
√xt
 = --
q
->
ƒ
;

19 
io_u
 *io_u = 
q
->
io_us
[
√xt
];

21 
q
->
io_us
[
√xt
] = 
NULL
;

22  
io_u
;

25  
NULL
;

26 
	}
}

28 
ölöe
 
	$io_u_qpush
(
io_u_queue
 *
q
, 
io_u
 *io_u)

30 i‡(
q
->
ƒ
 < q->
max
) {

31 
q
->
io_us
[q->
ƒ
++] = 
io_u
;

35 
	`as£π
(0);

36 
	}
}

38 
ölöe
 
	$io_u_qem±y
(c⁄° 
io_u_queue
 *
q
)

40  !
q
->
ƒ
;

41 
	}
}

43 
	#io_u_qôî
(
q
, 
io_u
, 
i
) \

44 
i
 = 0; i < (
q
)->
ƒ
 && (
io_u
 = (q)->
io_us
[i]); i++)

	)

46 
boﬁ
 
io_u_qöô
(
io_u_queue
 *
q
, 
ƒ
);

47 
io_u_qexô
(
io_u_queue
 *
q
);

49 
	sio_u_rög
 {

50 
	mhód
;

51 
	mèû
;

52 
	mmax
;

53 
io_u
 **
	mrög
;

56 
boﬁ
 
io_u_röô
(
io_u_rög
 *
rög
, 
ƒ
);

57 
io_u_ªxô
(
io_u_rög
 *
rög
);

59 
ölöe
 
	$io_u_Ωush
(
io_u_rög
 *
r
, 
io_u
 *io_u)

61 i‡(
r
->
hód
 + 1 !r->
èû
) {

62 
r
->
rög
[r->
hód
] = 
io_u
;

63 
r
->
hód
 = (r->hód + 1Ë& (r->
max
 - 1);

67 
	`as£π
(0);

68 
	}
}

70 
ölöe
 
io_u
 *
	$io_u_Ω›
(
io_u_rög
 *
r
)

72 i‡(
r
->
hód
 !r->
èû
) {

73 
io_u
 *io_u = 
r
->
rög
[r->
èû
];

75 
r
->
èû
 = (r->èû + 1Ë& (r->
max
 - 1);

76  
io_u
;

79  
NULL
;

80 
	}
}

82 
ölöe
 
	$io_u_ªm±y
(
io_u_rög
 *
rög
)

84  
rög
->
hód
 =rög->
èû
;

85 
	}
}

	@/home/ysjin/Desktop/fio/fio/ioengines.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<dlf˙.h
>

17 
	~<f˙é.h
>

18 
	~<as£π.h
>

20 
	~"fio.h
"

21 
	~"diskutû.h
"

23 
FLIST_HEAD
(
ígöe_li°
);

25 
boﬁ
 
	$check_ígöe_›s
(
i€ngöe_›s
 *
›s
)

27 i‡(
›s
->
vîsi⁄
 !
FIO_IOOPS_VERSION
) {

28 
	`log_îr
("bad io›†vîsi⁄ %d (w™à%d)\n", 
›s
->
vîsi⁄
,

29 
FIO_IOOPS_VERSION
);

30  
åue
;

33 i‡(!
›s
->
queue
) {

34 
	`log_îr
("%s:Çÿqueuêh™dÀr\n", 
›s
->
«me
);

35  
åue
;

41 i‡(
›s
->
Êags
 & 
FIO_SYNCIO
)

42  
Ál£
;

44 i‡(!
›s
->
evít
 || !›s->
gëevíts
) {

45 
	`log_îr
("%s:Çÿevít/gëevít†h™dÀr\n", 
›s
->
«me
);

46  
åue
;

49  
Ál£
;

50 
	}
}

52 
	$uƒegi°î_i€ngöe
(
i€ngöe_›s
 *
›s
)

54 
	`d¥öt
(
FD_IO
, "i€ngöê%†uƒegi°îed\n", 
›s
->
«me
);

55 
	`Êi°_dñ_öô
(&
›s
->
li°
);

56 
	}
}

58 
	$ªgi°î_i€ngöe
(
i€ngöe_›s
 *
›s
)

60 
	`d¥öt
(
FD_IO
, "i€ngöê%†ªgi°îed\n", 
›s
->
«me
);

61 
	`Êi°_add_èû
(&
›s
->
li°
, &
ígöe_li°
);

62 
	}
}

64 
i€ngöe_›s
 *
	$föd_i€ngöe
(c⁄° *
«me
)

66 
i€ngöe_›s
 *
›s
;

67 
Êi°_hód
 *
íåy
;

69 
	`Êi°_f‹_óch
(
íåy
, &
ígöe_li°
) {

70 
›s
 = 
	`Êi°_íåy
(
íåy
, 
i€ngöe_›s
, 
li°
);

71 i‡(!
	`°rcmp
(
«me
, 
›s
->name))

72  
›s
;

75  
NULL
;

76 
	}
}

78 
i€ngöe_›s
 *
	$dl›í_i€ngöe
(
thªad_d©a
 *
td
,

79 c⁄° *
ígöe_lib
)

81 
i€ngöe_›s
 *
›s
;

82 *
dlh™dÀ
;

84 
	`d¥öt
(
FD_IO
, "dlﬂdÉngöê%s\n", 
ígöe_lib
);

86 
	`dÀº‹
();

87 
dlh™dÀ
 = 
	`dl›í
(
ígöe_lib
, 
RTLD_LAZY
);

88 i‡(!
dlh™dÀ
) {

89 
	`td_vmsg
(
td
, -1, 
	`dÀº‹
(), "dlopen");

90  
NULL
;

97 
›s
 = 
	`dlsym
(
dlh™dÀ
, 
ígöe_lib
);

98 i‡(!
›s
)

99 
›s
 = 
	`dlsym
(
dlh™dÀ
, "ioengine");

107 i‡(!
›s
) {

108 
gë_i€ngöe_t
 
gë_i€ngöe
 = 
	`dlsym
(
dlh™dÀ
, "get_ioengine");

110 i‡(
gë_i€ngöe
)

111 
	`gë_i€ngöe
(&
›s
);

114 i‡(!
›s
) {

115 
	`td_vmsg
(
td
, -1, 
	`dÀº‹
(), "dlsym");

116 
	`dl˛o£
(
dlh™dÀ
);

117  
NULL
;

120 
td
->
io_›s_dlh™dÀ
 = 
dlh™dÀ
;

121  
›s
;

122 
	}
}

124 
i€ngöe_›s
 *
	$__lﬂd_i€ngöe
(c⁄° *
«me
)

126 
ígöe
[64];

128 
ígöe
[(engine) - 1] = '\0';

129 
	`°∫˝y
(
ígöe
, 
«me
, (engine) - 1);

134 i‡(!
	`°∫cmp
(
ígöe
, "linuxaio", 8) || !strncmp(engine, "aio", 3)) {

135 
	`d¥öt
(
FD_IO
, "c⁄vîtög i€ngöê«me: %†->Üibaio\n", 
«me
);

136 
	`°r˝y
(
ígöe
, "libaio");

139 
	`d¥öt
(
FD_IO
, "lﬂd i€ngöê%s\n", 
ígöe
);

140  
	`föd_i€ngöe
(
ígöe
);

141 
	}
}

143 
i€ngöe_›s
 *
	$lﬂd_i€ngöe
(
thªad_d©a
 *
td
)

145 
i€ngöe_›s
 *
›s
 = 
NULL
;

146 c⁄° *
«me
;

153 
«me
 = 
td
->
o
.
i€ngöe_so_∑th
 ?:Åd->o.
i€ngöe
;

162 
›s
 = 
	`__lﬂd_i€ngöe
(
td
->
o
.
i€ngöe
);

163 i‡(!
›s
)

164 
›s
 = 
	`dl›í_i€ngöe
(
td
, 
«me
);

170 i‡(!
›s
) {

171 
	`log_îr
("fio:Éngöê%†nŸÜﬂdabÀ\n", 
«me
);

172  
NULL
;

178 i‡(
	`check_ígöe_›s
(
›s
))

179  
NULL
;

181  
›s
;

182 
	}
}

187 
	$‰ì_i€ngöe
(
thªad_d©a
 *
td
)

189 
	`d¥öt
(
FD_IO
, "‰ì i€ngöê%s\n", 
td
->
io_›s
->
«me
);

191 i‡(
td
->
eo
 &&Åd->
io_›s
->
›ti⁄s
) {

192 
	`›ti⁄s_‰ì
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

193 
	`‰ì
(
td
->
eo
);

194 
td
->
eo
 = 
NULL
;

197 i‡(
td
->
io_›s_dlh™dÀ
) {

198 
	`dl˛o£
(
td
->
io_›s_dlh™dÀ
);

199 
td
->
io_›s_dlh™dÀ
 = 
NULL
;

202 
td
->
io_›s
 = 
NULL
;

203 
	}
}

205 
	$˛o£_i€ngöe
(
thªad_d©a
 *
td
)

207 
	`d¥öt
(
FD_IO
, "˛o£ i€ngöê%s\n", 
td
->
io_›s
->
«me
);

209 i‡(
td
->
io_›s
->
˛ónup
) {

210 
td
->
io_›s
->
	`˛ónup
(td);

211 
td
->
io_›s_d©a
 = 
NULL
;

214 
	`‰ì_i€ngöe
(
td
);

215 
	}
}

217 
	$td_io_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

219 
	`d¥öt_io_u
(
io_u
, "prep");

220 
	`fio_ro_check
(
td
, 
io_u
);

222 
	`lock_fûe
(
td
, 
io_u
->
fûe
, io_u->
ddú
);

224 i‡(
td
->
io_›s
->
¥ï
) {

225 
ªt
 = 
td
->
io_›s
->
	`¥ï
—d, 
io_u
);

227 
	`d¥öt
(
FD_IO
, "¥ï: io_u %p:Ñë=%d\n", 
io_u
, 
ªt
);

229 i‡(
ªt
)

230 
	`u∆ock_fûe
(
td
, 
io_u
->
fûe
);

231  
ªt
;

235 
	}
}

237 
	$td_io_gëevíts
(
thªad_d©a
 *
td
, 
mö
, 
max
,

238 c⁄° 
time•ec
 *
t
)

240 
r
 = 0;

249 i‡(
td
->
d⁄e
)

252 i‡(
mö
 > 0 && 
td
->
io_›s
->
commô
) {

253 
r
 = 
td
->
io_›s
->
	`commô
(td);

254 i‡(
r
 < 0)

255 
out
;

257 i‡(
max
 > 
td
->
cur_dïth
)

258 
max
 = 
td
->
cur_dïth
;

259 i‡(
mö
 > 
max
)

260 
max
 = 
mö
;

262 
r
 = 0;

263 i‡(
max
 && 
td
->
io_›s
->
gëevíts
)

264 
r
 = 
td
->
io_›s
->
	`gëevíts
—d, 
mö
, 
max
, 
t
);

265 
out
:

266 i‡(
r
 >= 0) {

271 
td
->
io_u_ö_Êight
 -
r
;

272 
	`io_u_m¨k_com∂ëe
(
td
, 
r
);

274 
	`td_vîr‹
(
td
, 
r
, "get_events");

276 
	`d¥öt
(
FD_IO
, "gëevíts: %d\n", 
r
);

277  
r
;

278 
	}
}

280 
	$td_io_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

282 c⁄° 
fio_ddú
 
ddú
 = 
	`ac˘_ddú
(
io_u
);

283 
buÊí
 = 
io_u
->
x„r_buÊí
;

284 
ªt
;

286 
	`d¥öt_io_u
(
io_u
, "queue");

287 
	`fio_ro_check
(
td
, 
io_u
);

289 
	`as£π
((
io_u
->
Êags
 & 
IO_U_F_FLIGHT
) == 0);

290 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

292 
	`as£π
(
	`fio_fûe_›í
(
io_u
->
fûe
));

297 
	`log_io_u
(
td
, 
io_u
);

299 
io_u
->
îr‹
 = 0;

300 
io_u
->
ªsid
 = 0;

302 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_SYNCIO
)) {

303 i‡(
	`fio_fûl_issue_time
(
td
))

304 
	`fio_gëtime
(&
io_u
->
issue_time
, 
NULL
);

309 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

310 
	`mem˝y
(&
td
->
œ°_issue
, &
io_u
->
issue_time
,

311 (
io_u
->
issue_time
));

314 i‡(
	`ddú_rw
(
ddú
)) {

315 i‡(!(
io_u
->
Êags
 & 
IO_U_F_VER_LIST
)) {

316 
td
->
io_issues
[
ddú
]++;

317 
td
->
io_issue_byãs
[
ddú
] +
buÊí
;

319 
td
->
øã_io_issue_byãs
[
ddú
] +
buÊí
;

322 
ªt
 = 
td
->
io_›s
->
	`queue
—d, 
io_u
);

324 
	`u∆ock_fûe
(
td
, 
io_u
->
fûe
);

326 i‡(
ªt
 =
FIO_Q_BUSY
 && 
	`ddú_rw
(
ddú
)) {

327 
td
->
io_issues
[
ddú
]--;

328 
td
->
io_issue_byãs
[
ddú
] -
buÊí
;

329 
td
->
øã_io_issue_byãs
[
ddú
] -
buÊí
;

330 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

337 i‡(
io_u
->
îr‹
 && !
td
->error)

338 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "td_io_queue");

346 i‡(
io_u
->
îr‹
 =
EINVAL
 && 
td
->
io_issues
[io_u->
ddú
 & 1] == 1 &&

347 
td
->
o
.
odúe˘
) {

349 
	`log_öfo
("fio: first direct IOÉrrored. File system mayÇot "

354 i‡(!
td
->
io_›s
->
commô
 || 
io_u
->
ddú
 =
DDIR_TRIM
) {

355 
	`io_u_m¨k_submô
(
td
, 1);

356 
	`io_u_m¨k_com∂ëe
(
td
, 1);

359 i‡(
ªt
 =
FIO_Q_COMPLETED
) {

360 i‡(
	`ddú_rw
(
io_u
->
ddú
Ë|| 
	`ddú_sync
(io_u->ddir)) {

361 
	`io_u_m¨k_dïth
(
td
, 1);

362 
td
->
ts
.
tŸÆ_io_u
[
io_u
->
ddú
]++;

364 } i‡(
ªt
 =
FIO_Q_QUEUED
) {

365 
r
;

367 
td
->
io_u_queued
++;

369 i‡(
	`ddú_rw
(
io_u
->
ddú
Ë|| 
	`ddú_sync
(io_u->ddir))

370 
td
->
ts
.
tŸÆ_io_u
[
io_u
->
ddú
]++;

372 i‡(
td
->
io_u_queued
 >td->
o
.
iodïth_b©ch
) {

373 
r
 = 
	`td_io_commô
(
td
);

374 i‡(
r
 < 0)

375  
r
;

379 i‡(!
	`td_i€ngöe_Êagged
(
td
, 
FIO_SYNCIO
)) {

380 i‡(
	`fio_fûl_issue_time
(
td
))

381 
	`fio_gëtime
(&
io_u
->
issue_time
, 
NULL
);

386 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

387 
	`mem˝y
(&
td
->
œ°_issue
, &
io_u
->
issue_time
,

388 (
io_u
->
issue_time
));

391  
ªt
;

392 
	}
}

394 
	$td_io_öô
(
thªad_d©a
 *
td
)

396 
ªt
 = 0;

398 i‡(
td
->
io_›s
->
öô
) {

399 
ªt
 = 
td
->
io_›s
->
	`öô
(td);

400 i‡(
ªt
)

401 
	`log_îr
("fio: ioÉngine %s init failed.%s\n",

402 
td
->
io_›s
->
«me
,

403 
td
->
o
.
iodïth
 > 1 ?

406 
td
->
io_›s_öô
 = 1;

407 i‡(!
td
->
îr‹
)

408 
td
->
îr‹
 = 
ªt
;

411  
ªt
;

412 
	}
}

414 
	$td_io_commô
(
thªad_d©a
 *
td
)

416 
ªt
;

418 
	`d¥öt
(
FD_IO
, "ˇŒög ->commô(), dïth %d\n", 
td
->
cur_dïth
);

420 i‡(!
td
->
cur_dïth
 || !td->
io_u_queued
)

423 
	`io_u_m¨k_dïth
(
td
,Åd->
io_u_queued
);

425 i‡(
td
->
io_›s
->
commô
) {

426 
ªt
 = 
td
->
io_›s
->
	`commô
(td);

427 i‡(
ªt
)

428 
	`td_vîr‹
(
td
, -
ªt
, "io commit");

434 
td
->
io_u_ö_Êight
 +td->
io_u_queued
;

435 
td
->
io_u_queued
 = 0;

438 
	}
}

440 
	$td_io_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

442 
	`as£π
(!
	`fio_fûe_›í
(
f
));

443 
	`as£π
(
f
->
fd
 == -1);

444 
	`as£π
(
td
->
io_›s
->
›í_fûe
);

446 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

447 i‡(
td
->
îr‹
 =
EINVAL
 &&Åd->
o
.
odúe˘
)

448 
	`log_îr
("fio: destination doesÇot support O_DIRECT\n");

449 i‡(
td
->
îr‹
 =
EMFILE
) {

450 
	`log_îr
("fio:ÅryÑeducing/setting openfiles (failed"

451 "áà%u o‡%u)\n", 
td
->
ƒ_›í_fûes
,

452 
td
->
o
.
ƒ_fûes
);

455 
	`as£π
(
f
->
fd
 == -1);

456 
	`as£π
(!
	`fio_fûe_›í
(
f
));

460 
	`fio_fûe_ª£t
(
td
, 
f
);

461 
	`fio_fûe_£t_›í
(
f
);

462 
	`fio_fûe_˛ór_˛osög
(
f
);

463 
	`disk_utû_öc
(
f
->
du
);

465 
td
->
ƒ_›í_fûes
++;

466 
	`gë_fûe
(
f
);

468 i‡(
f
->
fûëy≥
 =
FIO_TYPE_PIPE
) {

469 i‡(
	`td_øndom
(
td
)) {

470 
	`log_îr
("fio: can't seek onÖipes (noÑandom io)\n");

471 
îr
;

475 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
))

476 
d⁄e
;

478 i‡(
td
->
o
.
övÆid©e_ˇche
 && 
	`fûe_övÆid©e_ˇche
—d, 
f
))

479 
îr
;

481 i‡(
td
->
o
.
Ádvi£_höt
 !
F_ADV_NONE
 &&

482 (
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
 || f->fûëy≥ =
FIO_TYPE_FILE
)) {

483 
Êags
;

485 i‡(
td
->
o
.
Ádvi£_höt
 =
F_ADV_TYPE
) {

486 i‡(
	`td_øndom
(
td
))

487 
Êags
 = 
POSIX_FADV_RANDOM
;

489 
Êags
 = 
POSIX_FADV_SEQUENTIAL
;

490 } i‡(
td
->
o
.
Ádvi£_höt
 =
F_ADV_RANDOM
)

491 
Êags
 = 
POSIX_FADV_RANDOM
;

492 i‡(
td
->
o
.
Ádvi£_höt
 =
F_ADV_SEQUENTIAL
)

493 
Êags
 = 
POSIX_FADV_SEQUENTIAL
;

495 
	`log_îr
("fio: unknown fadviseÅype %d\n",

496 
td
->
o
.
Ádvi£_höt
);

497 
Êags
 = 
POSIX_FADV_NORMAL
;

500 i‡(
	`posix_Ádvi£
(
f
->
fd
, f->
fûe_off£t
, f->
io_size
, 
Êags
) < 0) {

501 i‡(!
	`fio_did_w¨n
(
FIO_WARN_FADVISE
))

502 
	`log_îr
("fio: fadvise hint failed\n");

505 #ifde‡
FIO_HAVE_WRITE_HINT


506 i‡(
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
wrôe_höt
) &&

507 (
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
 || f->fûëy≥ =
FIO_TYPE_FILE
)) {

508 
uöt64_t
 
höt
 = 
td
->
o
.
wrôe_höt
;

509 
cmd
;

516 i‡(
td
->
o
.
odúe˘
)

517 
cmd
 = 
F_SET_FILE_RW_HINT
;

519 
cmd
 = 
F_SET_RW_HINT
;

521 i‡(
	`f˙é
(
f
->
fd
, 
cmd
, &
höt
) < 0) {

522 
	`td_vîr‹
(
td
, 
î∫o
, "fcntl write hint");

523 
îr
;

528 i‡(
td
->
o
.
odúe˘
 && !
OS_O_DIRECT
 && 
	`fio_£t_dúe˘io
—d, 
f
))

529 
îr
;

531 
d⁄e
:

532 
	`log_fûe
(
td
, 
f
, 
FIO_LOG_OPEN_FILE
);

534 
îr
:

535 
	`disk_utû_dec
(
f
->
du
);

536 i‡(
td
->
io_›s
->
˛o£_fûe
)

537 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

539 
	}
}

541 
	$td_io_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

543 i‡(!
	`fio_fûe_˛osög
(
f
))

544 
	`log_fûe
(
td
, 
f
, 
FIO_LOG_CLOSE_FILE
);

549 
	`fio_fûe_£t_˛osög
(
f
);

551 
	`disk_utû_dec
(
f
->
du
);

553 i‡(
td
->
o
.
fûe_lock_mode
 !
FILE_LOCK_NONE
)

554 
	`u∆ock_fûe_Æl
(
td
, 
f
);

556  
	`put_fûe
(
td
, 
f
);

557 
	}
}

559 
	$td_io_u∆ök_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

561 i‡(
td
->
io_›s
->
u∆ök_fûe
)

562  
td
->
io_›s
->
	`u∆ök_fûe
—d, 
f
);

564 
ªt
;

566 
ªt
 = 
	`u∆ök
(
f
->
fûe_«me
);

567 i‡(
ªt
 < 0)

568  
î∫o
;

572 
	}
}

574 
	$td_io_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

576 i‡(!
td
->
io_›s
->
gë_fûe_size
)

579  
td
->
io_›s
->
	`gë_fûe_size
—d, 
f
);

580 
	}
}

582 
	$fio_show_i€ngöe_hñp
(c⁄° *
ígöe
)

584 
Êi°_hód
 *
íåy
;

585 
i€ngöe_›s
 *
io_›s
;

586 *
£p
;

587 
ªt
 = 1;

589 i‡(!
ígöe
 || !*engine) {

590 
	`log_öfo
("Available IOÉngines:\n");

591 
	`Êi°_f‹_óch
(
íåy
, &
ígöe_li°
) {

592 
io_›s
 = 
	`Êi°_íåy
(
íåy
, 
i€ngöe_›s
, 
li°
);

593 
	`log_öfo
("\t%s\n", 
io_›s
->
«me
);

597 
£p
 = 
	`°rchr
(
ígöe
, ',');

598 i‡(
£p
) {

599 *
£p
 = 0;

600 
£p
++;

603 
io_›s
 = 
	`__lﬂd_i€ngöe
(
ígöe
);

604 i‡(!
io_›s
) {

605 
	`log_öfo
("IOÉngöê%†nŸ found\n", 
ígöe
);

609 i‡(
io_›s
->
›ti⁄s
)

610 
ªt
 = 
	`show_cmd_hñp
(
io_›s
->
›ti⁄s
, 
£p
);

612 
	`log_öfo
("IOÉngöê%†ha†nÿ›ti⁄s\n", 
io_›s
->
«me
);

614  
ªt
;

615 
	}
}

	@/home/ysjin/Desktop/fio/fio/ioengines.h

1 #i‚de‡
FIO_IOENGINE_H


2 
	#FIO_IOENGINE_H


	)

4 
	~"compûî/compûî.h
"

5 
	~"os/os.h
"

6 
	~"fûe.h
"

7 
	~"io_u.h
"

9 
	#FIO_IOOPS_VERSION
 23

	)

15 
	mFIO_Q_COMPLETED
 = 0,

16 
	mFIO_Q_QUEUED
 = 1,

17 
	mFIO_Q_BUSY
 = 2,

20 
	si€ngöe_›s
 {

21 
Êi°_hód
 
	mli°
;

22 c⁄° *
	m«me
;

23 
	mvîsi⁄
;

24 
	mÊags
;

25 (*
	m£tup
)(
	mthªad_d©a
 *);

26 (*
	möô
)(
	mthªad_d©a
 *);

27 (*
	m¥ï
)(
	mthªad_d©a
 *, 
	mio_u
 *);

28 (*
	mqueue
)(
	mthªad_d©a
 *, 
	mio_u
 *);

29 (*
	mcommô
)(
	mthªad_d©a
 *);

30 (*
	mgëevíts
)(
	mthªad_d©a
 *, , , c⁄° 
	mtime•ec
 *);

31 
	mio_u
 *(*
	mevít
)(
	mthªad_d©a
 *, );

32 *(*
	mîrdëaûs
)(
	mio_u
 *);

33 (*
	mˇn˚l
)(
	mthªad_d©a
 *, 
	mio_u
 *);

34 (*
	m˛ónup
)(
	mthªad_d©a
 *);

35 (*
	m›í_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

36 (*
	m˛o£_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

37 (*
	mövÆid©e
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

38 (*
	mu∆ök_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

39 (*
	mgë_fûe_size
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

40 (*
	mãrmö©e
)(
	mthªad_d©a
 *);

41 (*
	miomem_Æloc
)(
	mthªad_d©a
 *, 
	msize_t
);

42 (*
	miomem_‰ì
)(
	mthªad_d©a
 *);

43 (*
	mio_u_öô
)(
	mthªad_d©a
 *, 
	mio_u
 *);

44 (*
	mio_u_‰ì
)(
	mthªad_d©a
 *, 
	mio_u
 *);

45 
	m›ti⁄_°ru˘_size
;

46 
fio_›ti⁄
 *
	m›ti⁄s
;

49 
	efio_i€ngöe_Êags
 {

50 
	mFIO_SYNCIO
 = 1 << 0,

51 
	mFIO_RAWIO
 = 1 << 1,

52 
	mFIO_DISKLESSIO
 = 1 << 2,

53 
	mFIO_NOEXTEND
 = 1 << 3,

54 
	mFIO_NODISKUTIL
 = 1 << 4,

55 
	mFIO_UNIDIR
 = 1 << 5,

56 
	mFIO_NOIO
 = 1 << 6,

57 
	mFIO_PIPEIO
 = 1 << 7,

58 
	mFIO_BARRIER
 = 1 << 8,

59 
	mFIO_MEMALIGN
 = 1 << 9,

60 
	mFIO_BIT_BASED
 = 1 << 10,

61 
	mFIO_FAKEIO
 = 1 << 11,

62 
	mFIO_NOSTATS
 = 1 << 12,

63 
	mFIO_NOFILEHASH
 = 1 << 13,

69 (*
	tgë_i€ngöe_t
)(
	ti€ngöe_›s
 **);

74 
__mu°_check
 
	`td_io_öô
(
thªad_d©a
 *);

75 
__mu°_check
 
	`td_io_¥ï
(
thªad_d©a
 *, 
io_u
 *);

76 
__mu°_check
 
	`td_io_queue
(
thªad_d©a
 *, 
io_u
 *);

77 
__mu°_check
 
	`td_io_gëevíts
(
thªad_d©a
 *, , , c⁄° 
time•ec
 *);

78 
__mu°_check
 
	`td_io_commô
(
thªad_d©a
 *);

79 
__mu°_check
 
	`td_io_›í_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

80 
	`td_io_˛o£_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

81 
	`td_io_u∆ök_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

82 
__mu°_check
 
	`td_io_gë_fûe_size
(
thªad_d©a
 *, 
fio_fûe
 *);

84 
i€ngöe_›s
 *
	`lﬂd_i€ngöe
(
thªad_d©a
 *);

85 
	`ªgi°î_i€ngöe
(
i€ngöe_›s
 *);

86 
	`uƒegi°î_i€ngöe
(
i€ngöe_›s
 *);

87 
	`‰ì_i€ngöe
(
thªad_d©a
 *);

88 
	`˛o£_i€ngöe
(
thªad_d©a
 *);

90 
	`fio_show_i€ngöe_hñp
(c⁄° *
ígöe
);

	@/home/ysjin/Desktop/fio/fio/iolog.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<libgí.h
>

8 
	~<as£π.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<uni°d.h
>

12 #ifde‡
CONFIG_ZLIB


13 
	~<zlib.h
>

16 
	~"Êi°.h
"

17 
	~"fio.h
"

18 
	~"vîify.h
"

19 
	~"åim.h
"

20 
	~"fûñock.h
"

21 
	~"smÆloc.h
"

22 
	~"blkåa˚.h
"

24 
iﬁog_Êush
(
io_log
 *
log
);

26 c⁄° 
	giﬁog_vî2
[] = "fio version 2 iolog";

28 
	$queue_io_põ˚
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

30 
	`Êi°_add_èû
(&
ùo
->
li°
, &
td
->
io_log_li°
);

31 
td
->
tŸÆ_io_size
 +
ùo
->
Àn
;

32 
	}
}

34 
	$log_io_u
(c⁄° 
thªad_d©a
 *
td
, c⁄° 
io_u
 *io_u)

36 i‡(!
td
->
o
.
wrôe_iﬁog_fûe
)

39 
	`Ârötf
(
td
->
iﬁog_f
, "%†%†%Œu %lu\n", 
io_u
->
fûe
->
fûe_«me
,

40 
	`io_ddú_«me
(
io_u
->
ddú
),

41 
io_u
->
off£t
, io_u->
buÊí
);

42 
	}
}

44 
	$log_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

45 
fûe_log_a˘
 
wh©
)

47 c⁄° *
a˘
[] = { "add", "open", "close" };

49 
	`as£π
(
wh©
 < 3);

51 i‡(!
td
->
o
.
wrôe_iﬁog_fûe
)

58 i‡(!
td
->
iﬁog_f
)

61 
	`Ârötf
(
td
->
iﬁog_f
, "%†%s\n", 
f
->
fûe_«me
, 
a˘
[
wh©
]);

62 
	}
}

64 
	$iﬁog_dñay
(
thªad_d©a
 *
td
, 
dñay
)

66 
uöt64_t
 
u£c
 = 
	`utime_sö˚_now
(&
td
->
œ°_issue
);

67 
uöt64_t
 
this_dñay
;

68 
time•ec
 
ts
;

70 i‡(
dñay
 < 
td
->
time_off£t
) {

71 
td
->
time_off£t
 = 0;

75 
dñay
 -
td
->
time_off£t
;

76 i‡(
dñay
 < 
u£c
)

79 
dñay
 -
u£c
;

81 
	`fio_gëtime
(&
ts
, 
NULL
);

82 
dñay
 && !
td
->
ãrmö©e
) {

83 
this_dñay
 = 
dñay
;

84 i‡(
this_dñay
 > 500000)

85 
this_dñay
 = 500000;

87 
	`u£c_¶ìp
(
td
, 
this_dñay
);

88 
dñay
 -
this_dñay
;

91 
u£c
 = 
	`utime_sö˚_now
(&
ts
);

92 i‡(
u£c
 > 
dñay
)

93 
td
->
time_off£t
 = 
u£c
 - 
dñay
;

95 
td
->
time_off£t
 = 0;

96 
	}
}

98 
	$ùo_•ecül
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

100 
fio_fûe
 *
f
;

101 
ªt
;

106 i‡(
ùo
->
ddú
 !
DDIR_INVAL
)

109 
f
 = 
td
->
fûes
[
ùo
->
fûío
];

111 
ùo
->
fûe_a˘i⁄
) {

112 
FIO_LOG_OPEN_FILE
:

113 i‡(
td
->
o
.
ª∂ay_ªdúe˘
 && 
	`fio_fûe_›í
(
f
)) {

114 
	`d¥öt
(
FD_FILE
, "iolog: ignoringÑe-open of file %s\n",

115 
f
->
fûe_«me
);

118 
ªt
 = 
	`td_io_›í_fûe
(
td
, 
f
);

119 i‡(!
ªt
)

121 
	`td_vîr‹
(
td
, 
ªt
, "iolog open file");

123 
FIO_LOG_CLOSE_FILE
:

124 
	`td_io_˛o£_fûe
(
td
, 
f
);

126 
FIO_LOG_UNLINK_FILE
:

127 
	`td_io_u∆ök_fûe
(
td
, 
f
);

130 
	`log_îr
("fio: bad fûêa˘i⁄ %d\n", 
ùo
->
fûe_a˘i⁄
);

135 
	}
}

137 
	$ªad_iﬁog_gë
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

139 
io_põ˚
 *
ùo
;

140 
ñ≠£d
;

142 !
	`Êi°_em±y
(&
td
->
io_log_li°
)) {

143 
ªt
;

145 
ùo
 = 
	`Êi°_fú°_íåy
(&
td
->
io_log_li°
, 
io_põ˚
, 
li°
);

146 
	`Êi°_dñ
(&
ùo
->
li°
);

147 
	`ªmove_åim_íåy
(
td
, 
ùo
);

149 
ªt
 = 
	`ùo_•ecül
(
td
, 
ùo
);

150 i‡(
ªt
 < 0) {

151 
	`‰ì
(
ùo
);

153 } i‡(
ªt
 > 0) {

154 
	`‰ì
(
ùo
);

158 
io_u
->
ddú
 = 
ùo
->ddir;

159 i‡(
ùo
->
ddú
 !
DDIR_WAIT
) {

160 
io_u
->
off£t
 = 
ùo
->offset;

161 
io_u
->
buÊí
 = 
ùo
->
Àn
;

162 
io_u
->
fûe
 = 
td
->
fûes
[
ùo
->
fûío
];

163 
	`gë_fûe
(
io_u
->
fûe
);

164 
	`d¥öt
(
FD_IO
, "iﬁog: gë %Œu/%lu/%s\n", 
io_u
->
off£t
,

165 
io_u
->
buÊí
, io_u->
fûe
->
fûe_«me
);

166 i‡(
ùo
->
dñay
)

167 
	`iﬁog_dñay
(
td
, 
ùo
->
dñay
);

169 
ñ≠£d
 = 
	`mtime_sö˚_gíesis
();

170 i‡(
ùo
->
dñay
 > 
ñ≠£d
)

171 
	`u£c_¶ìp
(
td
, (
ùo
->
dñay
 - 
ñ≠£d
) * 1000);

174 
	`‰ì
(
ùo
);

176 i‡(
io_u
->
ddú
 !
DDIR_WAIT
)

180 
td
->
d⁄e
 = 1;

182 
	}
}

184 
	$¥u√_io_põ˚_log
(
thªad_d©a
 *
td
)

186 
io_põ˚
 *
ùo
;

187 
rb_node
 *
n
;

189 (
n
 = 
	`rb_fú°
(&
td
->
io_hi°_åì
)Ë!
NULL
) {

190 
ùo
 = 
	`rb_íåy
(
n
, 
io_põ˚
, 
rb_node
);

191 
	`rb_îa£
(
n
, &
td
->
io_hi°_åì
);

192 
	`ªmove_åim_íåy
(
td
, 
ùo
);

193 
td
->
io_hi°_Àn
--;

194 
	`‰ì
(
ùo
);

197 !
	`Êi°_em±y
(&
td
->
io_hi°_li°
)) {

198 
ùo
 = 
	`Êi°_fú°_íåy
(&
td
->
io_hi°_li°
, 
io_põ˚
, 
li°
);

199 
	`Êi°_dñ
(&
ùo
->
li°
);

200 
	`ªmove_åim_íåy
(
td
, 
ùo
);

201 
td
->
io_hi°_Àn
--;

202 
	`‰ì
(
ùo
);

204 
	}
}

209 
	$log_io_põ˚
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

211 
rb_node
 **
p
, *
∑ª¡
;

212 
io_põ˚
 *
ùo
, *
__ùo
;

214 
ùo
 = 
	`mÆloc
((
io_põ˚
));

215 
	`öô_ùo
(
ùo
);

216 
ùo
->
fûe
 = 
io_u
->file;

217 
ùo
->
off£t
 = 
io_u
->offset;

218 
ùo
->
Àn
 = 
io_u
->
buÊí
;

219 
ùo
->
numbîio
 = 
io_u
->numberio;

220 
ùo
->
Êags
 = 
IP_F_IN_FLIGHT
;

222 
io_u
->
ùo
 = ipo;

224 i‡(
	`io_u_should_åim
(
td
, 
io_u
)) {

225 
	`Êi°_add_èû
(&
ùo
->
åim_li°
, &
td
->trim_list);

226 
td
->
åim_íåõs
++;

238 i‡(((!
td
->
o
.
vîifys‹t
Ë|| !
	`td_øndom
(td)) &&

239 
	`fûe_øndomm≠
(
td
, 
ùo
->
fûe
)) {

240 
	`INIT_FLIST_HEAD
(&
ùo
->
li°
);

241 
	`Êi°_add_èû
(&
ùo
->
li°
, &
td
->
io_hi°_li°
);

242 
ùo
->
Êags
 |
IP_F_ONLIST
;

243 
td
->
io_hi°_Àn
++;

247 
	`RB_CLEAR_NODE
(&
ùo
->
rb_node
);

252 
ª°¨t
:

253 
p
 = &
td
->
io_hi°_åì
.
rb_node
;

254 
∑ª¡
 = 
NULL
;

255 *
p
) {

256 
ovîœp
 = 0;

257 
∑ª¡
 = *
p
;

259 
__ùo
 = 
	`rb_íåy
(
∑ª¡
, 
io_põ˚
, 
rb_node
);

260 i‡(
ùo
->
fûe
 < 
__ùo
->file)

261 
p
 = &(*p)->
rb_À·
;

262 i‡(
ùo
->
fûe
 > 
__ùo
->file)

263 
p
 = &(*p)->
rb_right
;

264 i‡(
ùo
->
off£t
 < 
__ùo
->offset) {

265 
p
 = &(*p)->
rb_À·
;

266 
ovîœp
 = 
ùo
->
off£t
 + ipo->
Àn
 > 
__ùo
->offset;

268 i‡(
ùo
->
off£t
 > 
__ùo
->offset) {

269 
p
 = &(*p)->
rb_right
;

270 
ovîœp
 = 
__ùo
->
off£t
 + __ùo->
Àn
 > 
ùo
->offset;

273 
ovîœp
 = 1;

275 i‡(
ovîœp
) {

276 
	`d¥öt
(
FD_IO
, "iolog: overlap %llu/%lu, %llu/%lu\n",

277 
__ùo
->
off£t
, __ùo->
Àn
,

278 
ùo
->
off£t
, ipo->
Àn
);

279 
td
->
io_hi°_Àn
--;

280 
	`rb_îa£
(
∑ª¡
, &
td
->
io_hi°_åì
);

281 
	`ªmove_åim_íåy
(
td
, 
__ùo
);

282 i‡(!(
__ùo
->
Êags
 & 
IP_F_IN_FLIGHT
))

283 
	`‰ì
(
__ùo
);

284 
ª°¨t
;

288 
	`rb_lök_node
(&
ùo
->
rb_node
, 
∑ª¡
, 
p
);

289 
	`rb_ö£π_cﬁ‹
(&
ùo
->
rb_node
, &
td
->
io_hi°_åì
);

290 
ùo
->
Êags
 |
IP_F_ONRB
;

291 
td
->
io_hi°_Àn
++;

292 
	}
}

294 
	$u∆og_io_põ˚
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

296 
io_põ˚
 *
ùo
 = 
io_u
->ipo;

298 i‡(
td
->
ts
.
ƒ_block_öfos
) {

299 
uöt32_t
 *
öfo
 = 
	`io_u_block_öfo
(
td
, 
io_u
);

300 i‡(
	`BLOCK_INFO_STATE
(*
öfo
Ë< 
BLOCK_STATE_TRIM_FAILURE
) {

301 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

302 *
öfo
 = 
	`BLOCK_INFO_SET_STATE
(*info,

303 
BLOCK_STATE_TRIM_FAILURE
);

304 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

305 *
öfo
 = 
	`BLOCK_INFO_SET_STATE
(*info,

306 
BLOCK_STATE_WRITE_FAILURE
);

310 i‡(!
ùo
)

313 i‡(
ùo
->
Êags
 & 
IP_F_ONRB
)

314 
	`rb_îa£
(&
ùo
->
rb_node
, &
td
->
io_hi°_åì
);

315 i‡(
ùo
->
Êags
 & 
IP_F_ONLIST
)

316 
	`Êi°_dñ
(&
ùo
->
li°
);

318 
	`‰ì
(
ùo
);

319 
io_u
->
ùo
 = 
NULL
;

320 
td
->
io_hi°_Àn
--;

321 
	}
}

323 
	$åim_io_põ˚
(
thªad_d©a
 *
td
, c⁄° 
io_u
 *io_u)

325 
io_põ˚
 *
ùo
 = 
io_u
->ipo;

327 i‡(!
ùo
)

330 
ùo
->
Àn
 = 
io_u
->
x„r_buÊí
 - io_u->
ªsid
;

331 
	}
}

333 
	$wrôe_iﬁog_˛o£
(
thªad_d©a
 *
td
)

335 
	`fÊush
(
td
->
iﬁog_f
);

336 
	`f˛o£
(
td
->
iﬁog_f
);

337 
	`‰ì
(
td
->
iﬁog_buf
);

338 
td
->
iﬁog_f
 = 
NULL
;

339 
td
->
iﬁog_buf
 = 
NULL
;

340 
	}
}

346 
	$ªad_iﬁog2
(
thªad_d©a
 *
td
, 
FILE
 *
f
)

348 
off£t
;

349 
byãs
;

350 
ªads
, 
wrôes
, 
waôs
, 
fûío
 = 0, 
fûe_a˘i⁄
 = 0;

351 *
r‚ame
, *
‚ame
, *
a˘
;

352 *
°r
, *
p
;

353 
fio_ddú
 
rw
;

355 
	`‰ì_ªÀa£_fûes
(
td
);

361 
°r
 = 
	`mÆloc
(4096);

362 
r‚ame
 = 
‚ame
 = 
	`mÆloc
(256+16);

363 
a˘
 = 
	`mÆloc
(256+16);

365 
ªads
 = 
wrôes
 = 
waôs
 = 0;

366 (
p
 = 
	`fgës
(
°r
, 4096, 
f
)Ë!
NULL
) {

367 
io_põ˚
 *
ùo
;

368 
r
;

370 
r
 = 
	`ssˇnf
(
p
, "%256†%256†%Œu %u", 
r‚ame
, 
a˘
, &
off£t
,

371 &
byãs
);

373 i‡(
td
->
o
.
ª∂ay_ªdúe˘
)

374 
‚ame
 = 
td
->
o
.
ª∂ay_ªdúe˘
;

376 i‡(
r
 == 4) {

380 i‡(!
	`°rcmp
(
a˘
, "wait"))

381 
rw
 = 
DDIR_WAIT
;

382 i‡(!
	`°rcmp
(
a˘
, "read"))

383 
rw
 = 
DDIR_READ
;

384 i‡(!
	`°rcmp
(
a˘
, "write"))

385 
rw
 = 
DDIR_WRITE
;

386 i‡(!
	`°rcmp
(
a˘
, "sync"))

387 
rw
 = 
DDIR_SYNC
;

388 i‡(!
	`°rcmp
(
a˘
, "datasync"))

389 
rw
 = 
DDIR_DATASYNC
;

390 i‡(!
	`°rcmp
(
a˘
, "trim"))

391 
rw
 = 
DDIR_TRIM
;

393 
	`log_îr
("fio: bad iolog fileáction: %s\n",

394 
a˘
);

397 
fûío
 = 
	`gë_fûío
(
td
, 
‚ame
);

398 } i‡(
r
 == 2) {

399 
rw
 = 
DDIR_INVAL
;

400 i‡(!
	`°rcmp
(
a˘
, "add")) {

401 i‡(
td
->
o
.
ª∂ay_ªdúe˘
 &&

402 
	`gë_fûío
(
td
, 
‚ame
) != -1) {

403 
	`d¥öt
(
FD_FILE
, "iolog: ignoring"

404 "Ñe-add o‡fûê%s\n", 
‚ame
);

406 
fûío
 = 
	`add_fûe
(
td
, 
‚ame
, 0, 1);

407 
fûe_a˘i⁄
 = 
FIO_LOG_ADD_FILE
;

410 } i‡(!
	`°rcmp
(
a˘
, "open")) {

411 
fûío
 = 
	`gë_fûío
(
td
, 
‚ame
);

412 
fûe_a˘i⁄
 = 
FIO_LOG_OPEN_FILE
;

413 } i‡(!
	`°rcmp
(
a˘
, "close")) {

414 
fûío
 = 
	`gë_fûío
(
td
, 
‚ame
);

415 
fûe_a˘i⁄
 = 
FIO_LOG_CLOSE_FILE
;

417 
	`log_îr
("fio: bad iolog fileáction: %s\n",

418 
a˘
);

422 
	`log_îr
("bad iﬁog2: %s\n", 
p
);

426 i‡(
rw
 =
DDIR_READ
)

427 
ªads
++;

428 i‡(
rw
 =
DDIR_WRITE
) {

432 i‡(
ªad_⁄ly
)

434 
wrôes
++;

435 } i‡(
rw
 =
DDIR_WAIT
) {

436 i‡(
td
->
o
.
no_°Æl
)

438 
waôs
++;

439 } i‡(
rw
 =
DDIR_INVAL
) {

440 } i‡(!
	`ddú_sync
(
rw
)) {

441 
	`log_îr
("bad ddú: %d\n", 
rw
);

448 
ùo
 = 
	`mÆloc
((*ipo));

449 
	`öô_ùo
(
ùo
);

450 
ùo
->
ddú
 = 
rw
;

451 i‡(
rw
 =
DDIR_WAIT
) {

452 
ùo
->
dñay
 = 
off£t
;

454 i‡(
td
->
o
.
ª∂ay_sˇÀ
)

455 
ùo
->
off£t
 = off£à/ 
td
->
o
.
ª∂ay_sˇÀ
;

457 
ùo
->
off£t
 = offset;

458 
	`ùo_byãs_Æign
(
td
->
o
.
ª∂ay_Æign
, 
ùo
);

460 
ùo
->
Àn
 = 
byãs
;

461 i‡(
rw
 !
DDIR_INVAL
 && 
byãs
 > 
td
->
o
.
max_bs
[rw])

462 
td
->
o
.
max_bs
[
rw
] = 
byãs
;

463 
ùo
->
fûío
 = fileno;

464 
ùo
->
fûe_a˘i⁄
 = file_action;

465 
td
->
o
.
size
 +
byãs
;

468 
	`queue_io_põ˚
(
td
, 
ùo
);

471 
	`‰ì
(
°r
);

472 
	`‰ì
(
a˘
);

473 
	`‰ì
(
r‚ame
);

475 i‡(
wrôes
 && 
ªad_⁄ly
) {

476 
	`log_îr
("fio: <%s> skipsÑeplay of %d writes dueÅo"

477 "Ñód-⁄ly\n", 
td
->
o
.
«me
, 
wrôes
);

478 
wrôes
 = 0;

481 i‡(!
ªads
 && !
wrôes
 && !
waôs
)

483 i‡(
ªads
 && !
wrôes
)

484 
td
->
o
.
td_ddú
 = 
TD_DDIR_READ
;

485 i‡(!
ªads
 && 
wrôes
)

486 
td
->
o
.
td_ddú
 = 
TD_DDIR_WRITE
;

488 
td
->
o
.
td_ddú
 = 
TD_DDIR_RW
;

491 
	}
}

496 
	$öô_iﬁog_ªad
(
thªad_d©a
 *
td
)

498 
buf„r
[256], *
p
;

499 
FILE
 *
f
;

500 
ªt
;

502 
f
 = 
	`f›í
(
td
->
o
.
ªad_iﬁog_fûe
, "r");

503 i‡(!
f
) {

504 
	`≥º‹
("fopenÑead iolog");

508 
p
 = 
	`fgës
(
buf„r
, (buf„r), 
f
);

509 i‡(!
p
) {

510 
	`td_vîr‹
(
td
, 
î∫o
, "iologÑead");

511 
	`log_îr
("fio: unableÅoÑead iolog\n");

512 
	`f˛o£
(
f
);

520 i‡(!
	`°∫cmp
(
iﬁog_vî2
, 
buf„r
, 
	`°æí
(iolog_ver2)))

521 
ªt
 = 
	`ªad_iﬁog2
(
td
, 
f
);

523 
	`log_îr
("fio: iolog version 1 isÇoÜonger supported\n");

524 
ªt
 = 1;

527 
	`f˛o£
(
f
);

528  
ªt
;

529 
	}
}

534 
	$öô_iﬁog_wrôe
(
thªad_d©a
 *
td
)

536 
fio_fûe
 *
ff
;

537 
FILE
 *
f
;

538 
i
;

540 
f
 = 
	`f›í
(
td
->
o
.
wrôe_iﬁog_fûe
, "a");

541 i‡(!
f
) {

542 
	`≥º‹
("fopen write iolog");

549 
td
->
iﬁog_f
 = 
f
;

550 
td
->
iﬁog_buf
 = 
	`mÆloc
(8192);

551 
	`£tvbuf
(
f
, 
td
->
iﬁog_buf
, 
_IOFBF
, 8192);

556 i‡(
	`Ârötf
(
f
, "%s\n", 
iﬁog_vî2
) < 0) {

557 
	`≥º‹
("iolog init\n");

564 
	`f‹_óch_fûe
(
td
, 
ff
, 
i
)

565 
	`log_fûe
(
td
, 
ff
, 
FIO_LOG_ADD_FILE
);

568 
	}
}

570 
	$öô_iﬁog
(
thªad_d©a
 *
td
)

572 
ªt
 = 0;

574 i‡(
td
->
o
.
ªad_iﬁog_fûe
) {

575 
√ed_sw≠
;

581 i‡(
	`is_blkåa˚
(
td
->
o
.
ªad_iﬁog_fûe
, &
√ed_sw≠
))

582 
ªt
 = 
	`lﬂd_blkåa˚
(
td
,Åd->
o
.
ªad_iﬁog_fûe
, 
√ed_sw≠
);

584 
ªt
 = 
	`öô_iﬁog_ªad
(
td
);

585 } i‡(
td
->
o
.
wrôe_iﬁog_fûe
)

586 
ªt
 = 
	`öô_iﬁog_wrôe
(
td
);

588 i‡(
ªt
)

589 
	`td_vîr‹
(
td
, 
EINVAL
, "failed initializing iolog");

591  
ªt
;

592 
	}
}

594 
	$£tup_log
(
io_log
 **
log
, 
log_∑øms
 *
p
,

595 c⁄° *
fûíame
)

597 
io_log
 *
l
;

598 
i
;

599 
io_u_∂©_íåy
 *
íåy
;

600 
Êi°_hód
 *
li°
;

602 
l
 = 
	`sˇŒoc
(1, (*l));

603 
	`INIT_FLIST_HEAD
(&
l
->
io_logs
);

604 
l
->
log_ty≥
 = 
p
->log_type;

605 
l
->
log_off£t
 = 
p
->log_offset;

606 
l
->
log_gz
 = 
p
->log_gz;

607 
l
->
log_gz_°‹e
 = 
p
->log_gz_store;

608 
l
->
avg_m£c
 = 
p
->avg_msec;

609 
l
->
hi°_m£c
 = 
p
->hist_msec;

610 
l
->
hi°_cﬂr£√ss
 = 
p
->hist_coarseness;

611 
l
->
fûíame
 = 
	`°rdup
(filename);

612 
l
->
td
 = 
p
->td;

617 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

618 
li°
 = &
l
->
hi°_wödow
[
i
].list;

619 
	`INIT_FLIST_HEAD
(
li°
);

620 
íåy
 = 
	`ˇŒoc
(1, (
io_u_∂©_íåy
));

621 
	`Êi°_add
(&
íåy
->
li°
,Üist);

624 i‡(
l
->
td
 &&Ü->td->
o
.
io_submô_mode
 !
IO_MODE_OFFLOAD
) {

625 
io_logs
 *
p
;

627 
p
 = 
	`ˇŒoc
(1, (*
l
->
≥ndög
));

628 
p
->
max_ßm∂es
 = 
DEF_LOG_ENTRIES
;

629 
p
->
log
 = 
	`ˇŒoc
’->
max_ßm∂es
, 
	`log_íåy_sz
(
l
));

630 
l
->
≥ndög
 = 
p
;

633 i‡(
l
->
log_off£t
)

634 
l
->
log_ddú_mask
 = 
LOG_OFFSET_SAMPLE_BIT
;

636 
	`INIT_FLIST_HEAD
(&
l
->
chunk_li°
);

638 i‡(
l
->
log_gz
 && !
p
->
td
)

639 
l
->
log_gz
 = 0;

640 i‡(
l
->
log_gz
 ||Ü->
log_gz_°‹e
) {

641 
	`muãx_öô_psh¨ed
(&
l
->
chunk_lock
);

642 
	`muãx_öô_psh¨ed
(&
l
->
de„ºed_‰ì_lock
);

643 
p
->
td
->
Êags
 |
TD_F_COMPRESS_LOG
;

646 *
log
 = 
l
;

647 
	}
}

649 #ifde‡
CONFIG_SETVBUF


650 *
	$£t_fûe_buf„r
(
FILE
 *
f
)

652 
size_t
 
size
 = 1048576;

653 *
buf
;

655 
buf
 = 
	`mÆloc
(
size
);

656 
	`£tvbuf
(
f
, 
buf
, 
_IOFBF
, 
size
);

657  
buf
;

658 
	}
}

660 
	$˛ór_fûe_buf„r
(*
buf
)

662 
	`‰ì
(
buf
);

663 
	}
}

665 *
	$£t_fûe_buf„r
(
FILE
 *
f
)

667  
NULL
;

668 
	}
}

670 
	$˛ór_fûe_buf„r
(*
buf
)

672 
	}
}

675 
	$‰ì_log
(
io_log
 *
log
)

677 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

678 
io_logs
 *
cur_log
;

680 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

681 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

682 
	`‰ì
(
cur_log
->
log
);

683 
	`s‰ì
(
cur_log
);

686 i‡(
log
->
≥ndög
) {

687 
	`‰ì
(
log
->
≥ndög
->log);

688 
	`‰ì
(
log
->
≥ndög
);

689 
log
->
≥ndög
 = 
NULL
;

692 
	`‰ì
(
log
->
≥ndög
);

693 
	`‰ì
(
log
->
fûíame
);

694 
	`s‰ì
(
log
);

695 
	}
}

697 
uöt64_t
 
	$hi°_sum
(
j
, 
°ride
, 
uöt64_t
 *
io_u_∂©
,

698 
uöt64_t
 *
io_u_∂©_œ°
)

700 
uöt64_t
 
sum
;

701 
k
;

703 i‡(
io_u_∂©_œ°
) {

704 
k
 = 
sum
 = 0; k < 
°ride
; k++)

705 
sum
 +
io_u_∂©
[
j
 + 
k
] - 
io_u_∂©_œ°
[j + k];

707 
k
 = 
sum
 = 0; k < 
°ride
; k++)

708 
sum
 +
io_u_∂©
[
j
 + 
k
];

711  
sum
;

712 
	}
}

714 
	$Êush_hi°_ßm∂es
(
FILE
 *
f
, 
hi°_cﬂr£√ss
, *
ßm∂es
,

715 
uöt64_t
 
ßm∂e_size
)

717 
io_ßm∂e
 *
s
;

718 
log_off£t
;

719 
uöt64_t
 
i
, 
j
, 
ƒ_ßm∂es
;

720 
io_u_∂©_íåy
 *
íåy
, *
íåy_bef‹e
;

721 
uöt64_t
 *
io_u_∂©
;

722 
uöt64_t
 *
io_u_∂©_bef‹e
;

724 
°ride
 = 1 << 
hi°_cﬂr£√ss
;

726 i‡(!
ßm∂e_size
)

729 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 0, 0);

730 
log_off£t
 = (
s
->
__ddú
 & 
LOG_OFFSET_SAMPLE_BIT
) != 0;

732 
ƒ_ßm∂es
 = 
ßm∂e_size
 / 
	`__log_íåy_sz
(
log_off£t
);

734 
i
 = 0; i < 
ƒ_ßm∂es
; i++) {

735 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 
log_off£t
, 
i
);

737 
íåy
 = 
s
->
d©a
.
∂©_íåy
;

738 
io_u_∂©
 = 
íåy
->io_u_plat;

740 
íåy_bef‹e
 = 
	`Êi°_fú°_íåy
(&
íåy
->
li°
, 
io_u_∂©_íåy
,Üist);

741 
io_u_∂©_bef‹e
 = 
íåy_bef‹e
->
io_u_∂©
;

743 
	`Ârötf
(
f
, "%lu, %u, %u, ", (Ë
s
->
time
,

744 
	`io_ßm∂e_ddú
(
s
), s->
bs
);

745 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
 - 
°ride
; j += stride) {

746 
	`Ârötf
(
f
, "%llu, ", ()

747 
	`hi°_sum
(
j
, 
°ride
, 
io_u_∂©
, 
io_u_∂©_bef‹e
));

749 
	`Ârötf
(
f
, "%llu\n", ()

750 
	`hi°_sum
(
FIO_IO_U_PLAT_NR
 - 
°ride
, såide, 
io_u_∂©
,

751 
io_u_∂©_bef‹e
));

753 
	`Êi°_dñ
(&
íåy_bef‹e
->
li°
);

754 
	`‰ì
(
íåy_bef‹e
);

756 
	}
}

758 
	$Êush_ßm∂es
(
FILE
 *
f
, *
ßm∂es
, 
uöt64_t
 
ßm∂e_size
)

760 
io_ßm∂e
 *
s
;

761 
log_off£t
;

762 
uöt64_t
 
i
, 
ƒ_ßm∂es
;

764 i‡(!
ßm∂e_size
)

767 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 0, 0);

768 
log_off£t
 = (
s
->
__ddú
 & 
LOG_OFFSET_SAMPLE_BIT
) != 0;

770 
ƒ_ßm∂es
 = 
ßm∂e_size
 / 
	`__log_íåy_sz
(
log_off£t
);

772 
i
 = 0; i < 
ƒ_ßm∂es
; i++) {

773 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 
log_off£t
, 
i
);

775 i‡(!
log_off£t
) {

776 
	`Ârötf
(
f
, "%lu, %" 
PRId64
 ", %u, %u\n",

777 (Ë
s
->
time
,

778 
s
->
d©a
.
vÆ
,

779 
	`io_ßm∂e_ddú
(
s
), s->
bs
);

781 
io_ßm∂e_off£t
 *
so
 = (*Ë
s
;

783 
	`Ârötf
(
f
, "%lu, %" 
PRId64
 ", %u, %u, %llu\n",

784 (Ë
s
->
time
,

785 
s
->
d©a
.
vÆ
,

786 
	`io_ßm∂e_ddú
(
s
), s->
bs
,

787 (Ë
so
->
off£t
);

790 
	}
}

792 #ifde‡
CONFIG_ZLIB


794 
	siﬁog_Êush_d©a
 {

795 
w‹kqueue_w‹k
 
	mw‹k
;

796 
io_log
 *
	mlog
;

797 *
	mßm∂es
;

798 
uöt32_t
 
	mƒ_ßm∂es
;

799 
boﬁ
 
	m‰ì
;

802 
	#GZ_CHUNK
 131072

	)

804 
iﬁog_com¥ess
 *
	$gë_√w_chunk
(
£q
)

806 
iﬁog_com¥ess
 *
c
;

808 
c
 = 
	`mÆloc
((*c));

809 
	`INIT_FLIST_HEAD
(&
c
->
li°
);

810 
c
->
buf
 = 
	`mÆloc
(
GZ_CHUNK
);

811 
c
->
Àn
 = 0;

812 
c
->
£q
 = seq;

813  
c
;

814 
	}
}

816 
	$‰ì_chunk
(
iﬁog_com¥ess
 *
ic
)

818 
	`‰ì
(
ic
->
buf
);

819 
	`‰ì
(
ic
);

820 
	}
}

822 
	$z_°ªam_öô
(
z_°ªam
 *
°ªam
, 
gz_hdr
)

824 
wbôs
 = 15;

826 
	`mem£t
(
°ªam
, 0, (*stream));

827 
°ªam
->
zÆloc
 = 
Z_NULL
;

828 
°ªam
->
z‰ì
 = 
Z_NULL
;

829 
°ªam
->
›aque
 = 
Z_NULL
;

830 
°ªam
->
√xt_ö
 = 
Z_NULL
;

836 i‡(
gz_hdr
)

837 
wbôs
 += 32;

839 i‡(
	`öÊ©eInô2
(
°ªam
, 
wbôs
Ë!
Z_OK
)

843 
	}
}

845 
	söÊ©e_chunk_ôî
 {

846 
	m£q
;

847 
	mîr
;

848 *
	mbuf
;

849 
size_t
 
	mbuf_size
;

850 
size_t
 
	mbuf_u£d
;

851 
size_t
 
	mchunk_sz
;

854 
	$föish_chunk
(
z_°ªam
 *
°ªam
, 
FILE
 *
f
,

855 
öÊ©e_chunk_ôî
 *
ôî
)

857 
ªt
;

859 
ªt
 = 
	`öÊ©eEnd
(
°ªam
);

860 i‡(
ªt
 !
Z_OK
)

861 
	`log_îr
("fio: failedÅoÉndÜog inflation seq %d (%d)\n",

862 
ôî
->
£q
, 
ªt
);

864 
	`Êush_ßm∂es
(
f
, 
ôî
->
buf
, iãr->
buf_u£d
);

865 
	`‰ì
(
ôî
->
buf
);

866 
ôî
->
buf
 = 
NULL
;

867 
ôî
->
buf_size
 = iãr->
buf_u£d
 = 0;

868 
	}
}

874 
size_t
 
	$öÊ©e_chunk
(
iﬁog_com¥ess
 *
ic
, 
gz_hdr
, 
FILE
 *
f
,

875 
z_°ªam
 *
°ªam
, 
öÊ©e_chunk_ôî
 *
ôî
)

877 
size_t
 
ªt
;

879 
	`d¥öt
(
FD_COMPRESS
, "inflate chunk size=%lu, seq=%u\n",

880 (Ë
ic
->
Àn
, ic->
£q
);

882 i‡(
ic
->
£q
 !
ôî
->seq) {

883 i‡(
ôî
->
£q
)

884 
	`föish_chunk
(
°ªam
, 
f
, 
ôî
);

886 
	`z_°ªam_öô
(
°ªam
, 
gz_hdr
);

887 
ôî
->
£q
 = 
ic
->seq;

890 
°ªam
->
avaû_ö
 = 
ic
->
Àn
;

891 
°ªam
->
√xt_ö
 = 
ic
->
buf
;

893 i‡(!
ôî
->
buf_size
) {

894 
ôî
->
buf_size
 = iãr->
chunk_sz
;

895 
ôî
->
buf
 = 
	`mÆloc
(ôî->
buf_size
);

898 
°ªam
->
avaû_ö
) {

899 
size_t
 
this_out
 = 
ôî
->
buf_size
 - iãr->
buf_u£d
;

900 
îr
;

902 
°ªam
->
avaû_out
 = 
this_out
;

903 
°ªam
->
√xt_out
 = 
ôî
->
buf
 + iãr->
buf_u£d
;

905 
îr
 = 
	`öÊ©e
(
°ªam
, 
Z_NO_FLUSH
);

906 i‡(
îr
 < 0) {

907 
	`log_îr
("fio: faûed inÊ©ögÜog: %d\n", 
îr
);

908 
ôî
->
îr
 =Érr;

912 
ôî
->
buf_u£d
 +
this_out
 - 
°ªam
->
avaû_out
;

914 i‡(!
°ªam
->
avaû_out
) {

915 
ôî
->
buf_size
 +ôî->
chunk_sz
;

916 
ôî
->
buf
 = 
	`ªÆloc
(ôî->buf, iãr->
buf_size
);

920 i‡(
îr
 =
Z_STREAM_END
)

924 
ªt
 = (*Ë
°ªam
->
√xt_ö
 - 
ic
->
buf
;

926 
	`d¥öt
(
FD_COMPRESS
, "öÊ©edÅÿsize=%lu\n", (Ë
ôî
->
buf_size
);

928  
ªt
;

929 
	}
}

935 
	$öÊ©e_gz_chunks
(
io_log
 *
log
, 
FILE
 *
f
)

937 
öÊ©e_chunk_ôî
 
ôî
 = { .
chunk_sz
 = 
log
->
log_gz
, };

938 
z_°ªam
 
°ªam
;

940 !
	`Êi°_em±y
(&
log
->
chunk_li°
)) {

941 
iﬁog_com¥ess
 *
ic
;

943 
ic
 = 
	`Êi°_fú°_íåy
(&
log
->
chunk_li°
, 
iﬁog_com¥ess
, 
li°
);

944 
	`Êi°_dñ
(&
ic
->
li°
);

946 i‡(
log
->
log_gz_°‹e
) {

947 
size_t
 
ªt
;

949 
	`d¥öt
(
FD_COMPRESS
, "log write chunk size=%lu, "

950 "£q=%u\n", (Ë
ic
->
Àn
, ic->
£q
);

952 
ªt
 = 
	`fwrôe
(
ic
->
buf
, ic->
Àn
, 1, 
f
);

953 i‡(
ªt
 !1 || 
	`„º‹
(
f
)) {

954 
ôî
.
îr
 = 
î∫o
;

955 
	`log_îr
("fio:Érror writing compressedÜog\n");

958 
	`öÊ©e_chunk
(
ic
, 
log
->
log_gz_°‹e
, 
f
, &
°ªam
, &
ôî
);

960 
	`‰ì_chunk
(
ic
);

963 i‡(
ôî
.
£q
) {

964 
	`föish_chunk
(&
°ªam
, 
f
, &
ôî
);

965 
	`‰ì
(
ôî
.
buf
);

968  
ôî
.
îr
;

969 
	}
}

976 
	$iﬁog_fûe_öÊ©e
(c⁄° *
fûe
)

978 
öÊ©e_chunk_ôî
 
ôî
 = { .
chunk_sz
 = 64 * 1024 * 1024, };

979 
iﬁog_com¥ess
 
ic
;

980 
z_°ªam
 
°ªam
;

981 
°©
 
sb
;

982 
ssize_t
 
ªt
;

983 
size_t
 
tŸÆ
;

984 *
buf
;

985 
FILE
 *
f
;

987 
f
 = 
	`f›í
(
fûe
, "r");

988 i‡(!
f
) {

989 
	`≥º‹
("fopen");

993 i‡(
	`°©
(
fûe
, &
sb
) < 0) {

994 
	`f˛o£
(
f
);

995 
	`≥º‹
("stat");

999 
ic
.
buf
 = bu‡
	`mÆloc
(
sb
.
°_size
);

1000 
ic
.
Àn
 = 
sb
.
°_size
;

1001 
ic
.
£q
 = 1;

1003 
ªt
 = 
	`‰ód
(
ic
.
buf
, ic.
Àn
, 1, 
f
);

1004 i‡(
ªt
 < 0) {

1005 
	`≥º‹
("fread");

1006 
	`f˛o£
(
f
);

1007 
	`‰ì
(
buf
);

1009 } i‡(
ªt
 != 1) {

1010 
	`log_îr
("fio: shortÑead onÑeadingÜog\n");

1011 
	`f˛o£
(
f
);

1012 
	`‰ì
(
buf
);

1016 
	`f˛o£
(
f
);

1024 
tŸÆ
 = 
ic
.
Àn
;

1026 
size_t
 
úë
;

1028 
úë
 = 
	`öÊ©e_chunk
(&
ic
, 1, 
°dout
, &
°ªam
, &
ôî
);

1029 
tŸÆ
 -
úë
;

1030 i‡(!
tŸÆ
)

1032 i‡(
ôî
.
îr
)

1035 
ic
.
£q
++;

1036 
ic
.
Àn
 -
úë
;

1037 
ic
.
buf
 +
úë
;

1040 i‡(
ôî
.
£q
) {

1041 
	`föish_chunk
(&
°ªam
, 
°dout
, &
ôî
);

1042 
	`‰ì
(
ôî
.
buf
);

1045 
	`‰ì
(
buf
);

1046  
ôî
.
îr
;

1047 
	}
}

1051 
	$öÊ©e_gz_chunks
(
io_log
 *
log
, 
FILE
 *
f
)

1054 
	}
}

1056 
	$iﬁog_fûe_öÊ©e
(c⁄° *
fûe
)

1058 
	`log_îr
("fio:Üog inflationÇotÖossible without zlib\n");

1060 
	}
}

1064 
	$Êush_log
(
io_log
 *
log
, 
boﬁ
 
do_≠≥nd
)

1066 *
buf
;

1067 
FILE
 *
f
;

1069 i‡(!
do_≠≥nd
)

1070 
f
 = 
	`f›í
(
log
->
fûíame
, "w");

1072 
f
 = 
	`f›í
(
log
->
fûíame
, "a");

1073 i‡(!
f
) {

1074 
	`≥º‹
("fopenÜog");

1078 
buf
 = 
	`£t_fûe_buf„r
(
f
);

1080 
	`öÊ©e_gz_chunks
(
log
, 
f
);

1082 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

1083 
io_logs
 *
cur_log
;

1085 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

1086 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

1088 i‡(
log
->
td
 &&Üog =log->td->
˛©_hi°_log
)

1089 
	`Êush_hi°_ßm∂es
(
f
, 
log
->
hi°_cﬂr£√ss
, 
cur_log
->log,

1090 
	`log_ßm∂e_sz
(
log
, 
cur_log
));

1092 
	`Êush_ßm∂es
(
f
, 
cur_log
->
log
, 
	`log_ßm∂e_sz
(log, cur_log));

1094 
	`s‰ì
(
cur_log
);

1097 
	`f˛o£
(
f
);

1098 
	`˛ór_fûe_buf„r
(
buf
);

1099 
	}
}

1101 
	$föish_log
(
thªad_d©a
 *
td
, 
io_log
 *
log
, 
åylock
)

1103 i‡(
td
->
Êags
 & 
TD_F_COMPRESS_LOG
)

1104 
	`iﬁog_Êush
(
log
);

1106 i‡(
åylock
) {

1107 i‡(
	`fio_åylock_fûe
(
log
->
fûíame
))

1110 
	`fio_lock_fûe
(
log
->
fûíame
);

1112 i‡(
td
->
˛õ¡_ty≥
 =
FIO_CLIENT_TYPE_GUI
 || 
is_backíd
)

1113 
	`fio_£nd_iﬁog
(
td
, 
log
,Üog->
fûíame
);

1115 
	`Êush_log
(
log
, !
td
->
o
.
≥r_job_logs
);

1117 
	`fio_u∆ock_fûe
(
log
->
fûíame
);

1118 
	`‰ì_log
(
log
);

1120 
	}
}

1122 
size_t
 
	$log_chunk_sizes
(
io_log
 *
log
)

1124 
Êi°_hód
 *
íåy
;

1125 
size_t
 
ªt
;

1127 i‡(
	`Êi°_em±y
(&
log
->
chunk_li°
))

1130 
ªt
 = 0;

1131 
	`±hªad_muãx_lock
(&
log
->
chunk_lock
);

1132 
	`Êi°_f‹_óch
(
íåy
, &
log
->
chunk_li°
) {

1133 
iﬁog_com¥ess
 *
c
;

1135 
c
 = 
	`Êi°_íåy
(
íåy
, 
iﬁog_com¥ess
, 
li°
);

1136 
ªt
 +
c
->
Àn
;

1138 
	`±hªad_muãx_u∆ock
(&
log
->
chunk_lock
);

1139  
ªt
;

1140 
	}
}

1142 #ifde‡
CONFIG_ZLIB


1144 
	$iﬁog_put_de„ºed
(
io_log
 *
log
, *
±r
)

1146 i‡(!
±r
)

1149 
	`±hªad_muãx_lock
(&
log
->
de„ºed_‰ì_lock
);

1150 i‡(
log
->
de„ºed
 < 
IOLOG_MAX_DEFER
) {

1151 
log
->
de„ºed_ôems
[log->
de„ºed
] = 
±r
;

1152 
log
->
de„ºed
++;

1153 } i‡(!
	`fio_did_w¨n
(
FIO_WARN_IOLOG_DROP
))

1154 
	`log_îr
("fio: hadÅo dropÜogÉntry free\n");

1155 
	`±hªad_muãx_u∆ock
(&
log
->
de„ºed_‰ì_lock
);

1156 
	}
}

1158 
	$iﬁog_‰ì_de„ºed
(
io_log
 *
log
)

1160 
i
;

1162 i‡(!
log
->
de„ºed
)

1165 
	`±hªad_muãx_lock
(&
log
->
de„ºed_‰ì_lock
);

1167 
i
 = 0; i < 
log
->
de„ºed
; i++) {

1168 
	`‰ì
(
log
->
de„ºed_ôems
[
i
]);

1169 
log
->
de„ºed_ôems
[
i
] = 
NULL
;

1172 
log
->
de„ºed
 = 0;

1173 
	`±hªad_muãx_u∆ock
(&
log
->
de„ºed_‰ì_lock
);

1174 
	}
}

1176 
	$gz_w‹k
(
iﬁog_Êush_d©a
 *
d©a
)

1178 
iﬁog_com¥ess
 *
c
 = 
NULL
;

1179 
Êi°_hód
 
li°
;

1180 
£q
;

1181 
z_°ªam
 
°ªam
;

1182 
size_t
 
tŸÆ
 = 0;

1183 
ªt
;

1185 
	`INIT_FLIST_HEAD
(&
li°
);

1187 
	`mem£t
(&
°ªam
, 0, (stream));

1188 
°ªam
.
zÆloc
 = 
Z_NULL
;

1189 
°ªam
.
z‰ì
 = 
Z_NULL
;

1190 
°ªam
.
›aque
 = 
Z_NULL
;

1192 
ªt
 = 
	`deÊ©eInô
(&
°ªam
, 
Z_DEFAULT_COMPRESSION
);

1193 i‡(
ªt
 !
Z_OK
) {

1194 
	`log_îr
("fio: failedÅo init gz stream\n");

1195 
îr
;

1198 
£q
 = ++
d©a
->
log
->
chunk_£q
;

1200 
°ªam
.
√xt_ö
 = (*Ë
d©a
->
ßm∂es
;

1201 
°ªam
.
avaû_ö
 = 
d©a
->
ƒ_ßm∂es
 * 
	`log_íåy_sz
(d©a->
log
);

1203 
	`d¥öt
(
FD_COMPRESS
, "deflate input size=%lu, seq=%u,Üog=%s\n",

1204 (Ë
°ªam
.
avaû_ö
, 
£q
,

1205 
d©a
->
log
->
fûíame
);

1207 i‡(
c
)

1208 
	`d¥öt
(
FD_COMPRESS
, "£q=%d, chunk=%lu\n", 
£q
,

1209 (Ë
c
->
Àn
);

1210 
c
 = 
	`gë_√w_chunk
(
£q
);

1211 
°ªam
.
avaû_out
 = 
GZ_CHUNK
;

1212 
°ªam
.
√xt_out
 = 
c
->
buf
;

1213 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_NO_FLUSH
);

1214 i‡(
ªt
 < 0) {

1215 
	`log_îr
("fio: deÊ©êlog (%d)\n", 
ªt
);

1216 
	`‰ì_chunk
(
c
);

1217 
îr
;

1220 
c
->
Àn
 = 
GZ_CHUNK
 - 
°ªam
.
avaû_out
;

1221 
	`Êi°_add_èû
(&
c
->
li°
, &list);

1222 
tŸÆ
 +
c
->
Àn
;

1223 } 
°ªam
.
avaû_ö
);

1225 
°ªam
.
√xt_out
 = 
c
->
buf
 + c->
Àn
;

1226 
°ªam
.
avaû_out
 = 
GZ_CHUNK
 - 
c
->
Àn
;

1228 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

1229 i‡(
ªt
 < 0) {

1235 i‡(
ªt
 !
Z_BUF_ERROR
) {

1236 
	`log_îr
("fio: deÊ©êlog (%d)\n", 
ªt
);

1237 
	`Êi°_dñ
(&
c
->
li°
);

1238 
	`‰ì_chunk
(
c
);

1239 
îr
;

1243 
tŸÆ
 -
c
->
Àn
;

1244 
c
->
Àn
 = 
GZ_CHUNK
 - 
°ªam
.
avaû_out
;

1245 
tŸÆ
 +
c
->
Àn
;

1246 
	`d¥öt
(
FD_COMPRESS
, "£q=%d, chunk=%lu\n", 
£q
, (Ë
c
->
Àn
);

1248 i‡(
ªt
 !
Z_STREAM_END
) {

1250 
c
 = 
	`gë_√w_chunk
(
£q
);

1251 
°ªam
.
avaû_out
 = 
GZ_CHUNK
;

1252 
°ªam
.
√xt_out
 = 
c
->
buf
;

1253 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

1254 
c
->
Àn
 = 
GZ_CHUNK
 - 
°ªam
.
avaû_out
;

1255 
tŸÆ
 +
c
->
Àn
;

1256 
	`Êi°_add_èû
(&
c
->
li°
, &list);

1257 
	`d¥öt
(
FD_COMPRESS
, "£q=%d, chunk=%lu\n", 
£q
,

1258 (Ë
c
->
Àn
);

1259 } 
ªt
 !
Z_STREAM_END
);

1262 
	`d¥öt
(
FD_COMPRESS
, "deÊ©edÅÿsize=%lu\n", (Ë
tŸÆ
);

1264 
ªt
 = 
	`deÊ©eEnd
(&
°ªam
);

1265 i‡(
ªt
 !
Z_OK
)

1266 
	`log_îr
("fio: deÊ©eEnd %d\n", 
ªt
);

1268 
	`iﬁog_put_de„ºed
(
d©a
->
log
, d©a->
ßm∂es
);

1270 i‡(!
	`Êi°_em±y
(&
li°
)) {

1271 
	`±hªad_muãx_lock
(&
d©a
->
log
->
chunk_lock
);

1272 
	`Êi°_•li˚_èû
(&
li°
, &
d©a
->
log
->
chunk_li°
);

1273 
	`±hªad_muãx_u∆ock
(&
d©a
->
log
->
chunk_lock
);

1276 
ªt
 = 0;

1277 
d⁄e
:

1278 i‡(
d©a
->
‰ì
)

1279 
	`s‰ì
(
d©a
);

1280  
ªt
;

1281 
îr
:

1282 !
	`Êi°_em±y
(&
li°
)) {

1283 
c
 = 
	`Êi°_fú°_íåy
(
li°
.
√xt
, 
iﬁog_com¥ess
,Üist);

1284 
	`Êi°_dñ
(&
c
->
li°
);

1285 
	`‰ì_chunk
(
c
);

1287 
ªt
 = 1;

1288 
d⁄e
;

1289 
	}
}

1296 
	$gz_w‹k_async
(
submô_w‹kî
 *
sw
, 
w‹kqueue_w‹k
 *
w‹k
)

1298  
	`gz_w‹k
(
	`c⁄èöî_of
(
w‹k
, 
iﬁog_Êush_d©a
, work));

1299 
	}
}

1301 
	$gz_öô_w‹kî
(
submô_w‹kî
 *
sw
)

1303 
thªad_d©a
 *
td
 = 
sw
->
wq
->td;

1305 i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
log_gz_˝umask
))

1308 i‡(
	`fio_£èfföôy
(
	`gëtid
(), 
td
->
o
.
log_gz_˝umask
) == -1) {

1309 
	`log_îr
("gz: failedÅo set CPUáffinity\n");

1314 
	}
}

1316 
w‹kqueue_›s
 
	glog_com¥ess_wq_›s
 = {

1317 .
‚
 = 
gz_w‹k_async
,

1318 .
	göô_w‹kî_‚
 = 
gz_öô_w‹kî
,

1319 .
	gni˚
 = 1,

1322 
	$iﬁog_com¥ess_öô
(
thªad_d©a
 *
td
, 
sk_out
 *sk_out)

1324 i‡(!(
td
->
Êags
 & 
TD_F_COMPRESS_LOG
))

1327 
	`w‹kqueue_öô
(
td
, &td->
log_com¥ess_wq
, &
log_com¥ess_wq_›s
, 1, 
sk_out
);

1329 
	}
}

1331 
	$iﬁog_com¥ess_exô
(
thªad_d©a
 *
td
)

1333 i‡(!(
td
->
Êags
 & 
TD_F_COMPRESS_LOG
))

1336 
	`w‹kqueue_exô
(&
td
->
log_com¥ess_wq
);

1337 
	}
}

1347 
	$iﬁog_Êush
(
io_log
 *
log
)

1349 
iﬁog_Êush_d©a
 *
d©a
;

1351 
d©a
 = 
	`mÆloc
((*data));

1352 i‡(!
d©a
)

1355 
d©a
->
log
 =Üog;

1356 
d©a
->
‰ì
 = 
Ál£
;

1358 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

1359 
io_logs
 *
cur_log
;

1361 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

1362 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

1364 
d©a
->
ßm∂es
 = 
cur_log
->
log
;

1365 
d©a
->
ƒ_ßm∂es
 = 
cur_log
->nr_samples;

1367 
	`s‰ì
(
cur_log
);

1369 
	`gz_w‹k
(
d©a
);

1372 
	`‰ì
(
d©a
);

1374 
	}
}

1376 
	$iﬁog_cur_Êush
(
io_log
 *
log
, 
io_logs
 *
cur_log
)

1378 
iﬁog_Êush_d©a
 *
d©a
;

1380 
d©a
 = 
	`smÆloc
((*data));

1381 i‡(!
d©a
)

1384 
d©a
->
log
 =Üog;

1386 
d©a
->
ßm∂es
 = 
cur_log
->
log
;

1387 
d©a
->
ƒ_ßm∂es
 = 
cur_log
->nr_samples;

1388 
d©a
->
‰ì
 = 
åue
;

1390 
cur_log
->
ƒ_ßm∂es
 = cur_log->
max_ßm∂es
 = 0;

1391 
cur_log
->
log
 = 
NULL
;

1393 
	`w‹kqueue_íqueue
(&
log
->
td
->
log_com¥ess_wq
, &
d©a
->
w‹k
);

1395 
	`iﬁog_‰ì_de„ºed
(
log
);

1398 
	}
}

1401 
	$iﬁog_Êush
(
io_log
 *
log
)

1404 
	}
}

1406 
	$iﬁog_cur_Êush
(
io_log
 *
log
, 
io_logs
 *
cur_log
)

1409 
	}
}

1411 
	$iﬁog_com¥ess_öô
(
thªad_d©a
 *
td
, 
sk_out
 *sk_out)

1414 
	}
}

1416 
	$iﬁog_com¥ess_exô
(
thªad_d©a
 *
td
)

1418 
	}
}

1422 
io_logs
 *
	$iﬁog_cur_log
(
io_log
 *
log
)

1424 i‡(
	`Êi°_em±y
(&
log
->
io_logs
))

1425  
NULL
;

1427  
	`Êi°_œ°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

1428 
	}
}

1430 
uöt64_t
 
	$iﬁog_ƒ_ßm∂es
(
io_log
 *
iﬁog
)

1432 
Êi°_hód
 *
íåy
;

1433 
uöt64_t
 
ªt
 = 0;

1435 
	`Êi°_f‹_óch
(
íåy
, &
iﬁog
->
io_logs
) {

1436 
io_logs
 *
cur_log
;

1438 
cur_log
 = 
	`Êi°_íåy
(
íåy
, 
io_logs
, 
li°
);

1439 
ªt
 +
cur_log
->
ƒ_ßm∂es
;

1442  
ªt
;

1443 
	}
}

1445 
	$__wrôe_log
(
thªad_d©a
 *
td
, 
io_log
 *
log
, 
åy
)

1447 i‡(
log
)

1448  
	`föish_log
(
td
, 
log
, 
åy
);

1451 
	}
}

1453 
	$wrôe_i›s_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1455 
ªt
;

1457 i‡(
	`≥r_unô_log
(
td
->
i›s_log
Ë!
unô_log
)

1460 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
i›s_log
, 
åy
);

1461 i‡(!
ªt
)

1462 
td
->
i›s_log
 = 
NULL
;

1464  
ªt
;

1465 
	}
}

1467 
	$wrôe_¶©_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1469 
ªt
;

1471 i‡(!
unô_log
)

1474 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
¶©_log
, 
åy
);

1475 i‡(!
ªt
)

1476 
td
->
¶©_log
 = 
NULL
;

1478  
ªt
;

1479 
	}
}

1481 
	$wrôe_˛©_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1483 
ªt
;

1485 i‡(!
unô_log
)

1488 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
˛©_log
, 
åy
);

1489 i‡(!
ªt
)

1490 
td
->
˛©_log
 = 
NULL
;

1492  
ªt
;

1493 
	}
}

1495 
	$wrôe_˛©_hi°_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1497 
ªt
;

1499 i‡(!
unô_log
)

1502 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
˛©_hi°_log
, 
åy
);

1503 i‡(!
ªt
)

1504 
td
->
˛©_hi°_log
 = 
NULL
;

1506  
ªt
;

1507 
	}
}

1509 
	$wrôe_œt_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1511 
ªt
;

1513 i‡(!
unô_log
)

1516 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
œt_log
, 
åy
);

1517 i‡(!
ªt
)

1518 
td
->
œt_log
 = 
NULL
;

1520  
ªt
;

1521 
	}
}

1523 
	$wrôe_b™dw_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1525 
ªt
;

1527 i‡(
	`≥r_unô_log
(
td
->
bw_log
Ë!
unô_log
)

1530 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
bw_log
, 
åy
);

1531 i‡(!
ªt
)

1532 
td
->
bw_log
 = 
NULL
;

1534  
ªt
;

1535 
	}
}

1538 
	mBW_LOG_MASK
 = 1,

1539 
	mLAT_LOG_MASK
 = 2,

1540 
	mSLAT_LOG_MASK
 = 4,

1541 
	mCLAT_LOG_MASK
 = 8,

1542 
	mIOPS_LOG_MASK
 = 16,

1543 
	mCLAT_HIST_LOG_MASK
 = 32,

1545 
	mALL_LOG_NR
 = 6,

1548 
	slog_ty≥
 {

1549 
	mmask
;

1550 (*
	m‚
)(
	mthªad_d©a
 *, , 
	mboﬁ
);

1553 
log_ty≥
 
	glog_ty≥s
[] = {

1555 .
mask
 = 
BW_LOG_MASK
,

1556 .
	g‚
 = 
wrôe_b™dw_log
,

1559 .
	gmask
 = 
LAT_LOG_MASK
,

1560 .
	g‚
 = 
wrôe_œt_log
,

1563 .
	gmask
 = 
SLAT_LOG_MASK
,

1564 .
	g‚
 = 
wrôe_¶©_log
,

1567 .
	gmask
 = 
CLAT_LOG_MASK
,

1568 .
	g‚
 = 
wrôe_˛©_log
,

1571 .
	gmask
 = 
IOPS_LOG_MASK
,

1572 .
	g‚
 = 
wrôe_i›s_log
,

1575 .
	gmask
 = 
CLAT_HIST_LOG_MASK
,

1576 .
	g‚
 = 
wrôe_˛©_hi°_log
,

1580 
	$td_wrôeout_logs
(
thªad_d©a
 *
td
, 
boﬁ
 
unô_logs
)

1582 
log_mask
 = 0;

1583 
log_À·
 = 
ALL_LOG_NR
;

1584 
ﬁd_°©e
, 
i
;

1586 
ﬁd_°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_FINISHING
);

1588 
	`föÆize_logs
(
td
, 
unô_logs
);

1590 
log_À·
) {

1591 
¥ev_log_À·
 = 
log_À·
;

1593 
i
 = 0; i < 
ALL_LOG_NR
 && 
log_À·
; i++) {

1594 
log_ty≥
 *
…
 = &
log_ty≥s
[
i
];

1595 
ªt
;

1597 i‡(!(
log_mask
 & 
…
->
mask
)) {

1598 
ªt
 = 
…
->
	`‚
(
td
, 
log_À·
 !1, 
unô_logs
);

1599 i‡(!
ªt
) {

1600 
log_À·
--;

1601 
log_mask
 |
…
->
mask
;

1606 i‡(
¥ev_log_À·
 =
log_À·
)

1607 
	`u¶ìp
(5000);

1610 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

1611 
	}
}

1613 
	$fio_wrôeout_logs
(
boﬁ
 
unô_logs
)

1615 
thªad_d©a
 *
td
;

1616 
i
;

1618 
	`f‹_óch_td
(
td
, 
i
)

1619 
	`td_wrôeout_logs
(
td
, 
unô_logs
);

1620 
	}
}

	@/home/ysjin/Desktop/fio/fio/iolog.h

1 #i‚de‡
FIO_IOLOG_H


2 
	#FIO_IOLOG_H


	)

4 
	~"lib/rbåì.h
"

5 
	~"lib/õì754.h
"

6 
	~"Êi°.h
"

7 
	~"i€ngöes.h
"

12 
	sio_°©
 {

13 
uöt64_t
 
	mmax_vÆ
;

14 
uöt64_t
 
	mmö_vÆ
;

15 
uöt64_t
 
	mßm∂es
;

17 
fio_Â64_t
 
	mmón
;

18 
fio_Â64_t
 
	mS
;

21 
	sio_hi°
 {

22 
uöt64_t
 
	mßm∂es
;

23 
	mhi°_œ°
;

24 
Êi°_hód
 
	mli°
;

28 
	uio_ßm∂e_d©a
 {

29 
uöt64_t
 
	mvÆ
;

30 
io_u_∂©_íåy
 *
	m∂©_íåy
;

33 
	#ßm∂e_vÆ
(
vÆue
Ë((
io_ßm∂e_d©a
Ë{ .
vÆ
 = vÆuê})

	)

34 
	#ßm∂e_∂©
(
∂©
Ë((
io_ßm∂e_d©a
Ë{ .
∂©_íåy
 =Öœà})

	)

39 
	sio_ßm∂e
 {

40 
uöt64_t
 
	mtime
;

41 
io_ßm∂e_d©a
 
	md©a
;

42 
uöt32_t
 
	m__ddú
;

43 
uöt32_t
 
	mbs
;

46 
	sio_ßm∂e_off£t
 {

47 
io_ßm∂e
 
	ms
;

48 
uöt64_t
 
	moff£t
;

52 
	mIO_LOG_TYPE_LAT
 = 1,

53 
	mIO_LOG_TYPE_CLAT
,

54 
	mIO_LOG_TYPE_SLAT
,

55 
	mIO_LOG_TYPE_BW
,

56 
	mIO_LOG_TYPE_IOPS
,

57 
	mIO_LOG_TYPE_HIST
,

60 
	#DEF_LOG_ENTRIES
 1024

	)

61 
	#MAX_LOG_ENTRIES
 (1024 * 
DEF_LOG_ENTRIES
)

	)

63 
	sio_logs
 {

64 
Êi°_hód
 
	mli°
;

65 
uöt64_t
 
	mƒ_ßm∂es
;

66 
uöt64_t
 
	mmax_ßm∂es
;

67 *
	mlog
;

73 
	sio_log
 {

77 
Êi°_hód
 
	mio_logs
;

78 
uöt32_t
 
	mcur_log_max
;

84 
io_logs
 *
	m≥ndög
;

86 
	mlog_ddú_mask
;

88 *
	mfûíame
;

90 
thªad_d©a
 *
	mtd
;

92 
	mlog_ty≥
;

97 
boﬁ
 
	mdißbÀd
;

102 
	mlog_off£t
;

107 
	mlog_gz
;

112 
	mlog_gz_°‹e
;

118 
io_°©
 
	mavg_wödow
[
DDIR_RWDIR_CNT
];

119 
	mavg_m£c
;

120 
	mavg_œ°
[
DDIR_RWDIR_CNT
];

127 
io_hi°
 
	mhi°_wödow
[
DDIR_RWDIR_CNT
];

128 
	mhi°_m£c
;

129 
	mhi°_cﬂr£√ss
;

131 
±hªad_muãx_t
 
	mchunk_lock
;

132 
	mchunk_£q
;

133 
Êi°_hód
 
	mchunk_li°
;

135 
±hªad_muãx_t
 
	mde„ºed_‰ì_lock
;

136 
	#IOLOG_MAX_DEFER
 8

	)

137 *
	mde„ºed_ôems
[
IOLOG_MAX_DEFER
];

138 
	mde„ºed
;

144 
	#LOG_OFFSET_SAMPLE_BIT
 0x80000000U

	)

145 
	#io_ßm∂e_ddú
(
io
Ë((io)->
__ddú
 & ~
LOG_OFFSET_SAMPLE_BIT
)

	)

147 
ölöe
 
	$io_ßm∂e_£t_ddú
(
io_log
 *
log
,

148 
io_ßm∂e
 *
io
,

149 
fio_ddú
 
ddú
)

151 
io
->
__ddú
 = 
ddú
 | 
log
->
log_ddú_mask
;

152 
	}
}

154 
ölöe
 
size_t
 
	$__log_íåy_sz
(
log_off£t
)

156 i‡(
log_off£t
)

157  (
io_ßm∂e_off£t
);

159  (
io_ßm∂e
);

160 
	}
}

162 
ölöe
 
size_t
 
	$log_íåy_sz
(
io_log
 *
log
)

164  
	`__log_íåy_sz
(
log
->
log_off£t
);

165 
	}
}

167 
ölöe
 
size_t
 
	$log_ßm∂e_sz
(
io_log
 *
log
, 
io_logs
 *
cur_log
)

169  
cur_log
->
ƒ_ßm∂es
 * 
	`log_íåy_sz
(
log
);

170 
	}
}

172 
ölöe
 
io_ßm∂e
 *
	$__gë_ßm∂e
(*
ßm∂es
, 
log_off£t
,

173 
uöt64_t
 
ßm∂e
)

175 
uöt64_t
 
ßm∂e_off£t
 = 
ßm∂e
 * 
	`__log_íåy_sz
(
log_off£t
);

176  (
io_ßm∂e
 *Ë((*Ë
ßm∂es
 + 
ßm∂e_off£t
);

177 
	}
}

179 
io_logs
 *
iﬁog_cur_log
(
io_log
 *);

180 
uöt64_t
 
iﬁog_ƒ_ßm∂es
(
io_log
 *);

181 
ªgrow_logs
(
thªad_d©a
 *);

183 
ölöe
 
io_ßm∂e
 *
	$gë_ßm∂e
(
io_log
 *
iﬁog
,

184 
io_logs
 *
cur_log
,

185 
uöt64_t
 
ßm∂e
)

187  
	`__gë_ßm∂e
(
cur_log
->
log
, 
iﬁog
->
log_off£t
, 
ßm∂e
);

188 
	}
}

191 
	mIP_F_ONRB
 = 1,

192 
	mIP_F_ONLIST
 = 2,

193 
	mIP_F_TRIMMED
 = 4,

194 
	mIP_F_IN_FLIGHT
 = 8,

200 
	sio_põ˚
 {

202 
rb_node
 
	mrb_node
;

203 
Êi°_hód
 
	mli°
;

205 
Êi°_hód
 
	måim_li°
;

207 
	mfûío
;

208 
fio_fûe
 *
	mfûe
;

210 
	moff£t
;

211 
	mnumbîio
;

212 
	mÀn
;

213 
	mÊags
;

214 
fio_ddú
 
	mddú
;

216 
	mdñay
;

217 
	mfûe_a˘i⁄
;

224 
	efûe_log_a˘
 {

225 
	mFIO_LOG_ADD_FILE
,

226 
	mFIO_LOG_OPEN_FILE
,

227 
	mFIO_LOG_CLOSE_FILE
,

228 
	mFIO_LOG_UNLINK_FILE
,

231 
	gio_u
;

232 
__mu°_check
 
ªad_iﬁog_gë
(
thªad_d©a
 *, 
io_u
 *);

233 
log_io_u
(c⁄° 
thªad_d©a
 *, c⁄° 
io_u
 *);

234 
log_fûe
(
thªad_d©a
 *, 
fio_fûe
 *, 
fûe_log_a˘
);

235 
__mu°_check
 
öô_iﬁog
(
thªad_d©a
 *
td
);

236 
log_io_põ˚
(
thªad_d©a
 *, 
io_u
 *);

237 
u∆og_io_põ˚
(
thªad_d©a
 *, 
io_u
 *);

238 
åim_io_põ˚
(
thªad_d©a
 *, c⁄° 
io_u
 *);

239 
queue_io_põ˚
(
thªad_d©a
 *, 
io_põ˚
 *);

240 
¥u√_io_põ˚_log
(
thªad_d©a
 *);

241 
wrôe_iﬁog_˛o£
(
thªad_d©a
 *);

242 
iﬁog_com¥ess_öô
(
thªad_d©a
 *, 
sk_out
 *);

243 
iﬁog_com¥ess_exô
(
thªad_d©a
 *);

244 
size_t
 
log_chunk_sizes
(
io_log
 *);

246 #ifde‡
CONFIG_ZLIB


247 
iﬁog_fûe_öÊ©e
(const *);

253 
	slog_∑øms
 {

254 
thªad_d©a
 *
	mtd
;

255 
	mavg_m£c
;

256 
	mhi°_m£c
;

257 
	mhi°_cﬂr£√ss
;

258 
	mlog_ty≥
;

259 
	mlog_off£t
;

260 
	mlog_gz
;

261 
	mlog_gz_°‹e
;

262 
	mlog_com¥ess
;

265 
ölöe
 
boﬁ
 
	$≥r_unô_log
(
io_log
 *
log
)

267  
log
 && (!log->
avg_m£c
 ||Üog->
log_gz
 ||Üog->
log_gz_°‹e
);

268 
	}
}

270 
ölöe
 
boﬁ
 
	$ölöe_log
(
io_log
 *
log
)

272  
log
->
log_ty≥
 =
IO_LOG_TYPE_LAT
 ||

273 
log
->
log_ty≥
 =
IO_LOG_TYPE_CLAT
 ||

274 
log
->
log_ty≥
 =
IO_LOG_TYPE_SLAT
;

275 
	}
}

277 
ölöe
 
	$ùo_byãs_Æign
(
ª∂ay_Æign
, 
io_põ˚
 *
ùo
)

279 i‡(!
ª∂ay_Æign
)

282 
ùo
->
off£t
 &~(
ª∂ay_Æign
 - (
uöt64_t
)1);

283 
	}
}

285 
föÆize_logs
(
thªad_d©a
 *
td
, 
boﬁ
);

286 
£tup_log
(
io_log
 **, 
log_∑øms
 *, const *);

287 
Êush_log
(
io_log
 *, 
boﬁ
);

288 
Êush_ßm∂es
(
FILE
 *, *, 
uöt64_t
);

289 
uöt64_t
 
hi°_sum
(, , uint64_t *, uint64_t *);

290 
‰ì_log
(
io_log
 *);

291 
fio_wrôeout_logs
(
boﬁ
);

292 
td_wrôeout_logs
(
thªad_d©a
 *, 
boﬁ
);

293 
iﬁog_cur_Êush
(
io_log
 *, 
io_logs
 *);

295 
ölöe
 
	$öô_ùo
(
io_põ˚
 *
ùo
)

297 
	`mem£t
(
ùo
, 0, (*ipo));

298 
	`INIT_FLIST_HEAD
(&
ùo
->
åim_li°
);

299 
	}
}

301 
	siﬁog_com¥ess
 {

302 
Êi°_hód
 
	mli°
;

303 *
	mbuf
;

304 
size_t
 
	mÀn
;

305 
	m£q
;

	@/home/ysjin/Desktop/fio/fio/json.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<°dio.h
>

4 
	~<î∫o.h
>

5 
	~<°d¨g.h
>

6 
	~"js⁄.h
"

7 
	~"log.h
"

9 
js⁄_obje˘
 *
	$js⁄_¸óã_obje˘
()

11  
	`ˇŒoc
(1, (
js⁄_obje˘
));

12 
	}
}

14 
js⁄_¨øy
 *
	$js⁄_¸óã_¨øy
()

16  
	`ˇŒoc
(1, (
js⁄_¨øy
));

17 
	}
}

19 
js⁄_∑ú
 *
	$js⁄_¸óã_∑ú
(c⁄° *
«me
, 
js⁄_vÆue
 *
vÆue
)

21 
js⁄_∑ú
 *
∑ú
 = 
	`mÆloc
((json_pair));

22 i‡(
∑ú
) {

23 
∑ú
->
«me
 = 
	`°rdup
(name);

24 
∑ú
->
vÆue
 = value;

26 
vÆue
->
∑ª¡_ty≥
 = 
JSON_PARENT_TYPE_PAIR
;

27 
vÆue
->
∑ª¡_∑ú
 = 
∑ú
;

29  
∑ú
;

30 
	}
}

32 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_öt
(
numbî
)

34 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

36 i‡(
vÆue
) {

37 
vÆue
->
ty≥
 = 
JSON_TYPE_INTEGER
;

38 
vÆue
->
öãgî_numbî
 = 
numbî
;

40  
vÆue
;

41 
	}
}

43 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_Êﬂt
(
numbî
)

45 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

47 i‡(
vÆue
) {

48 
vÆue
->
ty≥
 = 
JSON_TYPE_FLOAT
;

49 
vÆue
->
Êﬂt_numbî
 = 
numbî
;

51  
vÆue
;

52 
	}
}

54 *
	$°rdup_esˇ≥
(c⁄° *
°r
)

56 c⁄° *
öput
 = 
°r
;

57 *
p
, *
ªt
;

58 
esˇ≥s
;

60 i‡(!
	`°æí
(
°r
))

61  
NULL
;

63 
esˇ≥s
 = 0;

64 (
öput
 = 
	`°Ωbrk
(öput, "\\\"")Ë!
NULL
) {

65 
esˇ≥s
++;

66 
öput
++;

69 
p
 = 
ªt
 = 
	`mÆloc
(
	`°æí
(
°r
Ë+ 
esˇ≥s
 + 1);

70 *
°r
) {

71 i‡(*
°r
 == '\\' || *str == '\"')

72 *
p
++ = '\\';

73 *
p
++ = *
°r
++;

75 *
p
 = '\0';

77  
ªt
;

78 
	}
}

83 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_°rög
(c⁄° *
°r
)

85 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

87 i‡(
vÆue
) {

88 
vÆue
->
ty≥
 = 
JSON_TYPE_STRING
;

89 
vÆue
->
°rög
 = 
	`°rdup_esˇ≥
(
°r
);

90 i‡(!
vÆue
->
°rög
) {

91 
	`‰ì
(
vÆue
);

92 
vÆue
 = 
NULL
;

95  
vÆue
;

96 
	}
}

98 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_obje˘
(
js⁄_obje˘
 *
obj
)

100 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

102 i‡(
vÆue
) {

103 
vÆue
->
ty≥
 = 
JSON_TYPE_OBJECT
;

104 
vÆue
->
obje˘
 = 
obj
;

105 
obj
->
∑ª¡
 = 
vÆue
;

107  
vÆue
;

108 
	}
}

110 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_¨øy
(
js⁄_¨øy
 *
¨øy
)

112 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

114 i‡(
vÆue
) {

115 
vÆue
->
ty≥
 = 
JSON_TYPE_ARRAY
;

116 
vÆue
->
¨øy
 =árray;

117 
¨øy
->
∑ª¡
 = 
vÆue
;

119  
vÆue
;

120 
	}
}

122 
js⁄_‰ì_∑ú
(
js⁄_∑ú
 *
∑ú
);

123 
js⁄_‰ì_vÆue
(
js⁄_vÆue
 *
vÆue
);

125 
	$js⁄_‰ì_obje˘
(
js⁄_obje˘
 *
obj
)

127 
i
;

129 
i
 = 0; i < 
obj
->
∑ú_˙t
; i++)

130 
	`js⁄_‰ì_∑ú
(
obj
->
∑ús
[
i
]);

131 
	`‰ì
(
obj
->
∑ús
);

132 
	`‰ì
(
obj
);

133 
	}
}

135 
	$js⁄_‰ì_¨øy
(
js⁄_¨øy
 *
¨øy
)

137 
i
;

139 
i
 = 0; i < 
¨øy
->
vÆue_˙t
; i++)

140 
	`js⁄_‰ì_vÆue
(
¨øy
->
vÆues
[
i
]);

141 
	`‰ì
(
¨øy
->
vÆues
);

142 
	`‰ì
(
¨øy
);

143 
	}
}

145 
	$js⁄_‰ì_∑ú
(
js⁄_∑ú
 *
∑ú
)

147 
	`js⁄_‰ì_vÆue
(
∑ú
->
vÆue
);

148 
	`‰ì
(
∑ú
->
«me
);

149 
	`‰ì
(
∑ú
);

150 
	}
}

152 
	$js⁄_‰ì_vÆue
(
js⁄_vÆue
 *
vÆue
)

154 
vÆue
->
ty≥
) {

155 
JSON_TYPE_STRING
:

156 
	`‰ì
(
vÆue
->
°rög
);

158 
JSON_TYPE_OBJECT
:

159 
	`js⁄_‰ì_obje˘
(
vÆue
->
obje˘
);

161 
JSON_TYPE_ARRAY
:

162 
	`js⁄_‰ì_¨øy
(
vÆue
->
¨øy
);

165 
	`‰ì
(
vÆue
);

166 
	}
}

168 
	$js⁄_¨øy_add_vÆue
(
js⁄_¨øy
 *
¨øy
, 
js⁄_vÆue
 *
vÆue
)

170 
js⁄_vÆue
 **
vÆues
 = 
	`ªÆloc
(
¨øy
->values,

171 (
js⁄_vÆue
 *Ë* (
¨øy
->
vÆue_˙t
 + 1));

173 i‡(!
vÆues
)

174  
ENOMEM
;

175 
vÆues
[
¨øy
->
vÆue_˙t
] = 
vÆue
;

176 
¨øy
->
vÆue_˙t
++;

177 
¨øy
->
vÆues
 = values;

179 
vÆue
->
∑ª¡_ty≥
 = 
JSON_PARENT_TYPE_ARRAY
;

180 
vÆue
->
∑ª¡_¨øy
 = 
¨øy
;

182 
	}
}

184 
	$js⁄_obje˘_add_∑ú
(
js⁄_obje˘
 *
obj
, 
js⁄_∑ú
 *
∑ú
)

186 
js⁄_∑ú
 **
∑ús
 = 
	`ªÆloc
(
obj
->pairs,

187 (
js⁄_∑ú
 *Ë* (
obj
->
∑ú_˙t
 + 1));

188 i‡(!
∑ús
)

189  
ENOMEM
;

190 
∑ús
[
obj
->
∑ú_˙t
] = 
∑ú
;

191 
obj
->
∑ú_˙t
++;

192 
obj
->
∑ús
 =Öairs;

194 
∑ú
->
∑ª¡
 = 
obj
;

196 
	}
}

198 
	$js⁄_obje˘_add_vÆue_ty≥
(
js⁄_obje˘
 *
obj
, c⁄° *
«me
, 
ty≥
, ...)

200 
js⁄_vÆue
 *
vÆue
;

201 
js⁄_∑ú
 *
∑ú
;

202 
va_li°
 
¨gs
;

203 
ªt
;

205 
	`va_°¨t
(
¨gs
, 
ty≥
);

206 i‡(
ty≥
 =
JSON_TYPE_STRING
)

207 
vÆue
 = 
	`js⁄_¸óã_vÆue_°rög
(
	`va_¨g
(
¨gs
, *));

208 i‡(
ty≥
 =
JSON_TYPE_INTEGER
)

209 
vÆue
 = 
	`js⁄_¸óã_vÆue_öt
(
	`va_¨g
(
¨gs
, ));

210 i‡(
ty≥
 =
JSON_TYPE_FLOAT
)

211 
vÆue
 = 
	`js⁄_¸óã_vÆue_Êﬂt
(
	`va_¨g
(
¨gs
, ));

212 i‡(
ty≥
 =
JSON_TYPE_OBJECT
)

213 
vÆue
 = 
	`js⁄_¸óã_vÆue_obje˘
(
	`va_¨g
(
¨gs
, 
js⁄_obje˘
 *));

215 
vÆue
 = 
	`js⁄_¸óã_vÆue_¨øy
(
	`va_¨g
(
¨gs
, 
js⁄_¨øy
 *));

216 
	`va_íd
(
¨gs
);

218 i‡(!
vÆue
)

219  
ENOMEM
;

221 
∑ú
 = 
	`js⁄_¸óã_∑ú
(
«me
, 
vÆue
);

222 i‡(!
∑ú
) {

223 
	`js⁄_‰ì_vÆue
(
vÆue
);

224  
ENOMEM
;

226 
ªt
 = 
	`js⁄_obje˘_add_∑ú
(
obj
, 
∑ú
);

227 i‡(
ªt
) {

228 
	`js⁄_‰ì_∑ú
(
∑ú
);

229  
ENOMEM
;

232 
	}
}

234 
js⁄_¥öt_¨øy
(
js⁄_¨øy
 *
¨øy
, 
buf_ouçut
 *);

235 
	$js⁄_¨øy_add_vÆue_ty≥
(
js⁄_¨øy
 *
¨øy
, 
ty≥
, ...)

237 
js⁄_vÆue
 *
vÆue
;

238 
va_li°
 
¨gs
;

239 
ªt
;

241 
	`va_°¨t
(
¨gs
, 
ty≥
);

242 i‡(
ty≥
 =
JSON_TYPE_STRING
)

243 
vÆue
 = 
	`js⁄_¸óã_vÆue_°rög
(
	`va_¨g
(
¨gs
, *));

244 i‡(
ty≥
 =
JSON_TYPE_INTEGER
)

245 
vÆue
 = 
	`js⁄_¸óã_vÆue_öt
(
	`va_¨g
(
¨gs
, ));

246 i‡(
ty≥
 =
JSON_TYPE_FLOAT
)

247 
vÆue
 = 
	`js⁄_¸óã_vÆue_Êﬂt
(
	`va_¨g
(
¨gs
, ));

248 i‡(
ty≥
 =
JSON_TYPE_OBJECT
)

249 
vÆue
 = 
	`js⁄_¸óã_vÆue_obje˘
(
	`va_¨g
(
¨gs
, 
js⁄_obje˘
 *));

251 
vÆue
 = 
	`js⁄_¸óã_vÆue_¨øy
(
	`va_¨g
(
¨gs
, 
js⁄_¨øy
 *));

252 
	`va_íd
(
¨gs
);

254 i‡(!
vÆue
)

255  
ENOMEM
;

257 
ªt
 = 
	`js⁄_¨øy_add_vÆue
(
¨øy
, 
vÆue
);

258 i‡(
ªt
) {

259 
	`js⁄_‰ì_vÆue
(
vÆue
);

260  
ENOMEM
;

263 
	}
}

265 
js⁄_vÆue_Àvñ
(
js⁄_vÆue
 *
vÆue
);

266 
js⁄_∑ú_Àvñ
(
js⁄_∑ú
 *
∑ú
);

267 
js⁄_¨øy_Àvñ
(
js⁄_¨øy
 *
¨øy
);

268 
	$js⁄_obje˘_Àvñ
(
js⁄_obje˘
 *
obje˘
)

270 i‡(
obje˘
->
∑ª¡
 =
NULL
)

272  
	`js⁄_vÆue_Àvñ
(
obje˘
->
∑ª¡
);

273 
	}
}

275 
	$js⁄_∑ú_Àvñ
(
js⁄_∑ú
 *
∑ú
)

277  
	`js⁄_obje˘_Àvñ
(
∑ú
->
∑ª¡
) + 1;

278 
	}
}

280 
	$js⁄_¨øy_Àvñ
(
js⁄_¨øy
 *
¨øy
)

282  
	`js⁄_vÆue_Àvñ
(
¨øy
->
∑ª¡
);

283 
	}
}

285 
	$js⁄_vÆue_Àvñ
(
js⁄_vÆue
 *
vÆue
)

287 i‡(
vÆue
->
∑ª¡_ty≥
 =
JSON_PARENT_TYPE_PAIR
)

288  
	`js⁄_∑ú_Àvñ
(
vÆue
->
∑ª¡_∑ú
);

290  
	`js⁄_¨øy_Àvñ
(
vÆue
->
∑ª¡_¨øy
) + 1;

291 
	}
}

293 
	$js⁄_¥öt_Àvñ
(
Àvñ
, 
buf_ouçut
 *
out
)

295 
Àvñ
-- > 0)

296 
	`log_buf
(
out
, " ");

297 
	}
}

299 
js⁄_¥öt_∑ú
(
js⁄_∑ú
 *
∑ú
, 
buf_ouçut
 *);

300 
js⁄_¥öt_¨øy
(
js⁄_¨øy
 *
¨øy
, 
buf_ouçut
 *);

301 
js⁄_¥öt_vÆue
(
js⁄_vÆue
 *
vÆue
, 
buf_ouçut
 *);

302 
	$js⁄_¥öt_obje˘
(
js⁄_obje˘
 *
obj
, 
buf_ouçut
 *
out
)

304 
i
;

306 
	`log_buf
(
out
, "{\n");

307 
i
 = 0; i < 
obj
->
∑ú_˙t
; i++) {

308 i‡(
i
 > 0)

309 
	`log_buf
(
out
, ",\n");

310 
	`js⁄_¥öt_∑ú
(
obj
->
∑ús
[
i
], 
out
);

312 
	`log_buf
(
out
, "\n");

313 
	`js⁄_¥öt_Àvñ
(
	`js⁄_obje˘_Àvñ
(
obj
), 
out
);

314 
	`log_buf
(
out
, "}");

315 
	}
}

317 
	$js⁄_¥öt_∑ú
(
js⁄_∑ú
 *
∑ú
, 
buf_ouçut
 *
out
)

319 
	`js⁄_¥öt_Àvñ
(
	`js⁄_∑ú_Àvñ
(
∑ú
), 
out
);

320 
	`log_buf
(
out
, "\"%s\" : ", 
∑ú
->
«me
);

321 
	`js⁄_¥öt_vÆue
(
∑ú
->
vÆue
, 
out
);

322 
	}
}

324 
	$js⁄_¥öt_¨øy
(
js⁄_¨øy
 *
¨øy
, 
buf_ouçut
 *
out
)

326 
i
;

328 
	`log_buf
(
out
, "[\n");

329 
i
 = 0; i < 
¨øy
->
vÆue_˙t
; i++) {

330 i‡(
i
 > 0)

331 
	`log_buf
(
out
, ",\n");

332 
	`js⁄_¥öt_Àvñ
(
	`js⁄_vÆue_Àvñ
(
¨øy
->
vÆues
[
i
]), 
out
);

333 
	`js⁄_¥öt_vÆue
(
¨øy
->
vÆues
[
i
], 
out
);

335 
	`log_buf
(
out
, "\n");

336 
	`js⁄_¥öt_Àvñ
(
	`js⁄_¨øy_Àvñ
(
¨øy
), 
out
);

337 
	`log_buf
(
out
, "]");

338 
	}
}

340 
	$js⁄_¥öt_vÆue
(
js⁄_vÆue
 *
vÆue
, 
buf_ouçut
 *
out
)

342 
vÆue
->
ty≥
) {

343 
JSON_TYPE_STRING
:

344 
	`log_buf
(
out
, "\"%s\"", 
vÆue
->
°rög
);

346 
JSON_TYPE_INTEGER
:

347 
	`log_buf
(
out
, "%Œd", 
vÆue
->
öãgî_numbî
);

349 
JSON_TYPE_FLOAT
:

350 
	`log_buf
(
out
, "%f", 
vÆue
->
Êﬂt_numbî
);

352 
JSON_TYPE_OBJECT
:

353 
	`js⁄_¥öt_obje˘
(
vÆue
->
obje˘
, 
out
);

355 
JSON_TYPE_ARRAY
:

356 
	`js⁄_¥öt_¨øy
(
vÆue
->
¨øy
, 
out
);

359 
	}
}

	@/home/ysjin/Desktop/fio/fio/json.h

1 #i‚de‡
__JSON__H


2 
	#__JSON__H


	)

4 
	~"lib/ouçut_buf„r.h
"

6 
	gjs⁄_obje˘
;

7 
	gjs⁄_¨øy
;

8 
	gjs⁄_∑ú
;

10 
	#JSON_TYPE_STRING
 0

	)

11 
	#JSON_TYPE_INTEGER
 1

	)

12 
	#JSON_TYPE_FLOAT
 2

	)

13 
	#JSON_TYPE_OBJECT
 3

	)

14 
	#JSON_TYPE_ARRAY
 4

	)

15 
	#JSON_PARENT_TYPE_PAIR
 0

	)

16 
	#JSON_PARENT_TYPE_ARRAY
 1

	)

17 
	sjs⁄_vÆue
 {

18 
	mty≥
;

20 
	möãgî_numbî
;

21 
	mÊﬂt_numbî
;

22 *
	m°rög
;

23 
js⁄_obje˘
 *
	mobje˘
;

24 
js⁄_¨øy
 *
	m¨øy
;

26 
	m∑ª¡_ty≥
;

28 
js⁄_∑ú
 *
	m∑ª¡_∑ú
;

29 
js⁄_¨øy
 *
	m∑ª¡_¨øy
;

33 
	sjs⁄_¨øy
 {

34 
js⁄_vÆue
 **
	mvÆues
;

35 
	mvÆue_˙t
;

36 
js⁄_vÆue
 *
	m∑ª¡
;

39 
	sjs⁄_obje˘
 {

40 
js⁄_∑ú
 **
	m∑ús
;

41 
	m∑ú_˙t
;

42 
js⁄_vÆue
 *
	m∑ª¡
;

45 
	sjs⁄_∑ú
 {

46 *
	m«me
;

47 
js⁄_vÆue
 *
	mvÆue
;

48 
js⁄_obje˘
 *
	m∑ª¡
;

51 
js⁄_obje˘
 *
js⁄_¸óã_obje˘
();

52 
js⁄_¨øy
 *
js⁄_¸óã_¨øy
();

54 
js⁄_‰ì_obje˘
(
js⁄_obje˘
 *
obj
);

56 
js⁄_obje˘_add_vÆue_ty≥
(
js⁄_obje˘
 *
obj
, c⁄° *
«me
, 
ty≥
, ...);

57 
	#js⁄_obje˘_add_vÆue_öt
(
obj
, 
«me
, 
vÆ
) \

58 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_INTEGER
, (Ë(
vÆ
))

	)

59 
	#js⁄_obje˘_add_vÆue_Êﬂt
(
obj
, 
«me
, 
vÆ
) \

60 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_FLOAT
, (
vÆ
))

	)

61 
	#js⁄_obje˘_add_vÆue_°rög
(
obj
, 
«me
, 
vÆ
) \

62 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_STRING
, (
vÆ
))

	)

63 
	#js⁄_obje˘_add_vÆue_obje˘
(
obj
, 
«me
, 
vÆ
) \

64 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_OBJECT
, (
vÆ
))

	)

65 
	#js⁄_obje˘_add_vÆue_¨øy
(
obj
, 
«me
, 
vÆ
) \

66 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_ARRAY
, (
vÆ
))

	)

67 
js⁄_¨øy_add_vÆue_ty≥
(
js⁄_¨øy
 *
¨øy
, 
ty≥
, ...);

68 
	#js⁄_¨øy_add_vÆue_öt
(
obj
, 
vÆ
) \

69 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_INTEGER
, (
vÆ
))

	)

70 
	#js⁄_¨øy_add_vÆue_Êﬂt
(
obj
, 
vÆ
) \

71 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_FLOAT
, (
vÆ
))

	)

72 
	#js⁄_¨øy_add_vÆue_°rög
(
obj
, 
vÆ
) \

73 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_STRING
, (
vÆ
))

	)

74 
	#js⁄_¨øy_add_vÆue_obje˘
(
obj
, 
vÆ
) \

75 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_OBJECT
, (
vÆ
))

	)

76 
	#js⁄_¨øy_add_vÆue_¨øy
(
obj
, 
vÆ
) \

77 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_ARRAY
, (
vÆ
))

	)

79 
	#js⁄_¨øy_œ°_vÆue_obje˘
(
obj
) \

80 (
obj
->
vÆues
[obj->
vÆue_˙t
 - 1]->
obje˘
)

	)

82 
js⁄_¥öt_obje˘
(
js⁄_obje˘
 *
obj
, 
buf_ouçut
 *
out
);

	@/home/ysjin/Desktop/fio/fio/lib/axmap.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<as£π.h
>

23 
	~"../¨ch/¨ch.h
"

24 
	~"axm≠.h
"

25 
	~"../mömax.h
"

27 #i‡
BITS_PER_LONG
 == 64

28 
	#UNIT_SHIFT
 6

	)

29 #ñi‡
BITS_PER_LONG
 == 32

30 
	#UNIT_SHIFT
 5

	)

35 
	#BLOCKS_PER_UNIT
 (1U << 
UNIT_SHIFT
)

	)

36 
	#BLOCKS_PER_UNIT_MASK
 (
BLOCKS_PER_UNIT
 - 1)

	)

38 
	#fú°‰ì_vÆid
(
b
Ë((b)->
fú°_‰ì
 !(
uöt64_t
Ë-1)

	)

40 
	saxm≠_Àvñ
 {

41 
	mÀvñ
;

42 
	mm≠_size
;

43 *
	mm≠
;

46 
	saxm≠
 {

47 
	mƒ_Àvñs
;

48 
axm≠_Àvñ
 *
	mÀvñs
;

49 
uöt64_t
 
	mfú°_‰ì
;

50 
uöt64_t
 
	mƒ_bôs
;

53 
	$ulog64
(
vÆ
, 
log
)

55 
log
-- && 
vÆ
)

56 
vÆ
 >>
UNIT_SHIFT
;

58  
vÆ
;

59 
	}
}

61 
	$axm≠_ª£t
(
axm≠
 *axmap)

63 
i
;

65 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++) {

66 
axm≠_Àvñ
 *
Æ
 = &
axm≠
->
Àvñs
[
i
];

68 
	`mem£t
(
Æ
->
m≠
, 0,ál->
m≠_size
 * ());

71 
axm≠
->
fú°_‰ì
 = 0;

72 
	}
}

74 
	$axm≠_‰ì
(
axm≠
 *axmap)

76 
i
;

78 i‡(!
axm≠
)

81 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++)

82 
	`‰ì
(
axm≠
->
Àvñs
[
i
].
m≠
);

84 
	`‰ì
(
axm≠
->
Àvñs
);

85 
	`‰ì
(
axm≠
);

86 
	}
}

88 
axm≠
 *
	$axm≠_√w
(
ƒ_bôs
)

90 
axm≠
 *axmap;

91 
i
, 
Àvñs
;

93 
axm≠
 = 
	`mÆloc
((*axmap));

94 i‡(!
axm≠
)

95  
NULL
;

97 
Àvñs
 = 1;

98 
i
 = (
ƒ_bôs
 + 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

99 
i
 > 1) {

100 
i
 = (ò+ 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

101 
Àvñs
++;

104 
axm≠
->
ƒ_Àvñs
 = 
Àvñs
;

105 
axm≠
->
Àvñs
 = 
	`mÆloc
◊xm≠->
ƒ_Àvñs
 * (
axm≠_Àvñ
));

106 
axm≠
->
ƒ_bôs
 =Çr_bits;

108 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++) {

109 
axm≠_Àvñ
 *
Æ
 = &
axm≠
->
Àvñs
[
i
];

111 
Æ
->
Àvñ
 = 
i
;

112 
Æ
->
m≠_size
 = (
ƒ_bôs
 + 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

113 
Æ
->
m≠
 = 
	`mÆloc
◊l->
m≠_size
 * ());

114 i‡(!
Æ
->
m≠
)

115 
îr
;

117 
ƒ_bôs
 = (ƒ_bô†+ 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

120 
	`axm≠_ª£t
(
axm≠
);

121  
axm≠
;

122 
îr
:

123 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++)

124 i‡(
axm≠
->
Àvñs
[
i
].
m≠
)

125 
	`‰ì
(
axm≠
->
Àvñs
[
i
].
m≠
);

127 
	`‰ì
(
axm≠
->
Àvñs
);

128 
	`‰ì
(
axm≠
);

129  
NULL
;

130 
	}
}

132 
boﬁ
 
	$axm≠_h™dÀr
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

133 
	$boﬁ
 (*
func
)(
axm≠_Àvñ
 *, , ,

134 *), *
d©a
)

136 
axm≠_Àvñ
 *
Æ
;

137 
i
;

139 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++) {

140 
ödex
 = 
	`ulog64
(
bô_ƒ
, 
i
);

141 
off£t
 = 
ödex
 >> 
UNIT_SHIFT
;

142 
bô
 = 
ödex
 & 
BLOCKS_PER_UNIT_MASK
;

144 
Æ
 = &
axm≠
->
Àvñs
[
i
];

146 i‡(
	`func
(
Æ
, 
off£t
, 
bô
, 
d©a
))

147  
åue
;

150  
Ál£
;

151 
	}
}

153 
boﬁ
 
	$axm≠_h™dÀr_t›down
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

154 
	$boﬁ
 (*
func
)(
axm≠_Àvñ
 *, , , *),

155 *
d©a
)

157 
axm≠_Àvñ
 *
Æ
;

158 
i
, 
Àvñ
 = 
axm≠
->
ƒ_Àvñs
;

160 
i
 = 
axm≠
->
ƒ_Àvñs
 - 1; i >= 0; i--) {

161 
ödex
 = 
	`ulog64
(
bô_ƒ
, --
Àvñ
);

162 
off£t
 = 
ödex
 >> 
UNIT_SHIFT
;

163 
bô
 = 
ödex
 & 
BLOCKS_PER_UNIT_MASK
;

165 
Æ
 = &
axm≠
->
Àvñs
[
i
];

167 i‡(
	`func
(
Æ
, 
off£t
, 
bô
, 
d©a
))

168  
åue
;

171  
Ál£
;

172 
	}
}

174 
boﬁ
 
	$axm≠_˛ór_‚
(
axm≠_Àvñ
 *
Æ
, 
off£t
,

175 
bô
, *
unu£d
)

177 i‡(!(
Æ
->
m≠
[
off£t
] & (1UL << 
bô
)))

178  
åue
;

180 
Æ
->
m≠
[
off£t
] &~(1UL << 
bô
);

181  
Ál£
;

182 
	}
}

184 
	$axm≠_˛ór
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

186 
	`axm≠_h™dÀr
(
axm≠
, 
bô_ƒ
, 
axm≠_˛ór_‚
, 
NULL
);

188 i‡(
bô_ƒ
 < 
axm≠
->
fú°_‰ì
)

189 
axm≠
->
fú°_‰ì
 = 
bô_ƒ
;

190 
	}
}

192 
	saxm≠_£t_d©a
 {

193 
	mƒ_bôs
;

194 
	m£t_bôs
;

197 c⁄° 
	gbô_masks
[] = {

207 #i‡
BITS_PER_LONG
 == 64

219 
boﬁ
 
	$axm≠_£t_‚
(
axm≠_Àvñ
 *
Æ
, 
off£t
,

220 
bô
, *
__d©a
)

222 
axm≠_£t_d©a
 *
d©a
 = 
__d©a
;

223 
mask
, 
ovîœp
;

224 
ƒ_bôs
;

226 
ƒ_bôs
 = 
	`mö
(
d©a
->ƒ_bôs, 
BLOCKS_PER_UNIT
 - 
bô
);

228 
mask
 = 
bô_masks
[
ƒ_bôs
] << 
bô
;

233 
ovîœp
 = 
Æ
->
m≠
[
off£t
] & 
mask
;

234 i‡(
ovîœp
 =
mask
)

235  
åue
;

237 
ovîœp
) {

238 
˛ór_mask
 = ~(1UL << 
	`ffz
(~
ovîœp
));

240 
mask
 &
˛ór_mask
;

241 
ovîœp
 &
˛ór_mask
;

242 
ƒ_bôs
--;

245 
	`as£π
(
mask
);

246 
	`as£π
(!(
Æ
->
m≠
[
off£t
] & 
mask
));

248 
Æ
->
m≠
[
off£t
] |
mask
;

250 i‡(!
Æ
->
Àvñ
)

251 
d©a
->
£t_bôs
 = 
ƒ_bôs
;

253 
d©a
->
ƒ_bôs
 = 1;

254  
Æ
->
m≠
[
off£t
] != -1UL;

255 
	}
}

257 
	$__axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

258 
axm≠_£t_d©a
 *
d©a
)

260 
£t_bôs
, 
ƒ_bôs
 = 
d©a
->nr_bits;

262 i‡(
axm≠
->
fú°_‰ì
 >
bô_ƒ
 &&

263 
axm≠
->
fú°_‰ì
 < 
bô_ƒ
 + 
d©a
->
ƒ_bôs
)

264 
axm≠
->
fú°_‰ì
 = -1ULL;

266 i‡(
bô_ƒ
 > 
axm≠
->
ƒ_bôs
)

268 i‡(
bô_ƒ
 + 
ƒ_bôs
 > 
axm≠
->nr_bits)

269 
ƒ_bôs
 = 
axm≠
->ƒ_bô†- 
bô_ƒ
;

271 
£t_bôs
 = 0;

272 
ƒ_bôs
) {

273 
	`axm≠_h™dÀr
(
axm≠
, 
bô_ƒ
, 
axm≠_£t_‚
, 
d©a
);

274 
£t_bôs
 +
d©a
->set_bits;

276 i‡(!
d©a
->
£t_bôs
 ||

277 
d©a
->
£t_bôs
 !(
BLOCKS_PER_UNIT
 - 
ƒ_bôs
))

280 
ƒ_bôs
 -
d©a
->
£t_bôs
;

281 
bô_ƒ
 +
d©a
->
£t_bôs
;

283 
d©a
->
ƒ_bôs
 =Çr_bits;

286 
d©a
->
£t_bôs
 = set_bits;

287 
	}
}

289 
	$axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

291 
axm≠_£t_d©a
 
d©a
 = { .
ƒ_bôs
 = 1, };

293 
	`__axm≠_£t
(
axm≠
, 
bô_ƒ
, &
d©a
);

294 
	}
}

296 
	$axm≠_£t_ƒ
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

297 
ƒ_bôs
)

299 
£t_bôs
 = 0;

302 
axm≠_£t_d©a
 
d©a
 = { .
ƒ_bôs
 =Çr_bits, };

303 
max_bôs
, 
this_£t
;

305 
max_bôs
 = 
BLOCKS_PER_UNIT
 - (
bô_ƒ
 & 
BLOCKS_PER_UNIT_MASK
);

306 i‡(
max_bôs
 < 
ƒ_bôs
)

307 
d©a
.
ƒ_bôs
 = 
max_bôs
;

309 
this_£t
 = 
d©a
.
ƒ_bôs
;

310 
	`__axm≠_£t
(
axm≠
, 
bô_ƒ
, &
d©a
);

311 
£t_bôs
 +
d©a
.set_bits;

312 i‡(
d©a
.
£t_bôs
 !
this_£t
)

315 
ƒ_bôs
 -
d©a
.
£t_bôs
;

316 
bô_ƒ
 +
d©a
.
£t_bôs
;

317 } 
ƒ_bôs
);

319  
£t_bôs
;

320 
	}
}

322 
boﬁ
 
	$axm≠_is£t_‚
(
axm≠_Àvñ
 *
Æ
, 
off£t
,

323 
bô
, *
unu£d
)

325  (
Æ
->
m≠
[
off£t
] & (1UL << 
bô
)) != 0;

326 
	}
}

328 
boﬁ
 
	$axm≠_is£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

330 i‡(
bô_ƒ
 <
axm≠
->
ƒ_bôs
)

331  
	`axm≠_h™dÀr_t›down
(
axm≠
, 
bô_ƒ
, 
axm≠_is£t_‚
, 
NULL
);

333  
Ál£
;

334 
	}
}

336 
uöt64_t
 
	$axm≠_föd_fú°_‰ì
(
axm≠
 *axm≠, 
Àvñ
,

337 
uöt64_t
 
ödex
)

339 
uöt64_t
 
ªt
 = -1ULL;

340 
j
;

341 
i
;

346 
i
 = 
Àvñ
; i >= 0; i--) {

347 
axm≠_Àvñ
 *
Æ
 = &
axm≠
->
Àvñs
[
i
];

352 i‡(
ödex
 >
Æ
->
m≠_size
) {

353 
ªt
 = -1ULL;

357 
j
 = 
ödex
; j < 
Æ
->
m≠_size
; j++) {

358 i‡(
Æ
->
m≠
[
j
] == -1UL)

365 
ªt
 = 
ödex
 = (
j
 << 
UNIT_SHIFT
Ë+ 
	`ffz
(
Æ
->
m≠
[j]);

370 i‡(
ªt
 < 
axm≠
->
ƒ_bôs
)

371  
ªt
;

373  (
uöt64_t
) -1ULL;

374 
	}
}

376 
uöt64_t
 
	$axm≠_fú°_‰ì
(
axm≠
 *axmap)

378 i‡(!
	`fú°‰ì_vÆid
(
axm≠
))

379 
axm≠
->
fú°_‰ì
 = 
	`axm≠_föd_fú°_‰ì
◊xm≠,áxm≠->
ƒ_Àvñs
 - 1, 0);

381  
axm≠
->
fú°_‰ì
;

382 
	}
}

384 
	saxm≠_√xt_‰ì_d©a
 {

385 
	mÀvñ
;

386 
	moff£t
;

387 
uöt64_t
 
	mbô
;

390 
boﬁ
 
	$axm≠_√xt_‰ì_‚
(
axm≠_Àvñ
 *
Æ
, 
off£t
,

391 
bô
, *
__d©a
)

393 
axm≠_√xt_‰ì_d©a
 *
d©a
 = 
__d©a
;

394 
uöt64_t
 
mask
 = ~
bô_masks
[(
d©a
->
bô
 + 1Ë& 
BLOCKS_PER_UNIT_MASK
];

396 i‡(!(
mask
 & ~
Æ
->
m≠
[
off£t
]))

397  
Ál£
;

399 i‡(
Æ
->
m≠
[
off£t
] != -1UL) {

400 
d©a
->
Àvñ
 = 
Æ
->level;

401 
d©a
->
off£t
 = offset;

402  
åue
;

405 
d©a
->
bô
 = (d©a->bô + 
BLOCKS_PER_UNIT
 - 1) / BLOCKS_PER_UNIT;

406  
Ál£
;

407 
	}
}

412 
uöt64_t
 
	$axm≠_√xt_‰ì
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

414 
axm≠_√xt_‰ì_d©a
 
d©a
 = { .
Àvñ
 = -1U, .
bô
 = 
bô_ƒ
, };

415 
uöt64_t
 
ªt
;

417 i‡(
	`fú°‰ì_vÆid
(
axm≠
Ë&& 
bô_ƒ
 <áxm≠->
fú°_‰ì
)

418  
axm≠
->
fú°_‰ì
;

420 i‡(!
	`axm≠_h™dÀr
(
axm≠
, 
bô_ƒ
, 
axm≠_√xt_‰ì_‚
, &
d©a
))

421  
	`axm≠_fú°_‰ì
(
axm≠
);

423 
	`as£π
(
d©a
.
Àvñ
 != -1U);

430 
ªt
 = 
	`axm≠_föd_fú°_‰ì
(
axm≠
, 
d©a
.
Àvñ
, d©a.
off£t
);

431 i‡(
ªt
 != -1ULL)

432  
ªt
;

434  
	`axm≠_fú°_‰ì
(
axm≠
);

435 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/axmap.h

1 #i‚de‡
FIO_BITMAP_H


2 
	#FIO_BITMAP_H


	)

4 
	~<öây≥s.h
>

5 
	~"ty≥s.h
"

7 
	gaxm≠
;

8 
axm≠
 *
axm≠_√w
(
ƒ_bôs
);

9 
axm≠_‰ì
(
axm≠
 *
bm
);

11 
axm≠_˛ór
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

12 
axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

13 
axm≠_£t_ƒ
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
, 
ƒ_bôs
);

14 
boﬁ
 
axm≠_is£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

15 
uöt64_t
 
axm≠_√xt_‰ì
(
axm≠
 *axm≠, uöt64_à
bô_ƒ
);

16 
axm≠_ª£t
(
axm≠
 *axmap);

	@/home/ysjin/Desktop/fio/fio/lib/bloom.c

1 
	~<°dlib.h
>

2 
	~<öây≥s.h
>

4 
	~"bloom.h
"

5 
	~"../hash.h
"

6 
	~"../mömax.h
"

7 
	~"../¸c/xxhash.h
"

8 
	~"../¸c/murmur3.h
"

9 
	~"../¸c/¸c32c.h
"

10 
	~"../¸c/‚v.h
"

12 
	sbloom
 {

13 
uöt64_t
 
	m√¡rõs
;

15 
uöt32_t
 *
	mm≠
;

18 
	#BITS_PER_INDEX
 ((
uöt32_t
Ë* 8)

	)

19 
	#BITS_INDEX_MASK
 (
BITS_PER_INDEX
 - 1)

	)

21 
	sbloom_hash
 {

22 
	m£ed
;

23 
uöt32_t
 (*
‚
)(c⁄° *, 
	muöt32_t
, uint32_t);

26 
uöt32_t
 
	$bloom_¸c32c
(c⁄° *
buf
, 
uöt32_t
 
Àn
, uöt32_à
£ed
)

28  
	`fio_¸c32c
(
buf
, 
Àn
);

29 
	}
}

31 
uöt32_t
 
	$bloom_‚v
(c⁄° *
buf
, 
uöt32_t
 
Àn
, uöt32_à
£ed
)

33  
	`‚v
(
buf
, 
Àn
, 
£ed
);

34 
	}
}

36 
	#BLOOM_SEED
 0x8989

	)

38 
bloom_hash
 
	ghashes
[] = {

40 .
£ed
 = 
BLOOM_SEED
,

41 .
	g‚
 = 
jhash
,

44 .
	g£ed
 = 
BLOOM_SEED
,

45 .
	g‚
 = 
XXH32
,

48 .
	g£ed
 = 
BLOOM_SEED
,

49 .
	g‚
 = 
murmurhash3
,

52 .
	g£ed
 = 
BLOOM_SEED
,

53 .
	g‚
 = 
bloom_¸c32c
,

56 .
	g£ed
 = 
BLOOM_SEED
,

57 .
	g‚
 = 
bloom_‚v
,

61 
	#N_HASHES
 5

	)

63 
bloom
 *
	$bloom_√w
(
uöt64_t
 
íåõs
)

65 
bloom
 *
b
;

66 
size_t
 
no_uöts
;

68 
	`¸c32c_¨m64_¥obe
();

69 
	`¸c32c_öãl_¥obe
();

71 
b
 = 
	`mÆloc
((*b));

72 
b
->
√¡rõs
 = 
íåõs
;

73 
no_uöts
 = (
íåõs
 + 
BITS_PER_INDEX
 - 1) / BITS_PER_INDEX;

74 
b
->
m≠
 = 
	`ˇŒoc
(
no_uöts
, (
uöt32_t
));

75 i‡(!
b
->
m≠
) {

76 
	`‰ì
(
b
);

77  
NULL
;

80  
b
;

81 
	}
}

83 
	$bloom_‰ì
(
bloom
 *
b
)

85 
	`‰ì
(
b
->
m≠
);

86 
	`‰ì
(
b
);

87 
	}
}

89 
boﬁ
 
	$__bloom_check
(
bloom
 *
b
, c⁄° *
d©a
, 
Àn
,

90 
boﬁ
 
£t
)

92 
uöt32_t
 
hash
[
N_HASHES
];

93 
i
, 
was_£t
;

95 
i
 = 0; i < 
N_HASHES
; i++) {

96 
hash
[
i
] = 
hashes
[i].
	`‚
(
d©a
, 
Àn
, hashes[i].
£ed
);

97 
hash
[
i
] = hash[i] % 
b
->
√¡rõs
;

100 
was_£t
 = 0;

101 
i
 = 0; i < 
N_HASHES
; i++) {

102 c⁄° 
ödex
 = 
hash
[
i
] / 
BITS_PER_INDEX
;

103 c⁄° 
bô
 = 
hash
[
i
] & 
BITS_INDEX_MASK
;

105 i‡(
b
->
m≠
[
ödex
] & (1U << 
bô
))

106 
was_£t
++;

107 i‡(
£t
)

108 
b
->
m≠
[
ödex
] |1U << 
bô
;

113  
was_£t
 =
N_HASHES
;

114 
	}
}

116 
boﬁ
 
	$bloom_£t
(
bloom
 *
b
, 
uöt32_t
 *
d©a
, 
nw‹ds
)

118  
	`__bloom_check
(
b
, 
d©a
, 
nw‹ds
 * (
uöt32_t
), 
åue
);

119 
	}
}

121 
boﬁ
 
	$bloom_°rög
(
bloom
 *
b
, c⁄° *
d©a
, 
Àn
,

122 
boﬁ
 
£t
)

124  
	`__bloom_check
(
b
, 
d©a
, 
Àn
, 
£t
);

125 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/bloom.h

1 #i‚de‡
FIO_BLOOM_H


2 
	#FIO_BLOOM_H


	)

4 
	~<öây≥s.h
>

5 
	~"../lib/ty≥s.h
"

7 
	gbloom
;

9 
bloom
 *
bloom_√w
(
uöt64_t
 
íåõs
);

10 
bloom_‰ì
(
bloom
 *
b
);

11 
boﬁ
 
bloom_£t
(
bloom
 *
b
, 
uöt32_t
 *
d©a
, 
nw‹ds
);

12 
boﬁ
 
bloom_°rög
(
bloom
 *
b
, c⁄° *
d©a
, 
Àn
, bool);

	@/home/ysjin/Desktop/fio/fio/lib/bswap.h

1 #i‚de‡
FIO_BSWAP_H


2 
	#FIO_BSWAP_H


	)

4 
	~<öây≥s.h
>

6 #ifde‡
CONFIG_LITTLE_ENDIAN


7 
ölöe
 
uöt32_t
 
	$__be32_to_˝u
(
uöt32_t
 
vÆ
)

9 
uöt32_t
 
c1
, 
c2
, 
c3
, 
c4
;

11 
c1
 = (
vÆ
 >> 24) & 0xff;

12 
c2
 = (
vÆ
 >> 16) & 0xff;

13 
c3
 = (
vÆ
 >> 8) & 0xff;

14 
c4
 = 
vÆ
 & 0xff;

16  
c1
 | 
c2
 << 8 | 
c3
 << 16 | 
c4
 << 24;

17 
	}
}

19 
ölöe
 
uöt64_t
 
	$__be64_to_˝u
(
uöt64_t
 
vÆ
)

21 
uöt64_t
 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
;

23 
c1
 = (
vÆ
 >> 56) & 0xff;

24 
c2
 = (
vÆ
 >> 48) & 0xff;

25 
c3
 = (
vÆ
 >> 40) & 0xff;

26 
c4
 = (
vÆ
 >> 32) & 0xff;

27 
c5
 = (
vÆ
 >> 24) & 0xff;

28 
c6
 = (
vÆ
 >> 16) & 0xff;

29 
c7
 = (
vÆ
 >> 8) & 0xff;

30 
c8
 = 
vÆ
 & 0xff;

32  
c1
 | 
c2
 << 8 | 
c3
 << 16 | 
c4
 << 24 | 
c5
 << 32 | 
c6
 << 40 | 
c7
 << 48 | 
c8
 << 56;

33 
	}
}

35 
ölöe
 
uöt64_t
 
	$__be64_to_˝u
(
uöt64_t
 
vÆ
)

37  
vÆ
;

38 
	}
}

40 
ölöe
 
uöt32_t
 
	$__be32_to_˝u
(
uöt32_t
 
vÆ
)

42  
vÆ
;

43 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/ffz.h

1 #i‚de‡
FIO_FFZ_H


2 
	#FIO_FFZ_H


	)

4 
	~<öây≥s.h
>

6 
ölöe
 
	$ffs64
(
uöt64_t
 
w‹d
)

8 
r
 = 0;

10 i‡((
w‹d
 & 0xffffffff) == 0) {

11 
r
 += 32;

12 
w‹d
 >>= 32;

14 i‡(!(
w‹d
 & 0xffff)) {

15 
w‹d
 >>= 16;

16 
r
 += 16;

18 i‡(!(
w‹d
 & 0xff)) {

19 
w‹d
 >>= 8;

20 
r
 += 8;

22 i‡(!(
w‹d
 & 0xf)) {

23 
w‹d
 >>= 4;

24 
r
 += 4;

26 i‡(!(
w‹d
 & 3)) {

27 
w‹d
 >>= 2;

28 
r
 += 2;

30 i‡(!(
w‹d
 & 1))

31 
r
 += 1;

33  
r
;

34 
	}
}

36 #i‚de‡
ARCH_HAVE_FFZ


38 
ölöe
 
	$ffz
(
bômask
)

40  
	`ffs64
(~
bômask
);

41 
	}
}

44 
	#ffz
(
bômask
Ë
	`¨ch_ffz
(bômask)

	)

47 
ölöe
 
	$ffz64
(
uöt64_t
 
bômask
)

49  
	`ffs64
(~
bômask
);

50 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/flist_sort.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"../Êi°.h
"

4 
	~"../log.h
"

6 
	#MAX_LIST_LENGTH_BITS
 20

	)

13 
Êi°_hód
 *
	$mîge
(*
¥iv
,

14 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
,

15 
Êi°_hód
 *
b
),

16 
Êi°_hód
 *
a
, Êi°_hód *
b
)

18 
Êi°_hód
 
hód
, *
èû
 = &head;

20 
a
 && 
b
) {

22 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

23 
èû
->
√xt
 = 
a
;

24 
a
 =á->
√xt
;

26 
èû
->
√xt
 = 
b
;

27 
b
 = b->
√xt
;

29 
èû
 =Åaû->
√xt
;

31 
èû
->
√xt
 = 
a
?:
b
;

32  
hód
.
√xt
;

33 
	}
}

42 
	$mîge_™d_ª°‹e_back_löks
(*
¥iv
,

43 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
,

44 
Êi°_hód
 *
b
),

45 
Êi°_hód
 *
hód
,

46 
Êi°_hód
 *
a
, Êi°_hód *
b
)

48 
Êi°_hód
 *
èû
 = 
hód
;

50 
a
 && 
b
) {

52 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

53 
èû
->
√xt
 = 
a
;

54 
a
->
¥ev
 = 
èû
;

55 
a
 =á->
√xt
;

57 
èû
->
√xt
 = 
b
;

58 
b
->
¥ev
 = 
èû
;

59 
b
 = b->
√xt
;

61 
èû
 =Åaû->
√xt
;

63 
èû
->
√xt
 = 
a
 ? : 
b
;

72 (*
cmp
)(
¥iv
, 
èû
->
√xt
,Åail->next);

74 
èû
->
√xt
->
¥ev
 =Åail;

75 
èû
 =Åaû->
√xt
;

76 } 
èû
->
√xt
);

78 
èû
->
√xt
 = 
hód
;

79 
hód
->
¥ev
 = 
èû
;

80 
	}
}

96 
	$Êi°_s‹t
(*
¥iv
, 
Êi°_hód
 *
hód
,

97 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
,

98 
Êi°_hód
 *
b
))

100 
Êi°_hód
 *
∑π
[
MAX_LIST_LENGTH_BITS
+1];

102 
Àv
;

103 
max_Àv
 = 0;

104 
Êi°_hód
 *
li°
;

106 i‡(
	`Êi°_em±y
(
hód
))

109 
	`mem£t
(
∑π
, 0, (part));

111 
hód
->
¥ev
->
√xt
 = 
NULL
;

112 
li°
 = 
hód
->
√xt
;

114 
li°
) {

115 
Êi°_hód
 *
cur
 = 
li°
;

116 
li°
 =Üi°->
√xt
;

117 
cur
->
√xt
 = 
NULL
;

119 
Àv
 = 0; 
∑π
[lev];Üev++) {

120 
cur
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
], cur);

121 
∑π
[
Àv
] = 
NULL
;

123 i‡(
Àv
 > 
max_Àv
) {

124 i‡(
Àv
 >
MAX_LIST_LENGTH_BITS
) {

125 
	`log_îr
("fio:ÜistÖassedÅo"

128 
Àv
--;

130 
max_Àv
 = 
Àv
;

132 
∑π
[
Àv
] = 
cur
;

135 
Àv
 = 0;Üev < 
max_Àv
;Üev++)

136 i‡(
∑π
[
Àv
])

137 
li°
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
],Üist);

139 
	`mîge_™d_ª°‹e_back_löks
(
¥iv
, 
cmp
, 
hód
, 
∑π
[
max_Àv
], 
li°
);

140 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/fls.h

1 #i‚de‡
_ASM_GENERIC_BITOPS_FLS_H_


2 
	#_ASM_GENERIC_BITOPS_FLS_H_


	)

12 
ölöe
 
	$__Ês
(
x
)

14 
r
 = 32;

16 i‡(!
x
)

18 i‡(!(
x
 & 0xffff0000u)) {

19 
x
 <<= 16;

20 
r
 -= 16;

22 i‡(!(
x
 & 0xff000000u)) {

23 
x
 <<= 8;

24 
r
 -= 8;

26 i‡(!(
x
 & 0xf0000000u)) {

27 
x
 <<= 4;

28 
r
 -= 4;

30 i‡(!(
x
 & 0xc0000000u)) {

31 
x
 <<= 2;

32 
r
 -= 2;

34 i‡(!(
x
 & 0x80000000u)) {

35 
x
 <<= 1;

36 
r
 -= 1;

38  
r
;

39 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/gauss.c

1 
	~<m©h.h
>

2 
	~<°rög.h
>

3 
	~<°dio.h
>

4 
	~"../hash.h
"

5 
	~"gauss.h
"

7 
	#GAUSS_ITERS
 12

	)

9 
	$gauss_dev
(
gauss_°©e
 *
gs
)

11 
r
;

12 
vr
;

14 i‡(!
gs
->
°ddev
)

17 
r
 = 
	`__ønd
(&
gs
->r);

18 
vr
 = 
gs
->
°ddev
 * (
r
 / (
FRAND32_MAX
 + 1.0));

20  
vr
 - 
gs
->
°ddev
 / 2;

21 
	}
}

23 
	$gauss_√xt
(
gauss_°©e
 *
gs
)

25 
sum
 = 0;

26 
i
;

28 
i
 = 0; i < 
GAUSS_ITERS
; i++)

29 
sum
 +
	`__ønd
(&
gs
->
r
Ë% (gs->
ƒ™ges
 + 1);

31 
sum
 = (sum + 
GAUSS_ITERS
 - 1) / GAUSS_ITERS;

33 i‡(
gs
->
°ddev
) {

34 
dev
 = 
	`gauss_dev
(
gs
);

36 
dev
 + 
sum
 >
gs
->
ƒ™ges
)

37 
dev
 /= 2;

38 
sum
 +
dev
;

41 i‡(!
gs
->
dißbÀ_hash
)

42 
sum
 = 
	`__hash_u64
(sum);

44  
sum
 % 
gs
->
ƒ™ges
;

45 
	}
}

47 
	$gauss_öô
(
gauss_°©e
 *
gs
, 
ƒ™ges
, 
dev
,

48 
£ed
)

50 
	`mem£t
(
gs
, 0, (*gs));

51 
	`öô_ønd_£ed
(&
gs
->
r
, 
£ed
, 0);

52 
gs
->
ƒ™ges
 =Çranges;

54 i‡(
dev
 != 0.0) {

55 
gs
->
°ddev
 = 
	`˚û
((Ë(
ƒ™ges
 * 100.0Ë/ 
dev
);

56 i‡(
gs
->
°ddev
 > 
ƒ™ges
 / 2)

57 
gs
->
°ddev
 = 
ƒ™ges
 / 2;

59 
	}
}

61 
	$gauss_dißbÀ_hash
(
gauss_°©e
 *
gs
)

63 
gs
->
dißbÀ_hash
 = 
åue
;

64 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/gauss.h

1 #i‚de‡
FIO_GAUSS_H


2 
	#FIO_GAUSS_H


	)

4 
	~<öây≥s.h
>

5 
	~"ønd.h
"

7 
	sgauss_°©e
 {

8 
‰™d_°©e
 
	mr
;

9 
uöt64_t
 
	mƒ™ges
;

10 
	m°ddev
;

11 
boﬁ
 
	mdißbÀ_hash
;

14 
gauss_öô
(
gauss_°©e
 *
gs
, 
ƒ™ges
, 
dev
,

15 
£ed
);

16 
gauss_√xt
(
gauss_°©e
 *
gs
);

17 
gauss_dißbÀ_hash
(
gauss_°©e
 *
gs
);

	@/home/ysjin/Desktop/fio/fio/lib/getrusage.c

1 
	~<î∫o.h
>

2 
	~"gërußge.h
"

4 
	$fio_gërußge
(
rußge
 *
ru
)

6 #ifde‡
CONFIG_RUSAGE_THREAD


7 i‡(!
	`gërußge
(
RUSAGE_THREAD
, 
ru
))

9 i‡(
î∫o
 !
EINVAL
)

13  
	`gërußge
(
RUSAGE_SELF
, 
ru
);

14 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/getrusage.h

1 #i‚de‡
FIO_GETRUSAGE_H


2 
	#FIO_GETRUSAGE_H


	)

4 
	~<sys/time.h
>

5 
	~<sys/ªsour˚.h
>

7 
fio_gërußge
(
rußge
 *
ru
);

	@/home/ysjin/Desktop/fio/fio/lib/hweight.c

1 
	~"hweight.h
"

3 
	$hweight8
(
uöt8_t
 
w
)

5 
ªs
 = 
w
 - ((w >> 1) & 0x55);

7 
ªs
 = (res & 0x33) + ((res >> 2) & 0x33);

8  (
ªs
 + (res >> 4)) & 0x0F;

9 
	}
}

11 
	$hweight32
(
uöt32_t
 
w
)

13 
ªs
 = 
w
 - ((w >> 1) & 0x55555555);

15 
ªs
 = (res & 0x33333333) + ((res >> 2) & 0x33333333);

16 
ªs
 = (res + (res >> 4)) & 0x0F0F0F0F;

17 
ªs
 =Ñes + (res >> 8);

18  (
ªs
 + (res >> 16)) & 0x000000FF;

19 
	}
}

21 
	$hweight64
(
uöt64_t
 
w
)

23 #i‡
BITS_PER_LONG
 == 32

24  
	`hweight32
(()(
w
 >> 32)) + hweight32(()w);

26 
uöt64_t
 
ªs
 = 
w
 - ((w >> 1) & 0x5555555555555555ULL);

27 
ªs
 = (res & 0x3333333333333333ULL) + ((res >> 2) & 0x3333333333333333ULL);

28 
ªs
 = (res + (res >> 4)) & 0x0F0F0F0F0F0F0F0FULL;

29 
ªs
 =Ñes + (res >> 8);

30 
ªs
 =Ñes + (res >> 16);

31  (
ªs
 + (res >> 32)) & 0x00000000000000FFULL;

33 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/hweight.h

1 #i‚de‡
FIO_HWEIGHT_H


2 
	#FIO_HWEIGHT_H


	)

4 
	~<öây≥s.h
>

6 
hweight8
(
uöt8_t
 
w
);

7 
hweight32
(
uöt32_t
 
w
);

8 
hweight64
(
uöt64_t
 
w
);

	@/home/ysjin/Desktop/fio/fio/lib/ieee754.c

8 
	~<öây≥s.h
>

9 
	~"õì754.h
"

11 
uöt64_t
 
	$∑ck754
(
f
, 
bôs
, 
expbôs
)

13 
‚‹m
;

14 
shi·
;

15 
sign
, 
exp
, 
signifiˇnd
;

16 
signifiˇndbôs
 = 
bôs
 - 
expbôs
 - 1;

19 i‡(
f
 == 0.0)

23 i‡(
f
 < 0) {

24 
sign
 = 1;

25 
‚‹m
 = -
f
;

27 
sign
 = 0;

28 
‚‹m
 = 
f
;

32 
shi·
 = 0;

33 
‚‹m
 >= 2.0) {

34 
‚‹m
 /= 2.0;

35 
shi·
++;

37 
‚‹m
 < 1.0) {

38 
‚‹m
 *= 2.0;

39 
shi·
--;

41 
‚‹m
 = fnorm - 1.0;

44 
signifiˇnd
 = 
‚‹m
 * ((1LL << 
signifiˇndbôs
) + 0.5f);

47 
exp
 = 
shi·
 + ((1 << (
expbôs
 - 1)) - 1);

50  (
sign
 << (
bôs
 - 1)Ë| (
exp
 << (bôs-
expbôs
 - 1)Ë| 
signifiˇnd
;

51 
	}
}

53 
	$u≈ack754
(
uöt64_t
 
i
, 
bôs
, 
expbôs
)

55 
ªsu…
;

56 
shi·
;

57 
büs
;

58 
signifiˇndbôs
 = 
bôs
 - 
expbôs
 - 1;

60 i‡(
i
 == 0)

64 
ªsu…
 = (
i
 & ((1LL << 
signifiˇndbôs
) - 1));

65 
ªsu…
 /(1LL << 
signifiˇndbôs
);

66 
ªsu…
 += 1.0f;

69 
büs
 = (1 << (
expbôs
 - 1)) - 1;

70 
shi·
 = ((
i
 >> 
signifiˇndbôs
Ë& ((1LL << 
expbôs
Ë- 1)Ë- 
büs
;

71 
shi·
 > 0) {

72 
ªsu…
 *= 2.0;

73 
shi·
--;

75 
shi·
 < 0) {

76 
ªsu…
 /= 2.0;

77 
shi·
++;

81 
ªsu…
 *(
i
 >> (
bôs
 - 1)) & 1 ? -1.0 : 1.0;

83  
ªsu…
;

84 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/ieee754.h

1 #i‚de‡
FIO_IEEE754_H


2 
	#FIO_IEEE754_H


	)

4 
	~<öây≥s.h
>

6 
uöt64_t
 
∑ck754
(
f
, 
bôs
, 
expbôs
);

7 
u≈ack754
(
uöt64_t
 
i
, 
bôs
, 
expbôs
);

9 
	#fio_doubÀ_to_uöt64
(
vÆ
Ë
	`∑ck754
((vÆ), 64, 11)

	)

10 
	#fio_uöt64_to_doubÀ
(
vÆ
Ë
	`u≈ack754
((vÆ), 64, 11)

	)

12 
	sfio_Â64
 {

14 
uöt64_t
 
	mi
;

15 
	mf
;

16 
uöt8_t
 
	mfûÀr
[16];

17 } 
	mu
;

18 } 
	tfio_Â64_t
;

	@/home/ysjin/Desktop/fio/fio/lib/lfsr.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

4 
	~"lf§.h
"

5 
	~"../compûî/compûî.h
"

14 
uöt8_t
 
	glf§_èps
[64][
FIO_MAX_TAPS
] =

80 
	#__LFSR_NEXT
(
__Ê
, 
__v
) \

81 
__v
 = ((__v >> 1Ë| 
__Ê
->
ˇched_bô
) ^ \

82 (((
__v
 & 1ULË- 1ULË& 
__Ê
->
x‹mask
);

	)

84 
ölöe
 
	$__lf§_√xt
(
fio_lf§
 *
Ê
, 
•ö
)

90 
•ö
) {

91 15: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

92 14: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

93 13: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

94 12: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

95 11: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

96 10: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

97 9: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

98 8: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

99 7: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

100 6: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

101 5: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

102 4: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

103 3: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

104 2: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

105 1: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

106 0: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

109 
	}
}

127 
	$lf§_√xt
(
fio_lf§
 *
Ê
, 
uöt64_t
 *
off
)

129 i‡(
Ê
->
num_vÆs
++ > fl->
max_vÆ
)

133 i‡(
Ê
->
cy˛e_Àngth
 && !--fl->cycle_length) {

134 
	`__lf§_√xt
(
Ê
, fl->
•ö
 + 1);

135 
Ê
->
cy˛e_Àngth
 = fl->
ˇched_cy˛e_Àngth
;

137 
	`__lf§_√xt
(
Ê
, fl->
•ö
);

138 } 
	`fio_u∆ikñy
(
Ê
->
œ°_vÆ
 > fl->
max_vÆ
));

140 *
off
 = 
Ê
->
œ°_vÆ
;

142 
	}
}

144 
uöt64_t
 
	$lf§_¸óã_x‹mask
(
uöt8_t
 *
èps
)

146 
i
;

147 
uöt64_t
 
x‹mask
 = 0;

149 
i
 = 0; i < 
FIO_MAX_TAPS
 && 
èps
[i] != 0; i++)

150 
x‹mask
 |1UL << (
èps
[
i
] - 1);

152  
x‹mask
;

153 
	}
}

155 
uöt8_t
 *
	$föd_lf§
(
uöt64_t
 
size
)

157 
i
;

164 
i
 = 3; i < 64; i++)

165 i‡((1UL << 
i
Ë> 
size
)

166  
lf§_èps
[
i
];

168  
NULL
;

169 
	}
}

189 
	$¥ï¨e_•ö
(
fio_lf§
 *
Ê
, 
•ö
)

191 
uöt64_t
 
max
 = (
Ê
->
ˇched_bô
 << 1) - 1;

192 
uöt64_t
 
x
, 
y
;

193 
i
;

195 i‡(
•ö
 > 15)

198 
x
 = 
max
 / (
•ö
 + 1);

199 
y
 = 
max
 % (
•ö
 + 1);

200 
Ê
->
cy˛e_Àngth
 = 0;

201 
Ê
->
•ö
 = spin;

203 
i
 = 1; i <
•ö
; i++) {

204 i‡((
y
 * 
i
Ë% (
•ö
 + 1) == 0) {

205 
Ê
->
cy˛e_Àngth
 = (
x
 * 
i
Ë+ (
y
 * iË/ (
•ö
 + 1);

209 
Ê
->
ˇched_cy˛e_Àngth
 = fl->
cy˛e_Àngth
;

215 
Ê
->
cy˛e_Àngth
++;

218 
	}
}

220 
	$lf§_ª£t
(
fio_lf§
 *
Ê
, 
£ed
)

222 
uöt64_t
 
bômask
 = (
Ê
->
ˇched_bô
 << 1) - 1;

224 
Ê
->
num_vÆs
 = 0;

225 
Ê
->
œ°_vÆ
 = 
£ed
 & 
bômask
;

228 i‡(
Ê
->
œ°_vÆ
 =
bômask
)

232 
	}
}

234 
	$lf§_öô
(
fio_lf§
 *
Ê
, 
uöt64_t
 
nums
, 
£ed
,

235 
•ö
)

237 
uöt8_t
 *
èps
;

239 
èps
 = 
	`föd_lf§
(
nums
);

240 i‡(!
èps
)

243 
Ê
->
max_vÆ
 = 
nums
 - 1;

244 
Ê
->
x‹mask
 = 
	`lf§_¸óã_x‹mask
(
èps
);

245 
Ê
->
ˇched_bô
 = 1UL << (
èps
[0] - 1);

247 i‡(
	`¥ï¨e_•ö
(
Ê
, 
•ö
))

250 i‡(
	`lf§_ª£t
(
Ê
, 
£ed
))

254 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/lfsr.h

1 #i‚de‡
FIO_LFSR_H


2 
	#FIO_LFSR_H


	)

4 
	~<öây≥s.h
>

6 
	#FIO_MAX_TAPS
 6

	)

8 
	slf§_èps
 {

9 
	mÀngth
;

10 
	mèps
[
FIO_MAX_TAPS
];

14 
	sfio_lf§
 {

15 
uöt64_t
 
	mx‹mask
;

16 
uöt64_t
 
	mœ°_vÆ
;

17 
uöt64_t
 
	mˇched_bô
;

18 
uöt64_t
 
	mmax_vÆ
;

19 
uöt64_t
 
	mnum_vÆs
;

20 
uöt64_t
 
	mcy˛e_Àngth
;

21 
uöt64_t
 
	mˇched_cy˛e_Àngth
;

22 
	m•ö
;

25 
lf§_√xt
(
fio_lf§
 *
Ê
, 
uöt64_t
 *
off
);

26 
lf§_öô
(
fio_lf§
 *
Ê
, 
uöt64_t
 
size
,

27 
£ed
, 
•ö
);

28 
lf§_ª£t
(
fio_lf§
 *
Ê
, 
£ed
);

	@/home/ysjin/Desktop/fio/fio/lib/memalign.c

1 
	~<°dlib.h
>

2 
	~<as£π.h
>

3 
	~<öây≥s.h
>

5 
	~"memÆign.h
"

7 
	#PTR_ALIGN
(
±r
, 
mask
) \

8 (*)((
uöçå_t
)((
±r
Ë+ (
mask
)Ë& ~(mask))

	)

10 
	sÆign_foŸî
 {

11 
	moff£t
;

14 *
	$fio_memÆign
(
size_t
 
Æignmít
, size_à
size
)

16 
Æign_foŸî
 *
f
;

17 *
±r
, *
ªt
 = 
NULL
;

19 
	`as£π
(!(
Æignmít
 & (alignment - 1)));

21 
±r
 = 
	`mÆloc
(
size
 + 
Æignmít
 + (*
f
) - 1);

22 i‡(
±r
) {

23 
ªt
 = 
	`PTR_ALIGN
(
±r
, 
Æignmít
 - 1);

24 
f
 = 
ªt
 + 
size
;

25 
f
->
off£t
 = (
uöçå_t
Ë
ªt
 - (uöçå_tË
±r
;

28  
ªt
;

29 
	}
}

31 
	$fio_mem‰ì
(*
±r
, 
size_t
 
size
)

33 
Æign_foŸî
 *
f
 = 
±r
 + 
size
;

35 
	`‰ì
(
±r
 - 
f
->
off£t
);

36 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/memalign.h

1 #i‚de‡
FIO_MEMALIGN_H


2 
	#FIO_MEMALIGN_H


	)

4 *
fio_memÆign
(
size_t
 
Æignmít
, size_à
size
);

5 
fio_mem‰ì
(*
±r
, 
size_t
 
size
);

	@/home/ysjin/Desktop/fio/fio/lib/memcpy.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"mem˝y.h
"

6 
	~"ønd.h
"

7 
	~"../fio_time.h
"

8 
	~"../gëtime.h
"

9 
	~"../fio.h
"

11 
	#BUF_SIZE
 32 * 1024 * 1024ULL

	)

13 
	#NR_ITERS
 64

	)

15 
	smem˝y_ã°
 {

16 c⁄° *
	m«me
;

17 *
	m§c
;

18 *
	md°
;

19 
size_t
 
	msize
;

22 
mem˝y_ã°
 
	gã°s
[] = {

24 .
«me
 = "8 bytes",

25 .
	gsize
 = 8,

28 .
	g«me
 = "16 bytes",

29 .
	gsize
 = 16,

32 .
	g«me
 = "96 bytes",

33 .
	gsize
 = 96,

36 .
	g«me
 = "128 bytes",

37 .
	gsize
 = 128,

40 .
	g«me
 = "256 bytes",

41 .
	gsize
 = 256,

44 .
	g«me
 = "512 bytes",

45 .
	gsize
 = 512,

48 .
	g«me
 = "2048 bytes",

49 .
	gsize
 = 2048,

52 .
	g«me
 = "8192 bytes",

53 .
	gsize
 = 8192,

56 .
	g«me
 = "131072 bytes",

57 .
	gsize
 = 131072,

60 .
	g«me
 = "262144 bytes",

61 .
	gsize
 = 262144,

64 .
	g«me
 = "524288 bytes",

65 .
	gsize
 = 524288,

68 .
	g«me
 = 
NULL
,

72 
	smem˝y_ty≥
 {

73 c⁄° *
	m«me
;

74 
	mmask
;

75 (*
	m‚
)(
	mmem˝y_ã°
 *);

79 
	mT_MEMCPY
 = 1U << 0,

80 
	mT_MEMMOVE
 = 1U << 1,

81 
	mT_SIMPLE
 = 1U << 2,

82 
	mT_HYBRID
 = 1U << 3,

85 
	#do_ã°
(
ã°
, 
‚
) do { \

86 
size_t
 
À·
, 
this
; \

87 *
§c
, *
d°
; \

88 
i
; \

90 
i
 = 0; i < 
NR_ITERS
; i++) { \

91 
À·
 = 
BUF_SIZE
; \

92 
§c
 = 
ã°
->src; \

93 
d°
 = 
ã°
->dst; \

94 
À·
) { \

95 
this
 = 
ã°
->
size
; \

96 i‡(
this
 > 
À·
) \

97 
this
 = 
À·
; \

98 (
‚
)(
d°
, 
§c
, 
this
); \

99 
À·
 -
this
; \

100 
§c
 +
this
; \

101 
d°
 +
this
; \

104 } 0)

	)

106 
	$t_mem˝y
(
mem˝y_ã°
 *
ã°
)

108 
	`do_ã°
(
ã°
, 
mem˝y
);

109 
	}
}

111 
	$t_memmove
(
mem˝y_ã°
 *
ã°
)

113 
	`do_ã°
(
ã°
, 
memmove
);

114 
	}
}

116 
	$sim∂e_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

118 *
d
 = 
d°
;

119 c⁄° *
s
 = 
§c
;

121 
Àn
--)

122 *
d
++ = *
s
++;

123 
	}
}

125 
	$t_sim∂e
(
mem˝y_ã°
 *
ã°
)

127 
	`do_ã°
(
ã°
, 
sim∂e_mem˝y
);

128 
	}
}

130 
	$t_hybrid
(
mem˝y_ã°
 *
ã°
)

132 i‡(
ã°
->
size
 >= 64)

133 
	`do_ã°
(
ã°
, 
sim∂e_mem˝y
);

135 
	`do_ã°
(
ã°
, 
mem˝y
);

136 
	}
}

138 
mem˝y_ty≥
 
	gt
[] = {

140 .
«me
 = "memcpy",

141 .
	gmask
 = 
T_MEMCPY
,

142 .
	g‚
 = 
t_mem˝y
,

145 .
	g«me
 = "memmove",

146 .
	gmask
 = 
T_MEMMOVE
,

147 .
	g‚
 = 
t_memmove
,

150 .
	g«me
 = "simple",

151 .
	gmask
 = 
T_SIMPLE
,

152 .
	g‚
 = 
t_sim∂e
,

155 .
	g«me
 = "hybrid",

156 .
	gmask
 = 
T_HYBRID
,

157 .
	g‚
 = 
t_hybrid
,

160 .
	g«me
 = 
NULL
,

164 
	$gë_ã°_mask
(c⁄° *
ty≥
)

166 *
o°r
, *
°r
 = 
	`°rdup
(
ty≥
);

167 
mask
;

168 *
«me
;

169 
i
;

171 
o°r
 = 
°r
;

172 
mask
 = 0;

173 (
«me
 = 
	`°r£p
(&
°r
, ",")Ë!
NULL
) {

174 
i
 = 0; 
t
[i].
«me
; i++) {

175 i‡(!
	`°rcmp
(
t
[
i
].
«me
,Çame)) {

176 
mask
 |
t
[
i
].mask;

182 
	`‰ì
(
o°r
);

183  
mask
;

184 
	}
}

186 
	$li°_ty≥s
()

188 
i
;

190 
i
 = 0; 
t
[i].
«me
; i++)

191 
	`¥ötf
("%s\n", 
t
[
i
].
«me
);

194 
	}
}

196 
	$£tup_ã°s
()

198 
mem˝y_ã°
 *
ã°
;

199 
‰™d_°©e
 
°©e
;

200 *
§c
, *
d°
;

201 
i
;

203 
§c
 = 
	`mÆloc
(
BUF_SIZE
);

204 
d°
 = 
	`mÆloc
(
BUF_SIZE
);

205 i‡(!
§c
 || !
d°
) {

206 
	`‰ì
(
§c
);

207 
	`‰ì
(
d°
);

211 
	`öô_ønd_£ed
(&
°©e
, 0x8989, 0);

212 
	`fûl_øndom_buf
(&
°©e
, 
§c
, 
BUF_SIZE
);

214 
i
 = 0; 
ã°s
[i].
«me
; i++) {

215 
ã°
 = &
ã°s
[
i
];

216 
ã°
->
§c
 = src;

217 
ã°
->
d°
 = dst;

221 
	}
}

223 
	$‰ì_ã°s
()

225 
	`‰ì
(
ã°s
[0].
§c
);

226 
	`‰ì
(
ã°s
[0].
d°
);

227 
	}
}

229 
	$fio_mem˝y_ã°
(c⁄° *
ty≥
)

231 
ã°_mask
 = 0;

232 
j
, 
i
;

234 i‡(!
ty≥
)

235 
ã°_mask
 = ~0U;

236 i‡(!
	`°rcmp
(
ty≥
, "help") || !strcmp(type, "list"))

237  
	`li°_ty≥s
();

239 
ã°_mask
 = 
	`gë_ã°_mask
(
ty≥
);

241 i‡(!
ã°_mask
) {

242 
	`Ârötf
(
°dîr
, "fio: unknow¿hash `%s`. AvaûabÀ:\n", 
ty≥
);

243  
	`li°_ty≥s
();

246 i‡(
	`£tup_ã°s
()) {

247 
	`Ârötf
(
°dîr
, "setting up memÑegions failed\n");

251 
i
 = 0; 
t
[i].
«me
; i++) {

252 
time•ec
 
ts
;

253 
mb_£c
;

254 
uöt64_t
 
u£c
;

256 i‡(!(
t
[
i
].
mask
 & 
ã°_mask
))

263 
	`u£c_•ö
(100000);

264 
t
[
i
].
	`‚
(&
ã°s
[0]);

266 
	`¥ötf
("%s\n", 
t
[
i
].
«me
);

268 
j
 = 0; 
ã°s
[j].
«me
; j++) {

269 
	`fio_gëtime
(&
ts
, 
NULL
);

270 
t
[
i
].
	`‚
(&
ã°s
[
j
]);

271 
u£c
 = 
	`utime_sö˚_now
(&
ts
);

273 i‡(
u£c
) {

274 
mb
 = 
NR_ITERS
 * 
BUF_SIZE
;

276 
mb_£c
 = (Ë
mb
 / (Ë
u£c
;

277 
mb_£c
 /= (1.024 * 1.024);

278 
	`¥ötf
("\t%s:\t%8.2‡MiB/£c\n", 
ã°s
[
j
].
«me
, 
mb_£c
);

280 
	`¥ötf
("\t%s:ö‡MiB/£c\n", 
ã°s
[
j
].
«me
);

284 
	`‰ì_ã°s
();

286 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/memcpy.h

1 #i‚de‡
FIO_MEMCPY_H


2 
	#FIO_MEMCPY_H


	)

4 
fio_mem˝y_ã°
(c⁄° *
ty≥
);

	@/home/ysjin/Desktop/fio/fio/lib/mountcheck.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 #ifde‡
CONFIG_GETMNTENT


5 
	~<m¡ít.h
>

7 
	~"mou¡check.h
"

9 
	#MTAB
 "/ëc/mèb"

	)

11 
	$devi˚_is_mou¡ed
(c⁄° *
dev
)

13 
FILE
 *
mèb
;

14 
m¡ít
 *
m¡
;

15 
ªt
 = 0;

17 
mèb
 = 
	`£tm¡ít
(
MTAB
, "r");

18 i‡(!
mèb
)

21 (
m¡
 = 
	`gëm¡ít
(
mèb
)Ë!
NULL
) {

22 i‡(!
m¡
->
m¡_f¢ame
)

24 i‡(!
	`°rcmp
(
m¡
->
m¡_f¢ame
, 
dev
)) {

25 
ªt
 = 1;

30 
	`ídm¡ít
(
mèb
);

31  
ªt
;

32 
	}
}

34 #ñi‡
deföed
(
CONFIG_GETMNTINFO
)

36 
	~<sys/∑øm.h
>

37 
	~<sys/mou¡.h
>

39 
	$devi˚_is_mou¡ed
(c⁄° *
dev
)

41 
°©fs
 *
°
;

42 
i
, 
ªt
;

44 
ªt
 = 
	`gëm¡öfo
(&
°
, 
MNT_NOWAIT
);

45 i‡(
ªt
 <= 0)

48 
i
 = 0; i < 
ªt
; i++) {

49 i‡(!
	`°rcmp
(
°
[
i
].
f_m¡‰om«me
, 
dev
))

54 
	}
}

56 #ñi‡
deföed
(
CONFIG_GETMNTINFO_STATVFS
)

58 
	~<sys/°©vfs.h
>

60 
	$devi˚_is_mou¡ed
(c⁄° *
dev
)

62 
°©vfs
 *
°
;

63 
i
, 
ªt
;

65 
ªt
 = 
	`gëm¡öfo
(&
°
, 
MNT_NOWAIT
);

66 i‡(
ªt
 <= 0)

69 
i
 = 0; i < 
ªt
; i++) {

70 i‡(!
	`°rcmp
(
°
[
i
].
f_m¡‰om«me
, 
dev
))

75 
	}
}

80 
	$devi˚_is_mou¡ed
(c⁄° *
dev
)

83 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/mountcheck.h

1 #i‚de‡
FIO_MOUNT_CHECK_H


2 
	#FIO_MOUNT_CHECK_H


	)

4 
devi˚_is_mou¡ed
(const *);

	@/home/ysjin/Desktop/fio/fio/lib/num2str.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

5 
	~"../compûî/compûî.h
"

6 
	~"num2°r.h
"

8 
	#ARRAY_SIZE
(
x
Ë(((x)Ë/ (((x)[0])))

	)

19 *
	$num2°r
(
uöt64_t
 
num
, 
maxÀn
, 
ba£
, 
pow2
, 
unôs
)

21 c⁄° *
si°r
[] = { "", "k", "M", "G", "T", "P" };

22 c⁄° *
õc°r
[] = { "", "Ki", "Mi", "Gi", "Ti", "Pi" };

23 c⁄° **
unô¥efix
;

24 c⁄° *
unô°r
[] = { "", "/s", "B", "bit", "B/s", "bit/s" };

25 c⁄° 
thoußnd
[] = { 1000, 1024 };

26 
modulo
;

27 
unô_ödex
 = 0, 
po°_ödex
, 
ˇºy
 = 0;

28 
tmp
[32], 
fmt
[32];

29 *
buf
;

31 
	`compûëime_as£π
((
si°r
Ë=(
õc°r
), "unitÖrefixárrays must be identical sizes");

33 
buf
 = 
	`mÆloc
(128);

34 i‡(!
buf
)

35  
NULL
;

37 i‡(
pow2
)

38 
unô¥efix
 = 
õc°r
;

40 
unô¥efix
 = 
si°r
;

42 
po°_ödex
 = 0; 
ba£
 > 1;Öost_index++)

43 
ba£
 /
thoußnd
[!!
pow2
];

45 
unôs
) {

46 
N2S_PERSEC
:

47 
unô_ödex
 = 1;

49 
N2S_BYTE
:

50 
unô_ödex
 = 2;

52 
N2S_BIT
:

53 
unô_ödex
 = 3;

54 
num
 *= 8;

56 
N2S_BYTEPERSEC
:

57 
unô_ödex
 = 4;

59 
N2S_BITPERSEC
:

60 
unô_ödex
 = 5;

61 
num
 *= 8;

68 
modulo
 = -1U;

69 
po°_ödex
 < (
si°r
)) {

70 
	`•rötf
(
tmp
, "%Œu", (Ë
num
);

71 i‡(
	`°æí
(
tmp
Ë<
maxÀn
)

74 
modulo
 = 
num
 % 
thoußnd
[!!
pow2
];

75 
num
 /
thoußnd
[!!
pow2
];

76 
ˇºy
 = 
modulo
 >
thoußnd
[!!
pow2
] / 2;

77 
po°_ödex
++;

83 i‡(
modulo
 == -1U) {

84 
d⁄e
:

85 i‡(
po°_ödex
 >
	`ARRAY_SIZE
(
si°r
))

86 
po°_ödex
 = 0;

88 
	`•rötf
(
buf
, "%Œu%s%s", (Ë
num
,

89 
unô¥efix
[
po°_ödex
], 
unô°r
[
unô_ödex
]);

90  
buf
;

96 
	`•rötf
(
tmp
, "%Œu", (Ë
num
);

97 i‡(()(
maxÀn
 - 
	`°æí
(
tmp
)) <= 1) {

98 i‡(
ˇºy
)

99 
num
++;

100 
d⁄e
;

106 
	`as£π
(
maxÀn
 - 
	`°æí
(
tmp
) - 1 > 0);

107 
	`as£π
(
modulo
 < 
thoußnd
[!!
pow2
]);

108 
	`•rötf
(
fmt
, "%%.%df", ()(
maxÀn
 - 
	`°æí
(
tmp
) - 1));

109 
	`•rötf
(
tmp
, 
fmt
, ()
modulo
 / ()
thoußnd
[!!
pow2
]);

111 
	`•rötf
(
buf
, "%Œu.%s%s%s", (Ë
num
, &
tmp
[2],

112 
unô¥efix
[
po°_ödex
], 
unô°r
[
unô_ödex
]);

113  
buf
;

114 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/num2str.h

1 #i‚de‡
FIO_NUM2STR_H


2 
	#FIO_NUM2STR_H


	)

4 
	~<öây≥s.h
>

6 
	#N2S_NONE
 0

	)

7 
	#N2S_BITPERSEC
 1

	)

8 
	#N2S_PERSEC
 2

	)

9 
	#N2S_BIT
 3

	)

10 
	#N2S_BYTE
 4

	)

11 
	#N2S_BYTEPERSEC
 8

	)

13 *
num2°r
(
uöt64_t
, , , , );

	@/home/ysjin/Desktop/fio/fio/lib/output_buffer.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

5 
	~"ouçut_buf„r.h
"

6 
	~"../mömax.h
"

8 
	#BUF_INC
 1024

	)

10 
	$buf_ouçut_öô
(
buf_ouçut
 *
out
)

12 
out
->
max_buÊí
 = 0;

13 
out
->
buÊí
 = 0;

14 
out
->
buf
 = 
NULL
;

15 
	}
}

17 
	$buf_ouçut_‰ì
(
buf_ouçut
 *
out
)

19 
	`‰ì
(
out
->
buf
);

20 
	`buf_ouçut_öô
(
out
);

21 
	}
}

23 
size_t
 
	$buf_ouçut_add
(
buf_ouçut
 *
out
, c⁄° *
buf
, 
size_t
 
Àn
)

25 i‡(
out
->
max_buÊí
 - out->
buÊí
 < 
Àn
) {

26 
size_t
 
√ed
 = 
Àn
 - (
out
->
max_buÊí
 - out->
buÊí
);

27 
size_t
 
ﬁd_max
 = 
out
->
max_buÊí
;

29 
√ed
 = 
	`max
((
size_t
Ë
BUF_INC
,Çeed);

30 
out
->
max_buÊí
 +
√ed
;

31 
out
->
buf
 = 
	`ªÆloc
(out->buf, out->
max_buÊí
);

33 
ﬁd_max
 = 
	`max
(ﬁd_max, 
out
->
buÊí
 + 
Àn
);

34 i‡(
ﬁd_max
 + 
√ed
 > 
out
->
max_buÊí
)

35 
√ed
 = 
out
->
max_buÊí
 - 
ﬁd_max
;

36 
	`mem£t
(&
out
->
buf
[
ﬁd_max
], 0, 
√ed
);

39 
	`mem˝y
(&
out
->
buf
[out->
buÊí
], buf, 
Àn
);

40 
out
->
buÊí
 +
Àn
;

41  
Àn
;

42 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/output_buffer.h

1 #i‚de‡
FIO_OUTPUT_BUFFER_H


2 
	#FIO_OUTPUT_BUFFER_H


	)

4 
	~<uni°d.h
>

6 
	sbuf_ouçut
 {

7 *
	mbuf
;

8 
size_t
 
	mbuÊí
;

9 
size_t
 
	mmax_buÊí
;

12 
buf_ouçut_öô
(
buf_ouçut
 *
out
);

13 
buf_ouçut_‰ì
(
buf_ouçut
 *
out
);

14 
size_t
 
buf_ouçut_add
(
buf_ouçut
 *
out
, c⁄° *
buf
, size_à
Àn
);

	@/home/ysjin/Desktop/fio/fio/lib/pattern.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<limôs.h
>

5 
	~<î∫o.h
>

6 
	~<as£π.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

9 
	~<f˙é.h
>

10 
	~<uni°d.h
>

12 
	~"°∫tﬁ.h
"

13 
	~"∑âîn.h
"

14 
	~"../mömax.h
"

15 
	~"../o¶ib/°rˇ£°r.h
"

16 
	~"../o¶ib/°∫dup.h
"

30 c⁄° *
	$∑r£_fûe
(c⁄° *
beg
, *
out
,

31 
out_Àn
,

32 *
fûÀd
)

34 c⁄° *
íd
;

35 *
fûe
;

36 
fd
;

37 
ssize_t
 
cou¡
;

39 i‡(!
out_Àn
)

40 
îr_out
;

42 
	`as£π
(*
beg
 == '\'');

43 
beg
++;

44 
íd
 = 
	`°rchr
(
beg
, '\'');

45 i‡(!
íd
)

46 
îr_out
;

48 
fûe
 = 
	`°∫dup
(
beg
, 
íd
 - beg);

49 i‡(
fûe
 =
NULL
)

50 
îr_out
;

52 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

53 i‡(
fd
 < 0)

54 
îr_‰ì_out
;

56 
cou¡
 = 
	`ªad
(
fd
, 
out
, 
out_Àn
);

57 i‡(
cou¡
 == -1)

58 
îr_‰ì_˛o£_out
;

60 *
fûÀd
 = 
cou¡
;

61 
	`˛o£
(
fd
);

62 
	`‰ì
(
fûe
);

65  
íd
 + 1;

67 
îr_‰ì_˛o£_out
:

68 
	`˛o£
(
fd
);

69 
îr_‰ì_out
:

70 
	`‰ì
(
fûe
);

71 
îr_out
:

72  
NULL
;

74 
	}
}

88 c⁄° *
	$∑r£_°rög
(c⁄° *
beg
, *
out
,

89 
out_Àn
,

90 *
fûÀd
)

92 c⁄° *
íd
;

94 i‡(!
out_Àn
)

95  
NULL
;

97 
	`as£π
(*
beg
 == '"');

98 
beg
++;

99 
íd
 = 
	`°rchr
(
beg
, '"');

100 i‡(!
íd
)

101  
NULL
;

102 i‡(
íd
 - 
beg
 > 
out_Àn
)

103  
NULL
;

105 
	`mem˝y
(
out
, 
beg
, 
íd
 - beg);

106 *
fûÀd
 = 
íd
 - 
beg
;

109  
íd
 + 1;

110 
	}
}

128 c⁄° *
	$∑r£_numbî
(c⁄° *
beg
, *
out
,

129 
out_Àn
,

130 *
fûÀd
)

132 c⁄° *
íd
;

133 
vÆ
;

134 
lvÆ
;

135 
num
, 
i
;

137 i‡(!
out_Àn
)

138  
NULL
;

140 
num
 = 0;

141 
	`ssˇnf
(
beg
, "0%*[xX]%*[0-9a-fA-F]%n", &
num
);

142 i‡(
num
 == 0) {

145 *
_íd
;

148 
_íd
 = 
	`°rˇ£°r
(
beg
, "0x");

149 i‡(
_íd
)

150 
num
 = 
_íd
 - 
beg
;

151 i‡(
num
)

152 
lvÆ
 = 
	`°∫tﬁ
(
beg
, 
num
, &
_íd
, 10);

154 
lvÆ
 = 
	`°πﬁ
(
beg
, &
_íd
, 10);

155 i‡(
beg
 =
_íd
 || 
lvÆ
 > 
INT_MAX
 ||ÜvÆ < 
INT_MIN
)

156  
NULL
;

157 
íd
 = 
_íd
;

158 
i
 = 0;

159 i‡(!
lvÆ
) {

160 
num
 = 0;

161 
out
[
i
] = 0x00;

162 
i
 = 1;

164 
vÆ
 = ()
lvÆ
;

165 ; 
vÆ
 && 
out_Àn
; out_Àn--, 
i
++, val >>= 8)

166 
out
[
i
] = 
vÆ
 & 0xff;

167 i‡(
vÆ
)

168  
NULL
;

171 
	`as£π
(
num
 > 2);

174 
num
 -= 2;

175 
beg
 += 2;

178 i‡(
beg
[
num
] && !
	`°∫ˇ£cmp
(&beg[num - 1], "0x", 2))

179 
num
--;

181 
íd
 = 
beg
 + 
num
;

183 
i
 = 0; 
num
 && 
out_Àn
;

184 
out_Àn
--, 
i
++, 
num
 -2, 
beg
 += 2) {

185 c⁄° *
fmt
;

187 
fmt
 = (
num
 & 1 ? "%1hhx" : "%2hhx");

188 
	`ssˇnf
(
beg
, 
fmt
, &
out
[
i
]);

189 i‡(
num
 & 1) {

190 
num
++;

191 
beg
--;

194 i‡(
num
)

195  
NULL
;

198 *
fûÀd
 = 
i
;

199  
íd
;

201 
	}
}

225 c⁄° *
	$∑r£_f‹m©
(c⁄° *
ö
, *
out
, 
∑r£d
,

226 
out_Àn
, *
fûÀd
,

227 c⁄° 
∑âîn_fmt_desc
 *
fmt_desc
,

228 
fmt_desc_sz
,

229 
∑âîn_fmt
 *
fmt
, 
fmt_sz
)

231 
i
;

232 
∑âîn_fmt
 *
f
 = 
NULL
;

233 
Àn
 = 0;

235 i‡(!
out_Àn
 || !
fmt_desc
 || !
fmt_desc_sz
 || !
fmt
 || !
fmt_sz
)

236  
NULL
;

238 
	`as£π
(*
ö
 == '%');

240 
i
 = 0; i < 
fmt_desc_sz
; i++) {

241 c⁄° 
∑âîn_fmt_desc
 *
desc
;

243 
desc
 = &
fmt_desc
[
i
];

244 
Àn
 = 
	`°æí
(
desc
->
fmt
);

245 i‡(0 =
	`°∫cmp
(
ö
, 
desc
->
fmt
, 
Àn
)) {

246 
fmt
->
desc
 = desc;

247 
fmt
->
off
 = 
∑r£d
;

248 
f
 = 
fmt
;

253 i‡(!
f
)

254  
NULL
;

255 i‡(
f
->
desc
->
Àn
 > 
out_Àn
)

256  
NULL
;

258 
	`mem£t
(
out
, '\0', 
f
->
desc
->
Àn
);

259 *
fûÀd
 = 
f
->
desc
->
Àn
;

261  
ö
 + 
Àn
;

262 
	}
}

313 
	$∑r£_™d_fûl_∑âîn
(c⁄° *
ö
, 
ö_Àn
,

314 *
out
, 
out_Àn
,

315 c⁄° 
∑âîn_fmt_desc
 *
fmt_desc
,

316 
fmt_desc_sz
,

317 
∑âîn_fmt
 *
fmt
,

318 *
fmt_sz_out
)

320 c⁄° *
beg
, *
íd
, *
out_beg
 = 
out
;

321 
tŸÆ
 = 0, 
fmt_ªm
 = 0;

323 i‡(!
ö
 || !
ö_Àn
 || !
out
 || !
out_Àn
)

324  -
EINVAL
;

325 i‡(
fmt_sz_out
)

326 
fmt_ªm
 = *
fmt_sz_out
;

328 
beg
 = 
ö
;

330 
fûÀd
;

331 
∑r£d_fmt
;

333 
fûÀd
 = 0;

334 
∑r£d_fmt
 = 0;

336 *
beg
) {

338 
íd
 = 
	`∑r£_fûe
(
beg
, 
out
, 
out_Àn
, &
fûÀd
);

341 
íd
 = 
	`∑r£_°rög
(
beg
, 
out
, 
out_Àn
, &
fûÀd
);

344 
íd
 = 
	`∑r£_f‹m©
(
beg
, 
out
, ouà- 
out_beg
, 
out_Àn
,

345 &
fûÀd
, 
fmt_desc
, 
fmt_desc_sz
,

346 
fmt
, 
fmt_ªm
);

347 
∑r£d_fmt
 = 1;

350 
íd
 = 
	`∑r£_numbî
(
beg
, 
out
, 
out_Àn
, &
fûÀd
);

354 i‡(!
íd
)

355  -
EINVAL
;

357 i‡(
∑r£d_fmt
) {

358 
	`as£π
(
fmt_ªm
);

359 
fmt_ªm
--;

360 
fmt
++;

363 
	`as£π
(
íd
 - 
beg
 <
ö_Àn
);

364 
ö_Àn
 -
íd
 - 
beg
;

365 
beg
 = 
íd
;

367 
	`as£π
(
fûÀd
);

368 
	`as£π
(
fûÀd
 <
out_Àn
);

369 
out_Àn
 -
fûÀd
;

370 
out
 +
fûÀd
;

371 
tŸÆ
 +
fûÀd
;

373 } 
ö_Àn
);

375 i‡(
fmt_sz_out
)

376 *
fmt_sz_out
 -
fmt_ªm
;

377  
tŸÆ
;

378 
	}
}

385 
	$dup_∑âîn
(*
out
, 
out_Àn
, 
∑âîn_Àn
)

387 
À·
, 
Àn
, 
off
;

389 i‡(
out_Àn
 <
∑âîn_Àn
)

393 
off
 = 
∑âîn_Àn
;

394 
À·
 = (
out_Àn
 - 
off
);

395 
Àn
 = 
	`mö
(
À·
, 
off
);

398 
À·
) {

399 
	`mem˝y
(
out
 + 
off
, out, 
Àn
);

400 
À·
 -
Àn
;

401 
off
 <<= 1;

402 
Àn
 = 
	`mö
(
À·
, 
off
);

406 
	}
}

415 
	$˝y_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

416 *
out
, 
out_Àn
)

418 
Àn
;

420 i‡(!
∑âîn
 || !
∑âîn_Àn
 || !
out
 || !
out_Àn
)

421  -
EINVAL
;

424 
Àn
 = 
	`mö
(
∑âîn_Àn
, 
out_Àn
);

425 
	`mem˝y
(
out
, 
∑âîn
, 
Àn
);

428  
	`dup_∑âîn
(
out
, 
out_Àn
, 
∑âîn_Àn
);

429 
	}
}

443 
	$cmp_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_size
,

444 
off
, c⁄° *
buf
, 
Àn
)

446 
rc
;

447 
size
;

450 i‡(
Àn
 > 
∑âîn_size
) {

451 
rc
 = 
	`memcmp
(
buf
, bu‡+ 
∑âîn_size
, 
Àn
 -Öattern_size);

452 i‡(
rc
)

453  -
EILSEQ
;

456 i‡(
off
) {

457 
size
 = 
	`mö
(
Àn
, 
∑âîn_size
 - 
off
);

458 
rc
 = 
	`memcmp
(
buf
, 
∑âîn
 + 
off
, 
size
);

459 i‡(
rc
)

460  -
EILSEQ
;

461 
buf
 +
size
;

462 
Àn
 -
size
;

466 i‡(
Àn
) {

467 
size
 = 
	`mö
(
Àn
, (
off
 ? of‡: 
∑âîn_size
));

468 
rc
 = 
	`memcmp
(
buf
, 
∑âîn
, 
size
);

469 i‡(
rc
)

470  -
EILSEQ
;

474 
	}
}

484 
	$∑°e_f‹m©_ö∂a˚
(*
∑âîn
, 
∑âîn_Àn
,

485 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

486 *
¥iv
)

488 
i
, 
rc
;

489 
Àn
;

491 i‡(!
∑âîn
 || !
∑âîn_Àn
 || !
fmt
)

492  -
EINVAL
;

495 
i
 = 0; i < 
fmt_sz
; i++) {

496 
∑âîn_fmt
 *
f
;

498 
f
 = &
fmt
[
i
];

499 i‡(
∑âîn_Àn
 <
f
->
off
)

501 
Àn
 = 
	`mö
(
∑âîn_Àn
 - 
f
->
off
, f->
desc
->len);

502 
rc
 = 
f
->
desc
->
	`∑°e
(
∑âîn
 + f->
off
, 
Àn
, 
¥iv
);

503 i‡(
rc
)

504  
rc
;

508 
	}
}

518 
	$∑°e_f‹m©
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

519 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

520 *
out
, 
out_Àn
, *
¥iv
)

522 
rc
;

523 
Àn
;

525 i‡(!
∑âîn
 || !
∑âîn_Àn
 || !
out
 || !
out_Àn
)

526  -
EINVAL
;

529 
Àn
 = 
	`mö
(
∑âîn_Àn
, 
out_Àn
);

530 
	`mem˝y
(
out
, 
∑âîn
, 
Àn
);

532 
rc
 = 
	`∑°e_f‹m©_ö∂a˚
(
out
, 
Àn
, 
fmt
, 
fmt_sz
, 
¥iv
);

533 i‡(
rc
)

534  
rc
;

537  
	`dup_∑âîn
(
out
, 
out_Àn
, 
∑âîn_Àn
);

538 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/pattern.h

1 #i‚de‡
FIO_PARSE_PATTERN_H


2 
	#FIO_PARSE_PATTERN_H


	)

4 
	g∑âîn_fmt
;

11 
	s∑âîn_fmt_desc
 {

12 c⁄° *
	mfmt
;

13 
	mÀn
;

14 (*
	m∑°e
)(*
	mbuf
, 
	mÀn
, *
	m¥iv
);

21 
	s∑âîn_fmt
 {

22 
	moff
;

23 c⁄° 
∑âîn_fmt_desc
 *
	mdesc
;

26 
∑r£_™d_fûl_∑âîn
(c⁄° *
ö
, 
ö_Àn
,

27 *
out
, 
out_Àn
,

28 c⁄° 
∑âîn_fmt_desc
 *
fmt_desc
,

29 
fmt_desc_sz
,

30 
∑âîn_fmt
 *
fmt
,

31 *
fmt_sz_out
);

33 
∑°e_f‹m©_ö∂a˚
(*
∑âîn
, 
∑âîn_Àn
,

34 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

35 *
¥iv
);

37 
∑°e_f‹m©
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

38 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

39 *
out
, 
out_Àn
, *
¥iv
);

41 
˝y_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

42 *
out
, 
out_Àn
);

44 
cmp_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_size
,

45 
off
, c⁄° *
buf
, 
Àn
);

	@/home/ysjin/Desktop/fio/fio/lib/pow2.h

1 #i‚de‡
FIO_POW2_H


2 
	#FIO_POW2_H


	)

4 
	~<öây≥s.h
>

5 
	~"ty≥s.h
"

7 
ölöe
 
boﬁ
 
	$is_powî_of_2
(
uöt64_t
 
vÆ
)

9  (
vÆ
 != 0 && ((val & (val - 1)) == 0));

10 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/prio_tree.c

14 
	~<°dlib.h
>

15 
	~<limôs.h
>

17 
	~"../compûî/compûî.h
"

18 
	~"¥io_åì.h
"

20 
	#ARRAY_SIZE
(
x
Ë(((x)Ë/ (((x)[0])))

	)

46 
	$gë_ödex
(c⁄° 
¥io_åì_node
 *
node
,

47 *
ødix
, *
hóp
)

49 *
ødix
 = 
node
->
°¨t
;

50 *
hóp
 = 
node
->
œ°
;

51 
	}
}

53 
	gödex_bôs_to_maxödex
[
BITS_PER_LONG
];

55 
fio_öô
 
	$¥io_åì_öô
()

57 
i
;

59 
i
 = 0; i < 
	`ARRAY_SIZE
(
ödex_bôs_to_maxödex
) - 1; i++)

60 
ödex_bôs_to_maxödex
[
i
] = (1UL << (i + 1)) - 1;

61 
ödex_bôs_to_maxödex
[
	`ARRAY_SIZE
(index_bits_to_maxindex) - 1] = ~0UL;

62 
	}
}

67 
ölöe
 
	$¥io_åì_maxödex
(
bôs
)

69  
ödex_bôs_to_maxödex
[
bôs
 - 1];

70 
	}
}

78 
¥io_åì_node
 *
	$¥io_åì_ex∑nd
(
¥io_åì_roŸ
 *
roŸ
,

79 
¥io_åì_node
 *
node
, 
max_hóp_ödex
)

81 
¥io_åì_node
 *
fú°
 = 
NULL
, *
¥ev
, *
œ°
 = NULL;

83 i‡(
max_hóp_ödex
 > 
	`¥io_åì_maxödex
(
roŸ
->
ödex_bôs
))

84 
roŸ
->
ödex_bôs
++;

86 
max_hóp_ödex
 > 
	`¥io_åì_maxödex
(
roŸ
->
ödex_bôs
)) {

87 
roŸ
->
ödex_bôs
++;

89 i‡(
	`¥io_åì_em±y
(
roŸ
))

92 i‡(
fú°
 =
NULL
) {

93 
fú°
 = 
roŸ
->
¥io_åì_node
;

94 
	`¥io_åì_ªmove
(
roŸ
,ÑoŸ->
¥io_åì_node
);

95 
	`INIT_PRIO_TREE_NODE
(
fú°
);

96 
œ°
 = 
fú°
;

98 
¥ev
 = 
œ°
;

99 
œ°
 = 
roŸ
->
¥io_åì_node
;

100 
	`¥io_åì_ªmove
(
roŸ
,ÑoŸ->
¥io_åì_node
);

101 
	`INIT_PRIO_TREE_NODE
(
œ°
);

102 
¥ev
->
À·
 = 
œ°
;

103 
œ°
->
∑ª¡
 = 
¥ev
;

107 
	`INIT_PRIO_TREE_NODE
(
node
);

109 i‡(
fú°
) {

110 
node
->
À·
 = 
fú°
;

111 
fú°
->
∑ª¡
 = 
node
;

113 
œ°
 = 
node
;

115 i‡(!
	`¥io_åì_em±y
(
roŸ
)) {

116 
œ°
->
À·
 = 
roŸ
->
¥io_åì_node
;

117 
œ°
->
À·
->
∑ª¡
 =Üast;

120 
roŸ
->
¥io_åì_node
 = 
node
;

121  
node
;

122 
	}
}

127 
¥io_åì_node
 *
	$¥io_åì_ª∂a˚
(
¥io_åì_roŸ
 *
roŸ
,

128 
¥io_åì_node
 *
ﬁd
, ¥io_åì_nodê*
node
)

130 
	`INIT_PRIO_TREE_NODE
(
node
);

132 i‡(
	`¥io_åì_roŸ
(
ﬁd
)) {

133 
	`as£π
(
roŸ
->
¥io_åì_node
 =
ﬁd
);

138 
node
->
∑ª¡
 =Çode;

139 
roŸ
->
¥io_åì_node
 = 
node
;

141 
node
->
∑ª¡
 = 
ﬁd
->parent;

142 i‡(
ﬁd
->
∑ª¡
->
À·
 == old)

143 
ﬁd
->
∑ª¡
->
À·
 = 
node
;

145 
ﬁd
->
∑ª¡
->
right
 = 
node
;

148 i‡(!
	`¥io_åì_À·_em±y
(
ﬁd
)) {

149 
node
->
À·
 = 
ﬁd
->left;

150 
ﬁd
->
À·
->
∑ª¡
 = 
node
;

153 i‡(!
	`¥io_åì_right_em±y
(
ﬁd
)) {

154 
node
->
right
 = 
ﬁd
->right;

155 
ﬁd
->
right
->
∑ª¡
 = 
node
;

158  
ﬁd
;

159 
	}
}

171 
¥io_åì_node
 *
	$¥io_åì_ö£π
(
¥io_åì_roŸ
 *
roŸ
,

172 
¥io_åì_node
 *
node
)

174 
¥io_åì_node
 *
cur
, *
ªs
 = 
node
;

175 
ødix_ödex
, 
hóp_ödex
;

176 
r_ödex
, 
h_ödex
, 
ödex
, 
mask
;

177 
size_Êag
 = 0;

179 
	`gë_ödex
(
node
, &
ødix_ödex
, &
hóp_ödex
);

181 i‡(
	`¥io_åì_em±y
(
roŸ
) ||

182 
hóp_ödex
 > 
	`¥io_åì_maxödex
(
roŸ
->
ödex_bôs
))

183  
	`¥io_åì_ex∑nd
(
roŸ
, 
node
, 
hóp_ödex
);

185 
cur
 = 
roŸ
->
¥io_åì_node
;

186 
mask
 = 1UL << (
roŸ
->
ödex_bôs
 - 1);

188 
mask
) {

189 
	`gë_ödex
(
cur
, &
r_ödex
, &
h_ödex
);

191 i‡(
r_ödex
 =
ødix_ödex
 && 
h_ödex
 =
hóp_ödex
)

192  
cur
;

194 i‡(
h_ödex
 < 
hóp_ödex
 ||

195 (
h_ödex
 =
hóp_ödex
 && 
r_ödex
 > 
ødix_ödex
)) {

196 
¥io_åì_node
 *
tmp
 = 
node
;

197 
node
 = 
	`¥io_åì_ª∂a˚
(
roŸ
, 
cur
,Çode);

198 
cur
 = 
tmp
;

200 
ödex
 = 
r_ödex
;

201 
r_ödex
 = 
ødix_ödex
;

202 
ødix_ödex
 = 
ödex
;

203 
ödex
 = 
h_ödex
;

204 
h_ödex
 = 
hóp_ödex
;

205 
hóp_ödex
 = 
ödex
;

208 i‡(
size_Êag
)

209 
ödex
 = 
hóp_ödex
 - 
ødix_ödex
;

211 
ödex
 = 
ødix_ödex
;

213 i‡(
ödex
 & 
mask
) {

214 i‡(
	`¥io_åì_right_em±y
(
cur
)) {

215 
	`INIT_PRIO_TREE_NODE
(
node
);

216 
cur
->
right
 = 
node
;

217 
node
->
∑ª¡
 = 
cur
;

218  
ªs
;

220 
cur
 = cur->
right
;

222 i‡(
	`¥io_åì_À·_em±y
(
cur
)) {

223 
	`INIT_PRIO_TREE_NODE
(
node
);

224 
cur
->
À·
 = 
node
;

225 
node
->
∑ª¡
 = 
cur
;

226  
ªs
;

228 
cur
 = cur->
À·
;

231 
mask
 >>= 1;

233 i‡(!
mask
) {

234 
mask
 = 1UL << (
BITS_PER_LONG
 - 1);

235 
size_Êag
 = 1;

239 
	`as£π
(0);

240  
NULL
;

241 
	}
}

248 
	$¥io_åì_ªmove
(
¥io_åì_roŸ
 *
roŸ
, 
¥io_åì_node
 *
node
)

250 
¥io_åì_node
 *
cur
;

251 
r_ödex
, 
h_ödex_right
, 
h_ödex_À·
;

253 
cur
 = 
node
;

255 !
	`¥io_åì_À·_em±y
(
cur
Ë|| !
	`¥io_åì_right_em±y
(cur)) {

256 i‡(!
	`¥io_åì_À·_em±y
(
cur
))

257 
	`gë_ödex
(
cur
->
À·
, &
r_ödex
, &
h_ödex_À·
);

259 
cur
 = cur->
right
;

263 i‡(!
	`¥io_åì_right_em±y
(
cur
))

264 
	`gë_ödex
(
cur
->
right
, &
r_ödex
, &
h_ödex_right
);

266 
cur
 = cur->
À·
;

271 i‡(
h_ödex_À·
 >
h_ödex_right
)

272 
cur
 = cur->
À·
;

274 
cur
 = cur->
right
;

277 i‡(
	`¥io_åì_roŸ
(
cur
)) {

278 
	`as£π
(
roŸ
->
¥io_åì_node
 =
cur
);

279 
	`INIT_PRIO_TREE_ROOT
(
roŸ
);

283 i‡(
cur
->
∑ª¡
->
right
 == cur)

284 
cur
->
∑ª¡
->
right
 = cur->parent;

286 
cur
->
∑ª¡
->
À·
 = cur->parent;

288 
cur
 !
node
)

289 
cur
 = 
	`¥io_åì_ª∂a˚
(
roŸ
, cur->
∑ª¡
, cur);

290 
	}
}

300 
¥io_åì_node
 *
	$¥io_åì_À·
(
¥io_åì_ôî
 *
ôî
,

301 *
r_ödex
, *
h_ödex
)

303 i‡(
	`¥io_åì_À·_em±y
(
ôî
->
cur
))

304  
NULL
;

306 
	`gë_ödex
(
ôî
->
cur
->
À·
, 
r_ödex
, 
h_ödex
);

308 i‡(
ôî
->
r_ödex
 <*
h_ödex
) {

309 
ôî
->
cur
 = iãr->cur->
À·
;

310 
ôî
->
mask
 >>= 1;

311 i‡(
ôî
->
mask
) {

312 i‡(
ôî
->
size_Àvñ
)

313 
ôî
->
size_Àvñ
++;

315 i‡(
ôî
->
size_Àvñ
) {

316 
	`as£π
(
	`¥io_åì_À·_em±y
(
ôî
->
cur
));

317 
	`as£π
(
	`¥io_åì_right_em±y
(
ôî
->
cur
));

318 
ôî
->
size_Àvñ
++;

319 
ôî
->
mask
 = 
ULONG_MAX
;

321 
ôî
->
size_Àvñ
 = 1;

322 
ôî
->
mask
 = 1UL << (
BITS_PER_LONG
 - 1);

325  
ôî
->
cur
;

328  
NULL
;

329 
	}
}

331 
¥io_åì_node
 *
	$¥io_åì_right
(
¥io_åì_ôî
 *
ôî
,

332 *
r_ödex
, *
h_ödex
)

334 
vÆue
;

336 i‡(
	`¥io_åì_right_em±y
(
ôî
->
cur
))

337  
NULL
;

339 i‡(
ôî
->
size_Àvñ
)

340 
vÆue
 = 
ôî
->value;

342 
vÆue
 = 
ôî
->vÆuê| iãr->
mask
;

344 i‡(
ôî
->
h_ödex
 < 
vÆue
)

345  
NULL
;

347 
	`gë_ödex
(
ôî
->
cur
->
right
, 
r_ödex
, 
h_ödex
);

349 i‡(
ôî
->
r_ödex
 <*
h_ödex
) {

350 
ôî
->
cur
 = iãr->cur->
right
;

351 
ôî
->
mask
 >>= 1;

352 
ôî
->
vÆue
 = value;

353 i‡(
ôî
->
mask
) {

354 i‡(
ôî
->
size_Àvñ
)

355 
ôî
->
size_Àvñ
++;

357 i‡(
ôî
->
size_Àvñ
) {

358 
	`as£π
(
	`¥io_åì_À·_em±y
(
ôî
->
cur
));

359 
	`as£π
(
	`¥io_åì_right_em±y
(
ôî
->
cur
));

360 
ôî
->
size_Àvñ
++;

361 
ôî
->
mask
 = 
ULONG_MAX
;

363 
ôî
->
size_Àvñ
 = 1;

364 
ôî
->
mask
 = 1UL << (
BITS_PER_LONG
 - 1);

367  
ôî
->
cur
;

370  
NULL
;

371 
	}
}

373 
¥io_åì_node
 *
	$¥io_åì_∑ª¡
(
¥io_åì_ôî
 *
ôî
)

375 
ôî
->
cur
 = iãr->cur->
∑ª¡
;

376 i‡(
ôî
->
mask
 =
ULONG_MAX
)

377 
ôî
->
mask
 = 1UL;

378 i‡(
ôî
->
size_Àvñ
 == 1)

379 
ôî
->
mask
 = 1UL;

381 
ôî
->
mask
 <<= 1;

382 i‡(
ôî
->
size_Àvñ
)

383 
ôî
->
size_Àvñ
--;

384 i‡(!
ôî
->
size_Àvñ
 && (ôî->
vÆue
 & iãr->
mask
))

385 
ôî
->
vÆue
 ^ôî->
mask
;

386  
ôî
->
cur
;

387 
	}
}

389 
ölöe
 
	$ovîœp
(
¥io_åì_ôî
 *
ôî
,

390 
r_ödex
, 
h_ödex
)

392  
ôî
->
h_ödex
 >
r_ödex
 && iter->r_index <= h_index;

393 
	}
}

402 
¥io_åì_node
 *
	$¥io_åì_fú°
(
¥io_åì_ôî
 *
ôî
)

404 
¥io_åì_roŸ
 *
roŸ
;

405 
r_ödex
, 
h_ödex
;

407 
	`INIT_PRIO_TREE_ITER
(
ôî
);

409 
roŸ
 = 
ôî
->root;

410 i‡(
	`¥io_åì_em±y
(
roŸ
))

411  
NULL
;

413 
	`gë_ödex
(
roŸ
->
¥io_åì_node
, &
r_ödex
, &
h_ödex
);

415 i‡(
ôî
->
r_ödex
 > 
h_ödex
)

416  
NULL
;

418 
ôî
->
mask
 = 1UL << (
roŸ
->
ödex_bôs
 - 1);

419 
ôî
->
cur
 = 
roŸ
->
¥io_åì_node
;

422 i‡(
	`ovîœp
(
ôî
, 
r_ödex
, 
h_ödex
))

423  
ôî
->
cur
;

425 i‡(
	`¥io_åì_À·
(
ôî
, &
r_ödex
, &
h_ödex
))

428 i‡(
	`¥io_åì_right
(
ôî
, &
r_ödex
, &
h_ödex
))

433  
NULL
;

434 
	}
}

441 
¥io_åì_node
 *
	$¥io_åì_√xt
(
¥io_åì_ôî
 *
ôî
)

443 
r_ödex
, 
h_ödex
;

445 i‡(
ôî
->
cur
 =
NULL
)

446  
	`¥io_åì_fú°
(
ôî
);

448 
ª≥©
:

449 
	`¥io_åì_À·
(
ôî
, &
r_ödex
, &
h_ödex
))

450 i‡(
	`ovîœp
(
ôî
, 
r_ödex
, 
h_ödex
))

451  
ôî
->
cur
;

453 !
	`¥io_åì_right
(
ôî
, &
r_ödex
, &
h_ödex
)) {

454 !
	`¥io_åì_roŸ
(
ôî
->
cur
) &&

455 
ôî
->
cur
->
∑ª¡
->
right
 == iter->cur)

456 
	`¥io_åì_∑ª¡
(
ôî
);

458 i‡(
	`¥io_åì_roŸ
(
ôî
->
cur
))

459  
NULL
;

461 
	`¥io_åì_∑ª¡
(
ôî
);

464 i‡(
	`ovîœp
(
ôî
, 
r_ödex
, 
h_ödex
))

465  
ôî
->
cur
;

467 
ª≥©
;

468 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/prio_tree.h

1 #i‚de‡
_LINUX_PRIO_TREE_H


2 
	#_LINUX_PRIO_TREE_H


	)

4 
	~<öây≥s.h
>

5 
	~"../hash.h
"

7 
	s¥io_åì_node
 {

8 
¥io_åì_node
 *
	mÀ·
;

9 
¥io_åì_node
 *
	mright
;

10 
¥io_åì_node
 *
	m∑ª¡
;

11 
uöt64_t
 
	m°¨t
;

12 
uöt64_t
 
	mœ°
;

15 
	s¥io_åì_roŸ
 {

16 
¥io_åì_node
 *
	m¥io_åì_node
;

17 
	mödex_bôs
;

20 
	s¥io_åì_ôî
 {

21 
¥io_åì_node
 *
	mcur
;

22 
	mmask
;

23 
	mvÆue
;

24 
	msize_Àvñ
;

26 
¥io_åì_roŸ
 *
	mroŸ
;

27 
uöt64_t
 
	mr_ödex
;

28 
uöt64_t
 
	mh_ödex
;

31 
ölöe
 
	$¥io_åì_ôî_öô
(
¥io_åì_ôî
 *
ôî
,

32 
¥io_åì_roŸ
 *
roŸ
, 
uöt64_t
 
r_ödex
, uöt64_à
h_ödex
)

34 
ôî
->
roŸ
 =Ñoot;

35 
ôî
->
r_ödex
 =Ñ_index;

36 
ôî
->
h_ödex
 = h_index;

37 
ôî
->
cur
 = 
NULL
;

38 
	}
}

40 
	#INIT_PRIO_TREE_ROOT
(
±r
) \

42 (
±r
)->
¥io_åì_node
 = 
NULL
; \

43 (
±r
)->
ödex_bôs
 = 1; \

44 } 0)

	)

46 
	#INIT_PRIO_TREE_NODE
(
±r
) \

48 (
±r
)->
À·
 = (±r)->
right
 = (±r)->
∑ª¡
 = (ptr); \

49 } 0)

	)

51 
	#INIT_PRIO_TREE_ITER
(
±r
) \

53 (
±r
)->
cur
 = 
NULL
; \

54 (
±r
)->
mask
 = 0UL; \

55 (
±r
)->
vÆue
 = 0UL; \

56 (
±r
)->
size_Àvñ
 = 0; \

57 } 0)

	)

59 
	#¥io_åì_íåy
(
±r
, 
ty≥
, 
membî
) \

60 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

62 
ölöe
 
	$¥io_åì_em±y
(c⁄° 
¥io_åì_roŸ
 *
roŸ
)

64  
roŸ
->
¥io_åì_node
 =
NULL
;

65 
	}
}

67 
ölöe
 
	$¥io_åì_roŸ
(c⁄° 
¥io_åì_node
 *
node
)

69  
node
->
∑ª¡
 ==Çode;

70 
	}
}

72 
ölöe
 
	$¥io_åì_À·_em±y
(c⁄° 
¥io_åì_node
 *
node
)

74  
node
->
À·
 ==Çode;

75 
	}
}

77 
ölöe
 
	$¥io_åì_right_em±y
(c⁄° 
¥io_åì_node
 *
node
)

79  
node
->
right
 ==Çode;

80 
	}
}

83 
¥io_åì_node
 *
¥io_åì_ª∂a˚
(
¥io_åì_roŸ
 *
roŸ
,

84 
¥io_åì_node
 *
ﬁd
, ¥io_åì_nodê*
node
);

85 
¥io_åì_node
 *
¥io_åì_ö£π
(
¥io_åì_roŸ
 *
roŸ
,

86 
¥io_åì_node
 *
node
);

87 
¥io_åì_ªmove
(
¥io_åì_roŸ
 *
roŸ
, 
¥io_åì_node
 *
node
);

88 
¥io_åì_node
 *
¥io_åì_√xt
(
¥io_åì_ôî
 *
ôî
);

	@/home/ysjin/Desktop/fio/fio/lib/rand.c

36 
	~<°rög.h
>

37 
	~<as£π.h
>

38 
	~"ønd.h
"

39 
	~"∑âîn.h
"

40 
	~"../hash.h
"

42 
	g¨ch_øndom
;

44 
ölöe
 
uöt64_t
 
	$__£ed
(
uöt64_t
 
x
, uöt64_à
m
)

46  (
x
 < 
m
) ? x + m : x;

47 
	}
}

49 
	$__öô_ønd32
(
èus88_°©e
 *
°©e
, 
£ed
)

51 
¸™ks
 = 6;

53 
	#LCG
(
x
, 
£ed
Ë((xË* 69069 ^ (£ed))

	)

55 
°©e
->
s1
 = 
	`__£ed
(
	`LCG
((2^31Ë+ (2^17Ë+ (2^7), 
£ed
), 1);

56 
°©e
->
s2
 = 
	`__£ed
(
	`LCG
(°©e->
s1
, 
£ed
), 7);

57 
°©e
->
s3
 = 
	`__£ed
(
	`LCG
(°©e->
s2
, 
£ed
), 15);

59 
¸™ks
--)

60 
	`__ønd32
(
°©e
);

61 
	}
}

63 
	$__öô_ønd64
(
èus258_°©e
 *
°©e
, 
uöt64_t
 
£ed
)

65 
¸™ks
 = 6;

67 
	#LCG64
(
x
, 
£ed
Ë((xË* 6906969069ULL ^ (£ed))

	)

69 
°©e
->
s1
 = 
	`__£ed
(
	`LCG64
((2^31Ë+ (2^17Ë+ (2^7), 
£ed
), 1);

70 
°©e
->
s2
 = 
	`__£ed
(
	`LCG64
(°©e->
s1
, 
£ed
), 7);

71 
°©e
->
s3
 = 
	`__£ed
(
	`LCG64
(°©e->
s2
, 
£ed
), 15);

72 
°©e
->
s4
 = 
	`__£ed
(
	`LCG64
(°©e->
s3
, 
£ed
), 33);

73 
°©e
->
s5
 = 
	`__£ed
(
	`LCG64
(°©e->
s4
, 
£ed
), 49);

75 
¸™ks
--)

76 
	`__ønd64
(
°©e
);

77 
	}
}

79 
	$öô_ønd
(
‰™d_°©e
 *
°©e
, 
boﬁ
 
u£64
)

81 
°©e
->
u£64
 = use64;

83 i‡(!
u£64
)

84 
	`__öô_ønd32
(&
°©e
->
°©e32
, 1);

86 
	`__öô_ønd64
(&
°©e
->
°©e64
, 1);

87 
	}
}

89 
	$öô_ønd_£ed
(
‰™d_°©e
 *
°©e
, 
£ed
, 
boﬁ
 
u£64
)

91 
°©e
->
u£64
 = use64;

93 i‡(!
u£64
)

94 
	`__öô_ønd32
(&
°©e
->
°©e32
, 
£ed
);

96 
	`__öô_ønd64
(&
°©e
->
°©e64
, 
£ed
);

97 
	}
}

99 
	$__fûl_øndom_buf
(*
buf
, 
Àn
, 
£ed
)

101 *
±r
 = 
buf
;

103 
Àn
) {

104 
this_Àn
;

106 i‡(
Àn
 >(
öt64_t
)) {

107 *((
öt64_t
 *Ë
±r
Ë
£ed
;

108 
this_Àn
 = (
öt64_t
);

109 } i‡(
Àn
 >(
öt32_t
)) {

110 *((
öt32_t
 *Ë
±r
Ë
£ed
;

111 
this_Àn
 = (
öt32_t
);

112 } i‡(
Àn
 >(
öt16_t
)) {

113 *((
öt16_t
 *Ë
±r
Ë
£ed
;

114 
this_Àn
 = (
öt16_t
);

116 *((
öt8_t
 *Ë
±r
Ë
£ed
;

117 
this_Àn
 = (
öt8_t
);

119 
±r
 +
this_Àn
;

120 
Àn
 -
this_Àn
;

121 
£ed
 *
GOLDEN_RATIO_PRIME
;

122 
£ed
 >>= 3;

124 
	}
}

126 
	$fûl_øndom_buf
(
‰™d_°©e
 *
fs
, *
buf
,

127 
Àn
)

129 
r
 = 
	`__ønd
(
fs
);

132 
r
 *(Ë
	`__ønd
(
fs
);

134 
	`__fûl_øndom_buf
(
buf
, 
Àn
, 
r
);

135  
r
;

136 
	}
}

138 
	$__fûl_øndom_buf_≥r˚¡age
(
£ed
, *
buf
,

139 
≥r˚¡age
,

140 
£gmít
, 
Àn
,

141 *
∑âîn
, 
pbyãs
)

143 
this_Àn
;

145 i‡(
≥r˚¡age
 == 100) {

146 i‡(
pbyãs
)

147 ()
	`˝y_∑âîn
(
∑âîn
, 
pbyãs
, 
buf
, 
Àn
);

149 
	`mem£t
(
buf
, 0, 
Àn
);

153 i‡(
£gmít
 > 
Àn
)

154 
£gmít
 = 
Àn
;

156 
Àn
) {

160 
this_Àn
 = (
£gmít
 * (100 - 
≥r˚¡age
)) / 100;

161 i‡(
this_Àn
 > 
Àn
)

162 
this_Àn
 = 
Àn
;

164 
	`__fûl_øndom_buf
(
buf
, 
this_Àn
, 
£ed
);

166 
Àn
 -
this_Àn
;

167 i‡(!
Àn
)

169 
buf
 +
this_Àn
;

171 i‡(
this_Àn
 > 
Àn
)

172 
this_Àn
 = 
Àn
;

173 i‡(
Àn
 - 
this_Àn
 <= ())

174 
this_Àn
 = 
Àn
;

176 i‡(
pbyãs
)

177 ()
	`˝y_∑âîn
(
∑âîn
, 
pbyãs
, 
buf
, 
this_Àn
);

179 
	`mem£t
(
buf
, 0, 
this_Àn
);

181 
Àn
 -
this_Àn
;

182 
buf
 +
this_Àn
;

184 
	}
}

186 
	$fûl_øndom_buf_≥r˚¡age
(
‰™d_°©e
 *
fs
, *
buf
,

187 
≥r˚¡age
,

188 
£gmít
, 
Àn
,

189 *
∑âîn
, 
pbyãs
)

191 
r
 = 
	`__ønd
(
fs
);

194 
r
 *(Ë
	`__ønd
(
fs
);

196 
	`__fûl_øndom_buf_≥r˚¡age
(
r
, 
buf
, 
≥r˚¡age
, 
£gmít
, 
Àn
,

197 
∑âîn
, 
pbyãs
);

198  
r
;

199 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/rand.h

1 #i‚de‡
FIO_RAND_H


2 
	#FIO_RAND_H


	)

4 
	~<öây≥s.h
>

5 
	~<as£π.h
>

6 
	~"ty≥s.h
"

7 
	~"../¨ch/¨ch.h
"

9 
	#FRAND32_MAX
 (-1U)

	)

10 
	#FRAND64_MAX
 (-1ULL)

	)

12 
	sèus88_°©e
 {

13 
	ms1
, 
	ms2
, 
	ms3
;

16 
	sèus258_°©e
 {

17 
uöt64_t
 
	ms1
, 
	ms2
, 
	ms3
, 
	ms4
, 
	ms5
;

20 
	s‰™d_°©e
 {

21 
	mu£64
;

23 
èus88_°©e
 
	m°©e32
;

24 
èus258_°©e
 
	m°©e64
;

28 
ölöe
 
uöt64_t
 
	$ønd_max
(
‰™d_°©e
 *
°©e
)

30 i‡(
°©e
->
u£64
)

31  
FRAND64_MAX
;

33  
FRAND32_MAX
;

34 
	}
}

36 
ölöe
 
	$__‰™d32_c›y
(
èus88_°©e
 *
d°
,

37 
èus88_°©e
 *
§c
)

39 
d°
->
s1
 = 
§c
->s1;

40 
d°
->
s2
 = 
§c
->s2;

41 
d°
->
s3
 = 
§c
->s3;

42 
	}
}

44 
ölöe
 
	$__‰™d64_c›y
(
èus258_°©e
 *
d°
,

45 
èus258_°©e
 *
§c
)

47 
d°
->
s1
 = 
§c
->s1;

48 
d°
->
s2
 = 
§c
->s2;

49 
d°
->
s3
 = 
§c
->s3;

50 
d°
->
s4
 = 
§c
->s4;

51 
d°
->
s5
 = 
§c
->s5;

52 
	}
}

54 
ölöe
 
	$‰™d_c›y
(
‰™d_°©e
 *
d°
, ‰™d_°©ê*
§c
)

56 i‡(
§c
->
u£64
)

57 
	`__‰™d64_c›y
(&
d°
->
°©e64
, &
§c
->state64);

59 
	`__‰™d32_c›y
(&
d°
->
°©e32
, &
§c
->state32);

61 
d°
->
u£64
 = 
§c
->use64;

62 
	}
}

64 
ölöe
 
	$__ønd32
(
èus88_°©e
 *
°©e
)

66 
	#TAUSWORTHE
(
s
,
a
,
b
,
c
,
d
Ë((s&c)<<dË^ (((†<<aË^ s)>>b)

	)

68 
°©e
->
s1
 = 
	`TAUSWORTHE
(state->s1, 13, 19, 4294967294UL, 12);

69 
°©e
->
s2
 = 
	`TAUSWORTHE
(state->s2, 2, 25, 4294967288UL, 4);

70 
°©e
->
s3
 = 
	`TAUSWORTHE
(state->s3, 3, 11, 4294967280UL, 17);

72  (
°©e
->
s1
 ^ sèã->
s2
 ^ sèã->
s3
);

73 
	}
}

75 
ölöe
 
uöt64_t
 
	$__ønd64
(
èus258_°©e
 *
°©e
)

77 
uöt64_t
 
xvÆ
;

79 
xvÆ
 = ((
°©e
->
s1
 << 1) ^ state->s1) >> 53;

80 
°©e
->
s1
 = ((°©e->s1 & 18446744073709551614ULLË<< 10Ë^ 
xvÆ
;

82 
xvÆ
 = ((
°©e
->
s2
 << 24) ^ state->s2) >> 50;

83 
°©e
->
s2
 = ((°©e->s2 & 18446744073709551104ULLË<< 5Ë^ 
xvÆ
;

85 
xvÆ
 = ((
°©e
->
s3
 << 3) ^ state->s3) >> 23;

86 
°©e
->
s3
 = ((°©e->s3 & 18446744073709547520ULLË<< 29Ë^ 
xvÆ
;

88 
xvÆ
 = ((
°©e
->
s4
 << 5) ^ state->s4) >> 24;

89 
°©e
->
s4
 = ((°©e->s4 & 18446744073709420544ULLË<< 23Ë^ 
xvÆ
;

91 
xvÆ
 = ((
°©e
->
s5
 << 3) ^ state->s5) >> 33;

92 
°©e
->
s5
 = ((°©e->s5 & 18446744073701163008ULLË<< 8Ë^ 
xvÆ
;

94  (
°©e
->
s1
 ^ sèã->
s2
 ^ sèã->
s3
 ^ sèã->
s4
 ^ sèã->
s5
);

95 
	}
}

97 
ölöe
 
uöt64_t
 
	$__ønd
(
‰™d_°©e
 *
°©e
)

99 i‡(
°©e
->
u£64
)

100  
	`__ønd64
(&
°©e
->
°©e64
);

102  
	`__ønd32
(&
°©e
->
°©e32
);

103 
	}
}

105 
ölöe
 
	$__ønd_0_1
(
‰™d_°©e
 *
°©e
)

107 i‡(
°©e
->
u£64
) {

108 
uöt64_t
 
vÆ
 = 
	`__ønd64
(&
°©e
->
°©e64
);

110  (
vÆ
 + 1.0Ë/ (
FRAND64_MAX
 + 1.0);

112 
uöt32_t
 
vÆ
 = 
	`__ønd32
(&
°©e
->
°©e32
);

114  (
vÆ
 + 1.0Ë/ (
FRAND32_MAX
 + 1.0);

116 
	}
}

121 
ölöe
 
	$ønd32_bëwìn
(
‰™d_°©e
 *
°©e
, 
°¨t
, 
íd
)

123 
uöt32_t
 
r
;

125 
	`as£π
(!
°©e
->
u£64
);

127 
r
 = 
	`__ønd32
(&
°©e
->
°©e32
);

128  
°¨t
 + (Ë(()
íd
 * (
r
 / (
FRAND32_MAX
 + 1.0)));

129 
	}
}

131 
öô_ønd
(
‰™d_°©e
 *, 
boﬁ
);

132 
öô_ønd_£ed
(
‰™d_°©e
 *, 
£ed
, 
boﬁ
);

133 
__fûl_øndom_buf
(*
buf
, 
Àn
, 
£ed
);

134 
fûl_øndom_buf
(
‰™d_°©e
 *, *
buf
, 
Àn
);

135 
__fûl_øndom_buf_≥r˚¡age
(, *, , , , *, );

136 
fûl_øndom_buf_≥r˚¡age
(
‰™d_°©e
 *, *, , , , *, );

	@/home/ysjin/Desktop/fio/fio/lib/rbtree.c

23 
	~"rbåì.h
"

25 
	$__rb_rŸ©e_À·
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

27 
rb_node
 *
right
 = 
node
->
rb_right
;

28 
rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

30 i‡((
node
->
rb_right
 = 
right
->
rb_À·
))

31 
	`rb_£t_∑ª¡
(
right
->
rb_À·
, 
node
);

32 
right
->
rb_À·
 = 
node
;

34 
	`rb_£t_∑ª¡
(
right
, 
∑ª¡
);

36 i‡(
∑ª¡
)

38 i‡(
node
 =
∑ª¡
->
rb_À·
)

39 
∑ª¡
->
rb_À·
 = 
right
;

41 
∑ª¡
->
rb_right
 = 
right
;

44 
roŸ
->
rb_node
 = 
right
;

45 
	`rb_£t_∑ª¡
(
node
, 
right
);

46 
	}
}

48 
	$__rb_rŸ©e_right
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

50 
rb_node
 *
À·
 = 
node
->
rb_À·
;

51 
rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

53 i‡((
node
->
rb_À·
 = 
À·
->
rb_right
))

54 
	`rb_£t_∑ª¡
(
À·
->
rb_right
, 
node
);

55 
À·
->
rb_right
 = 
node
;

57 
	`rb_£t_∑ª¡
(
À·
, 
∑ª¡
);

59 i‡(
∑ª¡
)

61 i‡(
node
 =
∑ª¡
->
rb_right
)

62 
∑ª¡
->
rb_right
 = 
À·
;

64 
∑ª¡
->
rb_À·
 = 
À·
;

67 
roŸ
->
rb_node
 = 
À·
;

68 
	`rb_£t_∑ª¡
(
node
, 
À·
);

69 
	}
}

71 
	$rb_ö£π_cﬁ‹
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

73 
rb_node
 *
∑ª¡
, *
g∑ª¡
;

75 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&& 
	`rb_is_ªd
(parent))

77 
g∑ª¡
 = 
	`rb_∑ª¡
(
∑ª¡
);

79 i‡(
∑ª¡
 =
g∑ª¡
->
rb_À·
)

82 
rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_right
;

83 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

85 
	`rb_£t_bœck
(
un˛e
);

86 
	`rb_£t_bœck
(
∑ª¡
);

87 
	`rb_£t_ªd
(
g∑ª¡
);

88 
node
 = 
g∑ª¡
;

93 i‡(
∑ª¡
->
rb_right
 =
node
)

95 
rb_node
 *
tmp
;

96 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

97 
tmp
 = 
∑ª¡
;

98 
∑ª¡
 = 
node
;

99 
node
 = 
tmp
;

102 
	`rb_£t_bœck
(
∑ª¡
);

103 
	`rb_£t_ªd
(
g∑ª¡
);

104 
	`__rb_rŸ©e_right
(
g∑ª¡
, 
roŸ
);

107 
rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_À·
;

108 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

110 
	`rb_£t_bœck
(
un˛e
);

111 
	`rb_£t_bœck
(
∑ª¡
);

112 
	`rb_£t_ªd
(
g∑ª¡
);

113 
node
 = 
g∑ª¡
;

118 i‡(
∑ª¡
->
rb_À·
 =
node
)

120 
rb_node
 *
tmp
;

121 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

122 
tmp
 = 
∑ª¡
;

123 
∑ª¡
 = 
node
;

124 
node
 = 
tmp
;

127 
	`rb_£t_bœck
(
∑ª¡
);

128 
	`rb_£t_ªd
(
g∑ª¡
);

129 
	`__rb_rŸ©e_À·
(
g∑ª¡
, 
roŸ
);

133 
	`rb_£t_bœck
(
roŸ
->
rb_node
);

134 
	}
}

136 
	$__rb_îa£_cﬁ‹
(
rb_node
 *
node
, rb_nodê*
∑ª¡
,

137 
rb_roŸ
 *
roŸ
)

139 
rb_node
 *
Ÿhî
;

141 (!
node
 || 
	`rb_is_bœck
“ode)Ë&&Çodê!
roŸ
->
rb_node
)

143 i‡(
∑ª¡
->
rb_À·
 =
node
)

145 
Ÿhî
 = 
∑ª¡
->
rb_right
;

146 i‡(
	`rb_is_ªd
(
Ÿhî
))

148 
	`rb_£t_bœck
(
Ÿhî
);

149 
	`rb_£t_ªd
(
∑ª¡
);

150 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

151 
Ÿhî
 = 
∑ª¡
->
rb_right
;

153 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

154 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

156 
	`rb_£t_ªd
(
Ÿhî
);

157 
node
 = 
∑ª¡
;

158 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

162 i‡(!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right))

164 
rb_node
 *
o_À·
;

165 i‡((
o_À·
 = 
Ÿhî
->
rb_À·
))

166 
	`rb_£t_bœck
(
o_À·
);

167 
	`rb_£t_ªd
(
Ÿhî
);

168 
	`__rb_rŸ©e_right
(
Ÿhî
, 
roŸ
);

169 
Ÿhî
 = 
∑ª¡
->
rb_right
;

171 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

172 
	`rb_£t_bœck
(
∑ª¡
);

173 i‡(
Ÿhî
->
rb_right
)

174 
	`rb_£t_bœck
(
Ÿhî
->
rb_right
);

175 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

176 
node
 = 
roŸ
->
rb_node
;

182 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

183 i‡(
	`rb_is_ªd
(
Ÿhî
))

185 
	`rb_£t_bœck
(
Ÿhî
);

186 
	`rb_£t_ªd
(
∑ª¡
);

187 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

188 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

190 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

191 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

193 
	`rb_£t_ªd
(
Ÿhî
);

194 
node
 = 
∑ª¡
;

195 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

199 i‡(!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left))

201 
rb_node
 *
o_right
;

202 i‡((
o_right
 = 
Ÿhî
->
rb_right
))

203 
	`rb_£t_bœck
(
o_right
);

204 
	`rb_£t_ªd
(
Ÿhî
);

205 
	`__rb_rŸ©e_À·
(
Ÿhî
, 
roŸ
);

206 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

208 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

209 
	`rb_£t_bœck
(
∑ª¡
);

210 i‡(
Ÿhî
->
rb_À·
)

211 
	`rb_£t_bœck
(
Ÿhî
->
rb_À·
);

212 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

213 
node
 = 
roŸ
->
rb_node
;

218 i‡(
node
)

219 
	`rb_£t_bœck
(
node
);

220 
	}
}

222 
	$rb_îa£
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

224 
rb_node
 *
chûd
, *
∑ª¡
;

225 
cﬁ‹
;

227 i‡(!
node
->
rb_À·
)

228 
chûd
 = 
node
->
rb_right
;

229 i‡(!
node
->
rb_right
)

230 
chûd
 = 
node
->
rb_À·
;

233 
rb_node
 *
ﬁd
 = 
node
, *
À·
;

235 
node
 =Çode->
rb_right
;

236 (
À·
 = 
node
->
rb_À·
Ë!
NULL
)

237 
node
 = 
À·
;

238 
chûd
 = 
node
->
rb_right
;

239 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

240 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

242 i‡(
chûd
)

243 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

244 i‡(
∑ª¡
 =
ﬁd
) {

245 
∑ª¡
->
rb_right
 = 
chûd
;

246 
∑ª¡
 = 
node
;

248 
∑ª¡
->
rb_À·
 = 
chûd
;

250 
node
->
rb_∑ª¡_cﬁ‹
 = 
ﬁd
->rb_parent_color;

251 
node
->
rb_right
 = 
ﬁd
->rb_right;

252 
node
->
rb_À·
 = 
ﬁd
->rb_left;

254 i‡(
	`rb_∑ª¡
(
ﬁd
))

256 i‡(
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 == old)

257 
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 = 
node
;

259 
	`rb_∑ª¡
(
ﬁd
)->
rb_right
 = 
node
;

261 
roŸ
->
rb_node
 = 
node
;

263 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_À·
, 
node
);

264 i‡(
ﬁd
->
rb_right
)

265 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_right
, 
node
);

266 
cﬁ‹
;

269 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

270 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

272 i‡(
chûd
)

273 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

274 i‡(
∑ª¡
)

276 i‡(
∑ª¡
->
rb_À·
 =
node
)

277 
∑ª¡
->
rb_À·
 = 
chûd
;

279 
∑ª¡
->
rb_right
 = 
chûd
;

282 
roŸ
->
rb_node
 = 
chûd
;

284 
cﬁ‹
:

285 i‡(
cﬁ‹
 =
RB_BLACK
)

286 
	`__rb_îa£_cﬁ‹
(
chûd
, 
∑ª¡
, 
roŸ
);

287 
	}
}

292 
rb_node
 *
	$rb_fú°
(
rb_roŸ
 *
roŸ
)

294 
rb_node
 *
n
;

296 
n
 = 
roŸ
->
rb_node
;

297 i‡(!
n
)

298  
NULL
;

299 
n
->
rb_À·
)

300 
n
 =Ç->
rb_À·
;

301  
n
;

302 
	}
}

304 
rb_node
 *
	$rb_√xt
(c⁄° 
rb_node
 *
node
)

306 
rb_node
 *
∑ª¡
;

308 i‡(
	`RB_EMPTY_NODE
(
node
))

309  
NULL
;

315 i‡(
node
->
rb_right
) {

316 
node
 =Çode->
rb_right
;

317 
node
->
rb_À·
)

318 
node
Úode->
rb_À·
;

319  (
rb_node
 *)
node
;

329 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&&Çodê=∑ª¡->
rb_right
)

330 
node
 = 
∑ª¡
;

332  
∑ª¡
;

333 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/rbtree.h

94 #i‚def 
_LINUX_RBTREE_H


95 
	#_LINUX_RBTREE_H


	)

97 
	~<°dlib.h
>

98 
	~<öây≥s.h
>

100 
	srb_node


102 
öçå_t
 
	mrb_∑ª¡_cﬁ‹
;

103 
	#RB_RED
 0

	)

104 
	#RB_BLACK
 1

	)

105 
rb_node
 *
	mrb_right
;

106 
rb_node
 *
	mrb_À·
;

107 } 
__©åibuã__
((
Æig√d
(())));

110 
	srb_roŸ


112 
rb_node
 *
	mrb_node
;

116 
	#rb_∑ª¡
(
r
Ë((
rb_node
 *)(‘)->
rb_∑ª¡_cﬁ‹
 & ~3))

	)

117 
	#rb_cﬁ‹
(
r
Ë(‘)->
rb_∑ª¡_cﬁ‹
 & 1)

	)

118 
	#rb_is_ªd
(
r
Ë(!
	`rb_cﬁ‹
‘))

	)

119 
	#rb_is_bœck
(
r
Ë
	`rb_cﬁ‹
‘)

	)

120 
	#rb_£t_ªd
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 &~1; } 0)

	)

121 
	#rb_£t_bœck
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 |1; } 0)

	)

123 
ölöe
 
	$rb_£t_∑ª¡
(
rb_node
 *
rb
, rb_nodê*
p
)

125 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & 3Ë| (
uöçå_t
)
p
;

126 
	}
}

127 
ölöe
 
	$rb_£t_cﬁ‹
(
rb_node
 *
rb
, 
cﬁ‹
)

129 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & ~1Ë| 
cﬁ‹
;

130 
	}
}

132 
	#RB_ROOT
 (
rb_roŸ
Ë{ 
NULL
, }

	)

133 
	#rb_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,Åy≥, membî)

	)

135 
	#RB_EMPTY_ROOT
(
roŸ
Ë(‘oŸ)->
rb_node
 =
NULL
)

	)

136 
	#RB_EMPTY_NODE
(
node
Ë(
	`rb_∑ª¡
“odeË=node)

	)

137 
	#RB_CLEAR_NODE
(
node
Ë(
	`rb_£t_∑ª¡
“ode,Çode))

	)

139 
rb_ö£π_cﬁ‹
(
rb_node
 *, 
rb_roŸ
 *);

140 
rb_îa£
(
rb_node
 *, 
rb_roŸ
 *);

143 
rb_node
 *
rb_fú°
(
rb_roŸ
 *);

144 
rb_node
 *
rb_√xt
(const rb_node *);

146 
ölöe
 
	$rb_lök_node
(
rb_node
 * 
node
, rb_nodê* 
∑ª¡
,

147 
rb_node
 ** 
rb_lök
)

149 
node
->
rb_∑ª¡_cﬁ‹
 = (
uöçå_t
)
∑ª¡
;

150 
node
->
rb_À·
 =Çode->
rb_right
 = 
NULL
;

152 *
rb_lök
 = 
node
;

153 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/seqlock.h

1 #i‚de‡
FIO_SEQLOCK_H


2 
	#FIO_SEQLOCK_H


	)

4 
	~"ty≥s.h
"

5 
	~"../¨ch/¨ch.h
"

7 
	s£qlock
 {

8 vﬁ©ûê
	m£quí˚
;

11 
ölöe
 
	$£qlock_öô
(
£qlock
 *
s
)

13 
s
->
£quí˚
 = 0;

14 
	}
}

16 
ölöe
 
	$ªad_£qlock_begö
(
£qlock
 *
s
)

18 
£q
;

21 
£q
 = 
s
->
£quí˚
;

22 i‡(!(
£q
 & 1))

24 
n›
;

27 
	`ªad_b¨rõr
();

28  
£q
;

29 
	}
}

31 
ölöe
 
boﬁ
 
	$ªad_£qlock_ªåy
(
£qlock
 *
s
, 
£q
)

33 
	`ªad_b¨rõr
();

34  
s
->
£quí˚
 !
£q
;

35 
	}
}

37 
ölöe
 
	$wrôe_£qlock_begö
(
£qlock
 *
s
)

39 
s
->
£quí˚
++;

40 
	`wrôe_b¨rõr
();

41 
	}
}

43 
ölöe
 
	$wrôe_£qlock_íd
(
£qlock
 *
s
)

45 
	`wrôe_b¨rõr
();

46 
s
->
£quí˚
++;

47 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/strntol.c

1 
	~<°rög.h
>

2 
	~<°dlib.h
>

3 
	~<limôs.h
>

5 
	~"°∫tﬁ.h
"

7 
	$°∫tﬁ
(c⁄° *
°r
, 
size_t
 
sz
, **
íd
, 
ba£
)

11 
buf
[24];

12 
ªt
;

13 c⁄° *
beg
 = 
°r
;

16 ; 
beg
 && 
sz
 && *beg == ' '; beg++, sz--)

19 i‡(!
sz
 || sz >(
buf
)) {

20 i‡(
íd
)

21 *
íd
 = (*)
°r
;

25 
	`mem˝y
(
buf
, 
beg
, 
sz
);

26 
buf
[
sz
] = '\0';

27 
ªt
 = 
	`°πﬁ
(
buf
, 
íd
, 
ba£
);

28 i‡(
ªt
 =
LONG_MIN
 ||Ñë =
LONG_MAX
)

29  
ªt
;

30 i‡(
íd
)

31 *
íd
 = (*)
°r
 + (*íd - 
buf
);

32  
ªt
;

33 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/strntol.h

1 #i‚de‡
FIO_STRNTOL_H


2 
	#FIO_STRNTOL_H


	)

4 
°∫tﬁ
(c⁄° *
°r
, 
size_t
 
sz
, **
íd
, 
ba£
);

	@/home/ysjin/Desktop/fio/fio/lib/types.h

1 #i‚de‡
FIO_TYPES_H


2 
	#FIO_TYPES_H


	)

4 #i‡!
deföed
(
CONFIG_HAVE_BOOL
Ë&& !deföed(
__˝lu•lus
)

5 
	tboﬁ
;

6 #i‚de‡
Ál£


7 
	#Ál£
 0

	)

9 #i‚de‡
åue


10 
	#åue
 1

	)

13 
	~<°dboﬁ.h
>

	@/home/ysjin/Desktop/fio/fio/lib/zipf.c

1 
	~<m©h.h
>

2 
	~<°rög.h
>

3 
	~<öây≥s.h
>

4 
	~<°dio.h
>

5 
	~<uni°d.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<f˙é.h
>

8 
	~"õì754.h
"

9 
	~"zùf.h
"

10 
	~"../mömax.h
"

11 
	~"../hash.h
"

13 
	#ZIPF_MAX_GEN
 10000000UL

	)

15 
	$zùf_upd©e
(
zùf_°©e
 *
zs
)

17 
to_gí
;

18 
i
;

25 
to_gí
 = 
	`mö
(
zs
->
ƒ™ges
, (
uöt64_t
Ë
ZIPF_MAX_GEN
);

27 
i
 = 0; i < 
to_gí
; i++)

28 
zs
->
zë™
 +
	`pow
(1.0 / (Ë(
i
 + 1), zs->
thëa
);

29 
	}
}

31 
	$sh¨ed_ønd_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
,

32 
£ed
)

34 
	`mem£t
(
zs
, 0, (*zs));

35 
zs
->
ƒ™ges
 =Çranges;

37 
	`öô_ønd_£ed
(&
zs
->
ønd
, 
£ed
, 0);

38 
zs
->
ønd_off
 = 
	`__ønd
(&zs->
ønd
);

39 
	}
}

41 
	$zùf_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
thëa
,

42 
£ed
)

44 
	`sh¨ed_ønd_öô
(
zs
, 
ƒ™ges
, 
£ed
);

46 
zs
->
thëa
 =Åheta;

47 
zs
->
zëa2
 = 
	`pow
(1.0, zs->
thëa
) +Öow(0.5, zs->theta);

49 
	`zùf_upd©e
(
zs
);

50 
	}
}

52 
	$zùf_√xt
(
zùf_°©e
 *
zs
)

54 
Æpha
, 
ëa
, 
ønd_uni
, 
ønd_z
;

55 
n
 = 
zs
->
ƒ™ges
;

56 
vÆ
;

58 
Æpha
 = 1.0 / (1.0 - 
zs
->
thëa
);

59 
ëa
 = (1.0 - 
	`pow
(2.0 / 
n
, 1.0 - 
zs
->
thëa
)Ë/ (1.0 - zs->
zëa2
 / zs->
zë™
);

61 
ønd_uni
 = (Ë
	`__ønd
(&
zs
->
ønd
Ë/ (Ë
FRAND32_MAX
;

62 
ønd_z
 = 
ønd_uni
 * 
zs
->
zë™
;

64 i‡(
ønd_z
 < 1.0)

65 
vÆ
 = 1;

66 i‡(
ønd_z
 < (1.0 + 
	`pow
(0.5, 
zs
->
thëa
)))

67 
vÆ
 = 2;

69 
vÆ
 = 1 + ()(
n
 * 
	`pow
(
ëa
*
ønd_uni
 -Éè + 1.0, 
Æpha
));

71 
vÆ
--;

73 i‡(!
zs
->
dißbÀ_hash
)

74 
vÆ
 = 
	`__hash_u64
(val);

76  (
vÆ
 + 
zs
->
ønd_off
Ë% zs->
ƒ™ges
;

77 
	}
}

79 
	$∑ªto_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
h
,

80 
£ed
)

82 
	`sh¨ed_ønd_öô
(
zs
, 
ƒ™ges
, 
£ed
);

83 
zs
->
∑ªto_pow
 = 
	`log
(
h
) /Üog(1.0 - h);

84 
	}
}

86 
	$∑ªto_√xt
(
zùf_°©e
 *
zs
)

88 
ønd
 = (Ë
	`__ønd
(&
zs
->øndË/ (Ë
FRAND32_MAX
;

89 
n
;

91 
n
 = (
zs
->
ƒ™ges
 - 1Ë* 
	`pow
(
ønd
, zs->
∑ªto_pow
);

93 i‡(!
zs
->
dißbÀ_hash
)

94 
n
 = 
	`__hash_u64
(n);

96  (
n
 + 
zs
->
ønd_off
Ë% zs->
ƒ™ges
;

97 
	}
}

99 
	$zùf_dißbÀ_hash
(
zùf_°©e
 *
zs
)

101 
zs
->
dißbÀ_hash
 = 
åue
;

102 
	}
}

	@/home/ysjin/Desktop/fio/fio/lib/zipf.h

1 #i‚de‡
FIO_ZIPF_H


2 
	#FIO_ZIPF_H


	)

4 
	~<öây≥s.h
>

5 
	~"ønd.h
"

7 
	szùf_°©e
 {

8 
uöt64_t
 
	mƒ™ges
;

9 
	mthëa
;

10 
	mzëa2
;

11 
	mzë™
;

12 
	m∑ªto_pow
;

13 
‰™d_°©e
 
	mønd
;

14 
uöt64_t
 
	mønd_off
;

15 
boﬁ
 
	mdißbÀ_hash
;

18 
zùf_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
thëa
, 
£ed
);

19 
zùf_√xt
(
zùf_°©e
 *
zs
);

21 
∑ªto_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
h
, 
£ed
);

22 
∑ªto_√xt
(
zùf_°©e
 *
zs
);

23 
zùf_dißbÀ_hash
(
zùf_°©e
 *
zs
);

	@/home/ysjin/Desktop/fio/fio/libfio.c

25 
	~<°rög.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sig«l.h
>

28 
	~<°döt.h
>

29 
	~<loˇÀ.h
>

30 
	~<f˙é.h
>

32 
	~"fio.h
"

33 
	~"smÆloc.h
"

34 
	~"os/os.h
"

35 
	~"fûñock.h
"

36 
	~"hñ≥r_thªad.h
"

37 
	~"fûehash.h
"

39 
FLIST_HEAD
(
disk_li°
);

41 
	g¨ch_Êags
 = 0;

43 
uöçå_t
 
	g∑ge_mask
 = 0;

44 
uöçå_t
 
	g∑ge_size
 = 0;

47 c⁄° *
	gfio_os_°rögs
[
os_ƒ
] = {

63 c⁄° *
	gfio_¨ch_°rögs
[
¨ch_ƒ
] = {

81 
	$ª£t_io_cou¡îs
(
thªad_d©a
 *
td
, 
Æl
)

83 
ddú
;

85 i‡(
Æl
) {

86 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

87 
td
->
°©_io_byãs
[
ddú
] = 0;

88 
td
->
this_io_byãs
[
ddú
] = 0;

89 
td
->
°©_io_blocks
[
ddú
] = 0;

90 
td
->
this_io_blocks
[
ddú
] = 0;

91 
td
->
øã_byãs
[
ddú
] = 0;

92 
td
->
øã_blocks
[
ddú
] = 0;

93 
td
->
byãs_d⁄e
[
ddú
] = 0;

94 
td
->
øã_io_issue_byãs
[
ddú
] = 0;

95 
td
->
øã_√xt_io_time
[
ddú
] = 0;

99 
td
->
z⁄e_byãs
 = 0;

101 
td
->
œ°_was_sync
 = 
Ál£
;

102 
td
->
rwmix_issues
 = 0;

107 i‡(
td
->
o
.
time_ba£d
 ||Åd->o.
lo›s
 ||Åd->o.
do_vîify
)

108 
td
->
ƒ_d⁄e_fûes
 = 0;

109 
	}
}

111 
	$˛ór_io_°©e
(
thªad_d©a
 *
td
, 
Æl
)

113 
fio_fûe
 *
f
;

114 
i
;

116 
	`ª£t_io_cou¡îs
(
td
, 
Æl
);

118 
	`˛o£_fûes
(
td
);

119 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

120 
	`fio_fûe_˛ór_d⁄e
(
f
);

121 
f
->
fûe_off£t
 = 
	`gë_°¨t_off£t
(
td
, f);

127 i‡(
td
->
o
.
ønd_ª≥©abÀ
)

128 
	`td_fûl_ønd_£eds
(
td
);

129 
	}
}

131 
	$ª£t_Æl_°©s
(
thªad_d©a
 *
td
)

133 
i
;

135 
	`ª£t_io_cou¡îs
(
td
, 1);

137 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

138 
td
->
io_byãs
[
i
] = 0;

139 
td
->
io_blocks
[
i
] = 0;

140 
td
->
io_issues
[
i
] = 0;

141 
td
->
ts
.
tŸÆ_io_u
[
i
] = 0;

142 
td
->
ts
.
ru¡ime
[
i
] = 0;

143 
td
->
rwmix_issues
 = 0;

146 
	`£t_ïoch_time
(
td
,Åd->
o
.
log_unix_ïoch
);

147 
	`mem˝y
(&
td
->
°¨t
, &td->
ïoch
, (td->epoch));

148 
	`mem˝y
(&
td
->
i›s_ßm∂e_time
, &td->
ïoch
, (td->epoch));

149 
	`mem˝y
(&
td
->
bw_ßm∂e_time
, &td->
ïoch
, (td->epoch));

150 
	`mem˝y
(&
td
->
ss
.
¥ev_time
, &td->
ïoch
, (td->epoch));

152 
	`œt_èrgë_ª£t
(
td
);

153 
	`˛ór_rußge_°©
(
td
);

154 
	`hñ≥r_ª£t
();

155 
	}
}

157 
	$ª£t_fio_°©e
()

159 
groupid
 = 0;

160 
thªad_numbî
 = 0;

161 
°©_numbî
 = 0;

162 
d⁄e_£cs
 = 0;

163 
	}
}

165 c⁄° *
	$fio_gë_os_°rög
(
ƒ
)

167 i‡(
ƒ
 < 
os_ƒ
)

168  
fio_os_°rögs
[
ƒ
];

170  
NULL
;

171 
	}
}

173 c⁄° *
	$fio_gë_¨ch_°rög
(
ƒ
)

175 i‡(
ƒ
 < 
¨ch_ƒ
)

176  
fio_¨ch_°rögs
[
ƒ
];

178  
NULL
;

179 
	}
}

181 c⁄° *
	gtd_run°©es
[] = {

196 c⁄° *
	$run°©e_to_«me
(
run°©e
)

198 
	`compûëime_as£π
(
TD_LAST
 == 12, "tdÑunstateÜist");

199 i‡(
run°©e
 >0 &&Ñun°©ê< 
TD_LAST
)

200  
td_run°©es
[
run°©e
];

203 
	}
}

205 
	$td_£t_run°©e
(
thªad_d©a
 *
td
, 
run°©e
)

207 i‡(
td
->
run°©e
 ==Ñunstate)

210 
	`d¥öt
(
FD_PROCESS
, "pid=%d:Ñun°©ê%†-> %s\n", (Ë
td
->
pid
,

211 
	`run°©e_to_«me
(
td
->
run°©e
),

212 
	`run°©e_to_«me
(
run°©e
));

213 
td
->
run°©e
 =Ñunstate;

214 
	}
}

216 
	$td_bump_run°©e
(
thªad_d©a
 *
td
, 
√w_°©e
)

218 
ﬁd_°©e
 = 
td
->
run°©e
;

220 
	`td_£t_run°©e
(
td
, 
√w_°©e
);

221  
ﬁd_°©e
;

222 
	}
}

224 
	$td_ª°‹e_run°©e
(
thªad_d©a
 *
td
, 
ﬁd_°©e
)

226 
	`td_£t_run°©e
(
td
, 
ﬁd_°©e
);

227 
	}
}

229 
	$fio_m¨k_td_ãrmö©e
(
thªad_d©a
 *
td
)

231 
	`fio_gëtime
(&
td
->
ãrmö©e_time
, 
NULL
);

232 
	`wrôe_b¨rõr
();

233 
td
->
ãrmö©e
 = 
åue
;

234 
	}
}

236 
	$fio_ãrmö©e_thªads
(
group_id
)

238 
thªad_d©a
 *
td
;

239 
pid_t
 
pid
 = 
	`gëpid
();

240 
i
;

242 
	`d¥öt
(
FD_PROCESS
, "ãrmö©êgroup_id=%d\n", 
group_id
);

244 
	`f‹_óch_td
(
td
, 
i
) {

245 i‡(
group_id
 =
TERMINATE_ALL
 || group_id =
td
->
groupid
) {

246 
	`d¥öt
(
FD_PROCESS
, "settingÅerminate on %s/%d\n",

247 
td
->
o
.
«me
, (Ëtd->
pid
);

249 i‡(
td
->
ãrmö©e
)

252 
	`fio_m¨k_td_ãrmö©e
(
td
);

253 
td
->
o
.
°¨t_dñay
 = 0;

258 i‡(!
td
->
pid
 ||Öid ==Åd->pid)

260 i‡(
td
->
run°©e
 < 
TD_RAMP
)

261 
	`kûl
(
td
->
pid
, 
SIGTERM
);

263 
i€ngöe_›s
 *
›s
 = 
td
->
io_›s
;

265 i‡(
›s
 && ops->
ãrmö©e
)

266 
›s
->
	`ãrmö©e
(
td
);

270 
	}
}

272 
	$fio_ru¬ög_‹_≥ndög_io_thªads
()

274 
thªad_d©a
 *
td
;

275 
i
;

276 
ƒ_io_thªads
 = 0;

278 
	`f‹_óch_td
(
td
, 
i
) {

279 i‡(
td
->
io_›s_öô
 && 
	`td_i€ngöe_Êagged
—d, 
FIO_NOIO
))

281 
ƒ_io_thªads
++;

282 i‡(
td
->
run°©e
 < 
TD_EXITED
)

286 i‡(!
ƒ_io_thªads
)

289 
	}
}

291 
	$fio_£t_fd_n⁄blockög
(
fd
, c⁄° *
who
)

293 
Êags
;

295 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

296 i‡(
Êags
 < 0)

297 
	`log_îr
("fio: %†ÁûedÅÿgë fûêÊags: %s\n", 
who
, 
	`°ªº‹
(
î∫o
));

299 
√w_Êags
 = 
Êags
 | 
O_NONBLOCK
;

301 
√w_Êags
 = 
	`f˙é
(
fd
, 
F_SETFL
,Çew_flags);

302 i‡(
√w_Êags
 < 0)

303 
	`log_îr
("fio: %†ÁûedÅÿgë fûêÊags: %s\n", 
who
, 
	`°ªº‹
(
î∫o
));

306  
Êags
;

307 
	}
}

310 
	mENDIAN_INVALID_BE
 = 1,

311 
	mENDIAN_INVALID_LE
,

312 
	mENDIAN_INVALID_CONFIG
,

313 
	mENDIAN_BROKEN
,

316 
	$ídün_check
()

319 
uöt8_t
 
c
[8];

320 
uöt64_t
 
v
;

321 } 
u
;

322 
À
 = 0, 
be
 = 0;

324 
u
.
v
 = 0x12;

325 i‡(
u
.
c
[7] == 0x12)

326 
be
 = 1;

327 i‡(
u
.
c
[0] == 0x12)

328 
À
 = 1;

330 #i‡
	`deföed
(
CONFIG_LITTLE_ENDIAN
)

331 i‡(
be
)

332  
ENDIAN_INVALID_BE
;

333 #ñi‡
	`deföed
(
CONFIG_BIG_ENDIAN
)

334 i‡(
À
)

335  
ENDIAN_INVALID_LE
;

337  
ENDIAN_INVALID_CONFIG
;

340 i‡(!
À
 && !
be
)

341  
ENDIAN_BROKEN
;

344 
	}
}

346 
	$öôülize_fio
(*
ívp
[])

348 
ps
;

349 
îr
;

356 
	`compûëime_as£π
((
	`off£tof
(
thªad_d©a
, 
ts
) % (*)) == 0, "ts");

357 
	`compûëime_as£π
((
	`off£tof
(
thªad_°©
, 
≥r˚¡ûe_li°
) % 8) == 0, "statÖercentile_list");

358 
	`compûëime_as£π
((
	`off£tof
(
thªad_°©
, 
tŸÆ_run_time
) % 8) == 0, "total_run_time");

359 
	`compûëime_as£π
((
	`off£tof
(
thªad_°©
, 
tŸÆ_îr_cou¡
) % 8) == 0, "total_err_count");

360 
	`compûëime_as£π
((
	`off£tof
(
thªad_°©
, 
œãncy_≥r˚¡ûe
) % 8) == 0, "statÜatency_percentile");

361 
	`compûëime_as£π
((
	`off£tof
(
thªad_d©a
, 
ts
.
˛©_°©
) % 8) == 0, "ts.clat_stat");

362 
	`compûëime_as£π
((
	`off£tof
(
thªad_›ti⁄s_∑ck
, 
zùf_thëa
) % 8) == 0, "zipf_theta");

363 
	`compûëime_as£π
((
	`off£tof
(
thªad_›ti⁄s_∑ck
, 
∑ªto_h
) % 8) == 0, "pareto_h");

364 
	`compûëime_as£π
((
	`off£tof
(
thªad_›ti⁄s_∑ck
, 
≥r˚¡ûe_li°
) % 8) == 0, "percentile_list");

365 
	`compûëime_as£π
((
	`off£tof
(
thªad_›ti⁄s_∑ck
, 
œãncy_≥r˚¡ûe
) % 8) == 0, "latency_percentile");

366 
	`compûëime_as£π
((
	`off£tof
(
jobs_ëa
, 
m_øã
) % 8) == 0, "m_rate");

368 
	`compûëime_as£π
(
__TD_F_LAST
 <
TD_ENG_FLAG_SHIFT
, "TD_ENG_FLAG_SHIFT");

369 
	`compûëime_as£π
(
BSSPLIT_MAX
 <
ZONESPLIT_MAX
, "bsssplit/zone max");

371 
îr
 = 
	`ídün_check
();

372 i‡(
îr
) {

373 
	`log_îr
("fio:Éndianness settingsáppear wrong.\n");

374 
îr
) {

375 
ENDIAN_INVALID_BE
:

376 
	`log_îr
("fio: got big-endian when configured forÜittle\n");

378 
ENDIAN_INVALID_LE
:

379 
	`log_îr
("fio: gotÜittle-endian when configured for big\n");

381 
ENDIAN_INVALID_CONFIG
:

382 
	`log_îr
("fio:Çot configuredÅoányÉndianness\n");

384 
ENDIAN_BROKEN
:

385 
	`log_îr
("fio: failedÅo detectÉndianness\n");

388 
	`as£π
(0);

391 
	`log_îr
("fio:ÖleaseÑeportÅhisÅo fio@vger.kernel.org\n");

395 #i‡!
	`deföed
(
CONFIG_GETTIMEOFDAY
Ë&& !deföed(
CONFIG_CLOCK_GETTIME
)

399 
	`¨ch_öô
(
ívp
);

401 
	`söô
();

403 i‡(
	`fio_fûñock_öô
()) {

404 
	`log_îr
("fio: failed initializing filelock subsys\n");

408 
	`fûe_hash_öô
();

414 i‡(!
	`gëív
("LC_NUMERIC"))

415 
	`£éoˇÀ
(
LC_NUMERIC
, "en_US");

417 
ps
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

418 i‡(
ps
 < 0) {

419 
	`log_îr
("FailedÅo getÖage size\n");

423 
∑ge_size
 = 
ps
;

424 
∑ge_mask
 = 
ps
 - 1;

426 
	`fio_keyw‹ds_öô
();

428 
	}
}

430 
	$deöôülize_fio
()

432 
	`fio_keyw‹ds_exô
();

433 
	}
}

	@/home/ysjin/Desktop/fio/fio/log.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°rög.h
>

4 
	~<°d¨g.h
>

5 
	~<sy¶og.h
>

7 
	~"fio.h
"

9 
	#LOG_START_SZ
 512

	)

11 
size_t
 
	$log_öfo_buf
(c⁄° *
buf
, 
size_t
 
Àn
)

16 i‡(!
buf
)

19 i‡(
is_backíd
) {

20 
size_t
 
ªt
 = 
	`fio_£rvî_ãxt_ouçut
(
FIO_LOG_INFO
, 
buf
, 
Àn
);

21 i‡(
ªt
 != -1)

22  
ªt
;

25 i‡(
log_sy¶og
) {

26 
	`sy¶og
(
LOG_INFO
, "%s", 
buf
);

27  
Àn
;

29  
	`fwrôe
(
buf
, 
Àn
, 1, 
f_out
);

30 
	}
}

32 
size_t
 
	$vÆi°_to_buf
(**
buf„r
, c⁄° *
fmt
, 
va_li°
 
§c_¨gs
)

34 
size_t
 
Àn
, 
cur
 = 
LOG_START_SZ
;

35 
va_li°
 
¨gs
;

38 *
buf„r
 = 
	`ˇŒoc
(1, 
cur
);

39 i‡(!*
buf„r
)

42 
	`va_c›y
(
¨gs
, 
§c_¨gs
);

43 
Àn
 = 
	`v¢¥ötf
(*
buf„r
, 
cur
, 
fmt
, 
¨gs
);

44 
	`va_íd
(
¨gs
);

46 i‡(
Àn
 < 
cur
)

49 
cur
 = 
Àn
 + 1;

50 
	`‰ì
(*
buf„r
);

53  
Àn
;

54 
	}
}

57 
size_t
 
	$¥evÆi°_to_buf
(**
buf„r
, c⁄° *
¥e
, 
¥ñí
,

58 c⁄° *
fmt
, 
va_li°
 
§c_¨gs
)

60 
size_t
 
Àn
, 
cur
 = 
LOG_START_SZ
;

61 
va_li°
 
¨gs
;

64 *
buf„r
 = 
	`ˇŒoc
(1, 
cur
);

65 i‡(!*
buf„r
)

68 
	`va_c›y
(
¨gs
, 
§c_¨gs
);

69 
	`mem˝y
(*
buf„r
, 
¥e
, 
¥ñí
);

70 
Àn
 = 
¥ñí
 + 
	`v¢¥ötf
(*
buf„r
 +ÖªÀn, 
cur
 -ÖªÀn, 
fmt
, 
¨gs
);

71 
	`va_íd
(
¨gs
);

73 i‡(
Àn
 < 
cur
)

76 
cur
 = 
Àn
 + 1;

77 
	`‰ì
(*
buf„r
);

80  
Àn
;

81 
	}
}

83 
size_t
 
	$log_vÆi°
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

85 *
buf„r
;

86 
size_t
 
Àn
;

88 
Àn
 = 
	`vÆi°_to_buf
(&
buf„r
, 
fmt
, 
¨gs
);

89 
Àn
 = 
	`log_öfo_buf
(
buf„r
,Üen);

90 
	`‰ì
(
buf„r
);

92  
Àn
;

93 
	}
}

96 
	$log_¥evÆi°
(
ty≥
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

98 
¥e
[32];

99 *
buf„r
;

100 
size_t
 
Àn
;

101 
¥ñí
;

102 
pid_t
 
pid
;

104 
pid
 = 
	`gëtid
();

105 i‡(
fio_debug_jobp
 && *fio_debug_jobp != -1U

106 && 
pid
 !*
fio_debug_jobp
)

109 
¥ñí
 = 
	`¢¥ötf
(
¥e
, Öª, "%-8†%-5u ", 
debug_Àvñs
[
ty≥
].
«me
, (Ë
pid
);

110 i‡(
¥ñí
 > 0) {

111 
Àn
 = 
	`¥evÆi°_to_buf
(&
buf„r
, 
¥e
, 
¥ñí
, 
fmt
, 
¨gs
);

112 
Àn
 = 
	`log_öfo_buf
(
buf„r
,Üen);

113 
	`‰ì
(
buf„r
);

115 
	}
}

117 
size_t
 
	$log_öfo
(c⁄° *
f‹m©
, ...)

119 
va_li°
 
¨gs
;

120 
size_t
 
ªt
;

122 
	`va_°¨t
(
¨gs
, 
f‹m©
);

123 
ªt
 = 
	`log_vÆi°
(
f‹m©
, 
¨gs
);

124 
	`va_íd
(
¨gs
);

126  
ªt
;

127 
	}
}

129 
size_t
 
	$__log_buf
(
buf_ouçut
 *
buf
, c⁄° *
f‹m©
, ...)

131 *
buf„r
;

132 
va_li°
 
¨gs
;

133 
size_t
 
Àn
;

135 
	`va_°¨t
(
¨gs
, 
f‹m©
);

136 
Àn
 = 
	`vÆi°_to_buf
(&
buf„r
, 
f‹m©
, 
¨gs
);

137 
	`va_íd
(
¨gs
);

139 
Àn
 = 
	`buf_ouçut_add
(
buf
, 
buf„r
,Üen);

140 
	`‰ì
(
buf„r
);

142  
Àn
;

143 
	}
}

145 
	$log_öfo_Êush
()

147 i‡(
is_backíd
 || 
log_sy¶og
)

150  
	`fÊush
(
f_out
);

151 
	}
}

153 
size_t
 
	$log_îr
(c⁄° *
f‹m©
, ...)

155 
size_t
 
ªt
, 
Àn
;

156 *
buf„r
;

157 
va_li°
 
¨gs
;

159 
	`va_°¨t
(
¨gs
, 
f‹m©
);

160 
Àn
 = 
	`vÆi°_to_buf
(&
buf„r
, 
f‹m©
, 
¨gs
);

161 
	`va_íd
(
¨gs
);

163 i‡(
is_backíd
) {

164 
ªt
 = 
	`fio_£rvî_ãxt_ouçut
(
FIO_LOG_ERR
, 
buf„r
, 
Àn
);

165 i‡(
ªt
 != -1)

166 
d⁄e
;

169 i‡(
log_sy¶og
) {

170 
	`sy¶og
(
LOG_INFO
, "%s", 
buf„r
);

171 
ªt
 = 
Àn
;

173 i‡(
f_îr
 !
°dîr
)

174 
ªt
 = 
	`fwrôe
(
buf„r
, 
Àn
, 1, 
°dîr
);

176 
ªt
 = 
	`fwrôe
(
buf„r
, 
Àn
, 1, 
f_îr
);

179 
d⁄e
:

180 
	`‰ì
(
buf„r
);

181  
ªt
;

182 
	}
}

184 c⁄° *
	$log_gë_Àvñ
(
Àvñ
)

186 c⁄° *
Àvñs
[] = { "Unknown", "Debug", "Info", "Error",

189 i‡(
Àvñ
 >
FIO_LOG_NR
)

190 
Àvñ
 = 
FIO_LOG_NR
;

192  
Àvñs
[
Àvñ
];

193 
	}
}

	@/home/ysjin/Desktop/fio/fio/log.h

1 #i‚de‡
FIO_LOG_H


2 
	#FIO_LOG_H


	)

4 
	~<°dio.h
>

5 
	~<°d¨g.h
>

7 
	~"lib/ouçut_buf„r.h
"

9 
FILE
 *
f_out
;

10 
FILE
 *
f_îr
;

12 
size_t
 
	$log_îr
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

13 
size_t
 
	$log_öfo
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

14 
size_t
 
	$__log_buf
(
buf_ouçut
 *, c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

15 
size_t
 
	`log_vÆi°
(c⁄° *
°r
, 
va_li°
);

16 
	`log_¥evÆi°
(
ty≥
, c⁄° *
°r
, 
va_li°
);

17 
size_t
 
	`log_öfo_buf
(c⁄° *
buf
, size_à
Àn
);

18 
	`log_öfo_Êush
();

20 
	#log_buf
(
buf
, 
f‹m©
, 
¨gs
...) \

22 
size_t
 
__ªt
; \

23 i‡((
buf
Ë!
NULL
) \

24 
__ªt
 = 
	`__log_buf
(
buf
, 
f‹m©
, ##
¨gs
); \

26 
__ªt
 = 
	`log_öfo
(
f‹m©
, ##
¨gs
); \

27 
__ªt
; \

28 
	}
})

	)

31 
	mFIO_LOG_DEBUG
 = 1,

32 
	mFIO_LOG_INFO
 = 2,

33 
	mFIO_LOG_ERR
 = 3,

34 
	mFIO_LOG_NR
 = 4,

37 c⁄° *
log_gë_Àvñ
(
Àvñ
);

	@/home/ysjin/Desktop/fio/fio/memory.c

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~<uni°d.h
>

8 
	~<sys/mm™.h
>

10 
	~"fio.h
"

11 #i‚de‡
FIO_NO_HAVE_SHM_H


12 
	~<sys/shm.h
>

15 
	$fio_u≈ö_mem‹y
(
thªad_d©a
 *
td
)

17 i‡(
td
->
pö√d_mem
) {

18 
	`d¥öt
(
FD_MEM
, "u≈önög %Œu byãs\n", 
td
->
o
.
lockmem
);

19 i‡(
	`mu∆ock
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
) < 0)

20 
	`≥º‹
("munlock");

21 
	`munm≠
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
);

22 
td
->
pö√d_mem
 = 
NULL
;

24 
	}
}

26 
	$fio_pö_mem‹y
(
thªad_d©a
 *
td
)

28 
phys_mem
;

30 i‡(!
td
->
o
.
lockmem
)

33 
	`d¥öt
(
FD_MEM
, "pönög %Œu byãs\n", 
td
->
o
.
lockmem
);

38 
phys_mem
 = 
	`os_phys_mem
();

39 i‡(
phys_mem
) {

40 i‡((
td
->
o
.
lockmem
 + 128 * 1024 * 1024Ë> 
phys_mem
) {

41 
td
->
o
.
lockmem
 = 
phys_mem
 - 128 * 1024 * 1024;

42 
	`log_öfo
("fio:Üimiting mlocked memoryÅo %lluMiB\n",

43 
td
->
o
.
lockmem
 >> 20);

47 
td
->
pö√d_mem
 = 
	`mm≠
(
NULL
,Åd->
o
.
lockmem
, 
PROT_READ
 | 
PROT_WRITE
,

48 
MAP_PRIVATE
 | 
OS_MAP_ANON
, -1, 0);

49 i‡(
td
->
pö√d_mem
 =
MAP_FAILED
) {

50 
	`≥º‹
("mallocÜocked mem");

51 
td
->
pö√d_mem
 = 
NULL
;

54 i‡(
	`mlock
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
) < 0) {

55 
	`≥º‹
("mlock");

56 
	`munm≠
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
);

57 
td
->
pö√d_mem
 = 
NULL
;

62 
	}
}

64 
	$Æloc_mem_shm
(
thªad_d©a
 *
td
, 
tŸÆ_mem
)

66 #i‚de‡
CONFIG_NO_SHM


67 
Êags
 = 
IPC_CREAT
 | 
S_IRUSR
 | 
S_IWUSR
;

69 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHMHUGE
) {

70 
mask
 = 
td
->
o
.
hugïage_size
 - 1;

72 
Êags
 |
SHM_HUGETLB
;

73 
tŸÆ_mem
 = (tŸÆ_mem + 
mask
) & ~mask;

76 
td
->
shm_id
 = 
	`shmgë
(
IPC_PRIVATE
, 
tŸÆ_mem
, 
Êags
);

77 
	`d¥öt
(
FD_MEM
, "shmgë %u, %d\n", 
tŸÆ_mem
, 
td
->
shm_id
);

78 i‡(
td
->
shm_id
 < 0) {

79 
	`td_vîr‹
(
td
, 
î∫o
, "shmget");

80 i‡(
	`gëeuid
(Ë!0 && (
î∫o
 =
ENOMEM
 ||Éºnÿ=
EPERM
))

81 
	`log_îr
("fio: you mayÇeedÅoÑunÅhis jobásÑoot\n");

82 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHMHUGE
) {

83 i‡(
î∫o
 =
EINVAL
) {

84 
	`log_îr
("fio: checkÅhat you have free huge"

87 } i‡(
î∫o
 =
ENOSYS
) {

88 
	`log_îr
("fio: your system doesÇotáppearÅo"

90 } i‡(
î∫o
 =
ENOMEM
) {

91 
	`log_îr
("fio:Ço hugeÖagesávailable, do you"

99 
td
->
‹ig_buf„r
 = 
	`shm©
—d->
shm_id
, 
NULL
, 0);

100 
	`d¥öt
(
FD_MEM
, "shm© %d, %p\n", 
td
->
shm_id
,Åd->
‹ig_buf„r
);

101 i‡(
td
->
‹ig_buf„r
 == (*) -1) {

102 
	`td_vîr‹
(
td
, 
î∫o
, "shmat");

103 
td
->
‹ig_buf„r
 = 
NULL
;

109 
	`log_îr
("fio: shmÇot supported\n");

112 
	}
}

114 
	$‰ì_mem_shm
(
thªad_d©a
 *
td
)

116 #i‚de‡
CONFIG_NO_SHM


117 
shmid_ds
 
sbuf
;

119 
	`d¥öt
(
FD_MEM
, "shmdt/˘»%d %p\n", 
td
->
shm_id
,Åd->
‹ig_buf„r
);

120 
	`shmdt
(
td
->
‹ig_buf„r
);

121 
	`shm˘l
(
td
->
shm_id
, 
IPC_RMID
, &
sbuf
);

123 
	}
}

125 
	$Æloc_mem_mm≠
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

127 
Êags
 = 0;

129 
td
->
mm≠fd
 = -1;

131 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAPHUGE
) {

132 
mask
 = 
td
->
o
.
hugïage_size
 - 1;

135 i‡(!
td
->
o
.
mm≠fûe
)

136 
Êags
 |
MAP_HUGETLB
;

137 
tŸÆ_mem
 = (tŸÆ_mem + 
mask
) & ~mask;

140 i‡(
td
->
o
.
mm≠fûe
) {

141 i‡(
	`ac˚ss
(
td
->
o
.
mm≠fûe
, 
F_OK
) == 0)

142 
td
->
Êags
 |
TD_F_MMAP_KEEP
;

144 
td
->
mm≠fd
 = 
	`›í
—d->
o
.
mm≠fûe
, 
O_RDWR
|
O_CREAT
, 0644);

146 i‡(
td
->
mm≠fd
 < 0) {

147 
	`td_vîr‹
(
td
, 
î∫o
, "open mmap file");

148 
td
->
‹ig_buf„r
 = 
NULL
;

151 i‡(
td
->
o
.
mem_ty≥
 !
MEM_MMAPHUGE
 &&

152 
td
->
o
.
mem_ty≥
 !
MEM_MMAPSHARED
 &&

153 
	`·runˇã
(
td
->
mm≠fd
, 
tŸÆ_mem
) < 0) {

154 
	`td_vîr‹
(
td
, 
î∫o
, "truncate mmap file");

155 
td
->
‹ig_buf„r
 = 
NULL
;

158 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAPHUGE
 ||

159 
td
->
o
.
mem_ty≥
 =
MEM_MMAPSHARED
)

160 
Êags
 |
MAP_SHARED
;

162 
Êags
 |
MAP_PRIVATE
;

164 
Êags
 |
OS_MAP_ANON
 | 
MAP_PRIVATE
;

166 
td
->
‹ig_buf„r
 = 
	`mm≠
(
NULL
, 
tŸÆ_mem
, 
PROT_READ
 | 
PROT_WRITE
, 
Êags
,

167 
td
->
mm≠fd
, 0);

168 
	`d¥öt
(
FD_MEM
, "mm≠ %Œu/%d %p\n", (Ë
tŸÆ_mem
,

169 
td
->
mm≠fd
,Åd->
‹ig_buf„r
);

170 i‡(
td
->
‹ig_buf„r
 =
MAP_FAILED
) {

171 
	`td_vîr‹
(
td
, 
î∫o
, "mmap");

172 
td
->
‹ig_buf„r
 = 
NULL
;

173 i‡(
td
->
mm≠fd
 != 1 &&Åd->mmapfd != -1) {

174 
	`˛o£
(
td
->
mm≠fd
);

175 i‡(
td
->
o
.
mm≠fûe
 && !—d->
Êags
 & 
TD_F_MMAP_KEEP
))

176 
	`u∆ök
(
td
->
o
.
mm≠fûe
);

183 
	}
}

185 
	$‰ì_mem_mm≠
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

187 
	`d¥öt
(
FD_MEM
, "munm≠ %Œu %p\n", (Ë
tŸÆ_mem
,

188 
td
->
‹ig_buf„r
);

189 
	`munm≠
(
td
->
‹ig_buf„r
,Åd->
‹ig_buf„r_size
);

190 i‡(
td
->
o
.
mm≠fûe
) {

191 i‡(
td
->
mm≠fd
 != -1)

192 
	`˛o£
(
td
->
mm≠fd
);

193 i‡(!(
td
->
Êags
 & 
TD_F_MMAP_KEEP
))

194 
	`u∆ök
(
td
->
o
.
mm≠fûe
);

195 
	`‰ì
(
td
->
o
.
mm≠fûe
);

197 
	}
}

199 
	$Æloc_mem_mÆloc
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

201 
td
->
‹ig_buf„r
 = 
	`mÆloc
(
tŸÆ_mem
);

202 
	`d¥öt
(
FD_MEM
, "mÆlo¯%Œu %p\n", (Ë
tŸÆ_mem
,

203 
td
->
‹ig_buf„r
);

205  
td
->
‹ig_buf„r
 =
NULL
;

206 
	}
}

208 
	$‰ì_mem_mÆloc
(
thªad_d©a
 *
td
)

210 
	`d¥öt
(
FD_MEM
, "‰ì mÆlo¯mem %p\n", 
td
->
‹ig_buf„r
);

211 
	`‰ì
(
td
->
‹ig_buf„r
);

212 
	}
}

214 
	$Æloc_mem_cudamÆloc
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

216 #ifde‡
CONFIG_CUDA


217 
CUªsu…
 
ªt
;

218 
«me
[128];

220 
ªt
 = 
	`cuInô
(0);

221 i‡(
ªt
 !
CUDA_SUCCESS
) {

222 
	`log_îr
("fio: failed initialize cuda driverápi\n");

226 
ªt
 = 
	`cuDevi˚GëCou¡
(&
td
->
gpu_dev_˙t
);

227 i‡(
ªt
 !
CUDA_SUCCESS
) {

228 
	`log_îr
("fio: failed get device count\n");

231 
	`d¥öt
(
FD_MEM
, "found %d GPU devi˚s\n", 
td
->
gpu_dev_˙t
);

233 i‡(
td
->
gpu_dev_˙t
 == 0) {

234 
	`log_îr
("fio:Ço GPU device found. "

239 
td
->
gpu_dev_id
 =Åd->
o
.gpu_dev_id;

240 
ªt
 = 
	`cuDevi˚Gë
(&
td
->
cu_dev
,Åd->
gpu_dev_id
);

241 i‡(
ªt
 !
CUDA_SUCCESS
) {

242 
	`log_îr
("fio: failed get GPU device\n");

246 
ªt
 = 
	`cuDevi˚GëName
(
«me
, “ame), 
td
->
gpu_dev_id
);

247 i‡(
ªt
 !
CUDA_SUCCESS
) {

248 
	`log_îr
("fio: failed get deviceÇame\n");

251 
	`d¥öt
(
FD_MEM
, "dev_id = [%d], deviceÇame = [%s]\n", \

252 
td
->
gpu_dev_id
, 
«me
);

254 
ªt
 = 
	`cuCtxCª©e
(&
td
->
cu_˘x
, 
CU_CTX_MAP_HOST
,Åd->
cu_dev
);

255 i‡(
ªt
 !
CUDA_SUCCESS
) {

256 
	`log_îr
("fio: faûedÅÿ¸óã cud®c⁄ãxt: %d\n", 
ªt
);

260 
ªt
 = 
	`cuMemAŒoc
(&
td
->
dev_mem_±r
, 
tŸÆ_mem
);

261 i‡(
ªt
 !
CUDA_SUCCESS
) {

262 
	`log_îr
("fio: cuMemAŒo¯%zu byã†Áûed\n", 
tŸÆ_mem
);

265 
td
->
‹ig_buf„r
 = (*Ëtd->
dev_mem_±r
;

267 
	`d¥öt
(
FD_MEM
, "cudaMalloc %llu %p\n", \

268 (Ë
tŸÆ_mem
, 
td
->
‹ig_buf„r
);

271  -
EINVAL
;

273 
	}
}

275 
	$‰ì_mem_cudamÆloc
(
thªad_d©a
 *
td
)

277 #ifde‡
CONFIG_CUDA


278 i‡(
td
->
dev_mem_±r
 !
NULL
)

279 
	`cuMemFªe
(
td
->
dev_mem_±r
);

281 i‡(
	`cuCtxDe°roy
(
td
->
cu_˘x
Ë!
CUDA_SUCCESS
)

282 
	`log_îr
("fio: failedÅo destroy cuda context\n");

284 
	}
}

289 
	$Æloˇã_io_mem
(
thªad_d©a
 *
td
)

291 
size_t
 
tŸÆ_mem
;

292 
ªt
 = 0;

294 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
))

297 
tŸÆ_mem
 = 
td
->
‹ig_buf„r_size
;

299 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
mem_Æign
 ||Åd->o.
ﬂtomic
 ||

300 
	`td_i€ngöe_Êagged
(
td
, 
FIO_MEMALIGN
)) {

301 
tŸÆ_mem
 +
∑ge_mask
;

302 i‡(
td
->
o
.
mem_Æign
 &&Åd->o.mem_Æig¿> 
∑ge_size
)

303 
tŸÆ_mem
 +
td
->
o
.
mem_Æign
 - 
∑ge_size
;

306 
	`d¥öt
(
FD_MEM
, "AŒo¯%Œu f‹ buf„rs\n", (Ë
tŸÆ_mem
);

312 i‡(
td
->
io_›s
->
iomem_Æloc
) {

313 i‡(
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
mem_ty≥
)) {

314 
	`log_îr
("fio: option 'mem/iomem' conflicts with specified IOÉngine\n");

315 
ªt
 = 1;

317 
ªt
 = 
td
->
io_›s
->
	`iomem_Æloc
—d, 
tŸÆ_mem
);

318 } i‡(
td
->
o
.
mem_ty≥
 =
MEM_MALLOC
)

319 
ªt
 = 
	`Æloc_mem_mÆloc
(
td
, 
tŸÆ_mem
);

320 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHM
 ||Åd->o.mem_ty≥ =
MEM_SHMHUGE
)

321 
ªt
 = 
	`Æloc_mem_shm
(
td
, 
tŸÆ_mem
);

322 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAP
 ||Åd->o.mem_ty≥ =
MEM_MMAPHUGE
 ||

323 
td
->
o
.
mem_ty≥
 =
MEM_MMAPSHARED
)

324 
ªt
 = 
	`Æloc_mem_mm≠
(
td
, 
tŸÆ_mem
);

325 i‡(
td
->
o
.
mem_ty≥
 =
MEM_CUDA_MALLOC
)

326 
ªt
 = 
	`Æloc_mem_cudamÆloc
(
td
, 
tŸÆ_mem
);

328 
	`log_îr
("fio: bad memÅy≥: %d\n", 
td
->
o
.
mem_ty≥
);

329 
ªt
 = 1;

332 i‡(
ªt
)

333 
	`td_vîr‹
(
td
, 
ENOMEM
, "iomemállocation");

335  
ªt
;

336 
	}
}

338 
	$‰ì_io_mem
(
thªad_d©a
 *
td
)

340 
tŸÆ_mem
;

342 
tŸÆ_mem
 = 
td
->
‹ig_buf„r_size
;

343 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
ﬂtomic
)

344 
tŸÆ_mem
 +
∑ge_mask
;

346 i‡(
td
->
io_›s
->
iomem_Æloc
) {

347 i‡(
td
->
io_›s
->
iomem_‰ì
)

348 
td
->
io_›s
->
	`iomem_‰ì
(td);

349 } i‡(
td
->
o
.
mem_ty≥
 =
MEM_MALLOC
)

350 
	`‰ì_mem_mÆloc
(
td
);

351 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHM
 ||Åd->o.mem_ty≥ =
MEM_SHMHUGE
)

352 
	`‰ì_mem_shm
(
td
);

353 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAP
 ||Åd->o.mem_ty≥ =
MEM_MMAPHUGE
 ||

354 
td
->
o
.
mem_ty≥
 =
MEM_MMAPSHARED
)

355 
	`‰ì_mem_mm≠
(
td
, 
tŸÆ_mem
);

356 i‡(
td
->
o
.
mem_ty≥
 =
MEM_CUDA_MALLOC
)

357 
	`‰ì_mem_cudamÆloc
(
td
);

359 
	`log_îr
("Bad mem‹yÅy≥ %u\n", 
td
->
o
.
mem_ty≥
);

361 
td
->
‹ig_buf„r
 = 
NULL
;

362 
td
->
‹ig_buf„r_size
 = 0;

363 
	}
}

	@/home/ysjin/Desktop/fio/fio/minmax.h

1 #i‚de‡
FIO_MIN_MAX_H


2 
	#FIO_MIN_MAX_H


	)

4 #i‚de‡
mö


5 
	#mö
(
x
,
y
) ({ \

6 
	`ty≥of
(
x
Ë
_x
 = (x); \

7 
	`ty≥of
(
y
Ë
_y
 = (y); \

8 (Ë(&
_x
 =&
_y
); \

9 
_x
 < 
_y
 ? _x : _y; })

	)

12 #i‚de‡
max


13 
	#max
(
x
,
y
) ({ \

14 
	`ty≥of
(
x
Ë
_x
 = (x); \

15 
	`ty≥of
(
y
Ë
_y
 = (y); \

16 (Ë(&
_x
 =&
_y
); \

17 
_x
 > 
_y
 ? _x : _y; })

	)

20 
	#mö_nŸ_zîo
(
x
, 
y
) ({ \

21 
	`ty≥of
(
x
Ë
__x
 = (x); \

22 
	`ty≥of
(
y
Ë
__y
 = (y); \

23 
__x
 =0 ? 
__y
 : ((__y =0Ë? __x : 
	`mö
(__x, __y)); })

	)

	@/home/ysjin/Desktop/fio/fio/mutex.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<f˙é.h
>

6 
	~<time.h
>

7 
	~<î∫o.h
>

8 
	~<±hªad.h
>

9 
	~<sys/mm™.h
>

10 
	~<as£π.h
>

12 
	~"fio.h
"

13 
	~"log.h
"

14 
	~"muãx.h
"

15 
	~"¨ch/¨ch.h
"

16 
	~"os/os.h
"

17 
	~"hñ≥rs.h
"

18 
	~"fio_time.h
"

19 
	~"gëtime.h
"

21 
	$__fio_muãx_ªmove
(
fio_muãx
 *
muãx
)

23 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

24 
	`±hªad_c⁄d_de°roy
(&
muãx
->
c⁄d
);

30 
	`mem£t
(
muãx
, 0, (*mutex));

31 
	}
}

33 
	$fio_muãx_ªmove
(
fio_muãx
 *
muãx
)

35 
	`__fio_muãx_ªmove
(
muãx
);

36 
	`munm≠
((*Ë
muãx
, (*mutex));

37 
	}
}

39 
	$c⁄d_öô_psh¨ed
(
±hªad_c⁄d_t
 *
c⁄d
)

41 
±hªad_c⁄d©å_t
 
ˇâr
;

42 
ªt
;

44 
ªt
 = 
	`±hªad_c⁄d©å_öô
(&
ˇâr
);

45 i‡(
ªt
) {

46 
	`log_îr
("±hªad_c⁄d©å_öô: %s\n", 
	`°ªº‹
(
ªt
));

47  
ªt
;

50 #ifde‡
CONFIG_PSHARED


51 
ªt
 = 
	`±hªad_c⁄d©å_£çsh¨ed
(&
ˇâr
, 
PTHREAD_PROCESS_SHARED
);

52 i‡(
ªt
) {

53 
	`log_îr
("±hªad_c⁄d©å_£çsh¨ed: %s\n", 
	`°ªº‹
(
ªt
));

54  
ªt
;

57 
ªt
 = 
	`±hªad_c⁄d_öô
(
c⁄d
, &
ˇâr
);

58 i‡(
ªt
) {

59 
	`log_îr
("±hªad_c⁄d_öô: %s\n", 
	`°ªº‹
(
ªt
));

60  
ªt
;

64 
	}
}

66 
	$muãx_öô_psh¨ed
(
±hªad_muãx_t
 *
muãx
)

68 
±hªad_muãx©å_t
 
m©å
;

69 
ªt
;

71 
ªt
 = 
	`±hªad_muãx©å_öô
(&
m©å
);

72 i‡(
ªt
) {

73 
	`log_îr
("±hªad_muãx©å_öô: %s\n", 
	`°ªº‹
(
ªt
));

74  
ªt
;

80 #ifde‡
CONFIG_PSHARED


81 
ªt
 = 
	`±hªad_muãx©å_£çsh¨ed
(&
m©å
, 
PTHREAD_PROCESS_SHARED
);

82 i‡(
ªt
) {

83 
	`log_îr
("±hªad_muãx©å_£çsh¨ed: %s\n", 
	`°ªº‹
(
ªt
));

84  
ªt
;

87 
ªt
 = 
	`±hªad_muãx_öô
(
muãx
, &
m©å
);

88 i‡(
ªt
) {

89 
	`log_îr
("±hªad_muãx_öô: %s\n", 
	`°ªº‹
(
ªt
));

90  
ªt
;

94 
	}
}

96 
	$muãx_c⁄d_öô_psh¨ed
(
±hªad_muãx_t
 *
muãx
, 
±hªad_c⁄d_t
 *
c⁄d
)

98 
ªt
;

100 
ªt
 = 
	`muãx_öô_psh¨ed
(
muãx
);

101 i‡(
ªt
)

102  
ªt
;

104 
ªt
 = 
	`c⁄d_öô_psh¨ed
(
c⁄d
);

105 i‡(
ªt
)

106  
ªt
;

109 
	}
}

111 
	$__fio_muãx_öô
(
fio_muãx
 *
muãx
, 
vÆue
)

113 
ªt
;

115 
muãx
->
vÆue
 = value;

116 
muãx
->
magic
 = 
FIO_MUTEX_MAGIC
;

118 
ªt
 = 
	`muãx_c⁄d_öô_psh¨ed
(&
muãx
->
lock
, &muãx->
c⁄d
);

119 i‡(
ªt
)

120  
ªt
;

123 
	}
}

125 
fio_muãx
 *
	$fio_muãx_öô
(
vÆue
)

127 
fio_muãx
 *
muãx
 = 
NULL
;

129 
muãx
 = (*Ë
	`mm≠
(
NULL
, (
fio_muãx
),

130 
PROT_READ
 | 
PROT_WRITE
,

131 
OS_MAP_ANON
 | 
MAP_SHARED
, -1, 0);

132 i‡(
muãx
 =
MAP_FAILED
) {

133 
	`≥º‹
("mmap mutex");

134  
NULL
;

137 i‡(!
	`__fio_muãx_öô
(
muãx
, 
vÆue
))

138  
muãx
;

140 
	`fio_muãx_ªmove
(
muãx
);

141  
NULL
;

142 
	}
}

144 
boﬁ
 
	$muãx_timed_out
(
time•ec
 *
t
, 
m£cs
)

146 
timevÆ
 
tv
;

147 
time•ec
 
now
;

149 
	`gëtimeofday
(&
tv
, 
NULL
);

150 
now
.
tv_£c
 = 
tv
.tv_sec;

151 
now
.
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

153  
	`mtime_sö˚
(
t
, &
now
Ë>
m£cs
;

154 
	}
}

156 
	$fio_muãx_down_timeout
(
fio_muãx
 *
muãx
, 
m£cs
)

158 
timevÆ
 
tv_s
;

159 
time•ec
 
ba£
;

160 
time•ec
 
t
;

161 
ªt
 = 0;

163 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

165 
	`gëtimeofday
(&
tv_s
, 
NULL
);

166 
ba£
.
tv_£c
 = 
t
.tv_£¯
tv_s
.tv_sec;

167 
ba£
.
tv_n£c
 = 
t
.tv_n£¯
tv_s
.
tv_u£c
 * 1000;

169 
t
.
tv_£c
 +
m£cs
 / 1000;

170 
t
.
tv_n£c
 +((
m£cs
 * 1000000ULL) % 1000000000);

171 i‡(
t
.
tv_n£c
 >= 1000000000) {

172 
t
.
tv_n£c
 -= 1000000000;

173 
t
.
tv_£c
++;

176 
	`±hªad_muãx_lock
(&
muãx
->
lock
);

178 
muãx
->
waôîs
++;

179 !
muãx
->
vÆue
 && !
ªt
) {

184 
ªt
 = 
	`±hªad_c⁄d_timedwaô
(&
muãx
->
c⁄d
, &muãx->
lock
, &
t
);

185 i‡(
ªt
 =
ETIMEDOUT
 && !
	`muãx_timed_out
(&
ba£
, 
m£cs
))

186 
ªt
 = 0;

188 
muãx
->
waôîs
--;

190 i‡(!
ªt
) {

191 
muãx
->
vÆue
--;

192 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

196 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

197  
ªt
;

198 
	}
}

200 
boﬁ
 
	$fio_muãx_down_åylock
(
fio_muãx
 *
muãx
)

202 
boﬁ
 
ªt
 = 
åue
;

204 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

206 
	`±hªad_muãx_lock
(&
muãx
->
lock
);

207 i‡(
muãx
->
vÆue
) {

208 
muãx
->
vÆue
--;

209 
ªt
 = 
Ál£
;

211 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

213  
ªt
;

214 
	}
}

216 
	$fio_muãx_down
(
fio_muãx
 *
muãx
)

218 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

220 
	`±hªad_muãx_lock
(&
muãx
->
lock
);

222 !
muãx
->
vÆue
) {

223 
muãx
->
waôîs
++;

224 
	`±hªad_c⁄d_waô
(&
muãx
->
c⁄d
, &muãx->
lock
);

225 
muãx
->
waôîs
--;

228 
muãx
->
vÆue
--;

229 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

230 
	}
}

232 
	$fio_muãx_up
(
fio_muãx
 *
muãx
)

234 
do_wake
 = 0;

236 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

238 
	`±hªad_muãx_lock
(&
muãx
->
lock
);

239 
	`ªad_b¨rõr
();

240 i‡(!
muãx
->
vÆue
 && muãx->
waôîs
)

241 
do_wake
 = 1;

242 
muãx
->
vÆue
++;

244 i‡(
do_wake
)

245 
	`±hªad_c⁄d_sig«l
(&
muãx
->
c⁄d
);

247 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

248 
	}
}

250 
	$fio_rwlock_wrôe
(
fio_rwlock
 *
lock
)

252 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

253 
	`±hªad_rwlock_wæock
(&
lock
->lock);

254 
	}
}

256 
	$fio_rwlock_ªad
(
fio_rwlock
 *
lock
)

258 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

259 
	`±hªad_rwlock_rdlock
(&
lock
->lock);

260 
	}
}

262 
	$fio_rwlock_u∆ock
(
fio_rwlock
 *
lock
)

264 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

265 
	`±hªad_rwlock_u∆ock
(&
lock
->lock);

266 
	}
}

268 
	$fio_rwlock_ªmove
(
fio_rwlock
 *
lock
)

270 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

271 
	`munm≠
((*Ë
lock
, (*lock));

272 
	}
}

274 
fio_rwlock
 *
	$fio_rwlock_öô
()

276 
fio_rwlock
 *
lock
;

277 
±hªad_rwlock©å_t
 
©å
;

278 
ªt
;

280 
lock
 = (*Ë
	`mm≠
(
NULL
, (
fio_rwlock
),

281 
PROT_READ
 | 
PROT_WRITE
,

282 
OS_MAP_ANON
 | 
MAP_SHARED
, -1, 0);

283 i‡(
lock
 =
MAP_FAILED
) {

284 
	`≥º‹
("mmapÑwlock");

285 
lock
 = 
NULL
;

286 
îr
;

289 
lock
->
magic
 = 
FIO_RWLOCK_MAGIC
;

291 
ªt
 = 
	`±hªad_rwlock©å_öô
(&
©å
);

292 i‡(
ªt
) {

293 
	`log_îr
("±hªad_rwlock©å_öô: %s\n", 
	`°ªº‹
(
ªt
));

294 
îr
;

296 #ifde‡
CONFIG_PSHARED


297 
ªt
 = 
	`±hªad_rwlock©å_£çsh¨ed
(&
©å
, 
PTHREAD_PROCESS_SHARED
);

298 i‡(
ªt
) {

299 
	`log_îr
("±hªad_rwlock©å_£çsh¨ed: %s\n", 
	`°ªº‹
(
ªt
));

300 
de°roy_©å
;

303 
ªt
 = 
	`±hªad_rwlock_öô
(&
lock
->lock, &
©å
);

305 
ªt
 = 
	`±hªad_rwlock_öô
(&
lock
->lock, 
NULL
);

308 i‡(
ªt
) {

309 
	`log_îr
("±hªad_rwlock_öô: %s\n", 
	`°ªº‹
(
ªt
));

310 
de°roy_©å
;

313 
	`±hªad_rwlock©å_de°roy
(&
©å
);

315  
lock
;

316 
de°roy_©å
:

317 
	`±hªad_rwlock©å_de°roy
(&
©å
);

318 
îr
:

319 i‡(
lock
)

320 
	`fio_rwlock_ªmove
(
lock
);

321  
NULL
;

322 
	}
}

	@/home/ysjin/Desktop/fio/fio/mutex.h

1 #i‚de‡
FIO_MUTEX_H


2 
	#FIO_MUTEX_H


	)

4 
	~<±hªad.h
>

5 
	~"lib/ty≥s.h
"

7 
	#FIO_MUTEX_MAGIC
 0x4d555445U

	)

8 
	#FIO_RWLOCK_MAGIC
 0x52574c4fU

	)

10 
	sfio_muãx
 {

11 
±hªad_muãx_t
 
	mlock
;

12 
±hªad_c⁄d_t
 
	mc⁄d
;

13 
	mvÆue
;

14 
	mwaôîs
;

15 
	mmagic
;

18 
	sfio_rwlock
 {

19 
±hªad_rwlock_t
 
	mlock
;

20 
	mmagic
;

24 
	mFIO_MUTEX_LOCKED
 = 0,

25 
	mFIO_MUTEX_UNLOCKED
 = 1,

28 
__fio_muãx_öô
(
fio_muãx
 *, );

29 
fio_muãx
 *
fio_muãx_öô
();

30 
__fio_muãx_ªmove
(
fio_muãx
 *);

31 
fio_muãx_ªmove
(
fio_muãx
 *);

32 
fio_muãx_up
(
fio_muãx
 *);

33 
fio_muãx_down
(
fio_muãx
 *);

34 
boﬁ
 
fio_muãx_down_åylock
(
fio_muãx
 *);

35 
fio_muãx_down_timeout
(
fio_muãx
 *, );

37 
fio_rwlock_ªad
(
fio_rwlock
 *);

38 
fio_rwlock_wrôe
(
fio_rwlock
 *);

39 
fio_rwlock_u∆ock
(
fio_rwlock
 *);

40 
fio_rwlock
 *
fio_rwlock_öô
();

41 
fio_rwlock_ªmove
(
fio_rwlock
 *);

43 
muãx_öô_psh¨ed
(
±hªad_muãx_t
 *);

44 
c⁄d_öô_psh¨ed
(
±hªad_c⁄d_t
 *);

45 
muãx_c⁄d_öô_psh¨ed
(
±hªad_muãx_t
 *, 
±hªad_c⁄d_t
 *);

	@/home/ysjin/Desktop/fio/fio/optgroup.c

1 
	~<°dio.h
>

2 
	~<öây≥s.h
>

3 
	~"›tgroup.h
"

8 c⁄° 
›t_group
 
	gfio_›t_groups
[] = {

10 .
«me
 = "General",

11 .
	gmask
 = 
FIO_OPT_C_GENERAL
,

14 .
	g«me
 = "I/O",

15 .
	gmask
 = 
FIO_OPT_C_IO
,

18 .
	g«me
 = "File",

19 .
	gmask
 = 
FIO_OPT_C_FILE
,

22 .
	g«me
 = "Statistics",

23 .
	gmask
 = 
FIO_OPT_C_STAT
,

26 .
	g«me
 = "Logging",

27 .
	gmask
 = 
FIO_OPT_C_LOG
,

30 .
	g«me
 = "Profiles",

31 .
	gmask
 = 
FIO_OPT_C_PROFILE
,

34 .
	g«me
 = "I/OÉngines",

35 .
	gmask
 = 
FIO_OPT_C_ENGINE
,

38 .
	g«me
 = 
NULL
,

42 c⁄° 
›t_group
 
	gfio_›t_ˇt_groups
[] = {

44 .
«me
 = "Rate",

45 .
	gmask
 = 
FIO_OPT_G_RATE
,

48 .
	g«me
 = "Zone",

49 .
	gmask
 = 
FIO_OPT_G_ZONE
,

52 .
	g«me
 = "Read/write mix",

53 .
	gmask
 = 
FIO_OPT_G_RWMIX
,

56 .
	g«me
 = "Verify",

57 .
	gmask
 = 
FIO_OPT_G_VERIFY
,

60 .
	g«me
 = "Trim",

61 .
	gmask
 = 
FIO_OPT_G_TRIM
,

64 .
	g«me
 = "I/O Logging",

65 .
	gmask
 = 
FIO_OPT_G_IOLOG
,

68 .
	g«me
 = "I/O Depth",

69 .
	gmask
 = 
FIO_OPT_G_IO_DEPTH
,

72 .
	g«me
 = "I/O Flow",

73 .
	gmask
 = 
FIO_OPT_G_IO_FLOW
,

76 .
	g«me
 = "Description",

77 .
	gmask
 = 
FIO_OPT_G_DESC
,

80 .
	g«me
 = "Filename",

81 .
	gmask
 = 
FIO_OPT_G_FILENAME
,

84 .
	g«me
 = "General I/O",

85 .
	gmask
 = 
FIO_OPT_G_IO_BASIC
,

88 .
	g«me
 = "Cgroups",

89 .
	gmask
 = 
FIO_OPT_G_CGROUP
,

92 .
	g«me
 = "Runtime",

93 .
	gmask
 = 
FIO_OPT_G_RUNTIME
,

96 .
	g«me
 = "Process",

97 .
	gmask
 = 
FIO_OPT_G_PROCESS
,

100 .
	g«me
 = "Job credentials /Öriority",

101 .
	gmask
 = 
FIO_OPT_G_CRED
,

104 .
	g«me
 = "Clock settings",

105 .
	gmask
 = 
FIO_OPT_G_CLOCK
,

108 .
	g«me
 = "I/O Type",

109 .
	gmask
 = 
FIO_OPT_G_IO_TYPE
,

112 .
	g«me
 = "I/O Thinktime",

113 .
	gmask
 = 
FIO_OPT_G_THINKTIME
,

116 .
	g«me
 = "Randomizations",

117 .
	gmask
 = 
FIO_OPT_G_RANDOM
,

120 .
	g«me
 = "I/O buffers",

121 .
	gmask
 = 
FIO_OPT_G_IO_BUF
,

124 .
	g«me
 = "TiobenchÖrofile",

125 .
	gmask
 = 
FIO_OPT_G_TIOBENCH
,

128 .
	g«me
 = "Error handling",

129 .
	gmask
 = 
FIO_OPT_G_ERR
,

132 .
	g«me
 = "Ext4 defrag I/OÉngine",

133 .
	gmask
 = 
FIO_OPT_G_E4DEFRAG
,

136 .
	g«me
 = "Network I/OÉngine",

137 .
	gmask
 = 
FIO_OPT_G_NETIO
,

140 .
	g«me
 = "RDMA I/OÉngine",

141 .
	gmask
 = 
FIO_OPT_G_RDMA
,

144 .
	g«me
 = "libaio I/OÉngine",

145 .
	gmask
 = 
FIO_OPT_G_LIBAIO
,

148 .
	g«me
 = "ACT AerospikeÜike benchmarkÖrofile",

149 .
	gmask
 = 
FIO_OPT_G_ACT
,

152 .
	g«me
 = "LatencyÖrofiling",

153 .
	gmask
 = 
FIO_OPT_G_LATPROF
,

156 .
	g«me
 = "RBD I/OÉngine",

157 .
	gmask
 = 
FIO_OPT_G_RBD
,

160 .
	g«me
 = "GlusterFS I/OÉngine",

161 .
	gmask
 = 
FIO_OPT_G_GFAPI
,

164 .
	g«me
 = "MTD I/OÉngine",

165 .
	gmask
 = 
FIO_OPT_G_MTD
,

168 .
	g«me
 = "libhdfs I/OÉngine",

169 .
	gmask
 = 
FIO_OPT_G_HDFS
,

172 .
	g«me
 = 
NULL
,

176 c⁄° 
›t_group
 *
	$group_‰om_mask
(c⁄° 
›t_group
 *
ogs
,

177 
uöt64_t
 *
mask
,

178 
uöt64_t
 
öv_mask
)

180 
i
;

182 i‡(*
mask
 =
öv_mask
 || !*mask)

183  
NULL
;

185 
i
 = 0; 
ogs
[i].
«me
; i++) {

186 c⁄° 
›t_group
 *
og
 = &
ogs
[
i
];

188 i‡(*
mask
 & 
og
->mask) {

189 *
mask
 &~(
og
->mask);

190  
og
;

194  
NULL
;

195 
	}
}

197 c⁄° 
›t_group
 *
	$›t_group_‰om_mask
(
uöt64_t
 *
mask
)

199  
	`group_‰om_mask
(
fio_›t_groups
, 
mask
, 
FIO_OPT_C_INVALID
);

200 
	}
}

202 c⁄° 
›t_group
 *
	$›t_group_ˇt_‰om_mask
(
uöt64_t
 *
mask
)

204  
	`group_‰om_mask
(
fio_›t_ˇt_groups
, 
mask
, 
FIO_OPT_G_INVALID
);

205 
	}
}

	@/home/ysjin/Desktop/fio/fio/optgroup.h

1 #i‚de‡
FIO_OPT_GROUP_H


2 
	#FIO_OPT_GROUP_H


	)

4 
	s›t_group
 {

5 c⁄° *
	m«me
;

6 
uöt64_t
 
	mmask
;

9 
	e›t_ˇãg‹y
 {

10 
	m__FIO_OPT_C_GENERAL
 = 0,

11 
	m__FIO_OPT_C_IO
,

12 
	m__FIO_OPT_C_FILE
,

13 
	m__FIO_OPT_C_STAT
,

14 
	m__FIO_OPT_C_LOG
,

15 
	m__FIO_OPT_C_PROFILE
,

16 
	m__FIO_OPT_C_ENGINE
,

17 
	m__FIO_OPT_C_NR
,

19 
	mFIO_OPT_C_GENERAL
 = (1ULL << 
__FIO_OPT_C_GENERAL
),

20 
	mFIO_OPT_C_IO
 = (1ULL << 
__FIO_OPT_C_IO
),

21 
	mFIO_OPT_C_FILE
 = (1ULL << 
__FIO_OPT_C_FILE
),

22 
	mFIO_OPT_C_STAT
 = (1ULL << 
__FIO_OPT_C_STAT
),

23 
	mFIO_OPT_C_LOG
 = (1ULL << 
__FIO_OPT_C_LOG
),

24 
	mFIO_OPT_C_PROFILE
 = (1ULL << 
__FIO_OPT_C_PROFILE
),

25 
	mFIO_OPT_C_ENGINE
 = (1ULL << 
__FIO_OPT_C_ENGINE
),

26 
	mFIO_OPT_C_INVALID
 = (1ULL << 
__FIO_OPT_C_NR
),

29 
	e›t_ˇãg‹y_group
 {

30 
	m__FIO_OPT_G_RATE
 = 0,

31 
	m__FIO_OPT_G_ZONE
,

32 
	m__FIO_OPT_G_RWMIX
,

33 
	m__FIO_OPT_G_VERIFY
,

34 
	m__FIO_OPT_G_TRIM
,

35 
	m__FIO_OPT_G_IOLOG
,

36 
	m__FIO_OPT_G_IO_DEPTH
,

37 
	m__FIO_OPT_G_IO_FLOW
,

38 
	m__FIO_OPT_G_DESC
,

39 
	m__FIO_OPT_G_FILENAME
,

40 
	m__FIO_OPT_G_IO_BASIC
,

41 
	m__FIO_OPT_G_CGROUP
,

42 
	m__FIO_OPT_G_RUNTIME
,

43 
	m__FIO_OPT_G_PROCESS
,

44 
	m__FIO_OPT_G_CRED
,

45 
	m__FIO_OPT_G_CLOCK
,

46 
	m__FIO_OPT_G_IO_TYPE
,

47 
	m__FIO_OPT_G_THINKTIME
,

48 
	m__FIO_OPT_G_RANDOM
,

49 
	m__FIO_OPT_G_IO_BUF
,

50 
	m__FIO_OPT_G_TIOBENCH
,

51 
	m__FIO_OPT_G_ERR
,

52 
	m__FIO_OPT_G_E4DEFRAG
,

53 
	m__FIO_OPT_G_NETIO
,

54 
	m__FIO_OPT_G_RDMA
,

55 
	m__FIO_OPT_G_LIBAIO
,

56 
	m__FIO_OPT_G_ACT
,

57 
	m__FIO_OPT_G_LATPROF
,

58 
	m__FIO_OPT_G_RBD
,

59 
	m__FIO_OPT_G_GFAPI
,

60 
	m__FIO_OPT_G_MTD
,

61 
	m__FIO_OPT_G_HDFS
,

62 
	m__FIO_OPT_G_NR
,

64 
	mFIO_OPT_G_RATE
 = (1ULL << 
__FIO_OPT_G_RATE
),

65 
	mFIO_OPT_G_ZONE
 = (1ULL << 
__FIO_OPT_G_ZONE
),

66 
	mFIO_OPT_G_RWMIX
 = (1ULL << 
__FIO_OPT_G_RWMIX
),

67 
	mFIO_OPT_G_VERIFY
 = (1ULL << 
__FIO_OPT_G_VERIFY
),

68 
	mFIO_OPT_G_TRIM
 = (1ULL << 
__FIO_OPT_G_TRIM
),

69 
	mFIO_OPT_G_IOLOG
 = (1ULL << 
__FIO_OPT_G_IOLOG
),

70 
	mFIO_OPT_G_IO_DEPTH
 = (1ULL << 
__FIO_OPT_G_IO_DEPTH
),

71 
	mFIO_OPT_G_IO_FLOW
 = (1ULL << 
__FIO_OPT_G_IO_FLOW
),

72 
	mFIO_OPT_G_DESC
 = (1ULL << 
__FIO_OPT_G_DESC
),

73 
	mFIO_OPT_G_FILENAME
 = (1ULL << 
__FIO_OPT_G_FILENAME
),

74 
	mFIO_OPT_G_IO_BASIC
 = (1ULL << 
__FIO_OPT_G_IO_BASIC
),

75 
	mFIO_OPT_G_CGROUP
 = (1ULL << 
__FIO_OPT_G_CGROUP
),

76 
	mFIO_OPT_G_RUNTIME
 = (1ULL << 
__FIO_OPT_G_RUNTIME
),

77 
	mFIO_OPT_G_PROCESS
 = (1ULL << 
__FIO_OPT_G_PROCESS
),

78 
	mFIO_OPT_G_CRED
 = (1ULL << 
__FIO_OPT_G_CRED
),

79 
	mFIO_OPT_G_CLOCK
 = (1ULL << 
__FIO_OPT_G_CLOCK
),

80 
	mFIO_OPT_G_IO_TYPE
 = (1ULL << 
__FIO_OPT_G_IO_TYPE
),

81 
	mFIO_OPT_G_THINKTIME
 = (1ULL << 
__FIO_OPT_G_THINKTIME
),

82 
	mFIO_OPT_G_RANDOM
 = (1ULL << 
__FIO_OPT_G_RANDOM
),

83 
	mFIO_OPT_G_IO_BUF
 = (1ULL << 
__FIO_OPT_G_IO_BUF
),

84 
	mFIO_OPT_G_TIOBENCH
 = (1ULL << 
__FIO_OPT_G_TIOBENCH
),

85 
	mFIO_OPT_G_ERR
 = (1ULL << 
__FIO_OPT_G_ERR
),

86 
	mFIO_OPT_G_E4DEFRAG
 = (1ULL << 
__FIO_OPT_G_E4DEFRAG
),

87 
	mFIO_OPT_G_NETIO
 = (1ULL << 
__FIO_OPT_G_NETIO
),

88 
	mFIO_OPT_G_RDMA
 = (1ULL << 
__FIO_OPT_G_RDMA
),

89 
	mFIO_OPT_G_LIBAIO
 = (1ULL << 
__FIO_OPT_G_LIBAIO
),

90 
	mFIO_OPT_G_ACT
 = (1ULL << 
__FIO_OPT_G_ACT
),

91 
	mFIO_OPT_G_LATPROF
 = (1ULL << 
__FIO_OPT_G_LATPROF
),

92 
	mFIO_OPT_G_RBD
 = (1ULL << 
__FIO_OPT_G_RBD
),

93 
	mFIO_OPT_G_GFAPI
 = (1ULL << 
__FIO_OPT_G_GFAPI
),

94 
	mFIO_OPT_G_MTD
 = (1ULL << 
__FIO_OPT_G_MTD
),

95 
	mFIO_OPT_G_HDFS
 = (1ULL << 
__FIO_OPT_G_HDFS
),

96 
	mFIO_OPT_G_INVALID
 = (1ULL << 
__FIO_OPT_G_NR
),

99 c⁄° 
›t_group
 *
›t_group_‰om_mask
(
uöt64_t
 *
mask
);

100 c⁄° 
›t_group
 *
›t_group_ˇt_‰om_mask
(
uöt64_t
 *
mask
);

	@/home/ysjin/Desktop/fio/fio/options.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<˘y≥.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~<libgí.h
>

8 
	~<f˙é.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<√töë/ö.h
>

13 
	~"fio.h
"

14 
	~"vîify.h
"

15 
	~"∑r£.h
"

16 
	~"lib/Ês.h
"

17 
	~"lib/∑âîn.h
"

18 
	~"›ti⁄s.h
"

19 
	~"›tgroup.h
"

21 
	g˛õ¡_sockaddr_°r
[
INET6_ADDRSTRLEN
] = { 0 };

23 
	#cb_d©a_to_td
(
d©a
Ë
	`c⁄èöî_of
(d©a, 
thªad_d©a
, 
o
)

	)

25 
∑âîn_fmt_desc
 
	gfmt_desc
[] = {

27 .
fmt
 = "%o",

28 .
	gÀn
 = 
FIELD_SIZE
(
io_u
 *, 
off£t
),

29 .
	g∑°e
 = 
∑°e_blockoff


36 *
	$gë_›t_po°fix
(c⁄° *
°r
)

38 *
p
 = 
	`°r°r
(
°r
, ":");

40 i‡(!
p
)

41  
NULL
;

43 
p
++;

44 
	`°rù_bœnk_‰⁄t
(&
p
);

45 
	`°rù_bœnk_íd
(
p
);

46  
	`°rdup
(
p
);

47 
	}
}

49 
	$bs_cmp
(c⁄° *
p1
, c⁄° *
p2
)

51 c⁄° 
bs•lô
 *
b•1
 = 
p1
;

52 c⁄° 
bs•lô
 *
b•2
 = 
p2
;

54  (Ë
b•1
->
≥rc
 - (Ë
b•2
->perc;

55 
	}
}

57 
	s•lô
 {

58 
	mƒ
;

59 
	mvÆ1
[
ZONESPLIT_MAX
];

60 
	mvÆ2
[
ZONESPLIT_MAX
];

63 
	$•lô_∑r£_ddú
(
thªad_›ti⁄s
 *
o
, 
•lô
 *split,

64 
fio_ddú
 
ddú
, *
°r
, 
boﬁ
 
absﬁuã
,

65 
max_•lôs
)

67 
≥rc
;

68 
i
;

69 
vÆ
;

70 *
‚ame
;

72 
•lô
->
ƒ
 = 0;

74 
i
 = 0;

75 (
‚ame
 = 
	`°r£p
(&
°r
, ":")Ë!
NULL
) {

76 *
≥rc_°r
;

78 i‡(!
	`°æí
(
‚ame
))

81 
≥rc_°r
 = 
	`°r°r
(
‚ame
, "/");

82 i‡(
≥rc_°r
) {

83 *
≥rc_°r
 = '\0';

84 
≥rc_°r
++;

85 i‡(
absﬁuã
) {

86 i‡(
	`°r_to_decimÆ
(
≥rc_°r
, &
vÆ
, 1, 
o
, 0, 0)) {

87 
	`log_îr
("fio: split conversion failed\n");

90 
≥rc
 = 
vÆ
;

92 
≥rc
 = 
	`©oi
(
≥rc_°r
);

93 i‡(
≥rc
 > 100)

94 
≥rc
 = 100;

95 i‡(!
≥rc
)

96 
≥rc
 = -1U;

99 i‡(
absﬁuã
)

100 
≥rc
 = 0;

102 
≥rc
 = -1U;

105 i‡(
	`°r_to_decimÆ
(
‚ame
, &
vÆ
, 1, 
o
, 0, 0)) {

106 
	`log_îr
("fio: split conversion failed\n");

110 
•lô
->
vÆ1
[
i
] = 
vÆ
;

111 
•lô
->
vÆ2
[
i
] = 
≥rc
;

112 
i
++;

113 i‡(
i
 =
max_•lôs
) {

114 
	`log_îr
("fio: hô max o‡%d s∂ôÉ¡rõs\n", 
i
);

119 
•lô
->
ƒ
 = 
i
;

121 
	}
}

123 
	$bs•lô_ddú
(
thªad_›ti⁄s
 *
o
, 
fio_ddú
 
ddú
, *
°r
,

124 
boﬁ
 
d©a
)

126 
i
, 
≥rc
, 
≥rc_missög
;

127 
max_bs
, 
mö_bs
;

128 
•lô
 split;

130 
	`mem£t
(&
•lô
, 0, (split));

132 i‡(
	`•lô_∑r£_ddú
(
o
, &
•lô
, 
ddú
, 
°r
, 
d©a
, 
BSSPLIT_MAX
))

134 i‡(!
•lô
.
ƒ
)

137 
max_bs
 = 0;

138 
mö_bs
 = -1;

139 
o
->
bs•lô
[
ddú
] = 
	`mÆloc
(
•lô
.
ƒ
 * (bssplit));

140 
o
->
bs•lô_ƒ
[
ddú
] = 
•lô
.
ƒ
;

141 
i
 = 0; i < 
•lô
.
ƒ
; i++) {

142 i‡(
•lô
.
vÆ1
[
i
] > 
max_bs
)

143 
max_bs
 = 
•lô
.
vÆ1
[
i
];

144 i‡(
•lô
.
vÆ1
[
i
] < 
mö_bs
)

145 
mö_bs
 = 
•lô
.
vÆ1
[
i
];

147 
o
->
bs•lô
[
ddú
][
i
].
bs
 = 
•lô
.
vÆ1
[i];

148 
o
->
bs•lô
[
ddú
][
i
].
≥rc
 =
•lô
.
vÆ2
[i];

154 
≥rc
 = 
≥rc_missög
 = 0;

155 
i
 = 0; i < 
o
->
bs•lô_ƒ
[
ddú
]; i++) {

156 
bs•lô
 *
b•
 = &
o
->bs•lô[
ddú
][
i
];

158 i‡(
b•
->
≥rc
 == -1U)

159 
≥rc_missög
++;

161 
≥rc
 +
b•
->perc;

164 i‡(
≥rc
 > 100 && 
≥rc_missög
 > 1) {

165 
	`log_îr
("fio: bssplitÖercentagesáddÅo moreÅhan 100%%\n");

166 
	`‰ì
(
o
->
bs•lô
[
ddú
]);

167 
o
->
bs•lô
[
ddú
] = 
NULL
;

175 i‡(
≥rc_missög
) {

176 i‡(
≥rc_missög
 =1 && 
o
->
bs•lô_ƒ
[
ddú
] == 1)

177 
≥rc
 = 100;

178 
i
 = 0; i < 
o
->
bs•lô_ƒ
[
ddú
]; i++) {

179 
bs•lô
 *
b•
 = &
o
->bs•lô[
ddú
][
i
];

181 i‡(
b•
->
≥rc
 == -1U)

182 
b•
->
≥rc
 = (100 -ÖîcË/ 
≥rc_missög
;

186 
o
->
mö_bs
[
ddú
] = min_bs;

187 
o
->
max_bs
[
ddú
] = max_bs;

192 
	`qs‹t
(
o
->
bs•lô
[
ddú
], o->
bs•lô_ƒ
[ddú], (bs•lô), 
bs_cmp
);

194 
	}
}

196 (
	t•lô_∑r£_‚
)(
	tthªad_›ti⁄s
 *, 
	tfio_ddú
, *, 
	tboﬁ
);

198 
	$°r_•lô_∑r£
(
thªad_d©a
 *
td
, *
°r
,

199 
•lô_∑r£_‚
 *
‚
, 
boﬁ
 
d©a
)

201 *
odú
, *
ddú
;

202 
ªt
 = 0;

204 
odú
 = 
	`°rchr
(
°r
, ',');

205 i‡(
odú
) {

206 
ddú
 = 
	`°rchr
(
odú
 + 1, ',');

207 i‡(
ddú
) {

208 
ªt
 = 
	`‚
(&
td
->
o
, 
DDIR_TRIM
, 
ddú
 + 1, 
d©a
);

209 i‡(!
ªt
)

210 *
ddú
 = '\0';

212 *
›
;

214 
›
 = 
	`°rdup
(
odú
 + 1);

215 
ªt
 = 
	`‚
(&
td
->
o
, 
DDIR_TRIM
, 
›
, 
d©a
);

217 
	`‰ì
(
›
);

219 i‡(!
ªt
)

220 
ªt
 = 
	`‚
(&
td
->
o
, 
DDIR_WRITE
, 
odú
 + 1, 
d©a
);

221 i‡(!
ªt
) {

222 *
odú
 = '\0';

223 
ªt
 = 
	`‚
(&
td
->
o
, 
DDIR_READ
, 
°r
, 
d©a
);

226 *
›
;

228 
›
 = 
	`°rdup
(
°r
);

229 
ªt
 = 
	`‚
(&
td
->
o
, 
DDIR_WRITE
, 
›
, 
d©a
);

230 
	`‰ì
(
›
);

232 i‡(!
ªt
) {

233 
›
 = 
	`°rdup
(
°r
);

234 
ªt
 = 
	`‚
(&
td
->
o
, 
DDIR_TRIM
, 
›
, 
d©a
);

235 
	`‰ì
(
›
);

237 i‡(!
ªt
)

238 
ªt
 = 
	`‚
(&
td
->
o
, 
DDIR_READ
, 
°r
, 
d©a
);

241  
ªt
;

242 
	}
}

244 
	$°r_bs•lô_cb
(*
d©a
, c⁄° *
öput
)

246 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

247 *
°r
, *
p
;

248 
ªt
 = 0;

250 
p
 = 
°r
 = 
	`°rdup
(
öput
);

252 
	`°rù_bœnk_‰⁄t
(&
°r
);

253 
	`°rù_bœnk_íd
(
°r
);

255 
ªt
 = 
	`°r_•lô_∑r£
(
td
, 
°r
, 
bs•lô_ddú
, 
Ál£
);

257 i‡(
	`∑r£_dryrun
()) {

258 
i
;

260 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

261 
	`‰ì
(
td
->
o
.
bs•lô
[
i
]);

262 
td
->
o
.
bs•lô
[
i
] = 
NULL
;

263 
td
->
o
.
bs•lô_ƒ
[
i
] = 0;

267 
	`‰ì
(
p
);

268  
ªt
;

269 
	}
}

271 
	$°r2îr‹
(*
°r
)

273 c⁄° *
îr
[] = { "EPERM", "ENOENT", "ESRCH", "EINTR", "EIO",

281 
i
 = 0, 
num
 = (
îr
) / (*);

283 
i
 < 
num
) {

284 i‡(!
	`°rcmp
(
îr
[
i
], 
°r
))

285  
i
 + 1;

286 
i
++;

289 
	}
}

291 
	$ign‹e_îr‹_ty≥
(
thªad_d©a
 *
td
, 
îr‹_ty≥_bô
 
ëy≥
,

292 *
°r
)

294 
i
;

295 *
îr‹
;

296 *
‚ame
;

298 i‡(
ëy≥
 >
ERROR_TYPE_CNT
) {

299 
	`log_îr
("IllegalÉrrorÅype\n");

303 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 4;

304 
îr‹
 = 
	`ˇŒoc
(4, ());

306 
i
 = 0;

307 (
‚ame
 = 
	`°r£p
(&
°r
, ":")Ë!
NULL
) {

309 i‡(!
	`°æí
(
‚ame
))

315 i‡(
i
 =
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
]) {

316 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] <<= 1;

317 
îr‹
 = 
	`ªÆloc
”º‹, 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
]

320 i‡(
‚ame
[0] == 'E') {

321 
îr‹
[
i
] = 
	`°r2îr‹
(
‚ame
);

323 
îr‹
[
i
] = 
	`©oi
(
‚ame
);

324 i‡(
îr‹
[
i
] < 0)

325 
îr‹
[
i
] = -error[i];

327 i‡(!
îr‹
[
i
]) {

328 
	`log_îr
("UnknownÉrror %s,Ölease useÇumber value\n",

329 
‚ame
);

330 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 0;

331 
	`‰ì
(
îr‹
);

334 
i
++;

336 i‡(
i
) {

337 
td
->
o
.
c⁄töue_⁄_îr‹
 |1 << 
ëy≥
;

338 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 
i
;

339 
td
->
o
.
ign‹e_îr‹
[
ëy≥
] = 
îr‹
;

341 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 0;

342 
	`‰ì
(
îr‹
);

347 
	}
}

349 
	$°r_ign‹e_îr‹_cb
(*
d©a
, c⁄° *
öput
)

351 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

352 *
°r
, *
p
, *
n
;

353 
ªt
 = 1;

354 
îr‹_ty≥_bô
 
ty≥
 = 0;

356 i‡(
	`∑r£_dryrun
())

359 
p
 = 
°r
 = 
	`°rdup
(
öput
);

361 
	`°rù_bœnk_‰⁄t
(&
°r
);

362 
	`°rù_bœnk_íd
(
°r
);

364 
p
) {

365 
n
 = 
	`°rchr
(
p
, ',');

366 i‡(
n
)

367 *
n
++ = '\0';

368 
ªt
 = 
	`ign‹e_îr‹_ty≥
(
td
, 
ty≥
, 
p
);

369 i‡(
ªt
)

371 
p
 = 
n
;

372 
ty≥
++;

374 
	`‰ì
(
°r
);

375  
ªt
;

376 
	}
}

378 
	$°r_rw_cb
(*
d©a
, c⁄° *
°r
)

380 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

381 
thªad_›ti⁄s
 *
o
 = &
td
->o;

382 *
ƒ
;

384 i‡(
	`∑r£_dryrun
())

387 
o
->
ddú_£q_ƒ
 = 1;

388 
o
->
ddú_£q_add
 = 0;

390 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

391 i‡(!
ƒ
)

394 i‡(
	`td_øndom
(
td
))

395 
o
->
ddú_£q_ƒ
 = 
	`©oi
(
ƒ
);

397 
vÆ
;

399 i‡(
	`°r_to_decimÆ
(
ƒ
, &
vÆ
, 1, 
o
, 0, 0)) {

400 
	`log_îr
("fio:ÑwÖostfixÖarsing failed\n");

401 
	`‰ì
(
ƒ
);

405 
o
->
ddú_£q_add
 = 
vÆ
;

408 
	`‰ì
(
ƒ
);

410 
	}
}

412 
	$°r_mem_cb
(*
d©a
, c⁄° *
mem
)

414 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

416 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAPHUGE
 ||Åd->o.mem_ty≥ =
MEM_MMAP
 ||

417 
td
->
o
.
mem_ty≥
 =
MEM_MMAPSHARED
)

418 
td
->
o
.
mm≠fûe
 = 
	`gë_›t_po°fix
(
mem
);

421 
	}
}

423 
	$fio_˛ock_sour˚_cb
(*
d©a
, c⁄° *
°r
)

425 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

427 
fio_˛ock_sour˚
 = 
td
->
o
.
˛ocksour˚
;

428 
fio_˛ock_sour˚_£t
 = 1;

429 
	`fio_˛ock_öô
();

431 
	}
}

433 
	$°r_rwmix_ªad_cb
(*
d©a
, *
vÆ
)

435 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

437 
td
->
o
.
rwmix
[
DDIR_READ
] = *
vÆ
;

438 
td
->
o
.
rwmix
[
DDIR_WRITE
] = 100 - *
vÆ
;

440 
	}
}

442 
	$°r_rwmix_wrôe_cb
(*
d©a
, *
vÆ
)

444 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

446 
td
->
o
.
rwmix
[
DDIR_WRITE
] = *
vÆ
;

447 
td
->
o
.
rwmix
[
DDIR_READ
] = 100 - *
vÆ
;

449 
	}
}

451 
	$°r_exôÆl_cb
()

453 
exôÆl_⁄_ãrmö©e
 = 1;

455 
	}
}

457 #ifde‡
FIO_HAVE_CPU_AFFINITY


458 
	$fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u_ödex
)

460 
i
, 
ödex
, 
˝us_ö_mask
;

461 c⁄° 
max_˝u
 = 
	`˝us_⁄löe
();

463 
˝us_ö_mask
 = 
	`fio_˝u_cou¡
(
mask
);

464 
˝u_ödex
 = cpu_ödex % 
˝us_ö_mask
;

466 
ödex
 = 0;

467 
i
 = 0; i < 
max_˝u
; i++) {

468 i‡(!
	`fio_˝u_is£t
(
mask
, 
i
))

471 i‡(
˝u_ödex
 !
ödex
)

472 
	`fio_˝u_˛ór
(
mask
, 
i
);

474 
ödex
++;

477  
	`fio_˝u_cou¡
(
mask
);

478 
	}
}

480 
	$°r_˝umask_cb
(*
d©a
, *
vÆ
)

482 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

483 
i
;

484 
max_˝u
;

485 
ªt
;

487 i‡(
	`∑r£_dryrun
())

490 
ªt
 = 
	`fio_˝u£t_öô
(&
td
->
o
.
˝umask
);

491 i‡(
ªt
 < 0) {

492 
	`log_îr
("fio: cpuset_init failed\n");

493 
	`td_vîr‹
(
td
, 
ªt
, "fio_cpuset_init");

497 
max_˝u
 = 
	`˝us_⁄löe
();

499 
i
 = 0; i < () * 8; i++) {

500 i‡((1 << 
i
Ë& *
vÆ
) {

501 i‡(
i
 >
max_˝u
) {

502 
	`log_îr
("fio: CPU %dÅoÿœrgê(max=%ld)\n", 
i
,

503 
max_˝u
 - 1);

506 
	`d¥öt
(
FD_PARSE
, "£à˝uáŒowed %d\n", 
i
);

507 
	`fio_˝u_£t
(&
td
->
o
.
˝umask
, 
i
);

512 
	}
}

514 
	$£t_˝us_Ælowed
(
thªad_d©a
 *
td
, 
os_˝u_mask_t
 *
mask
,

515 c⁄° *
öput
)

517 *
˝u
, *
°r
, *
p
;

518 
max_˝u
;

519 
ªt
 = 0;

521 
ªt
 = 
	`fio_˝u£t_öô
(
mask
);

522 i‡(
ªt
 < 0) {

523 
	`log_îr
("fio: cpuset_init failed\n");

524 
	`td_vîr‹
(
td
, 
ªt
, "fio_cpuset_init");

528 
p
 = 
°r
 = 
	`°rdup
(
öput
);

530 
	`°rù_bœnk_‰⁄t
(&
°r
);

531 
	`°rù_bœnk_íd
(
°r
);

533 
max_˝u
 = 
	`˝us_⁄löe
();

535 (
˝u
 = 
	`°r£p
(&
°r
, ",")Ë!
NULL
) {

536 *
°r2
, *
˝u2
;

537 
i˝u
, 
i˝u2
;

539 i‡(!
	`°æí
(
˝u
))

542 
°r2
 = 
˝u
;

543 
i˝u2
 = -1;

544 (
˝u2
 = 
	`°r£p
(&
°r2
, "-")Ë!
NULL
) {

545 i‡(!
	`°æí
(
˝u2
))

548 
i˝u2
 = 
	`©oi
(
˝u2
);

551 
i˝u
 = 
	`©oi
(
˝u
);

552 i‡(
i˝u2
 == -1)

553 
i˝u2
 = 
i˝u
;

554 
i˝u
 <
i˝u2
) {

555 i‡(
i˝u
 >
FIO_MAX_CPUS
) {

556 
	`log_îr
("fio: your OS only supports upÅo"

557 " %d CPUs\n", (Ë
FIO_MAX_CPUS
);

558 
ªt
 = 1;

561 i‡(
i˝u
 >
max_˝u
) {

562 
	`log_îr
("fio: CPU %dÅooÜarge (max=%ld)\n",

563 
i˝u
, 
max_˝u
 - 1);

564 
ªt
 = 1;

568 
	`d¥öt
(
FD_PARSE
, "£à˝uáŒowed %d\n", 
i˝u
);

569 
	`fio_˝u_£t
(
mask
, 
i˝u
);

570 
i˝u
++;

572 i‡(
ªt
)

576 
	`‰ì
(
p
);

577  
ªt
;

578 
	}
}

580 
	$°r_˝us_Ælowed_cb
(*
d©a
, c⁄° *
öput
)

582 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

584 i‡(
	`∑r£_dryrun
())

587  
	`£t_˝us_Ælowed
(
td
, &td->
o
.
˝umask
, 
öput
);

588 
	}
}

590 
	$°r_vîify_˝us_Ælowed_cb
(*
d©a
, c⁄° *
öput
)

592 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

594 i‡(
	`∑r£_dryrun
())

597  
	`£t_˝us_Ælowed
(
td
, &td->
o
.
vîify_˝umask
, 
öput
);

598 
	}
}

600 #ifde‡
CONFIG_ZLIB


601 
	$°r_log_˝us_Ælowed_cb
(*
d©a
, c⁄° *
öput
)

603 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

605 i‡(
	`∑r£_dryrun
())

608  
	`£t_˝us_Ælowed
(
td
, &td->
o
.
log_gz_˝umask
, 
öput
);

609 
	}
}

614 #ifde‡
CONFIG_LIBNUMA


615 
	$°r_numa_˝unodes_cb
(*
d©a
, *
öput
)

617 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

618 
bômask
 *
vîify_bômask
;

620 i‡(
	`∑r£_dryrun
())

628 
vîify_bômask
 = 
	`numa_∑r£_node°rög
(
öput
);

629 i‡(
vîify_bômask
 =
NULL
) {

630 
	`log_îr
("fio:Çuma_parse_nodestring failed\n");

631 
	`td_vîr‹
(
td
, 1, "str_numa_cpunodes_cb");

634 
	`numa_‰ì_nodemask
(
vîify_bômask
);

636 
td
->
o
.
numa_˝unodes
 = 
	`°rdup
(
öput
);

638 
	}
}

640 
	$°r_numa_mpﬁ_cb
(*
d©a
, *
öput
)

642 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

643 c⁄° * c⁄° 
pﬁicy_ty≥s
[] =

644 { "deÁu…", "¥e„r", "böd", "öãæóve", "loˇl", 
NULL
 };

645 
i
;

646 *
nodñi°
;

647 
bômask
 *
vîify_bômask
;

649 i‡(
	`∑r£_dryrun
())

652 
nodñi°
 = 
	`°rchr
(
öput
, ':');

653 i‡(
nodñi°
) {

655 *
nodñi°
++ = '\0';

658 
i
 = 0; i <
MPOL_LOCAL
; i++) {

659 i‡(!
	`°rcmp
(
öput
, 
pﬁicy_ty≥s
[
i
])) {

660 
td
->
o
.
numa_mem_mode
 = 
i
;

664 i‡(
i
 > 
MPOL_LOCAL
) {

665 
	`log_îr
("fio: memoryÖolicy should be: default,Örefer, bind, interleave,Üocal\n");

666 
out
;

669 
td
->
o
.
numa_mem_mode
) {

670 
MPOL_PREFERRED
:

674 i‡(
nodñi°
) {

675 *
ª°
 = 
nodñi°
;

676 
	`isdigô
(*
ª°
))

677 
ª°
++;

678 i‡(*
ª°
) {

679 
	`log_îr
("fio: oneÇode only for \'prefer\'\n");

680 
out
;

683 
	`log_îr
("fio: oneÇode isÇeeded for \'prefer\'\n");

684 
out
;

687 
MPOL_INTERLEAVE
:

691 i‡(!
nodñi°
)

692 
nodñi°
 = 
	`°rdup
("all");

694 
MPOL_LOCAL
:

695 
MPOL_DEFAULT
:

699 i‡(
nodñi°
) {

700 
	`log_îr
("fio: NOÇodelist for \'local\'\n");

701 
out
;

704 
MPOL_BIND
:

708 i‡(!
nodñi°
) {

709 
	`log_îr
("fio:áÇodelist isÇeeded for \'bind\'\n");

710 
out
;

721 
td
->
o
.
numa_mem_mode
) {

722 
MPOL_PREFERRED
:

723 
td
->
o
.
numa_mem_¥e„r_node
 = 
	`©oi
(
nodñi°
);

725 
MPOL_INTERLEAVE
:

726 
MPOL_BIND
:

727 
vîify_bômask
 = 
	`numa_∑r£_node°rög
(
nodñi°
);

728 i‡(
vîify_bômask
 =
NULL
) {

729 
	`log_îr
("fio:Çuma_parse_nodestring failed\n");

730 
	`td_vîr‹
(
td
, 1, "str_numa_memnodes_cb");

733 
td
->
o
.
numa_memnodes
 = 
	`°rdup
(
nodñi°
);

734 
	`numa_‰ì_nodemask
(
vîify_bômask
);

737 
MPOL_LOCAL
:

738 
MPOL_DEFAULT
:

744 
out
:

746 
	}
}

749 
	$°r_f°_cb
(*
d©a
, c⁄° *
°r
)

751 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

752 
vÆ
;

753 
boﬁ
 
d⁄e
 = 
Ál£
;

754 *
ƒ
;

756 
td
->
fûe_£rvi˚_ƒ
 = 1;

758 
td
->
o
.
fûe_£rvi˚_ty≥
) {

759 
FIO_FSERVICE_RANDOM
:

760 
FIO_FSERVICE_RR
:

761 
FIO_FSERVICE_SEQ
:

762 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

763 i‡(
ƒ
) {

764 
td
->
fûe_£rvi˚_ƒ
 = 
	`©oi
(
ƒ
);

765 
	`‰ì
(
ƒ
);

767 
d⁄e
 = 
åue
;

769 
FIO_FSERVICE_ZIPF
:

770 
vÆ
 = 
FIO_DEF_ZIPF
;

772 
FIO_FSERVICE_PARETO
:

773 
vÆ
 = 
FIO_DEF_PARETO
;

775 
FIO_FSERVICE_GAUSS
:

776 
vÆ
 = 0.0;

779 
	`log_îr
("fio: bad fûê£rvi˚Åy≥: %d\n", 
td
->
o
.
fûe_£rvi˚_ty≥
);

783 i‡(
d⁄e
)

786 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

787 i‡(
ƒ
 && !
	`°r_to_Êﬂt
“r, &
vÆ
, 0)) {

788 
	`log_îr
("fio: file serviceÅypeÑandomÖostfixÖarsing failed\n");

789 
	`‰ì
(
ƒ
);

793 
	`‰ì
(
ƒ
);

795 
td
->
o
.
fûe_£rvi˚_ty≥
) {

796 
FIO_FSERVICE_ZIPF
:

797 i‡(
vÆ
 == 1.00) {

798 
	`log_îr
("fio: zipfÅheta must be differentÅhan 1.0\n");

801 i‡(
	`∑r£_dryrun
())

803 
td
->
zùf_thëa
 = 
vÆ
;

805 
FIO_FSERVICE_PARETO
:

806 i‡(
vÆ
 <= 0.00 || val >= 1.00) {

807 
	`log_îr
("fio:Öareto input out ofÑange (0 < input < 1.0)\n");

810 i‡(
	`∑r£_dryrun
())

812 
td
->
∑ªto_h
 = 
vÆ
;

814 
FIO_FSERVICE_GAUSS
:

815 i‡(
vÆ
 < 0.00 || val >= 100.00) {

816 
	`log_îr
("fio:Çormal deviation out ofÑange (0 <= input < 100.0)\n");

819 i‡(
	`∑r£_dryrun
())

821 
td
->
gauss_dev
 = 
vÆ
;

826 
	}
}

828 #ifde‡
CONFIG_SYNC_FILE_RANGE


829 
	$°r_s‰_cb
(*
d©a
, c⁄° *
°r
)

831 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

832 *
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

834 
td
->
sync_fûe_ønge_ƒ
 = 1;

835 i‡(
ƒ
) {

836 
td
->
sync_fûe_ønge_ƒ
 = 
	`©oi
(
ƒ
);

837 
	`‰ì
(
ƒ
);

841 
	}
}

844 
	$z⁄e_•lô_ddú
(
thªad_›ti⁄s
 *
o
, 
fio_ddú
 
ddú
,

845 *
°r
, 
boﬁ
 
absﬁuã
)

847 
i
, 
≥rc
, 
≥rc_missög
, 
•îc
, 
•îc_missög
;

848 
•lô
 split;

850 
	`mem£t
(&
•lô
, 0, (split));

852 i‡(
	`•lô_∑r£_ddú
(
o
, &
•lô
, 
ddú
, 
°r
, 
absﬁuã
, 
ZONESPLIT_MAX
))

854 i‡(!
•lô
.
ƒ
)

857 
o
->
z⁄e_•lô
[
ddú
] = 
	`mÆloc
(
•lô
.
ƒ
 * (zone_split));

858 
o
->
z⁄e_•lô_ƒ
[
ddú
] = 
•lô
.
ƒ
;

859 
i
 = 0; i < 
•lô
.
ƒ
; i++) {

860 
o
->
z⁄e_•lô
[
ddú
][
i
].
ac˚ss_≥rc
 = 
•lô
.
vÆ1
[i];

861 i‡(
absﬁuã
)

862 
o
->
z⁄e_•lô
[
ddú
][
i
].
size
 = 
•lô
.
vÆ2
[i];

864 
o
->
z⁄e_•lô
[
ddú
][
i
].
size_≥rc
 = 
•lô
.
vÆ2
[i];

870 
≥rc
 = 
≥rc_missög
 = 0;

871 
•îc
 = 
•îc_missög
 = 0;

872 
i
 = 0; i < 
o
->
z⁄e_•lô_ƒ
[
ddú
]; i++) {

873 
z⁄e_•lô
 *
z•
 = &
o
->z⁄e_•lô[
ddú
][
i
];

875 i‡(
z•
->
ac˚ss_≥rc
 =(
uöt8_t
) -1U)

876 
≥rc_missög
++;

878 
≥rc
 +
z•
->
ac˚ss_≥rc
;

880 i‡(!
absﬁuã
) {

881 i‡(
z•
->
size_≥rc
 =(
uöt8_t
) -1U)

882 
•îc_missög
++;

884 
•îc
 +
z•
->
size_≥rc
;

888 i‡(
≥rc
 > 100 || 
•îc
 > 100) {

889 
	`log_îr
("fio: zone_splitÖercentagesáddÅo moreÅhan 100%%\n");

890 
	`‰ì
(
o
->
z⁄e_•lô
[
ddú
]);

891 
o
->
z⁄e_•lô
[
ddú
] = 
NULL
;

894 i‡(
≥rc
 < 100) {

895 
	`log_îr
("fio:áccessÖercentage don'tádd upÅo 100 for zoned "

896 "øndom di°ributi⁄ (gŸ=%u)\n", 
≥rc
);

897 
	`‰ì
(
o
->
z⁄e_•lô
[
ddú
]);

898 
o
->
z⁄e_•lô
[
ddú
] = 
NULL
;

906 i‡(
≥rc_missög
) {

907 i‡(
≥rc_missög
 =1 && 
o
->
z⁄e_•lô_ƒ
[
ddú
] == 1)

908 
≥rc
 = 100;

909 
i
 = 0; i < 
o
->
z⁄e_•lô_ƒ
[
ddú
]; i++) {

910 
z⁄e_•lô
 *
z•
 = &
o
->z⁄e_•lô[
ddú
][
i
];

912 i‡(
z•
->
ac˚ss_≥rc
 =(
uöt8_t
) -1U)

913 
z•
->
ac˚ss_≥rc
 = (100 - 
≥rc
Ë/ 
≥rc_missög
;

916 i‡(
•îc_missög
) {

917 i‡(
•îc_missög
 =1 && 
o
->
z⁄e_•lô_ƒ
[
ddú
] == 1)

918 
•îc
 = 100;

919 
i
 = 0; i < 
o
->
z⁄e_•lô_ƒ
[
ddú
]; i++) {

920 
z⁄e_•lô
 *
z•
 = &
o
->z⁄e_•lô[
ddú
][
i
];

922 i‡(
z•
->
size_≥rc
 =(
uöt8_t
) -1U)

923 
z•
->
size_≥rc
 = (100 - 
•îc
Ë/ 
•îc_missög
;

928 
	}
}

930 
	$__td_z⁄e_gí_ödex
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

932 
i
, 
j
, 
•ªv
, 
≠ªv
;

933 
uöt64_t
 
•ªv_sz
;

935 
td
->
z⁄e_°©e_ödex
[
ddú
] = 
	`mÆloc
((
z⁄e_•lô_ödex
) * 100);

937 
•ªv_sz
 = 
•ªv
 = 
≠ªv
 = 0;

938 
i
 = 0; i < 
td
->
o
.
z⁄e_•lô_ƒ
[
ddú
]; i++) {

939 
z⁄e_•lô
 *
z•
 = &
td
->
o
.z⁄e_•lô[
ddú
][
i
];

941 
j
 = 
≠ªv
; j <á¥ev + 
z•
->
ac˚ss_≥rc
; j++) {

942 
z⁄e_•lô_ödex
 *
zsi
 = &
td
->
z⁄e_°©e_ödex
[
ddú
][
j
];

944 
zsi
->
size_≥rc
 = 
•ªv
 + 
z•
->size_perc;

945 
zsi
->
size_≥rc_¥ev
 = 
•ªv
;

947 
zsi
->
size
 = 
•ªv_sz
 + 
z•
->size;

948 
zsi
->
size_¥ev
 = 
•ªv_sz
;

951 
≠ªv
 +
z•
->
ac˚ss_≥rc
;

952 
•ªv
 +
z•
->
size_≥rc
;

953 
•ªv_sz
 +
z•
->
size
;

955 
	}
}

961 
	$td_z⁄e_gí_ödex
(
thªad_d©a
 *
td
)

963 
i
;

965 
td
->
z⁄e_°©e_ödex
 = 
	`mÆloc
(
DDIR_RWDIR_CNT
 *

966 (
z⁄e_•lô_ödex
 *));

968 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

969 
	`__td_z⁄e_gí_ödex
(
td
, 
i
);

970 
	}
}

972 
	$∑r£_z⁄ed_di°ributi⁄
(
thªad_d©a
 *
td
, c⁄° *
öput
,

973 
boﬁ
 
absﬁuã
)

975 c⁄° *
¥e
 = 
absﬁuã
 ? "zoned_abs:" : "zoned:";

976 *
°r
, *
p
;

977 
i
, 
ªt
 = 0;

979 
p
 = 
°r
 = 
	`°rdup
(
öput
);

981 
	`°rù_bœnk_‰⁄t
(&
°r
);

982 
	`°rù_bœnk_íd
(
°r
);

985 i‡(
	`°∫cmp
(
°r
, 
¥e
, 
	`°æí
(pre))) {

986 
	`log_îr
("fio: mism©ch i¿z⁄ed i≈uà<%s>\n", 
°r
);

987 
	`‰ì
(
p
);

990 
°r
 +
	`°æí
(
¥e
);

992 
ªt
 = 
	`°r_•lô_∑r£
(
td
, 
°r
, 
z⁄e_•lô_ddú
, 
absﬁuã
);

994 
	`‰ì
(
p
);

996 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

997 
j
;

999 
	`d¥öt
(
FD_PARSE
, "z⁄êddú %d (ƒ=%u): \n", 
i
, 
td
->
o
.
z⁄e_•lô_ƒ
[i]);

1001 
j
 = 0; j < 
td
->
o
.
z⁄e_•lô_ƒ
[
i
]; j++) {

1002 
z⁄e_•lô
 *
z•
 = &
td
->
o
.z⁄e_•lô[
i
][
j
];

1004 i‡(
absﬁuã
) {

1005 
	`d¥öt
(
FD_PARSE
, "\t%d: %u/%Œu\n", 
j
,

1006 
z•
->
ac˚ss_≥rc
,

1007 (Ë
z•
->
size
);

1009 
	`d¥öt
(
FD_PARSE
, "\t%d: %u/%u\n", 
j
,

1010 
z•
->
ac˚ss_≥rc
,

1011 
z•
->
size_≥rc
);

1016 i‡(
	`∑r£_dryrun
()) {

1017 
i
;

1019 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1020 
	`‰ì
(
td
->
o
.
z⁄e_•lô
[
i
]);

1021 
td
->
o
.
z⁄e_•lô
[
i
] = 
NULL
;

1022 
td
->
o
.
z⁄e_•lô_ƒ
[
i
] = 0;

1025  
ªt
;

1028 i‡(!
ªt
)

1029 
	`td_z⁄e_gí_ödex
(
td
);

1031 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

1032 
td
->
o
.
z⁄e_•lô_ƒ
[
i
] = 0;

1035  
ªt
;

1036 
	}
}

1038 
	$°r_øndom_di°ributi⁄_cb
(*
d©a
, c⁄° *
°r
)

1040 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1041 
vÆ
;

1042 *
ƒ
;

1044 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
)

1045 
vÆ
 = 
FIO_DEF_ZIPF
;

1046 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
)

1047 
vÆ
 = 
FIO_DEF_PARETO
;

1048 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_GAUSS
)

1049 
vÆ
 = 0.0;

1050 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED
)

1051  
	`∑r£_z⁄ed_di°ributi⁄
(
td
, 
°r
, 
Ál£
);

1052 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED_ABS
)

1053  
	`∑r£_z⁄ed_di°ributi⁄
(
td
, 
°r
, 
åue
);

1057 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

1058 i‡(
ƒ
 && !
	`°r_to_Êﬂt
“r, &
vÆ
, 0)) {

1059 
	`log_îr
("fio:ÑandomÖostfixÖarsing failed\n");

1060 
	`‰ì
(
ƒ
);

1064 
	`‰ì
(
ƒ
);

1066 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
) {

1067 i‡(
vÆ
 == 1.00) {

1068 
	`log_îr
("fio: zipfÅheta must differentÅhan 1.0\n");

1071 i‡(
	`∑r£_dryrun
())

1073 
td
->
o
.
zùf_thëa
.
u
.
f
 = 
vÆ
;

1074 } i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
) {

1075 i‡(
vÆ
 <= 0.00 || val >= 1.00) {

1076 
	`log_îr
("fio:Öareto input out ofÑange (0 < input < 1.0)\n");

1079 i‡(
	`∑r£_dryrun
())

1081 
td
->
o
.
∑ªto_h
.
u
.
f
 = 
vÆ
;

1083 i‡(
vÆ
 < 0.00 || val >= 100.0) {

1084 
	`log_îr
("fio:Çormal deviation out ofÑange (0 <= input < 100.0)\n");

1087 i‡(
	`∑r£_dryrun
())

1089 
td
->
o
.
gauss_dev
.
u
.
f
 = 
vÆ
;

1093 
	}
}

1095 
	$°r_°ódy°©e_cb
(*
d©a
, c⁄° *
°r
)

1097 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1098 
vÆ
;

1099 *
ƒ
;

1100 *
p˘
;

1101 
Œ
;

1103 i‡(
td
->
o
.
ss_°©e
 !
FIO_SS_IOPS
 &&Åd->o.ss_°©ê!
FIO_SS_IOPS_SLOPE
 &&

1104 
td
->
o
.
ss_°©e
 !
FIO_SS_BW
 &&Åd->o.ss_°©ê!
FIO_SS_BW_SLOPE
) {

1106 
	`log_îr
("fio: unknown steady state criterion\n");

1110 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

1111 i‡(!
ƒ
) {

1112 
	`log_îr
("fio: steadystateÅhreshold must be specified inádditionÅo criterion\n");

1113 
	`‰ì
(
ƒ
);

1118 
p˘
 = 
	`°r°r
(
ƒ
, "%");

1119 i‡(
p˘
) {

1120 *
p˘
 = '\0';

1121 
	`°rù_bœnk_íd
(
ƒ
);

1122 i‡(!
	`°r_to_Êﬂt
(
ƒ
, &
vÆ
, 0)) {

1123 
	`log_îr
("fio: couldÇotÖarse steadystateÅhresholdÖercentage\n");

1124 
	`‰ì
(
ƒ
);

1128 
	`d¥öt
(
FD_PARSE
, "£à°ódy sèãÅhªshﬁdÅÿ%f%%\n", 
vÆ
);

1129 
	`‰ì
(
ƒ
);

1130 i‡(
	`∑r£_dryrun
())

1133 
td
->
o
.
ss_°©e
 |
FIO_SS_PCT
;

1134 
td
->
o
.
ss_limô
.
u
.
f
 = 
vÆ
;

1135 } i‡(
td
->
o
.
ss_°©e
 & 
FIO_SS_IOPS
) {

1136 i‡(!
	`°r_to_Êﬂt
(
ƒ
, &
vÆ
, 0)) {

1137 
	`log_îr
("fio: steadystate IOPSÅhresholdÖostfixÖarsing failed\n");

1138 
	`‰ì
(
ƒ
);

1142 
	`d¥öt
(
FD_PARSE
, "£à°ódy sèã IOPSÅhªshﬁdÅÿ%f\n", 
vÆ
);

1143 
	`‰ì
(
ƒ
);

1144 i‡(
	`∑r£_dryrun
())

1147 
td
->
o
.
ss_limô
.
u
.
f
 = 
vÆ
;

1149 i‡(
	`°r_to_decimÆ
(
ƒ
, &
Œ
, 1, 
td
, 0, 0)) {

1150 
	`log_îr
("fio: steadystate BWÅhresholdÖostfixÖarsing failed\n");

1151 
	`‰ì
(
ƒ
);

1155 
	`d¥öt
(
FD_PARSE
, "£à°ódy sèã BWÅhªshﬁdÅÿ%Œd\n", 
Œ
);

1156 
	`‰ì
(
ƒ
);

1157 i‡(
	`∑r£_dryrun
())

1160 
td
->
o
.
ss_limô
.
u
.
f
 = (Ë
Œ
;

1163 
td
->
ss
.
°©e
 =Åd->
o
.
ss_°©e
;

1165 
	}
}

1172 *
	$gë_√xt_«me
(**
±r
)

1174 *
°r
 = *
±r
;

1175 *
p
, *
°¨t
;

1177 i‡(!
°r
 || !
	`°æí
(str))

1178  
NULL
;

1180 
°¨t
 = 
°r
;

1185 
p
 = 
	`°rchr
(
°r
, ':');

1186 i‡(!
p
) {

1187 *
±r
 = 
NULL
;

1195 i‡(
p
 =
°¨t
) {

1196 
°r
 = ++
°¨t
;

1200 i‡(*(
p
 - 1) != '\\') {

1201 *
p
 = '\0';

1202 *
±r
 = 
p
 + 1;

1206 
	`memmove
(
p
 - 1,Ö, 
	`°æí
(p) + 1);

1207 
°r
 = 
p
;

1210  
°¨t
;

1211 
	}
}

1214 
	$gë_max_«me_idx
(*
öput
)

1216 
cur_idx
;

1217 *
°r
, *
p
;

1219 
p
 = 
°r
 = 
	`°rdup
(
öput
);

1220 
cur_idx
 = 0; ; cur_idx++)

1221 i‡(
	`gë_√xt_«me
(&
°r
Ë=
NULL
)

1224 
	`‰ì
(
p
);

1225  
cur_idx
;

1226 
	}
}

1232 
	$£t_«me_idx
(*
èrgë
, 
size_t
 
éí
, *
öput
, 
ödex
,

1233 
boﬁ
 
unique_fûíame
)

1235 
cur_idx
;

1236 
Àn
;

1237 *
‚ame
, *
°r
, *
p
;

1239 
p
 = 
°r
 = 
	`°rdup
(
öput
);

1241 
ödex
 %
	`gë_max_«me_idx
(
öput
);

1242 
cur_idx
 = 0; cur_idx <
ödex
; cur_idx++)

1243 
‚ame
 = 
	`gë_√xt_«me
(&
°r
);

1245 i‡(
˛õ¡_sockaddr_°r
[0] && 
unique_fûíame
) {

1246 
Àn
 = 
	`¢¥ötf
(
èrgë
, 
éí
, "%s/%s.", 
‚ame
,

1247 
˛õ¡_sockaddr_°r
);

1249 
Àn
 = 
	`¢¥ötf
(
èrgë
, 
éí
, "%s/", 
‚ame
);

1251 
èrgë
[
éí
 - 1] = '\0';

1252 
	`‰ì
(
p
);

1254  
Àn
;

1255 
	}
}

1257 
	$°r_fûíame_cb
(*
d©a
, c⁄° *
öput
)

1259 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1260 *
‚ame
, *
°r
, *
p
;

1262 
p
 = 
°r
 = 
	`°rdup
(
öput
);

1264 
	`°rù_bœnk_‰⁄t
(&
°r
);

1265 
	`°rù_bœnk_íd
(
°r
);

1270 i‡(!
td
->
fûes_ödex
)

1271 
td
->
o
.
ƒ_fûes
 = 0;

1273 (
‚ame
 = 
	`gë_√xt_«me
(&
°r
)Ë!
NULL
) {

1274 i‡(!
	`°æí
(
‚ame
))

1276 
	`add_fûe
(
td
, 
‚ame
, 0, 1);

1279 
	`‰ì
(
p
);

1281 
	}
}

1283 
	$°r_dúe˘‹y_cb
(*
d©a
, c⁄° 
fio_unu£d
 *
unu£d
)

1285 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1286 
°©
 
sb
;

1287 *
dú«me
, *
°r
, *
p
;

1288 
ªt
 = 0;

1290 i‡(
	`∑r£_dryrun
())

1293 
p
 = 
°r
 = 
	`°rdup
(
td
->
o
.
dúe˘‹y
);

1294 (
dú«me
 = 
	`gë_√xt_«me
(&
°r
)Ë!
NULL
) {

1295 i‡(
	`l°©
(
dú«me
, &
sb
) < 0) {

1296 
ªt
 = 
î∫o
;

1298 
	`log_îr
("fio: %†i†nŸá dúe˘‹y\n", 
dú«me
);

1299 
	`td_vîr‹
(
td
, 
ªt
, "lstat");

1300 
out
;

1302 i‡(!
	`S_ISDIR
(
sb
.
°_mode
)) {

1303 
	`log_îr
("fio: %†i†nŸá dúe˘‹y\n", 
dú«me
);

1304 
ªt
 = 1;

1305 
out
;

1309 
out
:

1310 
	`‰ì
(
p
);

1311  
ªt
;

1312 
	}
}

1314 
	$°r_›ídú_cb
(*
d©a
, c⁄° 
fio_unu£d
 *
°r
)

1316 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1318 i‡(
	`∑r£_dryrun
())

1321 i‡(!
td
->
fûes_ödex
)

1322 
td
->
o
.
ƒ_fûes
 = 0;

1324  
	`add_dú_fûes
(
td
,Åd->
o
.
›ídú
);

1325 
	}
}

1327 
	$°r_buf„r_∑âîn_cb
(*
d©a
, c⁄° *
öput
)

1329 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1330 
ªt
;

1333 
ªt
 = 
	`∑r£_™d_fûl_∑âîn
(
öput
, 
	`°æí
(öput), 
td
->
o
.
buf„r_∑âîn
,

1334 
MAX_PATTERN_SIZE
, 
NULL
, 0, NULL, NULL);

1335 i‡(
ªt
 < 0)

1338 
	`as£π
(
ªt
 != 0);

1339 
td
->
o
.
buf„r_∑âîn_byãs
 = 
ªt
;

1346 i‡(!
td
->
o
.
com¥ess_≥r˚¡age
 && !
	`td_ªad
(td))

1347 
td
->
o
.
ªfûl_buf„rs
 = 0;

1349 
td
->
o
.
ªfûl_buf„rs
 = 1;

1351 
td
->
o
.
s¸ambÀ_buf„rs
 = 0;

1352 
td
->
o
.
zîo_buf„rs
 = 0;

1355 
	}
}

1357 
	$°r_buf„r_com¥ess_cb
(*
d©a
, *
û
)

1359 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1361 
td
->
Êags
 |
TD_F_COMPRESS
;

1362 
td
->
o
.
com¥ess_≥r˚¡age
 = *
û
;

1364 
	}
}

1366 
	$°r_dedu≥_cb
(*
d©a
, *
û
)

1368 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1370 
td
->
Êags
 |
TD_F_COMPRESS
;

1371 
td
->
o
.
dedu≥_≥r˚¡age
 = *
û
;

1372 
td
->
o
.
ªfûl_buf„rs
 = 1;

1374 
	}
}

1376 
	$°r_vîify_∑âîn_cb
(*
d©a
, c⁄° *
öput
)

1378 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1379 
ªt
;

1381 
td
->
o
.
vîify_fmt_sz
 = 
	`ARRAY_SIZE
—d->o.
vîify_fmt
);

1382 
ªt
 = 
	`∑r£_™d_fûl_∑âîn
(
öput
, 
	`°æí
(öput), 
td
->
o
.
vîify_∑âîn
,

1383 
MAX_PATTERN_SIZE
, 
fmt_desc
, (fmt_desc),

1384 
td
->
o
.
vîify_fmt
, &td->o.
vîify_fmt_sz
);

1385 i‡(
ªt
 < 0)

1388 
	`as£π
(
ªt
 != 0);

1389 
td
->
o
.
vîify_∑âîn_byãs
 = 
ªt
;

1393 i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
vîify
))

1394 
td
->
o
.
vîify
 = 
VERIFY_PATTERN
;

1397 
	}
}

1399 
	$°r_gtod_ªdu˚_cb
(*
d©a
, *
û
)

1401 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1402 
vÆ
 = *
û
;

1404 
td
->
o
.
dißbÀ_œt
 = !!
vÆ
;

1405 
td
->
o
.
dißbÀ_˛©
 = !!
vÆ
;

1406 
td
->
o
.
dißbÀ_¶©
 = !!
vÆ
;

1407 
td
->
o
.
dißbÀ_bw
 = !!
vÆ
;

1408 
td
->
o
.
˛©_≥r˚¡ûes
 = !
vÆ
;

1409 i‡(
vÆ
)

1410 
td
->
ts_ˇche_mask
 = 63;

1413 
	}
}

1415 
	$°r_off£t_cb
(*
d©a
, *
__vÆ
)

1417 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1418 
v
 = *
__vÆ
;

1420 i‡(
	`∑r£_is_≥r˚¡
(
v
)) {

1421 
td
->
o
.
°¨t_off£t
 = 0;

1422 
td
->
o
.
°¨t_off£t_≥r˚¡
 = -1ULL - 
v
;

1423 
	`d¥öt
(
FD_PARSE
, "SET start_offset_percent %d\n",

1424 
td
->
o
.
°¨t_off£t_≥r˚¡
);

1426 
td
->
o
.
°¨t_off£t
 = 
v
;

1429 
	}
}

1431 
	$°r_size_cb
(*
d©a
, *
__vÆ
)

1433 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1434 
v
 = *
__vÆ
;

1436 i‡(
	`∑r£_is_≥r˚¡
(
v
)) {

1437 
td
->
o
.
size
 = 0;

1438 
td
->
o
.
size_≥r˚¡
 = -1ULL - 
v
;

1439 
	`d¥öt
(
FD_PARSE
, "SET size_percent %d\n",

1440 
td
->
o
.
size_≥r˚¡
);

1442 
td
->
o
.
size
 = 
v
;

1445 
	}
}

1447 
	$°r_wrôe_bw_log_cb
(*
d©a
, c⁄° *
°r
)

1449 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1451 i‡(
°r
)

1452 
td
->
o
.
bw_log_fûe
 = 
	`°rdup
(
°r
);

1454 
td
->
o
.
wrôe_bw_log
 = 1;

1456 
	}
}

1458 
	$°r_wrôe_œt_log_cb
(*
d©a
, c⁄° *
°r
)

1460 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1462 i‡(
°r
)

1463 
td
->
o
.
œt_log_fûe
 = 
	`°rdup
(
°r
);

1465 
td
->
o
.
wrôe_œt_log
 = 1;

1467 
	}
}

1469 
	$°r_wrôe_i›s_log_cb
(*
d©a
, c⁄° *
°r
)

1471 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1473 i‡(
°r
)

1474 
td
->
o
.
i›s_log_fûe
 = 
	`°rdup
(
°r
);

1476 
td
->
o
.
wrôe_i›s_log
 = 1;

1478 
	}
}

1480 
	$°r_wrôe_hi°_log_cb
(*
d©a
, c⁄° *
°r
)

1482 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1484 i‡(
°r
)

1485 
td
->
o
.
hi°_log_fûe
 = 
	`°rdup
(
°r
);

1487 
td
->
o
.
wrôe_hi°_log
 = 1;

1489 
	}
}

1500 
	$°r_i€ngöe_exã∫Æ_cb
(*
d©a
, c⁄° *
°r
)

1502 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1503 
°©
 
sb
;

1504 *
p
;

1506 i‡(!
°r
) {

1507 
	`log_îr
("fio:ÇullÉxternal ioengineÖath\n");

1511 
p
 = (*)
°r
;

1512 
	`°rù_bœnk_‰⁄t
(&
p
);

1513 
	`°rù_bœnk_íd
(
p
);

1515 i‡(
	`°©
(
p
, &
sb
Ë|| !
	`S_ISREG
(sb.
°_mode
)) {

1516 
	`log_îr
("fio: invÆidÉxã∫Æ i€ngöê∑th \"%s\"\n", 
p
);

1520 
td
->
o
.
i€ngöe_so_∑th
 = 
p
;

1522 
	}
}

1524 
	$rw_vîify
(
fio_›ti⁄
 *
o
, *
d©a
)

1526 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1528 i‡(
ªad_⁄ly
 && 
	`td_wrôe
(
td
)) {

1529 
	`log_îr
("fio: job <%s> has write bit set, but fio is in"

1530 "Ñód-⁄ly mode\n", 
td
->
o
.
«me
);

1535 
	}
}

1537 
	$gtod_˝u_vîify
(
fio_›ti⁄
 *
o
, *
d©a
)

1539 #i‚de‡
FIO_HAVE_CPU_AFFINITY


1540 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1542 i‡(
td
->
o
.
gtod_˝u
) {

1543 
	`log_îr
("fio:Ölatform must support CPUáffinity for"

1550 
	}
}

1555 
fio_›ti⁄
 
	gfio_›ti⁄s
[
FIO_MAX_OPTS
] = {

1557 .
«me
 = "description",

1558 .
	g ame
 = "Description of job",

1559 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1560 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
des¸ùti⁄
),

1561 .
	ghñp
 = "Text job description",

1562 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

1563 .
	ggroup
 = 
FIO_OPT_G_DESC
,

1566 .
	g«me
 = "name",

1567 .
	g ame
 = "JobÇame",

1568 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1569 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
«me
),

1570 .
	ghñp
 = "Name ofÅhis job",

1571 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

1572 .
	ggroup
 = 
FIO_OPT_G_DESC
,

1575 .
	g«me
 = "wait_for",

1576 .
	g ame
 = "WaiteeÇame",

1577 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1578 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
waô_f‹
),

1579 .
	ghñp
 = "Name ofÅhe jobÅhis one wantsÅo wait for before starting",

1580 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

1581 .
	ggroup
 = 
FIO_OPT_G_DESC
,

1584 .
	g«me
 = "filename",

1585 .
	g ame
 = "Filename(s)",

1586 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1587 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûíame
),

1588 .
	gcb
 = 
°r_fûíame_cb
,

1589 .
	g¥io
 = -1,

1590 .
	ghñp
 = "File(s)Åo use forÅhe workload",

1591 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1592 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1595 .
	g«me
 = "directory",

1596 .
	g ame
 = "Directory",

1597 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1598 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dúe˘‹y
),

1599 .
	gcb
 = 
°r_dúe˘‹y_cb
,

1600 .
	ghñp
 = "DirectoryÅo store files in",

1601 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1602 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1605 .
	g«me
 = "filename_format",

1606 .
	g ame
 = "Filename Format",

1607 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1608 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûíame_f‹m©
),

1609 .
	g¥io
 = -1,

1610 .
	ghñp
 = "Override default $jobname.$jobnum.$filenumÇaming",

1611 .
	gdef
 = "$jobname.$jobnum.$filenum",

1612 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1613 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1616 .
	g«me
 = "unique_filename",

1617 .
	g ame
 = "Unique Filename",

1618 .
	gty≥
 = 
FIO_OPT_BOOL
,

1619 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
unique_fûíame
),

1620 .
	ghñp
 = "ForÇetwork clients,Örefix file with source IP",

1621 .
	gdef
 = "1",

1622 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1623 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1626 .
	g«me
 = "lockfile",

1627 .
	g ame
 = "Lockfile",

1628 .
	gty≥
 = 
FIO_OPT_STR
,

1629 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_lock_mode
),

1630 .
	ghñp
 = "Lock file when doing IOÅo it",

1631 .
	g¥io
 = 1,

1632 .
	g∑ª¡
 = "filename",

1633 .
	ghide
 = 0,

1634 .
	gdef
 = "none",

1635 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1636 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1637 .
	gposvÆ
 = {

1638 { .
ivÆ
 = "none",

1639 .
	govÆ
 = 
FILE_LOCK_NONE
,

1640 .
	ghñp
 = "No fileÜocking",

1642 { .
	givÆ
 = "exclusive",

1643 .
	govÆ
 = 
FILE_LOCK_EXCLUSIVE
,

1644 .
	ghñp
 = "Exclusive fileÜock",

1647 .
	givÆ
 = "readwrite",

1648 .
	govÆ
 = 
FILE_LOCK_READWRITE
,

1649 .
	ghñp
 = "Read vs writeÜock",

1654 .
	g«me
 = "opendir",

1655 .
	g ame
 = "Open directory",

1656 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1657 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
›ídú
),

1658 .
	gcb
 = 
°r_›ídú_cb
,

1659 .
	ghñp
 = "Recursivelyádd files fromÅhis directoryánd down",

1660 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1661 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1664 .
	g«me
 = "rw",

1665 .
	g ame
 = "Read/write",

1666 .
	gÆüs
 = "readwrite",

1667 .
	gty≥
 = 
FIO_OPT_STR
,

1668 .
	gcb
 = 
°r_rw_cb
,

1669 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
td_ddú
),

1670 .
	ghñp
 = "IO direction",

1671 .
	gdef
 = "read",

1672 .
	gvîify
 = 
rw_vîify
,

1673 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1674 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1675 .
	gposvÆ
 = {

1676 { .
ivÆ
 = "read",

1677 .
	govÆ
 = 
TD_DDIR_READ
,

1678 .
	ghñp
 = "SequentialÑead",

1680 { .
	givÆ
 = "write",

1681 .
	govÆ
 = 
TD_DDIR_WRITE
,

1682 .
	ghñp
 = "Sequential write",

1684 { .
	givÆ
 = "trim",

1685 .
	govÆ
 = 
TD_DDIR_TRIM
,

1686 .
	ghñp
 = "SequentialÅrim",

1688 { .
	givÆ
 = "randread",

1689 .
	govÆ
 = 
TD_DDIR_RANDREAD
,

1690 .
	ghñp
 = "RandomÑead",

1692 { .
	givÆ
 = "randwrite",

1693 .
	govÆ
 = 
TD_DDIR_RANDWRITE
,

1694 .
	ghñp
 = "Random write",

1696 { .
	givÆ
 = "randtrim",

1697 .
	govÆ
 = 
TD_DDIR_RANDTRIM
,

1698 .
	ghñp
 = "RandomÅrim",

1700 { .
	givÆ
 = "rw",

1701 .
	govÆ
 = 
TD_DDIR_RW
,

1702 .
	ghñp
 = "SequentialÑeadánd write mix",

1704 { .
	givÆ
 = "readwrite",

1705 .
	govÆ
 = 
TD_DDIR_RW
,

1706 .
	ghñp
 = "SequentialÑeadánd write mix",

1708 { .
	givÆ
 = "randrw",

1709 .
	govÆ
 = 
TD_DDIR_RANDRW
,

1710 .
	ghñp
 = "RandomÑeadánd write mix"

1712 { .
	givÆ
 = "trimwrite",

1713 .
	govÆ
 = 
TD_DDIR_TRIMWRITE
,

1714 .
	ghñp
 = "Trimánd write mix,ÅrimsÖreceding writes"

1719 .
	g«me
 = "rw_sequencer",

1720 .
	g ame
 = "RW Sequencer",

1721 .
	gty≥
 = 
FIO_OPT_STR
,

1722 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
rw_£q
),

1723 .
	ghñp
 = "IO offset generator modifier",

1724 .
	gdef
 = "sequential",

1725 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1726 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1727 .
	gposvÆ
 = {

1728 { .
ivÆ
 = "sequential",

1729 .
	govÆ
 = 
RW_SEQ_SEQ
,

1730 .
	ghñp
 = "Generate sequential offsets",

1732 { .
	givÆ
 = "identical",

1733 .
	govÆ
 = 
RW_SEQ_IDENT
,

1734 .
	ghñp
 = "Generate identical offsets",

1740 .
	g«me
 = "ioengine",

1741 .
	g ame
 = "IO Engine",

1742 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1743 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i€ngöe
),

1744 .
	ghñp
 = "IOÉngineÅo use",

1745 .
	gdef
 = 
FIO_PREFERRED_ENGINE
,

1746 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1747 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1748 .
	gposvÆ
 = {

1749 { .
ivÆ
 = "sync",

1750 .
	ghñp
 = "UseÑead/write",

1752 { .
	givÆ
 = "psync",

1753 .
	ghñp
 = "UseÖread/pwrite",

1755 { .
	givÆ
 = "vsync",

1756 .
	ghñp
 = "UseÑeadv/writev",

1758 #ifde‡
CONFIG_PWRITEV


1759 { .
	givÆ
 = "pvsync",

1760 .
	ghñp
 = "UseÖreadv/pwritev",

1763 #ifde‡
FIO_HAVE_PWRITEV2


1764 { .
	givÆ
 = "pvsync2",

1765 .
	ghñp
 = "UseÖreadv2/pwritev2",

1768 #ifde‡
CONFIG_LIBAIO


1769 { .
	givÆ
 = "libaio",

1770 .
	ghñp
 = "LinuxÇativeásynchronous IO",

1773 #ifde‡
CONFIG_POSIXAIO


1774 { .
	givÆ
 = "posixaio",

1775 .
	ghñp
 = "POSIXásynchronous IO",

1778 #ifde‡
CONFIG_SOLARISAIO


1779 { .
	givÆ
 = "solarisaio",

1780 .
	ghñp
 = "SolarisÇativeásynchronous IO",

1783 #ifde‡
CONFIG_WINDOWSAIO


1784 { .
	givÆ
 = "windowsaio",

1785 .
	ghñp
 = "WindowsÇativeásynchronous IO"

1788 #ifde‡
CONFIG_RBD


1789 { .
	givÆ
 = "rbd",

1790 .
	ghñp
 = "Rados Block Deviceásynchronous IO"

1793 { .
	givÆ
 = "mmap",

1794 .
	ghñp
 = "Memory mapped IO"

1796 #ifde‡
CONFIG_LINUX_SPLICE


1797 { .
	givÆ
 = "splice",

1798 .
	ghñp
 = "splice/vmsplice based IO",

1800 { .
	givÆ
 = "netsplice",

1801 .
	ghñp
 = "splice/vmspliceÅo/fromÅheÇetwork",

1804 #ifde‡
FIO_HAVE_SGIO


1805 { .
	givÆ
 = "sg",

1806 .
	ghñp
 = "SCSI generic v3 IO",

1809 { .
	givÆ
 = "null",

1810 .
	ghñp
 = "TestingÉngine (no dataÅransfer)",

1812 { .
	givÆ
 = "net",

1813 .
	ghñp
 = "Network IO",

1815 { .
	givÆ
 = "cpuio",

1816 .
	ghñp
 = "CPU cycle burnerÉngine",

1818 #ifde‡
CONFIG_GUASI


1819 { .
	givÆ
 = "guasi",

1820 .
	ghñp
 = "GUASI IOÉngine",

1823 #ifde‡
FIO_HAVE_BINJECT


1824 { .
	givÆ
 = "binject",

1825 .
	ghñp
 = "binject direct inject blockÉngine",

1828 #ifde‡
CONFIG_RDMA


1829 { .
	givÆ
 = "rdma",

1830 .
	ghñp
 = "RDMA IOÉngine",

1833 #ifde‡
CONFIG_FUSION_AW


1834 { .
	givÆ
 = "fusion-aw-sync",

1835 .
	ghñp
 = "Fusion-ioátomic writeÉngine",

1838 #ifde‡
CONFIG_LINUX_EXT4_MOVE_EXTENT


1839 { .
	givÆ
 = "e4defrag",

1840 .
	ghñp
 = "ext4 defragÉngine",

1843 #ifde‡
CONFIG_LINUX_FALLOCATE


1844 { .
	givÆ
 = "falloc",

1845 .
	ghñp
 = "fallocate() file basedÉngine",

1848 #ifde‡
CONFIG_GFAPI


1849 { .
	givÆ
 = "gfapi",

1850 .
	ghñp
 = "GlusterfsÜibgfapi(sync) basedÉngine"

1852 { .
	givÆ
 = "gfapi_async",

1853 .
	ghñp
 = "GlusterfsÜibgfapi(async) basedÉngine"

1856 #ifde‡
CONFIG_LIBHDFS


1857 { .
	givÆ
 = "libhdfs",

1858 .
	ghñp
 = "Hadoop Distributed Filesystem (HDFS)Éngine"

1861 #ifde‡
CONFIG_PMEMBLK


1862 { .
	givÆ
 = "pmemblk",

1863 .
	ghñp
 = "NVMLÜibpmemblk based IOÉngine",

1867 #ifde‡
CONFIG_LINUX_DEVDAX


1868 { .
	givÆ
 = "dev-dax",

1869 .
	ghñp
 = "DAX Device based IOÉngine",

1873 .
	givÆ
 = "filecreate",

1874 .
	ghñp
 = "File creationÉngine",

1876 { .
	givÆ
 = "external",

1877 .
	ghñp
 = "LoadÉxternalÉngine (appendÇame)",

1878 .
	gcb
 = 
°r_i€ngöe_exã∫Æ_cb
,

1880 #ifde‡
CONFIG_LIBPMEM


1881 { .
	givÆ
 = "libpmem",

1882 .
	ghñp
 = "NVMLÜibpmem based IOÉngine",

1888 .
	g«me
 = "iodepth",

1889 .
	g ame
 = "IO Depth",

1890 .
	gty≥
 = 
FIO_OPT_INT
,

1891 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth
),

1892 .
	ghñp
 = "Number of IO buffersÅo keep in flight",

1893 .
	gmövÆ
 = 1,

1894 .
	göãrvÆ
 = 1,

1895 .
	gdef
 = "1",

1896 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1897 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1900 .
	g«me
 = "iodepth_batch",

1901 .
	g ame
 = "IO Depth batch",

1902 .
	gÆüs
 = "iodepth_batch_submit",

1903 .
	gty≥
 = 
FIO_OPT_INT
,

1904 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth_b©ch
),

1905 .
	ghñp
 = "Number of IO buffersÅo submit in one go",

1906 .
	g∑ª¡
 = "iodepth",

1907 .
	ghide
 = 1,

1908 .
	göãrvÆ
 = 1,

1909 .
	gdef
 = "1",

1910 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1911 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1914 .
	g«me
 = "iodepth_batch_complete_min",

1915 .
	g ame
 = "Min IO depth batch complete",

1916 .
	gÆüs
 = "iodepth_batch_complete",

1917 .
	gty≥
 = 
FIO_OPT_INT
,

1918 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth_b©ch_com∂ëe_mö
),

1919 .
	ghñp
 = "MinÇumber of IO buffersÅoÑetrieve in one go",

1920 .
	g∑ª¡
 = "iodepth",

1921 .
	ghide
 = 1,

1922 .
	gmövÆ
 = 0,

1923 .
	göãrvÆ
 = 1,

1924 .
	gdef
 = "1",

1925 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1926 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1929 .
	g«me
 = "iodepth_batch_complete_max",

1930 .
	g ame
 = "Max IO depth batch complete",

1931 .
	gty≥
 = 
FIO_OPT_INT
,

1932 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth_b©ch_com∂ëe_max
),

1933 .
	ghñp
 = "MaxÇumber of IO buffersÅoÑetrieve in one go",

1934 .
	g∑ª¡
 = "iodepth",

1935 .
	ghide
 = 1,

1936 .
	gmövÆ
 = 0,

1937 .
	göãrvÆ
 = 1,

1938 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1939 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1942 .
	g«me
 = "iodepth_low",

1943 .
	g ame
 = "IO Depth batchÜow",

1944 .
	gty≥
 = 
FIO_OPT_INT
,

1945 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth_low
),

1946 .
	ghñp
 = "Low water mark for queuing depth",

1947 .
	g∑ª¡
 = "iodepth",

1948 .
	ghide
 = 1,

1949 .
	göãrvÆ
 = 1,

1950 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1951 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1954 .
	g«me
 = "serialize_overlap",

1955 .
	g ame
 = "Serialize overlap",

1956 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
£rülize_ovîœp
),

1957 .
	gty≥
 = 
FIO_OPT_BOOL
,

1958 .
	ghñp
 = "Wait for in-flight IOsÅhat collideÅo complete",

1959 .
	g∑ª¡
 = "iodepth",

1960 .
	gdef
 = "0",

1961 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1962 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1965 .
	g«me
 = "io_submit_mode",

1966 .
	g ame
 = "IO submit mode",

1967 .
	gty≥
 = 
FIO_OPT_STR
,

1968 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
io_submô_mode
),

1969 .
	ghñp
 = "How IO submissionsánd completionsáre done",

1970 .
	gdef
 = "inline",

1971 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1972 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1973 .
	gposvÆ
 = {

1974 { .
ivÆ
 = "inline",

1975 .
	govÆ
 = 
IO_MODE_INLINE
,

1976 .
	ghñp
 = "Submitánd complete IO inline",

1978 { .
	givÆ
 = "offload",

1979 .
	govÆ
 = 
IO_MODE_OFFLOAD
,

1980 .
	ghñp
 = "Offload submitánd completeÅoÅhreads",

1985 .
	g«me
 = "size",

1986 .
	g ame
 = "Size",

1987 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

1988 .
	gcb
 = 
°r_size_cb
,

1989 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
size
),

1990 .
	ghñp
 = "Total size of device or files",

1991 .
	göãrvÆ
 = 1024 * 1024,

1992 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1993 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1996 .
	g«me
 = "io_size",

1997 .
	gÆüs
 = "io_limit",

1998 .
	g ame
 = "IO Size",

1999 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2000 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
io_size
),

2001 .
	ghñp
 = "Total size of I/OÅo beÖerformed",

2002 .
	göãrvÆ
 = 1024 * 1024,

2003 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2004 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2007 .
	g«me
 = "fill_device",

2008 .
	g ame
 = "Fill device",

2009 .
	gÆüs
 = "fill_fs",

2010 .
	gty≥
 = 
FIO_OPT_BOOL
,

2011 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûl_devi˚
),

2012 .
	ghñp
 = "Write untilán ENOSPCÉrror occurs",

2013 .
	gdef
 = "0",

2014 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2015 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2018 .
	g«me
 = "filesize",

2019 .
	g ame
 = "File size",

2020 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2021 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_size_low
),

2022 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_size_high
),

2023 .
	gmövÆ
 = 1,

2024 .
	ghñp
 = "Size of individual files",

2025 .
	göãrvÆ
 = 1024 * 1024,

2026 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2027 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2030 .
	g«me
 = "file_append",

2031 .
	g ame
 = "Fileáppend",

2032 .
	gty≥
 = 
FIO_OPT_BOOL
,

2033 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_≠≥nd
),

2034 .
	ghñp
 = "IO will startátÅheÉnd ofÅhe file(s)",

2035 .
	gdef
 = "0",

2036 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2037 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2040 .
	g«me
 = "offset",

2041 .
	g ame
 = "IO offset",

2042 .
	gÆüs
 = "fileoffset",

2043 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2044 .
	gcb
 = 
°r_off£t_cb
,

2045 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°¨t_off£t
),

2046 .
	ghñp
 = "Start IO fromÅhis offset",

2047 .
	gdef
 = "0",

2048 .
	göãrvÆ
 = 1024 * 1024,

2049 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2050 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2053 .
	g«me
 = "offset_align",

2054 .
	g ame
 = "IO offsetálignment",

2055 .
	gty≥
 = 
FIO_OPT_INT
,

2056 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°¨t_off£t_Æign
),

2057 .
	ghñp
 = "Start IO fromÅhis offsetálignment",

2058 .
	gdef
 = "0",

2059 .
	göãrvÆ
 = 512,

2060 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2061 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2064 .
	g«me
 = "offset_increment",

2065 .
	g ame
 = "IO offset increment",

2066 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2067 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
off£t_ö¸emít
),

2068 .
	ghñp
 = "What isÅhe increment from one offsetÅoÅheÇext",

2069 .
	g∑ª¡
 = "offset",

2070 .
	ghide
 = 1,

2071 .
	gdef
 = "0",

2072 .
	göãrvÆ
 = 1024 * 1024,

2073 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2074 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2077 .
	g«me
 = "number_ios",

2078 .
	g ame
 = "Number of IOsÅoÖerform",

2079 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2080 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
numbî_ios
),

2081 .
	ghñp
 = "Force job completionáfterÅhisÇumber of IOs",

2082 .
	gdef
 = "0",

2083 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2084 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2087 .
	g«me
 = "bs",

2088 .
	g ame
 = "Block size",

2089 .
	gÆüs
 = "blocksize",

2090 .
	gty≥
 = 
FIO_OPT_INT
,

2091 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bs
[
DDIR_READ
]),

2092 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
bs
[
DDIR_WRITE
]),

2093 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
bs
[
DDIR_TRIM
]),

2094 .
	gmövÆ
 = 1,

2095 .
	ghñp
 = "Block size unit",

2096 .
	gdef
 = "4096",

2097 .
	g∑ª¡
 = "rw",

2098 .
	ghide
 = 1,

2099 .
	göãrvÆ
 = 512,

2100 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2101 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2104 .
	g«me
 = "ba",

2105 .
	g ame
 = "Block sizeálign",

2106 .
	gÆüs
 = "blockalign",

2107 .
	gty≥
 = 
FIO_OPT_INT
,

2108 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ba
[
DDIR_READ
]),

2109 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
ba
[
DDIR_WRITE
]),

2110 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
ba
[
DDIR_TRIM
]),

2111 .
	gmövÆ
 = 1,

2112 .
	ghñp
 = "IO block offsetálignment",

2113 .
	g∑ª¡
 = "rw",

2114 .
	ghide
 = 1,

2115 .
	göãrvÆ
 = 512,

2116 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2117 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2120 .
	g«me
 = "bsrange",

2121 .
	g ame
 = "Block sizeÑange",

2122 .
	gÆüs
 = "blocksize_range",

2123 .
	gty≥
 = 
FIO_OPT_RANGE
,

2124 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
mö_bs
[
DDIR_READ
]),

2125 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
max_bs
[
DDIR_READ
]),

2126 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
mö_bs
[
DDIR_WRITE
]),

2127 .
	goff4
 = 
off£tof
(
thªad_›ti⁄s
, 
max_bs
[
DDIR_WRITE
]),

2128 .
	goff5
 = 
off£tof
(
thªad_›ti⁄s
, 
mö_bs
[
DDIR_TRIM
]),

2129 .
	goff6
 = 
off£tof
(
thªad_›ti⁄s
, 
max_bs
[
DDIR_TRIM
]),

2130 .
	gmövÆ
 = 1,

2131 .
	ghñp
 = "Set block sizeÑange (in more detailÅhan bs)",

2132 .
	g∑ª¡
 = "rw",

2133 .
	ghide
 = 1,

2134 .
	göãrvÆ
 = 4096,

2135 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2136 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2139 .
	g«me
 = "bssplit",

2140 .
	g ame
 = "Block size split",

2141 .
	gty≥
 = 
FIO_OPT_STR
,

2142 .
	gcb
 = 
°r_bs•lô_cb
,

2143 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bs•lô
),

2144 .
	ghñp
 = "Setá specific mix of block sizes",

2145 .
	g∑ª¡
 = "rw",

2146 .
	ghide
 = 1,

2147 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2148 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2151 .
	g«me
 = "bs_unaligned",

2152 .
	g ame
 = "Block size unaligned",

2153 .
	gÆüs
 = "blocksize_unaligned",

2154 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2155 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bs_u«lig√d
),

2156 .
	ghñp
 = "Don't sectorálign IO buffer sizes",

2157 .
	g∑ª¡
 = "rw",

2158 .
	ghide
 = 1,

2159 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2160 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2163 .
	g«me
 = "bs_is_seq_rand",

2164 .
	g ame
 = "Block size division is seq/random (notÑead/write)",

2165 .
	gty≥
 = 
FIO_OPT_BOOL
,

2166 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bs_is_£q_ønd
),

2167 .
	ghñp
 = "Considerány blocksize settingÅo be sequential,random",

2168 .
	gdef
 = "0",

2169 .
	g∑ª¡
 = "blocksize",

2170 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2171 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2174 .
	g«me
 = "randrepeat",

2175 .
	g ame
 = "RandomÑepeatable",

2176 .
	gty≥
 = 
FIO_OPT_BOOL
,

2177 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ønd_ª≥©abÀ
),

2178 .
	ghñp
 = "UseÑepeatableÑandom IOÖattern",

2179 .
	gdef
 = "1",

2180 .
	g∑ª¡
 = "rw",

2181 .
	ghide
 = 1,

2182 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2183 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2186 .
	g«me
 = "randseed",

2187 .
	g ame
 = "TheÑandom generator seed",

2188 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2189 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ønd_£ed
),

2190 .
	ghñp
 = "SetÅheÑandom generator seed value",

2191 .
	gdef
 = "0x89",

2192 .
	g∑ª¡
 = "rw",

2193 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2194 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2197 .
	g«me
 = "use_os_rand",

2198 .
	g ame
 = "Use OSÑandom",

2199 .
	gty≥
 = 
FIO_OPT_DEPRECATED
,

2200 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dï_u£_os_ønd
),

2201 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2202 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2205 .
	g«me
 = "norandommap",

2206 .
	g ame
 = "NoÑandommap",

2207 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2208 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
n‹™domm≠
),

2209 .
	ghñp
 = "AcceptÖotential duplicateÑandom blocks",

2210 .
	g∑ª¡
 = "rw",

2211 .
	ghide
 = 1,

2212 .
	ghide_⁄_£t
 = 1,

2213 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2214 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2217 .
	g«me
 = "softrandommap",

2218 .
	g ame
 = "SoftÑandommap",

2219 .
	gty≥
 = 
FIO_OPT_BOOL
,

2220 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
so·øndomm≠
),

2221 .
	ghñp
 = "SetÇorandommap ifÑandommapállocation fails",

2222 .
	g∑ª¡
 = "norandommap",

2223 .
	ghide
 = 1,

2224 .
	gdef
 = "0",

2225 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2226 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2229 .
	g«me
 = "random_generator",

2230 .
	g ame
 = "Random Generator",

2231 .
	gty≥
 = 
FIO_OPT_STR
,

2232 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øndom_gíî©‹
),

2233 .
	ghñp
 = "Type ofÑandomÇumber generatorÅo use",

2234 .
	gdef
 = "tausworthe",

2235 .
	gposvÆ
 = {

2236 { .
ivÆ
 = "tausworthe",

2237 .
	govÆ
 = 
FIO_RAND_GEN_TAUSWORTHE
,

2238 .
	ghñp
 = "Strong Tausworthe generator",

2240 { .
	givÆ
 = "lfsr",

2241 .
	govÆ
 = 
FIO_RAND_GEN_LFSR
,

2242 .
	ghñp
 = "VariableÜength LFSR",

2245 .
	givÆ
 = "tausworthe64",

2246 .
	govÆ
 = 
FIO_RAND_GEN_TAUSWORTHE64
,

2247 .
	ghñp
 = "64-bit Tausworthe variant",

2250 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2251 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2254 .
	g«me
 = "random_distribution",

2255 .
	g ame
 = "Random Distribution",

2256 .
	gty≥
 = 
FIO_OPT_STR
,

2257 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øndom_di°ributi⁄
),

2258 .
	gcb
 = 
°r_øndom_di°ributi⁄_cb
,

2259 .
	ghñp
 = "Random offset distribution generator",

2260 .
	gdef
 = "random",

2261 .
	gposvÆ
 = {

2262 { .
ivÆ
 = "random",

2263 .
	govÆ
 = 
FIO_RAND_DIST_RANDOM
,

2264 .
	ghñp
 = "CompletelyÑandom",

2266 { .
	givÆ
 = "zipf",

2267 .
	govÆ
 = 
FIO_RAND_DIST_ZIPF
,

2268 .
	ghñp
 = "Zipf distribution",

2270 { .
	givÆ
 = "pareto",

2271 .
	govÆ
 = 
FIO_RAND_DIST_PARETO
,

2272 .
	ghñp
 = "Pareto distribution",

2274 { .
	givÆ
 = "normal",

2275 .
	govÆ
 = 
FIO_RAND_DIST_GAUSS
,

2276 .
	ghñp
 = "Normal (Gaussian) distribution",

2278 { .
	givÆ
 = "zoned",

2279 .
	govÆ
 = 
FIO_RAND_DIST_ZONED
,

2280 .
	ghñp
 = "ZonedÑandom distribution",

2282 { .
	givÆ
 = "zoned_abs",

2283 .
	govÆ
 = 
FIO_RAND_DIST_ZONED_ABS
,

2284 .
	ghñp
 = "ZonedábsoluteÑandom distribution",

2287 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2288 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2291 .
	g«me
 = "percentage_random",

2292 .
	g ame
 = "Percentage Random",

2293 .
	gty≥
 = 
FIO_OPT_INT
,

2294 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
≥rc_ønd
[
DDIR_READ
]),

2295 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
≥rc_ønd
[
DDIR_WRITE
]),

2296 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
≥rc_ønd
[
DDIR_TRIM
]),

2297 .
	gmaxvÆ
 = 100,

2298 .
	ghñp
 = "Percentage of seq/random mixÅhat should beÑandom",

2299 .
	gdef
 = "100,100,100",

2300 .
	göãrvÆ
 = 5,

2301 .
	gövî£
 = "percentage_sequential",

2302 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2303 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2306 .
	g«me
 = "percentage_sequential",

2307 .
	g ame
 = "Percentage Sequential",

2308 .
	gty≥
 = 
FIO_OPT_DEPRECATED
,

2309 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2310 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2313 .
	g«me
 = "allrandrepeat",

2314 .
	g ame
 = "All Random Repeat",

2315 .
	gty≥
 = 
FIO_OPT_BOOL
,

2316 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ÆÃ™d_ª≥©abÀ
),

2317 .
	ghñp
 = "UseÑepeatableÑandomÇumbers forÉverything",

2318 .
	gdef
 = "0",

2319 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2320 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2323 .
	g«me
 = "nrfiles",

2324 .
	g ame
 = "Number of files",

2325 .
	gÆüs
 = "nr_files",

2326 .
	gty≥
 = 
FIO_OPT_INT
,

2327 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ƒ_fûes
),

2328 .
	ghñp
 = "Split job workload betweenÅhisÇumber of files",

2329 .
	gdef
 = "1",

2330 .
	göãrvÆ
 = 1,

2331 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2332 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2335 .
	g«me
 = "openfiles",

2336 .
	g ame
 = "Number of open files",

2337 .
	gty≥
 = 
FIO_OPT_INT
,

2338 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
›í_fûes
),

2339 .
	ghñp
 = "Number of filesÅo keep openátÅhe sameÅime",

2340 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2341 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2344 .
	g«me
 = "file_service_type",

2345 .
	g ame
 = "File serviceÅype",

2346 .
	gty≥
 = 
FIO_OPT_STR
,

2347 .
	gcb
 = 
°r_f°_cb
,

2348 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_£rvi˚_ty≥
),

2349 .
	ghñp
 = "HowÅo select which fileÅo serviceÇext",

2350 .
	gdef
 = "roundrobin",

2351 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2352 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2353 .
	gposvÆ
 = {

2354 { .
ivÆ
 = "random",

2355 .
	govÆ
 = 
FIO_FSERVICE_RANDOM
,

2356 .
	ghñp
 = "Chooseá fileátÑandom (uniform)",

2358 { .
	givÆ
 = "zipf",

2359 .
	govÆ
 = 
FIO_FSERVICE_ZIPF
,

2360 .
	ghñp
 = "ZipfÑandomized",

2362 { .
	givÆ
 = "pareto",

2363 .
	govÆ
 = 
FIO_FSERVICE_PARETO
,

2364 .
	ghñp
 = "ParetoÑandomized",

2366 { .
	givÆ
 = "normal",

2367 .
	govÆ
 = 
FIO_FSERVICE_GAUSS
,

2368 .
	ghñp
 = "Normal (Gaussian)Ñandomized",

2370 { .
	givÆ
 = "gauss",

2371 .
	govÆ
 = 
FIO_FSERVICE_GAUSS
,

2372 .
	ghñp
 = "Alias forÇormal",

2374 { .
	givÆ
 = "roundrobin",

2375 .
	govÆ
 = 
FIO_FSERVICE_RR
,

2376 .
	ghñp
 = "RoundÑobin select files",

2378 { .
	givÆ
 = "sequential",

2379 .
	govÆ
 = 
FIO_FSERVICE_SEQ
,

2380 .
	ghñp
 = "Finish one file before movingÅoÅheÇext",

2383 .
	g∑ª¡
 = "nrfiles",

2384 .
	ghide
 = 1,

2386 #ifde‡
FIO_HAVE_ANY_FALLOCATE


2388 .
	g«me
 = "fallocate",

2389 .
	g ame
 = "Fallocate",

2390 .
	gty≥
 = 
FIO_OPT_STR
,

2391 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ÁŒoˇã_mode
),

2392 .
	ghñp
 = "WhetherÖre-allocation isÖerformed whenÜaying out files",

2393 .
	gdef
 = "native",

2394 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2395 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2396 .
	gposvÆ
 = {

2397 { .
ivÆ
 = "none",

2398 .
	govÆ
 = 
FIO_FALLOCATE_NONE
,

2399 .
	ghñp
 = "DoÇotÖre-allocate space",

2401 { .
	givÆ
 = "native",

2402 .
	govÆ
 = 
FIO_FALLOCATE_NATIVE
,

2403 .
	ghñp
 = "UseÇativeÖre-allocation ifÖossible",

2405 #ifde‡
CONFIG_POSIX_FALLOCATE


2406 { .
	givÆ
 = "posix",

2407 .
	govÆ
 = 
FIO_FALLOCATE_POSIX
,

2408 .
	ghñp
 = "UseÖosix_fallocate()",

2411 #ifde‡
CONFIG_LINUX_FALLOCATE


2412 { .
	givÆ
 = "keep",

2413 .
	govÆ
 = 
FIO_FALLOCATE_KEEP_SIZE
,

2414 .
	ghñp
 = "Use fallocate(..., FALLOC_FL_KEEP_SIZE, ...)",

2418 { .
	givÆ
 = "0",

2419 .
	govÆ
 = 
FIO_FALLOCATE_NONE
,

2420 .
	ghñp
 = "Alias for 'none'",

2422 #ifde‡
CONFIG_POSIX_FALLOCATE


2423 { .
	givÆ
 = "1",

2424 .
	govÆ
 = 
FIO_FALLOCATE_POSIX
,

2425 .
	ghñp
 = "Alias for 'posix'",

2432 .
	g«me
 = "fallocate",

2433 .
	g ame
 = "Fallocate",

2434 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

2435 .
	ghñp
 = "YourÖlatform doesÇot support fallocate",

2439 .
	g«me
 = "fadvise_hint",

2440 .
	g ame
 = "Fadvise hint",

2441 .
	gty≥
 = 
FIO_OPT_STR
,

2442 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Ádvi£_höt
),

2443 .
	gposvÆ
 = {

2444 { .
ivÆ
 = "0",

2445 .
	govÆ
 = 
F_ADV_NONE
,

2446 .
	ghñp
 = "Don't issue fadvise/madvise",

2448 { .
	givÆ
 = "1",

2449 .
	govÆ
 = 
F_ADV_TYPE
,

2450 .
	ghñp
 = "Advise using fio IOÖattern",

2452 { .
	givÆ
 = "random",

2453 .
	govÆ
 = 
F_ADV_RANDOM
,

2454 .
	ghñp
 = "Advise using FADV_RANDOM",

2456 { .
	givÆ
 = "sequential",

2457 .
	govÆ
 = 
F_ADV_SEQUENTIAL
,

2458 .
	ghñp
 = "Advise using FADV_SEQUENTIAL",

2461 .
	ghñp
 = "Use fadvise()ÅoádviseÅhe kernel on IOÖattern",

2462 .
	gdef
 = "1",

2463 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2464 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2467 .
	g«me
 = "fsync",

2468 .
	g ame
 = "Fsync",

2469 .
	gty≥
 = 
FIO_OPT_INT
,

2470 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fsync_blocks
),

2471 .
	ghñp
 = "Issue fsync for writesÉvery givenÇumber of blocks",

2472 .
	gdef
 = "0",

2473 .
	göãrvÆ
 = 1,

2474 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2475 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2478 .
	g«me
 = "fdatasync",

2479 .
	g ame
 = "Fdatasync",

2480 .
	gty≥
 = 
FIO_OPT_INT
,

2481 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fd©async_blocks
),

2482 .
	ghñp
 = "Issue fdatasync for writesÉvery givenÇumber of blocks",

2483 .
	gdef
 = "0",

2484 .
	göãrvÆ
 = 1,

2485 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2486 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2489 .
	g«me
 = "write_barrier",

2490 .
	g ame
 = "Write barrier",

2491 .
	gty≥
 = 
FIO_OPT_INT
,

2492 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
b¨rõr_blocks
),

2493 .
	ghñp
 = "MakeÉvery Nth writeá barrier write",

2494 .
	gdef
 = "0",

2495 .
	göãrvÆ
 = 1,

2496 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2497 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2499 #ifde‡
CONFIG_SYNC_FILE_RANGE


2501 .
	g«me
 = "sync_file_range",

2502 .
	g ame
 = "Sync fileÑange",

2503 .
	gposvÆ
 = {

2504 { .
ivÆ
 = "wait_before",

2505 .
	govÆ
 = 
SYNC_FILE_RANGE_WAIT_BEFORE
,

2506 .
	ghñp
 = "SYNC_FILE_RANGE_WAIT_BEFORE",

2507 .
	g‹vÆ
 = 1,

2509 { .
	givÆ
 = "write",

2510 .
	govÆ
 = 
SYNC_FILE_RANGE_WRITE
,

2511 .
	ghñp
 = "SYNC_FILE_RANGE_WRITE",

2512 .
	g‹vÆ
 = 1,

2515 .
	givÆ
 = "wait_after",

2516 .
	govÆ
 = 
SYNC_FILE_RANGE_WAIT_AFTER
,

2517 .
	ghñp
 = "SYNC_FILE_RANGE_WAIT_AFTER",

2518 .
	g‹vÆ
 = 1,

2521 .
	gty≥
 = 
FIO_OPT_STR_MULTI
,

2522 .
	gcb
 = 
°r_s‰_cb
,

2523 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
sync_fûe_ønge
),

2524 .
	ghñp
 = "Use sync_file_range()",

2525 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2526 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2530 .
	g«me
 = "sync_file_range",

2531 .
	g ame
 = "Sync fileÑange",

2532 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

2533 .
	ghñp
 = "YourÖlatform doesÇot support sync_file_range",

2537 .
	g«me
 = "direct",

2538 .
	g ame
 = "Direct I/O",

2539 .
	gty≥
 = 
FIO_OPT_BOOL
,

2540 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
odúe˘
),

2541 .
	ghñp
 = "Use O_DIRECT IO (negates buffered)",

2542 .
	gdef
 = "0",

2543 .
	gövî£
 = "buffered",

2544 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2545 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2548 .
	g«me
 = "atomic",

2549 .
	g ame
 = "Atomic I/O",

2550 .
	gty≥
 = 
FIO_OPT_BOOL
,

2551 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ﬂtomic
),

2552 .
	ghñp
 = "Use Atomic IO with O_DIRECT (implies O_DIRECT)",

2553 .
	gdef
 = "0",

2554 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2555 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2558 .
	g«me
 = "buffered",

2559 .
	g ame
 = "Buffered I/O",

2560 .
	gty≥
 = 
FIO_OPT_BOOL
,

2561 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
odúe˘
),

2562 .
	g√g
 = 1,

2563 .
	ghñp
 = "Use buffered IO (negates direct)",

2564 .
	gdef
 = "1",

2565 .
	gövî£
 = "direct",

2566 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2567 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2570 .
	g«me
 = "overwrite",

2571 .
	g ame
 = "Overwrite",

2572 .
	gty≥
 = 
FIO_OPT_BOOL
,

2573 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ovîwrôe
),

2574 .
	ghñp
 = "When writing, set whetherÅo overwrite current data",

2575 .
	gdef
 = "0",

2576 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2577 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2580 .
	g«me
 = "loops",

2581 .
	g ame
 = "Loops",

2582 .
	gty≥
 = 
FIO_OPT_INT
,

2583 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
lo›s
),

2584 .
	ghñp
 = "Number ofÅimesÅoÑunÅhe job",

2585 .
	gdef
 = "1",

2586 .
	göãrvÆ
 = 1,

2587 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2588 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2591 .
	g«me
 = "numjobs",

2592 .
	g ame
 = "Number of jobs",

2593 .
	gty≥
 = 
FIO_OPT_INT
,

2594 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
numjobs
),

2595 .
	ghñp
 = "DuplicateÅhis jobÅhis manyÅimes",

2596 .
	gdef
 = "1",

2597 .
	göãrvÆ
 = 1,

2598 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2599 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2602 .
	g«me
 = "startdelay",

2603 .
	g ame
 = "Start delay",

2604 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2605 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°¨t_dñay
),

2606 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
°¨t_dñay_high
),

2607 .
	ghñp
 = "Only start job whenÅhisÖeriod hasÖassed",

2608 .
	gdef
 = "0",

2609 .
	gis_£c⁄ds
 = 1,

2610 .
	gis_time
 = 1,

2611 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2612 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2615 .
	g«me
 = "runtime",

2616 .
	g ame
 = "Runtime",

2617 .
	gÆüs
 = "timeout",

2618 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2619 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
timeout
),

2620 .
	ghñp
 = "Stop workload whenÅhisámount ofÅime hasÖassed",

2621 .
	gdef
 = "0",

2622 .
	gis_£c⁄ds
 = 1,

2623 .
	gis_time
 = 1,

2624 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2625 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2628 .
	g«me
 = "time_based",

2629 .
	g ame
 = "Time based",

2630 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2631 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
time_ba£d
),

2632 .
	ghñp
 = "KeepÑunning untilÑuntime/timeout is met",

2633 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2634 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2637 .
	g«me
 = "verify_only",

2638 .
	g ame
 = "Verify only",

2639 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2640 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_⁄ly
),

2641 .
	ghñp
 = "VerifiesÖreviously written data is still valid",

2642 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2643 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2646 .
	g«me
 = "ramp_time",

2647 .
	g ame
 = "RampÅime",

2648 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2649 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ømp_time
),

2650 .
	ghñp
 = "Ramp upÅime before measuringÖerformance",

2651 .
	gis_£c⁄ds
 = 1,

2652 .
	gis_time
 = 1,

2653 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2654 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2657 .
	g«me
 = "clocksource",

2658 .
	g ame
 = "Clock source",

2659 .
	gty≥
 = 
FIO_OPT_STR
,

2660 .
	gcb
 = 
fio_˛ock_sour˚_cb
,

2661 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˛ocksour˚
),

2662 .
	ghñp
 = "WhatÅype ofÅiming sourceÅo use",

2663 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2664 .
	ggroup
 = 
FIO_OPT_G_CLOCK
,

2665 .
	gposvÆ
 = {

2666 #ifde‡
CONFIG_GETTIMEOFDAY


2667 { .
ivÆ
 = "gettimeofday",

2668 .
	govÆ
 = 
CS_GTOD
,

2669 .
	ghñp
 = "Use gettimeofday(2) forÅiming",

2672 #ifde‡
CONFIG_CLOCK_GETTIME


2673 { .
	givÆ
 = "clock_gettime",

2674 .
	govÆ
 = 
CS_CGETTIME
,

2675 .
	ghñp
 = "Use clock_gettime(2) forÅiming",

2678 #ifde‡
ARCH_HAVE_CPU_CLOCK


2679 { .
	givÆ
 = "cpu",

2680 .
	govÆ
 = 
CS_CPUCLOCK
,

2681 .
	ghñp
 = "Use CPUÖrivate clock",

2687 .
	g«me
 = "mem",

2688 .
	gÆüs
 = "iomem",

2689 .
	g ame
 = "I/O Memory",

2690 .
	gty≥
 = 
FIO_OPT_STR
,

2691 .
	gcb
 = 
°r_mem_cb
,

2692 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
mem_ty≥
),

2693 .
	ghñp
 = "BackingÅype for IO buffers",

2694 .
	gdef
 = "malloc",

2695 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2696 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2697 .
	gposvÆ
 = {

2698 { .
ivÆ
 = "malloc",

2699 .
	govÆ
 = 
MEM_MALLOC
,

2700 .
	ghñp
 = "Use malloc(3) for IO buffers",

2702 #i‚de‡
CONFIG_NO_SHM


2703 { .
	givÆ
 = "shm",

2704 .
	govÆ
 = 
MEM_SHM
,

2705 .
	ghñp
 = "Use shared memory segments for IO buffers",

2707 #ifde‡
FIO_HAVE_HUGETLB


2708 { .
	givÆ
 = "shmhuge",

2709 .
	govÆ
 = 
MEM_SHMHUGE
,

2710 .
	ghñp
 = "Like shm, but use hugeÖages",

2714 { .
	givÆ
 = "mmap",

2715 .
	govÆ
 = 
MEM_MMAP
,

2716 .
	ghñp
 = "Use mmap(2) (file oránon) for IO buffers",

2718 { .
	givÆ
 = "mmapshared",

2719 .
	govÆ
 = 
MEM_MMAPSHARED
,

2720 .
	ghñp
 = "Like mmap, but useÅhe shared flag",

2722 #ifde‡
FIO_HAVE_HUGETLB


2723 { .
	givÆ
 = "mmaphuge",

2724 .
	govÆ
 = 
MEM_MMAPHUGE
,

2725 .
	ghñp
 = "Like mmap, but use hugeÖages",

2728 #ifde‡
CONFIG_CUDA


2729 { .
	givÆ
 = "cudamalloc",

2730 .
	govÆ
 = 
MEM_CUDA_MALLOC
,

2731 .
	ghñp
 = "Allocate GPU device memory for GPUDirect RDMA",

2737 .
	g«me
 = "iomem_align",

2738 .
	gÆüs
 = "mem_align",

2739 .
	g ame
 = "I/O memoryálignment",

2740 .
	gty≥
 = 
FIO_OPT_INT
,

2741 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
mem_Æign
),

2742 .
	gmövÆ
 = 0,

2743 .
	ghñp
 = "IO memory buffer offsetálignment",

2744 .
	gdef
 = "0",

2745 .
	g∑ª¡
 = "iomem",

2746 .
	ghide
 = 1,

2747 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2748 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2751 .
	g«me
 = "verify",

2752 .
	g ame
 = "Verify",

2753 .
	gty≥
 = 
FIO_OPT_STR
,

2754 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify
),

2755 .
	ghñp
 = "Verify data written",

2756 .
	gdef
 = "0",

2757 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2758 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2759 .
	gposvÆ
 = {

2760 { .
ivÆ
 = "0",

2761 .
	govÆ
 = 
VERIFY_NONE
,

2762 .
	ghñp
 = "Don't do IO verification",

2764 { .
	givÆ
 = "md5",

2765 .
	govÆ
 = 
VERIFY_MD5
,

2766 .
	ghñp
 = "Use md5 checksums for verification",

2768 { .
	givÆ
 = "crc64",

2769 .
	govÆ
 = 
VERIFY_CRC64
,

2770 .
	ghñp
 = "Use crc64 checksums for verification",

2772 { .
	givÆ
 = "crc32",

2773 .
	govÆ
 = 
VERIFY_CRC32
,

2774 .
	ghñp
 = "Use crc32 checksums for verification",

2776 { .
	givÆ
 = "crc32c-intel",

2777 .
	govÆ
 = 
VERIFY_CRC32C
,

2778 .
	ghñp
 = "Use crc32c checksums for verification (hwássisted, ifávailable)",

2780 { .
	givÆ
 = "crc32c",

2781 .
	govÆ
 = 
VERIFY_CRC32C
,

2782 .
	ghñp
 = "Use crc32c checksums for verification (hwássisted, ifávailable)",

2784 { .
	givÆ
 = "crc16",

2785 .
	govÆ
 = 
VERIFY_CRC16
,

2786 .
	ghñp
 = "Use crc16 checksums for verification",

2788 { .
	givÆ
 = "crc7",

2789 .
	govÆ
 = 
VERIFY_CRC7
,

2790 .
	ghñp
 = "Use crc7 checksums for verification",

2792 { .
	givÆ
 = "sha1",

2793 .
	govÆ
 = 
VERIFY_SHA1
,

2794 .
	ghñp
 = "Use sha1 checksums for verification",

2796 { .
	givÆ
 = "sha256",

2797 .
	govÆ
 = 
VERIFY_SHA256
,

2798 .
	ghñp
 = "Use sha256 checksums for verification",

2800 { .
	givÆ
 = "sha512",

2801 .
	govÆ
 = 
VERIFY_SHA512
,

2802 .
	ghñp
 = "Use sha512 checksums for verification",

2804 { .
	givÆ
 = "sha3-224",

2805 .
	govÆ
 = 
VERIFY_SHA3_224
,

2806 .
	ghñp
 = "Use sha3-224 checksums for verification",

2808 { .
	givÆ
 = "sha3-256",

2809 .
	govÆ
 = 
VERIFY_SHA3_256
,

2810 .
	ghñp
 = "Use sha3-256 checksums for verification",

2812 { .
	givÆ
 = "sha3-384",

2813 .
	govÆ
 = 
VERIFY_SHA3_384
,

2814 .
	ghñp
 = "Use sha3-384 checksums for verification",

2816 { .
	givÆ
 = "sha3-512",

2817 .
	govÆ
 = 
VERIFY_SHA3_512
,

2818 .
	ghñp
 = "Use sha3-512 checksums for verification",

2820 { .
	givÆ
 = "xxhash",

2821 .
	govÆ
 = 
VERIFY_XXHASH
,

2822 .
	ghñp
 = "Use xxhash checksums for verification",

2826 { .
	givÆ
 = "meta",

2827 .
	govÆ
 = 
VERIFY_HDR_ONLY
,

2828 .
	ghñp
 = "Use io information for verification. "

2832 { .
	givÆ
 = "pattern",

2833 .
	govÆ
 = 
VERIFY_PATTERN_NO_HDR
,

2834 .
	ghñp
 = "Verify strictÖattern",

2837 .
	givÆ
 = "null",

2838 .
	govÆ
 = 
VERIFY_NULL
,

2839 .
	ghñp
 = "PretendÅo verify",

2844 .
	g«me
 = "do_verify",

2845 .
	g ame
 = "Perform verify step",

2846 .
	gty≥
 = 
FIO_OPT_BOOL
,

2847 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
do_vîify
),

2848 .
	ghñp
 = "Run verification stageáfter write",

2849 .
	gdef
 = "1",

2850 .
	g∑ª¡
 = "verify",

2851 .
	ghide
 = 1,

2852 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2853 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2856 .
	g«me
 = "verifysort",

2857 .
	g ame
 = "Verify sort",

2858 .
	gty≥
 = 
FIO_OPT_BOOL
,

2859 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîifys‹t
),

2860 .
	ghñp
 = "Sort written verify blocks forÑead back",

2861 .
	gdef
 = "1",

2862 .
	g∑ª¡
 = "verify",

2863 .
	ghide
 = 1,

2864 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2865 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2868 .
	g«me
 = "verifysort_nr",

2869 .
	g ame
 = "Verify Sort Nr",

2870 .
	gty≥
 = 
FIO_OPT_INT
,

2871 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîifys‹t_ƒ
),

2872 .
	ghñp
 = "Pre-loadánd sort verify blocks foráÑead workload",

2873 .
	gmövÆ
 = 0,

2874 .
	gmaxvÆ
 = 131072,

2875 .
	gdef
 = "1024",

2876 .
	g∑ª¡
 = "verify",

2877 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2878 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2881 .
	g«me
 = "verify_interval",

2882 .
	g ame
 = "Verify interval",

2883 .
	gty≥
 = 
FIO_OPT_INT
,

2884 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_öãrvÆ
),

2885 .
	gmövÆ
 = 2 * (
vîify_hódî
),

2886 .
	ghñp
 = "Store verify buffer headerÉvery N bytes",

2887 .
	g∑ª¡
 = "verify",

2888 .
	ghide
 = 1,

2889 .
	göãrvÆ
 = 2 * (
vîify_hódî
),

2890 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2891 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2894 .
	g«me
 = "verify_offset",

2895 .
	g ame
 = "Verify offset",

2896 .
	gty≥
 = 
FIO_OPT_INT
,

2897 .
	ghñp
 = "Offset verify headerÜocation by N bytes",

2898 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_off£t
),

2899 .
	gmövÆ
 = (
vîify_hódî
),

2900 .
	g∑ª¡
 = "verify",

2901 .
	ghide
 = 1,

2902 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2903 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2906 .
	g«me
 = "verify_pattern",

2907 .
	g ame
 = "VerifyÖattern",

2908 .
	gty≥
 = 
FIO_OPT_STR
,

2909 .
	gcb
 = 
°r_vîify_∑âîn_cb
,

2910 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_∑âîn
),

2911 .
	ghñp
 = "FillÖattern for IO buffers",

2912 .
	g∑ª¡
 = "verify",

2913 .
	ghide
 = 1,

2914 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2915 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2918 .
	g«me
 = "verify_fatal",

2919 .
	g ame
 = "Verify fatal",

2920 .
	gty≥
 = 
FIO_OPT_BOOL
,

2921 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_Áèl
),

2922 .
	gdef
 = "0",

2923 .
	ghñp
 = "Exit oná single verify failure, don't continue",

2924 .
	g∑ª¡
 = "verify",

2925 .
	ghide
 = 1,

2926 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2927 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2930 .
	g«me
 = "verify_dump",

2931 .
	g ame
 = "Verify dump",

2932 .
	gty≥
 = 
FIO_OPT_BOOL
,

2933 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_dump
),

2934 .
	gdef
 = "0",

2935 .
	ghñp
 = "Dump contents of goodánd bad blocks on failure",

2936 .
	g∑ª¡
 = "verify",

2937 .
	ghide
 = 1,

2938 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2939 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2942 .
	g«me
 = "verify_async",

2943 .
	g ame
 = "Verifyásynchronously",

2944 .
	gty≥
 = 
FIO_OPT_INT
,

2945 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_async
),

2946 .
	gdef
 = "0",

2947 .
	ghñp
 = "Number ofásync verifierÅhreadsÅo use",

2948 .
	g∑ª¡
 = "verify",

2949 .
	ghide
 = 1,

2950 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2951 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2954 .
	g«me
 = "verify_backlog",

2955 .
	g ame
 = "Verify backlog",

2956 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2957 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_backlog
),

2958 .
	ghñp
 = "VerifyáfterÅhisÇumber of blocksáre written",

2959 .
	g∑ª¡
 = "verify",

2960 .
	ghide
 = 1,

2961 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2962 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2965 .
	g«me
 = "verify_backlog_batch",

2966 .
	g ame
 = "Verify backlog batch",

2967 .
	gty≥
 = 
FIO_OPT_INT
,

2968 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_b©ch
),

2969 .
	ghñp
 = "VerifyÅhisÇumber of IO blocks",

2970 .
	g∑ª¡
 = "verify",

2971 .
	ghide
 = 1,

2972 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2973 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2975 #ifde‡
FIO_HAVE_CPU_AFFINITY


2977 .
	g«me
 = "verify_async_cpus",

2978 .
	g ame
 = "Async verify CPUs",

2979 .
	gty≥
 = 
FIO_OPT_STR
,

2980 .
	gcb
 = 
°r_vîify_˝us_Ælowed_cb
,

2981 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_˝umask
),

2982 .
	ghñp
 = "Set CPUsállowed forásync verifyÅhreads",

2983 .
	g∑ª¡
 = "verify_async",

2984 .
	ghide
 = 1,

2985 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2986 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2990 .
	g«me
 = "verify_async_cpus",

2991 .
	g ame
 = "Async verify CPUs",

2992 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

2993 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

2997 .
	g«me
 = "experimental_verify",

2998 .
	g ame
 = "Experimental Verify",

2999 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ex≥rimíèl_vîify
),

3000 .
	gty≥
 = 
FIO_OPT_BOOL
,

3001 .
	ghñp
 = "EnableÉxperimental verification",

3002 .
	g∑ª¡
 = "verify",

3003 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3004 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3007 .
	g«me
 = "verify_state_load",

3008 .
	g ame
 = "Load verify state",

3009 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_°©e
),

3010 .
	gty≥
 = 
FIO_OPT_BOOL
,

3011 .
	ghñp
 = "Load verifyÅermination state",

3012 .
	g∑ª¡
 = "verify",

3013 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3014 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3017 .
	g«me
 = "verify_state_save",

3018 .
	g ame
 = "Save verify state",

3019 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_°©e_ßve
),

3020 .
	gty≥
 = 
FIO_OPT_BOOL
,

3021 .
	gdef
 = "1",

3022 .
	ghñp
 = "Save verify state onÅermination",

3023 .
	g∑ª¡
 = "verify",

3024 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3025 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3027 #ifde‡
FIO_HAVE_TRIM


3029 .
	g«me
 = "trim_percentage",

3030 .
	g ame
 = "TrimÖercentage",

3031 .
	gty≥
 = 
FIO_OPT_INT
,

3032 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
åim_≥r˚¡age
),

3033 .
	gmövÆ
 = 0,

3034 .
	gmaxvÆ
 = 100,

3035 .
	ghñp
 = "Number of verify blocksÅoÅrim (i.e., discard)",

3036 .
	g∑ª¡
 = "verify",

3037 .
	gdef
 = "0",

3038 .
	göãrvÆ
 = 1,

3039 .
	ghide
 = 1,

3040 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3041 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

3044 .
	g«me
 = "trim_verify_zero",

3045 .
	g ame
 = "VerifyÅrim zero",

3046 .
	gty≥
 = 
FIO_OPT_BOOL
,

3047 .
	ghñp
 = "VerifyÅhatÅrimmed (i.e., discarded) blocksáreÑeturnedás zeroes",

3048 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
åim_zîo
),

3049 .
	g∑ª¡
 = "trim_percentage",

3050 .
	ghide
 = 1,

3051 .
	gdef
 = "1",

3052 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3053 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

3056 .
	g«me
 = "trim_backlog",

3057 .
	g ame
 = "Trim backlog",

3058 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3059 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
åim_backlog
),

3060 .
	ghñp
 = "TrimáfterÅhisÇumber of blocksáre written",

3061 .
	g∑ª¡
 = "trim_percentage",

3062 .
	ghide
 = 1,

3063 .
	göãrvÆ
 = 1,

3064 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3065 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

3068 .
	g«me
 = "trim_backlog_batch",

3069 .
	g ame
 = "Trim backlog batch",

3070 .
	gty≥
 = 
FIO_OPT_INT
,

3071 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
åim_b©ch
),

3072 .
	ghñp
 = "TrimÅhisÇumber of IO blocks",

3073 .
	g∑ª¡
 = "trim_percentage",

3074 .
	ghide
 = 1,

3075 .
	göãrvÆ
 = 1,

3076 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3077 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

3081 .
	g«me
 = "trim_percentage",

3082 .
	g ame
 = "TrimÖercentage",

3083 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3084 .
	ghñp
 = "Fio doesÇot support TRIM on yourÖlatform",

3087 .
	g«me
 = "trim_verify_zero",

3088 .
	g ame
 = "VerifyÅrim zero",

3089 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3090 .
	ghñp
 = "Fio doesÇot support TRIM on yourÖlatform",

3093 .
	g«me
 = "trim_backlog",

3094 .
	g ame
 = "Trim backlog",

3095 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3096 .
	ghñp
 = "Fio doesÇot support TRIM on yourÖlatform",

3099 .
	g«me
 = "trim_backlog_batch",

3100 .
	g ame
 = "Trim backlog batch",

3101 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3102 .
	ghñp
 = "Fio doesÇot support TRIM on yourÖlatform",

3106 .
	g«me
 = "write_iolog",

3107 .
	g ame
 = "Write I/OÜog",

3108 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3109 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
wrôe_iﬁog_fûe
),

3110 .
	ghñp
 = "Store IOÖatternÅo file",

3111 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3112 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3115 .
	g«me
 = "read_iolog",

3116 .
	g ame
 = "Read I/OÜog",

3117 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3118 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ªad_iﬁog_fûe
),

3119 .
	ghñp
 = "Playback IOÖattern from file",

3120 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3121 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3124 .
	g«me
 = "replay_no_stall",

3125 .
	g ame
 = "Don't stall onÑeplay",

3126 .
	gty≥
 = 
FIO_OPT_BOOL
,

3127 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
no_°Æl
),

3128 .
	gdef
 = "0",

3129 .
	g∑ª¡
 = "read_iolog",

3130 .
	ghide
 = 1,

3131 .
	ghñp
 = "Playback IOÖattern fileás fastásÖossible without stalls",

3132 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3133 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3136 .
	g«me
 = "replay_redirect",

3137 .
	g ame
 = "Redirect device forÑeplay",

3138 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3139 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ª∂ay_ªdúe˘
),

3140 .
	g∑ª¡
 = "read_iolog",

3141 .
	ghide
 = 1,

3142 .
	ghñp
 = "Replayáll I/O ontoÅhis device,Ñegardless ofÅrace device",

3143 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3144 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3147 .
	g«me
 = "replay_scale",

3148 .
	g ame
 = "Replace offset scale factor",

3149 .
	gty≥
 = 
FIO_OPT_INT
,

3150 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ª∂ay_sˇÀ
),

3151 .
	g∑ª¡
 = "read_iolog",

3152 .
	gdef
 = "1",

3153 .
	ghñp
 = "Align offsetsÅoÅhis blocksize",

3154 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3155 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3158 .
	g«me
 = "replay_align",

3159 .
	g ame
 = "Replaceálignment",

3160 .
	gty≥
 = 
FIO_OPT_INT
,

3161 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ª∂ay_Æign
),

3162 .
	g∑ª¡
 = "read_iolog",

3163 .
	ghñp
 = "Scale offset down byÅhis factor",

3164 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3165 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3166 .
	gpow2
 = 1,

3169 .
	g«me
 = "exec_prerun",

3170 .
	g ame
 = "Pre-executeÑunnable",

3171 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3172 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
exec_¥îun
),

3173 .
	ghñp
 = "ExecuteÅhis fileÖriorÅoÑunning job",

3174 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3175 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3178 .
	g«me
 = "exec_postrun",

3179 .
	g ame
 = "Post-executeÑunnable",

3180 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3181 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
exec_po°run
),

3182 .
	ghñp
 = "ExecuteÅhis fileáfterÑunning job",

3183 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3184 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3186 #ifde‡
FIO_HAVE_IOSCHED_SWITCH


3188 .
	g«me
 = "ioscheduler",

3189 .
	g ame
 = "I/O scheduler",

3190 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3191 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ioscheduÀr
),

3192 .
	ghñp
 = "UseÅhis IO scheduler onÅhe backing device",

3193 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3194 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3198 .
	g«me
 = "ioscheduler",

3199 .
	g ame
 = "I/O scheduler",

3200 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3201 .
	ghñp
 = "YourÖlatform doesÇot support IO scheduler switching",

3205 .
	g«me
 = "zonesize",

3206 .
	g ame
 = "Zone size",

3207 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3208 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
z⁄e_size
),

3209 .
	ghñp
 = "Amount of dataÅoÑeadÖer zone",

3210 .
	gdef
 = "0",

3211 .
	göãrvÆ
 = 1024 * 1024,

3212 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3213 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3216 .
	g«me
 = "zonerange",

3217 .
	g ame
 = "ZoneÑange",

3218 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3219 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
z⁄e_ønge
),

3220 .
	ghñp
 = "Give size ofán IO zone",

3221 .
	gdef
 = "0",

3222 .
	göãrvÆ
 = 1024 * 1024,

3223 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3224 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3227 .
	g«me
 = "zoneskip",

3228 .
	g ame
 = "Zone skip",

3229 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3230 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
z⁄e_skù
),

3231 .
	ghñp
 = "Space between IO zones",

3232 .
	gdef
 = "0",

3233 .
	göãrvÆ
 = 1024 * 1024,

3234 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3235 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3238 .
	g«me
 = "lockmem",

3239 .
	g ame
 = "Lock memory",

3240 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3241 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
lockmem
),

3242 .
	ghñp
 = "Lock downÅhisámount of memory (per worker)",

3243 .
	gdef
 = "0",

3244 .
	göãrvÆ
 = 1024 * 1024,

3245 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3246 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3249 .
	g«me
 = "rwmixread",

3250 .
	g ame
 = "Read/write mixÑead",

3251 .
	gty≥
 = 
FIO_OPT_INT
,

3252 .
	gcb
 = 
°r_rwmix_ªad_cb
,

3253 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
rwmix
[
DDIR_READ
]),

3254 .
	gmaxvÆ
 = 100,

3255 .
	ghñp
 = "Percentage of mixed workloadÅhat isÑeads",

3256 .
	gdef
 = "50",

3257 .
	göãrvÆ
 = 5,

3258 .
	gövî£
 = "rwmixwrite",

3259 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3260 .
	ggroup
 = 
FIO_OPT_G_RWMIX
,

3263 .
	g«me
 = "rwmixwrite",

3264 .
	g ame
 = "Read/write mix write",

3265 .
	gty≥
 = 
FIO_OPT_INT
,

3266 .
	gcb
 = 
°r_rwmix_wrôe_cb
,

3267 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
rwmix
[
DDIR_WRITE
]),

3268 .
	gmaxvÆ
 = 100,

3269 .
	ghñp
 = "Percentage of mixed workloadÅhat is writes",

3270 .
	gdef
 = "50",

3271 .
	göãrvÆ
 = 5,

3272 .
	gövî£
 = "rwmixread",

3273 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3274 .
	ggroup
 = 
FIO_OPT_G_RWMIX
,

3277 .
	g«me
 = "rwmixcycle",

3278 .
	g ame
 = "Read/write mix cycle",

3279 .
	gty≥
 = 
FIO_OPT_DEPRECATED
,

3280 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3281 .
	ggroup
 = 
FIO_OPT_G_RWMIX
,

3284 .
	g«me
 = "nice",

3285 .
	g ame
 = "Nice",

3286 .
	gty≥
 = 
FIO_OPT_INT
,

3287 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ni˚
),

3288 .
	ghñp
 = "Set job CPUÇice value",

3289 .
	gmövÆ
 = -20,

3290 .
	gmaxvÆ
 = 19,

3291 .
	gdef
 = "0",

3292 .
	göãrvÆ
 = 1,

3293 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3294 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3296 #ifde‡
FIO_HAVE_IOPRIO


3298 .
	g«me
 = "prio",

3299 .
	g ame
 = "I/OÇiceÖriority",

3300 .
	gty≥
 = 
FIO_OPT_INT
,

3301 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i›rio
),

3302 .
	ghñp
 = "Set job IOÖriority value",

3303 .
	gmövÆ
 = 
IOPRIO_MIN_PRIO
,

3304 .
	gmaxvÆ
 = 
IOPRIO_MAX_PRIO
,

3305 .
	göãrvÆ
 = 1,

3306 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3307 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3311 .
	g«me
 = "prio",

3312 .
	g ame
 = "I/OÇiceÖriority",

3313 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3314 .
	ghñp
 = "YourÖlatform doesÇot support IOÖriorities",

3317 #ifde‡
FIO_HAVE_IOPRIO_CLASS


3318 #i‚de‡
FIO_HAVE_IOPRIO


3322 .
	g«me
 = "prioclass",

3323 .
	g ame
 = "I/OÇiceÖriority class",

3324 .
	gty≥
 = 
FIO_OPT_INT
,

3325 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i›rio_˛ass
),

3326 .
	ghñp
 = "Set job IOÖriority class",

3327 .
	gmövÆ
 = 
IOPRIO_MIN_PRIO_CLASS
,

3328 .
	gmaxvÆ
 = 
IOPRIO_MAX_PRIO_CLASS
,

3329 .
	göãrvÆ
 = 1,

3330 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3331 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3335 .
	g«me
 = "prioclass",

3336 .
	g ame
 = "I/OÇiceÖriority class",

3337 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3338 .
	ghñp
 = "YourÖlatform doesÇot support IOÖriority classes",

3342 .
	g«me
 = "thinktime",

3343 .
	g ame
 = "Thinktime",

3344 .
	gty≥
 = 
FIO_OPT_INT
,

3345 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
thöktime
),

3346 .
	ghñp
 = "IdleÅime between IO buffers (usec)",

3347 .
	gdef
 = "0",

3348 .
	gis_time
 = 1,

3349 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3350 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

3353 .
	g«me
 = "thinktime_spin",

3354 .
	g ame
 = "Thinktime spin",

3355 .
	gty≥
 = 
FIO_OPT_INT
,

3356 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
thöktime_•ö
),

3357 .
	ghñp
 = "StartÅhinkÅime by spinningÅhisámount (usec)",

3358 .
	gdef
 = "0",

3359 .
	gis_time
 = 1,

3360 .
	g∑ª¡
 = "thinktime",

3361 .
	ghide
 = 1,

3362 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3363 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

3366 .
	g«me
 = "thinktime_blocks",

3367 .
	g ame
 = "Thinktime blocks",

3368 .
	gty≥
 = 
FIO_OPT_INT
,

3369 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
thöktime_blocks
),

3370 .
	ghñp
 = "IO bufferÖeriod between 'thinktime'",

3371 .
	gdef
 = "1",

3372 .
	g∑ª¡
 = "thinktime",

3373 .
	ghide
 = 1,

3374 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3375 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

3378 .
	g«me
 = "rate",

3379 .
	g ame
 = "I/OÑate",

3380 .
	gty≥
 = 
FIO_OPT_INT
,

3381 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã
[
DDIR_READ
]),

3382 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
øã
[
DDIR_WRITE
]),

3383 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
øã
[
DDIR_TRIM
]),

3384 .
	ghñp
 = "Set bandwidthÑate",

3385 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3386 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3389 .
	g«me
 = "rate_min",

3390 .
	gÆüs
 = "ratemin",

3391 .
	g ame
 = "I/O minÑate",

3392 .
	gty≥
 = 
FIO_OPT_INT
,

3393 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øãmö
[
DDIR_READ
]),

3394 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
øãmö
[
DDIR_WRITE
]),

3395 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
øãmö
[
DDIR_TRIM
]),

3396 .
	ghñp
 = "Job must meetÅhisÑate or it will be shutdown",

3397 .
	g∑ª¡
 = "rate",

3398 .
	ghide
 = 1,

3399 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3400 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3403 .
	g«me
 = "rate_iops",

3404 .
	g ame
 = "I/OÑate IOPS",

3405 .
	gty≥
 = 
FIO_OPT_INT
,

3406 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s
[
DDIR_READ
]),

3407 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s
[
DDIR_WRITE
]),

3408 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s
[
DDIR_TRIM
]),

3409 .
	ghñp
 = "Limit IO usedÅoÅhisÇumber of IO operations/sec",

3410 .
	ghide
 = 1,

3411 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3412 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3415 .
	g«me
 = "rate_iops_min",

3416 .
	g ame
 = "I/O minÑate IOPS",

3417 .
	gty≥
 = 
FIO_OPT_INT
,

3418 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s_mö
[
DDIR_READ
]),

3419 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s_mö
[
DDIR_WRITE
]),

3420 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s_mö
[
DDIR_TRIM
]),

3421 .
	ghñp
 = "Job must meetÅhisÑate or it will be shut down",

3422 .
	g∑ª¡
 = "rate_iops",

3423 .
	ghide
 = 1,

3424 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3425 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3428 .
	g«me
 = "rate_process",

3429 .
	g ame
 = "Rate Process",

3430 .
	gty≥
 = 
FIO_OPT_STR
,

3431 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_¥o˚ss
),

3432 .
	ghñp
 = "WhatÖrocess controls howÑated IO is managed",

3433 .
	gdef
 = "linear",

3434 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3435 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3436 .
	gposvÆ
 = {

3437 { .
ivÆ
 = "linear",

3438 .
	govÆ
 = 
RATE_PROCESS_LINEAR
,

3439 .
	ghñp
 = "LinearÑate of IO",

3442 .
	givÆ
 = "poisson",

3443 .
	govÆ
 = 
RATE_PROCESS_POISSON
,

3444 .
	ghñp
 = "Rate follows PoissonÖrocess",

3447 .
	g∑ª¡
 = "rate",

3450 .
	g«me
 = "rate_cycle",

3451 .
	gÆüs
 = "ratecycle",

3452 .
	g ame
 = "I/OÑate cycle",

3453 .
	gty≥
 = 
FIO_OPT_INT
,

3454 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øãcy˛e
),

3455 .
	ghñp
 = "Windowáverage forÑateÜimits (msec)",

3456 .
	gdef
 = "1000",

3457 .
	g∑ª¡
 = "rate",

3458 .
	ghide
 = 1,

3459 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3460 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3463 .
	g«me
 = "rate_ignore_thinktime",

3464 .
	g ame
 = "Rate ignoreÅhinktime",

3465 .
	gty≥
 = 
FIO_OPT_BOOL
,

3466 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_ign_thök
),

3467 .
	ghñp
 = "Rated IO ignoresÅhinktime settings",

3468 .
	g∑ª¡
 = "rate",

3469 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3470 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3473 .
	g«me
 = "max_latency",

3474 .
	g ame
 = "Max Latency (usec)",

3475 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

3476 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
max_œãncy
),

3477 .
	ghñp
 = "MaximumÅolerated IOÜatency (usec)",

3478 .
	gis_time
 = 1,

3479 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3480 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

3483 .
	g«me
 = "latency_target",

3484 .
	g ame
 = "Latency Target (usec)",

3485 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

3486 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œãncy_èrgë
),

3487 .
	ghñp
 = "RampÅo max queue depth supportingÅhisÜatency",

3488 .
	gis_time
 = 1,

3489 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3490 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

3493 .
	g«me
 = "latency_window",

3494 .
	g ame
 = "Latency Window (usec)",

3495 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

3496 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œãncy_wödow
),

3497 .
	ghñp
 = "TimeÅo sustainÜatency_target",

3498 .
	gis_time
 = 1,

3499 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3500 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

3503 .
	g«me
 = "latency_percentile",

3504 .
	g ame
 = "Latency Percentile",

3505 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

3506 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œãncy_≥r˚¡ûe
),

3507 .
	ghñp
 = "Percentile of IOs must be belowÜatency_target",

3508 .
	gdef
 = "100",

3509 .
	gmaxÀn
 = 1,

3510 .
	gmöÂ
 = 0.0,

3511 .
	gmaxÂ
 = 100.0,

3512 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3513 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

3516 .
	g«me
 = "invalidate",

3517 .
	g ame
 = "Cache invalidate",

3518 .
	gty≥
 = 
FIO_OPT_BOOL
,

3519 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
övÆid©e_ˇche
),

3520 .
	ghñp
 = "Invalidate buffer/page cacheÖriorÅoÑunning job",

3521 .
	gdef
 = "1",

3522 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3523 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

3526 .
	g«me
 = "sync",

3527 .
	g ame
 = "Synchronous I/O",

3528 .
	gty≥
 = 
FIO_OPT_BOOL
,

3529 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
sync_io
),

3530 .
	ghñp
 = "Use O_SYNC for buffered writes",

3531 .
	gdef
 = "0",

3532 .
	g∑ª¡
 = "buffered",

3533 .
	ghide
 = 1,

3534 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3535 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

3537 #ifde‡
FIO_HAVE_WRITE_HINT


3539 .
	g«me
 = "write_hint",

3540 .
	g ame
 = "Write hint",

3541 .
	gty≥
 = 
FIO_OPT_STR
,

3542 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
wrôe_höt
),

3543 .
	ghñp
 = "SetÉxpected writeÜifeÅime",

3544 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

3545 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3546 .
	gposvÆ
 = {

3547 { .
ivÆ
 = "none",

3548 .
	govÆ
 = 
RWH_WRITE_LIFE_NONE
,

3550 { .
	givÆ
 = "short",

3551 .
	govÆ
 = 
RWH_WRITE_LIFE_SHORT
,

3553 { .
	givÆ
 = "medium",

3554 .
	govÆ
 = 
RWH_WRITE_LIFE_MEDIUM
,

3556 { .
	givÆ
 = "long",

3557 .
	govÆ
 = 
RWH_WRITE_LIFE_LONG
,

3559 { .
	givÆ
 = "extreme",

3560 .
	govÆ
 = 
RWH_WRITE_LIFE_EXTREME
,

3566 .
	g«me
 = "create_serialize",

3567 .
	g ame
 = "Create serialize",

3568 .
	gty≥
 = 
FIO_OPT_BOOL
,

3569 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¸óã_£rülize
),

3570 .
	ghñp
 = "Serialize creation of job files",

3571 .
	gdef
 = "1",

3572 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3573 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3576 .
	g«me
 = "create_fsync",

3577 .
	g ame
 = "Create fsync",

3578 .
	gty≥
 = 
FIO_OPT_BOOL
,

3579 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¸óã_fsync
),

3580 .
	ghñp
 = "fsync fileáfter creation",

3581 .
	gdef
 = "1",

3582 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3583 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3586 .
	g«me
 = "create_on_open",

3587 .
	g ame
 = "Create on open",

3588 .
	gty≥
 = 
FIO_OPT_BOOL
,

3589 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¸óã_⁄_›í
),

3590 .
	ghñp
 = "Create files whenÅheyáre opened for IO",

3591 .
	gdef
 = "0",

3592 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3593 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3596 .
	g«me
 = "create_only",

3597 .
	g ame
 = "Create Only",

3598 .
	gty≥
 = 
FIO_OPT_BOOL
,

3599 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¸óã_⁄ly
),

3600 .
	ghñp
 = "OnlyÖerform file creationÖhase",

3601 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3602 .
	gdef
 = "0",

3605 .
	g«me
 = "allow_file_create",

3606 .
	g ame
 = "Allow file create",

3607 .
	gty≥
 = 
FIO_OPT_BOOL
,

3608 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Ælow_¸óã
),

3609 .
	ghñp
 = "Permit fioÅo create files, ifÅhey don'tÉxist",

3610 .
	gdef
 = "1",

3611 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3612 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

3615 .
	g«me
 = "allow_mounted_write",

3616 .
	g ame
 = "Allow mounted write",

3617 .
	gty≥
 = 
FIO_OPT_BOOL
,

3618 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Ælow_mou¡ed_wrôe
),

3619 .
	ghñp
 = "Allow writesÅoá mountedÖartition",

3620 .
	gdef
 = "0",

3621 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3622 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

3625 .
	g«me
 = "pre_read",

3626 .
	g ame
 = "Pre-read files",

3627 .
	gty≥
 = 
FIO_OPT_BOOL
,

3628 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¥e_ªad
),

3629 .
	ghñp
 = "Pre-read files before starting officialÅesting",

3630 .
	gdef
 = "0",

3631 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3632 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3634 #ifde‡
FIO_HAVE_CPU_AFFINITY


3636 .
	g«me
 = "cpumask",

3637 .
	g ame
 = "CPU mask",

3638 .
	gty≥
 = 
FIO_OPT_INT
,

3639 .
	gcb
 = 
°r_˝umask_cb
,

3640 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˝umask
),

3641 .
	ghñp
 = "CPUáffinity mask",

3642 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3643 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3646 .
	g«me
 = "cpus_allowed",

3647 .
	g ame
 = "CPUsállowed",

3648 .
	gty≥
 = 
FIO_OPT_STR
,

3649 .
	gcb
 = 
°r_˝us_Ælowed_cb
,

3650 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˝umask
),

3651 .
	ghñp
 = "Set CPUsállowed",

3652 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3653 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3656 .
	g«me
 = "cpus_allowed_policy",

3657 .
	g ame
 = "CPUsállowed distributionÖolicy",

3658 .
	gty≥
 = 
FIO_OPT_STR
,

3659 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˝us_Ælowed_pﬁicy
),

3660 .
	ghñp
 = "DistributionÖolicy for cpus_allowed",

3661 .
	g∑ª¡
 = "cpus_allowed",

3662 .
	g¥io
 = 1,

3663 .
	gposvÆ
 = {

3664 { .
ivÆ
 = "shared",

3665 .
	govÆ
 = 
FIO_CPUS_SHARED
,

3666 .
	ghñp
 = "Mask shared betweenÅhreads",

3668 { .
	givÆ
 = "split",

3669 .
	govÆ
 = 
FIO_CPUS_SPLIT
,

3670 .
	ghñp
 = "Mask split betweenÅhreads",

3673 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3674 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3678 .
	g«me
 = "cpumask",

3679 .
	g ame
 = "CPU mask",

3680 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3681 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

3684 .
	g«me
 = "cpus_allowed",

3685 .
	g ame
 = "CPUsállowed",

3686 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3687 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

3690 .
	g«me
 = "cpus_allowed_policy",

3691 .
	g ame
 = "CPUsállowed distributionÖolicy",

3692 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3693 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

3696 #ifde‡
CONFIG_LIBNUMA


3698 .
	g«me
 = "numa_cpu_nodes",

3699 .
	g ame
 = "NUMA CPU Nodes",

3700 .
	gty≥
 = 
FIO_OPT_STR
,

3701 .
	gcb
 = 
°r_numa_˝unodes_cb
,

3702 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
numa_˝unodes
),

3703 .
	ghñp
 = "NUMA CPUÇodes bind",

3704 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3705 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3708 .
	g«me
 = "numa_mem_policy",

3709 .
	g ame
 = "NUMA Memory Policy",

3710 .
	gty≥
 = 
FIO_OPT_STR
,

3711 .
	gcb
 = 
°r_numa_mpﬁ_cb
,

3712 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
numa_memnodes
),

3713 .
	ghñp
 = "NUMA memoryÖolicy setup",

3714 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3715 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3719 .
	g«me
 = "numa_cpu_nodes",

3720 .
	g ame
 = "NUMA CPU Nodes",

3721 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3722 .
	ghñp
 = "Build fio withÜibnuma-dev(el)ÅoÉnableÅhis option",

3725 .
	g«me
 = "numa_mem_policy",

3726 .
	g ame
 = "NUMA Memory Policy",

3727 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3728 .
	ghñp
 = "Build fio withÜibnuma-dev(el)ÅoÉnableÅhis option",

3731 #ifde‡
CONFIG_CUDA


3733 .
	g«me
 = "gpu_dev_id",

3734 .
	g ame
 = "GPU device ID",

3735 .
	gty≥
 = 
FIO_OPT_INT
,

3736 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
gpu_dev_id
),

3737 .
	ghñp
 = "Set GPU device ID for GPUDirect RDMA",

3738 .
	gdef
 = "0",

3739 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3740 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3744 .
	g«me
 = "end_fsync",

3745 .
	g ame
 = "End fsync",

3746 .
	gty≥
 = 
FIO_OPT_BOOL
,

3747 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
íd_fsync
),

3748 .
	ghñp
 = "Include fsyncátÅheÉnd of job",

3749 .
	gdef
 = "0",

3750 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3751 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3754 .
	g«me
 = "fsync_on_close",

3755 .
	g ame
 = "Fsync on close",

3756 .
	gty≥
 = 
FIO_OPT_BOOL
,

3757 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fsync_⁄_˛o£
),

3758 .
	ghñp
 = "fsync files on close",

3759 .
	gdef
 = "0",

3760 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3761 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3764 .
	g«me
 = "unlink",

3765 .
	g ame
 = "Unlink file",

3766 .
	gty≥
 = 
FIO_OPT_BOOL
,

3767 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
u∆ök
),

3768 .
	ghñp
 = "Unlink created filesáfter job has completed",

3769 .
	gdef
 = "0",

3770 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3771 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3774 .
	g«me
 = "unlink_each_loop",

3775 .
	g ame
 = "Unlink fileáfterÉachÜoop ofá job",

3776 .
	gty≥
 = 
FIO_OPT_BOOL
,

3777 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
u∆ök_óch_lo›
),

3778 .
	ghñp
 = "Unlink created filesáfterÉachÜoop iná job has completed",

3779 .
	gdef
 = "0",

3780 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3781 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3784 .
	g«me
 = "exitall",

3785 .
	g ame
 = "Exit-all onÅerminate",

3786 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3787 .
	gcb
 = 
°r_exôÆl_cb
,

3788 .
	ghñp
 = "Terminateáll jobs when oneÉxits",

3789 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3790 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

3793 .
	g«me
 = "exitall_on_error",

3794 .
	g ame
 = "Exit-all onÅerminate inÉrror",

3795 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3796 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
exôÆl_îr‹
),

3797 .
	ghñp
 = "Terminateáll jobs when oneÉxits inÉrror",

3798 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3799 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

3802 .
	g«me
 = "stonewall",

3803 .
	g ame
 = "Wait forÖrevious",

3804 .
	gÆüs
 = "wait_for_previous",

3805 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3806 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°⁄ewÆl
),

3807 .
	ghñp
 = "Insertá hard barrier betweenÅhis jobándÖrevious",

3808 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3809 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

3812 .
	g«me
 = "new_group",

3813 .
	g ame
 = "New group",

3814 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3815 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
√w_group
),

3816 .
	ghñp
 = "MarkÅhe start ofáÇew group (forÑeporting)",

3817 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3818 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

3821 .
	g«me
 = "thread",

3822 .
	g ame
 = "Thread",

3823 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3824 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
u£_thªad
),

3825 .
	ghñp
 = "UseÅhreads instead ofÖrocesses",

3826 #ifde‡
CONFIG_NO_SHM


3827 .
	gdef
 = "1",

3828 .
	gno_w¨n_def
 = 1,

3830 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3831 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

3834 .
	g«me
 = "per_job_logs",

3835 .
	g ame
 = "Per Job Logs",

3836 .
	gty≥
 = 
FIO_OPT_BOOL
,

3837 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
≥r_job_logs
),

3838 .
	ghñp
 = "Include jobÇumber in generatedÜog files orÇot",

3839 .
	gdef
 = "1",

3840 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3841 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3844 .
	g«me
 = "write_bw_log",

3845 .
	g ame
 = "Write bandwidthÜog",

3846 .
	gty≥
 = 
FIO_OPT_STR
,

3847 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bw_log_fûe
),

3848 .
	gcb
 = 
°r_wrôe_bw_log_cb
,

3849 .
	ghñp
 = "WriteÜog of bandwidth duringÑun",

3850 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3851 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3854 .
	g«me
 = "write_lat_log",

3855 .
	g ame
 = "WriteÜatencyÜog",

3856 .
	gty≥
 = 
FIO_OPT_STR
,

3857 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œt_log_fûe
),

3858 .
	gcb
 = 
°r_wrôe_œt_log_cb
,

3859 .
	ghñp
 = "WriteÜog ofÜatency duringÑun",

3860 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3861 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3864 .
	g«me
 = "write_iops_log",

3865 .
	g ame
 = "Write IOPSÜog",

3866 .
	gty≥
 = 
FIO_OPT_STR
,

3867 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i›s_log_fûe
),

3868 .
	gcb
 = 
°r_wrôe_i›s_log_cb
,

3869 .
	ghñp
 = "WriteÜog of IOPS duringÑun",

3870 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3871 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3874 .
	g«me
 = "log_avg_msec",

3875 .
	g ame
 = "Logáveraging (msec)",

3876 .
	gty≥
 = 
FIO_OPT_INT
,

3877 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_avg_m£c
),

3878 .
	ghñp
 = "Average bw/iops/latÜogs overÅhisÖeriod ofÅime",

3879 .
	gdef
 = "0",

3880 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3881 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3884 .
	g«me
 = "log_hist_msec",

3885 .
	g ame
 = "Log histograms (msec)",

3886 .
	gty≥
 = 
FIO_OPT_INT
,

3887 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_hi°_m£c
),

3888 .
	ghñp
 = "Dump completionÜatency histogramsát frequency ofÅhisÅime value",

3889 .
	gdef
 = "0",

3890 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3891 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3894 .
	g«me
 = "log_hist_coarseness",

3895 .
	g ame
 = "HistogramÜogs coarseness",

3896 .
	gty≥
 = 
FIO_OPT_INT
,

3897 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_hi°_cﬂr£√ss
),

3898 .
	ghñp
 = "Integer inÑange [0,6]. Higher coarseness outputs"

3901 .
	gdef
 = "0",

3902 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3903 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3906 .
	g«me
 = "write_hist_log",

3907 .
	g ame
 = "WriteÜatency histogramÜogs",

3908 .
	gty≥
 = 
FIO_OPT_STR
,

3909 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
hi°_log_fûe
),

3910 .
	gcb
 = 
°r_wrôe_hi°_log_cb
,

3911 .
	ghñp
 = "WriteÜog ofÜatency histograms duringÑun",

3912 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3913 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3916 .
	g«me
 = "log_max_value",

3917 .
	g ame
 = "Log maximum instead ofáverage",

3918 .
	gty≥
 = 
FIO_OPT_BOOL
,

3919 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_max
),

3920 .
	ghñp
 = "Log max sample iná window instead ofáverage",

3921 .
	gdef
 = "0",

3922 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3923 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3926 .
	g«me
 = "log_offset",

3927 .
	g ame
 = "Log offset of IO",

3928 .
	gty≥
 = 
FIO_OPT_BOOL
,

3929 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_off£t
),

3930 .
	ghñp
 = "Include offset of IO forÉachÜogÉntry",

3931 .
	gdef
 = "0",

3932 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3933 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3935 #ifde‡
CONFIG_ZLIB


3937 .
	g«me
 = "log_compression",

3938 .
	g ame
 = "Log compression",

3939 .
	gty≥
 = 
FIO_OPT_INT
,

3940 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_gz
),

3941 .
	ghñp
 = "Log in compressed chunks ofÅhis size",

3942 .
	gmövÆ
 = 1024ULL,

3943 .
	gmaxvÆ
 = 512 * 1024 * 1024ULL,

3944 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3945 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3947 #ifde‡
FIO_HAVE_CPU_AFFINITY


3949 .
	g«me
 = "log_compression_cpus",

3950 .
	g ame
 = "Log Compression CPUs",

3951 .
	gty≥
 = 
FIO_OPT_STR
,

3952 .
	gcb
 = 
°r_log_˝us_Ælowed_cb
,

3953 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_gz_˝umask
),

3954 .
	g∑ª¡
 = "log_compression",

3955 .
	ghñp
 = "LimitÜog compressionÅoÅhese CPUs",

3956 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3957 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3961 .
	g«me
 = "log_compression_cpus",

3962 .
	g ame
 = "Log Compression CPUs",

3963 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3964 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

3968 .
	g«me
 = "log_store_compressed",

3969 .
	g ame
 = "Log store compressed",

3970 .
	gty≥
 = 
FIO_OPT_BOOL
,

3971 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_gz_°‹e
),

3972 .
	ghñp
 = "StoreÜogs iná compressed format",

3973 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3974 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3978 .
	g«me
 = "log_compression",

3979 .
	g ame
 = "Log compression",

3980 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3981 .
	ghñp
 = "InstallÜibz-dev(el)Åo get compression support",

3984 .
	g«me
 = "log_store_compressed",

3985 .
	g ame
 = "Log store compressed",

3986 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3987 .
	ghñp
 = "InstallÜibz-dev(el)Åo get compression support",

3991 .
	g«me
 = "log_unix_epoch",

3992 .
	g ame
 = "LogÉpoch unix",

3993 .
	gty≥
 = 
FIO_OPT_BOOL
,

3994 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_unix_ïoch
),

3995 .
	ghñp
 = "Use UnixÅime inÜog files",

3996 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3997 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4000 .
	g«me
 = "block_error_percentiles",

4001 .
	g ame
 = "BlockÉrrorÖercentiles",

4002 .
	gty≥
 = 
FIO_OPT_BOOL
,

4003 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
block_îr‹_hi°
),

4004 .
	ghñp
 = "RecordÅrim blockÉrrorsánd makeá histogram",

4005 .
	gdef
 = "0",

4006 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4007 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4010 .
	g«me
 = "bwavgtime",

4011 .
	g ame
 = "BandwidtháverageÅime",

4012 .
	gty≥
 = 
FIO_OPT_INT
,

4013 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bw_avg_time
),

4014 .
	ghñp
 = "Time window over whichÅo calculate bandwidth"

4016 .
	gdef
 = "500",

4017 .
	g∑ª¡
 = "write_bw_log",

4018 .
	ghide
 = 1,

4019 .
	göãrvÆ
 = 100,

4020 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4021 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4024 .
	g«me
 = "iopsavgtime",

4025 .
	g ame
 = "IOPSáverageÅime",

4026 .
	gty≥
 = 
FIO_OPT_INT
,

4027 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i›s_avg_time
),

4028 .
	ghñp
 = "Time window over whichÅo calculate IOPS (msec)",

4029 .
	gdef
 = "500",

4030 .
	g∑ª¡
 = "write_iops_log",

4031 .
	ghide
 = 1,

4032 .
	göãrvÆ
 = 100,

4033 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4034 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4037 .
	g«me
 = "group_reporting",

4038 .
	g ame
 = "GroupÑeporting",

4039 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4040 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
group_ªp‹tög
),

4041 .
	ghñp
 = "DoÑeporting onáÖer-group basis",

4042 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4043 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4046 .
	g«me
 = "stats",

4047 .
	g ame
 = "Stats",

4048 .
	gty≥
 = 
FIO_OPT_BOOL
,

4049 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°©s
),

4050 .
	ghñp
 = "Enable collection of stats",

4051 .
	gdef
 = "1",

4052 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4053 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4056 .
	g«me
 = "zero_buffers",

4057 .
	g ame
 = "Zero I/O buffers",

4058 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4059 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
zîo_buf„rs
),

4060 .
	ghñp
 = "Init IO buffersÅoáll zeroes",

4061 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4062 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4065 .
	g«me
 = "refill_buffers",

4066 .
	g ame
 = "Refill I/O buffers",

4067 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4068 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ªfûl_buf„rs
),

4069 .
	ghñp
 = "Refill IO buffers onÉvery IO submit",

4070 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4071 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4074 .
	g«me
 = "scramble_buffers",

4075 .
	g ame
 = "Scramble I/O buffers",

4076 .
	gty≥
 = 
FIO_OPT_BOOL
,

4077 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
s¸ambÀ_buf„rs
),

4078 .
	ghñp
 = "Slightly scramble buffers onÉvery IO submit",

4079 .
	gdef
 = "1",

4080 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4081 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4084 .
	g«me
 = "buffer_pattern",

4085 .
	g ame
 = "BufferÖattern",

4086 .
	gty≥
 = 
FIO_OPT_STR
,

4087 .
	gcb
 = 
°r_buf„r_∑âîn_cb
,

4088 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
buf„r_∑âîn
),

4089 .
	ghñp
 = "FillÖattern for IO buffers",

4090 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4091 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4094 .
	g«me
 = "buffer_compress_percentage",

4095 .
	g ame
 = "Buffer compressionÖercentage",

4096 .
	gty≥
 = 
FIO_OPT_INT
,

4097 .
	gcb
 = 
°r_buf„r_com¥ess_cb
,

4098 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
com¥ess_≥r˚¡age
),

4099 .
	gmaxvÆ
 = 100,

4100 .
	gmövÆ
 = 0,

4101 .
	ghñp
 = "How compressibleÅhe buffer is (approximately)",

4102 .
	göãrvÆ
 = 5,

4103 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4104 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4107 .
	g«me
 = "buffer_compress_chunk",

4108 .
	g ame
 = "Buffer compression chunk size",

4109 .
	gty≥
 = 
FIO_OPT_INT
,

4110 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
com¥ess_chunk
),

4111 .
	g∑ª¡
 = "buffer_compress_percentage",

4112 .
	ghide
 = 1,

4113 .
	ghñp
 = "Size of compressibleÑegion in buffer",

4114 .
	gdef
 = "512",

4115 .
	göãrvÆ
 = 256,

4116 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4117 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4120 .
	g«me
 = "dedupe_percentage",

4121 .
	g ame
 = "DedupeÖercentage",

4122 .
	gty≥
 = 
FIO_OPT_INT
,

4123 .
	gcb
 = 
°r_dedu≥_cb
,

4124 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dedu≥_≥r˚¡age
),

4125 .
	gmaxvÆ
 = 100,

4126 .
	gmövÆ
 = 0,

4127 .
	ghñp
 = "Percentage of buffersÅhatáre dedupable",

4128 .
	göãrvÆ
 = 1,

4129 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4130 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4133 .
	g«me
 = "clat_percentiles",

4134 .
	g ame
 = "CompletionÜatencyÖercentiles",

4135 .
	gty≥
 = 
FIO_OPT_BOOL
,

4136 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˛©_≥r˚¡ûes
),

4137 .
	ghñp
 = "EnableÅheÑeporting of completionÜatencyÖercentiles",

4138 .
	gdef
 = "1",

4139 .
	gövî£
 = "lat_percentiles",

4140 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4141 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4144 .
	g«me
 = "lat_percentiles",

4145 .
	g ame
 = "IOÜatencyÖercentiles",

4146 .
	gty≥
 = 
FIO_OPT_BOOL
,

4147 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œt_≥r˚¡ûes
),

4148 .
	ghñp
 = "EnableÅheÑeporting of IOÜatencyÖercentiles",

4149 .
	gdef
 = "0",

4150 .
	gövî£
 = "clat_percentiles",

4151 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4152 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4155 .
	g«me
 = "percentile_list",

4156 .
	g ame
 = "PercentileÜist",

4157 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

4158 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
≥r˚¡ûe_li°
),

4159 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
≥r˚¡ûe_¥ecisi⁄
),

4160 .
	ghñp
 = "Specifyá customÜist ofÖercentilesÅoÑeport for "

4162 .
	gdef
 = "1:5:10:20:30:40:50:60:70:80:90:95:99:99.5:99.9:99.95:99.99",

4163 .
	gmaxÀn
 = 
FIO_IO_U_LIST_MAX_LEN
,

4164 .
	gmöÂ
 = 0.0,

4165 .
	gmaxÂ
 = 100.0,

4166 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4167 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4170 .
	g«me
 = "significant_figures",

4171 .
	g ame
 = "Significant figures",

4172 .
	gty≥
 = 
FIO_OPT_INT
,

4173 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
sig_figs
),

4174 .
	gmaxvÆ
 = 10,

4175 .
	gmövÆ
 = 1,

4176 .
	ghñp
 = "Significant figures for output-format setÅoÇormal",

4177 .
	gdef
 = "4",

4178 .
	göãrvÆ
 = 1,

4179 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4180 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4183 #ifde‡
FIO_HAVE_DISK_UTIL


4185 .
	g«me
 = "disk_util",

4186 .
	g ame
 = "Disk utilization",

4187 .
	gty≥
 = 
FIO_OPT_BOOL
,

4188 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
do_disk_utû
),

4189 .
	ghñp
 = "Log disk utilization statistics",

4190 .
	gdef
 = "1",

4191 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4192 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4196 .
	g«me
 = "disk_util",

4197 .
	g ame
 = "Disk utilization",

4198 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4199 .
	ghñp
 = "YourÖlatform doesÇot support disk utilization",

4203 .
	g«me
 = "gtod_reduce",

4204 .
	g ame
 = "Reduce gettimeofday() calls",

4205 .
	gty≥
 = 
FIO_OPT_BOOL
,

4206 .
	ghñp
 = "GreatlyÑeduceÇumber of gettimeofday() calls",

4207 .
	gcb
 = 
°r_gtod_ªdu˚_cb
,

4208 .
	gdef
 = "0",

4209 .
	ghide_⁄_£t
 = 1,

4210 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4211 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4214 .
	g«me
 = "disable_lat",

4215 .
	g ame
 = "DisableállÜatency stats",

4216 .
	gty≥
 = 
FIO_OPT_BOOL
,

4217 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dißbÀ_œt
),

4218 .
	ghñp
 = "DisableÜatencyÇumbers",

4219 .
	g∑ª¡
 = "gtod_reduce",

4220 .
	ghide
 = 1,

4221 .
	gdef
 = "0",

4222 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4223 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4226 .
	g«me
 = "disable_clat",

4227 .
	g ame
 = "Disable completionÜatency stats",

4228 .
	gty≥
 = 
FIO_OPT_BOOL
,

4229 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dißbÀ_˛©
),

4230 .
	ghñp
 = "Disable completionÜatencyÇumbers",

4231 .
	g∑ª¡
 = "gtod_reduce",

4232 .
	ghide
 = 1,

4233 .
	gdef
 = "0",

4234 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4235 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4238 .
	g«me
 = "disable_slat",

4239 .
	g ame
 = "Disable submissionÜatency stats",

4240 .
	gty≥
 = 
FIO_OPT_BOOL
,

4241 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dißbÀ_¶©
),

4242 .
	ghñp
 = "Disable submissionÜatencyÇumbers",

4243 .
	g∑ª¡
 = "gtod_reduce",

4244 .
	ghide
 = 1,

4245 .
	gdef
 = "0",

4246 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4247 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4250 .
	g«me
 = "disable_bw_measurement",

4251 .
	gÆüs
 = "disable_bw",

4252 .
	g ame
 = "Disable bandwidth stats",

4253 .
	gty≥
 = 
FIO_OPT_BOOL
,

4254 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dißbÀ_bw
),

4255 .
	ghñp
 = "Disable bandwidthÜogging",

4256 .
	g∑ª¡
 = "gtod_reduce",

4257 .
	ghide
 = 1,

4258 .
	gdef
 = "0",

4259 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4260 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4263 .
	g«me
 = "gtod_cpu",

4264 .
	g ame
 = "Dedicated gettimeofday() CPU",

4265 .
	gty≥
 = 
FIO_OPT_INT
,

4266 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
gtod_˝u
),

4267 .
	ghñp
 = "Set up dedicated gettimeofday()Åhread onÅhis CPU",

4268 .
	gvîify
 = 
gtod_˝u_vîify
,

4269 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4270 .
	ggroup
 = 
FIO_OPT_G_CLOCK
,

4273 .
	g«me
 = "unified_rw_reporting",

4274 .
	g ame
 = "Unified RW Reporting",

4275 .
	gty≥
 = 
FIO_OPT_BOOL
,

4276 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
unifõd_rw_ªp
),

4277 .
	ghñp
 = "UnifyÑeportingácross data direction",

4278 .
	gdef
 = "0",

4279 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4280 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4283 .
	g«me
 = "continue_on_error",

4284 .
	g ame
 = "Continue onÉrror",

4285 .
	gty≥
 = 
FIO_OPT_STR
,

4286 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
c⁄töue_⁄_îr‹
),

4287 .
	ghñp
 = "Continue onÇon-fatalÉrrors during IO",

4288 .
	gdef
 = "none",

4289 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4290 .
	ggroup
 = 
FIO_OPT_G_ERR
,

4291 .
	gposvÆ
 = {

4292 { .
ivÆ
 = "none",

4293 .
	govÆ
 = 
ERROR_TYPE_NONE
,

4294 .
	ghñp
 = "Exit whenánÉrror isÉncountered",

4296 { .
	givÆ
 = "read",

4297 .
	govÆ
 = 
ERROR_TYPE_READ
,

4298 .
	ghñp
 = "Continue onÑeadÉrrors only",

4300 { .
	givÆ
 = "write",

4301 .
	govÆ
 = 
ERROR_TYPE_WRITE
,

4302 .
	ghñp
 = "Continue on writeÉrrors only",

4304 { .
	givÆ
 = "io",

4305 .
	govÆ
 = 
ERROR_TYPE_READ
 | 
ERROR_TYPE_WRITE
,

4306 .
	ghñp
 = "Continue onány IOÉrrors",

4308 { .
	givÆ
 = "verify",

4309 .
	govÆ
 = 
ERROR_TYPE_VERIFY
,

4310 .
	ghñp
 = "Continue on verifyÉrrors only",

4312 { .
	givÆ
 = "all",

4313 .
	govÆ
 = 
ERROR_TYPE_ANY
,

4314 .
	ghñp
 = "Continue onáll ioánd verifyÉrrors",

4316 { .
	givÆ
 = "0",

4317 .
	govÆ
 = 
ERROR_TYPE_NONE
,

4318 .
	ghñp
 = "Alias for 'none'",

4320 { .
	givÆ
 = "1",

4321 .
	govÆ
 = 
ERROR_TYPE_ANY
,

4322 .
	ghñp
 = "Alias for 'all'",

4327 .
	g«me
 = "ignore_error",

4328 .
	g ame
 = "Ignore Error",

4329 .
	gty≥
 = 
FIO_OPT_STR
,

4330 .
	gcb
 = 
°r_ign‹e_îr‹_cb
,

4331 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ign‹e_îr‹_ƒ
),

4332 .
	ghñp
 = "Setá specificÜist ofÉrrorsÅo ignore",

4333 .
	g∑ª¡
 = "rw",

4334 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4335 .
	ggroup
 = 
FIO_OPT_G_ERR
,

4338 .
	g«me
 = "error_dump",

4339 .
	g ame
 = "Error Dump",

4340 .
	gty≥
 = 
FIO_OPT_BOOL
,

4341 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
îr‹_dump
),

4342 .
	gdef
 = "0",

4343 .
	ghñp
 = "Dump info onÉachÉrror",

4344 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4345 .
	ggroup
 = 
FIO_OPT_G_ERR
,

4348 .
	g«me
 = "profile",

4349 .
	g ame
 = "Profile",

4350 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

4351 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¥ofûe
),

4352 .
	ghñp
 = "Selectá specific builtinÖerformanceÅest",

4353 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

4354 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4357 .
	g«me
 = "cgroup",

4358 .
	g ame
 = "Cgroup",

4359 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

4360 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
cgroup
),

4361 .
	ghñp
 = "Add jobÅo cgroup ofÅhisÇame",

4362 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4363 .
	ggroup
 = 
FIO_OPT_G_CGROUP
,

4366 .
	g«me
 = "cgroup_nodelete",

4367 .
	g ame
 = "CgroupÇo-delete",

4368 .
	gty≥
 = 
FIO_OPT_BOOL
,

4369 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
cgroup_nodñëe
),

4370 .
	ghñp
 = "DoÇot delete cgroupsáfter job completion",

4371 .
	gdef
 = "0",

4372 .
	g∑ª¡
 = "cgroup",

4373 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4374 .
	ggroup
 = 
FIO_OPT_G_CGROUP
,

4377 .
	g«me
 = "cgroup_weight",

4378 .
	g ame
 = "Cgroup weight",

4379 .
	gty≥
 = 
FIO_OPT_INT
,

4380 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
cgroup_weight
),

4381 .
	ghñp
 = "Use given weight for cgroup",

4382 .
	gmövÆ
 = 100,

4383 .
	gmaxvÆ
 = 1000,

4384 .
	g∑ª¡
 = "cgroup",

4385 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4386 .
	ggroup
 = 
FIO_OPT_G_CGROUP
,

4389 .
	g«me
 = "uid",

4390 .
	g ame
 = "User ID",

4391 .
	gty≥
 = 
FIO_OPT_INT
,

4392 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
uid
),

4393 .
	ghñp
 = "Run job withÅhis user ID",

4394 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4395 .
	ggroup
 = 
FIO_OPT_G_CRED
,

4398 .
	g«me
 = "gid",

4399 .
	g ame
 = "Group ID",

4400 .
	gty≥
 = 
FIO_OPT_INT
,

4401 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
gid
),

4402 .
	ghñp
 = "Run job withÅhis group ID",

4403 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4404 .
	ggroup
 = 
FIO_OPT_G_CRED
,

4407 .
	g«me
 = "kb_base",

4408 .
	g ame
 = "KB Base",

4409 .
	gty≥
 = 
FIO_OPT_INT
,

4410 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
kb_ba£
),

4411 .
	g¥io
 = 1,

4412 .
	gdef
 = "1024",

4413 .
	gposvÆ
 = {

4414 { .
ivÆ
 = "1024",

4415 .
	govÆ
 = 1024,

4416 .
	ghñp
 = "Inputs invert IECánd SIÖrefixes (for compatibility); outputsÖrefer binary",

4418 { .
	givÆ
 = "1000",

4419 .
	govÆ
 = 1000,

4420 .
	ghñp
 = "Inputs use IECánd SIÖrefixes; outputsÖrefer SI",

4423 .
	ghñp
 = "UnitÖrefix interpretation for quantities of data (IECánd SI)",

4424 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4425 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4428 .
	g«me
 = "unit_base",

4429 .
	g ame
 = "Unit for quantities of data (Bits or Bytes)",

4430 .
	gty≥
 = 
FIO_OPT_INT
,

4431 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
unô_ba£
),

4432 .
	g¥io
 = 1,

4433 .
	gposvÆ
 = {

4434 { .
ivÆ
 = "0",

4435 .
	govÆ
 = 0,

4436 .
	ghñp
 = "Auto-detect",

4438 { .
	givÆ
 = "8",

4439 .
	govÆ
 = 8,

4440 .
	ghñp
 = "Normal (byte based)",

4442 { .
	givÆ
 = "1",

4443 .
	govÆ
 = 1,

4444 .
	ghñp
 = "Bit based",

4447 .
	ghñp
 = "Bit multiple ofÑesult summary data (8 for byte, 1 for bit)",

4448 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4449 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4452 .
	g«me
 = "hugepage-size",

4453 .
	g ame
 = "Hugepage size",

4454 .
	gty≥
 = 
FIO_OPT_INT
,

4455 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
hugïage_size
),

4456 .
	ghñp
 = "When using hugepages, specify size ofÉachÖage",

4457 .
	gdef
 = 
__fio_°rögify
(
FIO_HUGE_PAGE
),

4458 .
	göãrvÆ
 = 1024 * 1024,

4459 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4460 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4463 .
	g«me
 = "flow_id",

4464 .
	g ame
 = "I/O flow ID",

4465 .
	gty≥
 = 
FIO_OPT_INT
,

4466 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Êow_id
),

4467 .
	ghñp
 = "The flow index IDÅo use",

4468 .
	gdef
 = "0",

4469 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4470 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

4473 .
	g«me
 = "flow",

4474 .
	g ame
 = "I/O flow weight",

4475 .
	gty≥
 = 
FIO_OPT_INT
,

4476 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Êow
),

4477 .
	ghñp
 = "Weight for flow control ofÅhis job",

4478 .
	g∑ª¡
 = "flow_id",

4479 .
	ghide
 = 1,

4480 .
	gdef
 = "0",

4481 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4482 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

4485 .
	g«me
 = "flow_watermark",

4486 .
	g ame
 = "I/O flow watermark",

4487 .
	gty≥
 = 
FIO_OPT_INT
,

4488 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Êow_w©îm¨k
),

4489 .
	ghñp
 = "High watermark for flow control. This option"

4492 .
	g∑ª¡
 = "flow_id",

4493 .
	ghide
 = 1,

4494 .
	gdef
 = "1024",

4495 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4496 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

4499 .
	g«me
 = "flow_sleep",

4500 .
	g ame
 = "I/O flow sleep",

4501 .
	gty≥
 = 
FIO_OPT_INT
,

4502 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Êow_¶ìp
),

4503 .
	ghñp
 = "How many microsecondsÅo sleepáfter being held"

4505 .
	g∑ª¡
 = "flow_id",

4506 .
	ghide
 = 1,

4507 .
	gdef
 = "0",

4508 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4509 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

4512 .
	g«me
 = "steadystate",

4513 .
	g ame
 = "Steady stateÅhreshold",

4514 .
	gÆüs
 = "ss",

4515 .
	gty≥
 = 
FIO_OPT_STR
,

4516 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ss_°©e
),

4517 .
	gcb
 = 
°r_°ódy°©e_cb
,

4518 .
	ghñp
 = "DefineÅhe criterionándÜimitÅo judge whená job hasÑeached steady state",

4519 .
	gdef
 = "iops_slope:0.01%",

4520 .
	gposvÆ
 = {

4521 { .
ivÆ
 = "iops",

4522 .
	govÆ
 = 
FIO_SS_IOPS
,

4523 .
	ghñp
 = "maximum mean deviation of IOPS measurements",

4525 { .
	givÆ
 = "iops_slope",

4526 .
	govÆ
 = 
FIO_SS_IOPS_SLOPE
,

4527 .
	ghñp
 = "slope calculated from IOPS measurements",

4529 { .
	givÆ
 = "bw",

4530 .
	govÆ
 = 
FIO_SS_BW
,

4531 .
	ghñp
 = "maximum mean deviation of bandwidth measurements",

4534 .
	givÆ
 = "bw_slope",

4535 .
	govÆ
 = 
FIO_SS_BW_SLOPE
,

4536 .
	ghñp
 = "slope calculated from bandwidth measurements",

4539 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4540 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

4543 .
	g«me
 = "steadystate_duration",

4544 .
	g ame
 = "Steady state duration",

4545 .
	gÆüs
 = "ss_dur",

4546 .
	g∑ª¡
 = "steadystate",

4547 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

4548 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ss_dur
),

4549 .
	ghñp
 = "Stop workload uponáttaining steady state for specified duration",

4550 .
	gdef
 = "0",

4551 .
	gis_£c⁄ds
 = 1,

4552 .
	gis_time
 = 1,

4553 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4554 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

4557 .
	g«me
 = "steadystate_ramp_time",

4558 .
	g ame
 = "Steady stateÑampÅime",

4559 .
	gÆüs
 = "ss_ramp",

4560 .
	g∑ª¡
 = "steadystate",

4561 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

4562 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ss_ømp_time
),

4563 .
	ghñp
 = "Delay before initiation of data collection for steady state jobÅerminationÅesting",

4564 .
	gdef
 = "0",

4565 .
	gis_£c⁄ds
 = 1,

4566 .
	gis_time
 = 1,

4567 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4568 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

4571 .
	g«me
 = 
NULL
,

4575 
	$add_to_l›t
(
›ti⁄
 *
l›t
, 
fio_›ti⁄
 *
o
,

4576 c⁄° *
«me
, 
vÆ
)

4578 
l›t
->
«me
 = (*)Çame;

4579 
l›t
->
vÆ
 = val;

4580 i‡(
o
->
ty≥
 =
FIO_OPT_STR_SET
)

4581 
l›t
->
has_¨g
 = 
›ti⁄Æ_¨gumít
;

4583 
l›t
->
has_¨g
 = 
ªquúed_¨gumít
;

4584 
	}
}

4586 
	$›ti⁄s_to_l›ts
(
fio_›ti⁄
 *
›ts
,

4587 
›ti⁄
 *
l⁄g_›ti⁄s
,

4588 
i
, 
›ti⁄_ty≥
)

4590 
fio_›ti⁄
 *
o
 = &
›ts
[0];

4591 
o
->
«me
) {

4592 
	`add_to_l›t
(&
l⁄g_›ti⁄s
[
i
], 
o
, o->
«me
, 
›ti⁄_ty≥
);

4593 i‡(
o
->
Æüs
) {

4594 
i
++;

4595 
	`add_to_l›t
(&
l⁄g_›ti⁄s
[
i
], 
o
, o->
Æüs
, 
›ti⁄_ty≥
);

4598 
i
++;

4599 
o
++;

4600 
	`as£π
(
i
 < 
FIO_NR_OPTIONS
);

4602 
	}
}

4604 
	$fio_›ti⁄s_£t_i€ngöe_›ts
(
›ti⁄
 *
l⁄g_›ti⁄s
,

4605 
thªad_d©a
 *
td
)

4607 
i
;

4609 
i
 = 0;

4610 
l⁄g_›ti⁄s
[
i
].
«me
) {

4611 i‡(
l⁄g_›ti⁄s
[
i
].
vÆ
 =
FIO_GETOPT_IOENGINE
) {

4612 
	`mem£t
(&
l⁄g_›ti⁄s
[
i
], 0, (*long_options));

4615 
i
++;

4621 i‡(!
td
 || !td->
eo
)

4624 
	`›ti⁄s_to_l›ts
(
td
->
io_›s
->
›ti⁄s
, 
l⁄g_›ti⁄s
, 
i
,

4625 
FIO_GETOPT_IOENGINE
);

4626 
	}
}

4628 
	$fio_›ti⁄s_dup_™d_öô
(
›ti⁄
 *
l⁄g_›ti⁄s
)

4630 
i
;

4632 
	`›ti⁄s_öô
(
fio_›ti⁄s
);

4634 
i
 = 0;

4635 
l⁄g_›ti⁄s
[
i
].
«me
)

4636 
i
++;

4638 
	`›ti⁄s_to_l›ts
(
fio_›ti⁄s
, 
l⁄g_›ti⁄s
, 
i
, 
FIO_GETOPT_JOB
);

4639 
	}
}

4641 
	sfio_keyw‹d
 {

4642 c⁄° *
	mw‹d
;

4643 c⁄° *
	mdesc
;

4644 *
	mª∂a˚
;

4647 
fio_keyw‹d
 
	gfio_keyw‹ds
[] = {

4649 .
w‹d
 = "$pagesize",

4650 .
	gdesc
 = "Page size inÅhe system",

4653 .
	gw‹d
 = "$mb_memory",

4654 .
	gdesc
 = "Megabytes of memory online",

4657 .
	gw‹d
 = "$ncpus",

4658 .
	gdesc
 = "Number of CPUs online inÅhe system",

4661 .
	gw‹d
 = 
NULL
,

4665 
	$fio_keyw‹ds_exô
()

4667 
fio_keyw‹d
 *
kw
;

4669 
kw
 = &
fio_keyw‹ds
[0];

4670 
kw
->
w‹d
) {

4671 
	`‰ì
(
kw
->
ª∂a˚
);

4672 
kw
->
ª∂a˚
 = 
NULL
;

4673 
kw
++;

4675 
	}
}

4677 
	$fio_keyw‹ds_öô
()

4679 
mb_mem‹y
;

4680 
buf
[128];

4681 
l
;

4683 
	`•rötf
(
buf
, "%lu", (Ë
∑ge_size
);

4684 
fio_keyw‹ds
[0].
ª∂a˚
 = 
	`°rdup
(
buf
);

4686 
mb_mem‹y
 = 
	`os_phys_mem
() / (1024 * 1024);

4687 
	`•rötf
(
buf
, "%Œu", 
mb_mem‹y
);

4688 
fio_keyw‹ds
[1].
ª∂a˚
 = 
	`°rdup
(
buf
);

4690 
l
 = 
	`˝us_⁄löe
();

4691 
	`•rötf
(
buf
, "%lu", 
l
);

4692 
fio_keyw‹ds
[2].
ª∂a˚
 = 
	`°rdup
(
buf
);

4693 
	}
}

4695 
	#BC_APP
 "bc"

	)

4697 *
	$bc_ˇlc
(*
°r
)

4699 
buf
[128], *
tmp
;

4700 
FILE
 *
f
;

4701 
ªt
;

4706 i‡((!
	`°rchr
(
°r
, '+') && !strchr(str, '-') && !strchr(str, '*') &&

4707 !
	`°rchr
(
°r
, '/')) || strchr(str, '\''))

4708  
°r
;

4713 
tmp
 = 
	`°rchr
(
°r
, '=');

4714 i‡(!
tmp
)

4715  
°r
;

4717 
tmp
++;

4722 i‡(
	`°æí
(
°r
Ë>128 || såÀn(
tmp
) > 100)

4723  
°r
;

4725 
	`•rötf
(
buf
, "which %†> /dev/nuŒ", 
BC_APP
);

4726 i‡(
	`sy°em
(
buf
)) {

4727 
	`log_îr
("fio: bc isÇeeded forÖerforming math\n");

4728  
NULL
;

4731 
	`•rötf
(
buf
, "echÿ'%s' | %s", 
tmp
, 
BC_APP
);

4732 
f
 = 
	`p›í
(
buf
, "r");

4733 i‡(!
f
)

4734  
NULL
;

4736 
ªt
 = 
	`‰ód
(&
buf
[
tmp
 - 
°r
], 1, 128 - (tm∞- så), 
f
);

4737 i‡(
ªt
 <= 0) {

4738 
	`p˛o£
(
f
);

4739  
NULL
;

4742 
	`p˛o£
(
f
);

4743 
buf
[(
tmp
 - 
°r
Ë+ 
ªt
 - 1] = '\0';

4744 
	`mem˝y
(
buf
, 
°r
, 
tmp
 - str);

4745 
	`‰ì
(
°r
);

4746  
	`°rdup
(
buf
);

4747 
	}
}

4755 *
	$›ti⁄_dup_subs
(c⁄° *
›t
)

4757 
out
[
OPT_LEN_MAX
+1];

4758 
ö
[
OPT_LEN_MAX
+1];

4759 *
ouçå
 = 
out
;

4760 *
ö±r
 = 
ö
;

4761 *
ch1
, *
ch2
, *
ív
;

4762 
ssize_t
 
nchr
 = 
OPT_LEN_MAX
;

4763 
size_t
 
ívÀn
;

4765 i‡(
	`°æí
(
›t
Ë+ 1 > 
OPT_LEN_MAX
) {

4766 
	`log_îr
("OPT_LEN_MAX (%dËi†toÿsmÆl\n", 
OPT_LEN_MAX
);

4767  
NULL
;

4770 
ö
[
OPT_LEN_MAX
] = '\0';

4771 
	`°∫˝y
(
ö
, 
›t
, 
OPT_LEN_MAX
);

4773 *
ö±r
 && 
nchr
 > 0) {

4774 i‡(
ö±r
[0] == '$' && inptr[1] == '{') {

4775 
ch2
 = 
	`°rchr
(
ö±r
, '}');

4776 i‡(
ch2
 && 
ö±r
+1 < ch2) {

4777 
ch1
 = 
ö±r
+2;

4778 
ö±r
 = 
ch2
+1;

4779 *
ch2
 = '\0';

4781 
ív
 = 
	`gëív
(
ch1
);

4782 i‡(
ív
) {

4783 
ívÀn
 = 
	`°æí
(
ív
);

4784 i‡(
ívÀn
 <
nchr
) {

4785 
	`mem˝y
(
ouçå
, 
ív
, 
ívÀn
);

4786 
ouçå
 +
ívÀn
;

4787 
nchr
 -
ívÀn
;

4795 *
ouçå
++ = *
ö±r
++;

4796 --
nchr
;

4799 *
ouçå
 = '\0';

4800  
	`°rdup
(
out
);

4801 
	}
}

4806 *
	$fio_keyw‹d_ª∂a˚
(*
›t
)

4808 *
s
;

4809 
i
;

4810 
doˇlc
 = 0;

4812 
i
 = 0; 
fio_keyw‹ds
[i].
w‹d
 !
NULL
; i++) {

4813 
fio_keyw‹d
 *
kw
 = &
fio_keyw‹ds
[
i
];

4815 (
s
 = 
	`°r°r
(
›t
, 
kw
->
w‹d
)Ë!
NULL
) {

4816 *
√w
 = 
	`mÆloc
(
	`°æí
(
›t
) + 1);

4817 *
o_‹g
 = 
›t
;

4818 
ﬁí
 = 
s
 - 
›t
;

4819 
Àn
;

4825 
	`mem˝y
(
√w
, 
›t
, 
ﬁí
);

4826 
Àn
 = 
	`•rötf
(
√w
 + 
ﬁí
, "%s", 
kw
->
ª∂a˚
);

4832 
›t
 +
	`°æí
(
kw
->
w‹d
Ë+ 
ﬁí
;

4833 i‡(
	`°æí
(
›t
))

4834 
	`mem˝y
(
√w
 + 
ﬁí
 + 
Àn
, 
›t
, o± - 
o_‹g
 - 1);

4839 
›t
 = 
√w
;

4840 
	`‰ì
(
o_‹g
);

4842 
doˇlc
 = 1;

4849 i‡(
doˇlc
)

4850 
›t
 = 
	`bc_ˇlc
(opt);

4852  
›t
;

4853 
	}
}

4855 **
	$dup_™d_sub_›ti⁄s
(**
›ts
, 
num_›ts
)

4857 
i
;

4858 **
›ts_c›y
 = 
	`mÆloc
(
num_›ts
 * (*
›ts
));

4859 
i
 = 0; i < 
num_›ts
; i++) {

4860 
›ts_c›y
[
i
] = 
	`›ti⁄_dup_subs
(
›ts
[i]);

4861 i‡(!
›ts_c›y
[
i
])

4863 
›ts_c›y
[
i
] = 
	`fio_keyw‹d_ª∂a˚
(opts_copy[i]);

4865  
›ts_c›y
;

4866 
	}
}

4868 
	$show_˛o£°_›ti⁄
(c⁄° *
›t
)

4870 
be°_›ti⁄
, 
be°_di°™˚
;

4871 
i
, 
di°™˚
;

4872 *
«me
;

4874 i‡(!
	`°æí
(
›t
))

4877 
«me
 = 
	`°rdup
(
›t
);

4878 
i
 = 0;

4879 
«me
[
i
] != '\0' &&Çame[i] != '=')

4880 
i
++;

4881 
«me
[
i
] = '\0';

4883 
be°_›ti⁄
 = -1;

4884 
be°_di°™˚
 = 
INT_MAX
;

4885 
i
 = 0;

4886 
fio_›ti⁄s
[
i
].
«me
) {

4887 
di°™˚
 = 
	`°rög_di°™˚
(
«me
, 
fio_›ti⁄s
[
i
].name);

4888 i‡(
di°™˚
 < 
be°_di°™˚
) {

4889 
be°_di°™˚
 = 
di°™˚
;

4890 
be°_›ti⁄
 = 
i
;

4892 
i
++;

4895 i‡(
be°_›ti⁄
 !-1 && 
	`°rög_di°™˚_ok
(
«me
, 
be°_di°™˚
) &&

4896 
fio_›ti⁄s
[
be°_›ti⁄
].
ty≥
 !
FIO_OPT_UNSUPPORTED
)

4897 
	`log_îr
("Did you mó¿%s?\n", 
fio_›ti⁄s
[
be°_›ti⁄
].
«me
);

4899 
	`‰ì
(
«me
);

4900 
	}
}

4902 
	$fio_›ti⁄s_∑r£
(
thªad_d©a
 *
td
, **
›ts
, 
num_›ts
)

4904 
i
, 
ªt
, 
unknown
;

4905 **
›ts_c›y
;

4907 
	`s‹t_›ti⁄s
(
›ts
, 
fio_›ti⁄s
, 
num_›ts
);

4908 
›ts_c›y
 = 
	`dup_™d_sub_›ti⁄s
(
›ts
, 
num_›ts
);

4910 
ªt
 = 0, 
i
 = 0, 
unknown
 = 0; i < 
num_›ts
; i++) {

4911 
fio_›ti⁄
 *
o
;

4912 
√wªt
 = 
	`∑r£_›ti⁄
(
›ts_c›y
[
i
], 
›ts
[i], 
fio_›ti⁄s
,

4913 &
o
, &
td
->o, &td->
›t_li°
);

4915 i‡(!
√wªt
 && 
o
)

4916 
	`fio_›ti⁄_m¨k_£t
(&
td
->
o
, o);

4918 i‡(
›ts_c›y
[
i
]) {

4919 i‡(
√wªt
 && !
o
) {

4920 
unknown
++;

4923 
	`‰ì
(
›ts_c›y
[
i
]);

4924 
›ts_c›y
[
i
] = 
NULL
;

4927 
ªt
 |
√wªt
;

4930 i‡(
unknown
) {

4931 
ªt
 |
	`i€ngöe_lﬂd
(
td
);

4932 i‡(
td
->
eo
) {

4933 
	`s‹t_›ti⁄s
(
›ts_c›y
, 
td
->
io_›s
->
›ti⁄s
, 
num_›ts
);

4934 
›ts
 = 
›ts_c›y
;

4936 
i
 = 0; i < 
num_›ts
; i++) {

4937 
fio_›ti⁄
 *
o
 = 
NULL
;

4938 
√wªt
 = 1;

4940 i‡(!
›ts_c›y
[
i
])

4943 i‡(
td
->
eo
)

4944 
√wªt
 = 
	`∑r£_›ti⁄
(
›ts_c›y
[
i
], 
›ts
[i],

4945 
td
->
io_›s
->
›ti⁄s
, &
o
,

4946 
td
->
eo
, &td->
›t_li°
);

4948 
ªt
 |
√wªt
;

4949 i‡(!
o
) {

4950 
	`log_îr
("Bad o±i⁄ <%s>\n", 
›ts
[
i
]);

4951 
	`show_˛o£°_›ti⁄
(
›ts
[
i
]);

4953 
	`‰ì
(
›ts_c›y
[
i
]);

4954 
›ts_c›y
[
i
] = 
NULL
;

4958 
	`‰ì
(
›ts_c›y
);

4959  
ªt
;

4960 
	}
}

4962 
	$fio_cmd_›ti⁄_∑r£
(
thªad_d©a
 *
td
, c⁄° *
›t
, *
vÆ
)

4964 
ªt
;

4966 
ªt
 = 
	`∑r£_cmd_›ti⁄
(
›t
, 
vÆ
, 
fio_›ti⁄s
, &
td
->
o
, &td->
›t_li°
);

4967 i‡(!
ªt
) {

4968 
fio_›ti⁄
 *
o
;

4970 
o
 = 
	`föd_›ti⁄
(
fio_›ti⁄s
, 
›t
);

4971 i‡(
o
)

4972 
	`fio_›ti⁄_m¨k_£t
(&
td
->
o
, o);

4975  
ªt
;

4976 
	}
}

4978 
	$fio_cmd_i€ngöe_›ti⁄_∑r£
(
thªad_d©a
 *
td
, c⁄° *
›t
,

4979 *
vÆ
)

4981  
	`∑r£_cmd_›ti⁄
(
›t
, 
vÆ
, 
td
->
io_›s
->
›ti⁄s
,Åd->
eo
,

4982 &
td
->
›t_li°
);

4983 
	}
}

4985 
	$fio_fûl_deÁu…_›ti⁄s
(
thªad_d©a
 *
td
)

4987 
td
->
o
.
magic
 = 
OPT_MAGIC
;

4988 
	`fûl_deÁu…_›ti⁄s
(&
td
->
o
, 
fio_›ti⁄s
);

4989 
	}
}

4991 
	$fio_show_›ti⁄_hñp
(c⁄° *
›t
)

4993  
	`show_cmd_hñp
(
fio_›ti⁄s
, 
›t
);

4994 
	}
}

4999 
	$fio_›ti⁄s_mem_du≥
(
thªad_d©a
 *
td
)

5001 
	`›ti⁄s_mem_du≥
(
fio_›ti⁄s
, &
td
->
o
);

5003 i‡(
td
->
eo
 &&Åd->
io_›s
) {

5004 *
ﬁdeo
 = 
td
->
eo
;

5006 
td
->
eo
 = 
	`mÆloc
—d->
io_›s
->
›ti⁄_°ru˘_size
);

5007 
	`mem˝y
(
td
->
eo
, 
ﬁdeo
,Åd->
io_›s
->
›ti⁄_°ru˘_size
);

5008 
	`›ti⁄s_mem_du≥
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

5010 
	}
}

5012 
	$fio_gë_kb_ba£
(*
d©a
)

5014 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

5015 
thªad_›ti⁄s
 *
o
 = &
td
->o;

5016 
kb_ba£
 = 0;

5027 i‡(
o
 && o->
magic
 =
OPT_MAGIC
)

5028 
kb_ba£
 = 
o
->kb_base;

5029 i‡(!
kb_ba£
)

5030 
kb_ba£
 = 1024;

5032  
kb_ba£
;

5033 
	}
}

5035 
	$add_›ti⁄
(
fio_›ti⁄
 *
o
)

5037 
fio_›ti⁄
 *
__o
;

5038 
›t_ödex
 = 0;

5040 
__o
 = 
fio_›ti⁄s
;

5041 
__o
->
«me
) {

5042 
›t_ödex
++;

5043 
__o
++;

5046 i‡(
›t_ödex
 + 1 =
FIO_MAX_OPTS
) {

5047 
	`log_îr
("fio: FIO_MAX_OPTS isÅoo small\n");

5051 
	`mem˝y
(&
fio_›ti⁄s
[
›t_ödex
], 
o
, (*o));

5052 
fio_›ti⁄s
[
›t_ödex
 + 1].
«me
 = 
NULL
;

5054 
	}
}

5056 
	$övÆid©e_¥ofûe_›ti⁄s
(c⁄° *
¥of_«me
)

5058 
fio_›ti⁄
 *
o
;

5060 
o
 = 
fio_›ti⁄s
;

5061 
o
->
«me
) {

5062 i‡(
o
->
¥of_«me
 && !
	`°rcmp
(o->prof_name,Örof_name)) {

5063 
o
->
ty≥
 = 
FIO_OPT_INVALID
;

5064 
o
->
¥of_«me
 = 
NULL
;

5066 
o
++;

5068 
	}
}

5070 
	$add_›t_posvÆ
(c⁄° *
›äame
, c⁄° *
ivÆ
, c⁄° *
hñp
)

5072 
fio_›ti⁄
 *
o
;

5073 
i
;

5075 
o
 = 
	`föd_›ti⁄
(
fio_›ti⁄s
, 
›äame
);

5076 i‡(!
o
)

5079 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

5080 i‡(
o
->
posvÆ
[
i
].
ivÆ
)

5083 
o
->
posvÆ
[
i
].
ivÆ
 = ival;

5084 
o
->
posvÆ
[
i
].
hñp
 = help;

5087 
	}
}

5089 
	$dñ_›t_posvÆ
(c⁄° *
›äame
, c⁄° *
ivÆ
)

5091 
fio_›ti⁄
 *
o
;

5092 
i
;

5094 
o
 = 
	`föd_›ti⁄
(
fio_›ti⁄s
, 
›äame
);

5095 i‡(!
o
)

5098 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

5099 i‡(!
o
->
posvÆ
[
i
].
ivÆ
)

5101 i‡(
	`°rcmp
(
o
->
posvÆ
[
i
].
ivÆ
, ival))

5104 
o
->
posvÆ
[
i
].
ivÆ
 = 
NULL
;

5105 
o
->
posvÆ
[
i
].
hñp
 = 
NULL
;

5107 
	}
}

5109 
	$fio_›ti⁄s_‰ì
(
thªad_d©a
 *
td
)

5111 
	`›ti⁄s_‰ì
(
fio_›ti⁄s
, &
td
->
o
);

5112 i‡(
td
->
eo
 &&Åd->
io_›s
 &&Åd->io_›s->
›ti⁄s
) {

5113 
	`›ti⁄s_‰ì
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

5114 
	`‰ì
(
td
->
eo
);

5115 
td
->
eo
 = 
NULL
;

5117 
	}
}

5119 
fio_›ti⁄
 *
	$fio_›ti⁄_föd
(c⁄° *
«me
)

5121  
	`föd_›ti⁄
(
fio_›ti⁄s
, 
«me
);

5122 
	}
}

5124 
fio_›ti⁄
 *
	$föd_√xt_›t
(
thªad_›ti⁄s
 *
o
,

5125 
fio_›ti⁄
 *
‰om
,

5126 
off1
)

5128 
fio_›ti⁄
 *
›t
;

5130 i‡(!
‰om
)

5131 
‰om
 = &
fio_›ti⁄s
[0];

5133 
‰om
++;

5135 
›t
 = 
NULL
;

5137 i‡(
off1
 =
‰om
->off1) {

5138 
›t
 = 
‰om
;

5141 
‰om
++;

5142 } 
‰om
->
«me
);

5144  
›t
;

5145 
	}
}

5147 
	$›t_is_£t
(
thªad_›ti⁄s
 *
o
, 
fio_›ti⁄
 *
›t
)

5149 
›t_off
, 
ödex
, 
off£t
;

5151 
›t_off
 = 
›t
 - &
fio_›ti⁄s
[0];

5152 
ödex
 = 
›t_off
 / (8 * (
uöt64_t
));

5153 
off£t
 = 
›t_off
 & ((8 * (
uöt64_t
)) - 1);

5154  (
o
->
£t_›ti⁄s
[
ödex
] & ((
uöt64_t
)1 << 
off£t
)) != 0;

5155 
	}
}

5157 
boﬁ
 
	$__fio_›ti⁄_is_£t
(
thªad_›ti⁄s
 *
o
, 
off1
)

5159 
fio_›ti⁄
 *
›t
, *
√xt
;

5161 
√xt
 = 
NULL
;

5162 (
›t
 = 
	`föd_√xt_›t
(
o
, 
√xt
, 
off1
)Ë!
NULL
) {

5163 i‡(
	`›t_is_£t
(
o
, 
›t
))

5164  
åue
;

5166 
√xt
 = 
›t
;

5169  
Ál£
;

5170 
	}
}

5172 
	$fio_›ti⁄_m¨k_£t
(
thªad_›ti⁄s
 *
o
, 
fio_›ti⁄
 *
›t
)

5174 
›t_off
, 
ödex
, 
off£t
;

5176 
›t_off
 = 
›t
 - &
fio_›ti⁄s
[0];

5177 
ödex
 = 
›t_off
 / (8 * (
uöt64_t
));

5178 
off£t
 = 
›t_off
 & ((8 * (
uöt64_t
)) - 1);

5179 
o
->
£t_›ti⁄s
[
ödex
] |(
uöt64_t
)1 << 
off£t
;

5180 
	}
}

	@/home/ysjin/Desktop/fio/fio/options.h

1 #i‚de‡
FIO_OPTION_H


2 
	#FIO_OPTION_H


	)

4 
	#FIO_MAX_OPTS
 512

	)

6 
	~<°rög.h
>

7 
	~<öây≥s.h
>

8 
	~"∑r£.h
"

9 
	~"Êi°.h
"

10 
	~"lib/ty≥s.h
"

12 
add_›ti⁄
(
fio_›ti⁄
 *);

13 
övÆid©e_¥ofûe_›ti⁄s
(const *);

14 *
exec_¥ofûe
;

16 
add_›t_posvÆ
(const *, const *, const *);

17 
dñ_›t_posvÆ
(const *, const *);

18 
	gthªad_d©a
;

19 
fio_›ti⁄s_‰ì
(
thªad_d©a
 *);

20 
£t_«me_idx
(*, 
size_t
, *, , 
boﬁ
);

22 
˛õ¡_sockaddr_°r
[];

24 
fio_›ti⁄
 
fio_›ti⁄s
[
FIO_MAX_OPTS
];

26 
boﬁ
 
__fio_›ti⁄_is_£t
(
thªad_›ti⁄s
 *, 
off
);

28 
	#fio_›ti⁄_is_£t
(
__td
, 
«me
) \

30 c⁄° 
off
 = 
	`off£tof
(
thªad_›ti⁄s
, 
«me
); \

31 
boﬁ
 
__r
 = 
	`__fio_›ti⁄_is_£t
((
__td
), 
off
); \

32 
__r
; \

33 })

	)

35 
fio_›ti⁄_m¨k_£t
(
thªad_›ti⁄s
 *, 
fio_›ti⁄
 *);

37 
ölöe
 
boﬁ
 
	$o_m©ch
(
fio_›ti⁄
 *
o
, c⁄° *
›t
)

39 i‡(!
	`°rcmp
(
o
->
«me
, 
›t
))

40  
åue
;

41 i‡(
o
->
Æüs
 && !
	`°rcmp
(o->Æüs, 
›t
))

42  
åue
;

44  
Ál£
;

45 
	}
}

47 
fio_›ti⁄
 *
föd_›ti⁄
(fio_option *, const *);

48 
fio_›ti⁄
 *
fio_›ti⁄_föd
(const *);

49 
fio_gë_kb_ba£
(*);

	@/home/ysjin/Desktop/fio/fio/os/binject.h

1 #i‚de‡
BINJECT_H


2 
	#BINJECT_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#BINJECT_MAGIC
 0x89

	)

7 
	#BINJECT_VER
 0x01

	)

8 
	#BINJECT_MAGIC_SHIFT
 8

	)

9 
	#BINJECT_VER_MASK
 ((1 << 
BINJECT_MAGIC_SHIFT
Ë- 1)

	)

11 
	sb_u£r_cmd
 {

12 
__u16
 
	mmagic
;

13 
__u16
 
	mty≥
;

14 
__u32
 
	mîr‹
;

15 
__u32
 
	mÊags
;

16 
__u32
 
	mÀn
;

17 
__u64
 
	moff£t
;

18 
__u64
 
	mbuf
;

19 
__u64
 
	mu§_±r
;

20 
__u64
 
	mn£c
;

23 
	sb_io˘l_cmd
 {

24 
	mfd
;

25 
	mmö‹
;

28 
	#BINJECT_IOCTL_CHR
 'J'

	)

29 
	#B_IOCTL_ADD
 
	`_IOWR
(
BINJECT_IOCTL_CHR
, 1, 
b_io˘l_cmd
)

	)

30 
	#B_IOCTL_DEL
 
	`_IOWR
(
BINJECT_IOCTL_CHR
, 2, 
b_io˘l_cmd
)

	)

33 
	mB_TYPE_READ
 = 0,

34 
	mB_TYPE_WRITE
,

35 
	mB_TYPE_DISCARD
,

36 
	mB_TYPE_READVOID
,

37 
	mB_TYPE_WRITEZERO
,

38 
	mB_TYPE_READBARRIER
,

39 
	mB_TYPE_WRITEBARRIER
,

40 
	mB_TYPE_NR


44 
	m__B_FLAG_SYNC
 = 0,

45 
	m__B_FLAG_UNPLUG
,

46 
	m__B_FLAG_NOIDLE
,

47 
	m__B_FLAG_BARRIER
,

48 
	m__B_FLAG_META
,

49 
	m__B_FLAG_RAHEAD
,

50 
	m__B_FLAG_FAILFAST_DEV
,

51 
	m__B_FLAG_FAILFAST_TRANSPORT
,

52 
	m__B_FLAG_FAILFAST_DRIVER
,

53 
	m__B_FLAG_NR
,

55 
	mB_FLAG_SYNC
 = 1 << 
__B_FLAG_SYNC
,

56 
	mB_FLAG_UNPLUG
 = 1 << 
__B_FLAG_UNPLUG
,

57 
	mB_FLAG_NOIDLE
 = 1 << 
__B_FLAG_NOIDLE
,

58 
	mB_FLAG_BARRIER
 = 1 << 
__B_FLAG_BARRIER
,

59 
	mB_FLAG_META
 = 1 << 
__B_FLAG_META
,

60 
	mB_FLAG_RAHEAD
 = 1 << 
__B_FLAG_RAHEAD
,

61 
	mB_FLAG_FAILFAST_DEV
 = 1 << 
__B_FLAG_FAILFAST_DEV
,

62 
	mB_FLAG_FAILFAST_TRANSPORT
 = 1 << 
__B_FLAG_FAILFAST_TRANSPORT
,

63 
	mB_FLAG_FAILFAST_DRIVER
 = 1 << 
__B_FLAG_FAILFAST_DRIVER
,

66 
ölöe
 
	$böje˘_buc_£t_magic
(
b_u£r_cmd
 *
buc
)

68 
buc
->
magic
 = (
BINJECT_MAGIC
 << 
BINJECT_MAGIC_SHIFT
Ë| 
BINJECT_VER
;

69 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/kcompat.h

1 #i‚de‡
_KCOMPAT_H_


2 
	#_KCOMPAT_H_


	)

4 
	~<°döt.h
>

6 
	#u64
 
uöt64_t


	)

7 
	#u32
 
uöt32_t


	)

	@/home/ysjin/Desktop/fio/fio/os/os-aix.h

1 #i‚de‡
FIO_OS_AIX_H


2 
	#FIO_OS_AIX_H


	)

4 
	#FIO_OS
 
os_aix


	)

6 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<sys/devöfo.h
>

9 
	~<sys/io˘l.h
>

11 
	~"../fûe.h
"

13 
	#FIO_HAVE_ODIRECT


	)

14 
	#FIO_USE_GENERIC_RAND


	)

15 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

17 
	#OS_MAP_ANON
 
MAP_ANON


	)

18 
	#OS_MSG_DONTWAIT
 0

	)

20 
	#FIO_USE_GENERIC_SWAP


	)

22 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

24  
ENOTSUP
;

25 
	}
}

27 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

29 
devöfo
 
öfo
;

31 i‡(!
	`io˘l
(
f
->
fd
, 
IOCINFO
, &
öfo
)) {

32 *
byãs
 = ()
öfo
.
un
.
scdk
.
numblks
 *

33 
öfo
.
un
.
scdk
.
blksize
;

37  
î∫o
;

38 
	}
}

40 
ölöe
 
	$os_phys_mem
()

42 
mem
 = 
	`sysc⁄f
(
_SC_AIX_REALMEM
);

44 i‡(
mem
 == -1)

47  (Ë
mem
 * 1024;

48 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/os-android.h

1 #i‚de‡
FIO_OS_ANDROID_H


2 
	#FIO_OS_ANDROID_H


	)

4 
	#FIO_OS
 
os_™droid


	)

6 
	~<sys/io˘l.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/uio.h
>

9 
	~<sys/sysˇŒ.h
>

10 
	~<sys/sysma¸os.h
>

11 
	~<sys/vfs.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<î∫o.h
>

15 
	~<sched.h
>

16 
	~<löux/uni°d.h
>

17 
	~<löux/maj‹.h
>

18 
	~<asm/byã‹dî.h
>

20 
	~"os-löux-sysˇŒ.h
"

21 
	~"böje˘.h
"

22 
	~"../fûe.h
"

24 #i‚de‡
__has_buûtö


25 
	#__has_buûtö
(
x
) 0

27 

	)

28 
	#FIO_HAVE_DISK_UTIL


	)

29 
	#FIO_HAVE_IOSCHED_SWITCH


	)

30 
	#FIO_HAVE_IOPRIO


	)

31 
	#FIO_HAVE_IOPRIO_CLASS


	)

32 
	#FIO_HAVE_ODIRECT


	)

33 
	#FIO_HAVE_HUGETLB


	)

34 
	#FIO_HAVE_BLKTRACE


	)

35 
	#FIO_HAVE_CL_SIZE


	)

36 
	#FIO_HAVE_CGROUPS


	)

37 
	#FIO_HAVE_FS_STAT


	)

38 
	#FIO_HAVE_TRIM


	)

39 
	#FIO_HAVE_GETTID


	)

40 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

41 
	#FIO_HAVE_E4_ENG


	)

42 
	#FIO_HAVE_BYTEORDER_FUNCS


	)

43 
	#FIO_HAVE_MMAP_HUGE


	)

44 
	#FIO_NO_HAVE_SHM_H


	)

46 
	#OS_MAP_ANON
 
MAP_ANONYMOUS


	)

48 #i‚de‡
POSIX_MADV_DONTNEED


49 
	#posix_madvi£
 
madvi£


	)

50 
	#POSIX_MADV_DONTNEED
 
MADV_DONTNEED


	)

51 
	#POSIX_MADV_SEQUENTIAL
 
MADV_SEQUENTIAL


	)

52 
	#POSIX_MADV_RANDOM
 
MADV_RANDOM


	)

55 #ifde‡
MADV_REMOVE


56 
	#FIO_MADV_FREE
 
MADV_REMOVE


	)

58 #i‚de‡
MAP_HUGETLB


59 
	#MAP_HUGETLB
 0x40000

	)

62 #i‚de‡
CONFIG_NO_SHM


66 
	~<°dio.h
>

67 
	~<löux/ashmem.h
>

68 
	~<löux/shm.h
>

69 
	#shmid_ds
 
shmid64_ds


	)

70 
	#SHM_HUGETLB
 04000

	)

72 
	#ASHMEM_DEVICE
 "/dev/ashmem"

	)

74 
ölöe
 
	$shm˘l
(
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
)

76 
ªt
=0;

77 i‡(
__cmd
 =
IPC_RMID
)

79 
Àngth
 = 
	`io˘l
(
__shmid
, 
ASHMEM_GET_SIZE
, 
NULL
);

80 
ashmem_pö
 
pö
 = {0 , 
Àngth
};

81 
ªt
 = 
	`io˘l
(
__shmid
, 
ASHMEM_UNPIN
, &
pö
);

82 
	`˛o£
(
__shmid
);

84  
ªt
;

85 
	}
}

87 
ölöe
 
	$shmgë
(
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
)

89 
fd
,
ªt
;

90 
keybuf
[11];

92 
fd
 = 
	`›í
(
ASHMEM_DEVICE
, 
O_RDWR
);

93 i‡(
fd
 < 0)

94  
fd
;

96 
	`•rötf
(
keybuf
,"%d",
__key
);

97 
ªt
 = 
	`io˘l
(
fd
, 
ASHMEM_SET_NAME
, 
keybuf
);

98 i‡(
ªt
 < 0)

99 
îr‹
;

102 
ªt
 = 
	`io˘l
(
fd
, 
ASHMEM_SET_SIZE
, 
__size
 + (
uöt64_t
));

103 i‡(
ªt
 < 0)

104 
îr‹
;

106  
fd
;

108 
îr‹
:

109 
	`˛o£
(
fd
);

110  
ªt
;

111 
	}
}

113 
ölöe
 *
	$shm©
(
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

115 
size_t
 
size
 = 
	`io˘l
(
__shmid
, 
ASHMEM_GET_SIZE
, 
NULL
);

117 
uöt64_t
 *
±r
 = 
	`mm≠
(
NULL
, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
__shmid
, 0);

119 *
±r
 = 
size
;

120  
±r
 + 1;

121 
	}
}

123 
ölöe
 
	$shmdt
 (c⁄° *
__shmaddr
)

126 
uöt64_t
 *
±r
 = (uöt64_à*)
__shmaddr
 - 1;

127 
size_t
 
size
 = *
±r
;

128  
	`munm≠
(
±r
, 
size
);

129 
	}
}

132 
	#SPLICE_DEF_SIZE
 (64*1024)

	)

135 
	mIOPRIO_CLASS_NONE
,

136 
	mIOPRIO_CLASS_RT
,

137 
	mIOPRIO_CLASS_BE
,

138 
	mIOPRIO_CLASS_IDLE
,

142 
	mIOPRIO_WHO_PROCESS
 = 1,

143 
	mIOPRIO_WHO_PGRP
,

144 
	mIOPRIO_WHO_USER
,

147 
	#IOPRIO_BITS
 16

	)

148 
	#IOPRIO_CLASS_SHIFT
 13

	)

150 
	#IOPRIO_MIN_PRIO
 0

	)

151 
	#IOPRIO_MAX_PRIO
 7

	)

153 
	#IOPRIO_MIN_PRIO_CLASS
 0

	)

154 
	#IOPRIO_MAX_PRIO_CLASS
 3

	)

156 
ölöe
 
	$i›rio_£t
(
which
, 
who
, 
i›rio_˛ass
, 
i›rio
)

161 i‡(!
i›rio_˛ass
)

162 
i›rio_˛ass
 = 
IOPRIO_CLASS_BE
;

164 
i›rio
 |
i›rio_˛ass
 << 
IOPRIO_CLASS_SHIFT
;

165  
	`sysˇŒ
(
__NR_i›rio_£t
, 
which
, 
who
, 
i›rio
);

166 
	}
}

168 #i‚de‡
BLKGETSIZE64


169 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
)

	)

172 #i‚de‡
BLKFLSBUF


173 
	#BLKFLSBUF
 
	`_IO
(0x12,97)

	)

176 #i‚de‡
BLKDISCARD


177 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

180 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

182  
	`io˘l
(
f
->
fd
, 
BLKFLSBUF
);

183 
	}
}

185 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

187 i‡(!
	`io˘l
(
f
->
fd
, 
BLKGETSIZE64
, 
byãs
))

190  
î∫o
;

191 
	}
}

193 
ölöe
 
	$os_phys_mem
()

195 
∑gesize
, 
∑ges
;

197 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

198 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

199 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

202  (Ë
∑ges
 * (Ë
∑gesize
;

203 
	}
}

205 °ru˘ { 
	mr
[3]; } 
	tos_øndom_°©e_t
;

207 
ölöe
 
	$os_øndom_£ed
(
£ed
, 
os_øndom_°©e_t
 *
rs
)

209 
rs
->
r
[0] = 
£ed
 & 0xffff;

210 
£ed
 >>= 16;

211 
rs
->
r
[1] = 
£ed
 & 0xffff;

212 
£ed
 >>= 16;

213 
rs
->
r
[2] = 
£ed
 & 0xffff;

214 
	`£ed48
(
rs
->
r
);

215 
	}
}

217 
ölöe
 
	$os_øndom_l⁄g
(
os_øndom_°©e_t
 *
rs
)

219  
	`ƒ™d48
(
rs
->
r
);

220 
	}
}

222 #ifde‡
O_NOATIME


223 
	#FIO_O_NOATIME
 
O_NOATIME


	)

225 
	#FIO_O_NOATIME
 0

	)

229 #i‡(
__has_buûtö
(
__buûtö_bsw≠16
Ë&& __has_buûtö(
__buûtö_bsw≠32
) \

230 && 
__has_buûtö
(
__buûtö_bsw≠64
)Ë|| (
	g__GNUC__
 > 4 \

231 || (
	g__GNUC__
 =4 && 
__GNUC_MINOR__
 >= 8))

232 
	#fio_sw≠16
(
x
Ë
	`__buûtö_bsw≠16
(x)

	)

233 
	#fio_sw≠32
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

234 
	#fio_sw≠64
(
x
Ë
	`__buûtö_bsw≠64
(x)

	)

236 
	~<byãsw≠.h
>

237 
	#fio_sw≠16
(
x
Ë
	`bsw≠_16
(x)

	)

238 
	#fio_sw≠32
(
x
Ë
	`bsw≠_32
(x)

	)

239 
	#fio_sw≠64
(
x
Ë
	`bsw≠_64
(x)

	)

242 
	#CACHE_LINE_FILE
 \

243 "/sys/devi˚s/sy°em/˝u/˝u0/ˇche/ödex0/cohîícy_löe_size"

	)

245 
ölöe
 
	$¨ch_ˇche_löe_size
()

247 
size
[32];

248 
fd
, 
ªt
;

250 
fd
 = 
	`›í
(
CACHE_LINE_FILE
, 
O_RDONLY
);

251 i‡(
fd
 < 0)

254 
ªt
 = 
	`ªad
(
fd
, 
size
, (size));

256 
	`˛o£
(
fd
);

258 i‡(
ªt
 <= 0)

261  
	`©oi
(
size
);

262 
	}
}

264 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

266 
ªt
;

267 
°©fs
 
s
;

269 i‡(
	`°©fs
(
∑th
, &
s
) < 0)

272 
ªt
 = 
s
.
f_bsize
;

273 
ªt
 *(Ë
s
.
f_b‰ì
;

274  
ªt
;

275 
	}
}

277 
ölöe
 
	$os_åim
(
fio_fûe
 *
f
, 
°¨t
,

278 
Àn
)

280 
uöt64_t
 
ønge
[2];

282 
ønge
[0] = 
°¨t
;

283 
ønge
[1] = 
Àn
;

285 i‡(!
	`io˘l
(
f
->
fd
, 
BLKDISCARD
, 
ønge
))

288  
î∫o
;

289 
	}
}

291 #ifde‡
CONFIG_SCHED_IDLE


292 
ölöe
 
	$fio_£t_sched_idÀ
()

294 
sched_∑øm
 
p
 = { .
sched_¥i‹ôy
 = 0, };

295  
	`sched_£tscheduÀr
(
	`gëtid
(), 
SCHED_IDLE
, &
p
);

296 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/os-dragonfly.h

1 #i‚de‡
FIO_OS_DRAGONFLY_H


2 
	#FIO_OS_DRAGONFLY_H


	)

4 
	#FIO_OS
 
os_døg⁄Êy


	)

6 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ídün.h
>

9 
	~<sys/∑øm.h
>

10 
	~<sys/sys˘l.h
>

11 
	~<sys/°©vfs.h
>

12 
	~<sys/disk¶i˚.h
>

13 
	~<sys/io˘l_com∑t.h
>

14 
	~<sys/usched.h
>

15 
	~<sys/ªsour˚.h
>

17 
	~"../fûe.h
"

18 
	~"../lib/ty≥s.h
"

20 
	#FIO_HAVE_ODIRECT


	)

21 
	#FIO_USE_GENERIC_RAND


	)

22 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

23 
	#FIO_HAVE_FS_STAT


	)

24 
	#FIO_HAVE_TRIM


	)

25 
	#FIO_HAVE_CHARDEV_SIZE


	)

26 
	#FIO_HAVE_GETTID


	)

27 
	#FIO_HAVE_CPU_AFFINITY


	)

28 
	#FIO_HAVE_IOPRIO


	)

29 
	#FIO_HAVE_SHM_ATTACH_REMOVED


	)

31 
	#OS_MAP_ANON
 
MAP_ANON


	)

33 #i‚de‡
PTHREAD_STACK_MIN


34 
	#PTHREAD_STACK_MIN
 4096

	)

37 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

38 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

39 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

42 
	#FIO_MAX_CPUS
 
SMP_MAXCPU


	)

44 
off_t
 
	toff64_t
;

45 
˝umask_t
 
	tos_˝u_mask_t
;

58 #i‚de‡
CPUMASK_SIMPLE


59 
	#CPUMASK_SIMPLE
(
˝u
Ë((
uöt64_t
)1 << (˝u))

	)

60 
	#CPUMASK_TESTBIT
(
vÆ
, 
i
Ë((vÆ).
¨y
[((i) >> 6) & 3] & \

61 
	`CPUMASK_SIMPLE
((
i
Ë& 63))

	)

62 
	#CPUMASK_ORBIT
(
mask
, 
i
Ë((mask).
¨y
[((i) >> 6) & 3] |= \

63 
	`CPUMASK_SIMPLE
((
i
Ë& 63))

	)

64 
	#CPUMASK_NANDBIT
(
mask
, 
i
Ë((mask).
¨y
[((i) >> 6) & 3] &= \

65 ~
	`CPUMASK_SIMPLE
((
i
Ë& 63))

	)

66 
	#CPUMASK_ASSZERO
(
mask
) do { \

67 (
mask
).
¨y
[0] = 0; \

68 (
mask
).
¨y
[1] = 0; \

69 (
mask
).
¨y
[2] = 0; \

70 (
mask
).
¨y
[3] = 0; \

71 } 0)

	)

83 #i‚de‡
USCHED_GET_CPUMASK


84 
	#USCHED_GET_CPUMASK
 5

	)

88 
	#fio_˝u_cou¡
(
mask
Ë
	`CPU_COUNT
((mask))

	)

90 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

92 
	`CPUMASK_ASSZERO
(*
mask
);

94 
	}
}

96 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

99 
	}
}

101 
ölöe
 
	$fio_˝u_˛ór
(
os_˝u_mask_t
 *
mask
, 
˝u
)

103 
	`CPUMASK_NANDBIT
(*
mask
, 
˝u
);

104 
	}
}

106 
ölöe
 
	$fio_˝u_£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

108 
	`CPUMASK_ORBIT
(*
mask
, 
˝u
);

109 
	}
}

111 
ölöe
 
boﬁ
 
	$fio_˝u_is£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

113  
	`CPUMASK_TESTBIT
(*
mask
, 
˝u
) != 0;

114 
	}
}

116 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
mask
)

118 
i
, 
fú°ˇŒ
 = 1;

121 
pid
 = 0;

123 
i
 = 0; i < 
FIO_MAX_CPUS
; i++) {

124 i‡(!
	`CPUMASK_TESTBIT
(
mask
, 
i
))

126 i‡(
fú°ˇŒ
) {

127 i‡(
	`usched_£t
(
pid
, 
USCHED_SET_CPU
, &
i
, ()))

129 
fú°ˇŒ
 = 0;

131 i‡(
	`usched_£t
(
pid
, 
USCHED_ADD_CPU
, &
i
, ()))

137 
	}
}

139 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
mask
)

142 
pid
 = 0;

144 i‡(
	`usched_£t
(
pid
, 
USCHED_GET_CPUMASK
, 
mask
, (*mask)))

148 
	}
}

151 
	#IOPRIO_WHO_PROCESS
 
PRIO_PROCESS


	)

152 
	#IOPRIO_WHO_PGRP
 
PRIO_PGRP


	)

153 
	#IOPRIO_WHO_USER
 
PRIO_USER


	)

155 
	#IOPRIO_MIN_PRIO
 1

	)

156 
	#IOPRIO_MAX_PRIO
 10

	)

163 
	#i›rio_£t
(
which
, 
who
, 
i›rio_˛ass
, 
i›rio
) \

164 
	`i›rio_£t
(
which
, 
who
, 
i›rio
)

	)

166 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

168 
∑πöfo
 
pi
;

170 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGPART
, &
pi
)) {

171 *
byãs
 = (Ë
pi
.
medü_size
;

175 *
byãs
 = 0;

176  
î∫o
;

177 
	}
}

179 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

181  
	`blockdev_size
(
f
, 
byãs
);

182 
	}
}

184 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

186  
ENOTSUP
;

187 
	}
}

189 
ölöe
 
	$os_phys_mem
()

191 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM
 };

192 
uöt64_t
 
mem
;

193 
size_t
 
Àn
 = (
mem
);

195 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

196  
mem
;

197 
	}
}

199 
ölöe
 
	$gëtid
()

201  (Ë
	`lwp_gëtid
();

202 
	}
}

204 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

206 
ªt
;

207 
°©vfs
 
s
;

209 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

212 
ªt
 = 
s
.
f_‰size
;

213 
ªt
 *(Ë
s
.
f_b‰ì
;

214  
ªt
;

215 
	}
}

217 
ölöe
 
	$os_åim
(
fio_fûe
 *
f
, 
°¨t
,

218 
Àn
)

220 
off_t
 
ønge
[2];

222 
ønge
[0] = 
°¨t
;

223 
ønge
[1] = 
Àn
;

225 i‡(!
	`io˘l
(
f
->
fd
, 
IOCTLTRIM
, 
ønge
))

228  
î∫o
;

229 
	}
}

231 #ifde‡
MADV_FREE


232 
	#FIO_MADV_FREE
 
MADV_FREE


	)

235 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

237 
x
;

238 
size_t
 
Àn
 = (
x
);

240 i‡(
	`sys˘lby«me
("kîn.ùc.shm_Ælow_ªmoved", &
x
, &
Àn
, 
NULL
, 0) < 0)

243  
x
 > 0 ? 1 : 0;

244 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/os-freebsd.h

1 #i‚de‡
FIO_OS_FREEBSD_H


2 
	#FIO_OS_FREEBSD_H


	)

4 
	#FIO_OS
 
os_‰ìbsd


	)

6 
	~<î∫o.h
>

7 
	~<sys/sys˘l.h
>

8 
	~<sys/disk.h
>

9 
	~<sys/ídün.h
>

10 
	~<sys/thr.h
>

11 
	~<sys/sockë.h
>

12 
	~<sys/∑øm.h
>

13 
	~<sys/˝u£t.h
>

14 
	~<sys/°©vfs.h
>

16 
	~"../fûe.h
"

18 
	#FIO_HAVE_ODIRECT


	)

19 
	#FIO_USE_GENERIC_RAND


	)

20 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

21 
	#FIO_HAVE_CHARDEV_SIZE


	)

22 
	#FIO_HAVE_FS_STAT


	)

23 
	#FIO_HAVE_TRIM


	)

24 
	#FIO_HAVE_GETTID


	)

25 
	#FIO_HAVE_CPU_AFFINITY


	)

26 
	#FIO_HAVE_SHM_ATTACH_REMOVED


	)

28 
	#OS_MAP_ANON
 
MAP_ANON


	)

30 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

31 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

32 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

34 
off_t
 
	toff64_t
;

36 
˝u£t_t
 
	tos_˝u_mask_t
;

38 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ë(Ë
	`CPU_CLR
((˝u), (mask))

	)

39 
	#fio_˝u_£t
(
mask
, 
˝u
Ë(Ë
	`CPU_SET
((˝u), (mask))

	)

40 
	#fio_˝u_is£t
(
mask
, 
˝u
Ë(
	`CPU_ISSET
((˝u), (mask)Ë!0)

	)

41 
	#fio_˝u_cou¡
(
mask
Ë
	`CPU_COUNT
((mask))

	)

43 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

45 
	`CPU_ZERO
(
mask
);

47 
	}
}

49 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

52 
	}
}

54 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
)

56  
	`˝u£t_£èfföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_TID
, 
pid
, (
˝umask
), &cpumask);

57 
	}
}

59 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
˝umask
)

61  
	`˝u£t_gëafföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_PID
, 
pid
, (
˝umask
), cpumask);

62 
	}
}

64 
	#FIO_MAX_CPUS
 
CPU_SETSIZE


	)

66 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

68 
off_t
 
size
;

70 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGMEDIASIZE
, &
size
)) {

71 *
byãs
 = 
size
;

75 *
byãs
 = 0;

76  
î∫o
;

77 
	}
}

79 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

81  
	`blockdev_size
(
f
, 
byãs
);

82 
	}
}

84 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

86  
ENOTSUP
;

87 
	}
}

89 
ölöe
 
	$os_phys_mem
()

91 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM
 };

92 
mem
;

93 
size_t
 
Àn
 = (
mem
);

95 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

96  
mem
;

97 
	}
}

99 
ölöe
 
	$gëtid
()

101 
lwpid
;

103 
	`thr_£lf
(&
lwpid
);

104  (Ë
lwpid
;

105 
	}
}

107 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

109 
ªt
;

110 
°©vfs
 
s
;

112 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

115 
ªt
 = 
s
.
f_‰size
;

116 
ªt
 *(Ë
s
.
f_b‰ì
;

117  
ªt
;

118 
	}
}

120 
ölöe
 
	$os_åim
(
fio_fûe
 *
f
, 
°¨t
,

121 
Àn
)

123 
off_t
 
ønge
[2];

125 
ønge
[0] = 
°¨t
;

126 
ønge
[1] = 
Àn
;

128 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGDELETE
, 
ønge
))

131  
î∫o
;

132 
	}
}

134 #ifde‡
MADV_FREE


135 
	#FIO_MADV_FREE
 
MADV_FREE


	)

138 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

140 
x
;

141 
size_t
 
Àn
 = (
x
);

143 i‡(
	`sys˘lby«me
("kîn.ùc.shm_Ælow_ªmoved", &
x
, &
Àn
, 
NULL
, 0) < 0)

146  
x
 > 0 ? 1 : 0;

147 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/os-hpux.h

1 #i‚de‡
FIO_OS_HPUX_H


2 
	#FIO_OS_HPUX_H


	)

4 
	#FIO_OS
 
os_hpux


	)

6 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<sys/io˘l.h
>

9 
	~<sys/f˙é.h
>

10 
	~<sys/Ádvi£.h
>

11 
	~<sys/mm™.h
>

12 
	~<sys/mp˘l.h
>

13 
	~<sys/diskio.h
>

14 
	~<sys/∑øm.h
>

15 
	~<sys/p°©.h
>

16 
	~<time.h
>

17 
	~<aio.h
>

18 
	~<¨m.h
>

20 
	~"../fûe.h
"

22 
	#FIO_HAVE_ODIRECT


	)

23 
	#FIO_USE_GENERIC_RAND


	)

24 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

25 
	#FIO_HAVE_CHARDEV_SIZE


	)

27 
	#OS_MAP_ANON
 
MAP_ANONYMOUS


	)

28 
	#OS_MSG_DONTWAIT
 0

	)

30 
	#POSIX_MADV_DONTNEED
 
MADV_DONTNEED


	)

31 
	#POSIX_MADV_SEQUENTIAL
 
MADV_SEQUENTIAL


	)

32 
	#POSIX_MADV_RANDOM
 
MADV_RANDOM


	)

33 
	#posix_madvi£
(
±r
, 
sz
, 
höt
Ë
	`madvi£
(’å), (sz), (höt))

	)

35 #i‚de‡
MSG_WAITALL


36 
	#MSG_WAITALL
 0x40

	)

39 
	#FIO_USE_GENERIC_SWAP


	)

41 
	#FIO_OS_HAVE_AIOCB_TYPEDEF


	)

42 
aiocb64
 
	tos_aiocb_t
;

44 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

46  
ENOTSUP
;

47 
	}
}

49 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

51 
disk_des¸ibe_ty≥_ext_t
 
dext
;

53 i‡(!
	`io˘l
(
f
->
fd
, 
DIOC_DESCRIBE_EXT
, &
dext
)) {

54 
lba
;

56 
lba
 = ((
uöt64_t
Ë
dext
.
maxsva_high
 << 32Ë| dext.
maxsva_low
;

57 *
byãs
 = 
lba
 * 
dext
.
lgblksz
;

61 *
byãs
 = 0;

62  
î∫o
;

63 
	}
}

65 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

67  
	`blockdev_size
(
f
, 
byãs
);

68 
	}
}

70 
ölöe
 
	$os_phys_mem
()

72 
ªt
;

73 
p°_°©ic
 
p°
;

74 
p°un
 
pu
;

76 
pu
.
p°_°©ic
 = &
p°
;

77 i‡(
	`p°©
(
PSTAT_STATIC
, 
pu
, (
p°
), 0, 0) == -1)

80 
ªt
 = 
p°
.
physiˇl_mem‹y
;

81 
ªt
 *
p°
.
∑ge_size
;

82  
ªt
;

83 
	}
}

85 
	#FIO_HAVE_CPU_ONLINE_SYSCONF


	)

87 
ölöe
 
	$˝us_⁄löe
()

89  
	`mp˘l
(
MPC_GETNUMSPUS
, 0, 
NULL
);

90 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/os-linux-syscall.h

1 #i‚de‡
FIO_OS_LINUX_SYSCALL_H


2 
	#FIO_OS_LINUX_SYSCALL_H


	)

4 
	~"../¨ch/¨ch.h
"

7 #i‡
deföed
(
ARCH_X86_H
)

8 #i‚de‡
__NR_i›rio_£t


9 
	#__NR_i›rio_£t
 289

	)

10 
	#__NR_i›rio_gë
 290

	)

13 #i‚de‡
__NR_Ádvi£64


14 
	#__NR_Ádvi£64
 250

	)

17 #i‚de‡
__NR_sys_•li˚


18 
	#__NR_sys_•li˚
 313

	)

19 
	#__NR_sys_ãe
 315

	)

20 
	#__NR_sys_vm•li˚
 316

	)

23 #i‚de‡
__NR_¥ódv2


24 
	#__NR_¥ódv2
 378

	)

26 #i‚de‡
__NR_pwrôev2


27 
	#__NR_pwrôev2
 379

	)

31 #ñi‡
deföed
(
ARCH_X86_64_H
)

32 #i‚de‡
__NR_i›rio_£t


33 
	#__NR_i›rio_£t
 251

	)

34 
	#__NR_i›rio_gë
 252

	)

37 #i‚de‡
__NR_Ádvi£64


38 
	#__NR_Ádvi£64
 221

	)

41 #i‚de‡
__NR_sys_•li˚


42 
	#__NR_sys_•li˚
 275

	)

43 
	#__NR_sys_ãe
 276

	)

44 
	#__NR_sys_vm•li˚
 278

	)

47 #i‚de‡
__NR_shmgë


48 
	#__NR_shmgë
 29

	)

49 
	#__NR_shm©
 30

	)

50 
	#__NR_shm˘l
 31

	)

51 
	#__NR_shmdt
 67

	)

54 #i‚de‡
__NR_¥ódv2


55 
	#__NR_¥ódv2
 327

	)

57 #i‚de‡
__NR_pwrôev2


58 
	#__NR_pwrôev2
 328

	)

62 #ñi‡
deföed
(
ARCH_PPC_H
)

63 #i‚de‡
__NR_i›rio_£t


64 
	#__NR_i›rio_£t
 273

	)

65 
	#__NR_i›rio_gë
 274

	)

68 #i‚de‡
__NR_Ádvi£64


69 
	#__NR_Ádvi£64
 233

	)

72 #i‚de‡
__NR_sys_•li˚


73 
	#__NR_sys_•li˚
 283

	)

74 
	#__NR_sys_ãe
 284

	)

75 
	#__NR_sys_vm•li˚
 285

	)

79 #ñi‡
deföed
(
ARCH_IA64_H
)

80 #i‚de‡
__NR_i›rio_£t


81 
	#__NR_i›rio_£t
 1274

	)

82 
	#__NR_i›rio_gë
 1275

	)

85 #i‚de‡
__NR_Ádvi£64


86 
	#__NR_Ádvi£64
 1234

	)

89 #i‚de‡
__NR_sys_•li˚


90 
	#__NR_sys_•li˚
 1297

	)

91 
	#__NR_sys_ãe
 1301

	)

92 
	#__NR_sys_vm•li˚
 1302

	)

95 #i‚de‡
__NR_¥ódv2


96 
	#__NR_¥ódv2
 1348

	)

98 #i‚de‡
__NR_pwrôev2


99 
	#__NR_pwrôev2
 1349

	)

103 #ñi‡
deföed
(
ARCH_ALPHA_H
)

104 #i‚de‡
__NR_i›rio_£t


105 
	#__NR_i›rio_£t
 442

	)

106 
	#__NR_i›rio_gë
 443

	)

109 #i‚de‡
__NR_Ádvi£64


110 
	#__NR_Ádvi£64
 413

	)

113 #i‚de‡
__NR_sys_•li˚


114 
	#__NR_sys_•li˚
 468

	)

115 
	#__NR_sys_ãe
 470

	)

116 
	#__NR_sys_vm•li˚
 471

	)

120 #ñi‡
deföed
(
ARCH_S390_H
)

121 #i‚de‡
__NR_i›rio_£t


122 
	#__NR_i›rio_£t
 282

	)

123 
	#__NR_i›rio_gë
 283

	)

126 #i‚de‡
__NR_Ádvi£64


127 
	#__NR_Ádvi£64
 253

	)

130 #i‚de‡
__NR_sys_•li˚


131 
	#__NR_sys_•li˚
 306

	)

132 
	#__NR_sys_ãe
 308

	)

133 
	#__NR_sys_vm•li˚
 309

	)

136 #i‚de‡
__NR_¥ódv2


137 
	#__NR_¥ódv2
 376

	)

139 #i‚de‡
__NR_pwrôev2


140 
	#__NR_pwrôev2
 377

	)

144 #ñi‡
deföed
(
ARCH_SPARC_H
)

145 #i‚de‡
__NR_i›rio_£t


146 
	#__NR_i›rio_£t
 196

	)

147 
	#__NR_i›rio_gë
 218

	)

150 #i‚de‡
__NR_Ádvi£64


151 
	#__NR_Ádvi£64
 209

	)

154 #i‚de‡
__NR_sys_•li˚


155 
	#__NR_sys_•li˚
 232

	)

156 
	#__NR_sys_ãe
 280

	)

157 
	#__NR_sys_vm•li˚
 25

	)

160 #i‚de‡
__NR_¥ódv2


161 
	#__NR_¥ódv2
 358

	)

163 #i‚de‡
__NR_pwrôev2


164 
	#__NR_pwrôev2
 359

	)

168 #ñi‡
deföed
(
ARCH_SPARC64_H
)

169 #i‚de‡
__NR_i›rio_£t


170 
	#__NR_i›rio_£t
 196

	)

171 
	#__NR_i›rio_gë
 218

	)

174 #i‚de‡
__NR_Ádvi£64


175 
	#__NR_Ádvi£64
 209

	)

178 #i‚de‡
__NR_sys_•li˚


179 
	#__NR_sys_•li˚
 232

	)

180 
	#__NR_sys_ãe
 280

	)

181 
	#__NR_sys_vm•li˚
 25

	)

184 #i‚de‡
__NR_¥ódv2


185 
	#__NR_¥ódv2
 358

	)

187 #i‚de‡
__NR_pwrôev2


188 
	#__NR_pwrôev2
 359

	)

192 #ñi‡
deföed
(
ARCH_ARM_H
)

193 #i‚de‡
__NR_i›rio_£t


194 
	#__NR_i›rio_£t
 314

	)

195 
	#__NR_i›rio_gë
 315

	)

198 #i‚de‡
__NR_Ádvi£64


199 
	#__NR_Ádvi£64
 270

	)

202 #i‚de‡
__NR_sys_•li˚


203 
	#__NR_sys_•li˚
 340

	)

204 
	#__NR_sys_ãe
 342

	)

205 
	#__NR_sys_vm•li˚
 343

	)

208 #i‚de‡
__NR_¥ódv2


209 
	#__NR_¥ódv2
 392

	)

211 #i‚de‡
__NR_pwrôev2


212 
	#__NR_pwrôev2
 393

	)

216 #ñi‡
deföed
(
ARCH_MIPS64_H
)

217 #i‚de‡
__NR_i›rio_£t


218 
	#__NR_i›rio_£t
 314

	)

219 
	#__NR_i›rio_gë
 315

	)

222 #i‚de‡
__NR_Ádvi£64


223 
	#__NR_Ádvi£64
 215

	)

226 #i‚de‡
__NR_sys_•li˚


227 
	#__NR_sys_•li˚
 263

	)

228 
	#__NR_sys_ãe
 265

	)

229 
	#__NR_sys_vm•li˚
 266

	)

233 #ñi‡
deföed
(
ARCH_SH_H
)

234 #i‚de‡
__NR_i›rio_£t


235 
	#__NR_i›rio_£t
 288

	)

236 
	#__NR_i›rio_gë
 289

	)

239 #i‚de‡
__NR_Ádvi£64


240 
	#__NR_Ádvi£64
 250

	)

243 #i‚de‡
__NR_sys_•li˚


244 
	#__NR_sys_•li˚
 313

	)

245 
	#__NR_sys_ãe
 315

	)

246 
	#__NR_sys_vm•li˚
 316

	)

250 #ñi‡
deföed
(
ARCH_HPPA_H
)

251 #i‚de‡
__NR_i›rio_£t


252 
	#__NR_i›rio_£t
 267

	)

253 
	#__NR_i›rio_gë
 268

	)

256 #i‚de‡
__NR_Ádvi£64


257 
	#__NR_Ádvi£64
 236

	)

260 #i‚de‡
__NR_sys_•li˚


261 
	#__NR_sys_•li˚
 291

	)

262 
	#__NR_sys_ãe
 293

	)

263 
	#__NR_sys_vm•li˚
 294

	)

267 #ñi‡
deföed
(
ARCH_AARCH64_H
)

268 #i‚de‡
__NR_i›rio_£t


269 
	#__NR_i›rio_£t
 30

	)

270 
	#__NR_i›rio_gë
 31

	)

	@/home/ysjin/Desktop/fio/fio/os/os-linux.h

1 #i‚de‡
FIO_OS_LINUX_H


2 
	#FIO_OS_LINUX_H


	)

4 
	#FIO_OS
 
os_löux


	)

6 
	~<sys/io˘l.h
>

7 
	~<sys/uio.h
>

8 
	~<sys/sysˇŒ.h
>

9 
	~<sys/sysma¸os.h
>

10 
	~<sys/vfs.h
>

11 
	~<sys/mm™.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<î∫o.h
>

15 
	~<sched.h
>

16 
	~<löux/uni°d.h
>

17 
	~<löux/øw.h
>

18 
	~<löux/maj‹.h
>

19 
	~<löux/fs.h
>

20 
	~<scsi/sg.h
>

22 
	~"os-löux-sysˇŒ.h
"

23 
	~"böje˘.h
"

24 
	~"../fûe.h
"

26 #i‚de‡
__has_buûtö


27 
	#__has_buûtö
(
x
) 0

29 

	)

30 
	#FIO_HAVE_CPU_AFFINITY


	)

31 
	#FIO_HAVE_DISK_UTIL


	)

32 
	#FIO_HAVE_SGIO


	)

33 
	#FIO_HAVE_IOPRIO


	)

34 
	#FIO_HAVE_IOPRIO_CLASS


	)

35 
	#FIO_HAVE_IOSCHED_SWITCH


	)

36 
	#FIO_HAVE_ODIRECT


	)

37 
	#FIO_HAVE_HUGETLB


	)

38 
	#FIO_HAVE_RAWBIND


	)

39 
	#FIO_HAVE_BLKTRACE


	)

40 
	#FIO_HAVE_CL_SIZE


	)

41 
	#FIO_HAVE_CGROUPS


	)

42 
	#FIO_HAVE_FS_STAT


	)

43 
	#FIO_HAVE_TRIM


	)

44 
	#FIO_HAVE_BINJECT


	)

45 
	#FIO_HAVE_GETTID


	)

46 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

47 
	#FIO_HAVE_PWRITEV2


	)

48 
	#FIO_HAVE_SHM_ATTACH_REMOVED


	)

50 #ifde‡
MAP_HUGETLB


51 
	#FIO_HAVE_MMAP_HUGE


	)

54 
	#OS_MAP_ANON
 
MAP_ANONYMOUS


	)

56 
˝u_£t_t
 
	tos_˝u_mask_t
;

58 
dønd48_d©a
 
	tos_øndom_°©e_t
;

60 #ifde‡
CONFIG_3ARG_AFFINITY


61 
	#fio_£èfföôy
(
pid
, 
˝umask
) \

62 
	`sched_£èfföôy
((
pid
), (
˝umask
), &(˝umask))

	)

63 
	#fio_gëafföôy
(
pid
, 
±r
) \

64 
	`sched_gëafföôy
((
pid
), (
˝u_£t_t
), (
±r
))

	)

65 #ñi‡
deföed
(
CONFIG_2ARG_AFFINITY
)

66 
	#fio_£èfföôy
(
pid
, 
˝umask
) \

67 
	`sched_£èfföôy
((
pid
), &(
˝umask
))

	)

68 
	#fio_gëafföôy
(
pid
, 
±r
) \

69 
	`sched_gëafföôy
((
pid
), (
±r
))

	)

72 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ë(Ë
	`CPU_CLR
((˝u), (mask))

	)

73 
	#fio_˝u_£t
(
mask
, 
˝u
Ë(Ë
	`CPU_SET
((˝u), (mask))

	)

74 
	#fio_˝u_is£t
(
mask
, 
˝u
Ë(
	`CPU_ISSET
((˝u), (mask)Ë!0)

	)

75 
	#fio_˝u_cou¡
(
mask
Ë
	`CPU_COUNT
((mask))

	)

77 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

79 
	`CPU_ZERO
(
mask
);

81 
	}
}

83 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

86 
	}
}

88 
	#FIO_MAX_CPUS
 
CPU_SETSIZE


	)

91 
	mIOPRIO_CLASS_NONE
,

92 
	mIOPRIO_CLASS_RT
,

93 
	mIOPRIO_CLASS_BE
,

94 
	mIOPRIO_CLASS_IDLE
,

98 
	mIOPRIO_WHO_PROCESS
 = 1,

99 
	mIOPRIO_WHO_PGRP
,

100 
	mIOPRIO_WHO_USER
,

103 
	#IOPRIO_BITS
 16

	)

104 
	#IOPRIO_CLASS_SHIFT
 13

	)

106 
	#IOPRIO_MIN_PRIO
 0

	)

107 
	#IOPRIO_MAX_PRIO
 7

	)

109 
	#IOPRIO_MIN_PRIO_CLASS
 0

	)

110 
	#IOPRIO_MAX_PRIO_CLASS
 3

	)

112 
ölöe
 
	$i›rio_£t
(
which
, 
who
, 
i›rio_˛ass
, 
i›rio
)

117 i‡(!
i›rio_˛ass
)

118 
i›rio_˛ass
 = 
IOPRIO_CLASS_BE
;

120 
i›rio
 |
i›rio_˛ass
 << 
IOPRIO_CLASS_SHIFT
;

121  
	`sysˇŒ
(
__NR_i›rio_£t
, 
which
, 
who
, 
i›rio
);

122 
	}
}

124 
ölöe
 
	$gëtid
()

126  
	`sysˇŒ
(
__NR_gëtid
);

127 
	}
}

129 
	#SPLICE_DEF_SIZE
 (64*1024)

	)

131 #i‚de‡
BLKGETSIZE64


132 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
)

	)

135 #i‚de‡
BLKFLSBUF


136 
	#BLKFLSBUF
 
	`_IO
(0x12,97)

	)

139 #i‚de‡
BLKDISCARD


140 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

143 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

145  
	`io˘l
(
f
->
fd
, 
BLKFLSBUF
);

146 
	}
}

148 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

150 i‡(!
	`io˘l
(
f
->
fd
, 
BLKGETSIZE64
, 
byãs
))

153  
î∫o
;

154 
	}
}

156 
ölöe
 
	$os_phys_mem
()

158 
∑gesize
, 
∑ges
;

160 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

161 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

162 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

165  (Ë
∑ges
 * (Ë
∑gesize
;

166 
	}
}

168 
ölöe
 
	$os_øndom_£ed
(
£ed
, 
os_øndom_°©e_t
 *
rs
)

170 
	`§™d48_r
(
£ed
, 
rs
);

171 
	}
}

173 
ölöe
 
	$os_øndom_l⁄g
(
os_øndom_°©e_t
 *
rs
)

175 
vÆ
;

177 
	`Ã™d48_r
(
rs
, &
vÆ
);

178  
vÆ
;

179 
	}
}

181 
ölöe
 
	$fio_lookup_øw
(
dev_t
 
dev
, *
majdev
, *
mödev
)

183 
øw_c⁄fig_ªque°
 
rq
;

184 
fd
;

186 i‡(
	`maj‹
(
dev
Ë!
RAW_MAJOR
)

192 
fd
 = 
	`›í
("/dev/øw˘l", 
O_RDONLY
);

193 i‡(
fd
 < 0) {

194 
fd
 = 
	`›í
("/dev/øw/øw˘l", 
O_RDONLY
);

195 i‡(
fd
 < 0)

199 
rq
.
øw_mö‹
 = 
	`mö‹
(
dev
);

200 i‡(
	`io˘l
(
fd
, 
RAW_GETBIND
, &
rq
) < 0) {

201 
	`˛o£
(
fd
);

205 
	`˛o£
(
fd
);

206 *
majdev
 = 
rq
.
block_maj‹
;

207 *
mödev
 = 
rq
.
block_mö‹
;

209 
	}
}

211 #ifde‡
O_NOATIME


212 
	#FIO_O_NOATIME
 
O_NOATIME


	)

214 
	#FIO_O_NOATIME
 0

	)

217 #ifde‡
O_ATOMIC


218 
	#OS_O_ATOMIC
 
O_ATOMIC


	)

220 
	#OS_O_ATOMIC
 040000000

	)

223 #ifde‡
MADV_REMOVE


224 
	#FIO_MADV_FREE
 
MADV_REMOVE


	)

228 #i‡(
__has_buûtö
(
__buûtö_bsw≠16
Ë&& __has_buûtö(
__buûtö_bsw≠32
) \

229 && 
__has_buûtö
(
__buûtö_bsw≠64
)Ë|| (
	g__GNUC__
 > 4 \

230 || (
	g__GNUC__
 =4 && 
__GNUC_MINOR__
 >= 8))

231 
	#fio_sw≠16
(
x
Ë
	`__buûtö_bsw≠16
(x)

	)

232 
	#fio_sw≠32
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

233 
	#fio_sw≠64
(
x
Ë
	`__buûtö_bsw≠64
(x)

	)

235 
	~<byãsw≠.h
>

236 
	#fio_sw≠16
(
x
Ë
	`bsw≠_16
(x)

	)

237 
	#fio_sw≠32
(
x
Ë
	`bsw≠_32
(x)

	)

238 
	#fio_sw≠64
(
x
Ë
	`bsw≠_64
(x)

	)

241 
	#CACHE_LINE_FILE
 \

242 "/sys/devi˚s/sy°em/˝u/˝u0/ˇche/ödex0/cohîícy_löe_size"

	)

244 
ölöe
 
	$¨ch_ˇche_löe_size
()

246 
size
[32];

247 
fd
, 
ªt
;

249 
fd
 = 
	`›í
(
CACHE_LINE_FILE
, 
O_RDONLY
);

250 i‡(
fd
 < 0)

253 
ªt
 = 
	`ªad
(
fd
, 
size
, (size));

255 
	`˛o£
(
fd
);

257 i‡(
ªt
 <= 0)

260  
	`©oi
(
size
);

261 
	}
}

263 #ifde‡
__powîpc64__


264 
	#FIO_HAVE_CPU_ONLINE_SYSCONF


	)

265 
ölöe
 
	$˝us_⁄löe
()

267  
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

268 
	}
}

271 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

273 
ªt
;

274 
°©fs
 
s
;

276 i‡(
	`°©fs
(
∑th
, &
s
) < 0)

279 
ªt
 = 
s
.
f_bsize
;

280 
ªt
 *(Ë
s
.
f_b‰ì
;

281  
ªt
;

282 
	}
}

284 
ölöe
 
	$os_åim
(
fio_fûe
 *
f
, 
°¨t
,

285 
Àn
)

287 
uöt64_t
 
ønge
[2];

289 
ønge
[0] = 
°¨t
;

290 
ønge
[1] = 
Àn
;

292 i‡(!
	`io˘l
(
f
->
fd
, 
BLKDISCARD
, 
ønge
))

295  
î∫o
;

296 
	}
}

298 #ifde‡
CONFIG_SCHED_IDLE


299 
ölöe
 
	$fio_£t_sched_idÀ
()

301 
sched_∑øm
 
p
 = { .
sched_¥i‹ôy
 = 0, };

302  
	`sched_£tscheduÀr
(
	`gëtid
(), 
SCHED_IDLE
, &
p
);

303 
	}
}

306 #i‚de‡
F_GET_RW_HINT


307 #i‚de‡
F_LINUX_SPECIFIC_BASE


308 
	#F_LINUX_SPECIFIC_BASE
 1024

	)

310 
	#F_GET_RW_HINT
 (
F_LINUX_SPECIFIC_BASE
 + 11)

	)

311 
	#F_SET_RW_HINT
 (
F_LINUX_SPECIFIC_BASE
 + 12)

	)

312 
	#F_GET_FILE_RW_HINT
 (
F_LINUX_SPECIFIC_BASE
 + 13)

	)

313 
	#F_SET_FILE_RW_HINT
 (
F_LINUX_SPECIFIC_BASE
 + 14)

	)

316 #i‚de‡
RWH_WRITE_LIFE_NONE


317 
	#RWH_WRITE_LIFE_NOT_SET
 0

	)

318 
	#RWH_WRITE_LIFE_NONE
 1

	)

319 
	#RWH_WRITE_LIFE_SHORT
 2

	)

320 
	#RWH_WRITE_LIFE_MEDIUM
 3

	)

321 
	#RWH_WRITE_LIFE_LONG
 4

	)

322 
	#RWH_WRITE_LIFE_EXTREME
 5

	)

325 
	#FIO_HAVE_WRITE_HINT


	)

327 #i‚de‡
RWF_HIPRI


328 
	#RWF_HIPRI
 0x00000001

	)

330 #i‚de‡
RWF_DSYNC


331 
	#RWF_DSYNC
 0x00000002

	)

333 #i‚de‡
RWF_SYNC


334 
	#RWF_SYNC
 0x00000004

	)

337 #i‚de‡
RWF_WRITE_LIFE_SHIFT


338 
	#RWF_WRITE_LIFE_SHIFT
 4

	)

339 
	#RWF_WRITE_LIFE_SHORT
 (1 << 
RWF_WRITE_LIFE_SHIFT
)

	)

340 
	#RWF_WRITE_LIFE_MEDIUM
 (2 << 
RWF_WRITE_LIFE_SHIFT
)

	)

341 
	#RWF_WRITE_LIFE_LONG
 (3 << 
RWF_WRITE_LIFE_SHIFT
)

	)

342 
	#RWF_WRITE_LIFE_EXTREME
 (4 << 
RWF_WRITE_LIFE_SHIFT
)

	)

345 #i‚de‡
CONFIG_PWRITEV2


346 #ifde‡
__NR_¥ódv2


347 
ölöe
 
	$make_pos_h_l
(*
pos_h
, *
pos_l
,

348 
off_t
 
off£t
)

350 #i‡
BITS_PER_LONG
 == 64

351 *
pos_l
 = 
off£t
;

352 *
pos_h
 = 0;

354 *
pos_l
 = 
off£t
 & 0xffffffff;

355 *
pos_h
 = ((
uöt64_t
Ë
off£t
) >> 32;

357 
	}
}

358 
ölöe
 
ssize_t
 
	$¥ódv2
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
,

359 
off_t
 
off£t
, 
Êags
)

361 
pos_l
, 
pos_h
;

363 
	`make_pos_h_l
(&
pos_h
, &
pos_l
, 
off£t
);

364  
	`sysˇŒ
(
__NR_¥ódv2
, 
fd
, 
iov
, 
iov˙t
, 
pos_l
, 
pos_h
, 
Êags
);

365 
	}
}

366 
ölöe
 
ssize_t
 
	$pwrôev2
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
,

367 
off_t
 
off£t
, 
Êags
)

369 
pos_l
, 
pos_h
;

371 
	`make_pos_h_l
(&
pos_h
, &
pos_l
, 
off£t
);

372  
	`sysˇŒ
(
__NR_pwrôev2
, 
fd
, 
iov
, 
iov˙t
, 
pos_l
, 
pos_h
, 
Êags
);

373 
	}
}

375 
ölöe
 
ssize_t
 
	$¥ódv2
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
,

376 
off_t
 
off£t
, 
Êags
)

378 
î∫o
 = 
ENOSYS
;

380 
	}
}

381 
ölöe
 
ssize_t
 
	$pwrôev2
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
,

382 
off_t
 
off£t
, 
Êags
)

384 
î∫o
 = 
ENOSYS
;

386 
	}
}

390 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

393 
	}
}

395 #ifde‡
CONFIG_LINUX_FALLOCATE


396 
	#FIO_HAVE_NATIVE_FALLOCATE


	)

397 
ölöe
 
boﬁ
 
	$fio_ÁŒoˇã
(
fio_fûe
 *
f
, 
uöt64_t
 
off£t
,

398 
uöt64_t
 
Àn
)

400 
ªt
;

401 
ªt
 = 
	`ÁŒoˇã
(
f
->
fd
, 0, 0, 
Àn
);

402 i‡(
ªt
 == 0)

403  
åue
;

406 i‡(
ªt
 > 0)

407 
î∫o
 = 
ªt
;

409  
Ál£
;

410 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/os-mac.h

1 #i‚de‡
FIO_OS_APPLE_H


2 
	#FIO_OS_APPLE_H


	)

4 
	#FIO_OS
 
os_mac


	)

6 
	~<î∫o.h
>

7 
	~<f˙é.h
>

8 
	~<sys/disk.h
>

9 
	~<sys/sys˘l.h
>

10 
	~<sys/time.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

13 
	~<mach/mach_öô.h
>

14 
	~<machöe/ídün.h
>

15 
	~<libkîn/OSByãOrdî.h
>

17 
	~"../fûe.h
"

19 
	#FIO_USE_GENERIC_RAND


	)

20 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

21 
	#FIO_HAVE_GETTID


	)

22 
	#FIO_HAVE_CHARDEV_SIZE


	)

23 
	#FIO_HAVE_NATIVE_FALLOCATE


	)

25 
	#OS_MAP_ANON
 
MAP_ANON


	)

27 
	#fio_sw≠16
(
x
Ë
	`OSSw≠I¡16
(x)

	)

28 
	#fio_sw≠32
(
x
Ë
	`OSSw≠I¡32
(x)

	)

29 
	#fio_sw≠64
(
x
Ë
	`OSSw≠I¡64
(x)

	)

35 
	#FIO_MAX_JOBS
 128

	)

37 
off_t
 
	toff64_t
;

39 #i‚de‡
CONFIG_CLOCKID_T


40 
	t˛ockid_t
;

43 
	#FIO_OS_DIRECTIO


	)

44 
ölöe
 
	$fio_£t_odúe˘
(
fio_fûe
 *
f
)

46 i‡(
	`f˙é
(
f
->
fd
, 
F_NOCACHE
, 1) == -1)

47  
î∫o
;

49 
	}
}

51 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

53 
uöt32_t
 
block_size
;

54 
uöt64_t
 
block_cou¡
;

56 i‡(
	`io˘l
(
f
->
fd
, 
DKIOCGETBLOCKCOUNT
, &
block_cou¡
) == -1)

57  
î∫o
;

58 i‡(
	`io˘l
(
f
->
fd
, 
DKIOCGETBLOCKSIZE
, &
block_size
) == -1)

59  
î∫o
;

61 *
byãs
 = 
block_size
;

62 *
byãs
 *
block_cou¡
;

64 
	}
}

66 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

72 i‡(!
	`blockdev_size
(
f
, 
byãs
))

75 *
byãs
 = -1ULL;

77 
	}
}

79 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

81  
ENOTSUP
;

82 
	}
}

84 
ölöe
 
	$os_phys_mem
()

86 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM
 };

87 
mem
;

88 
size_t
 
Àn
 = (
mem
);

90 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

91  
mem
;

92 
	}
}

94 
ölöe
 
	$gëtid
()

96  
	`mach_thªad_£lf
();

97 
	}
}

103 
fd©async
(
fd
);

105 
ölöe
 
boﬁ
 
	$fio_ÁŒoˇã
(
fio_fûe
 *
f
, 
uöt64_t
 
off£t
, uöt64_à
Àn
)

107 
f°‹e_t
 
°‹e
 = {
F_ALLOCATEALL
, 
F_PEOFPOSMODE
, 
off£t
, 
Àn
};

108 i‡(
	`f˙é
(
f
->
fd
, 
F_PREALLOCATE
, &
°‹e
) != -1) {

109 i‡(
	`·runˇã
(
f
->
fd
, 
Àn
) == 0)

110  
åue
;

113  
Ál£
;

114 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/os-netbsd.h

1 #i‚de‡
FIO_OS_NETBSD_H


2 
	#FIO_OS_NETBSD_H


	)

4 
	#FIO_OS
 
os_√tbsd


	)

6 
	~<î∫o.h
>

7 
	~<lwp.h
>

8 
	~<sys/∑øm.h
>

9 
	~<sys/°©vfs.h
>

10 
	~<sys/io˘l.h
>

11 
	~<sys/dkio.h
>

12 
	~<sys/diskœbñ.h
>

13 
	~<sys/ídün.h
>

14 
	~<sys/sys˘l.h
>

17 #unde‡
rb_node


18 #unde‡
rb_À·


19 #unde‡
rb_right


21 
	~"../fûe.h
"

23 
	#FIO_HAVE_ODIRECT


	)

24 
	#FIO_USE_GENERIC_RAND


	)

25 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

26 
	#FIO_HAVE_FS_STAT


	)

27 
	#FIO_HAVE_GETTID


	)

29 
	#OS_MAP_ANON
 
MAP_ANON


	)

31 #i‚de‡
PTHREAD_STACK_MIN


32 
	#PTHREAD_STACK_MIN
 4096

	)

35 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

36 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

37 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

39 
off_t
 
	toff64_t
;

41 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

43 
diskœbñ
 
dl
;

45 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGDINFO
, &
dl
)) {

46 *
byãs
 = (()
dl
.
d_£˝îunô
Ë* dl.
d_£csize
;

50 *
byãs
 = 0;

51  
î∫o
;

52 
	}
}

54 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

56  
ENOTSUP
;

57 
	}
}

59 
ölöe
 
	$os_phys_mem
()

61 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM64
 };

62 
uöt64_t
 
mem
;

63 
size_t
 
Àn
 = (
mem
);

65 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

66  
mem
;

67 
	}
}

69 
ölöe
 
	$gëtid
()

71  (Ë
	`_lwp_£lf
();

72 
	}
}

74 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

76 
ªt
;

77 
°©vfs
 
s
;

79 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

82 
ªt
 = 
s
.
f_‰size
;

83 
ªt
 *(Ë
s
.
f_b‰ì
;

84  
ªt
;

85 
	}
}

87 #ifde‡
MADV_FREE


88 
	#FIO_MADV_FREE
 
MADV_FREE


	)

	@/home/ysjin/Desktop/fio/fio/os/os-openbsd.h

1 #i‚de‡
FIO_OS_OPENBSD_H


2 
	#FIO_OS_OPENBSD_H


	)

4 
	#FIO_OS
 
os_›íbsd


	)

6 
	~<î∫o.h
>

7 
	~<sys/∑øm.h
>

8 
	~<sys/°©vfs.h
>

9 
	~<sys/io˘l.h
>

10 
	~<sys/dkio.h
>

11 
	~<sys/diskœbñ.h
>

12 
	~<sys/ídün.h
>

13 
	~<sys/ut¢ame.h
>

14 
	~<sys/sys˘l.h
>

17 #unde‡
RB_BLACK


18 #unde‡
RB_RED


19 #unde‡
RB_ROOT


21 
	~"../fûe.h
"

23 
	#FIO_USE_GENERIC_RAND


	)

24 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

25 
	#FIO_HAVE_FS_STAT


	)

26 
	#FIO_HAVE_GETTID


	)

27 
	#FIO_HAVE_SHM_ATTACH_REMOVED


	)

29 
	#OS_MAP_ANON
 
MAP_ANON


	)

31 #i‚de‡
PTHREAD_STACK_MIN


32 
	#PTHREAD_STACK_MIN
 4096

	)

35 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

36 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

37 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

39 
off_t
 
	toff64_t
;

41 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

43 
diskœbñ
 
dl
;

45 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGDINFO
, &
dl
)) {

46 *
byãs
 = (()
dl
.
d_£˝îunô
Ë* dl.
d_£csize
;

50 *
byãs
 = 0;

51  
î∫o
;

52 
	}
}

54 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

56  
ENOTSUP
;

57 
	}
}

59 
ölöe
 
	$os_phys_mem
()

61 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM64
 };

62 
uöt64_t
 
mem
;

63 
size_t
 
Àn
 = (
mem
);

65 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

66  
mem
;

67 
	}
}

69 
ölöe
 
	$gëtid
()

71  ()(
öçå_t
Ë
	`±hªad_£lf
();

72 
	}
}

74 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

76 
ªt
;

77 
°©vfs
 
s
;

79 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

82 
ªt
 = 
s
.
f_‰size
;

83 
ªt
 *(Ë
s
.
f_b‰ì
;

84  
ªt
;

85 
	}
}

87 #ifde‡
MADV_FREE


88 
	#FIO_MADV_FREE
 
MADV_FREE


	)

91 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

93 
ut¢ame
 
uts
;

94 
maj‹
, 
mö‹
;

96 i‡(
	`u«me
(&
uts
) == -1)

103 i‡(
uts
.
ªÀa£
[0] > '9' || uts.release[0] < '0')

105 i‡(
uts
.
ªÀa£
[1] != '.')

107 i‡(
uts
.
ªÀa£
[2] > '9' || uts.release[2] < '0')

110 
maj‹
 = 
uts
.
ªÀa£
[0] - '0';

111 
mö‹
 = 
uts
.
ªÀa£
[2] - '0';

113 i‡(
maj‹
 > 5)

115 i‡(
maj‹
 =5 && 
mö‹
 >= 1)

119 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/os-solaris.h

1 #i‚de‡
FIO_OS_SOLARIS_H


2 
	#FIO_OS_SOLARIS_H


	)

4 
	#FIO_OS
 
os_sﬁ¨is


	)

6 
	~<î∫o.h
>

7 
	~<mÆloc.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/f˙é.h
>

11 
	~<sys/p£t.h
>

12 
	~<sys/mm™.h
>

13 
	~<sys/dkio.h
>

14 
	~<sys/byã‹dî.h
>

15 
	~<sys/°©vfs.h
>

16 
	~<±hªad.h
>

18 
	~"../fûe.h
"

19 
	~"../lib/ty≥s.h
"

21 
	#FIO_HAVE_CPU_AFFINITY


	)

22 
	#FIO_HAVE_CHARDEV_SIZE


	)

23 
	#FIO_USE_GENERIC_BDEV_SIZE


	)

24 
	#FIO_HAVE_FS_STAT


	)

25 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

26 
	#FIO_HAVE_GETTID


	)

28 
	#OS_MAP_ANON
 
MAP_ANON


	)

29 
	#OS_RAND_MAX
 2147483648UL

	)

31 
	#fio_sw≠16
(
x
Ë
	`BSWAP_16
(x)

	)

32 
	#fio_sw≠32
(
x
Ë
	`BSWAP_32
(x)

	)

33 
	#fio_sw≠64
(
x
Ë
	`BSWAP_64
(x)

	)

35 
	ssﬁ¨is_ønd_£ed
 {

36 
	mr
[3];

39 #i‚de‡
POSIX_MADV_SEQUENTIAL


40 
	#posix_madvi£
 
madvi£


	)

41 
	#POSIX_MADV_SEQUENTIAL
 
MADV_SEQUENTIAL


	)

42 
	#POSIX_MADV_DONTNEED
 
MADV_DONTNEED


	)

43 
	#POSIX_MADV_RANDOM
 
MADV_RANDOM


	)

46 
	#os_˘ime_r
(
x
, 
y
, 
z
Ë
	`˘ime_r
((x), (y), (z))

	)

47 
	#FIO_OS_HAS_CTIME_R


	)

49 
p£tid_t
 
	tos_˝u_mask_t
;

50 
sﬁ¨is_ønd_£ed
 
	tos_øndom_°©e_t
;

52 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

54 
dk_möfo
 
öfo
;

56 *
byãs
 = 0;

58 i‡(
	`io˘l
(
f
->
fd
, 
DKIOCGMEDIAINFO
, &
öfo
) < 0)

59  
î∫o
;

61 *
byãs
 = 
öfo
.
dki_lbsize
 * info.
dki_ˇ∑côy
;

63 
	}
}

65 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

67  
ENOTSUP
;

68 
	}
}

70 
ölöe
 
	$os_phys_mem
()

72 
∑gesize
, 
∑ges
;

74 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

75 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

76 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

79  (Ë
∑ges
 * (Ë
∑gesize
;

80 
	}
}

82 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

84 
ªt
;

85 
°©vfs
 
s
;

87 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

90 
ªt
 = 
s
.
f_‰size
;

91 
ªt
 *(Ë
s
.
f_b‰ì
;

92  
ªt
;

93 
	}
}

95 
ölöe
 
	$os_øndom_£ed
(
£ed
, 
os_øndom_°©e_t
 *
rs
)

97 
rs
->
r
[0] = 
£ed
 & 0xffff;

98 
£ed
 >>= 16;

99 
rs
->
r
[1] = 
£ed
 & 0xffff;

100 
£ed
 >>= 16;

101 
rs
->
r
[2] = 
£ed
 & 0xffff;

102 
	`£ed48
(
rs
->
r
);

103 
	}
}

105 
ölöe
 
	$os_øndom_l⁄g
(
os_øndom_°©e_t
 *
rs
)

107  
	`ƒ™d48
(
rs
->
r
);

108 
	}
}

110 
	#FIO_OS_DIRECTIO


	)

111 
dúe˘io
(, );

112 
ölöe
 
	$fio_£t_odúe˘
(
fio_fûe
 *
f
)

114 i‡(
	`dúe˘io
(
f
->
fd
, 
DIRECTIO_ON
) < 0)

115  
î∫o
;

118 
	}
}

123 
	#fio_£èfföôy
(
pid
, 
˝umask
) \

124 
	`p£t_böd
((
˝umask
), 
P_LWPID
, (
pid
), 
NULL
)

	)

125 
	#fio_gëafföôy
(
pid
, 
±r
Ë({ 0; })

	)

127 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ë
	`p£t_assign
(
PS_NONE
, (˝u), 
NULL
)

	)

128 
	#fio_˝u_£t
(
mask
, 
˝u
Ë
	`p£t_assign
(*(mask), (˝u), 
NULL
)

	)

130 
ölöe
 
boﬁ
 
	$fio_˝u_is£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

132 c⁄° 
max_˝us
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

133 
num_˝us
;

134 
¥o˚ss‹id_t
 *
˝us
;

135 
boﬁ
 
ªt
;

136 
i
;

138 
˝us
 = 
	`mÆloc
((*˝usË* 
max_˝us
);

140 i‡(
	`p£t_öfo
(*
mask
, 
NULL
, &
num_˝us
, 
˝us
) < 0) {

141 
	`‰ì
(
˝us
);

142  
Ál£
;

145 
ªt
 = 
Ál£
;

146 
i
 = 0; i < 
num_˝us
; i++) {

147 i‡(
˝us
[
i
] =
˝u
) {

148 
ªt
 = 
åue
;

153 
	`‰ì
(
˝us
);

154  
ªt
;

155 
	}
}

157 
ölöe
 
	$fio_˝u_cou¡
(
os_˝u_mask_t
 *
mask
)

159 
num_˝us
;

161 i‡(
	`p£t_öfo
(*
mask
, 
NULL
, &
num_˝us
, NULL) < 0)

164  
num_˝us
;

165 
	}
}

167 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

169 i‡(
	`p£t_¸óã
(
mask
) < 0)

173 
	}
}

175 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

177 i‡(
	`p£t_de°roy
(*
mask
) < 0)

181 
	}
}

183 
ölöe
 
	$gëtid
()

185  
	`±hªad_£lf
();

186 
	}
}

191 
	#FIO_MAX_CPUS
 16384

	)

193 #ifde‡
MADV_FREE


194 
	#FIO_MADV_FREE
 
MADV_FREE


	)

	@/home/ysjin/Desktop/fio/fio/os/os-windows.h

1 #i‚de‡
FIO_OS_WINDOWS_H


2 
	#FIO_OS_WINDOWS_H


	)

4 
	#FIO_OS
 
os_wödows


	)

6 
	~<sys/ty≥s.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/°©.h
>

9 
	~<î∫o.h
>

10 
	~<wösock2.h
>

11 
	~<wödows.h
>

12 
	~<pßpi.h
>

13 
	~<°dlib.h
>

15 
	~"../smÆloc.h
"

16 
	~"../fûe.h
"

17 
	~"../log.h
"

18 
	~"../lib/hweight.h
"

19 
	~"../o¶ib/°rˇ£°r.h
"

20 
	~"../lib/ty≥s.h
"

22 
	~"wödows/posix.h
"

25 #i‡
deföed
(
WIN32
Ë&& !deföed(
ønd_r
)

26 
ønd_r
(*);

29 #i‚de‡
PTHREAD_STACK_MIN


30 
	#PTHREAD_STACK_MIN
 65535

	)

33 
	#FIO_HAVE_ODIRECT


	)

34 
	#FIO_HAVE_CPU_AFFINITY


	)

35 
	#FIO_HAVE_CHARDEV_SIZE


	)

36 
	#FIO_HAVE_GETTID


	)

37 
	#FIO_USE_GENERIC_RAND


	)

39 
	#FIO_PREFERRED_ENGINE
 "wödowßio"

	)

40 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_CGETTIME


	)

41 
	#FIO_OS_PATH_SEPARATOR
 '\\'

	)

43 
	#FIO_MAX_CPUS
 
MAXIMUM_PROCESSORS


	)

45 
	#OS_MAP_ANON
 
MAP_ANON


	)

47 
	#fio_sw≠16
(
x
Ë
	`_byãsw≠_ush‹t
(x)

	)

48 
	#fio_sw≠32
(
x
Ë
	`_byãsw≠_ul⁄g
(x)

	)

49 
	#fio_sw≠64
(
x
Ë
	`_byãsw≠_uöt64
(x)

	)

51 
DWORD_PTR
 
	tos_˝u_mask_t
;

53 
	#_SC_PAGESIZE
 0x1

	)

54 
	#_SC_NPROCESSORS_ONLN
 0x2

	)

55 
	#_SC_PHYS_PAGES
 0x4

	)

57 
	#SA_RESTART
 0

	)

58 
	#SIGPIPE
 0

	)

65 
	#O_DIRECT
 0x1000000

	)

66 
	#O_SYNC
 0x2000000

	)

69 
	#POSIX_MADV_DONTNEED
 0

	)

70 
	#POSIX_MADV_SEQUENTIAL
 0

	)

71 
	#POSIX_MADV_RANDOM
 0

	)

73 
	#F_SETFL
 0x1

	)

74 
	#F_GETFL
 0x2

	)

75 
	#O_NONBLOCK
 
FIONBIO


	)

78 
	#OS_MSG_DONTWAIT
 0

	)

80 
	#POLLOUT
 1

	)

81 
	#POLLIN
 2

	)

82 
	#POLLERR
 0

	)

83 
	#POLLHUP
 1

	)

85 
	#SIGCONT
 0

	)

86 
	#SIGUSR1
 1

	)

87 
	#SIGUSR2
 2

	)

89 
	tsig£t_t
;

90 
	tsigöfo_t
;

92 
	ssiga˘i⁄


94 (*
	mß_h™dÀr
)();

95 
sig£t_t
 
	mß_mask
;

96 
	mß_Êags
;

97 * (*
	mß_siga˘i⁄
)(, 
	msigöfo_t
 *, *);

100 
sysc⁄f
(
«me
);

102 
kûl
(
pid_t
 
pid
, 
sig
);

103 
pid_t
 
£tsid
();

104 
£tgid
(
gid_t
 
gid
);

105 
£tuid
(
uid_t
 
uid
);

106 
ni˚
(
ö¸
);

107 
siga˘i⁄
(
sig
, c⁄° siga˘i⁄ *
a˘
,

108 
siga˘i⁄
 *
ﬂ˘
);

109 
fsync
(
fûdes
);

110 
f‹k
();

111 
f˙é
(
fûdes
, 
cmd
, ...);

112 
fd©async
(
fûdes
);

113 
l°©
(c⁄° * 
∑th
, 
°©
 * 
buf
);

114 
uid_t
 
gëeuid
();

115 * 
˘ime_r
(c⁄° 
time_t
 *
t
, *
buf
);

116 
«no¶ìp
(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
);

117 
ssize_t
 
¥ód
(
fûdes
, *
buf
, 
size_t
 
nbyã
, 
off_t
 
off£t
);

118 
ssize_t
 
pwrôe
(
fûdes
, c⁄° *
buf
, 
size_t
 
nbyã
,

119 
off_t
 
off£t
);

121 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

123 
rc
 = 0;

124 
HANDLE
 
hFûe
;

125 
GET_LENGTH_INFORMATION
 
öfo
;

126 
DWORD
 
outByãs
;

128 i‡(
f
->
hFûe
 =
NULL
) {

129 
hFûe
 = 
	`Cª©eFûe
(
f
->
fûe_«me
, 
GENERIC_READ
, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
,

130 
NULL
, 
OPEN_EXISTING
, 0, NULL);

132 
hFûe
 = 
f
->hFile;

135 i‡(
	`Devi˚IoC⁄åﬁ
(
hFûe
, 
IOCTL_DISK_GET_LENGTH_INFO
, 
NULL
, 0, &
öfo
, (öfo), &
outByãs
, NULL))

136 *
byãs
 = 
öfo
.
Lígth
.
QuadP¨t
;

138 
rc
 = 
EIO
;

142 i‡(
hFûe
 !
INVALID_HANDLE_VALUE
 && 
f
->hFûê=
NULL
)

143 
	`Clo£H™dÀ
(
hFûe
);

145  
rc
;

146 
	}
}

148 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

150  
	`blockdev_size
(
f
, 
byãs
);

151 
	}
}

153 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

155  
ENOTSUP
;

156 
	}
}

158 
ölöe
 
	$os_phys_mem
()

160 
∑gesize
, 
∑ges
;

162 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

163 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

164 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

167  (Ë
∑ges
 * (Ë
∑gesize
;

168 
	}
}

170 
ölöe
 
	$gëtid
()

172  
	`GëCuºítThªadId
();

173 
	}
}

175 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
)

177 
HANDLE
 
h
;

178 
BOOL
 
bSuc˚ss
 = 
FALSE
;

180 
h
 = 
	`O≥nThªad
(
THREAD_QUERY_INFORMATION
 | 
THREAD_SET_INFORMATION
, 
TRUE
, 
pid
);

181 i‡(
h
 !
NULL
) {

182 
bSuc˚ss
 = 
	`SëThªadAfföôyMask
(
h
, 
˝umask
);

183 i‡(!
bSuc˚ss
)

184 
	`log_îr
("fio_£èfföôy faûed: faûedÅÿ£àthªadáfföôy (pid %d, mask %.16Œx)\n", 
pid
, 
˝umask
);

186 
	`Clo£H™dÀ
(
h
);

188 
	`log_îr
("fio_£èfföôy faûed: faûedÅÿgë h™dÀ f‹Öid %d\n", 
pid
);

191  (
bSuc˚ss
)? 0 : -1;

192 
	}
}

194 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
mask
)

196 
os_˝u_mask_t
 
sy°emMask
;

198 
HANDLE
 
h
 = 
	`O≥nPro˚ss
(
PROCESS_QUERY_INFORMATION
, 
TRUE
, 
pid
);

200 i‡(
h
 !
NULL
) {

201 
	`GëPro˚ssAfföôyMask
(
h
, 
mask
, &
sy°emMask
);

202 
	`Clo£H™dÀ
(
h
);

204 
	`log_îr
("fio_gëafföôy faûed: faûedÅÿgë h™dÀ f‹Öid %d\n", 
pid
);

209 
	}
}

211 
ölöe
 
	$fio_˝u_˛ór
(
os_˝u_mask_t
 *
mask
, 
˝u
)

213 *
mask
 &~(1ULL << 
˝u
);

214 
	}
}

216 
ölöe
 
	$fio_˝u_£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

218 *
mask
 |1ULL << 
˝u
;

219 
	}
}

221 
ölöe
 
	$fio_˝u_is£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

223  (*
mask
 & (1ULL << 
˝u
)) != 0;

224 
	}
}

226 
ölöe
 
	$fio_˝u_cou¡
(
os_˝u_mask_t
 *
mask
)

228  
	`hweight64
(*
mask
);

229 
	}
}

231 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

233 *
mask
 = 0;

235 
	}
}

237 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

240 
	}
}

242 
ölöe
 
	$öô_øndom_£eds
(*
ønd_£eds
, 
size
)

244 
HCRYPTPROV
 
hCry±Prov
;

246 i‡(!
	`Cry±AcquúeC⁄ãxt
(&
hCry±Prov
, 
NULL
, NULL, 
PROV_RSA_FULL
, 
CRYPT_VERIFYCONTEXT
))

248 
î∫o
 = 
	`GëLa°Eº‹
();

249 
	`log_îr
("Cry±AcquúeC⁄ãxt(ËÁûed:Éº‹ %d\n", 
î∫o
);

253 i‡(!
	`Cry±GíR™dom
(
hCry±Prov
, 
size
, (
BYTE
*)
ønd_£eds
)) {

254 
î∫o
 = 
	`GëLa°Eº‹
();

255 
	`log_îr
("Cry±GíR™dom(ËÁûed,Éº‹ %d\n", 
î∫o
);

256 
	`Cry±Rñó£C⁄ãxt
(
hCry±Prov
, 0);

260 
	`Cry±Rñó£C⁄ãxt
(
hCry±Prov
, 0);

262 
	}
}

265 
ölöe
 
	$fio_£t_sched_idÀ
()

268  (
	`SëThªadPri‹ôy
(
	`GëCuºítThªad
(), 
THREAD_PRIORITY_IDLE
))? 0 : -1;

269 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/os.h

1 #i‚de‡
FIO_OS_H


2 
	#FIO_OS_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~<sys/sockë.h
>

6 
	~<f˙é.h
>

7 
	~<±hªad.h
>

8 
	~<uni°d.h
>

9 
	~<°dlib.h
>

11 
	~"../¨ch/¨ch.h
"

12 
	~"../lib/ty≥s.h
"

15 
	mos_löux
 = 1,

16 
	mos_aix
,

17 
	mos_‰ìbsd
,

18 
	mos_hpux
,

19 
	mos_mac
,

20 
	mos_√tbsd
,

21 
	mos_›íbsd
,

22 
	mos_sﬁ¨is
,

23 
	mos_wödows
,

24 
	mos_™droid
,

25 
	mos_døg⁄Êy
,

27 
	mos_ƒ
,

30 #i‡
deföed
(
__ANDROID__
)

31 
	~"os-™droid.h
"

32 #ñi‡
deföed
(
__löux__
)

33 
	~"os-löux.h
"

34 #ñi‡
deföed
(
__FªeBSD__
)

35 
	~"os-‰ìbsd.h
"

36 #ñi‡
deföed
(
__O≥nBSD__
)

37 
	~"os-›íbsd.h
"

38 #ñi‡
deföed
(
__NëBSD__
)

39 
	~"os-√tbsd.h
"

40 #ñi‡
deföed
(
__sun__
)

41 
	~"os-sﬁ¨is.h
"

42 #ñi‡
deföed
(
__APPLE__
)

43 
	~"os-mac.h
"

44 #ñi‡
deföed
(
_AIX
)

45 
	~"os-aix.h
"

46 #ñi‡
deföed
(
__hpux
)

47 
	~"os-hpux.h
"

48 #ñi‡
deföed
(
WIN32
)

49 
	~"os-wödows.h
"

50 #ñi‡
deföed
 (
__Døg⁄Fly__
)

51 
	~"os-døg⁄Êy.h
"

56 #ifde‡
CONFIG_POSIXAIO


57 
	~<aio.h
>

58 #i‚de‡
FIO_OS_HAVE_AIOCB_TYPEDEF


59 
aiocb
 
	tos_aiocb_t
;

63 #i‚de‡
CONFIG_STRSEP


64 
	~"../o¶ib/°r£p.h
"

67 #i‚de‡
CONFIG_STRLCAT


68 
	~"../o¶ib/°æˇt.h
"

71 #ifde‡
MSG_DONTWAIT


72 
	#OS_MSG_DONTWAIT
 
MSG_DONTWAIT


	)

75 #i‚de‡
POSIX_FADV_DONTNEED


76 
	#POSIX_FADV_DONTNEED
 (0)

	)

77 
	#POSIX_FADV_SEQUENTIAL
 (0)

	)

78 
	#POSIX_FADV_RANDOM
 (0)

	)

79 
	#POSIX_FADV_NORMAL
 (0)

	)

82 #i‚de‡
FIO_HAVE_CPU_AFFINITY


83 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ëdÿ{ } 0)

	)

84 
	tos_˝u_mask_t
;

86 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
)

89 
	}
}

91 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
˝umask
)

94 
	}
}

96 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

99 
	}
}

101 
ölöe
 
	$fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u_ödex
)

104 
	}
}

106 
fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u
);

109 #i‚de‡
FIO_HAVE_IOPRIO


110 
	#i›rio_£t
(
which
, 
who
, 
¥io˛ass
, 
¥io
Ë(0)

	)

113 #i‚de‡
FIO_HAVE_ODIRECT


114 
	#OS_O_DIRECT
 0

	)

116 
	#OS_O_DIRECT
 
O_DIRECT


	)

119 #ifde‡
OS_O_ATOMIC


120 
	#FIO_O_ATOMIC
 
OS_O_ATOMIC


	)

122 
	#FIO_O_ATOMIC
 0

	)

125 #i‚de‡
FIO_HAVE_HUGETLB


126 
	#SHM_HUGETLB
 0

	)

127 
	#MAP_HUGETLB
 0

	)

128 #i‚de‡
FIO_HUGE_PAGE


129 
	#FIO_HUGE_PAGE
 0

	)

132 #i‚de‡
FIO_HUGE_PAGE


133 
	#FIO_HUGE_PAGE
 4194304

	)

137 #i‚de‡
FIO_HAVE_MMAP_HUGE


138 
	#MAP_HUGETLB
 0

	)

141 #i‚de‡
FIO_O_NOATIME


142 
	#FIO_O_NOATIME
 0

	)

145 #i‚de‡
OS_RAND_MAX


146 
	#OS_RAND_MAX
 
RAND_MAX


	)

149 #i‚de‡
FIO_HAVE_RAWBIND


150 
	#fio_lookup_øw
(
dev
, 
majdev
, 
mödev
Ë1

	)

153 #i‚de‡
FIO_PREFERRED_ENGINE


154 
	#FIO_PREFERRED_ENGINE
 "psync"

	)

157 #i‚de‡
FIO_OS_PATH_SEPARATOR


158 
	#FIO_OS_PATH_SEPARATOR
 '/'

	)

161 #i‚de‡
FIO_PREFERRED_CLOCK_SOURCE


162 #ifde‡
CONFIG_CLOCK_GETTIME


163 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_CGETTIME


	)

165 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_GTOD


	)

169 #i‚de‡
FIO_MAX_JOBS


170 
	#FIO_MAX_JOBS
 4096

	)

173 #i‚de‡
CONFIG_SOCKLEN_T


174 
	tsockÀn_t
;

177 #i‚de‡
FIO_OS_HAS_CTIME_R


178 
	#os_˘ime_r
(
x
, 
y
, 
z
Ë(Ë
	`˘ime_r
((x), (y))

	)

181 #ifde‡
FIO_USE_GENERIC_SWAP


182 
ölöe
 
uöt16_t
 
	$fio_sw≠16
(
uöt16_t
 
vÆ
)

184  (
vÆ
 << 8) | (val >> 8);

185 
	}
}

187 
ölöe
 
uöt32_t
 
	$fio_sw≠32
(
uöt32_t
 
vÆ
)

189 
vÆ
 = ((val & 0xff00ff00UL) >> 8) | ((val & 0x00ff00ffUL) << 8);

191  (
vÆ
 >> 16) | (val << 16);

192 
	}
}

194 
ölöe
 
uöt64_t
 
	$fio_sw≠64
(
uöt64_t
 
vÆ
)

196 
vÆ
 = ((val & 0xff00ff00ff00ff00ULL) >> 8) |

197 ((
vÆ
 & 0x00ff00ff00ff00ffULL) << 8);

198 
vÆ
 = ((val & 0xffff0000ffff0000ULL) >> 16) |

199 ((
vÆ
 & 0x0000ffff0000ffffULL) << 16);

201  (
vÆ
 >> 32) | (val << 32);

202 
	}
}

205 #i‚de‡
FIO_HAVE_BYTEORDER_FUNCS


206 #ifde‡
CONFIG_LITTLE_ENDIAN


207 
	#__be64_to_˝u
(
x
Ë
	`fio_sw≠64
(x)

	)

208 
	#__À16_to_˝u
(
x
Ë(x)

	)

209 
	#__À32_to_˝u
(
x
Ë(x)

	)

210 
	#__À64_to_˝u
(
x
Ë(x)

	)

211 
	#__˝u_to_be64
(
x
Ë
	`fio_sw≠64
(x)

	)

212 
	#__˝u_to_À16
(
x
Ë(x)

	)

213 
	#__˝u_to_À32
(
x
Ë(x)

	)

214 
	#__˝u_to_À64
(
x
Ë(x)

	)

216 
	#__be64_to_˝u
(
x
Ë(x)

	)

217 
	#__À16_to_˝u
(
x
Ë
	`fio_sw≠16
(x)

	)

218 
	#__À32_to_˝u
(
x
Ë
	`fio_sw≠32
(x)

	)

219 
	#__À64_to_˝u
(
x
Ë
	`fio_sw≠64
(x)

	)

220 
	#__˝u_to_be64
(
x
Ë(x)

	)

221 
	#__˝u_to_À16
(
x
Ë
	`fio_sw≠16
(x)

	)

222 
	#__˝u_to_À32
(
x
Ë
	`fio_sw≠32
(x)

	)

223 
	#__˝u_to_À64
(
x
Ë
	`fio_sw≠64
(x)

	)

227 #ifde‡
FIO_INTERNAL


228 
	#be64_to_˝u
(
vÆ
) ({ \

229 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

230 
	`__be64_to_˝u
(
vÆ
); \

231 })

	)

232 
	#À16_to_˝u
(
vÆ
) ({ \

233 
	`ty≥check
(
uöt16_t
, 
vÆ
); \

234 
	`__À16_to_˝u
(
vÆ
); \

235 })

	)

236 
	#À32_to_˝u
(
vÆ
) ({ \

237 
	`ty≥check
(
uöt32_t
, 
vÆ
); \

238 
	`__À32_to_˝u
(
vÆ
); \

239 })

	)

240 
	#À64_to_˝u
(
vÆ
) ({ \

241 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

242 
	`__À64_to_˝u
(
vÆ
); \

243 })

	)

246 
	#˝u_to_be64
(
vÆ
) ({ \

247 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

248 
	`__˝u_to_be64
(
vÆ
); \

249 })

	)

250 
	#˝u_to_À16
(
vÆ
) ({ \

251 
	`ty≥check
(
uöt16_t
, 
vÆ
); \

252 
	`__˝u_to_À16
(
vÆ
); \

253 })

	)

254 
	#˝u_to_À32
(
vÆ
) ({ \

255 
	`ty≥check
(
uöt32_t
, 
vÆ
); \

256 
	`__˝u_to_À32
(
vÆ
); \

257 })

	)

258 
	#˝u_to_À64
(
vÆ
) ({ \

259 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

260 
	`__˝u_to_À64
(
vÆ
); \

261 })

	)

263 
	#FIO_DEF_CL_SIZE
 128

	)

265 
ölöe
 
	$os_ˇche_löe_size
()

267 #ifde‡
FIO_HAVE_CL_SIZE


268 
ªt
 = 
	`¨ch_ˇche_löe_size
();

270 i‡(
ªt
 <= 0)

271  
FIO_DEF_CL_SIZE
;

273  
ªt
;

275  
FIO_DEF_CL_SIZE
;

277 
	}
}

279 #ifde‡
FIO_USE_GENERIC_BDEV_SIZE


280 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

282 
off_t
 
íd
;

284 *
byãs
 = 0;

286 
íd
 = 
	`l£ek
(
f
->
fd
, 0, 
SEEK_END
);

287 i‡(
íd
 < 0)

288  
î∫o
;

290 *
byãs
 = 
íd
;

292 
	}
}

295 #ifde‡
FIO_USE_GENERIC_RAND


296 
	tos_øndom_°©e_t
;

298 
ölöe
 
	$os_øndom_£ed
(
£ed
, 
os_øndom_°©e_t
 *
rs
)

300 
	`§™d
(
£ed
);

301 
	}
}

303 
ölöe
 
	$os_øndom_l⁄g
(
os_øndom_°©e_t
 *
rs
)

305 
vÆ
;

307 
vÆ
 = 
	`ønd_r
(
rs
);

308  
vÆ
;

309 
	}
}

312 #ifde‡
FIO_USE_GENERIC_INIT_RANDOM_STATE


313 
ölöe
 
	$öô_øndom_£eds
(*
ønd_£eds
, 
size
)

315 
fd
;

317 
fd
 = 
	`›í
("/dev/uøndom", 
O_RDONLY
);

318 i‡(
fd
 == -1) {

322 i‡(
	`ªad
(
fd
, 
ønd_£eds
, 
size
) < size) {

323 
	`˛o£
(
fd
);

327 
	`˛o£
(
fd
);

329 
	}
}

332 #i‚de‡
FIO_HAVE_FS_STAT


333 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

336 
	}
}

339 #i‚de‡
FIO_HAVE_CPU_ONLINE_SYSCONF


340 
ölöe
 
	$˝us_⁄löe
()

342  
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

343 
	}
}

346 #i‚de‡
CPU_COUNT


347 #ifde‡
FIO_HAVE_CPU_AFFINITY


348 
ölöe
 
	$CPU_COUNT
(
os_˝u_mask_t
 *
mask
)

350 
max_˝us
 = 
	`˝us_⁄löe
();

351 
ƒ_˝us
, 
i
;

353 
i
 = 0, 
ƒ_˝us
 = 0; i < 
max_˝us
; i++)

354 i‡(
	`fio_˝u_is£t
(
mask
, 
i
))

355 
ƒ_˝us
++;

357  
ƒ_˝us
;

358 
	}
}

362 #i‚de‡
FIO_HAVE_GETTID


363 
ölöe
 
	$gëtid
()

365  
	`gëpid
();

366 
	}
}

369 #i‚de‡
FIO_HAVE_SHM_ATTACH_REMOVED


370 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

373 
	}
}

376 #i‚de‡
FIO_HAVE_NATIVE_FALLOCATE


377 
ölöe
 
boﬁ
 
	$fio_ÁŒoˇã
(
fio_fûe
 *
f
, 
uöt64_t
 
off£t
, uöt64_à
Àn
)

379 
î∫o
 = 
ENOSYS
;

380  
Ál£
;

381 
	}
}

384 #i‡
deföed
(
CONFIG_POSIX_FALLOCATE
Ë|| deföed(
FIO_HAVE_NATIVE_FALLOCATE
)

385 
	#FIO_HAVE_ANY_FALLOCATE


	)

	@/home/ysjin/Desktop/fio/fio/os/windows/posix.c

6 
	~<¨∑/öë.h
>

7 
	~<√töë/ö.h
>

8 
	~<wödows.h
>

9 
	~<°ddef.h
>

10 
	~<°rög.h
>

11 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<dúít.h
>

14 
	~<±hªad.h
>

15 
	~<time.h
>

16 
	~<£m≠h‹e.h
>

17 
	~<sys/shm.h
>

18 
	~<sys/mm™.h
>

19 
	~<sys/uio.h
>

20 
	~<sys/ªsour˚.h
>

21 
	~<sys/pﬁl.h
>

22 
	~<sys/waô.h
>

23 
	~<£tjmp.h
>

25 
	~"../os-wödows.h
"

26 
	~"../../lib/hweight.h
"

28 
mtime_sö˚_now
(
time•ec
 *);

29 
fio_gëtime
(
time•ec
 *, *);

32 
HRESULT
 
WINAPI
 
SåögCchC›yA
(

33 *
pszDe°
,

34 
size_t
 
cchDe°
,

35 c⁄° *
pszSrc
);

37 
HRESULT
 
WINAPI
 
SåögCchPrötfA
(

38 *
pszDe°
,

39 
size_t
 
cchDe°
,

40 c⁄° *
pszF‹m©
,

43 
	$wö_to_posix_îr‹
(
DWORD
 
wöîr
)

45 
wöîr
)

47 
ERROR_FILE_NOT_FOUND
:  
ENOENT
;

48 
ERROR_PATH_NOT_FOUND
:  
ENOENT
;

49 
ERROR_ACCESS_DENIED
:  
EACCES
;

50 
ERROR_INVALID_HANDLE
:  
EBADF
;

51 
ERROR_NOT_ENOUGH_MEMORY
:  
ENOMEM
;

52 
ERROR_INVALID_DATA
:  
EINVAL
;

53 
ERROR_OUTOFMEMORY
:  
ENOMEM
;

54 
ERROR_INVALID_DRIVE
:  
ENODEV
;

55 
ERROR_NOT_SAME_DEVICE
:  
EXDEV
;

56 
ERROR_WRITE_PROTECT
:  
EROFS
;

57 
ERROR_BAD_UNIT
:  
ENODEV
;

58 
ERROR_SHARING_VIOLATION
:  
EACCES
;

59 
ERROR_LOCK_VIOLATION
:  
EACCES
;

60 
ERROR_SHARING_BUFFER_EXCEEDED
:  
ENOLCK
;

61 
ERROR_HANDLE_DISK_FULL
:  
ENOSPC
;

62 
ERROR_NOT_SUPPORTED
:  
ENOSYS
;

63 
ERROR_FILE_EXISTS
:  
EEXIST
;

64 
ERROR_CANNOT_MAKE
:  
EPERM
;

65 
ERROR_INVALID_PARAMETER
:  
EINVAL
;

66 
ERROR_NO_PROC_SLOTS
:  
EAGAIN
;

67 
ERROR_BROKEN_PIPE
:  
EPIPE
;

68 
ERROR_OPEN_FAILED
:  
EIO
;

69 
ERROR_NO_MORE_SEARCH_HANDLES
:  
ENFILE
;

70 
ERROR_CALL_NOT_IMPLEMENTED
:  
ENOSYS
;

71 
ERROR_INVALID_NAME
:  
ENOENT
;

72 
ERROR_WAIT_NO_CHILDREN
:  
ECHILD
;

73 
ERROR_CHILD_NOT_COMPLETE
:  
EBUSY
;

74 
ERROR_DIR_NOT_EMPTY
:  
ENOTEMPTY
;

75 
ERROR_SIGNAL_REFUSED
:  
EIO
;

76 
ERROR_BAD_PATHNAME
:  
ENOENT
;

77 
ERROR_SIGNAL_PENDING
:  
EBUSY
;

78 
ERROR_MAX_THRDS_REACHED
:  
EAGAIN
;

79 
ERROR_BUSY
:  
EBUSY
;

80 
ERROR_ALREADY_EXISTS
:  
EEXIST
;

81 
ERROR_NO_SIGNAL_SENT
:  
EIO
;

82 
ERROR_FILENAME_EXCED_RANGE
:  
EINVAL
;

83 
ERROR_META_EXPANSION_TOO_LONG
:  
EINVAL
;

84 
ERROR_INVALID_SIGNAL_NUMBER
:  
EINVAL
;

85 
ERROR_THREAD_1_INACTIVE
:  
EINVAL
;

86 
ERROR_BAD_PIPE
:  
EINVAL
;

87 
ERROR_PIPE_BUSY
:  
EBUSY
;

88 
ERROR_NO_DATA
:  
EPIPE
;

89 
ERROR_MORE_DATA
:  
EAGAIN
;

90 
ERROR_DIRECTORY
:  
ENOTDIR
;

91 
ERROR_PIPE_CONNECTED
:  
EBUSY
;

92 
ERROR_NO_TOKEN
:  
EINVAL
;

93 
ERROR_PROCESS_ABORTED
:  
EFAULT
;

94 
ERROR_BAD_DEVICE
:  
ENODEV
;

95 
ERROR_BAD_USERNAME
:  
EINVAL
;

96 
ERROR_OPEN_FILES
:  
EAGAIN
;

97 
ERROR_ACTIVE_CONNECTIONS
:  
EAGAIN
;

98 
ERROR_DEVICE_IN_USE
:  
EAGAIN
;

99 
ERROR_INVALID_AT_INTERRUPT_TIME
:  
EINTR
;

100 
ERROR_IO_DEVICE
:  
EIO
;

101 
ERROR_NOT_OWNER
:  
EPERM
;

102 
ERROR_END_OF_MEDIA
:  
ENOSPC
;

103 
ERROR_EOM_OVERFLOW
:  
ENOSPC
;

104 
ERROR_BEGINNING_OF_MEDIA
:  
ESPIPE
;

105 
ERROR_SETMARK_DETECTED
:  
ESPIPE
;

106 
ERROR_NO_DATA_DETECTED
:  
ENOSPC
;

107 
ERROR_POSSIBLE_DEADLOCK
:  
EDEADLOCK
;

108 
ERROR_CRC
:  
EIO
;

109 
ERROR_NEGATIVE_SEEK
:  
EINVAL
;

110 
ERROR_DISK_FULL
:  
ENOSPC
;

111 
ERROR_NOACCESS
:  
EFAULT
;

112 
ERROR_FILE_INVALID
:  
ENXIO
;

115  
wöîr
;

116 
	}
}

118 
	$GëNumLogiˇlPro˚ss‹s
()

120 
SYSTEM_LOGICAL_PROCESSOR_INFORMATION
 *
¥o˚ss‹_öfo
 = 
NULL
;

121 
DWORD
 
Àn
 = 0;

122 
DWORD
 
num_¥o˚ss‹s
 = 0;

123 
DWORD
 
îr‹
 = 0;

124 
DWORD
 
i
;

126 !
	`GëLogiˇlPro˚ss‹Inf‹m©i⁄
(
¥o˚ss‹_öfo
, &
Àn
)) {

127 
îr‹
 = 
	`GëLa°Eº‹
();

128 i‡(
îr‹
 =
ERROR_INSUFFICIENT_BUFFER
)

129 
¥o˚ss‹_öfo
 = 
	`mÆloc
(
Àn
);

131 
	`log_îr
("Eº‹: GëLogiˇlPro˚ss‹Inf‹m©i⁄ faûed: %d\n", 
îr‹
);

135 i‡(
¥o˚ss‹_öfo
 =
NULL
) {

136 
	`log_îr
("Error: failedÅoállocate memory for GetLogicalProcessorInformation");

141 
i
 = 0; i < 
Àn
 / (
SYSTEM_LOGICAL_PROCESSOR_INFORMATION
); i++)

143 i‡(
¥o˚ss‹_öfo
[
i
].
Rñ©i⁄shù
 =
Rñ©i⁄Pro˚ss‹C‹e
)

144 
num_¥o˚ss‹s
 +
	`hweight64
(
¥o˚ss‹_öfo
[
i
].
Pro˚ss‹Mask
);

147 
	`‰ì
(
¥o˚ss‹_öfo
);

148  
num_¥o˚ss‹s
;

149 
	}
}

151 
	$sysc⁄f
(
«me
)

153 
vÆ
 = -1;

154 
vÆ2
 = -1;

155 
SYSTEM_INFO
 
sysInfo
;

156 
MEMORYSTATUSEX
 
°©us
;

158 
«me
)

160 
_SC_NPROCESSORS_ONLN
:

161 
vÆ
 = 
	`GëNumLogiˇlPro˚ss‹s
();

162 i‡(
vÆ
 == -1)

163 
	`log_îr
("sysconf(_SC_NPROCESSORS_ONLN) failed\n");

167 
_SC_PAGESIZE
:

168 
	`GëSy°emInfo
(&
sysInfo
);

169 
vÆ
 = 
sysInfo
.
dwPageSize
;

172 
_SC_PHYS_PAGES
:

173 
°©us
.
dwLígth
 = (status);

174 
vÆ2
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

175 i‡(
	`GlobÆMem‹ySètusEx
(&
°©us
Ë&& 
vÆ2
 != -1)

176 
vÆ
 = 
°©us
.
uŒTŸÆPhys
 / 
vÆ2
;

178 
	`log_îr
("sysconf(_SC_PHYS_PAGES) failed\n");

181 
	`log_îr
("sysc⁄f(%dËi†nŸ im∂emíãd\n", 
«me
);

185  
vÆ
;

186 
	}
}

188 *
	gdl_îr‹
 = 
NULL
;

190 
	$dl˛o£
(*
h™dÀ
)

192  !
	`FªeLibøry
((
HMODULE
)
h™dÀ
);

193 
	}
}

195 *
	$dl›í
(c⁄° *
fûe
, 
mode
)

197 
HMODULE
 
hMod
;

199 
hMod
 = 
	`LﬂdLibøry
(
fûe
);

200 i‡(
hMod
 =
INVALID_HANDLE_VALUE
)

201 
dl_îr‹
 = (*)"LoadLibrary failed";

203 
dl_îr‹
 = 
NULL
;

205  
hMod
;

206 
	}
}

208 *
	$dlsym
(*
h™dÀ
, c⁄° *
«me
)

210 
FARPROC
 
‚På
;

212 
‚På
 = 
	`GëProcAddªss
((
HMODULE
)
h™dÀ
, 
«me
);

213 i‡(
‚På
 =
NULL
)

214 
dl_îr‹
 = (*)"GetProcAddress failed";

216 
dl_îr‹
 = 
NULL
;

218  
‚På
;

219 
	}
}

221 *
	$dÀº‹
()

223  
dl_îr‹
;

224 
	}
}

227 
	$Time_tToSy°emTime
(
time_t
 
dosTime
, 
SYSTEMTIME
 *
sy°emTime
)

229 
FILETIME
 
utcFT
;

230 
LONGLONG
 
j™1970
;

231 
SYSTEMTIME
 
ãmpSy°emTime
;

233 
j™1970
 = 
	`I¡32x32To64
(
dosTime
, 10000000) + 116444736000000000;

234 
utcFT
.
dwLowD©eTime
 = (
DWORD
)
j™1970
;

235 
utcFT
.
dwHighD©eTime
 = 
j™1970
 >> 32;

237 
	`FûeTimeToSy°emTime
((
FILETIME
*)&
utcFT
, &
ãmpSy°emTime
);

238 
	`Sy°emTimeToTzS≥cificLoˇlTime
(
NULL
, &
ãmpSy°emTime
, 
sy°emTime
);

239 
	}
}

241 * 
	$˘ime_r
(c⁄° 
time_t
 *
t
, *
buf
)

243 
SYSTEMTIME
 
sy°ime
;

244 c⁄° * c⁄° 
dayOfWìk
[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

245 c⁄° * c⁄° 
m⁄thOfYór
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

247 
	`Time_tToSy°emTime
(*
t
, &
sy°ime
);

249 
	`SåögCchPrötfA
(
buf
, 31, "%†%†%d %02d:%02d:%02d %04d\n", 
dayOfWìk
[
sy°ime
.
wDayOfWìk
 % 7], 
m⁄thOfYór
[(sy°ime.
wM⁄th
 - 1) % 12],

250 
sy°ime
.
wDay
, sy°ime.
wHour
, sy°ime.
wMöuã
, sy°ime.
wSec⁄d
, sy°ime.
wYór
);

251  
buf
;

252 
	}
}

254 
	$gëtimeofday
(
timevÆ
 *
ª°ri˘
 
ç
, *ª°ri˘ 
tzp
)

256 
FILETIME
 
fûeTime
;

257 
uöt64_t
 
unix_time
, 
wödows_time
;

258 c⁄° 
uöt64_t
 
MILLISECONDS_BETWEEN_1601_AND_1970
 = 11644473600000;

261 ()
tzp
;

268 
	`GëSy°emTimeAsFûeTime
(&
fûeTime
);

269 
wödows_time
 = ((
uöt64_t
)
fûeTime
.
dwHighD©eTime
 << 32Ë+ fûeTime.
dwLowD©eTime
;

271 
unix_time
 = (((
wödows_time
)/10000Ë- 
MILLISECONDS_BETWEEN_1601_AND_1970
);

273 
ç
->
tv_£c
 = 
unix_time
 / 1000;

274 
ç
->
tv_u£c
 = (
unix_time
 % 1000) * 1000;

276 
	}
}

278 
	$siga˘i⁄
(
sig
, c⁄° 
siga˘i⁄
 *
a˘
,

279 
siga˘i⁄
 *
ﬂ˘
)

281 
rc
 = 0;

282 (*
¥ev_h™dÀr
)();

284 
¥ev_h™dÀr
 = 
	`sig«l
(
sig
, 
a˘
->
ß_h™dÀr
);

285 i‡(
ﬂ˘
 !
NULL
)

286 
ﬂ˘
->
ß_h™dÀr
 = 
¥ev_h™dÀr
;

288 i‡(
¥ev_h™dÀr
 =
SIG_ERR
)

289 
rc
 = -1;

291  
rc
;

292 
	}
}

294 
	$l°©
(c⁄° * 
∑th
, 
°©
 * 
buf
)

296  
	`°©
(
∑th
, 
buf
);

297 
	}
}

299 *
	$mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
,

300 
fûdes
, 
off_t
 
off
)

302 
DWORD
 
vaPrŸ
 = 0;

303 
DWORD
 
m≠Ac˚ss
 = 0;

304 
DWORD
 
À∆ow
;

305 
DWORD
 
Ànhigh
;

306 
HANDLE
 
hM≠
;

307 * 
ÆlocAddr
 = 
NULL
;

309 i‡(
¥Ÿ
 & 
PROT_NONE
)

310 
vaPrŸ
 |
PAGE_NOACCESS
;

312 i‡((
¥Ÿ
 & 
PROT_READ
Ë&& !’rŸ & 
PROT_WRITE
)) {

313 
vaPrŸ
 |
PAGE_READONLY
;

314 
m≠Ac˚ss
 = 
FILE_MAP_READ
;

317 i‡(
¥Ÿ
 & 
PROT_WRITE
) {

318 
vaPrŸ
 |
PAGE_READWRITE
;

319 
m≠Ac˚ss
 |
FILE_MAP_WRITE
;

322 
À∆ow
 = 
Àn
 & 0xFFFF;

323 
Ànhigh
 = 
Àn
 >> 16;

326 i‡(
À∆ow
 == 0) {

327 
Ànhigh
 = 0;

330 i‡(
Êags
 & 
MAP_ANON
 || fœg†& 
MAP_ANONYMOUS
)

332 
ÆlocAddr
 = 
	`VútuÆAŒoc
(
addr
, 
Àn
, 
MEM_COMMIT
, 
vaPrŸ
);

333 i‡(
ÆlocAddr
 =
NULL
)

334 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

338 
hM≠
 = 
	`Cª©eFûeM≠pög
((
HANDLE
)
	`_gë_osfh™dÀ
(
fûdes
), 
NULL
, 
vaPrŸ
, 
Ànhigh
, 
À∆ow
, NULL);

340 i‡(
hM≠
 !
NULL
)

342 
ÆlocAddr
 = 
	`M≠VõwOfFûe
(
hM≠
, 
m≠Ac˚ss
, 
off
 >> 16, of‡& 0xFFFF, 
Àn
);

345 i‡(
hM≠
 =
NULL
 || 
ÆlocAddr
 == NULL)

346 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

350  
ÆlocAddr
;

351 
	}
}

353 
	$munm≠
(*
addr
, 
size_t
 
Àn
)

355 
BOOL
 
suc˚ss
;

360 
suc˚ss
 = 
	`Unm≠VõwOfFûe
(
addr
);

362 i‡(!
suc˚ss
)

364 
suc˚ss
 = 
	`VútuÆFªe
(
addr
, 0, 
MEM_RELEASE
);

367  !
suc˚ss
;

368 
	}
}

370 
	$msync
(*
addr
, 
size_t
 
Àn
, 
Êags
)

372  !
	`FlushVõwOfFûe
(
addr
, 
Àn
);

373 
	}
}

375 
	$f‹k
()

377 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

378 
î∫o
 = 
ENOSYS
;

380 
	}
}

382 
pid_t
 
	$£tsid
()

384 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

385 
î∫o
 = 
ENOSYS
;

387 
	}
}

389 
HANDLE
 
	glog_fûe
 = 
INVALID_HANDLE_VALUE
;

391 
	$›ílog
(c⁄° *
idít
, 
log›t
, 
Ácûôy
)

393 i‡(
log_fûe
 =
INVALID_HANDLE_VALUE
)

394 
log_fûe
 = 
	`Cª©eFûeA
("sy¶og.txt", 
GENERIC_WRITE
, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
, 
OPEN_ALWAYS
, 0, NULL);

395 
	}
}

397 
	$˛o£log
()

399 
	`Clo£H™dÀ
(
log_fûe
);

400 
log_fûe
 = 
INVALID_HANDLE_VALUE
;

401 
	}
}

403 
	$sy¶og
(
¥i‹ôy
, c⁄° *
mesßge
, ... )

405 
va_li°
 
v
;

406 
Àn
;

407 *
ouçut
;

408 
DWORD
 
byãs_wrôãn
;

410 i‡(
log_fûe
 =
INVALID_HANDLE_VALUE
) {

411 
log_fûe
 = 
	`Cª©eFûeA
("sy¶og.txt", 
GENERIC_WRITE
, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
, 
OPEN_ALWAYS
, 0, NULL);

414 i‡(
log_fûe
 =
INVALID_HANDLE_VALUE
) {

415 
	`log_îr
("syslog: failedÅo openÜog file\n");

419 
	`va_°¨t
(
v
, 
mesßge
);

420 
Àn
 = 
	`_vs˝rötf
(
mesßge
, 
v
);

421 
ouçut
 = 
	`mÆloc
(
Àn
 + ());

422 
	`v•rötf
(
ouçut
, 
mesßge
, 
v
);

423 
	`WrôeFûe
(
log_fûe
, 
ouçut
, 
Àn
, &
byãs_wrôãn
, 
NULL
);

424 
	`va_íd
(
v
);

425 
	`‰ì
(
ouçut
);

426 
	}
}

428 
	$kûl
(
pid_t
 
pid
, 
sig
)

430 
î∫o
 = 
ESRCH
;

432 
	}
}

438 
	$f˙é
(
fûdes
, 
cmd
, ...)

445 
va_li°
 
≠
;

446 
vÆ
, 
›t
, 
°©us
;

448 i‡(
cmd
 =
F_GETFL
)

450 i‡(
cmd
 !
F_SETFL
) {

451 
î∫o
 = 
EINVAL
;

455 
	`va_°¨t
(
≠
, 1);

457 
›t
 = 
	`va_¨g
(
≠
, );

458 i‡(
›t
 & 
O_NONBLOCK
)

459 
vÆ
 = 1;

461 
vÆ
 = 0;

463 
°©us
 = 
	`io˘lsockë
((
SOCKET
)
fûdes
, 
›t
, &
vÆ
);

465 i‡(
°©us
 =
SOCKET_ERROR
) {

466 
î∫o
 = 
EINVAL
;

467 
vÆ
 = -1;

470 
	`va_íd
(
≠
);

472  
vÆ
;

475 
	}
}

482 
	$˛ock_gëtime
(
˛ockid_t
 
˛ock_id
, 
time•ec
 *
ç
)

484 
rc
 = 0;

486 i‡(
˛ock_id
 =
CLOCK_MONOTONIC
)

488 
LARGE_INTEGER
 
‰eq
 = {{0,0}};

489 
LARGE_INTEGER
 
cou¡s
;

490 
uöt64_t
 
t
;

492 
	`QuîyPîf‹m™˚Cou¡î
(&
cou¡s
);

493 i‡(
‰eq
.
QuadP¨t
 == 0)

494 
	`QuîyPîf‹m™˚Fªquícy
(&
‰eq
);

496 
ç
->
tv_£c
 = 
cou¡s
.
QuadP¨t
 / 
‰eq
.QuadPart;

499 
t
 = 
ç
->
tv_£c
 * 
‰eq
.
QuadP¨t
;

500 
t
 = 
cou¡s
.
QuadP¨t
 -Å;

504 
t
 *= 1000000000;

505 
ç
->
tv_n£c
 = 
t
 / 
‰eq
.
QuadP¨t
;

507 i‡(
˛ock_id
 =
CLOCK_REALTIME
)

511 
timevÆ
 
tv
;

512 
	`gëtimeofday
(&
tv
, 
NULL
);

513 
ç
->
tv_£c
 = 
tv
.tv_sec;

514 
ç
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

516 
î∫o
 = 
EINVAL
;

517 
rc
 = -1;

520  
rc
;

521 
	}
}

523 
	$mlock
(c⁄° * 
addr
, 
size_t
 
Àn
)

525 
SIZE_T
 
mö
, 
max
;

526 
BOOL
 
suc˚ss
;

527 
HANDLE
 
¥o˚ss
 = 
	`GëCuºítPro˚ss
();

529 
suc˚ss
 = 
	`GëPro˚ssW‹kögSëSize
(
¥o˚ss
, &
mö
, &
max
);

530 i‡(!
suc˚ss
) {

531 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

535 
mö
 +
Àn
;

536 
max
 +
Àn
;

537 
suc˚ss
 = 
	`SëPro˚ssW‹kögSëSize
(
¥o˚ss
, 
mö
, 
max
);

538 i‡(!
suc˚ss
) {

539 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

543 
suc˚ss
 = 
	`VútuÆLock
((
LPVOID
)
addr
, 
Àn
);

544 i‡(!
suc˚ss
) {

545 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

550 
	}
}

552 
	$mu∆ock
(c⁄° * 
addr
, 
size_t
 
Àn
)

554 
BOOL
 
suc˚ss
 = 
	`VútuÆU∆ock
((
LPVOID
)
addr
, 
Àn
);

555 i‡(!
suc˚ss
) {

556 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

561 
	}
}

563 
pid_t
 
	$waôpid
(
pid_t
 
pid
, *
°©_loc
, 
›ti⁄s
)

565 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

566 
î∫o
 = 
ENOSYS
;

568 
	}
}

570 
	$u¶ìp
(
u£c⁄ds_t
 
u£c⁄ds
)

572 
	`SÀï
(
u£c⁄ds
 / 1000);

574 
	}
}

576 *
	$ba£«me
(*
∑th
)

578 
«me
[
MAX_PATH
];

579 
i
;

581 i‡(
∑th
 =
NULL
 || 
	`°æí
(path) == 0)

584 
i
 = 
	`°æí
(
∑th
) - 1;

586 
∑th
[
i
] != '\\' &&Öath[i] != '/' && i >= 0)

587 
i
--;

589 
«me
[
MAX_PATH
 - 1] = '\0';

590 
	`°∫˝y
(
«me
, 
∑th
 + 
i
 + 1, 
MAX_PATH
 - 1);

592  
«me
;

593 
	}
}

595 
	$fsync
(
fûdes
)

597 
HANDLE
 
hFûe
 = (HANDLE)
	`_gë_osfh™dÀ
(
fûdes
);

598 i‡(!
	`FlushFûeBuf„rs
(
hFûe
)) {

599 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

604 
	}
}

606 
	gnFûeM≠pögs
 = 0;

607 
HANDLE
 
	gfûeM≠pögs
[1024];

609 
	$shmgë
(
key_t
 
key
, 
size_t
 
size
, 
shmÊg
)

611 
m≠id
 = -1;

612 
uöt32_t
 
size_low
 = 
size
 & 0xFFFFFFFF;

613 
uöt32_t
 
size_high
 = ((
uöt64_t
)
size
) >> 32;

614 
HANDLE
 
hM≠pög
 = 
	`Cª©eFûeM≠pög
(
INVALID_HANDLE_VALUE
, 
NULL
, (
PAGE_EXECUTE_READWRITE
 | 
SEC_RESERVE
), 
size_high
, 
size_low
, NULL);

615 i‡(
hM≠pög
 !
NULL
) {

616 
fûeM≠pögs
[
nFûeM≠pögs
] = 
hM≠pög
;

617 
m≠id
 = 
nFûeM≠pögs
;

618 
nFûeM≠pögs
++;

620 
î∫o
 = 
ENOSYS
;

623  
m≠id
;

624 
	}
}

626 *
	$shm©
(
shmid
, c⁄° *
shmaddr
, 
shmÊg
)

628 * 
m≠Addr
;

629 
MEMORY_BASIC_INFORMATION
 
memInfo
;

630 
m≠Addr
 = 
	`M≠VõwOfFûe
(
fûeM≠pögs
[
shmid
], 
FILE_MAP_ALL_ACCESS
, 0, 0, 0);

631 i‡(
m≠Addr
 =
NULL
) {

632 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

636 i‡(
	`VútuÆQuîy
(
m≠Addr
, &
memInfo
, (memInfo)) == 0) {

637 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

641 
m≠Addr
 = 
	`VútuÆAŒoc
(m≠Addr, 
memInfo
.
Regi⁄Size
, 
MEM_COMMIT
, 
PAGE_READWRITE
);

642 i‡(
m≠Addr
 =
NULL
) {

643 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

647  
m≠Addr
;

648 
	}
}

650 
	$shmdt
(c⁄° *
shmaddr
)

652 i‡(!
	`Unm≠VõwOfFûe
(
shmaddr
)) {

653 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

658 
	}
}

660 
	$shm˘l
(
shmid
, 
cmd
, 
shmid_ds
 *
buf
)

662 i‡(
cmd
 =
IPC_RMID
) {

663 
fûeM≠pögs
[
shmid
] = 
INVALID_HANDLE_VALUE
;

666 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

668 
î∫o
 = 
ENOSYS
;

670 
	}
}

672 
	$£tuid
(
uid_t
 
uid
)

674 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

675 
î∫o
 = 
ENOSYS
;

677 
	}
}

679 
	$£tgid
(
gid_t
 
gid
)

681 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

682 
î∫o
 = 
ENOSYS
;

684 
	}
}

686 
	$ni˚
(
ö¸
)

688 
DWORD
 
¥io˛ass
 = 
NORMAL_PRIORITY_CLASS
;

690 i‡(
ö¸
 < -15)

691 
¥io˛ass
 = 
HIGH_PRIORITY_CLASS
;

692 i‡(
ö¸
 < 0)

693 
¥io˛ass
 = 
ABOVE_NORMAL_PRIORITY_CLASS
;

694 i‡(
ö¸
 > 15)

695 
¥io˛ass
 = 
IDLE_PRIORITY_CLASS
;

696 i‡(
ö¸
 > 0)

697 
¥io˛ass
 = 
BELOW_NORMAL_PRIORITY_CLASS
;

699 i‡(!
	`SëPri‹ôyCœss
(
	`GëCuºítPro˚ss
(), 
¥io˛ass
))

700 
	`log_îr
("fio: SetPriorityClass failed\n");

703 
	}
}

705 
	$gërußge
(
who
, 
rußge
 *
r_ußge
)

707 c⁄° 
uöt64_t
 
SECONDS_BETWEEN_1601_AND_1970
 = 11644473600;

708 
FILETIME
 
cTime
, 
eTime
, 
kTime
, 
uTime
;

709 
time_t
 
time
;

710 
HANDLE
 
h
;

712 
	`mem£t
(
r_ußge
, 0, (*r_usage));

714 i‡(
who
 =
RUSAGE_SELF
) {

715 
h
 = 
	`GëCuºítPro˚ss
();

716 
	`GëPro˚ssTimes
(
h
, &
cTime
, &
eTime
, &
kTime
, &
uTime
);

717 } i‡(
who
 =
RUSAGE_THREAD
) {

718 
h
 = 
	`GëCuºítThªad
();

719 
	`GëThªadTimes
(
h
, &
cTime
, &
eTime
, &
kTime
, &
uTime
);

721 
	`log_îr
("fio: gërußgê%d i†nŸ im∂emíãd\n", 
who
);

725 
time
 = ((
uöt64_t
)
uTime
.
dwHighD©eTime
 << 32Ë+ uTime.
dwLowD©eTime
;

728 
time
 = (
time_t
)((—ime)/10000000Ë- 
SECONDS_BETWEEN_1601_AND_1970
);

729 
r_ußge
->
ru_utime
.
tv_£c
 = 
time
;

731 
r_ußge
->
ru_utime
.
tv_u£c
 = 0;

732 
time
 = ((
uöt64_t
)
kTime
.
dwHighD©eTime
 << 32Ë+ kTime.
dwLowD©eTime
;

735 
time
 = (
time_t
)((—ime)/10000000Ë- 
SECONDS_BETWEEN_1601_AND_1970
);

736 
r_ußge
->
ru_°ime
.
tv_£c
 = 
time
;

737 
r_ußge
->
ru_°ime
.
tv_u£c
 = 0;

739 
	}
}

741 
	$posix_madvi£
(*
addr
, 
size_t
 
Àn
, 
advi˚
)

743  
ENOSYS
;

744 
	}
}

746 
	$fd©async
(
fûdes
)

748  
	`fsync
(
fûdes
);

749 
	}
}

751 
ssize_t
 
	$pwrôe
(
fûdes
, c⁄° *
buf
, 
size_t
 
nbyã
,

752 
off_t
 
off£t
)

754 
öt64_t
 
pos
 = 
	`_ãŒi64
(
fûdes
);

755 
ssize_t
 
Àn
 = 
	`_wrôe
(
fûdes
, 
buf
, 
nbyã
);

756 
	`_l£eki64
(
fûdes
, 
pos
, 
SEEK_SET
);

757  
Àn
;

758 
	}
}

760 
ssize_t
 
	$¥ód
(
fûdes
, *
buf
, 
size_t
 
nbyã
, 
off_t
 
off£t
)

762 
öt64_t
 
pos
 = 
	`_ãŒi64
(
fûdes
);

763 
ssize_t
 
Àn
 = 
	`ªad
(
fûdes
, 
buf
, 
nbyã
);

764 
	`_l£eki64
(
fûdes
, 
pos
, 
SEEK_SET
);

765  
Àn
;

766 
	}
}

768 
ssize_t
 
	$ªadv
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

770 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

771 
î∫o
 = 
ENOSYS
;

773 
	}
}

775 
ssize_t
 
	$wrôev
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

777 
i
;

778 
DWORD
 
byãs_wrôãn
 = 0;

779 
i
 = 0; i < 
iov˙t
; i++)

781 
Àn
 = 
	`£nd
((
SOCKET
)
fûdes
, 
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
, 0);

782 i‡(
Àn
 =
SOCKET_ERROR
)

784 
DWORD
 
îr
 = 
	`GëLa°Eº‹
();

785 
î∫o
 = 
	`wö_to_posix_îr‹
(
îr
);

786 
byãs_wrôãn
 = -1;

789 
byãs_wrôãn
 +
Àn
;

792  
byãs_wrôãn
;

793 
	}
}

795 
	$°πﬁl
(c⁄° *
ª°ri˘
 
°r
, **ª°ri˘ 
íd±r
,

796 
ba£
)

798  
	`_°πoi64
(
°r
, 
íd±r
, 
ba£
);

799 
	}
}

801 
	$pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
)

803 
timevÆ
 
tv
;

804 
timevÆ
 *
to
 = 
NULL
;

805 
fd_£t
 
ªadfds
, 
wrôefds
, 
ex˚±fds
;

806 
i
;

807 
rc
;

809 i‡(
timeout
 != -1) {

810 
to
 = &
tv
;

811 
to
->
tv_£c
 = 
timeout
 / 1000;

812 
to
->
tv_u£c
 = (
timeout
 % 1000) * 1000;

815 
	`FD_ZERO
(&
ªadfds
);

816 
	`FD_ZERO
(&
wrôefds
);

817 
	`FD_ZERO
(&
ex˚±fds
);

819 
i
 = 0; i < 
nfds
; i++)

821 i‡(
fds
[
i
].
fd
 < 0) {

822 
fds
[
i
].
ªvíts
 = 0;

826 i‡(
fds
[
i
].
evíts
 & 
POLLIN
)

827 
	`FD_SET
(
fds
[
i
].
fd
, &
ªadfds
);

829 i‡(
fds
[
i
].
evíts
 & 
POLLOUT
)

830 
	`FD_SET
(
fds
[
i
].
fd
, &
wrôefds
);

832 
	`FD_SET
(
fds
[
i
].
fd
, &
ex˚±fds
);

834 
rc
 = 
	`£À˘
(
nfds
, &
ªadfds
, &
wrôefds
, &
ex˚±fds
, 
to
);

836 i‡(
rc
 !
SOCKET_ERROR
) {

837 
i
 = 0; i < 
nfds
; i++)

839 i‡(
fds
[
i
].
fd
 < 0) {

843 i‡((
fds
[
i
].
evíts
 & 
POLLIN
Ë&& 
	`FD_ISSET
(fds[i].
fd
, &
ªadfds
))

844 
fds
[
i
].
ªvíts
 |
POLLIN
;

846 i‡((
fds
[
i
].
evíts
 & 
POLLOUT
Ë&& 
	`FD_ISSET
(fds[i].
fd
, &
wrôefds
))

847 
fds
[
i
].
ªvíts
 |
POLLOUT
;

849 i‡(
	`FD_ISSET
(
fds
[
i
].
fd
, &
ex˚±fds
))

850 
fds
[
i
].
ªvíts
 |
POLLHUP
;

853  
rc
;

854 
	}
}

856 
	$«no¶ìp
(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
)

858 
time•ec
 
tv
;

859 
DWORD
 
ms_ªmaöög
;

860 
DWORD
 
ms_tŸÆ
 = (
rqç
->
tv_£c
 * 1000Ë+ (rqç->
tv_n£c
 / 1000000.0);

862 i‡(
ms_tŸÆ
 == 0)

863 
ms_tŸÆ
 = 1;

865 
ms_ªmaöög
 = 
ms_tŸÆ
;

870 
	`fio_gëtime
(&
tv
, 
NULL
);

871 
	`SÀï
(
ms_ªmaöög
);

872 
ms_ªmaöög
 = 
ms_tŸÆ
 - 
	`mtime_sö˚_now
(&
tv
);

873 } 
ms_ªmaöög
 > 0 && ms_ªmaöög < 
ms_tŸÆ
);

876 i‡(
rmç
 !
NULL
) {

877 
rmç
->
tv_£c
 = 0;

878 
rmç
->
tv_n£c
 = 0;

882 
	}
}

884 
DIR
 *
	$›ídú
(c⁄° *
dú«me
)

886 
dúít_˘x
 *
dc
 = 
NULL
;

889 
HANDLE
 
fûe
 = 
	`Cª©eFûeA
(
dú«me
, 0, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
, 
OPEN_EXISTING
, 
FILE_FLAG_BACKUP_SEMANTICS
, NULL);

890 i‡(
fûe
 !
INVALID_HANDLE_VALUE
) {

891 
	`Clo£H™dÀ
(
fûe
);

892 
dc
 = (
dúít_˘x
*)
	`mÆloc
((dirent_ctx));

893 
	`SåögCchC›yA
(
dc
->
dú«me
, 
MAX_PATH
, dirname);

894 
dc
->
föd_h™dÀ
 = 
INVALID_HANDLE_VALUE
;

896 
DWORD
 
îr‹
 = 
	`GëLa°Eº‹
();

897 i‡(
îr‹
 =
ERROR_FILE_NOT_FOUND
)

898 
î∫o
 = 
ENOENT
;

900 i‡(
îr‹
 =
ERROR_PATH_NOT_FOUND
)

901 
î∫o
 = 
ENOTDIR
;

902 i‡(
îr‹
 =
ERROR_TOO_MANY_OPEN_FILES
)

903 
î∫o
 = 
ENFILE
;

904 i‡(
îr‹
 =
ERROR_ACCESS_DENIED
)

905 
î∫o
 = 
EACCES
;

907 
î∫o
 = 
îr‹
;

910  
dc
;

911 
	}
}

913 
	$˛o£dú
(
DIR
 *
dúp
)

915 i‡(
dúp
 !
NULL
 && dúp->
föd_h™dÀ
 !
INVALID_HANDLE_VALUE
)

916 
	`FödClo£
(
dúp
->
föd_h™dÀ
);

918 
	`‰ì
(
dúp
);

920 
	}
}

922 
dúít
 *
	$ªaddú
(
DIR
 *
dúp
)

924 
dúít
 
de
;

925 
WIN32_FIND_DATA
 
föd_d©a
;

927 i‡(
dúp
 =
NULL
)

928  
NULL
;

930 i‡(
dúp
->
föd_h™dÀ
 =
INVALID_HANDLE_VALUE
) {

931 
£¨ch_∑âîn
[
MAX_PATH
];

932 
	`SåögCchPrötfA
(
£¨ch_∑âîn
, 
MAX_PATH
-1, "%s\\*", 
dúp
->
dú«me
);

933 
dúp
->
föd_h™dÀ
 = 
	`FödFú°FûeA
(
£¨ch_∑âîn
, &
föd_d©a
);

934 i‡(
dúp
->
föd_h™dÀ
 =
INVALID_HANDLE_VALUE
)

935  
NULL
;

937 i‡(!
	`FödNextFûe
(
dúp
->
föd_h™dÀ
, &
föd_d©a
))

938  
NULL
;

941 
	`SåögCchC›yA
(
de
.
d_«me
, 
MAX_PATH
, 
föd_d©a
.
cFûeName
);

942 
de
.
d_öo
 = 0;

944  &
de
;

945 
	}
}

947 
uid_t
 
	$gëeuid
()

949 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

950 
î∫o
 = 
ENOSYS
;

952 
	}
}

954 
ö_addr_t
 
	$öë_√tw‹k
(c⁄° *
˝
)

956 
ö_addr_t
 
hbo
;

957 
ö_addr_t
 
nbo
 = 
	`öë_addr
(
˝
);

958 
hbo
 = ((
nbo
 & 0xFF) << 24) + ((nbo & 0xFF00) << 8) + ((nbo & 0xFF0000) >> 8) + ((nbo & 0xFF000000) >> 24);

959  
hbo
;

960 
	}
}

962 c⁄° * 
	$öë_¡›
(
af
, c⁄° *
ª°ri˘
 
§c
,

963 *
ª°ri˘
 
d°
, 
sockÀn_t
 
size
)

965 
INT
 
°©us
 = 
SOCKET_ERROR
;

966 
WSADATA
 
wsd
;

967 *
ªt
 = 
NULL
;

969 i‡(
af
 !
AF_INET
 &&á‡!
AF_INET6
) {

970 
î∫o
 = 
EAFNOSUPPORT
;

971  
NULL
;

974 
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wsd
);

976 i‡(
af
 =
AF_INET
) {

977 
sockaddr_ö
 
si
;

978 
DWORD
 
Àn
 = 
size
;

979 
	`mem£t
(&
si
, 0, (si));

980 
si
.
sö_Ámûy
 = 
af
;

981 
	`mem˝y
(&
si
.
sö_addr
, 
§c
, (si.sin_addr));

982 
°©us
 = 
	`WSAAddªssToSåög
((
sockaddr
*)&
si
, (si), 
NULL
, 
d°
, &
Àn
);

983 } i‡(
af
 =
AF_INET6
) {

984 
sockaddr_ö6
 
si6
;

985 
DWORD
 
Àn
 = 
size
;

986 
	`mem£t
(&
si6
, 0, (si6));

987 
si6
.
sö6_Ámûy
 = 
af
;

988 
	`mem˝y
(&
si6
.
sö6_addr
, 
§c
, (si6.sin6_addr));

989 
°©us
 = 
	`WSAAddªssToSåög
((
sockaddr
*)&
si6
, (si6), 
NULL
, 
d°
, &
Àn
);

992 i‡(
°©us
 !
SOCKET_ERROR
)

993 
ªt
 = 
d°
;

995 
î∫o
 = 
ENOSPC
;

997 
	`WSACÀ™up
();

999  
ªt
;

1000 
	}
}

1002 
	$öë_±⁄
(
af
, c⁄° *
ª°ri˘
 
§c
, *ª°ri˘ 
d°
)

1004 
INT
 
°©us
 = 
SOCKET_ERROR
;

1005 
WSADATA
 
wsd
;

1006 
ªt
 = 1;

1008 i‡(
af
 !
AF_INET
 &&á‡!
AF_INET6
) {

1009 
î∫o
 = 
EAFNOSUPPORT
;

1013 
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wsd
);

1015 i‡(
af
 =
AF_INET
) {

1016 
sockaddr_ö
 
si
;

1017 
INT
 
Àn
 = (
si
);

1018 
	`mem£t
(&
si
, 0, (si));

1019 
si
.
sö_Ámûy
 = 
af
;

1020 
°©us
 = 
	`WSASåögToAddªssA
((*)
§c
, 
af
, 
NULL
, (
sockaddr
*)&
si
, &
Àn
);

1021 i‡(
°©us
 !
SOCKET_ERROR
)

1022 
	`mem˝y
(
d°
, &
si
.
sö_addr
, (si.sin_addr));

1023 } i‡(
af
 =
AF_INET6
) {

1024 
sockaddr_ö6
 
si6
;

1025 
INT
 
Àn
 = (
si6
);

1026 
	`mem£t
(&
si6
, 0, (si6));

1027 
si6
.
sö6_Ámûy
 = 
af
;

1028 
°©us
 = 
	`WSASåögToAddªssA
((*)
§c
, 
af
, 
NULL
, (
sockaddr
*)&
si6
, &
Àn
);

1029 i‡(
°©us
 !
SOCKET_ERROR
)

1030 
	`mem˝y
(
d°
, &
si6
.
sö6_addr
, (si6.sin6_addr));

1033 i‡(
°©us
 =
SOCKET_ERROR
) {

1034 
î∫o
 = 
ENOSPC
;

1035 
ªt
 = 0;

1038 
	`WSACÀ™up
();

1040  
ªt
;

1041 
	}
}

	@/home/ysjin/Desktop/fio/fio/os/windows/posix.h

1 #i‚de‡
FIO_WINDOWS_POSIX_H


2 
	#FIO_WINDOWS_POSIX_H


	)

4 
off_t
 
	toff64_t
;

5 
	t˛ockid_t
;

7 
˛ock_gëtime
(
˛ockid_t
 
˛ock_id
, 
time•ec
 *
ç
);

8 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

9 
wö_to_posix_îr‹
(
DWORD
 
wöîr
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/arpa/inet.h

1 #i‚de‡
ARPA_INET_H


2 
	#ARPA_INET_H


	)

4 
	~<ws2t˝ù.h
>

5 
	~<öây≥s.h
>

7 
	tsockÀn_t
;

8 
	tö_addr_t
;

11 
	#EAI_SYSTEM
 
EAI_FAIL


	)

13 
ö_addr_t
 
öë_√tw‹k
(c⁄° *
˝
);

15 c⁄° *
öë_¡›
(
af
, c⁄° *
ª°ri˘
 
§c
,

16 *
ª°ri˘
 
d°
, 
sockÀn_t
 
size
);

17 
öë_±⁄
(
af
, c⁄° *
ª°ri˘
 
§c
, *ª°ri˘ 
d°
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/asm/types.h

1 #i‚de‡
ASM_TYPES_H


2 
	#ASM_TYPES_H


	)

4 
	t__u16
;

5 
	t__u32
;

6 
	t__u64
;

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/dirent.h

1 #i‚de‡
DIRENT_H


2 
	#DIRENT_H


	)

4 
	~<wösock2.h
>

6 
	sdúít


8 
öo_t
 
	md_öo
;

9 
	md_«me
[
MAX_PATH
];

12 
	sdúít_˘x


14 
HANDLE
 
	mföd_h™dÀ
;

15 
	mdú«me
[
MAX_PATH
];

18 
dúít_˘x
 
	tDIR
;

20 
DIR
 *
›ídú
(c⁄° *
dú«me
);

21 
dúít
 *
ªaddú
(
DIR
 *
dúp
);

22 
˛o£dú
(
DIR
 *
dúp
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/dlfcn.h

1 #i‚de‡
DLFCN_H


2 
	#DLFCN_H


	)

4 
	#RTLD_LAZY
 1

	)

6 *
dl›í
(c⁄° *
fûe
, 
mode
);

7 
dl˛o£
(*
h™dÀ
);

8 *
dlsym
(*
ª°ri˘
 
h™dÀ
, c⁄° *ª°ri˘ 
«me
);

9 *
dÀº‹
();

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/libgen.h

1 #i‚de‡
LIBGEN_H


2 
	#LIBGEN_H


	)

4 *
ba£«me
(*
∑th
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/netdb.h

1 #i‚de‡
NETDB_H


2 
	#NETDB_H


	)

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/netinet/in.h

1 #i‚de‡
NETINET_IN_H


2 
	#NETINET_IN_H


	)

4 
	~<öây≥s.h
>

5 
	~<sys/un.h
>

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/netinet/tcp.h

1 #i‚de‡
NETINET_TCP_H


2 
	#NETINET_TCP_H


	)

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/poll.h

1 #i‚de‡
POLL_H


2 
	#POLL_H


	)

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/semaphore.h

1 #i‚de‡
SEMAPHORE_H


2 
	#SEMAPHORE_H


	)

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/ioctl.h

1 #i‚de‡
IOCTL_H


2 
	#IOCTL_H


	)

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/ipc.h

1 #i‚de‡
SYS_IPC_H


2 
	#SYS_IPC_H


	)

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/mman.h

1 #i‚de‡
SYS_MMAN_H


2 
	#SYS_MMAN_H


	)

4 
	~<sys/ty≥s.h
>

6 
	#PROT_NONE
 0x1

	)

7 
	#PROT_READ
 0x2

	)

8 
	#PROT_WRITE
 0x4

	)

10 
	#MAP_ANON
 0x1

	)

11 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

12 
	#MAP_FIXED
 0x2

	)

13 
	#MAP_HASSEMAPHORE
 0x4

	)

14 
	#MAP_INHERIT
 0x8

	)

15 
	#MAP_NOCORE
 0x10

	)

16 
	#MAP_NOSYNC
 0x20

	)

17 
	#MAP_PREFAULT_READ
 0x40

	)

18 
	#MAP_PRIVATE
 0x80

	)

19 
	#MAP_SHARED
 0x100

	)

20 
	#MAP_STACK
 0x200

	)

22 
	#MAP_FAILED
 
NULL


	)

24 
	#MS_ASYNC
 0x1

	)

25 
	#MS_SYNC
 0x2

	)

26 
	#MS_INVALIDATE
 0x3

	)

28 
posix_madvi£
(*
addr
, 
size_t
 
Àn
, 
advi˚
);

29 *
mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
,

30 
fûdes
, 
off_t
 
off
);

31 
munm≠
(*
addr
, 
size_t
 
Àn
);

32 
msync
(*
addr
, 
size_t
 
Àn
, 
Êags
);

33 
mu∆ock
(c⁄° * 
addr
, 
size_t
 
Àn
);

34 
mlock
(c⁄° *
addr
, 
size_t
 
Àn
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/poll.h

1 #i‚de‡
SYS_POLL_H


2 
	#SYS_POLL_H


	)

4 
	tnfds_t
;

6 
	spﬁlfd


8 
	mfd
;

9 
	mevíts
;

10 
	mªvíts
;

13 
pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/resource.h

1 #i‚de‡
SYS_RESOURCE_H


2 
	#SYS_RESOURCE_H


	)

4 
	#RUSAGE_SELF
 0

	)

5 
	#RUSAGE_THREAD
 1

	)

7 
	srußge


9 
timevÆ
 
	mru_utime
;

10 
timevÆ
 
	mru_°ime
;

11 
	mru_nvcsw
;

12 
	mru_möÊt
;

13 
	mru_majÊt
;

14 
	mru_nivcsw
;

17 
gërußge
(
who
, 
rußge
 *
r_ußge
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/shm.h

1 #i‚de‡
SYS_SHM_H


2 
	#SYS_SHM_H


	)

4 
	#IPC_RMID
 0x1

	)

5 
	#IPC_CREAT
 0x2

	)

6 
	#IPC_PRIVATE
 0x4

	)

8 
	tuid_t
;

9 
	tgid_t
;

11 
	tshm©t_t
;

12 
	tkey_t
;

14 
	sùc_≥rm


16 
uid_t
 
	muid
;

17 
gid_t
 
	mgid
;

18 
uid_t
 
	mcuid
;

19 
gid_t
 
	mcgid
;

20 
mode_t
 
	mmode
;

24 
	sshmid_ds


26 
ùc_≥rm
 
	mshm_≥rm
;

27 
size_t
 
	mshm_£gsz
;

28 
pid_t
 
	mshm_Õid
;

29 
pid_t
 
	mshm_˝id
;

30 
shm©t_t
 
	mshm_«âch
;

31 
time_t
 
	mshm_©ime
;

32 
time_t
 
	mshm_dtime
;

33 
time_t
 
	mshm_˘ime
;

36 
shm˘l
(
shmid
, 
cmd
, 
shmid_ds
 *
buf
);

37 
shmgë
(
key_t
 
key
, 
size_t
 
size
, 
shmÊg
);

38 *
shm©
(
shmid
, c⁄° *
shmaddr
, 
shmÊg
);

39 
shmdt
(c⁄° *
shmaddr
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/socket.h

1 #i‚de‡
SYS_SOCKET_H


2 
	#SYS_SOCKET_H


	)

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/uio.h

1 #i‚de‡
SYS_UIO_H


2 
	#SYS_UIO_H


	)

4 
	~<öây≥s.h
>

5 
	~<uni°d.h
>

7 
	siovec


9 *
	miov_ba£
;

10 
size_t
 
	miov_Àn
;

13 
ssize_t
 
ªadv
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

14 
ssize_t
 
wrôev
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/un.h

1 #i‚de‡
SYS_UN_H


2 
	#SYS_UN_H


	)

4 
	tß_Ámûy_t
;

5 
	tö_p‹t_t
;

7 
	ssockaddr_un


9 
ß_Ámûy_t
 
	msun_Ámûy
;

10 
	msun_∑th
[260];

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/wait.h

1 #i‚de‡
SYS_WAIT_H


2 
	#SYS_WAIT_H


	)

4 
	#WIFSIGNALED
(
a
Ë0

	)

5 
	#WIFEXITED
(
a
Ë0

	)

6 
	#WTERMSIG
(
a
Ë0

	)

7 
	#WEXITSTATUS
(
a
Ë0

	)

8 
	#WNOHANG
 1

	)

10 
pid_t
 
waôpid
’id_t, *
°©_loc
, 
›ti⁄s
);

	@/home/ysjin/Desktop/fio/fio/os/windows/posix/include/syslog.h

1 #i‚de‡
SYSLOG_H


2 
	#SYSLOG_H


	)

4 
sy¶og
();

6 
	#LOG_INFO
 0x1

	)

7 
	#LOG_ERROR
 0x2

	)

8 
	#LOG_WARN
 0x4

	)

10 
	#LOG_NDELAY
 0x1

	)

11 
	#LOG_NOWAIT
 0x2

	)

12 
	#LOG_PID
 0x4

	)

13 
	#LOG_USER
 0x8

	)

15 
˛o£log
();

16 
›ílog
(c⁄° *
idít
, 
log›t
, 
Ácûôy
);

	@/home/ysjin/Desktop/fio/fio/oslib/getopt.h

1 #ifde‡
CONFIG_GETOPT_LONG_ONLY


3 
	~<gë›t.h
>

7 #i‚de‡
_GETOPT_H


8 
	#_GETOPT_H


	)

10 
	s›ti⁄
 {

11 c⁄° *
	m«me
;

12 
	mhas_¨g
;

13 *
	mÊag
;

14 
	mvÆ
;

18 
	mno_¨gumít
 = 0,

19 
	mªquúed_¨gumít
 = 1,

20 
	m›ti⁄Æ_¨gumít
 = 2,

23 
gë›t_l⁄g_⁄ly
(, *c⁄° *, c⁄° *, c⁄° 
›ti⁄
 *, *);

	@/home/ysjin/Desktop/fio/fio/oslib/getopt_long.c

13 
	~<°döt.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

17 
	~"gë›t.h
"

19 *
	g›èrg
 = 
NULL
;

20 
	g›töd
 = 0, 
	g›ãº
 = 0, 
	g›t›t
 = 0;

22 
	sgë›t_¥iv©e_°©e
 {

23 c⁄° *
	m›çå
;

24 c⁄° *
	mœ°_›t°rög
;

25 *c⁄° *
	mœ°_¨gv
;

26 } 
	gpvt
;

28 
ölöe
 c⁄° *
	$›ti⁄_m©ches
(c⁄° *
¨g_°r
,

29 c⁄° *
›t_«me
, 
sm©ch
)

31 *
¨g_°r
 != '\0' && *arg_str != '=') {

32 i‡(*
¨g_°r
++ !*
›t_«me
++)

33  
NULL
;

36 i‡(*
›t_«me
 && !
sm©ch
)

37  
NULL
;

39  
¨g_°r
;

40 
	}
}

42 
	$gë›t_l⁄g_⁄ly
(
¨gc
, *c⁄° *
¨gv
, c⁄° *
›t°rög
,

43 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄gödex
)

45 c⁄° *
ˇrg
;

46 c⁄° *
o•å
;

47 
›t
;

49 
›èrg
 = 
NULL
;

58 i‡(
›t°rög
 !
pvt
.
œ°_›t°rög
 || 
¨gv
 !pvt.
œ°_¨gv
 ||

59 
›töd
 < 1 || o±öd > 
¨gc
) {

61 
pvt
.
œ°_›t°rög
 = 
›t°rög
;

62 
pvt
.
œ°_¨gv
 = 
¨gv
;

63 
›töd
 = 1;

64 
pvt
.
›çå
 = 
NULL
;

67 
ˇrg
 = 
¨gv
[
›töd
];

71 i‡(!
ˇrg
 || carg[0] != '-' || !carg[1])

74 i‡(
ˇrg
[1] == '-') {

75 c⁄° 
›ti⁄
 *
lo
;

76 c⁄° *
›t_íd
 = 
NULL
;

78 
›töd
++;

81 i‡(!
ˇrg
[2]) {

86 
lo
 = 
l⁄g›ts
;Üo->
«me
;Üo++) {

87 
›t_íd
 = 
	`›ti⁄_m©ches
(
ˇrg
+2, 
lo
->
«me
, 0);

88 i‡(
›t_íd
)

97 i‡(!
›t_íd
) {

98 c⁄° 
›ti⁄
 *
lo_m©ch
 = 
NULL
;

100 
lo
 = 
l⁄g›ts
;Üo->
«me
;Üo++) {

101 c⁄° *
ªt
;

103 
ªt
 = 
	`›ti⁄_m©ches
(
ˇrg
+2, 
lo
->
«me
, 1);

104 i‡(!
ªt
)

106 i‡(!
›t_íd
) {

107 
›t_íd
 = 
ªt
;

108 
lo_m©ch
 = 
lo
;

110 
›t_íd
 = 
NULL
;

114 i‡(!
›t_íd
)

116 
lo
 = 
lo_m©ch
;

119 i‡(
l⁄gödex
)

120 *
l⁄gödex
 = 
lo
-
l⁄g›ts
;

122 i‡(*
›t_íd
 == '=') {

123 i‡(
lo
->
has_¨g
)

124 
›èrg
 = (*)
›t_íd
+1;

127 } i‡(
lo
->
has_¨g
 == 1) {

128 i‡(!(
›èrg
 = 
¨gv
[
›töd
]))

130 
›töd
++;

133 i‡(
lo
->
Êag
) {

134 *
lo
->
Êag
 =Üo->
vÆ
;

137  
lo
->
vÆ
;

141 i‡((
uöçå_t
Ë(
pvt
.
›çå
 - 
ˇrg
Ë> (uöçå_tË
	`°æí
(carg)) {

143 
pvt
.
›çå
 = 
ˇrg
 + 1;

146 
›t
 = *
pvt
.
›çå
++;

148 i‡(
›t
 !':' && (
o•å
 = 
	`°rchr
(
›t°rög
, opt))) {

149 i‡(
o•å
[1] == ':') {

150 i‡(*
pvt
.
›çå
) {

153 
›èrg
 = (*)
pvt
.
›çå
;

154 
›töd
++;

158 i‡(
o•å
[2] == ':') {

159 i‡(
¨gv
[
›töd
 + 1]) {

160 
›èrg
 = (*)
¨gv
[
›töd
+1];

161 
›töd
 += 2;

163 
›èrg
 = 
NULL
;

164 
›töd
++;

166  
›t
;

167 } i‡(
¨gv
[
›töd
 + 1]) {

168 
›èrg
 = (*)
¨gv
[
›töd
+1];

169 
›töd
 += 2;

172 
›töd
++;

173  (
›t°rög
[0] == ':')

177  
›t
;

182 i‡(!*
pvt
.
›çå
)

183 
›töd
++;

184  
›t
;

188 
›t›t
 = 
›t
;

189 i‡(!*
pvt
.
›çå
)

190 
›töd
++;

193 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/inet_aton.c

1 
	~"öë_©⁄.h
"

3 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
öp
)

5  
	`öë_±⁄
(
AF_INET
, 
˝
, 
öp
);

6 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/inet_aton.h

1 #i‚de‡
FIO_INET_ATON_LIB_H


2 
	#FIO_INET_ATON_LIB_H


	)

4 
	~<¨∑/öë.h
>

6 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
öp
);

	@/home/ysjin/Desktop/fio/fio/oslib/libmtd.c

26 
	~<limôs.h
>

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<î∫o.h
>

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<dúít.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/io˘l.h
>

36 
	~<öây≥s.h
>

38 
	~<mtd/mtd-u£r.h
>

39 
	~"libmtd.h
"

41 
	~"libmtd_öt.h
"

42 
	~"libmtd_comm⁄.h
"

52 *
	$mk∑th
(c⁄° *
∑th
, c⁄° *
«me
)

54 *
n
;

55 
size_t
 
Àn1
 = 
	`°æí
(
∑th
);

56 
size_t
 
Àn2
 = 
	`°æí
(
«me
);

58 
n
 = 
	`xmÆloc
(
Àn1
 + 
Àn2
 + 6);

60 
	`mem˝y
(
n
, 
∑th
, 
Àn1
);

61 i‡(
n
[
Àn1
 - 1] != '/')

62 
n
[
Àn1
++] = '/';

64 
	`mem˝y
(
n
 + 
Àn1
, 
«me
, 
Àn2
 + 1);

65  
n
;

66 
	}
}

78 
	$ªad_d©a
(c⁄° *
fûe
, *
buf
, 
buf_Àn
)

80 
fd
, 
rd
, 
tmp
, 
tmp1
;

82 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
 | 
O_CLOEXEC
);

83 i‡(
fd
 == -1)

86 
rd
 = 
	`ªad
(
fd
, 
buf
, 
buf_Àn
);

87 i‡(
rd
 == -1) {

88 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
fûe
);

89 
out_îr‹
;

92 i‡(
rd
 =
buf_Àn
) {

93 
	`îrmsg
("c⁄ã¡†o‡\"%s\" i†toÿl⁄g", 
fûe
);

94 
î∫o
 = 
EINVAL
;

95 
out_îr‹
;

98 ((*)
buf
)[
rd
] = '\0';

101 
tmp1
 = 
	`ªad
(
fd
, &
tmp
, 1);

102 i‡(
tmp1
 == 1) {

103 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
fûe
);

104 
out_îr‹
;

106 i‡(
tmp1
) {

107 
	`îrmsg
("file \"%s\" containsÅoo much data (> %d bytes)",

108 
fûe
, 
buf_Àn
);

109 
î∫o
 = 
EINVAL
;

110 
out_îr‹
;

113 i‡(
	`˛o£
(
fd
)) {

114 
	`sys_îrmsg
("˛o£ faûed o¿\"%s\"", 
fûe
);

118  
rd
;

120 
out_îr‹
:

121 
	`˛o£
(
fd
);

123 
	}
}

133 
	$ªad_maj‹
(c⁄° *
fûe
, *
maj‹
, *
mö‹
)

135 
ªt
;

136 
buf
[50];

138 
ªt
 = 
	`ªad_d©a
(
fûe
, 
buf
, 50);

139 i‡(
ªt
 < 0)

140  
ªt
;

142 
ªt
 = 
	`ssˇnf
(
buf
, "%d:%d\n", 
maj‹
, 
mö‹
);

143 i‡(
ªt
 != 2) {

144 
î∫o
 = 
EINVAL
;

145  
	`îrmsg
("\"%s\" d€†nŸ havêmaj‹:mö‹ f‹m©", 
fûe
);

148 i‡(*
maj‹
 < 0 || *
mö‹
 < 0) {

149 
î∫o
 = 
EINVAL
;

150  
	`îrmsg
("bad major:minor %d:%d in \"%s\"",

151 *
maj‹
, *
mö‹
, 
fûe
);

155 
	}
}

166 
	$dev_gë_maj‹
(
libmtd
 *
lib
, 
mtd_num
, *
maj‹
, *
mö‹
)

168 
fûe
[
	`°æí
(
lib
->
mtd_dev
) + 50];

170 
	`•rötf
(
fûe
, 
lib
->
mtd_dev
, 
mtd_num
);

171  
	`ªad_maj‹
(
fûe
, 
maj‹
, 
mö‹
);

172 
	}
}

184 
	$dev_ªad_d©a
(c⁄° *
∑â
, 
mtd_num
, *
buf
, 
buf_Àn
)

186 
fûe
[
	`°æí
(
∑â
) + 100];

188 
	`•rötf
(
fûe
, 
∑â
, 
mtd_num
);

189  
	`ªad_d©a
(
fûe
, 
buf
, 
buf_Àn
);

190 
	}
}

201 
	$ªad_hex_Œ
(c⁄° *
fûe
, *
vÆue
)

203 
fd
, 
rd
;

204 
buf
[50];

206 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
 | 
O_CLOEXEC
);

207 i‡(
fd
 == -1)

210 
rd
 = 
	`ªad
(
fd
, 
buf
, (buf));

211 i‡(
rd
 == -1) {

212 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
fûe
);

213 
out_îr‹
;

215 i‡(
rd
 =(
buf
)) {

216 
	`îrmsg
("c⁄ã¡†o‡\"%s\" i†toÿl⁄g", 
fûe
);

217 
î∫o
 = 
EINVAL
;

218 
out_îr‹
;

220 
buf
[
rd
] = '\0';

222 i‡(
	`ssˇnf
(
buf
, "%Œx\n", 
vÆue
) != 1) {

223 
	`îrmsg
("ˇ¬ŸÑód i¡egî from \"%s\"\n", 
fûe
);

224 
î∫o
 = 
EINVAL
;

225 
out_îr‹
;

228 i‡(*
vÆue
 < 0) {

229 
	`îrmsg
("√g©ivêvÆuê%Œd i¿\"%s\"", *
vÆue
, 
fûe
);

230 
î∫o
 = 
EINVAL
;

231 
out_îr‹
;

234 i‡(
	`˛o£
(
fd
))

235  
	`sys_îrmsg
("˛o£ faûed o¿\"%s\"", 
fûe
);

239 
out_îr‹
:

240 
	`˛o£
(
fd
);

242 
	}
}

253 
	$ªad_pos_Œ
(c⁄° *
fûe
, *
vÆue
)

255 
fd
, 
rd
;

256 
buf
[50];

258 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
 | 
O_CLOEXEC
);

259 i‡(
fd
 == -1)

262 
rd
 = 
	`ªad
(
fd
, 
buf
, 50);

263 i‡(
rd
 == -1) {

264 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
fûe
);

265 
out_îr‹
;

267 i‡(
rd
 == 50) {

268 
	`îrmsg
("c⁄ã¡†o‡\"%s\" i†toÿl⁄g", 
fûe
);

269 
î∫o
 = 
EINVAL
;

270 
out_îr‹
;

273 i‡(
	`ssˇnf
(
buf
, "%Œd\n", 
vÆue
) != 1) {

274 
	`îrmsg
("ˇ¬ŸÑód i¡egî from \"%s\"\n", 
fûe
);

275 
î∫o
 = 
EINVAL
;

276 
out_îr‹
;

279 i‡(*
vÆue
 < 0) {

280 
	`îrmsg
("√g©ivêvÆuê%Œd i¿\"%s\"", *
vÆue
, 
fûe
);

281 
î∫o
 = 
EINVAL
;

282 
out_îr‹
;

285 i‡(
	`˛o£
(
fd
))

286  
	`sys_îrmsg
("˛o£ faûed o¿\"%s\"", 
fûe
);

290 
out_îr‹
:

291 
	`˛o£
(
fd
);

293 
	}
}

303 
	$ªad_hex_öt
(c⁄° *
fûe
, *
vÆue
)

305 
ªs
;

307 i‡(
	`ªad_hex_Œ
(
fûe
, &
ªs
))

311 i‡(
ªs
 > 
INT_MAX
 ||Ñe†< 
INT_MIN
) {

312 
	`îrmsg
("value %lldÑead from file \"%s\" is out ofÑange",

313 
ªs
, 
fûe
);

314 
î∫o
 = 
EINVAL
;

318 *
vÆue
 = 
ªs
;

320 
	}
}

330 
	$ªad_pos_öt
(c⁄° *
fûe
, *
vÆue
)

332 
ªs
;

334 i‡(
	`ªad_pos_Œ
(
fûe
, &
ªs
))

338 i‡(
ªs
 > 
INT_MAX
) {

339 
	`îrmsg
("value %lldÑead from file \"%s\" is out ofÑange",

340 
ªs
, 
fûe
);

341 
î∫o
 = 
EINVAL
;

345 *
vÆue
 = 
ªs
;

347 
	}
}

357 
	$dev_ªad_hex_öt
(c⁄° *
∑â
, 
mtd_num
, *
vÆue
)

359 
fûe
[
	`°æí
(
∑â
) + 50];

361 
	`•rötf
(
fûe
, 
∑â
, 
mtd_num
);

362  
	`ªad_hex_öt
(
fûe
, 
vÆue
);

363 
	}
}

373 
	$dev_ªad_pos_öt
(c⁄° *
∑â
, 
mtd_num
, *
vÆue
)

375 
fûe
[
	`°æí
(
∑â
) + 50];

377 
	`•rötf
(
fûe
, 
∑â
, 
mtd_num
);

378  
	`ªad_pos_öt
(
fûe
, 
vÆue
);

379 
	}
}

389 
	$dev_ªad_pos_Œ
(c⁄° *
∑â
, 
mtd_num
, *
vÆue
)

391 
fûe
[
	`°æí
(
∑â
) + 50];

393 
	`•rötf
(
fûe
, 
∑â
, 
mtd_num
);

394  
	`ªad_pos_Œ
(
fûe
, 
vÆue
);

395 
	}
}

404 
	$ty≥_°r2öt
(c⁄° *
°r
)

406 i‡(!
	`°rcmp
(
°r
, "nand"))

407  
MTD_NANDFLASH
;

408 i‡(!
	`°rcmp
(
°r
, "mlc-nand"))

409  
MTD_MLCNANDFLASH
;

410 i‡(!
	`°rcmp
(
°r
, "nor"))

411  
MTD_NORFLASH
;

412 i‡(!
	`°rcmp
(
°r
, "rom"))

413  
MTD_ROM
;

414 i‡(!
	`°rcmp
(
°r
, "absent"))

415  
MTD_ABSENT
;

416 i‡(!
	`°rcmp
(
°r
, "dataflash"))

417  
MTD_DATAFLASH
;

418 i‡(!
	`°rcmp
(
°r
, "ram"))

419  
MTD_RAM
;

420 i‡(!
	`°rcmp
(
°r
, "ubi"))

421  
MTD_UBIVOLUME
;

423 
	}
}

433 
	$dev_node2num
(
libmtd
 *
lib
, c⁄° *
node
, *
mtd_num
)

435 
°©
 
°
;

436 
i
, 
mjr
, 
mƒ
;

437 
mtd_öfo
 
öfo
;

439 i‡(
	`°©
(
node
, &
°
))

440  
	`sys_îrmsg
("ˇ¬Ÿ gë inf‹m©i⁄ábouà\"%s\"", 
node
);

442 i‡(!
	`S_ISCHR
(
°
.
°_mode
)) {

443 
	`îrmsg
("\"%s\" i†nŸá ch¨a˘î devi˚", 
node
);

444 
î∫o
 = 
EINVAL
;

448 
mjr
 = 
	`maj‹
(
°
.
°_rdev
);

449 
mƒ
 = 
	`mö‹
(
°
.
°_rdev
);

451 i‡(
	`mtd_gë_öfo
((
libmtd_t
 *)
lib
, &
öfo
))

454 
i
 = 
öfo
.
lowe°_mtd_num
; i <öfo.
highe°_mtd_num
; i++) {

455 
mjr1
, 
mƒ1
, 
ªt
;

457 
ªt
 = 
	`dev_gë_maj‹
(
lib
, 
i
, &
mjr1
, &
mƒ1
);

458 i‡(
ªt
) {

459 i‡(
î∫o
 =
ENOENT
)

461 i‡(!
î∫o
)

466 i‡(
mjr1
 =
mjr
 && 
mƒ1
 =
mƒ
) {

467 
î∫o
 = 0;

468 *
mtd_num
 = 
i
;

473 
î∫o
 = 
ENODEV
;

475 
	}
}

493 
	$sysfs_is_suµ‹ãd
(
libmtd
 *
lib
)

495 
fd
, 
num
 = -1;

496 
DIR
 *
sysfs_mtd
;

497 
fûe
[
	`°æí
(
lib
->
mtd_«me
) + 10];

499 
sysfs_mtd
 = 
	`›ídú
(
lib
->sysfs_mtd);

500 i‡(!
sysfs_mtd
) {

501 i‡(
î∫o
 =
ENOENT
) {

502 
î∫o
 = 0;

505  
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
lib
->
sysfs_mtd
);

513 
ªt
, 
mtd_num
;

514 
tmp_buf
[256];

515 
dúít
 *dirent;

517 
dúít
 = 
	`ªaddú
(
sysfs_mtd
);

518 i‡(!
dúít
)

521 i‡(
	`°æí
(
dúít
->
d_«me
) >= 255) {

522 
	`îrmsg
("invalidÉntry in %s: \"%s\"",

523 
lib
->
sysfs_mtd
, 
dúít
->
d_«me
);

524 
î∫o
 = 
EINVAL
;

525 
	`˛o£dú
(
sysfs_mtd
);

529 
ªt
 = 
	`ssˇnf
(
dúít
->
d_«me
, 
MTD_NAME_PATT
"%s",

530 &
mtd_num
, 
tmp_buf
);

531 i‡(
ªt
 == 1) {

532 
num
 = 
mtd_num
;

537 i‡(
	`˛o£dú
(
sysfs_mtd
))

538  
	`sys_îrmsg
("˛o£dú faûed o¿\"%s\"", 
lib
->
sysfs_mtd
);

540 i‡(
num
 == -1)

544 
	`•rötf
(
fûe
, 
lib
->
mtd_«me
, 
num
);

545 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
 | 
O_CLOEXEC
);

546 i‡(
fd
 == -1)

549 i‡(
	`˛o£
(
fd
)) {

550 
	`sys_îrmsg
("˛o£ faûed o¿\"%s\"", 
fûe
);

555 
	}
}

557 
libmtd_t
 
	$libmtd_›í
()

559 
libmtd
 *
lib
;

561 
lib
 = 
	`xzÆloc
((*lib));

563 
lib
->
offs64_io˘ls
 = 
OFFS64_IOCTLS_UNKNOWN
;

565 
lib
->
sysfs_mtd
 = 
	`mk∑th
("/sys", 
SYSFS_MTD
);

566 i‡(!
lib
->
sysfs_mtd
)

567 
out_îr‹
;

569 
lib
->
mtd
 = 
	`mk∑th
÷ib->
sysfs_mtd
, 
MTD_NAME_PATT
);

570 i‡(!
lib
->
mtd
)

571 
out_îr‹
;

573 
lib
->
mtd_«me
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_NAME
);

574 i‡(!
lib
->
mtd_«me
)

575 
out_îr‹
;

577 i‡(!
	`sysfs_is_suµ‹ãd
(
lib
)) {

578 
	`‰ì
(
lib
->
mtd
);

579 
	`‰ì
(
lib
->
sysfs_mtd
);

580 
	`‰ì
(
lib
->
mtd_«me
);

581 
lib
->
mtd_«me
 =Üib->
mtd
 =Üib->
sysfs_mtd
 = 
NULL
;

582  
lib
;

585 
lib
->
mtd_dev
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_DEV
);

586 i‡(!
lib
->
mtd_dev
)

587 
out_îr‹
;

589 
lib
->
mtd_ty≥
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_TYPE
);

590 i‡(!
lib
->
mtd_ty≥
)

591 
out_îr‹
;

593 
lib
->
mtd_eb_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_EB_SIZE
);

594 i‡(!
lib
->
mtd_eb_size
)

595 
out_îr‹
;

597 
lib
->
mtd_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_SIZE
);

598 i‡(!
lib
->
mtd_size
)

599 
out_îr‹
;

601 
lib
->
mtd_mö_io_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_MIN_IO_SIZE
);

602 i‡(!
lib
->
mtd_mö_io_size
)

603 
out_îr‹
;

605 
lib
->
mtd_sub∑ge_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_SUBPAGE_SIZE
);

606 i‡(!
lib
->
mtd_sub∑ge_size
)

607 
out_îr‹
;

609 
lib
->
mtd_oob_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_OOB_SIZE
);

610 i‡(!
lib
->
mtd_oob_size
)

611 
out_îr‹
;

613 
lib
->
mtd_ªgi⁄_˙t
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_REGION_CNT
);

614 i‡(!
lib
->
mtd_ªgi⁄_˙t
)

615 
out_îr‹
;

617 
lib
->
mtd_Êags
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_FLAGS
);

618 i‡(!
lib
->
mtd_Êags
)

619 
out_îr‹
;

621 
lib
->
sysfs_suµ‹ãd
 = 1;

622  
lib
;

624 
out_îr‹
:

625 
	`libmtd_˛o£
((
libmtd_t
)
lib
);

626  
NULL
;

627 
	}
}

629 
	$libmtd_˛o£
(
libmtd_t
 
desc
)

631 
libmtd
 *
lib
 = (libmtd *)
desc
;

633 
	`‰ì
(
lib
->
mtd_Êags
);

634 
	`‰ì
(
lib
->
mtd_ªgi⁄_˙t
);

635 
	`‰ì
(
lib
->
mtd_oob_size
);

636 
	`‰ì
(
lib
->
mtd_sub∑ge_size
);

637 
	`‰ì
(
lib
->
mtd_mö_io_size
);

638 
	`‰ì
(
lib
->
mtd_size
);

639 
	`‰ì
(
lib
->
mtd_eb_size
);

640 
	`‰ì
(
lib
->
mtd_ty≥
);

641 
	`‰ì
(
lib
->
mtd_dev
);

642 
	`‰ì
(
lib
->
mtd_«me
);

643 
	`‰ì
(
lib
->
mtd
);

644 
	`‰ì
(
lib
->
sysfs_mtd
);

645 
	`‰ì
(
lib
);

646 
	}
}

648 
	$mtd_dev_¥e£¡
(
libmtd_t
 
desc
, 
mtd_num
) {

649 
°©
 
°
;

650 
libmtd
 *
lib
 = (libmtd *)
desc
;

652 i‡(!
lib
->
sysfs_suµ‹ãd
) {

653  
	`Àgacy_dev_¥e£¡
(
mtd_num
) == 1;

655 
fûe
[
	`°æí
(
lib
->
mtd
) + 10];

657 
	`•rötf
(
fûe
, 
lib
->
mtd
, 
mtd_num
);

658  !
	`°©
(
fûe
, &
°
);

660 
	}
}

662 
	$mtd_gë_öfo
(
libmtd_t
 
desc
, 
mtd_öfo
 *
öfo
)

664 
DIR
 *
sysfs_mtd
;

665 
dúít
 *dirent;

666 
libmtd
 *
lib
 = (libmtd *)
desc
;

668 
	`mem£t
(
öfo
, 0, (
mtd_öfo
));

670 i‡(!
lib
->
sysfs_suµ‹ãd
)

671  
	`Àgacy_mtd_gë_öfo
(
öfo
);

673 
öfo
->
sysfs_suµ‹ãd
 = 1;

679 
sysfs_mtd
 = 
	`›ídú
(
lib
->sysfs_mtd);

680 i‡(!
sysfs_mtd
) {

681 i‡(
î∫o
 =
ENOENT
) {

682 
î∫o
 = 
ENODEV
;

685  
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
lib
->
sysfs_mtd
);

688 
öfo
->
lowe°_mtd_num
 = 
INT_MAX
;

690 
mtd_num
, 
ªt
;

691 
tmp_buf
[256];

693 
î∫o
 = 0;

694 
dúít
 = 
	`ªaddú
(
sysfs_mtd
);

695 i‡(!
dúít
)

698 i‡(
	`°æí
(
dúít
->
d_«me
) >= 255) {

699 
	`îrmsg
("invalidÉntry in %s: \"%s\"",

700 
lib
->
sysfs_mtd
, 
dúít
->
d_«me
);

701 
î∫o
 = 
EINVAL
;

702 
out_˛o£
;

705 
ªt
 = 
	`ssˇnf
(
dúít
->
d_«me
, 
MTD_NAME_PATT
"%s",

706 &
mtd_num
, 
tmp_buf
);

707 i‡(
ªt
 == 1) {

708 
öfo
->
mtd_dev_˙t
 += 1;

709 i‡(
mtd_num
 > 
öfo
->
highe°_mtd_num
)

710 
öfo
->
highe°_mtd_num
 = 
mtd_num
;

711 i‡(
mtd_num
 < 
öfo
->
lowe°_mtd_num
)

712 
öfo
->
lowe°_mtd_num
 = 
mtd_num
;

716 i‡(!
dúít
 && 
î∫o
) {

717 
	`sys_îrmsg
("ªaddú faûed o¿\"%s\"", 
lib
->
sysfs_mtd
);

718 
out_˛o£
;

721 i‡(
	`˛o£dú
(
sysfs_mtd
))

722  
	`sys_îrmsg
("˛o£dú faûed o¿\"%s\"", 
lib
->
sysfs_mtd
);

724 i‡(
öfo
->
lowe°_mtd_num
 =
INT_MAX
)

725 
öfo
->
lowe°_mtd_num
 = 0;

729 
out_˛o£
:

730 
	`˛o£dú
(
sysfs_mtd
);

732 
	}
}

734 
	$mtd_gë_dev_öfo1
(
libmtd_t
 
desc
, 
mtd_num
, 
mtd_dev_öfo
 *
mtd
)

736 
ªt
;

737 
libmtd
 *
lib
 = (libmtd *)
desc
;

739 
	`mem£t
(
mtd
, 0, (
mtd_dev_öfo
));

740 
mtd
->
mtd_num
 = mtd_num;

742 i‡(!
	`mtd_dev_¥e£¡
(
desc
, 
mtd_num
)) {

743 
î∫o
 = 
ENODEV
;

745 } i‡(!
lib
->
sysfs_suµ‹ãd
)

746  
	`Àgacy_gë_dev_öfo1
(
mtd_num
, 
mtd
);

748 i‡(
	`dev_gë_maj‹
(
lib
, 
mtd_num
, &
mtd
->
maj‹
, &mtd->
mö‹
))

751 
ªt
 = 
	`dev_ªad_d©a
(
lib
->
mtd_«me
, 
mtd_num
, &
mtd
->
«me
,

752 
MTD_NAME_MAX
 + 1);

753 i‡(
ªt
 < 0)

755 ((*)
mtd
->
«me
)[
ªt
 - 1] = '\0';

757 
ªt
 = 
	`dev_ªad_d©a
(
lib
->
mtd_ty≥
, 
mtd_num
, &
mtd
->
ty≥_°r
,

758 
MTD_TYPE_MAX
 + 1);

759 i‡(
ªt
 < 0)

761 ((*)
mtd
->
ty≥_°r
)[
ªt
 - 1] = '\0';

763 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_eb_size
, 
mtd_num
, &
mtd
->
eb_size
))

765 i‡(
	`dev_ªad_pos_Œ
(
lib
->
mtd_size
, 
mtd_num
, &
mtd
->
size
))

767 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_mö_io_size
, 
mtd_num
, &
mtd
->
mö_io_size
))

769 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_sub∑ge_size
, 
mtd_num
, &
mtd
->
sub∑ge_size
))

771 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_oob_size
, 
mtd_num
, &
mtd
->
oob_size
))

773 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_ªgi⁄_˙t
, 
mtd_num
, &
mtd
->
ªgi⁄_˙t
))

775 i‡(
	`dev_ªad_hex_öt
(
lib
->
mtd_Êags
, 
mtd_num
, &
ªt
))

777 
mtd
->
wrôabÀ
 = !!(
ªt
 & 
MTD_WRITEABLE
);

779 
mtd
->
eb_˙t
 = mtd->
size
 / mtd->
eb_size
;

780 
mtd
->
ty≥
 = 
	`ty≥_°r2öt
(mtd->
ty≥_°r
);

781 
mtd
->
bb_Ælowed
 = !!(mtd->
ty≥
 =
MTD_NANDFLASH
 ||

782 
mtd
->
ty≥
 =
MTD_MLCNANDFLASH
);

785 
	}
}

787 
	$mtd_gë_dev_öfo
(
libmtd_t
 
desc
, c⁄° *
node
, 
mtd_dev_öfo
 *
mtd
)

789 
mtd_num
;

790 
libmtd
 *
lib
 = (libmtd *)
desc
;

792 i‡(!
lib
->
sysfs_suµ‹ãd
)

793  
	`Àgacy_gë_dev_öfo
(
node
, 
mtd
);

795 i‡(
	`dev_node2num
(
lib
, 
node
, &
mtd_num
))

798  
	`mtd_gë_dev_öfo1
(
desc
, 
mtd_num
, 
mtd
);

799 
	}
}

801 
ölöe
 
	$mtd_io˘l_îr‹
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
eb
,

802 c⁄° *
§eq
)

804  
	`sys_îrmsg
("%s ioctl failed forÉraseblock %d (mtd%d)",

805 
§eq
, 
eb
, 
mtd
->
mtd_num
);

806 
	}
}

808 
	$mtd_vÆid_îa£_block
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
eb
)

810 i‡(
eb
 < 0 ||Éb >
mtd
->
eb_˙t
) {

811 
	`îrmsg
("badÉraseblockÇumber %d, mtd%d has %dÉraseblocks",

812 
eb
, 
mtd
->
mtd_num
, mtd->
eb_˙t
);

813 
î∫o
 = 
EINVAL
;

817 
	}
}

819 
	$mtd_xlock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
ªq
,

820 c⁄° *
§eq
)

822 
ªt
;

823 
îa£_öfo_u£r
 
ei
;

825 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

826 i‡(
ªt
)

827  
ªt
;

829 
ei
.
°¨t
 = 
eb
 * 
mtd
->
eb_size
;

830 
ei
.
Àngth
 = 
mtd
->
eb_size
;

832 
ªt
 = 
	`io˘l
(
fd
, 
ªq
, &
ei
);

833 i‡(
ªt
 < 0)

834  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, 
§eq
);

837 
	}
}

838 
	#mtd_xlock
(
mtd
, 
fd
, 
eb
, 
ªq
Ë
	`mtd_xlock
(mtd, fd,Éb,Ñeq, #ªq)

	)

840 
	$mtd_lock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

842  
	`mtd_xlock
(
mtd
, 
fd
, 
eb
, 
MEMLOCK
);

843 
	}
}

845 
	$mtd_u∆ock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

847  
	`mtd_xlock
(
mtd
, 
fd
, 
eb
, 
MEMUNLOCK
);

848 
	}
}

850 
	$mtd_îa£
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

852 
ªt
;

853 
libmtd
 *
lib
 = (libmtd *)
desc
;

854 
îa£_öfo_u£r64
 
ei64
;

855 
îa£_öfo_u£r
 
ei
;

857 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

858 i‡(
ªt
)

859  
ªt
;

861 
ei64
.
°¨t
 = (
__u64
)
eb
 * 
mtd
->
eb_size
;

862 
ei64
.
Àngth
 = 
mtd
->
eb_size
;

864 i‡(
lib
->
offs64_io˘ls
 =
OFFS64_IOCTLS_SUPPORTED
 ||

865 
lib
->
offs64_io˘ls
 =
OFFS64_IOCTLS_UNKNOWN
) {

866 
ªt
 = 
	`io˘l
(
fd
, 
MEMERASE64
, &
ei64
);

867 i‡(
ªt
 == 0)

868  
ªt
;

870 i‡(
î∫o
 !
ENOTTY
 ||

871 
lib
->
offs64_io˘ls
 !
OFFS64_IOCTLS_UNKNOWN
)

872  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMERASE64");

879 
lib
->
offs64_io˘ls
 = 
OFFS64_IOCTLS_NOT_SUPPORTED
;

882 i‡(
ei64
.
°¨t
 +Éi64.
Àngth
 > 0xFFFFFFFF) {

883 
	`îrmsg
("this system canáddress only %uÉraseblocks",

884 0xFFFFFFFFU / 
mtd
->
eb_size
);

885 
î∫o
 = 
EINVAL
;

889 
ei
.
°¨t
 = 
ei64
.start;

890 
ei
.
Àngth
 = 
ei64
.length;

891 
ªt
 = 
	`io˘l
(
fd
, 
MEMERASE
, &
ei
);

892 i‡(
ªt
 < 0)

893  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMERASE");

895 
	}
}

897 
	$mtd_ªgi⁄öfo
(
fd
, 
ªgidx
, 
ªgi⁄_öfo_u£r
 *
ªgöfo
)

899 
ªt
;

901 i‡(
ªgidx
 < 0) {

902 
î∫o
 = 
ENODEV
;

906 
ªgöfo
->
ªgi⁄ödex
 = 
ªgidx
;

908 
ªt
 = 
	`io˘l
(
fd
, 
MEMGETREGIONINFO
, 
ªgöfo
);

909 i‡(
ªt
 < 0)

910  
	`sys_îrmsg
("%s ioctl failed forÉraseÑegion %d",

911 "MEMGETREGIONINFO", 
ªgidx
);

914 
	}
}

916 
	$mtd_is_locked
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

918 
ªt
;

919 
îa£_öfo_t
 
ei
;

921 
ei
.
°¨t
 = 
eb
 * 
mtd
->
eb_size
;

922 
ei
.
Àngth
 = 
mtd
->
eb_size
;

924 
ªt
 = 
	`io˘l
(
fd
, 
MEMISLOCKED
, &
ei
);

925 i‡(
ªt
 < 0) {

926 i‡(
î∫o
 !
ENOTTY
 &&Éºnÿ!
EOPNOTSUPP
)

927  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMISLOCKED");

929 
î∫o
 = 
EOPNOTSUPP
;

932  
ªt
;

933 
	}
}

936 
uöt8_t
 
	g∑âîns
[] = {0xa5, 0x5a, 0x0};

947 
	$check_∑âîn
(c⁄° *
buf
, 
uöt8_t
 
∑â
, 
size
)

949 
i
;

951 
i
 = 0; i < 
size
; i++)

952 i‡(((c⁄° 
uöt8_t
 *)
buf
)[
i
] !
∑â
)

955 
	}
}

957 
	$mtd_t‹tuª
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

959 
îr
, 
i
, 
∑â_cou¡
;

960 *
buf
;

962 
	`n‹msg
("ru¿t‹tuªÅe° f‹ PEB %d", 
eb
);

963 
∑â_cou¡
 = 
	`ARRAY_SIZE
(
∑âîns
);

965 
buf
 = 
	`xmÆloc
(
mtd
->
eb_size
);

967 
i
 = 0; i < 
∑â_cou¡
; i++) {

968 
îr
 = 
	`mtd_îa£
(
desc
, 
mtd
, 
fd
, 
eb
);

969 i‡(
îr
)

970 
out
;

973 
îr
 = 
	`mtd_ªad
(
mtd
, 
fd
, 
eb
, 0, 
buf
, mtd->
eb_size
);

974 i‡(
îr
)

975 
out
;

977 
îr
 = 
	`check_∑âîn
(
buf
, 0xFF, 
mtd
->
eb_size
);

978 i‡(
îr
 == 0) {

979 
	`îrmsg
("îa£d PEB %d, buà®n⁄-0xFF byã found", 
eb
);

980 
î∫o
 = 
EIO
;

981 
out
;

985 
	`mem£t
(
buf
, 
∑âîns
[
i
], 
mtd
->
eb_size
);

986 
îr
 = 
	`mtd_wrôe
(
desc
, 
mtd
, 
fd
, 
eb
, 0, 
buf
, mtd->
eb_size
, 
NULL
,

988 i‡(
îr
)

989 
out
;

991 
	`mem£t
(
buf
, ~
∑âîns
[
i
], 
mtd
->
eb_size
);

992 
îr
 = 
	`mtd_ªad
(
mtd
, 
fd
, 
eb
, 0, 
buf
, mtd->
eb_size
);

993 i‡(
îr
)

994 
out
;

996 
îr
 = 
	`check_∑âîn
(
buf
, 
∑âîns
[
i
], 
mtd
->
eb_size
);

997 i‡(
îr
 == 0) {

998 
	`îrmsg
("pattern %x checking failed for PEB %d",

999 
∑âîns
[
i
], 
eb
);

1000 
î∫o
 = 
EIO
;

1001 
out
;

1005 
	`n‹msg
("PEB %dÖas£dÅ‹tuªÅe°, dÿnŸ m¨k ià®bad", 
eb
);

1007 
out
:

1008 
	`‰ì
(
buf
);

1010 
	}
}

1012 
	$mtd_is_bad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

1014 
ªt
;

1015 
loff_t
 
£ek
;

1017 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1018 i‡(
ªt
)

1019  
ªt
;

1021 i‡(!
mtd
->
bb_Ælowed
)

1024 
£ek
 = (
loff_t
)
eb
 * 
mtd
->
eb_size
;

1025 
ªt
 = 
	`io˘l
(
fd
, 
MEMGETBADBLOCK
, &
£ek
);

1026 i‡(
ªt
 == -1)

1027  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMGETBADBLOCK");

1028  
ªt
;

1029 
	}
}

1031 
	$mtd_m¨k_bad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

1033 
ªt
;

1034 
loff_t
 
£ek
;

1036 i‡(!
mtd
->
bb_Ælowed
) {

1037 
î∫o
 = 
EINVAL
;

1041 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1042 i‡(
ªt
)

1043  
ªt
;

1045 
£ek
 = (
loff_t
)
eb
 * 
mtd
->
eb_size
;

1046 
ªt
 = 
	`io˘l
(
fd
, 
MEMSETBADBLOCK
, &
£ek
);

1047 i‡(
ªt
 == -1)

1048  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMSETBADBLOCK");

1050 
	}
}

1052 
	$mtd_ªad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
offs
,

1053 *
buf
, 
Àn
)

1055 
ªt
, 
rd
 = 0;

1056 
off_t
 
£ek
;

1058 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1059 i‡(
ªt
)

1060  
ªt
;

1062 i‡(
offs
 < 0 || off†+ 
Àn
 > 
mtd
->
eb_size
) {

1063 
	`îrmsg
("bad offset %d orÜength %d, mtd%dÉraseblock size is %d",

1064 
offs
, 
Àn
, 
mtd
->
mtd_num
, mtd->
eb_size
);

1065 
î∫o
 = 
EINVAL
;

1070 
£ek
 = (
off_t
)
eb
 * 
mtd
->
eb_size
 + 
offs
;

1071 i‡(
	`l£ek
(
fd
, 
£ek
, 
SEEK_SET
) != seek)

1072  
	`sys_îrmsg
("ˇ¬Ÿ sìk mtd%dÅÿoff£à%"
PRIdoff_t
,

1073 
mtd
->
mtd_num
, 
£ek
);

1075 
rd
 < 
Àn
) {

1076 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

1077 i‡(
ªt
 < 0)

1078  
	`sys_îrmsg
("cannotÑead %d bytes from mtd%d (eraseblock %d, offset %d)",

1079 
Àn
, 
mtd
->
mtd_num
, 
eb
, 
offs
);

1080 
rd
 +
ªt
;

1084 
	}
}

1086 
	$Àgacy_auto_oob_œyout
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

1087 
oobÀn
, *
oob
) {

1088 
«nd_ooböfo
 
ﬁd_ooböfo
;

1089 
°¨t
, 
Àn
;

1090 
uöt8_t
 *
tmp_buf
;

1093 i‡(
	`io˘l
(
fd
, 
MEMGETOOBSEL
, &
ﬁd_ooböfo
))

1094  
	`sys_îrmsg
("MEMGETOOBSEL failed");

1096 
tmp_buf
 = 
	`mÆloc
(
oobÀn
);

1097 
	`mem˝y
(
tmp_buf
, 
oob
, 
oobÀn
);

1103 i‡(
ﬁd_ooböfo
.
u£ecc
 =
MTD_NANDECC_AUTOPLACE
) {

1104 
i
, 
ègs_pos
 = 0;

1105 
i
 = 0; 
ﬁd_ooböfo
.
oob‰ì
[i][1]; i++) {

1107 
°¨t
 = 
ﬁd_ooböfo
.
oob‰ì
[
i
][0];

1108 
Àn
 = 
ﬁd_ooböfo
.
oob‰ì
[
i
][1];

1109 
	`mem˝y
(
oob
 + 
°¨t
, 
tmp_buf
 + 
ègs_pos
, 
Àn
);

1110 
ègs_pos
 +
Àn
;

1114 
°¨t
 = 
ﬁd_ooböfo
.
eccbyãs
;

1115 
Àn
 = 
mtd
->
oob_size
 - 
°¨t
;

1116 
	`mem˝y
(
oob
 + 
°¨t
, 
tmp_buf
 + sèπ, 
Àn
);

1118 
	`‰ì
(
tmp_buf
);

1121 
	}
}

1123 
	$mtd_wrôe
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
,

1124 
offs
, *
d©a
, 
Àn
, *
oob
, 
oobÀn
,

1125 
uöt8_t
 
mode
)

1127 
ªt
;

1128 
off_t
 
£ek
;

1129 
mtd_wrôe_ªq
 
›s
;

1131 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1132 i‡(
ªt
)

1133  
ªt
;

1135 i‡(
offs
 < 0 || off†+ 
Àn
 > 
mtd
->
eb_size
) {

1136 
	`îrmsg
("bad offset %d orÜength %d, mtd%dÉraseblock size is %d",

1137 
offs
, 
Àn
, 
mtd
->
mtd_num
, mtd->
eb_size
);

1138 
î∫o
 = 
EINVAL
;

1141 i‡(
offs
 % 
mtd
->
sub∑ge_size
) {

1142 
	`îrmsg
("write offset %d isÇotálignedÅo mtd%d min. I/O size %d",

1143 
offs
, 
mtd
->
mtd_num
, mtd->
sub∑ge_size
);

1144 
î∫o
 = 
EINVAL
;

1147 i‡(
Àn
 % 
mtd
->
sub∑ge_size
) {

1148 
	`îrmsg
("writeÜength %d isÇotálignedÅo mtd%d min. I/O size %d",

1149 
Àn
, 
mtd
->
mtd_num
, mtd->
sub∑ge_size
);

1150 
î∫o
 = 
EINVAL
;

1155 
£ek
 = (
off_t
)
eb
 * 
mtd
->
eb_size
 + 
offs
;

1157 i‡(
oob
) {

1158 
›s
.
°¨t
 = 
£ek
;

1159 
›s
.
Àn
 =Üen;

1160 
›s
.
oobÀn
 = ooblen;

1161 
›s
.
u§_d©a
 = (
uöt64_t
)()
d©a
;

1162 
›s
.
u§_oob
 = (
uöt64_t
)()
oob
;

1163 
›s
.
mode
 = mode;

1165 
ªt
 = 
	`io˘l
(
fd
, 
MEMWRITE
, &
›s
);

1166 i‡(
ªt
 == 0)

1168 i‡(
î∫o
 !
ENOTTY
 &&Éºnÿ!
EOPNOTSUPP
)

1169  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMWRITE");

1172 i‡(
mode
 =
MTD_OPS_AUTO_OOB
)

1173 i‡(
	`Àgacy_auto_oob_œyout
(
mtd
, 
fd
, 
oobÀn
, 
oob
))

1175 i‡(
	`mtd_wrôe_oob
(
desc
, 
mtd
, 
fd
, 
£ek
, 
oobÀn
, 
oob
) < 0)

1176  
	`sys_îrmsg
("cannot writeÅo OOB");

1178 i‡(
d©a
) {

1180 i‡(
	`l£ek
(
fd
, 
£ek
, 
SEEK_SET
) != seek)

1181  
	`sys_îrmsg
("ˇ¬Ÿ sìk mtd%dÅÿoff£à%"
PRIdoff_t
,

1182 
mtd
->
mtd_num
, 
£ek
);

1183 
ªt
 = 
	`wrôe
(
fd
, 
d©a
, 
Àn
);

1184 i‡(
ªt
 !
Àn
)

1185  
	`sys_îrmsg
("cannot write %d bytesÅo mtd%d "

1187 
Àn
, 
mtd
->
mtd_num
, 
eb
, 
offs
);

1191 
	}
}

1193 
	$do_oob_›
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

1194 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
, 
cmd64
,

1195 
cmd
)

1197 
ªt
, 
oob_offs
;

1198 
mtd_oob_buf64
 
oob64
;

1199 
mtd_oob_buf
 
oob
;

1200 
max_offs
;

1201 c⁄° *
cmd64_°r
, *
cmd_°r
;

1202 
libmtd
 *
lib
 = (libmtd *)
desc
;

1204 i‡(
cmd64
 =
MEMREADOOB64
) {

1205 
cmd64_°r
 = "MEMREADOOB64";

1206 
cmd_°r
 = "MEMREADOOB";

1208 
cmd64_°r
 = "MEMWRITEOOB64";

1209 
cmd_°r
 = "MEMWRITEOOB";

1212 
max_offs
 = ()
mtd
->
eb_˙t
 * mtd->
eb_size
;

1213 i‡(
°¨t
 >
max_offs
) {

1214 
	`îrmsg
("badÖagêaddªs†%" 
PRIu64
 ", mtd%d has %dÉraseblocks (%llu bytes)",

1215 
°¨t
, 
mtd
->
mtd_num
, mtd->
eb_˙t
, 
max_offs
);

1216 
î∫o
 = 
EINVAL
;

1220 
oob_offs
 = 
°¨t
 & (
mtd
->
mö_io_size
 - 1);

1221 i‡(
oob_offs
 + 
Àngth
 > 
mtd
->
oob_size
 ||Üength == 0) {

1222 
	`îrmsg
("C™nŸ wrôê%" 
PRIu64
 " OOB bytesÅoáddress %" PRIu64 " (OOB offset %u) - mtd%d OOB size is only %d bytes",

1223 
Àngth
, 
°¨t
, 
oob_offs
, 
mtd
->
mtd_num
, mtd->
oob_size
);

1224 
î∫o
 = 
EINVAL
;

1228 
oob64
.
°¨t
 = start;

1229 
oob64
.
Àngth
 =Üength;

1230 
oob64
.
u§_±r
 = (
uöt64_t
)()
d©a
;

1232 i‡(
lib
->
offs64_io˘ls
 =
OFFS64_IOCTLS_SUPPORTED
 ||

1233 
lib
->
offs64_io˘ls
 =
OFFS64_IOCTLS_UNKNOWN
) {

1234 
ªt
 = 
	`io˘l
(
fd
, 
cmd64
, &
oob64
);

1235 i‡(
ªt
 == 0)

1236  
ªt
;

1238 i‡(
î∫o
 !
ENOTTY
 ||

1239 
lib
->
offs64_io˘ls
 !
OFFS64_IOCTLS_UNKNOWN
) {

1240 
	`sys_îrmsg
("%†io˘»Áûed f‹ mtd%d, off£à%" 
PRIu64
 " (eraseblock %" PRIu64 ")",

1241 
cmd64_°r
, 
mtd
->
mtd_num
, 
°¨t
, sèπ / mtd->
eb_size
);

1249 
lib
->
offs64_io˘ls
 = 
OFFS64_IOCTLS_NOT_SUPPORTED
;

1252 i‡(
oob64
.
°¨t
 > 0xFFFFFFFFULL) {

1253 
	`îrmsg
("this system canáddress only upÅoáddress %lu",

1255 
î∫o
 = 
EINVAL
;

1259 
oob
.
°¨t
 = 
oob64
.start;

1260 
oob
.
Àngth
 = 
oob64
.length;

1261 
oob
.
±r
 = 
d©a
;

1263 
ªt
 = 
	`io˘l
(
fd
, 
cmd
, &
oob
);

1264 i‡(
ªt
 < 0)

1265 
	`sys_îrmsg
("%†io˘»Áûed f‹ mtd%d, off£à%" 
PRIu64
 " (eraseblock %" PRIu64 ")",

1266 
cmd_°r
, 
mtd
->
mtd_num
, 
°¨t
, sèπ / mtd->
eb_size
);

1267  
ªt
;

1268 
	}
}

1270 
	$mtd_ªad_oob
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

1271 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
)

1273  
	`do_oob_›
(
desc
, 
mtd
, 
fd
, 
°¨t
, 
Àngth
, 
d©a
,

1274 
MEMREADOOB64
, 
MEMREADOOB
);

1275 
	}
}

1277 
	$mtd_wrôe_oob
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

1278 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
)

1280  
	`do_oob_›
(
desc
, 
mtd
, 
fd
, 
°¨t
, 
Àngth
, 
d©a
,

1281 
MEMWRITEOOB64
, 
MEMWRITEOOB
);

1282 
	}
}

1284 
	$mtd_wrôe_img
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
offs
,

1285 c⁄° *
img_«me
)

1287 
tmp
, 
ªt
, 
ö_fd
, 
Àn
, 
wrôãn
 = 0;

1288 
off_t
 
£ek
;

1289 
°©
 
°
;

1290 *
buf
;

1292 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1293 i‡(
ªt
)

1294  
ªt
;

1296 i‡(
offs
 < 0 || off†>
mtd
->
eb_size
) {

1297 
	`îrmsg
("bad offset %d, mtd%dÉraseblock size is %d",

1298 
offs
, 
mtd
->
mtd_num
, mtd->
eb_size
);

1299 
î∫o
 = 
EINVAL
;

1302 i‡(
offs
 % 
mtd
->
sub∑ge_size
) {

1303 
	`îrmsg
("write offset %d isÇotálignedÅo mtd%d min. I/O size %d",

1304 
offs
, 
mtd
->
mtd_num
, mtd->
sub∑ge_size
);

1305 
î∫o
 = 
EINVAL
;

1309 
ö_fd
 = 
	`›í
(
img_«me
, 
O_RDONLY
 | 
O_CLOEXEC
);

1310 i‡(
ö_fd
 == -1)

1311  
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
img_«me
);

1313 i‡(
	`f°©
(
ö_fd
, &
°
)) {

1314 
	`sys_îrmsg
("ˇ¬Ÿ sèà%s", 
img_«me
);

1315 
out_˛o£
;

1318 
Àn
 = 
°
.
°_size
;

1319 i‡(
Àn
 % 
mtd
->
sub∑ge_size
) {

1320 
	`îrmsg
("size of \"%s\" is %d byte, which isÇotálignedÅo "

1321 "mtd%d mö. I/O sizê%d", 
img_«me
, 
Àn
, 
mtd
->
mtd_num
,

1322 
mtd
->
sub∑ge_size
);

1323 
î∫o
 = 
EINVAL
;

1324 
out_˛o£
;

1326 
tmp
 = (
offs
 + 
Àn
 + 
mtd
->
eb_size
 - 1) / mtd->eb_size;

1327 i‡(
eb
 + 
tmp
 > 
mtd
->
eb_˙t
) {

1328 
	`îrmsg
("\"%s\" image size is %d bytes, mtd%d size is %d "

1331 
img_«me
, 
Àn
, 
mtd
->
mtd_num
, mtd->
eb_˙t
, 
eb
, 
offs
);

1332 
î∫o
 = 
EINVAL
;

1333 
out_˛o£
;

1337 
£ek
 = (
off_t
)
eb
 * 
mtd
->
eb_size
 + 
offs
;

1338 i‡(
	`l£ek
(
fd
, 
£ek
, 
SEEK_SET
) != seek) {

1339 
	`sys_îrmsg
("ˇ¬Ÿ sìk mtd%dÅÿoff£à%"
PRIdoff_t
,

1340 
mtd
->
mtd_num
, 
£ek
);

1341 
out_˛o£
;

1344 
buf
 = 
	`xmÆloc
(
mtd
->
eb_size
);

1346 
wrôãn
 < 
Àn
) {

1347 
rd
 = 0;

1350 
ªt
 = 
	`ªad
(
ö_fd
, 
buf
, 
mtd
->
eb_size
 - 
offs
 - 
rd
);

1351 i‡(
ªt
 == -1) {

1352 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
img_«me
);

1353 
out_‰ì
;

1355 
rd
 +
ªt
;

1356 } 
ªt
 && 
rd
 < 
mtd
->
eb_size
 - 
offs
);

1358 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
rd
);

1359 i‡(
ªt
 !
rd
) {

1360 
	`sys_îrmsg
("cannot write %d bytesÅo mtd%d (eraseblock %d, offset %d)",

1361 
Àn
, 
mtd
->
mtd_num
, 
eb
, 
offs
);

1362 
out_‰ì
;

1365 
offs
 = 0;

1366 
eb
 += 1;

1367 
wrôãn
 +
rd
;

1370 
	`‰ì
(
buf
);

1371 
	`˛o£
(
ö_fd
);

1374 
out_‰ì
:

1375 
	`‰ì
(
buf
);

1376 
out_˛o£
:

1377 
	`˛o£
(
ö_fd
);

1379 
	}
}

1381 
	$mtd_¥obe_node
(
libmtd_t
 
desc
, c⁄° *
node
)

1383 
°©
 
°
;

1384 
mtd_öfo
 
öfo
;

1385 
i
, 
mjr
, 
mƒ
;

1386 
libmtd
 *
lib
 = (libmtd *)
desc
;

1388 i‡(
	`°©
(
node
, &
°
))

1389  
	`sys_îrmsg
("ˇ¬Ÿ gë inf‹m©i⁄ábouà\"%s\"", 
node
);

1391 i‡(!
	`S_ISCHR
(
°
.
°_mode
)) {

1392 
	`îrmsg
("\"%s\" i†nŸá ch¨a˘î devi˚", 
node
);

1393 
î∫o
 = 
EINVAL
;

1397 
mjr
 = 
	`maj‹
(
°
.
°_rdev
);

1398 
mƒ
 = 
	`mö‹
(
°
.
°_rdev
);

1400 i‡(
	`mtd_gë_öfo
((
libmtd_t
 *)
lib
, &
öfo
))

1403 i‡(!
lib
->
sysfs_suµ‹ãd
)

1406 
i
 = 
öfo
.
lowe°_mtd_num
; i <öfo.
highe°_mtd_num
; i++) {

1407 
mjr1
, 
mƒ1
, 
ªt
;

1409 
ªt
 = 
	`dev_gë_maj‹
(
lib
, 
i
, &
mjr1
, &
mƒ1
);

1410 i‡(
ªt
) {

1411 i‡(
î∫o
 =
ENOENT
)

1413 i‡(!
î∫o
)

1418 i‡(
mjr1
 =
mjr
 && 
mƒ1
 =
mƒ
)

1422 
î∫o
 = 0;

1424 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/libmtd.h

25 #i‚de‡
__LIBMTD_H__


26 
	#__LIBMTD_H__


	)

28 #ifde‡
__˝lu•lus


33 
	~<°döt.h
>

36 
	#MTD_NAME_MAX
 127

	)

38 
	#MTD_TYPE_MAX
 64

	)

41 * 
	tlibmtd_t
;

44 
ªgi⁄_öfo_u£r
;

52 
	smtd_öfo


54 
mtd_dev_˙t
;

55 
lowe°_mtd_num
;

56 
highe°_mtd_num
;

57 
sysfs_suµ‹ãd
:1;

78 
	smtd_dev_öfo


80 
mtd_num
;

81 
maj‹
;

82 
mö‹
;

83 
ty≥
;

84 
ty≥_°r
[
MTD_TYPE_MAX
 + 1];

85 
«me
[
MTD_NAME_MAX
 + 1];

86 
size
;

87 
eb_˙t
;

88 
eb_size
;

89 
mö_io_size
;

90 
sub∑ge_size
;

91 
oob_size
;

92 
ªgi⁄_˙t
;

93 
wrôabÀ
:1;

94 
bb_Ælowed
:1;

105 
libmtd_t
 
libmtd_›í
();

111 
libmtd_˛o£
(
libmtd_t
 
desc
);

120 
mtd_dev_¥e£¡
(
libmtd_t
 
desc
, 
mtd_num
);

131 
mtd_gë_öfo
(
libmtd_t
 
desc
, 
mtd_öfo
 *
öfo
);

144 
mtd_gë_dev_öfo
(
libmtd_t
 
desc
, c⁄° *
node
, 
mtd_dev_öfo
 *
mtd
);

155 
mtd_gë_dev_öfo1
(
libmtd_t
 
desc
, 
mtd_num
, 
mtd_dev_öfo
 *
mtd
);

167 
mtd_lock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

179 
mtd_u∆ock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

191 
mtd_îa£
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

204 
mtd_ªgi⁄öfo
(
fd
, 
ªgidx
, 
ªgi⁄_öfo_u£r
 *
ªgöfo
);

218 
mtd_is_locked
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

230 
mtd_t‹tuª
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

241 
mtd_is_bad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

252 
mtd_m¨k_bad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

267 
mtd_ªad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
offs
,

268 *
buf
, 
Àn
);

289 
mtd_wrôe
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
,

290 
offs
, *
d©a
, 
Àn
, *
oob
, 
oobÀn
,

291 
uöt8_t
 
mode
);

307 
mtd_ªad_oob
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

308 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
);

324 
mtd_wrôe_oob
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

325 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
);

339 
mtd_wrôe_img
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
offs
,

340 c⁄° *
img_«me
);

351 
mtd_¥obe_node
(
libmtd_t
 
desc
, c⁄° *
node
);

353 #ifde‡
__˝lu•lus


	@/home/ysjin/Desktop/fio/fio/oslib/libmtd_common.h

21 #i‚de‡
__MTD_UTILS_COMMON_H__


22 
	#__MTD_UTILS_COMMON_H__


	)

24 
	~<°dboﬁ.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<˘y≥.h
>

28 
	~<°rög.h
>

29 
	~<f˙é.h
>

30 
	~<î∫o.h
>

31 
	~<„©uªs.h
>

32 
	~<öây≥s.h
>

33 
	~<sys/sysma¸os.h
>

35 #i‚de‡
PROGRAM_NAME


39 #ifde‡
__˝lu•lus


43 #i‚de‡
MIN


44 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

46 #i‚de‡
MAX


47 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

49 
	#mö
(
a
, 
b
Ë
	`MIN
◊, bË

	)

50 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

52 
	#ALIGN
(
x
,
a
Ë
	`__ALIGN_MASK
(x,(
	`ty≥of
(x))◊)-1)

	)

53 
	#__ALIGN_MASK
(
x
,
mask
Ë(((x)+(mask))&~(mask))

	)

55 
	#mö_t
(
t
,
x
,
y
) ({ \

56 
	`ty≥of
((
x
)Ë
_x
 = (x); \

57 
	`ty≥of
((
y
)Ë
_y
 = (y); \

58 (
_x
 < 
_y
) ? _x : _y; \

59 })

	)

61 
	#max_t
(
t
,
x
,
y
) ({ \

62 
	`ty≥of
((
x
)Ë
_x
 = (x); \

63 
	`ty≥of
((
y
)Ë
_y
 = (y); \

64 (
_x
 > 
_y
) ? _x : _y; \

65 })

	)

67 #i‚de‡
O_CLOEXEC


68 
	#O_CLOEXEC
 0

	)

72 #ifde‡
__USE_FILE_OFFSET64


73 
	#PRIxoff_t
 
PRIx64


	)

74 
	#PRIdoff_t
 
PRId64


	)

76 
	#PRIxoff_t
 "l"
PRIx32


	)

77 
	#PRIdoff_t
 "l"
PRId32


	)

81 
	#b¨evîbo£
(
vîbo£
, 
fmt
, ...) do { \

82 i‡(
vîbo£
) \

83 
	`¥ötf
(
fmt
, ##
__VA_ARGS__
); \

84 } 0)

	)

85 
	#vîbo£
(
vîbo£
, 
fmt
, ...) \

86 
	`b¨evîbo£
(
vîbo£
, "%s: " 
fmt
 "\n", 
PROGRAM_NAME
, ##
__VA_ARGS__
)

	)

89 
	#n‹msg_c⁄t
(
fmt
, ...) do { \

90 
	`¥ötf
("%s: " 
fmt
, 
PROGRAM_NAME
, ##
__VA_ARGS__
); \

91 } 0)

	)

92 
	#n‹msg
(
fmt
, ...) do { \

93 
	`n‹msg_c⁄t
(
fmt
 "\n", ##
__VA_ARGS__
); \

94 } 0)

	)

97 
	#îrmsg
(
fmt
, ...) ({ \

98 
	`Ârötf
(
°dîr
, "%s:Éº‹!: " 
fmt
 "\n", 
PROGRAM_NAME
, ##
__VA_ARGS__
); \

100 })

	)

101 
	#îrmsg_dõ
(
fmt
, ...) do { \

102 
	`exô
(
	`îrmsg
(
fmt
, ##
__VA_ARGS__
)); \

103 } 0)

	)

106 
	#sys_îrmsg
(
fmt
, ...) ({ \

107 
_îr
 = 
î∫o
; \

108 
	`îrmsg
(
fmt
, ##
__VA_ARGS__
); \

109 
	`Ârötf
(
°dîr
, "%*£º‹ %d (%s)\n", ()(
PROGRAM_NAME
) + 1,\

110 "", 
_îr
, 
	`°ªº‹
(_err)); \

112 })

	)

113 
	#sys_îrmsg_dõ
(
fmt
, ...) do { \

114 
	`exô
(
	`sys_îrmsg
(
fmt
, ##
__VA_ARGS__
)); \

115 } 0)

	)

118 
	#w¨nmsg
(
fmt
, ...) do { \

119 
	`Ârötf
(
°dîr
, "%s: w¨nög!: " 
fmt
 "\n", 
PROGRAM_NAME
, ##
__VA_ARGS__
); \

120 } 0)

	)

122 
ölöe
 
is_powî_of_2
(
n
)

124  (
n
 != 0 && ((n & (n - 1)) == 0));

143 
	#sim∂e_°πoX
(
func
, 
ty≥
) \

144 
ölöe
 
ty≥
 
sim∂e_
##
	`func
(c⁄° *
¢um
, *
îr‹
) \

146 *
íd±r
; \

147 
ty≥
 
ªt
 = 
	`func
(
¢um
, &
íd±r
, 0); \

149 i‡(
îr‹
 && (!*
¢um
 || *
íd±r
)) { \

150 
	`îrmsg
("%s: u«bÀÅÿ∑r£Åhênumbî '%s'", #func, 
¢um
); \

151 *
îr‹
 = 1; \

154  
ªt
; \

155 }

	)

156 
sim∂e_°πoX
(
°πﬁ
, )

157 
sim∂e_°πoX
(
°πﬁl
, )

158 
sim∂e_°πoX
(
°πoul
, )

159 
sim∂e_°πoX
(
°πouŒ
, )

162 
	#comm⁄_¥öt_vîsi⁄
() \

164 
	`¥ötf
("%†%s\n", 
PROGRAM_NAME
, 
VERSION
); \

165 } 0)

	)

167 
	~"libmtd_xÆloc.h
"

169 #ifde‡
__˝lu•lus


	@/home/ysjin/Desktop/fio/fio/oslib/libmtd_int.h

26 #i‚de‡
__LIBMTD_INT_H__


27 
	#__LIBMTD_INT_H__


	)

29 #ifde‡
__˝lu•lus


33 
	#PROGRAM_NAME
 "libmtd"

	)

35 
	#SYSFS_MTD
 "˛ass/mtd"

	)

36 
	#MTD_NAME_PATT
 "mtd%d"

	)

37 
	#MTD_DEV
 "dev"

	)

38 
	#MTD_NAME
 "«me"

	)

39 
	#MTD_TYPE
 "ty≥"

	)

40 
	#MTD_EB_SIZE
 "îa£size"

	)

41 
	#MTD_SIZE
 "size"

	)

42 
	#MTD_MIN_IO_SIZE
 "wrôesize"

	)

43 
	#MTD_SUBPAGE_SIZE
 "sub∑gesize"

	)

44 
	#MTD_OOB_SIZE
 "oobsize"

	)

45 
	#MTD_REGION_CNT
 "numîa£ªgi⁄s"

	)

46 
	#MTD_FLAGS
 "Êags"

	)

48 
	#OFFS64_IOCTLS_UNKNOWN
 0

	)

49 
	#OFFS64_IOCTLS_NOT_SUPPORTED
 1

	)

50 
	#OFFS64_IOCTLS_SUPPORTED
 2

	)

81 
	slibmtd


83 *
sysfs_mtd
;

84 *
mtd
;

85 *
mtd_dev
;

86 *
mtd_«me
;

87 *
mtd_ty≥
;

88 *
mtd_eb_size
;

89 *
mtd_size
;

90 *
mtd_mö_io_size
;

91 *
mtd_sub∑ge_size
;

92 *
mtd_oob_size
;

93 *
mtd_ªgi⁄_˙t
;

94 *
mtd_Êags
;

95 
sysfs_suµ‹ãd
:1;

96 
offs64_io˘ls
:2;

99 
Àgacy_libmtd_›í
();

100 
Àgacy_dev_¥e£¡
(
mtd_num
);

101 
Àgacy_mtd_gë_öfo
(
mtd_öfo
 *
öfo
);

102 
Àgacy_gë_dev_öfo
(c⁄° *
node
, 
mtd_dev_öfo
 *
mtd
);

103 
Àgacy_gë_dev_öfo1
(
dev_num
, 
mtd_dev_öfo
 *
mtd
);

105 #ifde‡
__˝lu•lus


	@/home/ysjin/Desktop/fio/fio/oslib/libmtd_legacy.c

28 
	~<limôs.h
>

29 
	~<f˙é.h
>

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

32 
	~<î∫o.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/io˘l.h
>

36 
	~<mtd/mtd-u£r.h
>

38 
	~"libmtd.h
"

39 
	~"libmtd_öt.h
"

40 
	~"libmtd_comm⁄.h
"

42 
	#MTD_PROC_FILE
 "/¥oc/mtd"

	)

43 
	#MTD_DEV_PATT
 "/dev/mtd%d"

	)

44 
	#MTD_DEV_MAJOR
 90

	)

46 
	#PROC_MTD_FIRST
 "dev: sizêÉø£sizêÇame\n"

	)

47 
	#PROC_MTD_FIRST_LEN
 ((
PROC_MTD_FIRST
Ë- 1)

	)

48 
	#PROC_MTD_MAX_LEN
 4096

	)

49 
	#PROC_MTD_PATT
 "mtd%d: %Œx %x"

	)

61 
	s¥oc_∑r£_öfo


63 
	mmtd_num
;

64 
	msize
;

65 
	m«me
[
MTD_NAME_MAX
 + 1];

66 
	meb_size
;

67 *
	mbuf
;

68 
	md©a_size
;

69 *
	m√xt
;

72 
	$¥oc_∑r£_°¨t
(
¥oc_∑r£_öfo
 *
pi
)

74 
fd
, 
ªt
;

76 
fd
 = 
	`›í
(
MTD_PROC_FILE
, 
O_RDONLY
);

77 i‡(
fd
 == -1)

80 
pi
->
buf
 = 
	`xmÆloc
(
PROC_MTD_MAX_LEN
);

82 
ªt
 = 
	`ªad
(
fd
, 
pi
->
buf
, 
PROC_MTD_MAX_LEN
);

83 i‡(
ªt
 == -1) {

84 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
MTD_PROC_FILE
);

85 
out_‰ì
;

88 i‡(
ªt
 < 
PROC_MTD_FIRST_LEN
 ||

89 
	`memcmp
(
pi
->
buf
, 
PROC_MTD_FIRST
, 
PROC_MTD_FIRST_LEN
)) {

90 
	`îrmsg
("\"%s\" d€†nŸ sèπ wôh \"%s\"", 
MTD_PROC_FILE
,

91 
PROC_MTD_FIRST
);

92 
out_‰ì
;

95 
pi
->
d©a_size
 = 
ªt
;

96 
pi
->
√xt
 =Öi->
buf
 + 
PROC_MTD_FIRST_LEN
;

98 
	`˛o£
(
fd
);

101 
out_‰ì
:

102 
	`‰ì
(
pi
->
buf
);

103 
	`˛o£
(
fd
);

105 
	}
}

107 
	$¥oc_∑r£_√xt
(
¥oc_∑r£_öfo
 *
pi
)

109 
ªt
, 
Àn
, 
pos
 = 
pi
->
√xt
 -Öi->
buf
;

110 *
p
, *
p1
;

112 i‡(
pos
 >
pi
->
d©a_size
) {

113 
	`‰ì
(
pi
->
buf
);

117 
ªt
 = 
	`ssˇnf
(
pi
->
√xt
, 
PROC_MTD_PATT
, &pi->
mtd_num
, &pi->
size
,

118 &
pi
->
eb_size
);

119 i‡(
ªt
 != 3)

120  
	`îrmsg
("\"%s\"Ö©ã∫ÇŸ found", 
PROC_MTD_PATT
);

122 
p
 = 
	`memchr
(
pi
->
√xt
, '\"',Öi->
d©a_size
 - 
pos
);

123 i‡(!
p
)

124  
	`îrmsg
("opening \"Çot found");

125 
p
 += 1;

126 
pos
 = 
p
 - 
pi
->
buf
;

127 i‡(
pos
 >
pi
->
d©a_size
)

128  
	`îrmsg
("opening \"Çot found");

130 
p1
 = 
	`memchr
(
p
, '\"', 
pi
->
d©a_size
 - 
pos
);

131 i‡(!
p1
)

132  
	`îrmsg
("closing \"Çot found");

133 
pos
 = 
p1
 - 
pi
->
buf
;

134 i‡(
pos
 >
pi
->
d©a_size
)

135  
	`îrmsg
("closing \"Çot found");

137 
Àn
 = 
p1
 - 
p
;

138 i‡(
Àn
 > 
MTD_NAME_MAX
)

139  
	`îrmsg
("toÿl⁄g mtd%d devi˚Çame", 
pi
->
mtd_num
);

141 
	`mem˝y
(
pi
->
«me
, 
p
, 
Àn
);

142 
pi
->
«me
[
Àn
] = '\0';

144 i‡(
p1
[1] != '\n')

145  
	`îrmsg
("opening \"\n\"Çot found");

146 
pi
->
√xt
 = 
p1
 + 2;

148 
	}
}

159 
	$Àgacy_libmtd_›í
()

161 
fd
;

163 
fd
 = 
	`›í
(
MTD_PROC_FILE
, 
O_RDONLY
);

164 i‡(
fd
 == -1) {

165 i‡(
î∫o
 =
ENOENT
)

166 
î∫o
 = 0;

170 
	`˛o£
(
fd
);

172 
	}
}

182 
	$Àgacy_dev_¥e£¡
(
mtd_num
)

184 
ªt
;

185 
¥oc_∑r£_öfo
 
pi
;

187 
ªt
 = 
	`¥oc_∑r£_°¨t
(&
pi
);

188 i‡(
ªt
)

191 
	`¥oc_∑r£_√xt
(&
pi
)) {

192 i‡(
pi
.
mtd_num
 == mtd_num)

197 
	}
}

205 
	$Àgacy_mtd_gë_öfo
(
mtd_öfo
 *
öfo
)

207 
ªt
;

208 
¥oc_∑r£_öfo
 
pi
;

210 
ªt
 = 
	`¥oc_∑r£_°¨t
(&
pi
);

211 i‡(
ªt
)

214 
öfo
->
lowe°_mtd_num
 = 
INT_MAX
;

215 
	`¥oc_∑r£_√xt
(&
pi
)) {

216 
öfo
->
mtd_dev_˙t
 += 1;

217 i‡(
pi
.
mtd_num
 > 
öfo
->
highe°_mtd_num
)

218 
öfo
->
highe°_mtd_num
 = 
pi
.
mtd_num
;

219 i‡(
pi
.
mtd_num
 < 
öfo
->
lowe°_mtd_num
)

220 
öfo
->
lowe°_mtd_num
 = 
pi
.
mtd_num
;

224 
	}
}

234 
	$Àgacy_gë_dev_öfo
(c⁄° *
node
, 
mtd_dev_öfo
 *
mtd
)

236 
°©
 
°
;

237 
mtd_öfo_u£r
 
ui
;

238 
fd
, 
ªt
;

239 
loff_t
 
offs
 = 0;

240 
¥oc_∑r£_öfo
 
pi
;

242 i‡(
	`°©
(
node
, &
°
)) {

243 
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
node
);

244 i‡(
î∫o
 =
ENOENT
)

245 
	`n‹msg
("MTD subsystem is oldánd doesÇot support "

250 i‡(!
	`S_ISCHR
(
°
.
°_mode
)) {

251 
î∫o
 = 
EINVAL
;

252  
	`îrmsg
("\"%s\" i†nŸá ch¨a˘î devi˚", 
node
);

255 
	`mem£t
(
mtd
, '\0', (
mtd_dev_öfo
));

256 
mtd
->
maj‹
 = 
	`maj‹
(
°
.
°_rdev
);

257 
mtd
->
mö‹
 = 
	`mö‹
(
°
.
°_rdev
);

259 i‡(
mtd
->
maj‹
 !
MTD_DEV_MAJOR
) {

260 
î∫o
 = 
EINVAL
;

261  
	`îrmsg
("\"%s\" has majorÇumber %d, MTD devices have "

262 "maj‹ %d", 
node
, 
mtd
->
maj‹
, 
MTD_DEV_MAJOR
);

265 
mtd
->
mtd_num
 = mtd->
mö‹
 / 2;

267 
fd
 = 
	`›í
(
node
, 
O_RDONLY
);

268 i‡(
fd
 == -1)

269  
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
node
);

271 i‡(
	`io˘l
(
fd
, 
MEMGETINFO
, &
ui
)) {

272 
	`sys_îrmsg
("MEMGETINFO ioctlÑequest failed");

273 
out_˛o£
;

276 
ªt
 = 
	`io˘l
(
fd
, 
MEMGETBADBLOCK
, &
offs
);

277 i‡(
ªt
 == -1) {

278 i‡(
î∫o
 !
EOPNOTSUPP
) {

279 
	`sys_îrmsg
("MEMGETBADBLOCK ioctl failed");

280 
out_˛o£
;

282 
î∫o
 = 0;

283 
mtd
->
bb_Ælowed
 = 0;

285 
mtd
->
bb_Ælowed
 = 1;

287 
mtd
->
ty≥
 = 
ui
.type;

288 
mtd
->
size
 = 
ui
.size;

289 
mtd
->
eb_size
 = 
ui
.
îa£size
;

290 
mtd
->
mö_io_size
 = 
ui
.
wrôesize
;

291 
mtd
->
oob_size
 = 
ui
.
oobsize
;

293 i‡(
mtd
->
mö_io_size
 <= 0) {

294 
	`îrmsg
("mtd%d (%s) has insane min. I/O unit size %d",

295 
mtd
->
mtd_num
, 
node
, mtd->
mö_io_size
);

296 
out_˛o£
;

298 i‡(
mtd
->
eb_size
 <0 || mtd->eb_sizê< mtd->
mö_io_size
) {

299 
	`îrmsg
("mtd%d (%s) has insaneÉraseblock size %d",

300 
mtd
->
mtd_num
, 
node
, mtd->
eb_size
);

301 
out_˛o£
;

303 i‡(
mtd
->
size
 <0 || mtd->sizê< mtd->
eb_size
) {

304 
	`îrmsg
("mtd%d (%s) has insane size %lld",

305 
mtd
->
mtd_num
, 
node
, mtd->
size
);

306 
out_˛o£
;

308 
mtd
->
eb_˙t
 = mtd->
size
 / mtd->
eb_size
;

310 
mtd
->
ty≥
) {

311 
MTD_ABSENT
:

312 
	`îrmsg
("mtd%d (%s) isÑemovableánd isÇotÖresent",

313 
mtd
->
mtd_num
, 
node
);

314 
out_˛o£
;

315 
MTD_RAM
:

316 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "ram");

318 
MTD_ROM
:

319 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "rom");

321 
MTD_NORFLASH
:

322 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "nor");

324 
MTD_NANDFLASH
:

325 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "nand");

327 
MTD_MLCNANDFLASH
:

328 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "mlc-nand");

330 
MTD_DATAFLASH
:

331 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "dataflash");

333 
MTD_UBIVOLUME
:

334 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "ubi");

337 
out_˛o£
;

340 i‡(
ui
.
Êags
 & 
MTD_WRITEABLE
)

341 
mtd
->
wrôabÀ
 = 1;

342 
mtd
->
sub∑ge_size
 = mtd->
mö_io_size
;

344 
	`˛o£
(
fd
);

350 
ªt
 = 
	`¥oc_∑r£_°¨t
(&
pi
);

351 i‡(
ªt
)

354 
	`¥oc_∑r£_√xt
(&
pi
)) {

355 i‡(
pi
.
mtd_num
 =
mtd
->mtd_num) {

356 
	`°r˝y
((*)
mtd
->
«me
, 
pi
.name);

361 
	`îrmsg
("mtd%dÇŸ found i¿\"%s\"", 
mtd
->
mtd_num
, 
MTD_PROC_FILE
);

362 
î∫o
 = 
ENOENT
;

365 
out_˛o£
:

366 
	`˛o£
(
fd
);

368 
	}
}

378 
	$Àgacy_gë_dev_öfo1
(
mtd_num
, 
mtd_dev_öfo
 *
mtd
)

380 
node
[(
MTD_DEV_PATT
) + 20];

382 
	`•rötf
(
node
, 
MTD_DEV_PATT
, 
mtd_num
);

383  
	`Àgacy_gë_dev_öfo
(
node
, 
mtd
);

384 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/libmtd_xalloc.h

27 #i‚de‡
__MTD_UTILS_XALLOC_H__


28 
	#__MTD_UTILS_XALLOC_H__


	)

30 
	~<°d¨g.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

39 
__©åibuã__
((
unu£d
))

40 *
	$xmÆloc
(
size_t
 
size
)

42 *
±r
 = 
	`mÆloc
(
size
);

44 i‡(
±r
 =
NULL
 && 
size
 != 0)

45 
	`sys_îrmsg_dõ
("out of memory");

46  
±r
;

47 
	}
}

49 
__©åibuã__
((
unu£d
))

50 *
	$xˇŒoc
(
size_t
 
nmemb
, size_à
size
)

52 *
±r
 = 
	`ˇŒoc
(
nmemb
, 
size
);

54 i‡(
±r
 =
NULL
 && 
nmemb
 !0 && 
size
 != 0)

55 
	`sys_îrmsg_dõ
("out of memory");

56  
±r
;

57 
	}
}

59 
__©åibuã__
((
unu£d
))

60 *
	$xzÆloc
(
size_t
 
size
)

62  
	`xˇŒoc
(1, 
size
);

63 
	}
}

65 
__©åibuã__
((
unu£d
))

66 *
	$xªÆloc
(*
±r
, 
size_t
 
size
)

68 
±r
 = 
	`ªÆloc
’å, 
size
);

69 i‡(
±r
 =
NULL
 && 
size
 != 0)

70 
	`sys_îrmsg_dõ
("out of memory");

71  
±r
;

72 
	}
}

74 
__©åibuã__
((
unu£d
))

75 *
	$x°rdup
(c⁄° *
s
)

77 *
t
;

79 i‡(
s
 =
NULL
)

80  
NULL
;

81 
t
 = 
	`°rdup
(
s
);

82 i‡(
t
 =
NULL
)

83 
	`sys_îrmsg_dõ
("out of memory");

84  
t
;

85 
	}
}

87 #ifde‡
_GNU_SOURCE


89 
__©åibuã__
((
unu£d
))

90 
	$xa•rötf
(**
°Ω
, c⁄° *
fmt
, ...)

92 
˙t
;

93 
va_li°
 
≠
;

95 
	`va_°¨t
(
≠
, 
fmt
);

96 
˙t
 = 
	`va•rötf
(
°Ω
, 
fmt
, 
≠
);

97 
	`va_íd
(
≠
);

99 i‡(
˙t
 == -1)

100 
	`sys_îrmsg_dõ
("out of memory");

102  
˙t
;

103 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/linux-dev-lookup.c

1 
	~<sys/ty≥s.h
>

2 
	~<sys/°©.h
>

3 
	~<sys/sysma¸os.h
>

4 
	~<dúít.h
>

5 
	~<°rög.h
>

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

9 
	~"löux-dev-lookup.h
"

11 
	$blkåa˚_lookup_devi˚
(c⁄° *
ªdúe˘
, *
∑th
, 
maj
,

12 
mö
)

14 
dúít
 *
dú
;

15 
°©
 
°
;

16 
found
 = 0;

17 
DIR
 *
D
;

19 
D
 = 
	`›ídú
(
∑th
);

20 i‡(!
D
)

23 (
dú
 = 
	`ªaddú
(
D
)Ë!
NULL
) {

24 
fuŒ_∑th
[257];

26 i‡(!
	`°rcmp
(
dú
->
d_«me
, ".") || !strcmp(dir->d_name, ".."))

29 
	`•rötf
(
fuŒ_∑th
, "%s/%s", 
∑th
, 
dú
->
d_«me
);

30 i‡(
	`l°©
(
fuŒ_∑th
, &
°
) == -1) {

31 
	`≥º‹
("lstat");

35 i‡(
	`S_ISDIR
(
°
.
°_mode
)) {

36 
found
 = 
	`blkåa˚_lookup_devi˚
(
ªdúe˘
, 
fuŒ_∑th
,

37 
maj
, 
mö
);

38 i‡(
found
) {

39 
	`°r˝y
(
∑th
, 
fuŒ_∑th
);

44 i‡(!
	`S_ISBLK
(
°
.
°_mode
))

52 i‡(
ªdúe˘
) {

53 
	`°r˝y
(
∑th
, 
ªdúe˘
);

54 
found
 = 1;

58 i‡(
maj
 =
	`maj‹
(
°
.
°_rdev
Ë&& 
mö
 =
	`mö‹
(st.st_rdev)) {

59 
	`°r˝y
(
∑th
, 
fuŒ_∑th
);

60 
found
 = 1;

65 
	`˛o£dú
(
D
);

66  
found
;

67 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/linux-dev-lookup.h

1 #i‚de‡
LINUX_DEV_LOOKUP


2 
	#LINUX_DEV_LOOKUP


	)

4 
blkåa˚_lookup_devi˚
(c⁄° *
ªdúe˘
, *
∑th
, 
maj
,

5 
mö
);

	@/home/ysjin/Desktop/fio/fio/oslib/strcasestr.c

1 
	~<˘y≥.h
>

2 
	~<°ddef.h
>

4 #i‚de‡
CONFIG_STRCASESTR


6 *
	$°rˇ£°r
(c⁄° *
s1
, c⁄° *
s2
)

8 c⁄° *
s
 = 
s1
;

9 c⁄° *
p
 = 
s2
;

12 i‡(!*
p
)

13  (*Ë
s1
;

14 i‡((*
p
 =*
s
) ||

15 (
	`tﬁowî
(*
p
Ë=tﬁowî(*
s
))) {

16 ++
p
;

17 ++
s
;

19 
p
 = 
s2
;

20 i‡(!*
s
)

21  
NULL
;

22 
s
 = ++
s1
;

26  *
p
 ? 
NULL
 : (*Ë
s1
;

27 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/strcasestr.h

1 #ifde‡
CONFIG_STRCASESTR


3 
	~<°rög.h
>

7 #i‚de‡
FIO_STRCASESTR_H


8 
	#FIO_STRCASESTR_H


	)

10 *
°rˇ£°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

	@/home/ysjin/Desktop/fio/fio/oslib/strlcat.c

1 
	~<°rög.h
>

2 
	~"°æˇt.h
"

4 
size_t
 
	$°æˇt
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

6 
size_t
 
d°Àn
;

7 
size_t
 
§˛í
;

9 
d°Àn
 = 
	`°æí
(
d°
);

10 
size
 -
d°Àn
 + 1;

13 i‡(!
size
)

14  
d°Àn
;

16 
§˛í
 = 
	`°æí
(
§c
);

17 i‡(
§˛í
 > 
size
)

18 
§˛í
 = 
size
;

20 
	`mem˝y
(
d°
 + 
d°Àn
, 
§c
, 
§˛í
);

21 
d°
[
d°Àn
 + 
§˛í
] = '\0';

23  
d°Àn
 + 
§˛í
;

24 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/strlcat.h

1 #i‚de‡
FIO_STRLCAT_H


2 
	#FIO_STRLCAT_H


	)

4 
size_t
 
°æˇt
(*
d°
, c⁄° *
§c
, size_à
size
);

	@/home/ysjin/Desktop/fio/fio/oslib/strndup.c

1 
	~<°dlib.h
>

2 
	~"°∫dup.h
"

4 #i‚de‡
CONFIG_HAVE_STRNDUP


6 *
	$°∫dup
(c⁄° *
s
, 
size_t
 
n
)

8 *
°r
 = 
	`mÆloc
(
n
 + 1);

10 i‡(
°r
) {

11 
	`°∫˝y
(
°r
, 
s
, 
n
);

12 
°r
[
n
] = '\0';

15  
°r
;

16 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/strndup.h

1 
	~<°rög.h
>

3 #i‚de‡
CONFIG_HAVE_STRNDUP


5 *
°∫dup
(c⁄° *
s
, 
size_t
 
n
);

	@/home/ysjin/Desktop/fio/fio/oslib/strsep.c

1 
	~<°dio.h
>

3 *
	$°r£p
(**
°rögp
, c⁄° *
dñim
)

5 *
s
, *
tok
;

6 c⁄° *
•™p
;

7 
c
, 
sc
;

9 
s
 = *
°rögp
;

10 i‡(!
s
)

11  
NULL
;

13 
tok
 = 
s
;

15 
c
 = *
s
++;

16 
•™p
 = 
dñim
;

18 
sc
 = *
•™p
++;

19 i‡(
sc
 =
c
) {

20 i‡(
c
 == 0)

21 
s
 = 
NULL
;

23 
s
[-1] = 0;

24 *
°rögp
 = 
s
;

25  
tok
;

27 } 
sc
 != 0);

29 
	}
}

	@/home/ysjin/Desktop/fio/fio/oslib/strsep.h

1 #i‚de‡
FIO_STRSEP_LIB_H


2 
	#FIO_STRSEP_LIB_H


	)

4 *
°r£p
(**, const *);

	@/home/ysjin/Desktop/fio/fio/parse.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<uni°d.h
>

7 
	~<˘y≥.h
>

8 
	~<°rög.h
>

9 
	~<î∫o.h
>

10 
	~<limôs.h
>

11 
	~<°dlib.h
>

12 
	~<m©h.h
>

13 
	~<Êﬂt.h
>

15 
	~"compûî/compûî.h
"

16 
	~"∑r£.h
"

17 
	~"debug.h
"

18 
	~"›ti⁄s.h
"

19 
	~"›tgroup.h
"

20 
	~"mömax.h
"

21 
	~"lib/õì754.h
"

22 
	~"lib/pow2.h
"

24 #ifde‡
CONFIG_ARITHMETIC


25 
	~"y.èb.h
"

28 c⁄° *
	g›t_ty≥_«mes
[] = {

44 
fio_›ti⁄
 *
	g__fio_›ti⁄s
;

46 
	$vp_cmp
(c⁄° *
p1
, c⁄° *
p2
)

48 c⁄° 
vÆue_∑ú
 *
vp1
 = 
p1
;

49 c⁄° 
vÆue_∑ú
 *
vp2
 = 
p2
;

51  
	`°æí
(
vp2
->
ivÆ
Ë- såÀn(
vp1
->ival);

52 
	}
}

54 
	$posvÆ_s‹t
(
fio_›ti⁄
 *
o
, 
vÆue_∑ú
 *
vpm≠
)

56 c⁄° 
vÆue_∑ú
 *
vp
;

57 
íåõs
;

59 
	`mem£t
(
vpm≠
, 0, 
PARSE_MAX_VP
 * (
vÆue_∑ú
));

61 
íåõs
 = 0;É¡rõ†< 
PARSE_MAX_VP
;Éntries++) {

62 
vp
 = &
o
->
posvÆ
[
íåõs
];

63 i‡(!
vp
->
ivÆ
 || vp->ival[0] == '\0')

66 
	`mem˝y
(&
vpm≠
[
íåõs
], 
vp
, (*vp));

69 
	`qs‹t
(
vpm≠
, 
íåõs
, (
vÆue_∑ú
), 
vp_cmp
);

70 
	}
}

72 
	$show_›ti⁄_ønge
(
fio_›ti⁄
 *
o
,

73 
	$size_t
 (*
loggî
)(c⁄° *
f‹m©
, ...))

75 i‡(
o
->
ty≥
 =
FIO_OPT_FLOAT_LIST
) {

76 i‡(
o
->
möÂ
 =
DBL_MIN
 && o->
maxÂ
 =
DBL_MAX
)

79 
	`loggî
("%20s: mö=%f", "ønge", 
o
->
möÂ
);

80 i‡(
o
->
maxÂ
 !
DBL_MAX
)

81 
	`loggî
(", max=%f", 
o
->
maxÂ
);

82 
	`loggî
("\n");

83 } i‡(!
o
->
posvÆ
[0].
ivÆ
) {

84 i‡(!
o
->
mövÆ
 && !o->
maxvÆ
)

87 
	`loggî
("%20s: mö=%d", "ønge", 
o
->
mövÆ
);

88 i‡(
o
->
maxvÆ
)

89 
	`loggî
(", max=%d", 
o
->
maxvÆ
);

90 
	`loggî
("\n");

92 
	}
}

94 
	$show_›ti⁄_vÆues
(
fio_›ti⁄
 *
o
)

96 
i
;

98 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

99 c⁄° 
vÆue_∑ú
 *
vp
 = &
o
->
posvÆ
[
i
];

101 i‡(!
vp
->
ivÆ
)

104 
	`log_öfo
("%20s: %-10s", 
i
 =0 ? "vÆid vÆues" : "", 
vp
->
ivÆ
);

105 i‡(
vp
->
hñp
)

106 
	`log_öfo
(" %s", 
vp
->
hñp
);

107 
	`log_öfo
("\n");

110 i‡(
i
)

111 
	`log_öfo
("\n");

112 
	}
}

114 
	$show_›ti⁄_hñp
(
fio_›ti⁄
 *
o
, 
is_îr
)

116 c⁄° *
ty≥hñp
[] = {

131 
	`size_t
 (*
loggî
)(c⁄° *
f‹m©
, ...);

133 i‡(
is_îr
)

134 
loggî
 = 
log_îr
;

136 
loggî
 = 
log_öfo
;

138 i‡(
o
->
Æüs
)

139 
	`loggî
("%20s: %s\n", "Æüs", 
o
->
Æüs
);

141 
	`loggî
("%20s: %s\n", "ty≥", 
ty≥hñp
[
o
->
ty≥
]);

142 
	`loggî
("%20s: %s\n", "deÁu…", 
o
->
def
 ? o->def : "no default");

143 i‡(
o
->
¥of_«me
)

144 
	`loggî
("%20s: o∆y f‹Örofûê'%s'\n", "vÆid", 
o
->
¥of_«me
);

145 
	`show_›ti⁄_ønge
(
o
, 
loggî
);

146 
	`show_›ti⁄_vÆues
(
o
);

147 
	}
}

149 
	$gë_mu…_time
(c⁄° *
°r
, 
Àn
,

150 
is_£c⁄ds
)

152 c⁄° *
p
 = 
°r
;

153 *
c
;

154 
mu…
 = 1;

155 
i
;

160 (
p
 - 
°r
Ë<
Àn
) {

161 i‡(!
	`isdigô
((Ë*
p
) && (*p != '+') && (*p != '-'))

163 
p
++;

166 i‡(!
	`ißÕha
((Ë*
p
)) {

167 i‡(
is_£c⁄ds
)

173 
c
 = 
	`°rdup
(
p
);

174 
i
 = 0; i < 
	`°æí
(
c
); i++)

175 
c
[
i
] = 
	`tﬁowî
(c[i]);

177 i‡(!
	`°∫cmp
("us", 
c
, 2) || !strncmp("usec", c, 4))

178 
mu…
 = 1;

179 i‡(!
	`°∫cmp
("ms", 
c
, 2) || !strncmp("msec", c, 4))

180 
mu…
 = 1000;

181 i‡(!
	`°rcmp
("s", 
c
))

182 
mu…
 = 1000000;

183 i‡(!
	`°rcmp
("m", 
c
))

184 
mu…
 = 60 * 1000000UL;

185 i‡(!
	`°rcmp
("h", 
c
))

186 
mu…
 = 60 * 60 * 1000000UL;

187 i‡(!
	`°rcmp
("d", 
c
))

188 
mu…
 = 24 * 60 * 60 * 1000000ULL;

190 
	`‰ì
(
c
);

191  
mu…
;

192 
	}
}

194 
	$is_£∑øt‹
(
c
)

196 
c
) {

205 
	}
}

207 
	$__gë_mu…_byãs
(c⁄° *
p
, *
d©a
,

208 *
≥r˚¡
)

210 
kb_ba£
 = 
	`fio_gë_kb_ba£
(
d©a
);

211 
ªt
 = 1;

212 
i
, 
pow
 = 0, 
mu…
 = 
kb_ba£
;

213 *
c
;

215 i‡(!
p
)

218 
c
 = 
	`°rdup
(
p
);

220 
i
 = 0; i < 
	`°æí
(
c
); i++) {

221 
c
[
i
] = 
	`tﬁowî
(c[i]);

222 i‡(
	`is_£∑øt‹
(
c
[
i
])) {

223 
c
[
i
] = '\0';

231 i‡(!
	`°∫cmp
("pib", 
c
, 3)) {

232 
pow
 = 5;

233 i‡(
kb_ba£
 == 1000)

234 
mu…
 = 1024;

235 i‡(
kb_ba£
 == 1024)

236 
mu…
 = 1000;

237 } i‡(!
	`°∫cmp
("tib", 
c
, 3)) {

238 
pow
 = 4;

239 i‡(
kb_ba£
 == 1000)

240 
mu…
 = 1024;

241 i‡(
kb_ba£
 == 1024)

242 
mu…
 = 1000;

243 } i‡(!
	`°∫cmp
("gib", 
c
, 3)) {

244 
pow
 = 3;

245 i‡(
kb_ba£
 == 1000)

246 
mu…
 = 1024;

247 i‡(
kb_ba£
 == 1024)

248 
mu…
 = 1000;

249 } i‡(!
	`°∫cmp
("mib", 
c
, 3)) {

250 
pow
 = 2;

251 i‡(
kb_ba£
 == 1000)

252 
mu…
 = 1024;

253 i‡(
kb_ba£
 == 1024)

254 
mu…
 = 1000;

255 } i‡(!
	`°∫cmp
("kib", 
c
, 3)) {

256 
pow
 = 1;

257 i‡(
kb_ba£
 == 1000)

258 
mu…
 = 1024;

259 i‡(
kb_ba£
 == 1024)

260 
mu…
 = 1000;

261 } i‡(!
	`°∫cmp
("p", 
c
, 1) || !strncmp("pb", c, 2)) {

262 
pow
 = 5;

263 } i‡(!
	`°∫cmp
("t", 
c
, 1) || !strncmp("tb", c, 2)) {

264 
pow
 = 4;

265 } i‡(!
	`°∫cmp
("g", 
c
, 1) || !strncmp("gb", c, 2)) {

266 
pow
 = 3;

267 } i‡(!
	`°∫cmp
("m", 
c
, 1) || !strncmp("mb", c, 2)) {

268 
pow
 = 2;

269 } i‡(!
	`°∫cmp
("k", 
c
, 1) || !strncmp("kb", c, 2)) {

270 
pow
 = 1;

271 } i‡(!
	`°∫cmp
("%", 
c
, 1)) {

272 *
≥r˚¡
 = 1;

273 
	`‰ì
(
c
);

274  
ªt
;

277 
pow
--)

278 
ªt
 *(Ë
mu…
;

280 
	`‰ì
(
c
);

281  
ªt
;

282 
	}
}

284 
	$gë_mu…_byãs
(c⁄° *
°r
, 
Àn
, *
d©a
,

285 *
≥r˚¡
)

287 c⁄° *
p
 = 
°r
;

288 
digô_£í
 = 0;

290 i‡(
Àn
 < 2)

291  
	`__gë_mu…_byãs
(
°r
, 
d©a
, 
≥r˚¡
);

296 (
p
 - 
°r
Ë<
Àn
) {

297 i‡(!
	`isdigô
((Ë*
p
) &&

298 (((*
p
 !'+'Ë&& (*∞!'-')Ë|| 
digô_£í
))

300 
digô_£í
 |
	`isdigô
((Ë*
p
);

301 
p
++;

304 i‡(!
	`ißÕha
((Ë*
p
) && (*p != '%'))

305 
p
 = 
NULL
;

307  
	`__gë_mu…_byãs
(
p
, 
d©a
, 
≥r˚¡
);

308 
	}
}

310 
evÆu©e_¨ôhmëic_ex¥essi⁄
(c⁄° *
buf„r
, *
ivÆ
,

311 *
dvÆ
, 
im∂õd_unôs
,

312 
is_time
);

317 
	$°r_to_Êﬂt
(c⁄° *
°r
, *
vÆ
, 
is_time
)

319 #ifde‡
CONFIG_ARITHMETIC


320 
rc
;

321 
ivÆ
;

322 
dvÆ
;

324 i‡(
°r
[0] == '(') {

325 
rc
 = 
	`evÆu©e_¨ôhmëic_ex¥essi⁄
(
°r
, &
ivÆ
, &
dvÆ
, 1.0, 
is_time
);

326 i‡(!
rc
) {

327 *
vÆ
 = 
dvÆ
;

332  1 =
	`ssˇnf
(
°r
, "%lf", 
vÆ
);

333 
	}
}

338 
	$°r_to_decimÆ
(c⁄° *
°r
, *
vÆ
, 
kûo
, *
d©a
,

339 
is_£c⁄ds
, 
is_time
)

341 
Àn
, 
ba£
;

342 
rc
 = 1;

343 #ifde‡
CONFIG_ARITHMETIC


344 
ivÆ
;

345 
dvÆ
;

346 
im∂õd_unôs
 = 1.0;

349 
Àn
 = 
	`°æí
(
°r
);

350 i‡(!
Àn
)

353 #ifde‡
CONFIG_ARITHMETIC


354 i‡(
is_£c⁄ds
)

355 
im∂õd_unôs
 = 1000000.0;

356 i‡(
°r
[0] == '(')

357 
rc
 = 
	`evÆu©e_¨ôhmëic_ex¥essi⁄
(
°r
, &
ivÆ
, &
dvÆ
, 
im∂õd_unôs
, 
is_time
);

358 i‡(
°r
[0] ='(' && !
rc
) {

359 i‡(!
kûo
 && 
is_£c⁄ds
)

360 *
vÆ
 = 
ivÆ
 / 1000000LL;

362 *
vÆ
 = 
ivÆ
;

366 i‡(
rc
 == 1) {

367 i‡(
	`°r°r
(
°r
, "0x") || strstr(str, "0X"))

368 
ba£
 = 16;

370 
ba£
 = 10;

372 *
vÆ
 = 
	`°πﬁl
(
°r
, 
NULL
, 
ba£
);

373 i‡(*
vÆ
 =
LONG_MAX
 && 
î∫o
 =
ERANGE
)

377 i‡(
kûo
) {

378 
mu…
;

379 
≥rc
 = 0;

381 
mu…
 = 
	`gë_mu…_byãs
(
°r
, 
Àn
, 
d©a
, &
≥rc
);

382 i‡(
≥rc
)

383 *
vÆ
 = -1ULL - *val;

385 *
vÆ
 *
mu…
;

387 *
vÆ
 *
	`gë_mu…_time
(
°r
, 
Àn
, 
is_£c⁄ds
);

390 
	}
}

392 
	$check_°r_byãs
(c⁄° *
p
, *
vÆ
, *
d©a
)

394  
	`°r_to_decimÆ
(
p
, 
vÆ
, 1, 
d©a
, 0, 0);

395 
	}
}

397 
	$check_°r_time
(c⁄° *
p
, *
vÆ
, 
is_£c⁄ds
)

399  
	`°r_to_decimÆ
(
p
, 
vÆ
, 0, 
NULL
, 
is_£c⁄ds
, 1);

400 
	}
}

402 
	$°rù_bœnk_‰⁄t
(**
p
)

404 *
s
 = *
p
;

406 i‡(!
	`°æí
(
s
))

408 
	`is•a˚
((Ë*
s
))

409 
s
++;

411 *
p
 = 
s
;

412 
	}
}

414 
	$°rù_bœnk_íd
(*
p
)

416 *
°¨t
 = 
p
, *
s
;

418 i‡(!
	`°æí
(
p
))

421 
s
 = 
	`°rchr
(
p
, ';');

422 i‡(
s
)

423 *
s
 = '\0';

424 
s
 = 
	`°rchr
(
p
, '#');

425 i‡(
s
)

426 *
s
 = '\0';

427 i‡(
s
)

428 
p
 = 
s
;

430 
s
 = 
p
 + 
	`°æí
(p);

431 (
	`is•a˚
((Ë*
s
Ë|| 
	`is˙ål
((Ë*s)Ë&& (†> 
°¨t
))

432 
s
--;

434 *(
s
 + 1) = '\0';

435 
	}
}

437 
	$check_ønge_byãs
(c⁄° *
°r
, *
vÆ
, *
d©a
)

439 
__vÆ
;

441 i‡(!
	`°r_to_decimÆ
(
°r
, &
__vÆ
, 1, 
d©a
, 0, 0)) {

442 *
vÆ
 = 
__vÆ
;

447 
	}
}

449 
	$check_öt
(c⁄° *
p
, *
vÆ
)

451 i‡(!
	`°æí
(
p
))

453 i‡(
	`°r°r
(
p
, "0x") || strstr(p, "0X")) {

454 i‡(
	`ssˇnf
(
p
, "%x", 
vÆ
) == 1)

457 i‡(
	`ssˇnf
(
p
, "%u", 
vÆ
) == 1)

462 
	}
}

464 
size_t
 
	$›t_Àn
(c⁄° *
°r
)

466 *
po°fix
;

468 
po°fix
 = 
	`°rchr
(
°r
, ':');

469 i‡(!
po°fix
)

470  
	`°æí
(
°r
);

472  ()(
po°fix
 - 
°r
);

473 
	}
}

475 
	$°r_m©ch_Àn
(c⁄° 
vÆue_∑ú
 *
vp
, c⁄° *
°r
)

477  
	`max
(
	`°æí
(
vp
->
ivÆ
), 
	`›t_Àn
(
°r
));

478 
	}
}

480 
	#vÆ_°‹e
(
±r
, 
vÆ
, 
off
, 
‹
, 
d©a
, 
o
) \

482 
±r
 = 
	`td_v¨
((
d©a
), (
o
), (
off
)); \

483 i‡((
‹
)) \

484 *
±r
 |(
vÆ
); \

486 *
±r
 = (
vÆ
); \

487 } 0)

	)

489 c⁄° *
	$›t_ty≥_«me
(
fio_›ti⁄
 *
o
)

491 
	`compûëime_as£π
(
	`ARRAY_SIZE
(
›t_ty≥_«mes
Ë- 1 =
FIO_OPT_UNSUPPORTED
,

494 i‡(
o
->
ty≥
 <
FIO_OPT_UNSUPPORTED
)

495  
›t_ty≥_«mes
[
o
->
ty≥
];

498 
	}
}

500 
	$__h™dÀ_›ti⁄
(
fio_›ti⁄
 *
o
, c⁄° *
±r
, *
d©a
,

501 
fú°
, 
m‹e
, 
cuº
)

503 
û
=0, *
ûp
;

504 
fio_Â64_t
 *
Êp
;

505 
uŒ
, *
uŒp
;

506 
ul1
, 
ul2
;

507 
uf
;

508 **
˝
 = 
NULL
;

509 
ªt
 = 0, 
is_time
 = 0;

510 c⁄° 
vÆue_∑ú
 *
vp
;

511 
vÆue_∑ú
 
posvÆ
[
PARSE_MAX_VP
];

512 
i
, 
Æl_skù≥d
 = 1;

514 
	`d¥öt
(
FD_PARSE
, "__h™dÀ_›ti⁄=%s,Åy≥=%s,Öå=%s\n", 
o
->
«me
,

515 
	`›t_ty≥_«me
(
o
), 
±r
);

517 i‡(!
±r
 && 
o
->
ty≥
 !
FIO_OPT_STR_SET
 && o->ty≥ !
FIO_OPT_STR
) {

518 
	`log_îr
("O±i⁄ %†ªquúe†™árgumít\n", 
o
->
«me
);

522 
o
->
ty≥
) {

523 
FIO_OPT_STR
:

524 
FIO_OPT_STR_MULTI
: {

525 
fio_›t_°r_‚
 *
‚
 = 
o
->
cb
;

527 
	`posvÆ_s‹t
(
o
, 
posvÆ
);

529 
ªt
 = 1;

530 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

531 
vp
 = &
posvÆ
[
i
];

532 i‡(!
vp
->
ivÆ
 || vp->ival[0] == '\0')

534 
Æl_skù≥d
 = 0;

535 i‡(!
±r
)

537 i‡(!
	`°∫cmp
(
vp
->
ivÆ
, 
±r
, 
	`°r_m©ch_Àn
(vp,Ötr))) {

538 
ªt
 = 0;

539 i‡(
o
->
off1
)

540 
	`vÆ_°‹e
(
ûp
, 
vp
->
ovÆ
, 
o
->
off1
, vp->
‹vÆ
, 
d©a
, o);

545 i‡(
ªt
 && !
Æl_skù≥d
)

546 
	`show_›ti⁄_vÆues
(
o
);

547 i‡(
‚
)

548 
ªt
 = 
	`‚
(
d©a
, 
±r
);

551 
FIO_OPT_STR_VAL_TIME
:

552 
is_time
 = 1;

553 
FIO_OPT_INT
:

554 
FIO_OPT_STR_VAL
: {

555 
fio_›t_°r_vÆ_‚
 *
‚
 = 
o
->
cb
;

556 
tmp
[128], *
p
;

558 i‡(!
is_time
 && 
o
->is_time)

559 
is_time
 = 
o
->is_time;

561 
tmp
[(tmp) - 1] = '\0';

562 
	`°∫˝y
(
tmp
, 
±r
, (tmp) - 1);

563 
p
 = 
	`°rchr
(
tmp
, ',');

564 i‡(
p
)

565 *
p
 = '\0';

567 i‡(
is_time
)

568 
ªt
 = 
	`check_°r_time
(
tmp
, &
uŒ
, 
o
->
is_£c⁄ds
);

570 
ªt
 = 
	`check_°r_byãs
(
tmp
, &
uŒ
, 
d©a
);

572 
	`d¥öt
(
FD_PARSE
, "Ñë=%d, out=%Œu\n", 
ªt
, 
uŒ
);

574 i‡(
ªt
)

576 i‡(
o
->
pow2
 && !
	`is_powî_of_2
(
uŒ
)) {

577 
	`log_îr
("%s: mu° bê®powî-of-2\n", 
o
->
«me
);

581 i‡(
o
->
maxvÆ
 && 
uŒ
 > o->maxval) {

582 
	`log_îr
("max value out ofÑange: %llu"

583 " (%u max)\n", 
uŒ
, 
o
->
maxvÆ
);

586 i‡(
o
->
mövÆ
 && 
uŒ
 < o->minval) {

587 
	`log_îr
("min value out ofÑange: %lld"

588 " (%d mö)\n", 
uŒ
, 
o
->
mövÆ
);

591 i‡(
o
->
posvÆ
[0].
ivÆ
) {

592 
	`posvÆ_s‹t
(
o
, 
posvÆ
);

594 
ªt
 = 1;

595 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

596 
vp
 = &
posvÆ
[
i
];

597 i‡(!
vp
->
ivÆ
 || vp->ival[0] == '\0')

599 i‡(
vp
->
ovÆ
 =
uŒ
) {

600 
ªt
 = 0;

604 i‡(
ªt
) {

605 
	`log_îr
("fio: vÆuê%ŒuÇŸáŒowed:\n", 
uŒ
);

606 
	`show_›ti⁄_vÆues
(
o
);

611 i‡(
‚
)

612 
ªt
 = 
	`‚
(
d©a
, &
uŒ
);

614 i‡(
o
->
ty≥
 =
FIO_OPT_INT
) {

615 i‡(
fú°
)

616 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off1
, 0, 
d©a
, o);

617 i‡(
cuº
 == 1) {

618 i‡(
o
->
off2
)

619 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

621 i‡(
cuº
 == 2) {

622 i‡(
o
->
off3
)

623 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off3
, 0, 
d©a
, o);

625 i‡(!
m‹e
) {

626 i‡(
cuº
 < 1) {

627 i‡(
o
->
off2
)

628 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

630 i‡(
cuº
 < 2) {

631 i‡(
o
->
off3
)

632 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off3
, 0, 
d©a
, o);

636 i‡(
fú°
)

637 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off1
, 0, 
d©a
, o);

638 i‡(!
m‹e
) {

639 i‡(
o
->
off2
)

640 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

646 
FIO_OPT_FLOAT_LIST
: {

647 *
˝2
;

649 i‡(
fú°
) {

654 i‡(
o
->
off2
) {

655 
ul2
 = 0;

656 
ûp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off2
);

657 *
ûp
 = 
ul2
;

660 
Êp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

661 
i
 = 0; i < 
o
->
maxÀn
; i++)

662 
Êp
[
i
].
u
.
f
 = 0.0;

664 i‡(
cuº
 >
o
->
maxÀn
) {

665 
	`log_îr
("theÜistÉxceeding maxÜength %d\n",

666 
o
->
maxÀn
);

669 i‡(!
	`°r_to_Êﬂt
(
±r
, &
uf
, 0)) {

670 
	`log_îr
("nŸá flﬂtögÖoöàvÆue: %s\n", 
±r
);

673 i‡(
uf
 > 
o
->
maxÂ
) {

674 
	`log_îr
("value out ofÑange: %f"

675 " (øngêmax: %f)\n", 
uf
, 
o
->
maxÂ
);

678 i‡(
uf
 < 
o
->
möÂ
) {

679 
	`log_îr
("value out ofÑange: %f"

680 " (øngêmö: %f)\n", 
uf
, 
o
->
möÂ
);

684 
Êp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

685 
Êp
[
cuº
].
u
.
f
 = 
uf
;

687 
	`d¥öt
(
FD_PARSE
, " out=%f\n", 
uf
);

694 
˝2
 = 
	`°rchr
(
±r
, '.');

695 i‡(
˝2
 !
NULL
) {

696 
Àn
 = 0;

698 *++
˝2
 != '\0' && *cp2 >= '0' && *cp2 <= '9')

699 
Àn
++;

701 i‡(
o
->
off2
) {

702 
ûp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off2
);

703 i‡(
Àn
 > *
ûp
)

704 *
ûp
 = 
Àn
;

710 
FIO_OPT_STR_STORE
: {

711 
fio_›t_°r_‚
 *
‚
 = 
o
->
cb
;

713 i‡(!
	`°æí
(
±r
))

716 i‡(
o
->
off1
) {

717 
˝
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

718 *
˝
 = 
	`°rdup
(
±r
);

721 i‡(
‚
)

722 
ªt
 = 
	`‚
(
d©a
, 
±r
);

723 i‡(
o
->
posvÆ
[0].
ivÆ
) {

724 
	`posvÆ_s‹t
(
o
, 
posvÆ
);

726 
ªt
 = 1;

727 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

728 
vp
 = &
posvÆ
[
i
];

729 i‡(!
vp
->
ivÆ
 || vp->ivÆ[0] ='\0' || !
˝
)

731 
Æl_skù≥d
 = 0;

732 i‡(!
	`°∫cmp
(
vp
->
ivÆ
, 
±r
, 
	`°r_m©ch_Àn
(vp,Ötr))) {

733 *
ª°
;

735 
ªt
 = 0;

736 i‡(
vp
->
cb
)

737 
‚
 = 
vp
->
cb
;

738 
ª°
 = 
	`°r°r
(*
˝
 ?: 
±r
, ":");

739 i‡(
ª°
) {

740 i‡(*
˝
)

741 *
ª°
 = '\0';

742 
±r
 = 
ª°
 + 1;

744 
±r
 = 
NULL
;

750 i‡(!
Æl_skù≥d
) {

751 i‡(
ªt
 && !*
˝
)

752 
	`show_›ti⁄_vÆues
(
o
);

753 i‡(
ªt
 && *
˝
)

754 
ªt
 = 0;

755 i‡(
‚
 && 
±r
)

756 
ªt
 = 
	`‚
(
d©a
, 
±r
);

761 
FIO_OPT_RANGE
: {

762 
tmp
[128];

763 *
p1
, *
p2
;

765 
tmp
[(tmp) - 1] = '\0';

766 
	`°∫˝y
(
tmp
, 
±r
, (tmp) - 1);

769 
p1
 = 
	`°rchr
(
tmp
, ',');

770 i‡(
p1
)

771 *
p1
 = '\0';

773 
p1
 = 
	`°rchr
(
tmp
, '-');

774 i‡(!
p1
) {

775 
p1
 = 
	`°rchr
(
tmp
, ':');

776 i‡(!
p1
) {

777 
ªt
 = 1;

782 
p2
 = 
p1
 + 1;

783 *
p1
 = '\0';

784 
p1
 = 
tmp
;

786 
ªt
 = 1;

787 i‡(!
	`check_ønge_byãs
(
p1
, &
ul1
, 
d©a
) &&

788 !
	`check_ønge_byãs
(
p2
, &
ul2
, 
d©a
)) {

789 
ªt
 = 0;

790 i‡(
ul1
 > 
ul2
) {

791 
foo
 = 
ul1
;

793 
ul1
 = 
ul2
;

794 
ul2
 = 
foo
;

797 i‡(
fú°
) {

798 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off1
, 0, 
d©a
, o);

799 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off2
, 0, 
d©a
, o);

801 i‡(
cuº
 == 1) {

802 i‡(
o
->
off3
 && o->
off4
) {

803 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off3
, 0, 
d©a
, o);

804 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off4
, 0, 
d©a
, o);

807 i‡(
cuº
 == 2) {

808 i‡(
o
->
off5
 && o->
off6
) {

809 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off5
, 0, 
d©a
, o);

810 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off6
, 0, 
d©a
, o);

813 i‡(!
m‹e
) {

814 i‡(
cuº
 < 1) {

815 i‡(
o
->
off3
 && o->
off4
) {

816 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off3
, 0, 
d©a
, o);

817 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off4
, 0, 
d©a
, o);

820 i‡(
cuº
 < 2) {

821 i‡(
o
->
off5
 && o->
off6
) {

822 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off5
, 0, 
d©a
, o);

823 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off6
, 0, 
d©a
, o);

831 
FIO_OPT_BOOL
:

832 
FIO_OPT_STR_SET
: {

833 
fio_›t_öt_‚
 *
‚
 = 
o
->
cb
;

835 i‡(
±r
)

836 
ªt
 = 
	`check_öt
(
±r
, &
û
);

837 i‡(
o
->
ty≥
 =
FIO_OPT_BOOL
)

838 
ªt
 = 1;

840 
û
 = 1;

842 
	`d¥öt
(
FD_PARSE
, "Ñë=%d, out=%d\n", 
ªt
, 
û
);

844 i‡(
ªt
)

847 i‡(
o
->
maxvÆ
 && 
û
 > () o->maxval) {

848 
	`log_îr
("max value out ofÑange: %d (%d max)\n",

849 
û
, 
o
->
maxvÆ
);

852 i‡(
o
->
mövÆ
 && 
û
 < o->minval) {

853 
	`log_îr
("min value out ofÑange: %d (%d min)\n",

854 
û
, 
o
->
mövÆ
);

858 i‡(
o
->
√g
)

859 
û
 = !il;

861 i‡(
‚
)

862 
ªt
 = 
	`‚
(
d©a
, &
û
);

864 i‡(
fú°
)

865 
	`vÆ_°‹e
(
ûp
, 
û
, 
o
->
off1
, 0, 
d©a
, o);

866 i‡(!
m‹e
) {

867 i‡(
o
->
off2
)

868 
	`vÆ_°‹e
(
ûp
, 
û
, 
o
->
off2
, 0, 
d©a
, o);

873 
FIO_OPT_DEPRECATED
:

874 
	`log_öfo
("O±i⁄ %†i†dïªˇãd\n", 
o
->
«me
);

875 
ªt
 = 1;

878 
	`log_îr
("Bad o±i⁄Åy≥ %u\n", 
o
->
ty≥
);

879 
ªt
 = 1;

882 i‡(
ªt
)

883  
ªt
;

885 i‡(
o
->
vîify
) {

886 
ªt
 = 
o
->
	`vîify
(o, 
d©a
);

887 i‡(
ªt
) {

888 
	`log_îr
("Correct format for offending option\n");

889 
	`log_îr
("%20s: %s\n", 
o
->
«me
, o->
hñp
);

890 
	`show_›ti⁄_hñp
(
o
, 1);

894  
ªt
;

895 
	}
}

897 
	$h™dÀ_›ti⁄
(
fio_›ti⁄
 *
o
, c⁄° *
__±r
, *
d©a
)

899 *
o_±r
, *
±r
, *
±r2
;

900 
ªt
, 
d⁄e
;

902 
	`d¥öt
(
FD_PARSE
, "h™dÀ_›ti⁄=%s,Öå=%s\n", 
o
->
«me
, 
__±r
);

904 
o_±r
 = 
±r
 = 
NULL
;

905 i‡(
__±r
)

906 
o_±r
 = 
±r
 = 
	`°rdup
(
__±r
);

913 
d⁄e
 = 0;

914 
ªt
 = 1;

916 
__ªt
;

918 
±r2
 = 
NULL
;

919 i‡(
±r
 &&

920 (
o
->
ty≥
 !
FIO_OPT_STR_STORE
) &&

921 (
o
->
ty≥
 !
FIO_OPT_STR
) &&

922 (
o
->
ty≥
 !
FIO_OPT_FLOAT_LIST
)) {

923 
±r2
 = 
	`°rchr
(
±r
, ',');

924 i‡(
±r2
 && *(ptr2 + 1) == '\0')

925 *
±r2
 = '\0';

926 i‡(
o
->
ty≥
 !
FIO_OPT_STR_MULTI
 && o->ty≥ !
FIO_OPT_RANGE
) {

927 i‡(!
±r2
)

928 
±r2
 = 
	`°rchr
(
±r
, ':');

929 i‡(!
±r2
)

930 
±r2
 = 
	`°rchr
(
±r
, '-');

932 } i‡(
±r
 && 
o
->
ty≥
 =
FIO_OPT_FLOAT_LIST
) {

933 
±r2
 = 
	`°rchr
(
±r
, ':');

941 
__ªt
 = 
	`__h™dÀ_›ti⁄
(
o
, 
±r
, 
d©a
, !
d⁄e
, !!
±r2
, done);

942 i‡(
ªt
)

943 
ªt
 = 
__ªt
;

945 i‡(!
±r2
)

948 
±r
 = 
±r2
 + 1;

949 
d⁄e
++;

952 i‡(
o_±r
)

953 
	`‰ì
(
o_±r
);

954  
ªt
;

955 
	}
}

957 
fio_›ti⁄
 *
	$föd_›ti⁄
(
fio_›ti⁄
 *
›ti⁄s
, c⁄° *
›t
)

959 
fio_›ti⁄
 *
o
;

961 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

962 i‡(!
	`o_m©ch
(
o
, 
›t
))

964 i‡(
o
->
ty≥
 =
FIO_OPT_UNSUPPORTED
) {

965 
	`log_îr
("O±i⁄ <%s>: %s\n", 
o
->
«me
, o->
hñp
);

969  
o
;

972  
NULL
;

973 
	}
}

976 
fio_›ti⁄
 *
	$gë_›ti⁄
(*
›t
,

977 
fio_›ti⁄
 *
›ti⁄s
, **
po°
)

979 
fio_›ti⁄
 *
o
;

980 *
ªt
;

982 
ªt
 = 
	`°rchr
(
›t
, '=');

983 i‡(
ªt
) {

984 *
po°
 = 
ªt
;

985 *
ªt
 = '\0';

986 
ªt
 = 
›t
;

987 (*
po°
)++;

988 
	`°rù_bœnk_íd
(
ªt
);

989 
o
 = 
	`föd_›ti⁄
(
›ti⁄s
, 
ªt
);

991 
o
 = 
	`föd_›ti⁄
(
›ti⁄s
, 
›t
);

992 *
po°
 = 
NULL
;

995  
o
;

996 
	}
}

998 
	$›t_cmp
(c⁄° *
p1
, c⁄° *
p2
)

1000 
fio_›ti⁄
 *
o
;

1001 *
s
, *
foo
;

1002 
¥io1
, 
¥io2
;

1004 
¥io1
 = 
¥io2
 = 0;

1006 i‡(*(**)
p1
) {

1007 
s
 = 
	`°rdup
(*((**Ë
p1
));

1008 
o
 = 
	`gë_›ti⁄
(
s
, 
__fio_›ti⁄s
, &
foo
);

1009 i‡(
o
)

1010 
¥io1
 = 
o
->
¥io
;

1011 
	`‰ì
(
s
);

1013 i‡(*(**)
p2
) {

1014 
s
 = 
	`°rdup
(*((**Ë
p2
));

1015 
o
 = 
	`gë_›ti⁄
(
s
, 
__fio_›ti⁄s
, &
foo
);

1016 i‡(
o
)

1017 
¥io2
 = 
o
->
¥io
;

1018 
	`‰ì
(
s
);

1021  
¥io2
 - 
¥io1
;

1022 
	}
}

1024 
	$s‹t_›ti⁄s
(**
›ts
, 
fio_›ti⁄
 *
›ti⁄s
, 
num_›ts
)

1026 
__fio_›ti⁄s
 = 
›ti⁄s
;

1027 
	`qs‹t
(
›ts
, 
num_›ts
, (*), 
›t_cmp
);

1028 
__fio_›ti⁄s
 = 
NULL
;

1029 
	}
}

1031 
	$add_to_dump_li°
(
fio_›ti⁄
 *
o
, 
Êi°_hód
 *
dump_li°
,

1032 c⁄° *
po°
)

1034 
¥öt_›ti⁄
 *
p
;

1036 i‡(!
dump_li°
)

1039 
p
 = 
	`mÆloc
((*p));

1040 
p
->
«me
 = 
	`°rdup
(
o
->name);

1041 i‡(
po°
)

1042 
p
->
vÆue
 = 
	`°rdup
(
po°
);

1044 
p
->
vÆue
 = 
NULL
;

1046 
	`Êi°_add_èû
(&
p
->
li°
, 
dump_li°
);

1047 
	}
}

1049 
	$∑r£_cmd_›ti⁄
(c⁄° *
›t
, c⁄° *
vÆ
,

1050 
fio_›ti⁄
 *
›ti⁄s
, *
d©a
,

1051 
Êi°_hód
 *
dump_li°
)

1053 
fio_›ti⁄
 *
o
;

1055 
o
 = 
	`föd_›ti⁄
(
›ti⁄s
, 
›t
);

1056 i‡(!
o
) {

1057 
	`log_îr
("Bad o±i⁄ <%s>\n", 
›t
);

1061 i‡(
	`h™dÀ_›ti⁄
(
o
, 
vÆ
, 
d©a
)) {

1062 
	`log_îr
("fio: faûedÖ¨sög %s=%s\n", 
›t
, 
vÆ
);

1066 
	`add_to_dump_li°
(
o
, 
dump_li°
, 
vÆ
);

1068 
	}
}

1070 
	$∑r£_›ti⁄
(*
›t
, c⁄° *
öput
,

1071 
fio_›ti⁄
 *
›ti⁄s
, fio_›ti⁄ **
o
, *
d©a
,

1072 
Êi°_hód
 *
dump_li°
)

1074 *
po°
;

1076 i‡(!
›t
) {

1077 
	`log_îr
("fio: faûedÖ¨sög %s\n", 
öput
);

1078 *
o
 = 
NULL
;

1082 *
o
 = 
	`gë_›ti⁄
(
›t
, 
›ti⁄s
, &
po°
);

1083 i‡(!*
o
) {

1084 i‡(
po°
) {

1085 
Àn
 = 
	`°æí
(
›t
);

1086 i‡(
›t
 + 
Àn
 + 1 !
po°
)

1087 
	`memmove
(
›t
 + 
Àn
 + 1, 
po°
, 
	`°æí
(post));

1088 
›t
[
Àn
] = '=';

1093 i‡(
	`h™dÀ_›ti⁄
(*
o
, 
po°
, 
d©a
)) {

1094 
	`log_îr
("fio: faûedÖ¨sög %s\n", 
öput
);

1098 
	`add_to_dump_li°
(*
o
, 
dump_li°
, 
po°
);

1100 
	}
}

1106 
	$°rög_di°™˚
(c⁄° *
s1
, c⁄° *
s2
)

1108 
s1_Àn
 = 
	`°æí
(
s1
);

1109 
s2_Àn
 = 
	`°æí
(
s2
);

1110 *
p
, *
q
, *
r
;

1111 
i
, 
j
;

1113 
p
 = 
	`mÆloc
((Ë* (
s2_Àn
 + 1));

1114 
q
 = 
	`mÆloc
((Ë* (
s2_Àn
 + 1));

1116 
p
[0] = 0;

1117 
i
 = 1; i <
s2_Àn
; i++)

1118 
p
[
i
] =Ö[i - 1] + 1;

1120 
i
 = 1; i <
s1_Àn
; i++) {

1121 
q
[0] = 
p
[0] + 1;

1122 
j
 = 1; j <
s2_Àn
; j++) {

1123 
sub
 = 
p
[
j
 - 1];

1124 
pmö
;

1126 i‡(
s1
[
i
 - 1] !
s2
[
j
 - 1])

1127 
sub
++;

1129 
pmö
 = 
	`mö
(
q
[
j
 - 1] + 1, 
sub
);

1130 
q
[
j
] = 
	`mö
(
p
[j] + 1, 
pmö
);

1132 
r
 = 
p
;

1133 
p
 = 
q
;

1134 
q
 = 
r
;

1137 
i
 = 
p
[
s2_Àn
];

1138 
	`‰ì
(
p
);

1139 
	`‰ì
(
q
);

1140  
i
;

1141 
	}
}

1147 
	$°rög_di°™˚_ok
(c⁄° *
›t
, 
di°™˚
)

1149 
size_t
 
Àn
;

1151 
Àn
 = 
	`°æí
(
›t
);

1152 
Àn
 = (len + 1) / 2;

1153  
di°™˚
 <
Àn
;

1154 
	}
}

1156 
fio_›ti⁄
 *
	$föd_chûd
(
fio_›ti⁄
 *
›ti⁄s
,

1157 
fio_›ti⁄
 *
o
)

1159 
fio_›ti⁄
 *
__o
;

1161 
__o
 = 
›ti⁄s
 + 1; __o->
«me
; __o++)

1162 i‡(
__o
->
∑ª¡
 && !
	`°rcmp
(__o->∑ª¡, 
o
->
«me
))

1163  
__o
;

1165  
NULL
;

1166 
	}
}

1168 
	$__¥öt_›ti⁄
(
fio_›ti⁄
 *
o
, fio_›ti⁄ *
‹g
,

1169 
Àvñ
)

1171 
«me
[256], *
p
;

1172 
dïth
;

1174 i‡(!
o
)

1176 i‡(!
‹g
)

1177 
‹g
 = 
o
;

1179 
p
 = 
«me
;

1180 
dïth
 = 
Àvñ
;

1181 
dïth
--)

1182 
p
 +
	`•rötf
(p, "%s", " ");

1184 
	`•rötf
(
p
, "%s", 
o
->
«me
);

1186 
	`log_öfo
("%-24s: %s\n", 
«me
, 
o
->
hñp
);

1187 
	}
}

1189 
	$¥öt_›ti⁄
(
fio_›ti⁄
 *
o
)

1191 
fio_›ti⁄
 *
∑ª¡
;

1192 
fio_›ti⁄
 *
__o
;

1193 
¥öãd
;

1194 
Àvñ
;

1196 
	`__¥öt_›ti⁄
(
o
, 
NULL
, 0);

1197 
∑ª¡
 = 
o
;

1198 
Àvñ
 = 0;

1200 
Àvñ
++;

1201 
¥öãd
 = 0;

1203 (
__o
 = 
	`föd_chûd
(
o
, 
∑ª¡
)Ë!
NULL
) {

1204 
	`__¥öt_›ti⁄
(
__o
, 
o
, 
Àvñ
);

1205 
o
 = 
__o
;

1206 
¥öãd
++;

1209 
∑ª¡
 = 
o
;

1210 } 
¥öãd
);

1211 
	}
}

1213 
	$show_cmd_hñp
(
fio_›ti⁄
 *
›ti⁄s
, c⁄° *
«me
)

1215 
fio_›ti⁄
 *
o
, *
˛o£°
;

1216 
be°_di°
 = -1U;

1217 
found
 = 0;

1218 
show_Æl
 = 0;

1220 i‡(!
«me
 || !
	`°rcmp
(name, "all"))

1221 
show_Æl
 = 1;

1223 
˛o£°
 = 
NULL
;

1224 
be°_di°
 = -1;

1225 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1226 
m©ch
 = 0;

1228 i‡(
o
->
ty≥
 =
FIO_OPT_DEPRECATED
)

1230 i‡(!
exec_¥ofûe
 && 
o
->
¥of_«me
)

1232 i‡(
exec_¥ofûe
 && !(
o
->
¥of_«me
 && !
	`°rcmp
(exec_profile, o->prof_name)))

1235 i‡(
«me
) {

1236 i‡(!
	`°rcmp
(
«me
, 
o
->name) ||

1237 (
o
->
Æüs
 && !
	`°rcmp
(
«me
, o->alias)))

1238 
m©ch
 = 1;

1240 
di°
;

1242 
di°
 = 
	`°rög_di°™˚
(
«me
, 
o
->name);

1243 i‡(
di°
 < 
be°_di°
) {

1244 
be°_di°
 = 
di°
;

1245 
˛o£°
 = 
o
;

1250 i‡(
show_Æl
 || 
m©ch
) {

1251 
found
 = 1;

1252 i‡(
m©ch
)

1253 
	`log_öfo
("%20s: %s\n", 
o
->
«me
, o->
hñp
);

1254 i‡(
show_Æl
) {

1255 i‡(!
o
->
∑ª¡
)

1256 
	`¥öt_›ti⁄
(
o
);

1261 i‡(!
m©ch
)

1264 
	`show_›ti⁄_hñp
(
o
, 0);

1267 i‡(
found
)

1270 
	`log_îr
("Nÿsuch comm™d: %s", 
«me
);

1276 i‡(
˛o£°
 && 
be°_di°
 < 3) {

1277 
	`log_öfo
(" - showing closest match\n");

1278 
	`log_öfo
("%20s: %s\n", 
˛o£°
->
«me
, clo£°->
hñp
);

1279 
	`show_›ti⁄_hñp
(
˛o£°
, 0);

1281 
	`log_öfo
("\n");

1284 
	}
}

1289 
	$fûl_deÁu…_›ti⁄s
(*
d©a
, 
fio_›ti⁄
 *
›ti⁄s
)

1291 
fio_›ti⁄
 *
o
;

1293 
	`d¥öt
(
FD_PARSE
, "filling default options\n");

1295 
o
 = &
›ti⁄s
[0]; o->
«me
; o++)

1296 i‡(
o
->
def
)

1297 
	`h™dÀ_›ti⁄
(
o
, o->
def
, 
d©a
);

1298 
	}
}

1300 
	$›ti⁄_öô
(
fio_›ti⁄
 *
o
)

1302 i‡(
o
->
ty≥
 =
FIO_OPT_DEPRECATED
 || o->ty≥ =
FIO_OPT_UNSUPPORTED
)

1304 i‡(
o
->
«me
 && !o->
 ame
)

1305 
	`log_îr
("O±i⁄ %s: missögÜ⁄g o±i⁄Çame\n", 
o
->
«me
);

1306 i‡(
o
->
ty≥
 =
FIO_OPT_BOOL
) {

1307 
o
->
mövÆ
 = 0;

1308 
o
->
maxvÆ
 = 1;

1310 i‡(
o
->
ty≥
 =
FIO_OPT_INT
) {

1311 i‡(!
o
->
maxvÆ
)

1312 
o
->
maxvÆ
 = 
UINT_MAX
;

1314 i‡(
o
->
ty≥
 =
FIO_OPT_FLOAT_LIST
) {

1315 
o
->
möÂ
 = 
DBL_MIN
;

1316 
o
->
maxÂ
 = 
DBL_MAX
;

1318 i‡(
o
->
ty≥
 =
FIO_OPT_STR_SET
 && o->
def
 && !o->
no_w¨n_def
) {

1319 
	`log_îr
("Option %s: string set option with"

1320 " deÁu… wû»Æway†bêåue\n", 
o
->
«me
);

1322 i‡(!
o
->
cb
 && !o->
off1
)

1323 
	`log_îr
("O±i⁄ %s:Çeôhî cbÇ‹ off£àgiví\n", 
o
->
«me
);

1324 i‡(!
o
->
ˇãg‹y
) {

1325 
	`log_öfo
("O±i⁄ %s:Çÿˇãg‹y deföed. SëtögÅÿmisc\n", 
o
->
«me
);

1326 
o
->
ˇãg‹y
 = 
FIO_OPT_C_GENERAL
;

1327 
o
->
group
 = 
FIO_OPT_G_INVALID
;

1329 i‡(
o
->
ty≥
 =
FIO_OPT_STR
 || o->ty≥ =
FIO_OPT_STR_STORE
 ||

1330 
o
->
ty≥
 =
FIO_OPT_STR_MULTI
)

1332 
	}
}

1338 
	$›ti⁄s_öô
(
fio_›ti⁄
 *
›ti⁄s
)

1340 
fio_›ti⁄
 *
o
;

1342 
	`d¥öt
(
FD_PARSE
, "init options\n");

1344 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1345 
	`›ti⁄_öô
(
o
);

1346 i‡(
o
->
övî£
)

1347 
o
->
öv_›t
 = 
	`föd_›ti⁄
(
›ti⁄s
, o->
övî£
);

1349 
	}
}

1351 
	$›ti⁄s_mem_du≥
(
fio_›ti⁄
 *
›ti⁄s
, *
d©a
)

1353 
fio_›ti⁄
 *
o
;

1354 **
±r
;

1356 
	`d¥öt
(
FD_PARSE
, "dup options\n");

1358 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1359 i‡(
o
->
ty≥
 !
FIO_OPT_STR_STORE
)

1362 
±r
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

1363 i‡(*
±r
)

1364 *
±r
 = 
	`°rdup
(*ptr);

1366 
	}
}

1368 
	$›ti⁄s_‰ì
(
fio_›ti⁄
 *
›ti⁄s
, *
d©a
)

1370 
fio_›ti⁄
 *
o
;

1371 **
±r
;

1373 
	`d¥öt
(
FD_PARSE
, "free options\n");

1375 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1376 i‡(
o
->
ty≥
 !
FIO_OPT_STR_STORE
 || !o->
off1
 || o->
no_‰ì
)

1379 
±r
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

1380 i‡(*
±r
) {

1381 
	`‰ì
(*
±r
);

1382 *
±r
 = 
NULL
;

1385 
	}
}

	@/home/ysjin/Desktop/fio/fio/parse.h

1 #i‚de‡
FIO_PARSE_H


2 
	#FIO_PARSE_H


	)

4 
	~<öây≥s.h
>

5 
	~"Êi°.h
"

10 
	efio_›t_ty≥
 {

11 
	mFIO_OPT_INVALID
 = 0,

12 
	mFIO_OPT_STR
,

13 
	mFIO_OPT_STR_MULTI
,

14 
	mFIO_OPT_STR_VAL
,

15 
	mFIO_OPT_STR_VAL_TIME
,

16 
	mFIO_OPT_STR_STORE
,

17 
	mFIO_OPT_RANGE
,

18 
	mFIO_OPT_INT
,

19 
	mFIO_OPT_BOOL
,

20 
	mFIO_OPT_FLOAT_LIST
,

21 
	mFIO_OPT_STR_SET
,

22 
	mFIO_OPT_DEPRECATED
,

23 
	mFIO_OPT_UNSUPPORTED
,

29 
	svÆue_∑ú
 {

30 c⁄° *
	mivÆ
;

31 
	movÆ
;

32 c⁄° *
	mhñp
;

33 
	m‹vÆ
;

34 *
	mcb
;

37 
	#OPT_LEN_MAX
 4096

	)

38 
	#PARSE_MAX_VP
 24

	)

43 
	sfio_›ti⁄
 {

44 c⁄° *
	m«me
;

45 c⁄° *
	m ame
;

46 c⁄° *
	mÆüs
;

47 
fio_›t_ty≥
 
	mty≥
;

48 
	moff1
;

49 
	moff2
;

50 
	moff3
;

51 
	moff4
;

52 
	moff5
;

53 
	moff6
;

54 
	mmaxvÆ
;

55 
	mmövÆ
;

56 
	mmaxÂ
;

57 
	mmöÂ
;

58 
	möãrvÆ
;

59 
	mmaxÀn
;

60 
	m√g
;

61 
	m¥io
;

62 *
	mcb
;

63 c⁄° *
	mhñp
;

64 c⁄° *
	mdef
;

65 
vÆue_∑ú
 
	mposvÆ
[
PARSE_MAX_VP
];

66 c⁄° *
	m∑ª¡
;

67 
	mhide
;

68 
	mhide_⁄_£t
;

69 c⁄° *
	mövî£
;

70 
fio_›ti⁄
 *
	möv_›t
;

71 (*
	mvîify
)(
	mfio_›ti⁄
 *, *);

72 c⁄° *
	m¥of_«me
;

73 *
	m¥of_›ts
;

74 
uöt64_t
 
	mˇãg‹y
;

75 
uöt64_t
 
	mgroup
;

76 *
	mgui_d©a
;

77 
	mis_£c⁄ds
;

78 
	mis_time
;

79 
	mno_w¨n_def
;

80 
	mpow2
;

81 
	mno_‰ì
;

84 
∑r£_›ti⁄
(*, c⁄° *, 
fio_›ti⁄
 *, fio_›ti⁄ **, *, 
Êi°_hód
 *);

85 
s‹t_›ti⁄s
(**, 
fio_›ti⁄
 *, );

86 
∑r£_cmd_›ti⁄
(c⁄° *
t
, c⁄° *
l
, 
fio_›ti⁄
 *, *, 
Êi°_hód
 *);

87 
show_cmd_hñp
(
fio_›ti⁄
 *, const *);

88 
fûl_deÁu…_›ti⁄s
(*, 
fio_›ti⁄
 *);

89 
›ti⁄s_öô
(
fio_›ti⁄
 *);

90 
›ti⁄s_mem_du≥
(
fio_›ti⁄
 *, *);

91 
›ti⁄s_‰ì
(
fio_›ti⁄
 *, *);

93 
°rù_bœnk_‰⁄t
(**);

94 
°rù_bœnk_íd
(*);

95 
°r_to_decimÆ
(const *, *, , *, , );

96 
check_°r_byãs
(c⁄° *
p
, *
vÆ
, *
d©a
);

97 
check_°r_time
(c⁄° *
p
, *
vÆ
, );

98 
°r_to_Êﬂt
(c⁄° *
°r
, *
vÆ
, 
is_time
);

100 
°rög_di°™˚
(c⁄° *
s1
, c⁄° *
s2
);

101 
°rög_di°™˚_ok
(c⁄° *
s1
, 
di°
);

106 (
	tfio_›t_°r_‚
)(*, const *);

107 (
	tfio_›t_°r_vÆ_‚
)(*, *);

108 (
	tfio_›t_öt_‚
)(*, *);

110 
thªad_›ti⁄s
;

111 
ölöe
 *
	$td_v¨
(*
to
, 
fio_›ti⁄
 *
o
, 
off£t
)

113 *
ªt
;

115 i‡(
o
->
¥of_›ts
)

116 
ªt
 = 
o
->
¥of_›ts
;

118 
ªt
 = 
to
;

120  (*Ë
ªt
 + 
off£t
;

121 
	}
}

123 
ölöe
 
	$∑r£_is_≥r˚¡
(
vÆ
)

125  
vÆ
 <= -1ULL && val >= (-1ULL - 100ULL);

126 
	}
}

128 
	s¥öt_›ti⁄
 {

129 
Êi°_hód
 
	mli°
;

130 *
	m«me
;

131 *
	mvÆue
;

	@/home/ysjin/Desktop/fio/fio/printing.c

1 
	~<gtk/gtk.h
>

2 
	~<ˇúo.h
>

4 
	~"gfio.h
"

5 
	~"ˇúo_ãxt_hñ≥rs.h
"

6 
	~"¥ötög.h
"

9 
	s¥ötög_∑ømëîs
 {

10 
gdoubÀ
 
	mwidth
, 
	mheight
, 
	mxdpi
, 
	mydpi
;

11 
GtkPrötSëtögs
 *
	m£âögs
;

12 
GtkPageSëup
 *
	m∑ge_£tup
;

13 } 
	g¥öt_∑øms
 = { 0 };

15 
	$begö_¥öt
(
GtkPrötO≥øti⁄
 *
›î©i⁄
,

16 
GtkPrötC⁄ãxt
 *
c⁄ãxt
, 
gpoöãr
 
d©a
)

18 
¥öt_∑øms
.
∑ge_£tup
 = 
	`gtk_¥öt_c⁄ãxt_gë_∑ge_£tup
(
c⁄ãxt
);

20 
¥öt_∑øms
.
width
 = 
	`gtk_¥öt_c⁄ãxt_gë_width
(
c⁄ãxt
);

21 
¥öt_∑øms
.
height
 = 
	`gtk_¥öt_c⁄ãxt_gë_height
(
c⁄ãxt
);

22 
¥öt_∑øms
.
xdpi
 = 
	`gtk_¥öt_c⁄ãxt_gë_dpi_x
(
c⁄ãxt
);

23 
¥öt_∑øms
.
ydpi
 = 
	`gtk_¥öt_c⁄ãxt_gë_dpi_y
(
c⁄ãxt
);

26 
	`gtk_¥öt_›î©i⁄_£t_n_∑ges
(
›î©i⁄
, 1);

27 
	}
}

29 
	$ªsu…s_døw_∑ge
(
GtkPrötO≥øti⁄
 *
›î©i⁄
,

30 
GtkPrötC⁄ãxt
 *
c⁄ãxt
, 
göt
 
∑ge_ƒ
,

31 
gpoöãr
 
d©a
)

33 
ˇúo_t
 *
¸
;

34 
°r
[32];

35 
x
, 
y
;

37 
¸
 = 
	`gtk_¥öt_c⁄ãxt_gë_ˇúo_c⁄ãxt
(
c⁄ãxt
);

39 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

40 
	`ˇúo_£t_löe_width
(
¸
, 5.0);

41 
	`ˇúo_move_to
(
¸
, 0.0, 0.0);

42 
	`ˇúo_löe_to
(
¸
, 
¥öt_∑øms
.
width
,Öröt_∑øms.
height
);

43 
	`ˇúo_move_to
(
¸
, 0.0, 
¥öt_∑øms
.
height
);

44 
	`ˇúo_löe_to
(
¸
, 
¥öt_∑øms
.
width
, 0.0);

45 
	`ˇúo_°roke
(
¸
);

47 
x
 = 
¥öt_∑øms
.
width
 / 4.0;

48 
y
 = 
¥öt_∑øms
.
height
 / 5.0;

49 
	`•rötf
(
°r
, "(%g,%g)", 
x
, 
y
);

50 
	`døw_right_ju°ifõd_ãxt
(
¸
, "S™s", 
x
, 
y
, 12.0, 
°r
);

51 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

52 
	`ˇúo_£t_löe_width
(
¸
, 2.0);

53 
	`ˇúo_move_to
(
¸
, 
x
, 
y
 - 30.0);

54 
	`ˇúo_löe_to
(
¸
, 
x
, 
y
 + 30.0);

55 
	`ˇúo_move_to
(
¸
, 
x
 - 30, 
y
);

56 
	`ˇúo_löe_to
(
¸
, 
x
 + 30, 
y
);

58 
y
 *= 4.0;

59 
x
 *= 2.0;

60 
	`•rötf
(
°r
, "(%g,%g)", 
x
, 
y
);

61 
	`døw_right_ju°ifõd_ãxt
(
¸
, "S™s", 
x
, 
y
, 12.0, 
°r
);

62 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

63 
	`ˇúo_£t_löe_width
(
¸
, 2.0);

64 
	`ˇúo_move_to
(
¸
, 
x
, 
y
 - 30.0);

65 
	`ˇúo_löe_to
(
¸
, 
x
, 
y
 + 30.0);

66 
	`ˇúo_move_to
(
¸
, 
x
 - 30, 
y
);

67 
	`ˇúo_löe_to
(
¸
, 
x
 + 30, 
y
);

68 
	`ˇúo_°roke
(
¸
);

69 
	}
}

71 
	$¥ötög_îr‹_dülog
(
GtkWidgë
 *
wödow
, 
GEº‹
 *
¥öt_îr‹
)

73 
GtkWidgë
 *
îr‹_dülog
;

75 
	`¥ötf
("printing_error_dialog called\n");

76 
	`¥ötf
("îr‹ mesßgê%s\n", 
¥öt_îr‹
->
mesßge
);

77 
îr‹_dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
wödow
),

78 
GTK_DIALOG_DESTROY_WITH_PARENT
, 
GTK_MESSAGE_ERROR
,

79 
GTK_BUTTONS_CLOSE
, "PrintÉrror:\n%s",

80 
¥öt_îr‹
->
mesßge
);

81 
	`g_sig«l_c⁄√˘
(
îr‹_dülog
, "response",

82 
	`G_CALLBACK
(
gtk_widgë_de°roy
), 
NULL
);

83 
	`gtk_widgë_show
(
îr‹_dülog
);

84 
	}
}

86 
	$ªsu…s_¥öt_d⁄e
(
GtkPrötO≥øti⁄
 *
›î©i⁄
,

87 
GtkPrötO≥øti⁄Resu…
 
ªsu…
, 
gpoöãr
 
d©a
)

89 
GEº‹
 *
¥öt_îr‹
;

90 
gui_íåy
 *
ge
 = 
d©a
;

92 i‡(
ªsu…
 !
GTK_PRINT_OPERATION_RESULT_ERROR
)

95 
	`gtk_¥öt_›î©i⁄_gë_îr‹
(
›î©i⁄
, &
¥öt_îr‹
);

96 
	`¥ötög_îr‹_dülog
(
ge
->
ªsu…s_wödow
, 
¥öt_îr‹
);

97 
	`g_îr‹_‰ì
(
¥öt_îr‹
);

98 
	}
}

100 
	$gfio_¥öt_ªsu…s
(
gui_íåy
 *
ge
)

102 
GtkPrötO≥øti⁄
 *
¥öt
;

103 
GtkPrötO≥øti⁄Resu…
 
ªs
;

104 
GEº‹
 *
¥öt_îr‹
;

106 
¥öt
 = 
	`gtk_¥öt_›î©i⁄_√w
();

107 i‡(
¥öt_∑øms
.
£âögs
 !
NULL
)

108 
	`gtk_¥öt_›î©i⁄_£t_¥öt_£âögs
(
¥öt
, 
¥öt_∑øms
.
£âögs
);

110 i‡(
¥öt_∑øms
.
∑ge_£tup
 !
NULL
)

111 
	`gtk_¥öt_›î©i⁄_£t_deÁu…_∑ge_£tup
(
¥öt
, 
¥öt_∑øms
.
∑ge_£tup
);

113 
	`g_sig«l_c⁄√˘
(
¥öt
, "begö_¥öt", 
	`G_CALLBACK
(
begö_¥öt
), 
NULL
);

114 
	`g_sig«l_c⁄√˘
(
¥öt
, "døw_∑ge", 
	`G_CALLBACK
(
ªsu…s_døw_∑ge
), 
NULL
);

115 
	`g_sig«l_c⁄√˘
(
¥öt
, "d⁄e", 
	`G_CALLBACK
(
ªsu…s_¥öt_d⁄e
), 
NULL
);

116 
	`gtk_¥öt_›î©i⁄_£t_Ælow_async
(
¥öt
, 
TRUE
);

117 
ªs
 = 
	`gtk_¥öt_›î©i⁄_run
(
¥öt
, 
GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG
,

118 
	`GTK_WINDOW
(
ge
->
ªsu…s_wödow
), &
¥öt_îr‹
);

128 i‡(
ªs
 =
GTK_PRINT_OPERATION_RESULT_ERROR
) {

129 
	`¥ötög_îr‹_dülog
(
ge
->
ªsu…s_wödow
, 
¥öt_îr‹
);

130 
	`g_îr‹_‰ì
(
¥öt_îr‹
);

132 i‡(
ªs
 =
GTK_PRINT_OPERATION_RESULT_APPLY
) {

133 i‡(
¥öt_∑øms
.
£âögs
 !
NULL
)

134 
	`g_obje˘_uƒef
(
¥öt_∑øms
.
£âögs
);

135 
¥öt_∑øms
.
£âögs
 = 
	`g_obje˘_ªf
(
	`gtk_¥öt_›î©i⁄_gë_¥öt_£âögs
(
¥öt
));

138 
	`g_obje˘_uƒef
(
¥öt
);

139 
	}
}

	@/home/ysjin/Desktop/fio/fio/printing.h

1 #i‚de‡
PRINTING_H


2 
	#PRINTING_H


	)

4 
gfio_¥öt_ªsu…s
(
gui_íåy
 *
ge
);

	@/home/ysjin/Desktop/fio/fio/profile.c

1 
	~"fio.h
"

2 
	~"¥ofûe.h
"

3 
	~"debug.h
"

4 
	~"Êi°.h
"

5 
	~"›ti⁄s.h
"

7 
FLIST_HEAD
(
¥ofûe_li°
);

9 
¥ofûe_›s
 *
	$föd_¥ofûe
(c⁄° *
¥ofûe
)

11 
¥ofûe_›s
 *
›s
 = 
NULL
;

12 
Êi°_hód
 *
n
;

14 
	`Êi°_f‹_óch
(
n
, &
¥ofûe_li°
) {

15 
›s
 = 
	`Êi°_íåy
(
n
, 
¥ofûe_›s
, 
li°
);

16 i‡(!
	`°rcmp
(
¥ofûe
, 
›s
->
«me
))

19 
›s
 = 
NULL
;

22  
›s
;

23 
	}
}

25 
	$lﬂd_¥ofûe
(c⁄° *
¥ofûe
)

27 
¥ofûe_›s
 *
›s
;

29 
	`d¥öt
(
FD_PROFILE
, "lﬂdögÖrofûê'%s'\n", 
¥ofûe
);

31 
›s
 = 
	`föd_¥ofûe
(
¥ofûe
);

32 i‡(
›s
) {

33 i‡(
›s
->
	`¥ï_cmd
()) {

34 
	`log_îr
("fio:Örofûê%†¥ï faûed\n", 
¥ofûe
);

37 
	`add_job_›ts
(
›s
->
cmdlöe
, 
FIO_CLIENT_TYPE_CLI
);

41 
	`log_îr
("fio:Örofûê'%s'ÇŸ found\n", 
¥ofûe
);

43 
	}
}

45 
	$add_¥ofûe_›ti⁄s
(
¥ofûe_›s
 *
›s
)

47 
fio_›ti⁄
 *
o
;

49 i‡(!
›s
->
›ti⁄s
)

52 
o
 = 
›s
->
›ti⁄s
;

53 
o
->
«me
) {

54 
o
->
¥of_«me
 = 
›s
->
«me
;

55 
o
->
¥of_›ts
 = 
›s
->
›t_d©a
;

56 i‡(
	`add_›ti⁄
(
o
))

58 
o
++;

62 
	}
}

64 
	$ªgi°î_¥ofûe
(
¥ofûe_›s
 *
›s
)

66 
ªt
;

68 
	`d¥öt
(
FD_PROFILE
, "ªgi°îÖrofûê'%s'\n", 
›s
->
«me
);

70 
ªt
 = 
	`add_¥ofûe_›ti⁄s
(
›s
);

71 i‡(!
ªt
) {

72 
	`Êi°_add_èû
(&
›s
->
li°
, &
¥ofûe_li°
);

73 
	`add_›t_posvÆ
("¥ofûe", 
›s
->
«me
, ops->
desc
);

77 
	`övÆid©e_¥ofûe_›ti⁄s
(
›s
->
«me
);

78  
ªt
;

79 
	}
}

81 
	$uƒegi°î_¥ofûe
(
¥ofûe_›s
 *
›s
)

83 
	`d¥öt
(
FD_PROFILE
, "uƒegi°îÖrofûê'%s'\n", 
›s
->
«me
);

84 
	`Êi°_dñ
(&
›s
->
li°
);

85 
	`övÆid©e_¥ofûe_›ti⁄s
(
›s
->
«me
);

86 
	`dñ_›t_posvÆ
("¥ofûe", 
›s
->
«me
);

87 
	}
}

89 
	$¥ofûe_add_hooks
(
thªad_d©a
 *
td
)

91 
¥ofûe_›s
 *
›s
;

93 i‡(!
exec_¥ofûe
)

96 
›s
 = 
	`föd_¥ofûe
(
exec_¥ofûe
);

97 i‡(!
›s
)

100 i‡(
›s
->
io_›s
) {

101 
td
->
¥of_io_›s
 = *
›s
->
io_›s
;

102 
td
->
Êags
 |
TD_F_PROFILE_OPS
;

104 
	}
}

106 
	$¥ofûe_td_öô
(
thªad_d©a
 *
td
)

108 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

110 i‡(
›s
->
td_öô
)

111  
›s
->
	`td_öô
(
td
);

114 
	}
}

116 
	$¥ofûe_td_exô
(
thªad_d©a
 *
td
)

118 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

120 i‡(
›s
->
td_exô
)

121 
›s
->
	`td_exô
(
td
);

122 
	}
}

	@/home/ysjin/Desktop/fio/fio/profile.h

1 #i‚de‡
FIO_PROFILE_H


2 
	#FIO_PROFILE_H


	)

4 
	~"Êi°.h
"

9 
	s¥of_io_›s
 {

10 (*
	mtd_öô
)(
	mthªad_d©a
 *);

11 (*
	mtd_exô
)(
	mthªad_d©a
 *);

13 (*
	mio_u_œt
)(
	mthªad_d©a
 *, 
	muöt64_t
);

16 
	s¥ofûe_›s
 {

17 
Êi°_hód
 
	mli°
;

18 
	m«me
[32];

19 
	mdesc
[64];

20 
	mÊags
;

25 
fio_›ti⁄
 *
	m›ti⁄s
;

26 *
	m›t_d©a
;

31 (*
	m¥ï_cmd
)();

36 c⁄° **
	mcmdlöe
;

38 
¥of_io_›s
 *
	mio_›s
;

41 
ªgi°î_¥ofûe
(
¥ofûe_›s
 *);

42 
uƒegi°î_¥ofûe
(
¥ofûe_›s
 *);

43 
lﬂd_¥ofûe
(const *);

44 
¥ofûe_›s
 *
föd_¥ofûe
(const *);

45 
¥ofûe_add_hooks
(
thªad_d©a
 *);

47 
¥ofûe_td_öô
(
thªad_d©a
 *);

48 
¥ofûe_td_exô
(
thªad_d©a
 *);

	@/home/ysjin/Desktop/fio/fio/profiles/act.c

1 
	~"../fio.h
"

2 
	~"../¥ofûe.h
"

3 
	~"../∑r£.h
"

4 
	~"../›tgroup.h
"

9 
	#R_LOAD
 2000

	)

10 
	#W_LOAD
 1000

	)

12 
	#SAMPLE_SEC
 3600

	)

14 
	sa˘_∑ss_¸ôîü
 {

15 
	mmax_u£c
;

16 
	mmax_≥rm
;

18 
	#ACT_MAX_CRIT
 3

	)

20 
a˘_∑ss_¸ôîü
 
	ga˘_∑ss
[
ACT_MAX_CRIT
] = {

22 .
max_u£c
 = 1000,

23 .
	gmax_≥rm
 = 50,

26 .
	gmax_u£c
 = 8000,

27 .
	gmax_≥rm
 = 10,

30 .
	gmax_u£c
 = 64000,

31 .
	gmax_≥rm
 = 1,

35 
	sa˘_¶i˚
 {

36 
uöt64_t
 
	mœt_buckës
[
ACT_MAX_CRIT
];

37 
uöt64_t
 
	mtŸÆ_ios
;

40 
	sa˘_run_d©a
 {

41 
fio_muãx
 *
	mmuãx
;

42 
	m≥ndög
;

44 
a˘_¶i˚
 *
	m¶i˚s
;

45 
	mƒ_¶i˚s
;

47 
a˘_run_d©a
 *
	ga˘_run_d©a
;

49 
	sa˘_¥of_d©a
 {

50 
time•ec
 
	mßm∂e_tv
;

51 
a˘_¶i˚
 *
	m¶i˚s
;

52 
	mcur_¶i˚
;

53 
	mƒ_¶i˚s
;

56 
	#ACT_MAX_OPTS
 128

	)

57 c⁄° *
	ga˘_›ts
[
ACT_MAX_OPTS
] = {

63 
NULL
,

65 
	g›t_idx
 = 5;

66 
	g‹g_idx
;

68 
	$a˘_add_›t
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

70 
	sa˘_›ti⁄s
 {

71 
∑d
;

72 *
devi˚_«mes
;

73 
lﬂd
;

74 
¥ï
;

75 
thªads_≥r_queue
;

76 
num_ªad_blocks
;

77 
wrôe_size
;

78 
ã°_duøti⁄
;

81 
a˘_›ti⁄s
áct_options;

83 
fio_›ti⁄
 
›ti⁄s
[] = {

85 .
«me
 = "device-names",

86 .
 ame
 = "device-names",

87 .
ty≥
 = 
FIO_OPT_STR_STORE
,

88 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
devi˚_«mes
),

89 .
hñp
 = "DevicesÅo use",

90 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

91 .
group
 = 
FIO_OPT_G_ACT
,

92 .
no_‰ì
 = 
åue
,

95 .
«me
 = "load",

96 .
 ame
 = "Load multiplier",

97 .
ty≥
 = 
FIO_OPT_INT
,

98 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
lﬂd
),

99 .
hñp
 = "ACTÜoad multipler (default 1x)",

100 .
def
 = "1",

101 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

102 .
group
 = 
FIO_OPT_G_ACT
,

105 .
«me
 = "test-duration",

106 .
 ame
 = "Test duration",

107 .
ty≥
 = 
FIO_OPT_STR_VAL_TIME
,

108 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
ã°_duøti⁄
),

109 .
hñp
 = "HowÜongÅheÉntireÅestÅakesÅoÑun",

110 .
def
 = "24h",

111 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

112 .
group
 = 
FIO_OPT_G_ACT
,

115 .
«me
 = "threads-per-queue",

116 .
 ame
 = "Number ofÑead IOÅhreadsÖer device",

117 .
ty≥
 = 
FIO_OPT_INT
,

118 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
thªads_≥r_queue
),

119 .
hñp
 = "Number ofÑead IOÅhreadsÖer device",

120 .
def
 = "8",

121 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

122 .
group
 = 
FIO_OPT_G_ACT
,

125 .
«me
 = "read-req-num-512-blocks",

126 .
 ame
 = "Number of 512B blocksÅoÑead",

127 .
ty≥
 = 
FIO_OPT_INT
,

128 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
num_ªad_blocks
),

129 .
hñp
 = "Number of 512B blocksÅoÑeadátÅheÅime",

130 .
def
 = "3",

131 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

132 .
group
 = 
FIO_OPT_G_ACT
,

135 .
«me
 = "large-block-op-kbytes",

136 .
 ame
 = "Size ofÜarge block ops in KiB (writes)",

137 .
ty≥
 = 
FIO_OPT_INT
,

138 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
wrôe_size
),

139 .
hñp
 = "Size ofÜarge block ops in KiB (writes)",

140 .
def
 = "131072",

141 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

142 .
group
 = 
FIO_OPT_G_ACT
,

145 .
«me
 = "prep",

146 .
 ame
 = "Run ACTÖrepÖhase",

147 .
ty≥
 = 
FIO_OPT_STR_SET
,

148 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
¥ï
),

149 .
hñp
 = "SetÅoÑun ACTÖrepÖhase",

150 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

151 .
group
 = 
FIO_OPT_G_ACT
,

154 .
«me
 = 
NULL
,

156 
	}
};

158 
	$a˘_add_›t
(c⁄° *
°r
, ...)

160 
buf„r
[512];

161 
va_li°
 
¨gs
;

162 
size_t
 
Àn
;

164 i‡(
›t_idx
 =
ACT_MAX_OPTS
) {

165 
	`log_îr
("act: ACT_MAX_OPTS isÅoo small\n");

169 
	`va_°¨t
(
¨gs
, 
°r
);

170 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
°r
, 
¨gs
);

171 
	`va_íd
(
¨gs
);

173 i‡(
Àn
)

174 
a˘_›ts
[
›t_idx
++] = 
	`°rdup
(
buf„r
);

177 
	}
}

179 
	$a˘_add_rw
(c⁄° *
dev
, 
ªads
)

181 
a˘_›ti⁄s
 *
ao
 = &act_options;

183 i‡(
	`a˘_add_›t
("«me˜˘-%s-%s", 
ªads
 ? "ªad" : "wrôe", 
dev
))

185 i‡(
	`a˘_add_›t
("fûíame=%s", 
dev
))

187 i‡(
	`a˘_add_›t
("rw=%s", 
ªads
 ? "randread" : "randwrite"))

189 i‡(
ªads
) {

190 
æﬂd
 = 
ao
->
lﬂd
 * 
R_LOAD
 /áo->
thªads_≥r_queue
;

192 i‡(
	`a˘_add_›t
("numjobs=%u", 
ao
->
thªads_≥r_queue
))

194 i‡(
	`a˘_add_›t
("øã_i›s=%u", 
æﬂd
))

196 i‡(
	`a˘_add_›t
("bs=%u", 
ao
->
num_ªad_blocks
 * 512))

199 c⁄° 
rsize
 = 
ao
->
wrôe_size
 / (ao->
num_ªad_blocks
 * 512);

200 
wlﬂd
 = (
ao
->
lﬂd
 * 
W_LOAD
 + 
rsize
 - 1) /Ñsize;

202 i‡(
	`a˘_add_›t
("øã_i›s=%u", 
wlﬂd
))

204 i‡(
	`a˘_add_›t
("bs=%u", 
ao
->
wrôe_size
))

209 
	}
}

211 
	$a˘_add_dev_¥ï
(c⁄° *
dev
)

214 i‡(
	`a˘_add_›t
("«me˜˘-¥ï-zî€s-%s", 
dev
))

216 i‡(
	`a˘_add_›t
("fûíame=%s", 
dev
))

218 i‡(
	`a˘_add_›t
("bs=1048576"))

220 i‡(
	`a˘_add_›t
("zero_buffers"))

222 i‡(
	`a˘_add_›t
("rw=write"))

226 i‡(
	`a˘_add_›t
("«me˜˘-¥ï-ß…-%s", 
dev
))

228 i‡(
	`a˘_add_›t
("stonewall"))

230 i‡(
	`a˘_add_›t
("fûíame=%s", 
dev
))

232 i‡(
	`a˘_add_›t
("bs=4096"))

234 i‡(
	`a˘_add_›t
("ioengine=libaio"))

236 i‡(
	`a˘_add_›t
("iodepth=64"))

238 i‡(
	`a˘_add_›t
("rw=randwrite"))

242 
	}
}

244 
	$a˘_add_dev
(c⁄° *
dev
)

246 i‡(
a˘_›ti⁄s
.
¥ï
)

247  
	`a˘_add_dev_¥ï
(
dev
);

249 i‡(
	`a˘_add_›t
("ru¡ime=%Œus", 
a˘_›ti⁄s
.
ã°_duøti⁄
))

251 i‡(
	`a˘_add_›t
("time_based=1"))

254 i‡(
	`a˘_add_rw
(
dev
, 1))

256 i‡(
	`a˘_add_rw
(
dev
, 0))

260 
	}
}

265 
	$a˘_¥ï_cmdlöe
()

267 i‡(!
a˘_›ti⁄s
.
devi˚_«mes
) {

268 
	`log_îr
("act: youÇeedÅo set IOÅarget(s) withÅhe "

273 
‹g_idx
 = 
›t_idx
;

276 *
dev
;

278 
dev
 = 
	`°r£p
(&
a˘_›ti⁄s
.
devi˚_«mes
, ",");

279 i‡(!
dev
)

282 i‡(
	`a˘_add_dev
(
dev
)) {

283 
	`log_îr
("act: failedádding deviceÅoÅhe mix\n");

289 
	}
}

291 
	$a˘_io_u_œt
(
thªad_d©a
 *
td
, 
uöt64_t
 
n£c
)

293 
a˘_¥of_d©a
 *
≠d
 = 
td
->
¥of_d©a
;

294 
a˘_¶i˚
 *
¶i˚
;

295 
uöt64_t
 
u£c
 = 
n£c
 / 1000ULL;

296 
i
, 
ªt
 = 0;

297 
≥rm
;

299 i‡(
a˘_›ti⁄s
.
¥ï
)

306 i‡(
≠d
->
cur_¶i˚
 >≠d->
ƒ_¶i˚s
)

309 
¶i˚
 = &
≠d
->
¶i˚s
[≠d->
cur_¶i˚
];

310 
¶i˚
->
tŸÆ_ios
++;

312 
i
 = 
ACT_MAX_CRIT
 - 1; i >= 0; i--) {

313 i‡(
u£c
 > 
a˘_∑ss
[
i
].
max_u£c
) {

314 
¶i˚
->
œt_buckës
[
i
]++;

319 i‡(
	`time_sö˚_now
(&
≠d
->
ßm∂e_tv
Ë< 
SAMPLE_SEC
)

323 
i
 = 0; i < 
ACT_MAX_CRIT
; i++) {

324 
≥rm
 = (1000.0 * 
¶i˚
->
œt_buckës
[
i
]Ë/ sli˚->
tŸÆ_ios
;

325 i‡(
≥rm
 < 
a˘_∑ss
[
i
].
max_≥rm
)

328 
	`log_îr
("a˘: %f%%Éx˚ed†∑s†¸ôîü o‡%f%%\n", 
≥rm
 / 10.0, (Ë
a˘_∑ss
[
i
].
max_≥rm
 / 10.0);

329 
ªt
 = 1;

333 
	`fio_gëtime
(&
≠d
->
ßm∂e_tv
, 
NULL
);

334 
≠d
->
cur_¶i˚
++;

335  
ªt
;

336 
	}
}

338 
	$gë_a˘_ªf
()

340 
	`fio_muãx_down
(
a˘_run_d©a
->
muãx
);

341 
a˘_run_d©a
->
≥ndög
++;

342 
	`fio_muãx_up
(
a˘_run_d©a
->
muãx
);

343 
	}
}

345 
	$show_¶i˚
(
a˘_¶i˚
 *
¶i˚
, 
¶i˚_num
)

347 
i
, 
Áûed
 = 0;

349 
	`log_öfo
(" %2u", 
¶i˚_num
);

351 
i
 = 0; i < 
ACT_MAX_CRIT
; i++) {

352 
≥rc
 = 0.0;

354 i‡(
¶i˚
->
tŸÆ_ios
)

355 
≥rc
 = 100.0 * (Ë
¶i˚
->
œt_buckës
[
i
] / (Ë¶i˚->
tŸÆ_ios
;

356 i‡((
≥rc
 * 10.0Ë>
a˘_∑ss
[
i
].
max_≥rm
)

357 
Áûed
++;

358 
	`log_öfo
("\t%2.2f", 
≥rc
);

360 
i
 = 0; i < 
ACT_MAX_CRIT
; i++) {

361 
≥rc
 = 0.0;

363 i‡(
¶i˚
->
tŸÆ_ios
)

364 
≥rc
 = 100.0 * (Ë
¶i˚
->
œt_buckës
[
i
] / (Ë¶i˚->
tŸÆ_ios
;

365 
	`log_öfo
("\t%2.2f", 
≥rc
);

367 
	`log_öfo
("\n");

369  
Áûed
;

370 
	}
}

372 
	$a˘_show_Æl_°©s
()

374 
i
, 
Áûs
 = 0;

376 
	`log_öfo
("Årans device\n");

377 
	`log_öfo
(" %%>(ms) %%>(ms)\n");

378 
	`log_öfo
(" slice");

380 
i
 = 0; i < 
ACT_MAX_CRIT
; i++)

381 
	`log_öfo
("\à%2u", 
a˘_∑ss
[
i
].
max_u£c
 / 1000);

382 
i
 = 0; i < 
ACT_MAX_CRIT
; i++)

383 
	`log_öfo
("\à%2u", 
a˘_∑ss
[
i
].
max_u£c
 / 1000);

385 
	`log_öfo
("\n");

386 
	`log_öfo
(" ----- ----- ----- ------ ----- ----- ------\n");

388 
i
 = 0; i < 
a˘_run_d©a
->
ƒ_¶i˚s
; i++)

389 
Áûs
 +
	`show_¶i˚
(&
a˘_run_d©a
->
¶i˚s
[
i
], i + 1);

391 
	`log_öfo
("\«˘:Åe° com∂ëe, devi˚(s): %s\n", 
Áûs
 ? "FAILED" : "PASSED");

392 
	}
}

394 
	$put_a˘_ªf
(
thªad_d©a
 *
td
)

396 
a˘_¥of_d©a
 *
≠d
 = 
td
->
¥of_d©a
;

397 
i
, 
¶i˚
;

399 
	`fio_muãx_down
(
a˘_run_d©a
->
muãx
);

401 i‡(!
a˘_run_d©a
->
¶i˚s
) {

402 
a˘_run_d©a
->
¶i˚s
 = 
	`ˇŒoc
(
≠d
->
ƒ_¶i˚s
, (
a˘_¶i˚
));

403 
a˘_run_d©a
->
ƒ_¶i˚s
 = 
≠d
->nr_slices;

406 
¶i˚
 = 0; sli˚ < 
≠d
->
ƒ_¶i˚s
; slice++) {

407 
a˘_¶i˚
 *
d°
 = &
a˘_run_d©a
->
¶i˚s
[
¶i˚
];

408 
a˘_¶i˚
 *
§c
 = &
≠d
->
¶i˚s
[
¶i˚
];

410 
d°
->
tŸÆ_ios
 +
§c
->total_ios;

412 
i
 = 0; i < 
ACT_MAX_CRIT
; i++)

413 
d°
->
œt_buckës
[
i
] +
§c
->lat_buckets[i];

416 i‡(!--
a˘_run_d©a
->
≥ndög
)

417 
	`a˘_show_Æl_°©s
();

419 
	`fio_muãx_up
(
a˘_run_d©a
->
muãx
);

420 
	}
}

422 
	$a˘_td_öô
(
thªad_d©a
 *
td
)

424 
a˘_¥of_d©a
 *
≠d
;

425 
ƒ_¶i˚s
;

427 
	`gë_a˘_ªf
();

429 
≠d
 = 
	`ˇŒoc
(1, (*apd));

430 
ƒ_¶i˚s
 = (
a˘_›ti⁄s
.
ã°_duøti⁄
 + 
SAMPLE_SEC
 - 1) / SAMPLE_SEC;

431 
≠d
->
¶i˚s
 = 
	`ˇŒoc
(
ƒ_¶i˚s
, (
a˘_¶i˚
));

432 
≠d
->
ƒ_¶i˚s
 =Çr_slices;

433 
	`fio_gëtime
(&
≠d
->
ßm∂e_tv
, 
NULL
);

434 
td
->
¥of_d©a
 = 
≠d
;

436 
	}
}

438 
	$a˘_td_exô
(
thªad_d©a
 *
td
)

440 
a˘_¥of_d©a
 *
≠d
 = 
td
->
¥of_d©a
;

442 
	`put_a˘_ªf
(
td
);

443 
	`‰ì
(
≠d
->
¶i˚s
);

444 
	`‰ì
(
≠d
);

445 
td
->
¥of_d©a
 = 
NULL
;

446 
	}
}

448 
¥of_io_›s
 
	ga˘_io_›s
 = {

449 .
td_öô
 = 
a˘_td_öô
,

450 .
	gtd_exô
 = 
a˘_td_exô
,

451 .
	gio_u_œt
 = 
a˘_io_u_œt
,

454 
¥ofûe_›s
 
	ga˘_¥ofûe
 = {

455 .
«me
 = "act",

456 .
	gdesc
 = "ACT AerospikeÜike benchmark",

457 .
	g›ti⁄s
 = 
›ti⁄s
,

458 .
	g›t_d©a
 = &
a˘_›ti⁄s
,

459 .
	g¥ï_cmd
 = 
a˘_¥ï_cmdlöe
,

460 .
	gcmdlöe
 = 
a˘_›ts
,

461 .
	gio_›s
 = &
a˘_io_›s
,

464 
fio_öô
 
	$a˘_ªgi°î
()

466 
a˘_run_d©a
 = 
	`ˇŒoc
(1, (*act_run_data));

467 
a˘_run_d©a
->
muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

469 i‡(
	`ªgi°î_¥ofûe
(&
a˘_¥ofûe
))

470 
	`log_îr
("fio: failedÅoÑegisterÖrofile 'act'\n");

471 
	}
}

473 
fio_exô
 
	$a˘_uƒegi°î
()

475 
‹g_idx
 && org_idx < 
›t_idx
)

476 
	`‰ì
((*Ë
a˘_›ts
[++
‹g_idx
]);

478 
	`uƒegi°î_¥ofûe
(&
a˘_¥ofûe
);

479 
	`fio_muãx_ªmove
(
a˘_run_d©a
->
muãx
);

480 
	`‰ì
(
a˘_run_d©a
->
¶i˚s
);

481 
	`‰ì
(
a˘_run_d©a
);

482 
a˘_run_d©a
 = 
NULL
;

483 
	}
}

	@/home/ysjin/Desktop/fio/fio/profiles/tiobench.c

1 
	~"../fio.h
"

2 
	~"../¥ofûe.h
"

3 
	~"../∑r£.h
"

4 
	~"../›tgroup.h
"

6 
	gsize
;

7 
	glo›s
 = 1;

8 
	gbs
 = 4096;

9 
	g¡hªads
 = 1;

10 *
	gdú
;

12 
	gsz_idx
[80], 
	gbs_idx
[80], 
	glo›_idx
[80], 
	gdú_idx
[80], 
	gt_idx
[80];

14 c⁄° *
	gtb_›ts
[] = {

15 "buf„ªd=0", 
sz_idx
, 
bs_idx
, 
lo›_idx
, 
dú_idx
, 
t_idx
,

22 "«meÙ™dªad", "°⁄ewÆl", "rwÙ™dªad", 
NULL
,

25 
	stiobích_›ti⁄s
 {

26 
	m∑d
;

27 
	msize
;

28 
	mlo›s
;

29 
	mbs
;

30 
	m¡hªads
;

31 *
	mdú
;

34 
tiobích_›ti⁄s
 
	gtiobích_›ti⁄s
;

36 
fio_›ti⁄
 
	g›ti⁄s
[] = {

38 .
«me
 = "size",

39 .
	g ame
 = "Tiobench size",

40 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

41 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
size
),

42 .
	ghñp
 = "Size in MiB",

43 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

44 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

47 .
	g«me
 = "block",

48 .
	g ame
 = "Tiobench block",

49 .
	gty≥
 = 
FIO_OPT_INT
,

50 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
bs
),

51 .
	ghñp
 = "Block size in bytes",

52 .
	gdef
 = "4096",

53 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

54 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

57 .
	g«me
 = "numruns",

58 .
	g ame
 = "TiobenchÇumruns",

59 .
	gty≥
 = 
FIO_OPT_INT
,

60 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
lo›s
),

61 .
	ghñp
 = "Number ofÑuns",

62 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

63 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

66 .
	g«me
 = "dir",

67 .
	g ame
 = "Tiobench directory",

68 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

69 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
dú
),

70 .
	ghñp
 = "Test directory",

71 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

72 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

73 .
	gno_‰ì
 = 
åue
,

76 .
	g«me
 = "threads",

77 .
	g ame
 = "TiobenchÅhreads",

78 .
	gty≥
 = 
FIO_OPT_INT
,

79 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
¡hªads
),

80 .
	ghñp
 = "Number of Threads",

81 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

82 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

85 .
	g«me
 = 
NULL
,

92 
	$tb_¥ï_cmdlöe
()

97 
size
 *= 1024 * 1024ULL;

98 i‡(
size
)

99 
	`•rötf
(
sz_idx
, "size=%Œu", 
size
);

101 
	`°r˝y
(
sz_idx
, "size=4*1024*$mb_memory");

103 
	`•rötf
(
bs_idx
, "bs=%u", 
bs
);

104 
	`•rötf
(
lo›_idx
, "lo›s=%u", 
lo›s
);

106 i‡(
dú
)

107 
	`•rötf
(
dú_idx
, "dúe˘‹y=%s", 
dú
);

109 
	`•rötf
(
dú_idx
, "directory=./");

111 
	`•rötf
(
t_idx
, "numjobs=%u", 
¡hªads
);

113 
	}
}

115 
¥ofûe_›s
 
	gtiobích_¥ofûe
 = {

116 .
«me
 = "tiobench",

117 .
	gdesc
 = "tiotest/tiobench benchmark",

118 .
	g¥ï_cmd
 = 
tb_¥ï_cmdlöe
,

119 .
	gcmdlöe
 = 
tb_›ts
,

120 .
	g›ti⁄s
 = 
›ti⁄s
,

121 .
	g›t_d©a
 = &
tiobích_›ti⁄s
,

124 
fio_öô
 
	$tiobích_ªgi°î
()

126 i‡(
	`ªgi°î_¥ofûe
(&
tiobích_¥ofûe
))

127 
	`log_îr
("fio: failedÅoÑegisterÖrofile 'tiobench'\n");

128 
	}
}

130 
fio_exô
 
	$tiobích_uƒegi°î
()

132 
	`uƒegi°î_¥ofûe
(&
tiobích_¥ofûe
);

133 
	}
}

	@/home/ysjin/Desktop/fio/fio/rate-submit.c

7 
	~"fio.h
"

8 
	~"i€ngöes.h
"

9 
	~"lib/gërußge.h
"

10 
	~"øã-submô.h
"

12 
	$io_w‹kqueue_‚
(
submô_w‹kî
 *
sw
,

13 
w‹kqueue_w‹k
 *
w‹k
)

15 
io_u
 *io_u = 
	`c⁄èöî_of
(
w‹k
, io_u, work);

16 c⁄° 
fio_ddú
 
ddú
 = 
io_u
->ddir;

17 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

18 
ªt
;

20 
	`d¥öt
(
FD_RATE
, "io_u %∞queued by %u\n", 
io_u
, 
	`gëtid
());

22 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_NO_FILE_PUT
);

24 
td
->
cur_dïth
++;

27 
ªt
 = 
	`td_io_queue
(
td
, 
io_u
);

28 i‡(
ªt
 !
FIO_Q_BUSY
)

30 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 1);

31 i‡(
ªt
 > 0)

32 
td
->
cur_dïth
 -
ªt
;

33 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

36 
	`d¥öt
(
FD_RATE
, "io_u %∞ªà%d by %u\n", 
io_u
, 
ªt
, 
	`gëtid
());

38 
	`io_queue_evít
(
td
, 
io_u
, &
ªt
, 
ddú
, 
NULL
, 0, NULL);

40 i‡(
ªt
 =
FIO_Q_COMPLETED
)

41 
td
->
cur_dïth
--;

42 i‡(
ªt
 =
FIO_Q_QUEUED
) {

43 
mö_evts
;

45 i‡(
td
->
o
.
iodïth
 == 1)

46 
mö_evts
 = 1;

48 
mö_evts
 = 0;

50 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
mö_evts
);

51 i‡(
ªt
 > 0)

52 
td
->
cur_dïth
 -
ªt
;

53 } i‡(
ªt
 =
FIO_Q_BUSY
) {

54 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
,Åd->
cur_dïth
);

55 i‡(
ªt
 > 0)

56 
td
->
cur_dïth
 -
ªt
;

60 
	}
}

62 
boﬁ
 
	$io_w‹kqueue_¥e_¶ìp_Êush_‚
(
submô_w‹kî
 *
sw
)

64 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

66 i‡(
td
->
io_u_queued
 ||Åd->
cur_dïth
 ||Åd->
io_u_ö_Êight
)

67  
åue
;

69  
Ál£
;

70 
	}
}

72 
	$io_w‹kqueue_¥e_¶ìp_‚
(
submô_w‹kî
 *
sw
)

74 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

75 
ªt
;

77 
ªt
 = 
	`io_u_quõs˚
(
td
);

78 i‡(
ªt
 > 0)

79 
td
->
cur_dïth
 -
ªt
;

80 
	}
}

82 
	$io_w‹kqueue_Æloc_‚
(
submô_w‹kî
 *
sw
)

84 
thªad_d©a
 *
td
;

86 
td
 = 
	`ˇŒoc
(1, (*td));

87 
sw
->
¥iv
 = 
td
;

89 
	}
}

91 
	$io_w‹kqueue_‰ì_‚
(
submô_w‹kî
 *
sw
)

93 
	`‰ì
(
sw
->
¥iv
);

94 
sw
->
¥iv
 = 
NULL
;

95 
	}
}

97 
	$io_w‹kqueue_öô_w‹kî_‚
(
submô_w‹kî
 *
sw
)

99 
thªad_d©a
 *
∑ª¡
 = 
sw
->
wq
->
td
;

100 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

102 
	`mem˝y
(&
td
->
o
, &
∑ª¡
->o, (td->o));

103 
	`mem˝y
(&
td
->
ts
, &
∑ª¡
->ts, (td->ts));

104 
td
->
o
.
uid
 =Åd->o.
gid
 = -1U;

105 
	`dup_fûes
(
td
, 
∑ª¡
);

106 
td
->
eo
 = 
∑ª¡
->eo;

107 
	`fio_›ti⁄s_mem_du≥
(
td
);

109 i‡(
	`i€ngöe_lﬂd
(
td
))

110 
îr
;

112 
td
->
pid
 = 
	`gëtid
();

114 
	`INIT_FLIST_HEAD
(&
td
->
io_log_li°
);

115 
	`INIT_FLIST_HEAD
(&
td
->
io_hi°_li°
);

116 
	`INIT_FLIST_HEAD
(&
td
->
vîify_li°
);

117 
	`INIT_FLIST_HEAD
(&
td
->
åim_li°
);

118 
	`INIT_FLIST_HEAD
(&
td
->
√xt_ønd_li°
);

119 
td
->
io_hi°_åì
 = 
RB_ROOT
;

121 
td
->
o
.
iodïth
 = 1;

122 i‡(
	`td_io_öô
(
td
))

123 
îr_io_öô
;

125 
	`£t_ïoch_time
(
td
,Åd->
o
.
log_unix_ïoch
);

126 
	`fio_gërußge
(&
td
->
ru_°¨t
);

127 
	`˛ór_io_°©e
(
td
, 1);

129 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

130 
td
->
Êags
 |
TD_F_CHILD
;

131 
td
->
∑ª¡
 =Öarent;

134 
îr_io_öô
:

135 
	`˛o£_i€ngöe
(
td
);

136 
îr
:

139 
	}
}

141 
	$io_w‹kqueue_exô_w‹kî_‚
(
submô_w‹kî
 *
sw
,

142 *
sum_˙t
)

144 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

146 (*
sum_˙t
)++;

147 
	`sum_thªad_°©s
(&
sw
->
wq
->
td
->
ts
, &td->ts, *
sum_˙t
 == 1);

149 
	`fio_›ti⁄s_‰ì
(
td
);

150 
	`˛o£_™d_‰ì_fûes
(
td
);

151 i‡(
td
->
io_›s
)

152 
	`˛o£_i€ngöe
(
td
);

153 
	`td_£t_run°©e
(
td
, 
TD_EXITED
);

154 
	}
}

156 #ifde‡
CONFIG_SFAA


157 
	$sum_vÆ
(
uöt64_t
 *
d°
, uöt64_à*
§c
)

159 i‡(*
§c
) {

160 
	`__sync_„tch_™d_add
(
d°
, *
§c
);

161 *
§c
 = 0;

163 
	}
}

165 
	$sum_vÆ
(
uöt64_t
 *
d°
, uöt64_à*
§c
)

167 i‡(*
§c
) {

168 *
d°
 +*
§c
;

169 *
§c
 = 0;

171 
	}
}

174 
	$±hªad_doubÀ_u∆ock
(
±hªad_muãx_t
 *
lock1
,

175 
±hªad_muãx_t
 *
lock2
)

177 #i‚de‡
CONFIG_SFAA


178 
	`±hªad_muãx_u∆ock
(
lock1
);

179 
	`±hªad_muãx_u∆ock
(
lock2
);

181 
	}
}

183 
	$±hªad_doubÀ_lock
(
±hªad_muãx_t
 *
lock1
,Öthªad_muãx_à*
lock2
)

185 #i‚de‡
CONFIG_SFAA


186 i‡(
lock1
 < 
lock2
) {

187 
	`±hªad_muãx_lock
(
lock1
);

188 
	`±hªad_muãx_lock
(
lock2
);

190 
	`±hªad_muãx_lock
(
lock2
);

191 
	`±hªad_muãx_lock
(
lock1
);

194 
	}
}

196 
	$sum_ddú
(
thªad_d©a
 *
d°
, thªad_d©®*
§c
,

197 
fio_ddú
 
ddú
)

199 
	`±hªad_doubÀ_lock
(&
d°
->
io_wq
.
°©_lock
, &
§c
->io_wq.stat_lock);

201 
	`sum_vÆ
(&
d°
->
io_byãs
[
ddú
], &
§c
->io_bytes[ddir]);

202 
	`sum_vÆ
(&
d°
->
io_blocks
[
ddú
], &
§c
->io_blocks[ddir]);

203 
	`sum_vÆ
(&
d°
->
this_io_blocks
[
ddú
], &
§c
->this_io_blocks[ddir]);

204 
	`sum_vÆ
(&
d°
->
this_io_byãs
[
ddú
], &
§c
->this_io_bytes[ddir]);

205 
	`sum_vÆ
(&
d°
->
byãs_d⁄e
[
ddú
], &
§c
->bytes_done[ddir]);

207 
	`±hªad_doubÀ_u∆ock
(&
d°
->
io_wq
.
°©_lock
, &
§c
->io_wq.stat_lock);

208 
	}
}

210 
	$io_w‹kqueue_upd©e_ac˘_‚
(
submô_w‹kî
 *
sw
)

212 
thªad_d©a
 *
§c
 = 
sw
->
¥iv
;

213 
thªad_d©a
 *
d°
 = 
sw
->
wq
->
td
;

215 i‡(
	`td_ªad
(
§c
))

216 
	`sum_ddú
(
d°
, 
§c
, 
DDIR_READ
);

217 i‡(
	`td_wrôe
(
§c
))

218 
	`sum_ddú
(
d°
, 
§c
, 
DDIR_WRITE
);

219 i‡(
	`td_åim
(
§c
))

220 
	`sum_ddú
(
d°
, 
§c
, 
DDIR_TRIM
);

222 
	}
}

224 
w‹kqueue_›s
 
	gøãd_wq_›s
 = {

225 .
‚
 = 
io_w‹kqueue_‚
,

226 .
	g¥e_¶ìp_Êush_‚
 = 
io_w‹kqueue_¥e_¶ìp_Êush_‚
,

227 .
	g¥e_¶ìp_‚
 = 
io_w‹kqueue_¥e_¶ìp_‚
,

228 .
	gupd©e_ac˘_‚
 = 
io_w‹kqueue_upd©e_ac˘_‚
,

229 .
	gÆloc_w‹kî_‚
 = 
io_w‹kqueue_Æloc_‚
,

230 .
	g‰ì_w‹kî_‚
 = 
io_w‹kqueue_‰ì_‚
,

231 .
	göô_w‹kî_‚
 = 
io_w‹kqueue_öô_w‹kî_‚
,

232 .
	gexô_w‹kî_‚
 = 
io_w‹kqueue_exô_w‹kî_‚
,

235 
	$øã_submô_öô
(
thªad_d©a
 *
td
, 
sk_out
 *sk_out)

237 i‡(
td
->
o
.
io_submô_mode
 !
IO_MODE_OFFLOAD
)

240  
	`w‹kqueue_öô
(
td
, &td->
io_wq
, &
øãd_wq_›s
,Åd->
o
.
iodïth
, 
sk_out
);

241 
	}
}

243 
	$øã_submô_exô
(
thªad_d©a
 *
td
)

245 i‡(
td
->
o
.
io_submô_mode
 !
IO_MODE_OFFLOAD
)

248 
	`w‹kqueue_exô
(&
td
->
io_wq
);

249 
	}
}

	@/home/ysjin/Desktop/fio/fio/rate-submit.h

1 #i‚de‡
FIO_RATE_SUBMIT


2 
	#FIO_RATE_SUBMIT


	)

4 
øã_submô_öô
(
thªad_d©a
 *, 
sk_out
 *);

5 
øã_submô_exô
(
thªad_d©a
 *);

	@/home/ysjin/Desktop/fio/fio/server.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°d¨g.h
>

4 
	~<uni°d.h
>

5 
	~<limôs.h
>

6 
	~<î∫o.h
>

7 
	~<sys/pﬁl.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/waô.h
>

10 
	~<sys/sockë.h
>

11 
	~<sys/°©.h
>

12 
	~<sys/un.h
>

13 
	~<sys/uio.h
>

14 
	~<√töë/ö.h
>

15 
	~<¨∑/öë.h
>

16 
	~<√tdb.h
>

17 
	~<sy¶og.h
>

18 
	~<sig«l.h
>

19 #ifde‡
CONFIG_ZLIB


20 
	~<zlib.h
>

23 
	~"fio.h
"

24 
	~"›ti⁄s.h
"

25 
	~"£rvî.h
"

26 
	~"¸c/¸c16.h
"

27 
	~"lib/õì754.h
"

28 
	~"vîify.h
"

29 
	~"smÆloc.h
"

31 
	gfio_√t_p‹t
 = 
FIO_NET_PORT
;

33 
	gexô_backíd
 = 0;

36 
	mSK_F_FREE
 = 1,

37 
	mSK_F_COPY
 = 2,

38 
	mSK_F_SIMPLE
 = 4,

39 
	mSK_F_VEC
 = 8,

40 
	mSK_F_INLINE
 = 16,

43 
	ssk_íåy
 {

44 
Êi°_hód
 
	mli°
;

45 
	mÊags
;

46 
	m›code
;

47 *
	mbuf
;

48 
off_t
 
	msize
;

49 
uöt64_t
 
	mèg
;

50 
Êi°_hód
 
	m√xt
;

53 *
	gfio_£rvî_¨g
;

54 *
	gböd_sock
;

55 
sockaddr_ö
 
	gßddr_ö
;

56 
sockaddr_ö6
 
	gßddr_ö6
;

57 
	gu£_ùv6
;

58 #ifde‡
CONFIG_ZLIB


59 
	ghas_zlib
 = 1;

61 
	ghas_zlib
 = 0;

63 
	gu£_zlib
;

64 
	gme
[128];

66 
±hªad_key_t
 
	gsk_out_key
;

68 
	sfio_f‹k_ôem
 {

69 
Êi°_hód
 
	mli°
;

70 
	mexôvÆ
;

71 
	msig«l
;

72 
	mexôed
;

73 
pid_t
 
	mpid
;

76 
	scmd_ª∂y
 {

77 
fio_muãx
 
	mlock
;

78 *
	md©a
;

79 
size_t
 
	msize
;

80 
	mîr‹
;

83 c⁄° *
	gfio_£rvî_›s
[
FIO_NET_CMD_NR
] = {

109 
	$sk_lock
(
sk_out
 *sk_out)

111 
	`fio_muãx_down
(&
sk_out
->
lock
);

112 
	}
}

114 
	$sk_u∆ock
(
sk_out
 *sk_out)

116 
	`fio_muãx_up
(&
sk_out
->
lock
);

117 
	}
}

119 
	$sk_out_assign
(
sk_out
 *sk_out)

121 i‡(!
sk_out
)

124 
	`sk_lock
(
sk_out
);

125 
sk_out
->
ªfs
++;

126 
	`sk_u∆ock
(
sk_out
);

127 
	`±hªad_£t•ecific
(
sk_out_key
, 
sk_out
);

128 
	}
}

130 
	$sk_out_‰ì
(
sk_out
 *sk_out)

132 
	`__fio_muãx_ªmove
(&
sk_out
->
lock
);

133 
	`__fio_muãx_ªmove
(&
sk_out
->
waô
);

134 
	`__fio_muãx_ªmove
(&
sk_out
->
xmô
);

135 
	`s‰ì
(
sk_out
);

136 
	}
}

138 
	$__sk_out_dr›
(
sk_out
 *sk_out)

140 i‡(
sk_out
) {

141 
ªfs
;

143 
	`sk_lock
(
sk_out
);

144 
	`as£π
(
sk_out
->
ªfs
 != 0);

145 
ªfs
 = --
sk_out
->refs;

146 
	`sk_u∆ock
(
sk_out
);

148 i‡(!
ªfs
) {

149 
	`sk_out_‰ì
(
sk_out
);

150 
	`±hªad_£t•ecific
(
sk_out_key
, 
NULL
);

156 
	}
}

158 
	$sk_out_dr›
()

160 
sk_out
 *sk_out;

162 
sk_out
 = 
	`±hªad_gë•ecific
(
sk_out_key
);

163 
	`__sk_out_dr›
(
sk_out
);

164 
	}
}

166 
	$__fio_öô_√t_cmd
(
fio_√t_cmd
 *
cmd
, 
uöt16_t
 
›code
,

167 
uöt32_t
 
pdu_Àn
, 
uöt64_t
 
èg
)

169 
	`mem£t
(
cmd
, 0, (*cmd));

171 
cmd
->
vîsi⁄
 = 
	`__˝u_to_À16
(
FIO_SERVER_VER
);

172 
cmd
->
›code
 = 
	`˝u_to_À16
(opcode);

173 
cmd
->
èg
 = 
	`˝u_to_À64
(tag);

174 
cmd
->
pdu_Àn
 = 
	`˝u_to_À32
(pdu_len);

175 
	}
}

178 
	$fio_öô_√t_cmd
(
fio_√t_cmd
 *
cmd
, 
uöt16_t
 
›code
,

179 c⁄° *
pdu
, 
uöt32_t
 
pdu_Àn
, 
uöt64_t
 
èg
)

181 
	`__fio_öô_√t_cmd
(
cmd
, 
›code
, 
pdu_Àn
, 
èg
);

183 i‡(
pdu
)

184 
	`mem˝y
(&
cmd
->
∑ylﬂd
, 
pdu
, 
pdu_Àn
);

185 
	}
}

187 c⁄° *
	$fio_£rvî_›
(
›
)

189 
buf
[32];

191 i‡(
›
 < 
FIO_NET_CMD_NR
)

192  
fio_£rvî_›s
[
›
];

194 
	`•rötf
(
buf
, "UNKNOWN/%d", 
›
);

195  
buf
;

196 
	}
}

198 
ssize_t
 
	$iov_tŸÆ_Àn
(c⁄° 
iovec
 *
iov
, 
cou¡
)

200 
ssize_t
 
ªt
 = 0;

202 
cou¡
--) {

203 
ªt
 +
iov
->
iov_Àn
;

204 
iov
++;

207  
ªt
;

208 
	}
}

210 
	$fio_£ndv_d©a
(
sk
, 
iovec
 *
iov
, 
cou¡
)

212 
ssize_t
 
tŸÆ_Àn
 = 
	`iov_tŸÆ_Àn
(
iov
, 
cou¡
);

213 
ssize_t
 
ªt
;

216 
ªt
 = 
	`wrôev
(
sk
, 
iov
, 
cou¡
);

217 i‡(
ªt
 > 0) {

218 
tŸÆ_Àn
 -
ªt
;

219 i‡(!
tŸÆ_Àn
)

222 
ªt
) {

223 i‡(
ªt
 >
iov
->
iov_Àn
) {

224 
ªt
 -
iov
->
iov_Àn
;

225 
iov
++;

228 
iov
->
iov_ba£
 +
ªt
;

229 
iov
->
iov_Àn
 -
ªt
;

230 
ªt
 = 0;

232 } i‡(!
ªt
)

234 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

238 } !
exô_backíd
);

240 i‡(!
tŸÆ_Àn
)

244 
	}
}

246 
	$fio_£nd_d©a
(
sk
, c⁄° *
p
, 
Àn
)

248 
iovec
 
iov
 = { .
iov_ba£
 = (*Ë
p
, .
iov_Àn
 = 
Àn
 };

250 
	`as£π
(
Àn
 <(
fio_√t_cmd
Ë+ 
FIO_SERVER_MAX_FRAGMENT_PDU
);

252  
	`fio_£ndv_d©a
(
sk
, &
iov
, 1);

253 
	}
}

255 
	$fio_ªcv_d©a
(
sk
, *
buf
, 
Àn
, 
boﬁ
 
waô
)

257 
Êags
;

258 *
p
 = 
buf
;

260 i‡(
waô
)

261 
Êags
 = 
MSG_WAITALL
;

263 
Êags
 = 
OS_MSG_DONTWAIT
;

266 
ªt
 = 
	`ªcv
(
sk
, 
p
, 
Àn
, 
Êags
);

268 i‡(
ªt
 > 0) {

269 
Àn
 -
ªt
;

270 i‡(!
Àn
)

272 
p
 +
ªt
;

274 } i‡(!
ªt
)

276 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
) {

277 i‡(
waô
)

282 } !
exô_backíd
);

284 i‡(!
Àn
)

288 
	}
}

290 
	$vîify_c⁄vît_cmd
(
fio_√t_cmd
 *
cmd
)

292 
uöt16_t
 
¸c
;

294 
cmd
->
cmd_¸c16
 = 
	`À16_to_˝u
(cmd->cmd_crc16);

295 
cmd
->
pdu_¸c16
 = 
	`À16_to_˝u
(cmd->pdu_crc16);

297 
¸c
 = 
	`fio_¸c16
(
cmd
, 
FIO_NET_CMD_CRC_SZ
);

298 i‡(
¸c
 !
cmd
->
cmd_¸c16
) {

299 
	`log_îr
("fio: server bad crc on command (got %x, wanted %x)\n",

300 
cmd
->
cmd_¸c16
, 
¸c
);

304 
cmd
->
vîsi⁄
 = 
	`À16_to_˝u
(cmd->version);

305 
cmd
->
›code
 = 
	`À16_to_˝u
(cmd->opcode);

306 
cmd
->
Êags
 = 
	`À32_to_˝u
(cmd->flags);

307 
cmd
->
èg
 = 
	`À64_to_˝u
(cmd->tag);

308 
cmd
->
pdu_Àn
 = 
	`À32_to_˝u
(cmd->pdu_len);

310 
cmd
->
vîsi⁄
) {

311 
FIO_SERVER_VER
:

314 
	`log_îr
("fio: bad sîvî cmd vîsi⁄ %d\n", 
cmd
->
vîsi⁄
);

318 i‡(
cmd
->
pdu_Àn
 > 
FIO_SERVER_MAX_FRAGMENT_PDU
) {

319 
	`log_îr
("fio: comm™dÖaylﬂdÅoÿœrge: %u\n", 
cmd
->
pdu_Àn
);

324 
	}
}

329 
fio_√t_cmd
 *
	$fio_√t_ªcv_cmd
(
sk
, 
boﬁ
 
waô
)

331 
fio_√t_cmd
 
cmd
, *
tmp
, *
cmdªt
 = 
NULL
;

332 
size_t
 
cmd_size
 = 0, 
pdu_off£t
 = 0;

333 
uöt16_t
 
¸c
;

334 
ªt
, 
fú°
 = 1;

335 *
pdu
 = 
NULL
;

338 
ªt
 = 
	`fio_ªcv_d©a
(
sk
, &
cmd
, (cmd), 
waô
);

339 i‡(
ªt
)

343 
ªt
 = 
	`vîify_c⁄vît_cmd
(&
cmd
);

344 i‡(
ªt
)

347 i‡(
fú°
) {

349 
cmd_size
 = (
cmd
Ë+ cmd.
pdu_Àn
 + 1;

350 
	`as£π
(!
cmdªt
);

352 
cmd_size
 +
cmd
.
pdu_Àn
;

354 i‡(
cmd_size
 / 1024 > 
FIO_SERVER_MAX_CMD_MB
 * 1024) {

355 
	`log_îr
("fio: cmd+pduÅoÿœrgê(%Œu)\n", (Ë
cmd_size
);

356 
ªt
 = 1;

360 
tmp
 = 
	`ªÆloc
(
cmdªt
, 
cmd_size
);

361 i‡(!
tmp
) {

362 
	`log_îr
("fio: server failedállocating cmd\n");

363 
ªt
 = 1;

366 
cmdªt
 = 
tmp
;

368 i‡(
fú°
)

369 
	`mem˝y
(
cmdªt
, &
cmd
, (cmd));

370 i‡(
cmdªt
->
›code
 !
cmd
.opcode) {

371 
	`log_îr
("fio: fragment opcode mismatch (%d != %d)\n",

372 
cmdªt
->
›code
, 
cmd
.opcode);

373 
ªt
 = 1;

377 i‡(!
cmd
.
pdu_Àn
)

381 
pdu
 = (*Ë
cmdªt
->
∑ylﬂd
 + 
pdu_off£t
;

382 
ªt
 = 
	`fio_ªcv_d©a
(
sk
, 
pdu
, 
cmd
.
pdu_Àn
, 
waô
);

383 i‡(
ªt
)

387 
¸c
 = 
	`fio_¸c16
(
pdu
, 
cmd
.
pdu_Àn
);

388 i‡(
¸c
 !
cmd
.
pdu_¸c16
) {

389 
	`log_îr
("fio: server bad crc onÖayload ");

390 
	`log_îr
("(gŸ %x, w™ãd %x)\n", 
cmd
.
pdu_¸c16
, 
¸c
);

391 
ªt
 = 1;

395 
pdu_off£t
 +
cmd
.
pdu_Àn
;

396 i‡(!
fú°
)

397 
cmdªt
->
pdu_Àn
 +
cmd
.pdu_len;

398 
fú°
 = 0;

399 } 
cmd
.
Êags
 & 
FIO_NET_CMD_F_MORE
);

401 i‡(
ªt
) {

402 
	`‰ì
(
cmdªt
);

403 
cmdªt
 = 
NULL
;

404 } i‡(
cmdªt
) {

406 i‡(
cmdªt
->
pdu_Àn
) {

407 i‡(
cmdªt
->
›code
 =
FIO_NET_CMD_TEXT
) {

408 
cmd_ãxt_pdu
 *
__pdu
 = (cmd_ãxt_pdu *Ë
cmdªt
->
∑ylﬂd
;

409 *
buf
 = (*Ë
__pdu
->buf;

411 
buf
[
__pdu
->
buf_Àn
] = '\0';

412 } i‡(
cmdªt
->
›code
 =
FIO_NET_CMD_JOB
) {

413 
cmd_job_pdu
 *
__pdu
 = (cmd_job_pdu *Ë
cmdªt
->
∑ylﬂd
;

414 *
buf
 = (*Ë
__pdu
->buf;

415 
Àn
 = 
	`À32_to_˝u
(
__pdu
->
buf_Àn
);

417 
buf
[
Àn
] = '\0';

422 
cmdªt
->
Êags
 &~
FIO_NET_CMD_F_MORE
;

425  
cmdªt
;

426 
	}
}

428 
	$add_ª∂y
(
uöt64_t
 
èg
, 
Êi°_hód
 *
li°
)

430 
fio_√t_cmd_ª∂y
 *
ª∂y
;

432 
ª∂y
 = (
fio_√t_cmd_ª∂y
 *Ë(
uöçå_t
Ë
èg
;

433 
	`Êi°_add_èû
(&
ª∂y
->
li°
,Üist);

434 
	}
}

436 
uöt64_t
 
	$Æloc_ª∂y
(
uöt64_t
 
èg
, 
uöt16_t
 
›code
)

438 
fio_√t_cmd_ª∂y
 *
ª∂y
;

440 
ª∂y
 = 
	`ˇŒoc
(1, (*reply));

441 
	`INIT_FLIST_HEAD
(&
ª∂y
->
li°
);

442 
	`fio_gëtime
(&
ª∂y
->
ts
, 
NULL
);

443 
ª∂y
->
ßved_èg
 = 
èg
;

444 
ª∂y
->
›code
 = opcode;

446  (
uöçå_t
Ë
ª∂y
;

447 
	}
}

449 
	$‰ì_ª∂y
(
uöt64_t
 
èg
)

451 
fio_√t_cmd_ª∂y
 *
ª∂y
;

453 
ª∂y
 = (
fio_√t_cmd_ª∂y
 *Ë(
uöçå_t
Ë
èg
;

454 
	`‰ì
(
ª∂y
);

455 
	}
}

457 
	$fio_√t_cmd_¸c_pdu
(
fio_√t_cmd
 *
cmd
, c⁄° *
pdu
)

459 
uöt32_t
 
pdu_Àn
;

461 
cmd
->
cmd_¸c16
 = 
	`__˝u_to_À16
(
	`fio_¸c16
(cmd, 
FIO_NET_CMD_CRC_SZ
));

463 
pdu_Àn
 = 
	`À32_to_˝u
(
cmd
->pdu_len);

464 
cmd
->
pdu_¸c16
 = 
	`__˝u_to_À16
(
	`fio_¸c16
(
pdu
, 
pdu_Àn
));

465 
	}
}

467 
	$fio_√t_cmd_¸c
(
fio_√t_cmd
 *
cmd
)

469 
	`fio_√t_cmd_¸c_pdu
(
cmd
, cmd->
∑ylﬂd
);

470 
	}
}

472 
	$fio_√t_£nd_cmd
(
fd
, 
uöt16_t
 
›code
, c⁄° *
buf
, 
off_t
 
size
,

473 
uöt64_t
 *
èg±r
, 
Êi°_hód
 *
li°
)

475 
fio_√t_cmd
 *
cmd
 = 
NULL
;

476 
size_t
 
this_Àn
, 
cur_Àn
 = 0;

477 
uöt64_t
 
èg
;

478 
ªt
;

480 i‡(
li°
) {

481 
	`as£π
(
èg±r
);

482 
èg
 = *
èg±r
 = 
	`Æloc_ª∂y
(*èg±r, 
›code
);

484 
èg
 = 
èg±r
 ? *tagptr : 0;

487 
this_Àn
 = 
size
;

488 i‡(
this_Àn
 > 
FIO_SERVER_MAX_FRAGMENT_PDU
)

489 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

491 i‡(!
cmd
 || 
cur_Àn
 < (*cmdË+ 
this_Àn
) {

492 i‡(
cmd
)

493 
	`‰ì
(
cmd
);

495 
cur_Àn
 = (*
cmd
Ë+ 
this_Àn
;

496 
cmd
 = 
	`mÆloc
(
cur_Àn
);

499 
	`fio_öô_√t_cmd
(
cmd
, 
›code
, 
buf
, 
this_Àn
, 
èg
);

501 i‡(
this_Àn
 < 
size
)

502 
cmd
->
Êags
 = 
	`__˝u_to_À32
(
FIO_NET_CMD_F_MORE
);

504 
	`fio_√t_cmd_¸c
(
cmd
);

506 
ªt
 = 
	`fio_£nd_d©a
(
fd
, 
cmd
, (*cmdË+ 
this_Àn
);

507 
size
 -
this_Àn
;

508 
buf
 +
this_Àn
;

509 } !
ªt
 && 
size
);

511 i‡(
li°
) {

512 i‡(
ªt
)

513 
	`‰ì_ª∂y
(
èg
);

515 
	`add_ª∂y
(
èg
, 
li°
);

518 i‡(
cmd
)

519 
	`‰ì
(
cmd
);

521  
ªt
;

522 
	}
}

524 
sk_íåy
 *
	$fio_√t_¥ï_cmd
(
uöt16_t
 
›code
, *
buf
,

525 
size_t
 
size
, 
uöt64_t
 *
èg±r
,

526 
Êags
)

528 
sk_íåy
 *
íåy
;

530 
íåy
 = 
	`smÆloc
((*entry));

531 
	`INIT_FLIST_HEAD
(&
íåy
->
√xt
);

532 
íåy
->
›code
 = opcode;

533 i‡(
Êags
 & 
SK_F_COPY
) {

534 
íåy
->
buf
 = 
	`smÆloc
(
size
);

535 
	`mem˝y
(
íåy
->
buf
, buf, 
size
);

537 
íåy
->
buf
 = buf;

539 
íåy
->
size
 = size;

540 i‡(
èg±r
)

541 
íåy
->
èg
 = *
èg±r
;

543 
íåy
->
èg
 = 0;

544 
íåy
->
Êags
 = flags;

545  
íåy
;

546 
	}
}

548 
h™dÀ_sk_íåy
(
sk_out
 *sk_out, 
sk_íåy
 *
íåy
);

550 
	$fio_√t_queue_íåy
(
sk_íåy
 *
íåy
)

552 
sk_out
 *sk_ouà
	`±hªad_gë•ecific
(
sk_out_key
);

554 i‡(
íåy
->
Êags
 & 
SK_F_INLINE
)

555 
	`h™dÀ_sk_íåy
(
sk_out
, 
íåy
);

557 
	`sk_lock
(
sk_out
);

558 
	`Êi°_add_èû
(&
íåy
->
li°
, &
sk_out
->list);

559 
	`sk_u∆ock
(
sk_out
);

561 
	`fio_muãx_up
(&
sk_out
->
waô
);

563 
	}
}

565 
	$fio_√t_queue_cmd
(
uöt16_t
 
›code
, *
buf
, 
off_t
 
size
,

566 
uöt64_t
 *
èg±r
, 
Êags
)

568 
sk_íåy
 *
íåy
;

570 
íåy
 = 
	`fio_√t_¥ï_cmd
(
›code
, 
buf
, 
size
, 
èg±r
, 
Êags
);

571 i‡(
íåy
) {

572 
	`fio_√t_queue_íåy
(
íåy
);

577 
	}
}

579 
	$fio_√t_£nd_sim∂e_°ack_cmd
(
sk
, 
uöt16_t
 
›code
, 
uöt64_t
 
èg
)

581 
fio_√t_cmd
 
cmd
;

583 
	`fio_öô_√t_cmd
(&
cmd
, 
›code
, 
NULL
, 0, 
èg
);

584 
	`fio_√t_cmd_¸c
(&
cmd
);

586  
	`fio_£nd_d©a
(
sk
, &
cmd
, (cmd));

587 
	}
}

593 
	$fio_√t_£nd_sim∂e_cmd
(
sk
, 
uöt16_t
 
›code
, 
uöt64_t
 
èg
,

594 
Êi°_hód
 *
li°
)

596 
ªt
;

598 i‡(
li°
)

599 
èg
 = 
	`Æloc_ª∂y
—ag, 
›code
);

601 
ªt
 = 
	`fio_√t_£nd_sim∂e_°ack_cmd
(
sk
, 
›code
, 
èg
);

602 i‡(
ªt
) {

603 i‡(
li°
)

604 
	`‰ì_ª∂y
(
èg
);

606  
ªt
;

609 i‡(
li°
)

610 
	`add_ª∂y
(
èg
, 
li°
);

613 
	}
}

615 
	$fio_√t_queue_quô
()

617 
	`d¥öt
(
FD_NET
, "server: sending quit\n");

619  
	`fio_√t_queue_cmd
(
FIO_NET_CMD_QUIT
, 
NULL
, 0, NULL, 
SK_F_SIMPLE
 | 
SK_F_INLINE
);

620 
	}
}

622 
	$fio_√t_£nd_quô
(
sk
)

624 
	`d¥öt
(
FD_NET
, "server: sending quit\n");

626  
	`fio_√t_£nd_sim∂e_cmd
(
sk
, 
FIO_NET_CMD_QUIT
, 0, 
NULL
);

627 
	}
}

629 
	$fio_√t_£nd_ack
(
fio_√t_cmd
 *
cmd
, 
îr‹
, 
sig«l
)

631 
cmd_íd_pdu
 
ïdu
;

632 
uöt64_t
 
èg
 = 0;

634 i‡(
cmd
)

635 
èg
 = 
cmd
->tag;

637 
ïdu
.
îr‹
 = 
	`__˝u_to_À32
(error);

638 
ïdu
.
sig«l
 = 
	`__˝u_to_À32
(signal);

639  
	`fio_√t_queue_cmd
(
FIO_NET_CMD_STOP
, &
ïdu
, ”pdu), &
èg
, 
SK_F_COPY
 | 
SK_F_INLINE
);

640 
	}
}

642 
	$fio_√t_queue_°›
(
îr‹
, 
sig«l
)

644 
	`d¥öt
(
FD_NET
, "£rvî: sídög st› (%d, %d)\n", 
îr‹
, 
sig«l
);

645  
	`fio_√t_£nd_ack
(
NULL
, 
îr‹
, 
sig«l
);

646 
	}
}

648 
	$fio_£rvî_add_f‹k_ôem
(
pid_t
 
pid
, 
Êi°_hód
 *
li°
)

650 
fio_f‹k_ôem
 *
ffi
;

652 
ffi
 = 
	`mÆloc
((*ffi));

653 
ffi
->
exôvÆ
 = 0;

654 
ffi
->
sig«l
 = 0;

655 
ffi
->
exôed
 = 0;

656 
ffi
->
pid
 =Öid;

657 
	`Êi°_add_èû
(&
ffi
->
li°
,Üist);

658 
	}
}

660 
	$fio_£rvî_add_c⁄n_pid
(
Êi°_hód
 *
c⁄n_li°
, 
pid_t
 
pid
)

662 
	`d¥öt
(
FD_NET
, "£rvî: f‹ked of‡c⁄√˘i⁄ job (pid=%u)\n", (Ë
pid
);

663 
	`fio_£rvî_add_f‹k_ôem
(
pid
, 
c⁄n_li°
);

664 
	}
}

666 
	$fio_£rvî_add_job_pid
(
Êi°_hód
 *
job_li°
, 
pid_t
 
pid
)

668 
	`d¥öt
(
FD_NET
, "£rvî: f‹ked of‡job job (pid=%u)\n", (Ë
pid
);

669 
	`fio_£rvî_add_f‹k_ôem
(
pid
, 
job_li°
);

670 
	}
}

672 
	$fio_£rvî_check_f‹k_ôem
(
fio_f‹k_ôem
 *
ffi
)

674 
ªt
, 
°©us
;

676 
ªt
 = 
	`waôpid
(
ffi
->
pid
, &
°©us
, 
WNOHANG
);

677 i‡(
ªt
 < 0) {

678 i‡(
î∫o
 =
ECHILD
) {

679 
	`log_îr
("fio: c⁄√˘i⁄Öid %u dißµóªd\n", (Ë
ffi
->
pid
);

680 
ffi
->
exôed
 = 1;

682 
	`log_îr
("fio: waôpid: %s\n", 
	`°ªº‹
(
î∫o
));

683 } i‡(
ªt
 =
ffi
->
pid
) {

684 i‡(
	`WIFSIGNALED
(
°©us
)) {

685 
ffi
->
sig«l
 = 
	`WTERMSIG
(
°©us
);

686 
ffi
->
exôed
 = 1;

688 i‡(
	`WIFEXITED
(
°©us
)) {

689 i‡(
	`WEXITSTATUS
(
°©us
))

690 
ffi
->
exôvÆ
 = 
	`WEXITSTATUS
(
°©us
);

691 
ffi
->
exôed
 = 1;

694 
	}
}

696 
	$fio_£rvî_f‹k_ôem_d⁄e
(
fio_f‹k_ôem
 *
ffi
, 
boﬁ
 
°›
)

698 
	`d¥öt
(
FD_NET
, "pid %uÉxôed, sig=%u,ÉxôvÆ=%d\n", (Ë
ffi
->
pid
, ffi->
sig«l
, ffi->
exôvÆ
);

703 i‡(
°›
) {

704 
	`fio_√t_queue_°›
(
ffi
->
exôvÆ
, ffi->
sig«l
);

705 
	`fio_√t_queue_quô
();

708 
	`Êi°_dñ
(&
ffi
->
li°
);

709 
	`‰ì
(
ffi
);

710 
	}
}

712 
	$fio_£rvî_check_f‹k_ôems
(
Êi°_hód
 *
li°
, 
boﬁ
 
°›
)

714 
Êi°_hód
 *
íåy
, *
tmp
;

715 
fio_f‹k_ôem
 *
ffi
;

717 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, 
li°
) {

718 
ffi
 = 
	`Êi°_íåy
(
íåy
, 
fio_f‹k_ôem
, 
li°
);

720 
	`fio_£rvî_check_f‹k_ôem
(
ffi
);

722 i‡(
ffi
->
exôed
)

723 
	`fio_£rvî_f‹k_ôem_d⁄e
(
ffi
, 
°›
);

725 
	}
}

727 
	$fio_£rvî_check_jobs
(
Êi°_hód
 *
job_li°
)

729 
	`fio_£rvî_check_f‹k_ôems
(
job_li°
, 
åue
);

730 
	}
}

732 
	$fio_£rvî_check_c⁄ns
(
Êi°_hód
 *
c⁄n_li°
)

734 
	`fio_£rvî_check_f‹k_ôems
(
c⁄n_li°
, 
Ál£
);

735 
	}
}

737 
	$h™dÀ_lﬂd_fûe_cmd
(
fio_√t_cmd
 *
cmd
)

739 
cmd_lﬂd_fûe_pdu
 *
pdu
 = (cmd_lﬂd_fûe_pdu *Ë
cmd
->
∑ylﬂd
;

740 *
fûe_«me
 = 
pdu
->
fûe
;

741 
cmd_°¨t_pdu
 
•du
;

743 
	`d¥öt
(
FD_NET
, "£rvî:ÜﬂdögÜoˇ»fûê%s\n", (*Ë
fûe_«me
);

745 
pdu
->
«me_Àn
 = 
	`À16_to_˝u
(pdu->name_len);

746 
pdu
->
˛õ¡_ty≥
 = 
	`À16_to_˝u
(pdu->client_type);

748 i‡(
	`∑r£_jobs_öi
(
fûe_«me
, 0, 0, 
pdu
->
˛õ¡_ty≥
)) {

749 
	`fio_√t_queue_quô
();

753 
•du
.
jobs
 = 
	`˝u_to_À32
(
thªad_numbî
);

754 
•du
.
°©_ouçuts
 = 
	`˝u_to_À32
(
°©_numbî
);

755 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_START
, &
•du
, (•du), 
NULL
, 
SK_F_COPY
);

757 
	}
}

759 
	$h™dÀ_run_cmd
(
sk_out
 *sk_out, 
Êi°_hód
 *
job_li°
,

760 
fio_√t_cmd
 *
cmd
)

762 
pid_t
 
pid
;

763 
ªt
;

765 
	`sk_out_assign
(
sk_out
);

767 
	`fio_time_öô
();

768 
	`£t_gíesis_time
();

770 
pid
 = 
	`f‹k
();

771 i‡(
pid
) {

772 
	`fio_£rvî_add_job_pid
(
job_li°
, 
pid
);

776 
ªt
 = 
	`fio_backíd
(
sk_out
);

777 
	`‰ì_thªads_shm
();

778 
	`sk_out_dr›
();

779 
	`_exô
(
ªt
);

780 
	}
}

782 
	$h™dÀ_job_cmd
(
fio_√t_cmd
 *
cmd
)

784 
cmd_job_pdu
 *
pdu
 = (cmd_job_pdu *Ë
cmd
->
∑ylﬂd
;

785 *
buf
 = 
pdu
->buf;

786 
cmd_°¨t_pdu
 
•du
;

788 
pdu
->
buf_Àn
 = 
	`À32_to_˝u
(pdu->buf_len);

789 
pdu
->
˛õ¡_ty≥
 = 
	`À32_to_˝u
(pdu->client_type);

791 i‡(
	`∑r£_jobs_öi
(
buf
, 1, 0, 
pdu
->
˛õ¡_ty≥
)) {

792 
	`fio_√t_queue_quô
();

796 
•du
.
jobs
 = 
	`˝u_to_À32
(
thªad_numbî
);

797 
•du
.
°©_ouçuts
 = 
	`˝u_to_À32
(
°©_numbî
);

799 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_START
, &
•du
, (•du), 
NULL
, 
SK_F_COPY
);

801 
	}
}

803 
	$h™dÀ_joblöe_cmd
(
fio_√t_cmd
 *
cmd
)

805 *
pdu
 = 
cmd
->
∑ylﬂd
;

806 
cmd_sögÀ_löe_pdu
 *
c¶p
;

807 
cmd_löe_pdu
 *
˛p
;

808 
off£t
;

809 
cmd_°¨t_pdu
 
•du
;

810 **
¨gv
;

811 
i
;

813 
˛p
 = 
pdu
;

814 
˛p
->
löes
 = 
	`À16_to_˝u
(clp->lines);

815 
˛p
->
˛õ¡_ty≥
 = 
	`À16_to_˝u
(clp->client_type);

816 
¨gv
 = 
	`mÆloc
(
˛p
->
löes
 * (*));

817 
off£t
 = (*
˛p
);

819 
	`d¥öt
(
FD_NET
, "£rvî: %d comm™dÜöê¨gs\n", 
˛p
->
löes
);

821 
i
 = 0; i < 
˛p
->
löes
; i++) {

822 
c¶p
 = 
pdu
 + 
off£t
;

823 
¨gv
[
i
] = (*Ë
c¶p
->
ãxt
;

825 
off£t
 +(*
c¶p
Ë+ 
	`À16_to_˝u
(c¶p->
Àn
);

826 
	`d¥öt
(
FD_NET
, "£rvî: %d: %s\n", 
i
, 
¨gv
[i]);

829 i‡(
	`∑r£_cmd_löe
(
˛p
->
löes
, 
¨gv
, cÕ->
˛õ¡_ty≥
)) {

830 
	`fio_√t_queue_quô
();

831 
	`‰ì
(
¨gv
);

835 
	`‰ì
(
¨gv
);

837 
•du
.
jobs
 = 
	`˝u_to_À32
(
thªad_numbî
);

838 
•du
.
°©_ouçuts
 = 
	`˝u_to_À32
(
°©_numbî
);

840 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_START
, &
•du
, (•du), 
NULL
, 
SK_F_COPY
);

842 
	}
}

844 
	$h™dÀ_¥obe_cmd
(
fio_√t_cmd
 *
cmd
)

846 
cmd_˛õ¡_¥obe_pdu
 *
pdu
 = (cmd_˛õ¡_¥obe_pdu *Ë
cmd
->
∑ylﬂd
;

847 
uöt64_t
 
èg
 = 
cmd
->tag;

848 
cmd_¥obe_ª∂y_pdu
 
¥obe
 = {

849 #ifde‡
CONFIG_BIG_ENDIAN


850 .
bigídün
 = 1,

852 .
os
 = 
FIO_OS
,

853 .
¨ch
 = 
FIO_ARCH
,

854 .
bµ
 = (*),

855 .
˝us
 = 
	`__˝u_to_À32
(
	`˝us_⁄löe
()),

858 
	`d¥öt
(
FD_NET
, "server: sendingÖrobeÑeply\n");

860 
	`°r˝y
(
me
, (*Ë
pdu
->
£rvî
);

862 
	`gëho°«me
((*Ë
¥obe
.
ho°«me
, (probe.hostname));

863 
	`°∫˝y
((*Ë
¥obe
.
fio_vîsi⁄
, 
fio_vîsi⁄_°rög
, (probe.fio_version) - 1);

868 i‡(
has_zlib
 && 
	`À64_to_˝u
(
pdu
->
Êags
Ë& 
FIO_PROBE_FLAG_ZLIB
) {

869 
¥obe
.
Êags
 = 
	`__˝u_to_À64
(
FIO_PROBE_FLAG_ZLIB
);

870 
u£_zlib
 = 1;

872 
¥obe
.
Êags
 = 0;

873 
u£_zlib
 = 0;

876  
	`fio_√t_queue_cmd
(
FIO_NET_CMD_PROBE
, &
¥obe
, ’robe), &
èg
, 
SK_F_COPY
);

877 
	}
}

879 
	$h™dÀ_£nd_ëa_cmd
(
fio_√t_cmd
 *
cmd
)

881 
jobs_ëa
 *
je
;

882 
uöt64_t
 
èg
 = 
cmd
->tag;

883 
size_t
 
size
;

884 
i
;

886 
	`d¥öt
(
FD_NET
, "server sending status\n");

892 
je
 = 
	`gë_jobs_ëa
(
åue
, &
size
);

893 i‡(!
je
) {

894 
size
 = (*
je
);

895 
je
 = 
	`ˇŒoc
(1, 
size
);

897 
je
->
ƒ_ru¬ög
 = 
	`˝u_to_À32
(je->nr_running);

898 
je
->
ƒ_ømp
 = 
	`˝u_to_À32
(je->nr_ramp);

899 
je
->
ƒ_≥ndög
 = 
	`˝u_to_À32
(je->nr_pending);

900 
je
->
ƒ_£âög_up
 = 
	`˝u_to_À32
(je->nr_setting_up);

901 
je
->
fûes_›í
 = 
	`˝u_to_À32
(je->files_open);

903 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

904 
je
->
m_øã
[
i
] = 
	`˝u_to_À64
(je->m_rate[i]);

905 
je
->
t_øã
[
i
] = 
	`˝u_to_À64
(je->t_rate[i]);

906 
je
->
m_i›s
[
i
] = 
	`˝u_to_À32
(je->m_iops[i]);

907 
je
->
t_i›s
[
i
] = 
	`˝u_to_À32
(je->t_iops[i]);

908 
je
->
øã
[
i
] = 
	`˝u_to_À64
(je->rate[i]);

909 
je
->
i›s
[
i
] = 
	`˝u_to_À32
(je->iops[i]);

912 
je
->
ñ≠£d_£c
 = 
	`˝u_to_À64
(je->elapsed_sec);

913 
je
->
ëa_£c
 = 
	`˝u_to_À64
(je->eta_sec);

914 
je
->
ƒ_thªads
 = 
	`˝u_to_À32
(je->nr_threads);

915 
je
->
is_pow2
 = 
	`˝u_to_À32
(je->is_pow2);

916 
je
->
unô_ba£
 = 
	`˝u_to_À32
(je->unit_base);

919 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_ETA
, 
je
, 
size
, &
èg
, 
SK_F_FREE
);

921 
	}
}

923 
	$£nd_upd©e_job_ª∂y
(
uöt64_t
 
__èg
, 
îr‹
)

925 
uöt64_t
 
èg
 = 
__èg
;

926 
uöt32_t
 
pdu_îr‹
;

928 
pdu_îr‹
 = 
	`__˝u_to_À32
(
îr‹
);

929  
	`fio_√t_queue_cmd
(
FIO_NET_CMD_UPDATE_JOB
, &
pdu_îr‹
, ’du_îr‹), &
èg
, 
SK_F_COPY
);

930 
	}
}

932 
	$h™dÀ_upd©e_job_cmd
(
fio_√t_cmd
 *
cmd
)

934 
cmd_add_job_pdu
 *
pdu
 = (cmd_add_job_pdu *Ë
cmd
->
∑ylﬂd
;

935 
thªad_d©a
 *
td
;

936 
uöt32_t
 
äumbî
;

938 
äumbî
 = 
	`À32_to_˝u
(
pdu
->
thªad_numbî
);

940 
	`d¥öt
(
FD_NET
, "£rvî: upd©ög o±i⁄†f‹ job %u\n", 
äumbî
);

942 i‡(!
äumbî
 ||Ånumbî > 
thªad_numbî
) {

943 
	`£nd_upd©e_job_ª∂y
(
cmd
->
èg
, 
ENODEV
);

947 
td
 = &
thªads
[
äumbî
 - 1];

948 
	`c⁄vît_thªad_›ti⁄s_to_˝u
(&
td
->
o
, &
pdu
->
t›
);

949 
	`£nd_upd©e_job_ª∂y
(
cmd
->
èg
, 0);

951 
	}
}

953 
	$h™dÀ_åiggî_cmd
(
fio_√t_cmd
 *
cmd
, 
Êi°_hód
 *
job_li°
)

955 
cmd_våiggî_pdu
 *
pdu
 = (cmd_våiggî_pdu *Ë
cmd
->
∑ylﬂd
;

956 *
buf
 = (*Ë
pdu
->
cmd
;

957 
Æl_io_li°
 *
ªp
;

958 
size_t
 
sz
;

960 
pdu
->
Àn
 = 
	`À16_to_˝u
(pdu->len);

961 
buf
[
pdu
->
Àn
] = '\0';

963 
ªp
 = 
	`gë_Æl_io_li°
(
IO_LIST_ALL
, &
sz
);

964 i‡(!
ªp
) {

965 
Æl_io_li°
 
°©e
;

967 
°©e
.
thªads
 = 
	`˝u_to_À64
((
uöt64_t
) 0);

968 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_VTRIGGER
, &
°©e
, (°©e), 
NULL
, 
SK_F_COPY
 | 
SK_F_INLINE
);

970 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_VTRIGGER
, 
ªp
, 
sz
, 
NULL
, 
SK_F_FREE
 | 
SK_F_INLINE
);

972 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

973 
	`fio_£rvî_check_jobs
(
job_li°
);

974 
	`exec_åiggî
(
buf
);

976 
	}
}

978 
	$h™dÀ_comm™d
(
sk_out
 *sk_out, 
Êi°_hód
 *
job_li°
,

979 
fio_√t_cmd
 *
cmd
)

981 
ªt
;

983 
	`d¥öt
(
FD_NET
, "server: got op [%s],Ödu=%u,Åag=%llx\n",

984 
	`fio_£rvî_›
(
cmd
->
›code
), cmd->
pdu_Àn
,

985 (Ë
cmd
->
èg
);

987 
cmd
->
›code
) {

988 
FIO_NET_CMD_QUIT
:

989 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

990 
ªt
 = 0;

992 
FIO_NET_CMD_EXIT
:

993 
exô_backíd
 = 1;

995 
FIO_NET_CMD_LOAD_FILE
:

996 
ªt
 = 
	`h™dÀ_lﬂd_fûe_cmd
(
cmd
);

998 
FIO_NET_CMD_JOB
:

999 
ªt
 = 
	`h™dÀ_job_cmd
(
cmd
);

1001 
FIO_NET_CMD_JOBLINE
:

1002 
ªt
 = 
	`h™dÀ_joblöe_cmd
(
cmd
);

1004 
FIO_NET_CMD_PROBE
:

1005 
ªt
 = 
	`h™dÀ_¥obe_cmd
(
cmd
);

1007 
FIO_NET_CMD_SEND_ETA
:

1008 
ªt
 = 
	`h™dÀ_£nd_ëa_cmd
(
cmd
);

1010 
FIO_NET_CMD_RUN
:

1011 
ªt
 = 
	`h™dÀ_run_cmd
(
sk_out
, 
job_li°
, 
cmd
);

1013 
FIO_NET_CMD_UPDATE_JOB
:

1014 
ªt
 = 
	`h™dÀ_upd©e_job_cmd
(
cmd
);

1016 
FIO_NET_CMD_VTRIGGER
:

1017 
ªt
 = 
	`h™dÀ_åiggî_cmd
(
cmd
, 
job_li°
);

1019 
FIO_NET_CMD_SENDFILE
: {

1020 
cmd_£ndfûe_ª∂y
 *
ö
;

1021 
cmd_ª∂y
 *
ªp
;

1023 
ªp
 = (
cmd_ª∂y
 *Ë(
uöçå_t
Ë
cmd
->
èg
;

1025 
ö
 = (
cmd_£ndfûe_ª∂y
 *Ë
cmd
->
∑ylﬂd
;

1026 
ö
->
size
 = 
	`À32_to_˝u
(in->size);

1027 
ö
->
îr‹
 = 
	`À32_to_˝u
(in->error);

1028 i‡(
ö
->
îr‹
) {

1029 
ªt
 = 1;

1030 
ªp
->
îr‹
 = 
ö
->error;

1032 
ªt
 = 0;

1033 
ªp
->
d©a
 = 
	`smÆloc
(
ö
->
size
);

1034 i‡(!
ªp
->
d©a
) {

1035 
ªt
 = 1;

1036 
ªp
->
îr‹
 = 
ENOMEM
;

1038 
ªp
->
size
 = 
ö
->size;

1039 
	`mem˝y
(
ªp
->
d©a
, 
ö
->d©a, in->
size
);

1042 
	`fio_muãx_up
(&
ªp
->
lock
);

1046 
	`log_îr
("fio: unknow¿›code: %s\n", 
	`fio_£rvî_›
(
cmd
->
›code
));

1047 
ªt
 = 1;

1050  
ªt
;

1051 
	}
}

1056 
	$fio_£nd_cmd_ext_pdu
(
sk
, 
uöt16_t
 
›code
, c⁄° *
buf
,

1057 
off_t
 
size
, 
uöt64_t
 
èg
, 
uöt32_t
 
Êags
)

1059 
fio_√t_cmd
 
cmd
;

1060 
iovec
 
iov
[2];

1061 
size_t
 
this_Àn
;

1062 
ªt
;

1064 
iov
[0].
iov_ba£
 = (*Ë&
cmd
;

1065 
iov
[0].
iov_Àn
 = (
cmd
);

1068 
uöt32_t
 
this_Êags
 = 
Êags
;

1070 
this_Àn
 = 
size
;

1071 i‡(
this_Àn
 > 
FIO_SERVER_MAX_FRAGMENT_PDU
)

1072 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

1074 i‡(
this_Àn
 < 
size
)

1075 
this_Êags
 |
FIO_NET_CMD_F_MORE
;

1077 
	`__fio_öô_√t_cmd
(&
cmd
, 
›code
, 
this_Àn
, 
èg
);

1078 
cmd
.
Êags
 = 
	`__˝u_to_À32
(
this_Êags
);

1079 
	`fio_√t_cmd_¸c_pdu
(&
cmd
, 
buf
);

1081 
iov
[1].
iov_ba£
 = (*Ë
buf
;

1082 
iov
[1].
iov_Àn
 = 
this_Àn
;

1084 
ªt
 = 
	`fio_£ndv_d©a
(
sk
, 
iov
, 2);

1085 
size
 -
this_Àn
;

1086 
buf
 +
this_Àn
;

1087 } !
ªt
 && 
size
);

1089  
ªt
;

1090 
	}
}

1092 
	$föish_íåy
(
sk_íåy
 *
íåy
)

1094 i‡(
íåy
->
Êags
 & 
SK_F_FREE
)

1095 
	`‰ì
(
íåy
->
buf
);

1096 i‡(
íåy
->
Êags
 & 
SK_F_COPY
)

1097 
	`s‰ì
(
íåy
->
buf
);

1099 
	`s‰ì
(
íåy
);

1100 
	}
}

1102 
	$íåy_£t_Êags
(
sk_íåy
 *
íåy
, 
Êi°_hód
 *
li°
,

1103 *
Êags
)

1105 i‡(!
	`Êi°_em±y
(
li°
))

1106 *
Êags
 = 
FIO_NET_CMD_F_MORE
;

1108 *
Êags
 = 0;

1109 
	}
}

1111 
	$£nd_vec_íåy
(
sk_out
 *sk_out, 
sk_íåy
 *
fú°
)

1113 
Êags
;

1114 
ªt
;

1116 
	`íåy_£t_Êags
(
fú°
, &fú°->
√xt
, &
Êags
);

1118 
ªt
 = 
	`fio_£nd_cmd_ext_pdu
(
sk_out
->
sk
, 
fú°
->
›code
, fú°->
buf
,

1119 
fú°
->
size
, fú°->
èg
, 
Êags
);

1121 !
	`Êi°_em±y
(&
fú°
->
√xt
)) {

1122 
sk_íåy
 *
√xt
;

1124 
√xt
 = 
	`Êi°_fú°_íåy
(&
fú°
->√xt, 
sk_íåy
, 
li°
);

1125 
	`Êi°_dñ_öô
(&
√xt
->
li°
);

1127 
	`íåy_£t_Êags
(
√xt
, &
fú°
->√xt, &
Êags
);

1129 
ªt
 +
	`fio_£nd_cmd_ext_pdu
(
sk_out
->
sk
, 
√xt
->
›code
,Çext->
buf
,

1130 
√xt
->
size
,Çext->
èg
, 
Êags
);

1131 
	`föish_íåy
(
√xt
);

1134  
ªt
;

1135 
	}
}

1137 
	$h™dÀ_sk_íåy
(
sk_out
 *sk_out, 
sk_íåy
 *
íåy
)

1139 
ªt
;

1141 
	`fio_muãx_down
(&
sk_out
->
xmô
);

1143 i‡(
íåy
->
Êags
 & 
SK_F_VEC
)

1144 
ªt
 = 
	`£nd_vec_íåy
(
sk_out
, 
íåy
);

1145 i‡(
íåy
->
Êags
 & 
SK_F_SIMPLE
) {

1146 
ªt
 = 
	`fio_√t_£nd_sim∂e_cmd
(
sk_out
->
sk
, 
íåy
->
›code
,

1147 
íåy
->
èg
, 
NULL
);

1149 
ªt
 = 
	`fio_√t_£nd_cmd
(
sk_out
->
sk
, 
íåy
->
›code
,É¡ry->
buf
,

1150 
íåy
->
size
, &íåy->
èg
, 
NULL
);

1153 
	`fio_muãx_up
(&
sk_out
->
xmô
);

1155 i‡(
ªt
)

1156 
	`log_îr
("fio: faûed h™dlög cmd %s\n", 
	`fio_£rvî_›
(
íåy
->
›code
));

1158 
	`föish_íåy
(
íåy
);

1159  
ªt
;

1160 
	}
}

1162 
	$h™dÀ_xmôs
(
sk_out
 *sk_out)

1164 
sk_íåy
 *
íåy
;

1165 
	`FLIST_HEAD
(
li°
);

1166 
ªt
 = 0;

1168 
	`sk_lock
(
sk_out
);

1169 i‡(
	`Êi°_em±y
(&
sk_out
->
li°
)) {

1170 
	`sk_u∆ock
(
sk_out
);

1174 
	`Êi°_•li˚_öô
(&
sk_out
->
li°
, &list);

1175 
	`sk_u∆ock
(
sk_out
);

1177 !
	`Êi°_em±y
(&
li°
)) {

1178 
íåy
 = 
	`Êi°_íåy
(
li°
.
√xt
, 
sk_íåy
,Üist);

1179 
	`Êi°_dñ
(&
íåy
->
li°
);

1180 
ªt
 +
	`h™dÀ_sk_íåy
(
sk_out
, 
íåy
);

1183  
ªt
;

1184 
	}
}

1186 
	$h™dÀ_c⁄√˘i⁄
(
sk_out
 *sk_out)

1188 
fio_√t_cmd
 *
cmd
 = 
NULL
;

1189 
	`FLIST_HEAD
(
job_li°
);

1190 
ªt
 = 0;

1192 
	`ª£t_fio_°©e
();

1195 !
exô_backíd
) {

1196 
pﬁlfd
 
pfd
 = {

1197 .
fd
 = 
sk_out
->
sk
,

1198 .
evíts
 = 
POLLIN
,

1201 
ªt
 = 0;

1203 
timeout
 = 1000;

1205 i‡(!
	`Êi°_em±y
(&
job_li°
))

1206 
timeout
 = 100;

1208 
	`h™dÀ_xmôs
(
sk_out
);

1210 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 0);

1211 i‡(
ªt
 < 0) {

1212 i‡(
î∫o
 =
EINTR
)

1214 
	`log_îr
("fio:Öﬁl: %s\n", 
	`°ªº‹
(
î∫o
));

1216 } i‡(!
ªt
) {

1217 
	`fio_£rvî_check_jobs
(&
job_li°
);

1218 
	`fio_muãx_down_timeout
(&
sk_out
->
waô
, 
timeout
);

1222 i‡(
pfd
.
ªvíts
 & 
POLLIN
)

1224 i‡(
pfd
.
ªvíts
 & (
POLLERR
|
POLLHUP
)) {

1225 
ªt
 = 1;

1228 } !
exô_backíd
);

1230 
	`fio_£rvî_check_jobs
(&
job_li°
);

1232 i‡(
ªt
 < 0)

1235 
cmd
 = 
	`fio_√t_ªcv_cmd
(
sk_out
->
sk
, 
åue
);

1236 i‡(!
cmd
) {

1237 
ªt
 = -1;

1241 
ªt
 = 
	`h™dÀ_comm™d
(
sk_out
, &
job_li°
, 
cmd
);

1242 i‡(
ªt
)

1245 
	`‰ì
(
cmd
);

1246 
cmd
 = 
NULL
;

1249 i‡(
cmd
)

1250 
	`‰ì
(
cmd
);

1252 
	`h™dÀ_xmôs
(
sk_out
);

1254 
	`˛o£
(
sk_out
->
sk
);

1255 
sk_out
->
sk
 = -1;

1256 
	`__sk_out_dr›
(
sk_out
);

1257 
	`_exô
(
ªt
);

1258 
	}
}

1263 
	$gë_my_addr_°r
(
sk
)

1265 
sockaddr_ö6
 
myaddr6
 = { 0, };

1266 
sockaddr_ö
 
myaddr4
 = { 0, };

1267 
sockaddr
 *
sockaddr_p
;

1268 *
√t_addr
;

1269 
sockÀn_t
 
Àn
;

1270 
ªt
;

1272 i‡(
u£_ùv6
) {

1273 
Àn
 = (
myaddr6
);

1274 
sockaddr_p
 = (
sockaddr
 * )&
myaddr6
;

1275 
√t_addr
 = (* )&
myaddr6
.
sö6_addr
;

1277 
Àn
 = (
myaddr4
);

1278 
sockaddr_p
 = (
sockaddr
 * )&
myaddr4
;

1279 
√t_addr
 = (* )&
myaddr4
.
sö_addr
;

1282 
ªt
 = 
	`gësock«me
(
sk
, 
sockaddr_p
, &
Àn
);

1283 i‡(
ªt
) {

1284 
	`log_îr
("fio: gësock«me: %s\n", 
	`°ªº‹
(
î∫o
));

1288 i‡(!
	`öë_¡›
(
u£_ùv6
?
AF_INET6
:
AF_INET
, 
√t_addr
, 
˛õ¡_sockaddr_°r
, 
INET6_ADDRSTRLEN
 - 1)) {

1289 
	`log_îr
("inet_ntop: failedÅo convertáddrÅo string\n");

1293 
	`d¥öt
(
FD_NET
, "fiÿ£rvî boundÅÿadd∏%s\n", 
˛õ¡_sockaddr_°r
);

1295 
	}
}

1297 
	$ac˚±_lo›
(
li°í_sk
)

1299 
sockaddr_ö
 
addr
;

1300 
sockaddr_ö6
 
addr6
;

1301 
sockÀn_t
 
Àn
 = 
u£_ùv6
 ? (
addr6
Ë: (
addr
);

1302 
pﬁlfd
 
pfd
;

1303 
ªt
 = 0, 
sk
, 
exôvÆ
 = 0;

1304 
	`FLIST_HEAD
(
c⁄n_li°
);

1306 
	`d¥öt
(
FD_NET
, "serverÉnterácceptÜoop\n");

1308 
	`fio_£t_fd_n⁄blockög
(
li°í_sk
, "server");

1310 !
exô_backíd
) {

1311 
sk_out
 *sk_out;

1312 c⁄° *
‰om
;

1313 
buf
[64];

1314 
pid_t
 
pid
;

1316 
pfd
.
fd
 = 
li°í_sk
;

1317 
pfd
.
evíts
 = 
POLLIN
;

1319 
timeout
 = 1000;

1321 i‡(!
	`Êi°_em±y
(&
c⁄n_li°
))

1322 
timeout
 = 100;

1324 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
timeout
);

1325 i‡(
ªt
 < 0) {

1326 i‡(
î∫o
 =
EINTR
)

1328 
	`log_îr
("fio:Öﬁl: %s\n", 
	`°ªº‹
(
î∫o
));

1330 } i‡(!
ªt
) {

1331 
	`fio_£rvî_check_c⁄ns
(&
c⁄n_li°
);

1335 i‡(
pfd
.
ªvíts
 & 
POLLIN
)

1337 } !
exô_backíd
);

1339 
	`fio_£rvî_check_c⁄ns
(&
c⁄n_li°
);

1341 i‡(
exô_backíd
 || 
ªt
 < 0)

1344 i‡(
u£_ùv6
)

1345 
sk
 = 
	`ac˚±
(
li°í_sk
, (
sockaddr
 *Ë&
addr6
, &
Àn
);

1347 
sk
 = 
	`ac˚±
(
li°í_sk
, (
sockaddr
 *Ë&
addr
, &
Àn
);

1349 i‡(
sk
 < 0) {

1350 
	`log_îr
("fio:ác˚±: %s\n", 
	`°ªº‹
(
î∫o
));

1354 i‡(
u£_ùv6
)

1355 
‰om
 = 
	`öë_¡›
(
AF_INET6
, (
sockaddr
 *Ë&
addr6
.
sö6_addr
, 
buf
, (buf));

1357 
‰om
 = 
	`öë_¡›
(
AF_INET
, (
sockaddr
 *Ë&
addr
.
sö_addr
, 
buf
, (buf));

1359 
	`d¥öt
(
FD_NET
, "£rvî: c⁄√˘ from %s\n", 
‰om
);

1361 
sk_out
 = 
	`smÆloc
((*sk_out));

1362 
sk_out
->
sk
 = sk;

1363 
	`INIT_FLIST_HEAD
(&
sk_out
->
li°
);

1364 
	`__fio_muãx_öô
(&
sk_out
->
lock
, 
FIO_MUTEX_UNLOCKED
);

1365 
	`__fio_muãx_öô
(&
sk_out
->
waô
, 
FIO_MUTEX_LOCKED
);

1366 
	`__fio_muãx_öô
(&
sk_out
->
xmô
, 
FIO_MUTEX_UNLOCKED
);

1368 
pid
 = 
	`f‹k
();

1369 i‡(
pid
) {

1370 
	`˛o£
(
sk
);

1371 
	`fio_£rvî_add_c⁄n_pid
(&
c⁄n_li°
, 
pid
);

1376 
	`gë_my_addr_°r
(
sk
);

1382 
	`sk_out_assign
(
sk_out
);

1383 
	`h™dÀ_c⁄√˘i⁄
(
sk_out
);

1386  
exôvÆ
;

1387 
	}
}

1389 
	$fio_£rvî_ãxt_ouçut
(
Àvñ
, c⁄° *
buf
, 
size_t
 
Àn
)

1391 
sk_out
 *sk_ouà
	`±hªad_gë•ecific
(
sk_out_key
);

1392 
cmd_ãxt_pdu
 *
pdu
;

1393 
éí
;

1394 
timevÆ
 
tv
;

1396 i‡(!
sk_out
 || sk_out->
sk
 == -1)

1399 
éí
 = (*
pdu
Ë+ 
Àn
;

1400 
pdu
 = 
	`mÆloc
(
éí
);

1402 
pdu
->
Àvñ
 = 
	`__˝u_to_À32
(level);

1403 
pdu
->
buf_Àn
 = 
	`__˝u_to_À32
(
Àn
);

1405 
	`gëtimeofday
(&
tv
, 
NULL
);

1406 
pdu
->
log_£c
 = 
	`__˝u_to_À64
(
tv
.
tv_£c
);

1407 
pdu
->
log_u£c
 = 
	`__˝u_to_À64
(
tv
.
tv_u£c
);

1409 
	`mem˝y
(
pdu
->
buf
, buf, 
Àn
);

1411 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_TEXT
, 
pdu
, 
éí
, 
NULL
, 
SK_F_COPY
);

1412 
	`‰ì
(
pdu
);

1413  
Àn
;

1414 
	}
}

1416 
	$c⁄vît_io_°©
(
io_°©
 *
d°
, io_°© *
§c
)

1418 
d°
->
max_vÆ
 = 
	`˝u_to_À64
(
§c
->max_val);

1419 
d°
->
mö_vÆ
 = 
	`˝u_to_À64
(
§c
->min_val);

1420 
d°
->
ßm∂es
 = 
	`˝u_to_À64
(
§c
->samples);

1425 
d°
->
món
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->món.u.
f
));

1426 
d°
->
S
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->S.u.
f
));

1427 
	}
}

1429 
	$c⁄vît_gs
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
)

1431 
i
;

1433 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1434 
d°
->
max_run
[
i
] = 
	`˝u_to_À64
(
§c
->max_run[i]);

1435 
d°
->
mö_run
[
i
] = 
	`˝u_to_À64
(
§c
->min_run[i]);

1436 
d°
->
max_bw
[
i
] = 
	`˝u_to_À64
(
§c
->max_bw[i]);

1437 
d°
->
mö_bw
[
i
] = 
	`˝u_to_À64
(
§c
->min_bw[i]);

1438 
d°
->
iobyãs
[
i
] = 
	`˝u_to_À64
(
§c
->iobytes[i]);

1439 
d°
->
agg
[
i
] = 
	`˝u_to_À64
(
§c
->agg[i]);

1442 
d°
->
kb_ba£
 = 
	`˝u_to_À32
(
§c
->kb_base);

1443 
d°
->
unô_ba£
 = 
	`˝u_to_À32
(
§c
->unit_base);

1444 
d°
->
groupid
 = 
	`˝u_to_À32
(
§c
->groupid);

1445 
d°
->
unifõd_rw_ªp
 = 
	`˝u_to_À32
(
§c
->unified_rw_rep);

1446 
d°
->
sig_figs
 = 
	`˝u_to_À32
(
§c
->sig_figs);

1447 
	}
}

1453 
	$fio_£rvî_£nd_ts
(
thªad_°©
 *
ts
, 
group_run_°©s
 *
rs
)

1455 
cmd_ts_pdu
 
p
;

1456 
i
, 
j
;

1457 *
ss_buf
;

1458 
uöt64_t
 *
ss_i›s
, *
ss_bw
;

1460 
	`d¥öt
(
FD_NET
, "server sendingÉnd stats\n");

1462 
	`mem£t
(&
p
, 0, (p));

1464 
	`°∫˝y
(
p
.
ts
.
«me
,Ås->«me, 
FIO_JOBNAME_SIZE
 - 1);

1465 
	`°∫˝y
(
p
.
ts
.
vîr‹
,Ås->vîr‹, 
FIO_VERROR_SIZE
 - 1);

1466 
	`°∫˝y
(
p
.
ts
.
des¸ùti⁄
,Ås->des¸ùti⁄, 
FIO_JOBDESC_SIZE
 - 1);

1468 
p
.
ts
.
îr‹
 = 
	`˝u_to_À32
(ts->error);

1469 
p
.
ts
.
thªad_numbî
 = 
	`˝u_to_À32
(ts->thread_number);

1470 
p
.
ts
.
groupid
 = 
	`˝u_to_À32
(ts->groupid);

1471 
p
.
ts
.
pid
 = 
	`˝u_to_À32
(ts->pid);

1472 
p
.
ts
.
membîs
 = 
	`˝u_to_À32
(ts->members);

1473 
p
.
ts
.
unifõd_rw_ªp
 = 
	`˝u_to_À32
(ts->unified_rw_rep);

1475 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1476 
	`c⁄vît_io_°©
(&
p
.
ts
.
˛©_°©
[
i
], &ts->clat_stat[i]);

1477 
	`c⁄vît_io_°©
(&
p
.
ts
.
¶©_°©
[
i
], &ts->slat_stat[i]);

1478 
	`c⁄vît_io_°©
(&
p
.
ts
.
œt_°©
[
i
], &ts->lat_stat[i]);

1479 
	`c⁄vît_io_°©
(&
p
.
ts
.
bw_°©
[
i
], &ts->bw_stat[i]);

1480 
	`c⁄vît_io_°©
(&
p
.
ts
.
i›s_°©
[
i
], &ts->iops_stat[i]);

1483 
p
.
ts
.
u§_time
 = 
	`˝u_to_À64
(ts->usr_time);

1484 
p
.
ts
.
sys_time
 = 
	`˝u_to_À64
(ts->sys_time);

1485 
p
.
ts
.
˘x
 = 
	`˝u_to_À64
(ts->ctx);

1486 
p
.
ts
.
möf
 = 
	`˝u_to_À64
(ts->minf);

1487 
p
.
ts
.
majf
 = 
	`˝u_to_À64
(ts->majf);

1488 
p
.
ts
.
˛©_≥r˚¡ûes
 = 
	`˝u_to_À32
(ts->clat_percentiles);

1489 
p
.
ts
.
œt_≥r˚¡ûes
 = 
	`˝u_to_À32
(ts->lat_percentiles);

1490 
p
.
ts
.
≥r˚¡ûe_¥ecisi⁄
 = 
	`˝u_to_À64
(ts->percentile_precision);

1492 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

1493 
fio_Â64_t
 *
§c
 = &
ts
->
≥r˚¡ûe_li°
[
i
];

1494 
fio_Â64_t
 *
d°
 = &
p
.
ts
.
≥r˚¡ûe_li°
[
i
];

1496 
d°
->
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->u.
f
));

1499 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

1500 
p
.
ts
.
io_u_m≠
[
i
] = 
	`˝u_to_À64
(ts->io_u_map[i]);

1501 
p
.
ts
.
io_u_submô
[
i
] = 
	`˝u_to_À64
(ts->io_u_submit[i]);

1502 
p
.
ts
.
io_u_com∂ëe
[
i
] = 
	`˝u_to_À64
(ts->io_u_complete[i]);

1505 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++)

1506 
p
.
ts
.
io_u_œt_n
[
i
] = 
	`˝u_to_À64
(ts->io_u_lat_n[i]);

1507 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

1508 
p
.
ts
.
io_u_œt_u
[
i
] = 
	`˝u_to_À64
(ts->io_u_lat_u[i]);

1509 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

1510 
p
.
ts
.
io_u_œt_m
[
i
] = 
	`˝u_to_À64
(ts->io_u_lat_m[i]);

1512 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

1513 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++)

1514 
p
.
ts
.
io_u_∂©
[
i
][
j
] = 
	`˝u_to_À64
(ts->io_u_plat[i][j]);

1516 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1517 
p
.
ts
.
tŸÆ_io_u
[
i
] = 
	`˝u_to_À64
(ts->total_io_u[i]);

1518 
p
.
ts
.
sh‹t_io_u
[
i
] = 
	`˝u_to_À64
(ts->short_io_u[i]);

1519 
p
.
ts
.
dr›_io_u
[
i
] = 
	`˝u_to_À64
(ts->drop_io_u[i]);

1522 
p
.
ts
.
tŸÆ_submô
 = 
	`˝u_to_À64
(ts->total_submit);

1523 
p
.
ts
.
tŸÆ_com∂ëe
 = 
	`˝u_to_À64
(ts->total_complete);

1525 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1526 
p
.
ts
.
io_byãs
[
i
] = 
	`˝u_to_À64
(ts->io_bytes[i]);

1527 
p
.
ts
.
ru¡ime
[
i
] = 
	`˝u_to_À64
(ts->runtime[i]);

1530 
p
.
ts
.
tŸÆ_run_time
 = 
	`˝u_to_À64
(ts->total_run_time);

1531 
p
.
ts
.
c⁄töue_⁄_îr‹
 = 
	`˝u_to_À16
(ts->continue_on_error);

1532 
p
.
ts
.
tŸÆ_îr_cou¡
 = 
	`˝u_to_À64
(ts->total_err_count);

1533 
p
.
ts
.
fú°_îr‹
 = 
	`˝u_to_À32
(ts->first_error);

1534 
p
.
ts
.
kb_ba£
 = 
	`˝u_to_À32
(ts->kb_base);

1535 
p
.
ts
.
unô_ba£
 = 
	`˝u_to_À32
(ts->unit_base);

1537 
p
.
ts
.
œãncy_dïth
 = 
	`˝u_to_À32
(ts->latency_depth);

1538 
p
.
ts
.
œãncy_èrgë
 = 
	`˝u_to_À64
(ts->latency_target);

1539 
p
.
ts
.
œãncy_wödow
 = 
	`˝u_to_À64
(ts->latency_window);

1540 
p
.
ts
.
œãncy_≥r˚¡ûe
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->œãncy_≥r˚¡ûe.u.
f
));

1542 
p
.
ts
.
sig_figs
 = 
	`˝u_to_À32
(ts->sig_figs);

1544 
p
.
ts
.
ƒ_block_öfos
 = 
	`˝u_to_À64
(ts->nr_block_infos);

1545 
i
 = 0; i < 
p
.
ts
.
ƒ_block_öfos
; i++)

1546 
p
.
ts
.
block_öfos
[
i
] = 
	`˝u_to_À32
(ts->block_infos[i]);

1548 
p
.
ts
.
ss_dur
 = 
	`˝u_to_À64
(ts->ss_dur);

1549 
p
.
ts
.
ss_°©e
 = 
	`˝u_to_À32
(ts->ss_state);

1550 
p
.
ts
.
ss_hód
 = 
	`˝u_to_À32
(ts->ss_head);

1551 
p
.
ts
.
ss_limô
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->ss_limô.u.
f
));

1552 
p
.
ts
.
ss_¶›e
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->ss_¶›e.u.
f
));

1553 
p
.
ts
.
ss_devüti⁄
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->ss_devüti⁄.u.
f
));

1554 
p
.
ts
.
ss_¸ôîi⁄
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->ss_¸ôîi⁄.u.
f
));

1556 
	`c⁄vît_gs
(&
p
.
rs
,Ñs);

1558 
	`d¥öt
(
FD_NET
, "ts->ss_°©ê%d\n", 
ts
->
ss_°©e
);

1559 i‡(
ts
->
ss_°©e
 & 
FIO_SS_DATA
) {

1560 
	`d¥öt
(
FD_NET
, "server sending steadystateÑing buffers\n");

1562 
ss_buf
 = 
	`mÆloc
((
p
Ë+ 2*
ts
->
ss_dur
*(
uöt64_t
));

1564 
	`mem˝y
(
ss_buf
, &
p
, (p));

1566 
ss_i›s
 = (
uöt64_t
 *Ë((
cmd_ts_pdu
 *)
ss_buf
 + 1);

1567 
ss_bw
 = 
ss_i›s
 + (Ë
ts
->
ss_dur
;

1568 
i
 = 0; i < 
ts
->
ss_dur
; i++) {

1569 
ss_i›s
[
i
] = 
	`˝u_to_À64
(
ts
->
ss_i›s_d©a
[i]);

1570 
ss_bw
[
i
] = 
	`˝u_to_À64
(
ts
->
ss_bw_d©a
[i]);

1573 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_TS
, 
ss_buf
, (
p
Ë+ 2*
ts
->
ss_dur
*(
uöt64_t
), 
NULL
, 
SK_F_COPY
);

1575 
	`‰ì
(
ss_buf
);

1578 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_TS
, &
p
, ’), 
NULL
, 
SK_F_COPY
);

1579 
	}
}

1581 
	$fio_£rvî_£nd_gs
(
group_run_°©s
 *
rs
)

1583 
group_run_°©s
 
gs
;

1585 
	`d¥öt
(
FD_NET
, "server sending groupÑun stats\n");

1587 
	`c⁄vît_gs
(&
gs
, 
rs
);

1588 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_GS
, &
gs
, (gs), 
NULL
, 
SK_F_COPY
);

1589 
	}
}

1591 
	$fio_£rvî_£nd_job_›ti⁄s
(
Êi°_hód
 *
›t_li°
,

1592 
groupid
)

1594 
cmd_job_›ti⁄
 
pdu
;

1595 
Êi°_hód
 *
íåy
;

1597 i‡(
	`Êi°_em±y
(
›t_li°
))

1600 
	`Êi°_f‹_óch
(
íåy
, 
›t_li°
) {

1601 
¥öt_›ti⁄
 *
p
;

1602 
size_t
 
Àn
;

1604 
p
 = 
	`Êi°_íåy
(
íåy
, 
¥öt_›ti⁄
, 
li°
);

1605 
	`mem£t
(&
pdu
, 0, (pdu));

1607 i‡(
groupid
 == -1U) {

1608 
pdu
.
globÆ
 = 
	`__˝u_to_À16
(1);

1609 
pdu
.
groupid
 = 0;

1611 
pdu
.
globÆ
 = 0;

1612 
pdu
.
groupid
 = 
	`˝u_to_À32
(groupid);

1614 
Àn
 = 
	`°æí
(
p
->
«me
);

1615 i‡(
Àn
 >(
pdu
.
«me
)) {

1616 
Àn
 = (
pdu
.
«me
) - 1;

1617 
pdu
.
åunˇãd
 = 
	`__˝u_to_À16
(1);

1619 
	`mem˝y
(
pdu
.
«me
, 
p
->«me, 
Àn
);

1620 i‡(
p
->
vÆue
) {

1621 
Àn
 = 
	`°æí
(
p
->
vÆue
);

1622 i‡(
Àn
 >(
pdu
.
vÆue
)) {

1623 
Àn
 = (
pdu
.
vÆue
) - 1;

1624 
pdu
.
åunˇãd
 = 
	`__˝u_to_À16
(1);

1626 
	`mem˝y
(
pdu
.
vÆue
, 
p
->vÆue, 
Àn
);

1628 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_JOB_OPT
, &
pdu
, ’du), 
NULL
, 
SK_F_COPY
);

1630 
	}
}

1632 
	$c⁄vît_agg
(
disk_utû_agg
 *
d°
, disk_utû_agg *
§c
)

1634 
i
;

1636 
i
 = 0; i < 2; i++) {

1637 
d°
->
ios
[
i
] = 
	`˝u_to_À64
(
§c
->ios[i]);

1638 
d°
->
mîges
[
i
] = 
	`˝u_to_À64
(
§c
->merges[i]);

1639 
d°
->
£˘‹s
[
i
] = 
	`˝u_to_À64
(
§c
->sectors[i]);

1640 
d°
->
ticks
[
i
] = 
	`˝u_to_À64
(
§c
->ticks[i]);

1643 
d°
->
io_ticks
 = 
	`˝u_to_À64
(
§c
->io_ticks);

1644 
d°
->
time_ö_queue
 = 
	`˝u_to_À64
(
§c
->time_in_queue);

1645 
d°
->
¶avecou¡
 = 
	`˝u_to_À32
(
§c
->slavecount);

1646 
d°
->
max_utû
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->max_utû.u.
f
));

1647 
	}
}

1649 
	$c⁄vît_dus
(
disk_utû_°©
 *
d°
, disk_utû_°© *
§c
)

1651 
i
;

1653 
d°
->
«me
[
FIO_DU_NAME_SZ
 - 1] = '\0';

1654 
	`°∫˝y
((*Ë
d°
->
«me
, (*Ë
§c
->«me, 
FIO_DU_NAME_SZ
 - 1);

1656 
i
 = 0; i < 2; i++) {

1657 
d°
->
s
.
ios
[
i
] = 
	`˝u_to_À64
(
§c
->s.ios[i]);

1658 
d°
->
s
.
mîges
[
i
] = 
	`˝u_to_À64
(
§c
->s.merges[i]);

1659 
d°
->
s
.
£˘‹s
[
i
] = 
	`˝u_to_À64
(
§c
->s.sectors[i]);

1660 
d°
->
s
.
ticks
[
i
] = 
	`˝u_to_À64
(
§c
->s.ticks[i]);

1663 
d°
->
s
.
io_ticks
 = 
	`˝u_to_À64
(
§c
->s.io_ticks);

1664 
d°
->
s
.
time_ö_queue
 = 
	`˝u_to_À64
(
§c
->s.time_in_queue);

1665 
d°
->
s
.
m£c
 = 
	`˝u_to_À64
(
§c
->s.msec);

1666 
	}
}

1668 
	$fio_£rvî_£nd_du
()

1670 
disk_utû
 *
du
;

1671 
Êi°_hód
 *
íåy
;

1672 
cmd_du_pdu
 
pdu
;

1674 
	`d¥öt
(
FD_NET
, "£rvî: sídög disk_utû %d\n", !
	`Êi°_em±y
(&
disk_li°
));

1676 
	`mem£t
(&
pdu
, 0, (pdu));

1678 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

1679 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

1681 
	`c⁄vît_dus
(&
pdu
.
dus
, &
du
->dus);

1682 
	`c⁄vît_agg
(&
pdu
.
agg
, &
du
->agg);

1684 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_DU
, &
pdu
, ’du), 
NULL
, 
SK_F_COPY
);

1686 
	}
}

1688 #ifde‡
CONFIG_ZLIB


1690 
ölöe
 
	$__fio_√t_¥ï_èû
(
z_°ªam
 *
°ªam
, *
out_pdu
,

1691 
sk_íåy
 **
œ°_íåy
,

1692 
sk_íåy
 *
fú°
)

1694 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
 - 
°ªam
->
avaû_out
;

1696 *
œ°_íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
out_pdu
, 
this_Àn
,

1697 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
 | 
SK_F_FREE
);

1698 
	`Êi°_add_èû
(&(*
œ°_íåy
)->
li°
, &
fú°
->
√xt
);

1700 
	}
}

1706 
	$__deÊ©e_pdu_buf„r
(*
√xt_ö
, 
√xt_sz
, **
out_pdu
,

1707 
sk_íåy
 **
œ°_íåy
, 
z_°ªam
 *
°ªam
,

1708 
sk_íåy
 *
fú°
)

1710 
ªt
;

1712 
°ªam
->
√xt_ö
 =Çext_in;

1713 
°ªam
->
avaû_ö
 = 
√xt_sz
;

1715 i‡(! 
°ªam
->
avaû_out
) {

1717 
	`__fio_√t_¥ï_èû
(
°ªam
, *
out_pdu
, 
œ°_íåy
, 
fú°
);

1719 *
out_pdu
 = 
	`mÆloc
(
FIO_SERVER_MAX_FRAGMENT_PDU
);

1721 
°ªam
->
avaû_out
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

1722 
°ªam
->
√xt_out
 = *
out_pdu
;

1725 
ªt
 = 
	`deÊ©e
(
°ªam
, 
Z_BLOCK
);

1727 i‡(
ªt
 < 0) {

1728 
	`‰ì
(*
out_pdu
);

1731 } 
°ªam
->
avaû_ö
);

1734 
	}
}

1736 
	$__fio_≠≥nd_iﬁog_gz_hi°
(
sk_íåy
 *
fú°
, 
io_log
 *
log
,

1737 
io_logs
 *
cur_log
, 
z_°ªam
 *
°ªam
)

1739 
sk_íåy
 *
íåy
;

1740 *
out_pdu
;

1741 
ªt
, 
i
, 
j
;

1742 
ßm∂e_sz
 = 
	`log_íåy_sz
(
log
);

1744 
out_pdu
 = 
	`mÆloc
(
FIO_SERVER_MAX_FRAGMENT_PDU
);

1745 
°ªam
->
avaû_out
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

1746 
°ªam
->
√xt_out
 = 
out_pdu
;

1748 
i
 = 0; i < 
cur_log
->
ƒ_ßm∂es
; i++) {

1749 
io_ßm∂e
 *
s
;

1750 
io_u_∂©_íåy
 *
cur_∂©_íåy
, *
¥ev_∂©_íåy
;

1751 
uöt64_t
 *
cur_∂©
, *
¥ev_∂©
;

1753 
s
 = 
	`gë_ßm∂e
(
log
, 
cur_log
, 
i
);

1754 
ªt
 = 
	`__deÊ©e_pdu_buf„r
(
s
, 
ßm∂e_sz
, &
out_pdu
, &
íåy
, 
°ªam
, 
fú°
);

1755 i‡(
ªt
)

1756  
ªt
;

1761 
cur_∂©_íåy
 = 
s
->
d©a
.
∂©_íåy
;

1762 
¥ev_∂©_íåy
 = 
	`Êi°_fú°_íåy
(&
cur_∂©_íåy
->
li°
, 
io_u_∂©_íåy
,Üist);

1763 
cur_∂©
 = 
cur_∂©_íåy
->
io_u_∂©
;

1764 
¥ev_∂©
 = 
¥ev_∂©_íåy
->
io_u_∂©
;

1766 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++) {

1767 
cur_∂©
[
j
] -
¥ev_∂©
[j];

1770 
	`Êi°_dñ
(&
¥ev_∂©_íåy
->
li°
);

1771 
	`‰ì
(
¥ev_∂©_íåy
);

1773 
ªt
 = 
	`__deÊ©e_pdu_buf„r
(
cur_∂©_íåy
, (*cur_plat_entry),

1774 &
out_pdu
, &
íåy
, 
°ªam
, 
fú°
);

1776 i‡(
ªt
)

1777  
ªt
;

1780 
	`__fio_√t_¥ï_èû
(
°ªam
, 
out_pdu
, &
íåy
, 
fú°
);

1783 
	}
}

1785 
	$__fio_≠≥nd_iﬁog_gz
(
sk_íåy
 *
fú°
, 
io_log
 *
log
,

1786 
io_logs
 *
cur_log
, 
z_°ªam
 *
°ªam
)

1788 
this_Àn
;

1789 *
out_pdu
;

1790 
ªt
;

1792 i‡(
log
->
log_ty≥
 =
IO_LOG_TYPE_HIST
)

1793  
	`__fio_≠≥nd_iﬁog_gz_hi°
(
fú°
, 
log
, 
cur_log
, 
°ªam
);

1795 
°ªam
->
√xt_ö
 = (*Ë
cur_log
->
log
;

1796 
°ªam
->
avaû_ö
 = 
cur_log
->
ƒ_ßm∂es
 * 
	`log_íåy_sz
(
log
);

1799 
sk_íåy
 *
íåy
;

1806 
out_pdu
 = 
	`mÆloc
(
FIO_SERVER_MAX_FRAGMENT_PDU
);

1808 
°ªam
->
avaû_out
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

1809 
°ªam
->
√xt_out
 = 
out_pdu
;

1810 
ªt
 = 
	`deÊ©e
(
°ªam
, 
Z_BLOCK
);

1812 i‡(
ªt
 < 0) {

1813 
	`‰ì
(
out_pdu
);

1817 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
 - 
°ªam
->
avaû_out
;

1819 
íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
out_pdu
, 
this_Àn
,

1820 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
 | 
SK_F_FREE
);

1821 
	`Êi°_add_èû
(&
íåy
->
li°
, &
fú°
->
√xt
);

1822 } 
°ªam
->
avaû_ö
);

1825 
	}
}

1827 
	$fio_≠≥nd_iﬁog_gz
(
sk_íåy
 *
fú°
, 
io_log
 *
log
)

1829 
z_°ªam
 
°ªam
 = {

1830 .
zÆloc
 = 
Z_NULL
,

1831 .
z‰ì
 = 
Z_NULL
,

1832 .
›aque
 = 
Z_NULL
,

1834 
ªt
 = 0;

1836 i‡(
	`deÊ©eInô
(&
°ªam
, 
Z_DEFAULT_COMPRESSION
Ë!
Z_OK
)

1839 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

1840 
io_logs
 *
cur_log
;

1842 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

1843 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

1845 
ªt
 = 
	`__fio_≠≥nd_iﬁog_gz
(
fú°
, 
log
, 
cur_log
, &
°ªam
);

1846 i‡(
ªt
)

1850 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

1852 
ªt
 !
Z_STREAM_END
) {

1853 
sk_íåy
 *
íåy
;

1854 
this_Àn
;

1855 *
out_pdu
;

1857 
out_pdu
 = 
	`mÆloc
(
FIO_SERVER_MAX_FRAGMENT_PDU
);

1858 
°ªam
.
avaû_out
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

1859 
°ªam
.
√xt_out
 = 
out_pdu
;

1861 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

1863 i‡(
ªt
 < 0) {

1864 
	`‰ì
(
out_pdu
);

1868 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
 - 
°ªam
.
avaû_out
;

1870 
íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
out_pdu
, 
this_Àn
,

1871 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
 | 
SK_F_FREE
);

1872 
	`Êi°_add_èû
(&
íåy
->
li°
, &
fú°
->
√xt
);

1873 } 
ªt
 !
Z_STREAM_END
);

1875 
ªt
 = 
	`deÊ©eEnd
(&
°ªam
);

1876 i‡(
ªt
 =
Z_OK
)

1880 
	}
}

1882 
	$fio_≠≥nd_iﬁog_gz
(
sk_íåy
 *
fú°
, 
io_log
 *
log
)

1885 
	}
}

1888 
	$fio_≠≥nd_gz_chunks
(
sk_íåy
 *
fú°
, 
io_log
 *
log
)

1890 
sk_íåy
 *
íåy
;

1891 
Êi°_hód
 *
node
;

1893 
	`±hªad_muãx_lock
(&
log
->
chunk_lock
);

1894 
	`Êi°_f‹_óch
(
node
, &
log
->
chunk_li°
) {

1895 
iﬁog_com¥ess
 *
c
;

1897 
c
 = 
	`Êi°_íåy
(
node
, 
iﬁog_com¥ess
, 
li°
);

1898 
íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
c
->
buf
, c->
Àn
,

1899 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
);

1900 
	`Êi°_add_èû
(&
íåy
->
li°
, &
fú°
->
√xt
);

1902 
	`±hªad_muãx_u∆ock
(&
log
->
chunk_lock
);

1905 
	}
}

1907 
	$fio_≠≥nd_ãxt_log
(
sk_íåy
 *
fú°
, 
io_log
 *
log
)

1909 
sk_íåy
 *
íåy
;

1911 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

1912 
io_logs
 *
cur_log
;

1913 
size_t
 
size
;

1915 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

1916 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

1918 
size
 = 
cur_log
->
ƒ_ßm∂es
 * 
	`log_íåy_sz
(
log
);

1920 
íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
cur_log
->
log
, 
size
,

1921 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
);

1922 
	`Êi°_add_èû
(&
íåy
->
li°
, &
fú°
->
√xt
);

1926 
	}
}

1928 
	$fio_£nd_iﬁog
(
thªad_d©a
 *
td
, 
io_log
 *
log
, c⁄° *
«me
)

1930 
cmd_iﬁog_pdu
 
pdu
 = {

1931 .
ƒ_ßm∂es
 = 
	`˝u_to_À64
(
	`iﬁog_ƒ_ßm∂es
(
log
)),

1932 .
thªad_numbî
 = 
	`˝u_to_À32
(
td
->thread_number),

1933 .
log_ty≥
 = 
	`˝u_to_À32
(
log
->log_type),

1934 .
log_hi°_cﬂr£√ss
 = 
	`˝u_to_À32
(
log
->
hi°_cﬂr£√ss
),

1936 
sk_íåy
 *
fú°
;

1937 
Êi°_hód
 *
íåy
;

1938 
ªt
 = 0;

1940 i‡(!
	`Êi°_em±y
(&
log
->
chunk_li°
))

1941 
pdu
.
com¥es£d
 = 
	`__˝u_to_À32
(
STORE_COMPRESSED
);

1942 i‡(
u£_zlib
)

1943 
pdu
.
com¥es£d
 = 
	`__˝u_to_À32
(
XMIT_COMPRESSED
);

1945 
pdu
.
com¥es£d
 = 0;

1947 
	`°∫˝y
((*Ë
pdu
.
«me
,Çame, 
FIO_NET_NAME_MAX
);

1948 
pdu
.
«me
[
FIO_NET_NAME_MAX
 - 1] = '\0';

1954 
	`Êi°_f‹_óch
(
íåy
, &
log
->
io_logs
) {

1955 
io_logs
 *
cur_log
;

1956 
i
;

1958 
cur_log
 = 
	`Êi°_íåy
(
íåy
, 
io_logs
, 
li°
);

1960 
i
 = 0; i < 
cur_log
->
ƒ_ßm∂es
; i++) {

1961 
io_ßm∂e
 *
s
 = 
	`gë_ßm∂e
(
log
, 
cur_log
, 
i
);

1963 
s
->
time
 = 
	`˝u_to_À64
(s->time);

1964 
s
->
d©a
.
vÆ
 = 
	`˝u_to_À64
(s->data.val);

1965 
s
->
__ddú
 = 
	`˝u_to_À32
(s->__ddir);

1966 
s
->
bs
 = 
	`˝u_to_À32
(s->bs);

1968 i‡(
log
->
log_off£t
) {

1969 
io_ßm∂e_off£t
 *
so
 = (*Ë
s
;

1971 
so
->
off£t
 = 
	`˝u_to_À64
(so->offset);

1979 
fú°
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, &
pdu
, ’du), 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
 | 
SK_F_COPY
);

1987 i‡(!
	`Êi°_em±y
(&
log
->
chunk_li°
))

1988 
ªt
 = 
	`fio_≠≥nd_gz_chunks
(
fú°
, 
log
);

1989 i‡(
u£_zlib
)

1990 
ªt
 = 
	`fio_≠≥nd_iﬁog_gz
(
fú°
, 
log
);

1992 
ªt
 = 
	`fio_≠≥nd_ãxt_log
(
fú°
, 
log
);

1994 
	`fio_√t_queue_íåy
(
fú°
);

1995  
ªt
;

1996 
	}
}

1998 
	$fio_£rvî_£nd_add_job
(
thªad_d©a
 *
td
)

2000 
cmd_add_job_pdu
 
pdu
 = {

2001 .
thªad_numbî
 = 
	`˝u_to_À32
(
td
->thread_number),

2002 .
groupid
 = 
	`˝u_to_À32
(
td
->groupid),

2005 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
pdu
.
t›
, &
td
->
o
);

2007 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_ADD_JOB
, &
pdu
, ’du), 
NULL
,

2008 
SK_F_COPY
);

2009 
	}
}

2011 
	$fio_£rvî_£nd_°¨t
(
thªad_d©a
 *
td
)

2013 
sk_out
 *sk_ouà
	`±hªad_gë•ecific
(
sk_out_key
);

2015 
	`as£π
(
sk_out
->
sk
 != -1);

2017 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_SERVER_START
, 
NULL
, 0, NULL, 
SK_F_SIMPLE
);

2018 
	}
}

2020 
	$fio_£rvî_gë_vîify_°©e
(c⁄° *
«me
, 
thªadnumbî
,

2021 **
d©≠
)

2023 
thªad_io_li°
 *
s
;

2024 
cmd_£ndfûe
 
out
;

2025 
cmd_ª∂y
 *
ªp
;

2026 
uöt64_t
 
èg
;

2027 *
d©a
;

2028 
ªt
;

2030 
	`d¥öt
(
FD_NET
, "server:Ñequest verify state\n");

2032 
ªp
 = 
	`smÆloc
((*rep));

2033 i‡(!
ªp
)

2034  
ENOMEM
;

2036 
	`__fio_muãx_öô
(&
ªp
->
lock
, 
FIO_MUTEX_LOCKED
);

2037 
ªp
->
d©a
 = 
NULL
;

2038 
ªp
->
îr‹
 = 0;

2040 
	`vîify_°©e_gí_«me
((*Ë
out
.
∑th
, (out.∑th), 
«me
, 
me
,

2041 
thªadnumbî
);

2042 
èg
 = (
uöt64_t
Ë(
uöçå_t
Ë
ªp
;

2043 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_SENDFILE
, &
out
, (out), &
èg
,

2044 
SK_F_COPY
);

2049 i‡(
	`fio_muãx_down_timeout
(&
ªp
->
lock
, 10000)) {

2050 
	`log_îr
("fio:Åimed out waiting forÑeply\n");

2051 
ªt
 = 
ETIMEDOUT
;

2052 
Áû
;

2055 i‡(
ªp
->
îr‹
) {

2056 
	`log_îr
("fio: failure onÑeceiving state file %s: %s\n",

2057 
out
.
∑th
, 
	`°ªº‹
(
ªp
->
îr‹
));

2058 
ªt
 = 
ªp
->
îr‹
;

2059 
Áû
:

2060 *
d©≠
 = 
NULL
;

2061 
	`s‰ì
(
ªp
);

2062 
	`fio_√t_queue_quô
();

2063  
ªt
;

2070 
s
 = 
ªp
->
d©a
 + (
vîify_°©e_hdr
);

2071 i‡(
	`vîify_°©e_hdr
(
ªp
->
d©a
, 
s
)) {

2072 
ªt
 = 
EILSEQ
;

2073 
Áû
;

2079 
ªt
 = 0;

2080 
ªp
->
size
 -(
vîify_°©e_hdr
);

2081 
d©a
 = 
	`mÆloc
(
ªp
->
size
);

2082 
	`mem˝y
(
d©a
, 
s
, 
ªp
->
size
);

2083 *
d©≠
 = 
d©a
;

2085 
	`s‰ì
(
ªp
->
d©a
);

2086 
	`__fio_muãx_ªmove
(&
ªp
->
lock
);

2087 
	`s‰ì
(
ªp
);

2088  
ªt
;

2089 
	}
}

2091 
	$fio_öô_£rvî_ù
()

2093 
sockaddr
 *
addr
;

2094 
sockÀn_t
 
sockÀn
;

2095 
buf
[80];

2096 c⁄° *
°r
;

2097 
sk
, 
›t
;

2099 i‡(
u£_ùv6
)

2100 
sk
 = 
	`sockë
(
AF_INET6
, 
SOCK_STREAM
, 0);

2102 
sk
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

2104 i‡(
sk
 < 0) {

2105 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

2109 
›t
 = 1;

2110 i‡(
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
›t
, (opt)) < 0) {

2111 
	`log_îr
("fio: sësock›t(REUSEADDR): %s\n", 
	`°ªº‹
(
î∫o
));

2112 
	`˛o£
(
sk
);

2115 #ifde‡
SO_REUSEPORT


2119 
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_REUSEPORT
, &
›t
, (opt));

2122 i‡(
u£_ùv6
) {

2123 c⁄° *
§c
 = &
ßddr_ö6
.
sö6_addr
;

2125 
addr
 = (
sockaddr
 *Ë&
ßddr_ö6
;

2126 
sockÀn
 = (
ßddr_ö6
);

2127 
ßddr_ö6
.
sö6_Ámûy
 = 
AF_INET6
;

2128 
°r
 = 
	`öë_¡›
(
AF_INET6
, 
§c
, 
buf
, (buf));

2130 c⁄° *
§c
 = &
ßddr_ö
.
sö_addr
;

2132 
addr
 = (
sockaddr
 *Ë&
ßddr_ö
;

2133 
sockÀn
 = (
ßddr_ö
);

2134 
ßddr_ö
.
sö_Ámûy
 = 
AF_INET
;

2135 
°r
 = 
	`öë_¡›
(
AF_INET
, 
§c
, 
buf
, (buf));

2138 i‡(
	`böd
(
sk
, 
addr
, 
sockÀn
) < 0) {

2139 
	`log_îr
("fio: böd: %s\n", 
	`°ªº‹
(
î∫o
));

2140 
	`log_öfo
("fio: faûed wôh IPv%¯%s\n", 
u£_ùv6
 ? '6' : '4', 
°r
);

2141 
	`˛o£
(
sk
);

2145  
sk
;

2146 
	}
}

2148 
	$fio_öô_£rvî_sock
()

2150 
sockaddr_un
 
addr
;

2151 
sockÀn_t
 
Àn
;

2152 
mode_t
 
mode
;

2153 
sk
;

2155 
sk
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

2156 i‡(
sk
 < 0) {

2157 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

2161 
mode
 = 
	`umask
(000);

2163 
	`mem£t
(&
addr
, 0, (addr));

2164 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

2165 
	`°∫˝y
(
addr
.
sun_∑th
, 
böd_sock
, (addr.sun_path) - 1);

2167 
Àn
 = (
addr
.
sun_Ámûy
Ë+ 
	`°æí
(
böd_sock
) + 1;

2169 i‡(
	`böd
(
sk
, (
sockaddr
 *Ë&
addr
, 
Àn
) < 0) {

2170 
	`log_îr
("fio: böd: %s\n", 
	`°ªº‹
(
î∫o
));

2171 
	`˛o£
(
sk
);

2175 
	`umask
(
mode
);

2176  
sk
;

2177 
	}
}

2179 
	$fio_öô_£rvî_c⁄√˘i⁄
()

2181 
böd_°r
[128];

2182 
sk
;

2184 
	`d¥öt
(
FD_NET
, "starting server\n");

2186 i‡(!
böd_sock
)

2187 
sk
 = 
	`fio_öô_£rvî_ù
();

2189 
sk
 = 
	`fio_öô_£rvî_sock
();

2191 i‡(
sk
 < 0)

2192  
sk
;

2194 
	`mem£t
(
böd_°r
, 0, (bind_str));

2196 i‡(!
böd_sock
) {

2197 *
p
, 
p‹t
[16];

2198 c⁄° *
§c
;

2199 
af
;

2201 i‡(
u£_ùv6
) {

2202 
af
 = 
AF_INET6
;

2203 
§c
 = &
ßddr_ö6
.
sö6_addr
;

2205 
af
 = 
AF_INET
;

2206 
§c
 = &
ßddr_ö
.
sö_addr
;

2209 
p
 = (*Ë
	`öë_¡›
(
af
, 
§c
, 
böd_°r
, (bind_str));

2211 
	`•rötf
(
p‹t
, ",%u", 
fio_√t_p‹t
);

2212 i‡(
p
)

2213 
	`°rˇt
(
p
, 
p‹t
);

2215 
	`°∫˝y
(
böd_°r
, 
p‹t
, (bind_str) - 1);

2217 
	`°∫˝y
(
böd_°r
, 
böd_sock
, (bind_str) - 1);

2219 
	`log_öfo
("fio: sîvîÜi°íög o¿%s\n", 
böd_°r
);

2221 i‡(
	`li°í
(
sk
, 4) < 0) {

2222 
	`log_îr
("fio:Üi°í: %s\n", 
	`°ªº‹
(
î∫o
));

2223 
	`˛o£
(
sk
);

2227  
sk
;

2228 
	}
}

2230 
	$fio_£rvî_∑r£_ho°
(c⁄° *
ho°
, 
ùv6
, 
ö_addr
 *
öp
,

2231 
ö6_addr
 *
öp6
)

2234 
ªt
 = 0;

2236 i‡(
ùv6
)

2237 
ªt
 = 
	`öë_±⁄
(
AF_INET6
, 
ho°
, 
öp6
);

2239 
ªt
 = 
	`öë_±⁄
(
AF_INET
, 
ho°
, 
öp
);

2241 i‡(
ªt
 != 1) {

2242 
addröfo
 *
ªs
, 
höts
 = {

2243 .
ai_Ámûy
 = 
ùv6
 ? 
AF_INET6
 : 
AF_INET
,

2244 .
ai_sockty≥
 = 
SOCK_STREAM
,

2247 
ªt
 = 
	`gëaddröfo
(
ho°
, 
NULL
, &
höts
, &
ªs
);

2248 i‡(
ªt
) {

2249 
	`log_îr
("fio: faûedÅÿªsﬁvê<%s> (%s)\n", 
ho°
,

2250 
	`gai_°ªº‹
(
ªt
));

2254 i‡(
ùv6
)

2255 
	`mem˝y
(
öp6
, &((
sockaddr_ö6
 *Ë
ªs
->
ai_addr
)->
sö6_addr
, (*inp6));

2257 
	`mem˝y
(
öp
, &((
sockaddr_ö
 *Ë
ªs
->
ai_addr
)->
sö_addr
, (*inp));

2259 
ªt
 = 1;

2260 
	`‰ìaddröfo
(
ªs
);

2263  !(
ªt
 == 1);

2264 
	}
}

2278 
	$fio_£rvî_∑r£_°rög
(c⁄° *
°r
, **
±r
, 
boﬁ
 *
is_sock
,

2279 *
p‹t
, 
ö_addr
 *
öp
,

2280 
ö6_addr
 *
öp6
, *
ùv6
)

2282 c⁄° *
ho°
 = 
°r
;

2283 *
p‹ç
;

2284 
Õ‹t
 = 0;

2286 *
±r
 = 
NULL
;

2287 *
is_sock
 = 
Ál£
;

2288 *
p‹t
 = 
fio_√t_p‹t
;

2289 *
ùv6
 = 0;

2291 i‡(!
	`°∫cmp
(
°r
, "sock:", 5)) {

2292 *
±r
 = 
	`°rdup
(
°r
 + 5);

2293 *
is_sock
 = 
åue
;

2301 i‡(!
	`°∫cmp
(
ho°
, "ip:", 3))

2302 
ho°
 += 3;

2303 i‡(!
	`°∫cmp
(
ho°
, "ip4:", 4))

2304 
ho°
 += 4;

2305 i‡(!
	`°∫cmp
(
ho°
, "ip6:", 4)) {

2306 
ho°
 += 4;

2307 *
ùv6
 = 1;

2308 } i‡(
ho°
[0] == ':') {

2310 
ho°
++;

2311 
Õ‹t
 = 
	`©oi
(
ho°
);

2312 i‡(!
Õ‹t
 ||Üport > 65535) {

2313 
	`log_îr
("fio: bad sîvîÖ‹à%u\n", 
Õ‹t
);

2317 *
p‹t
 = 
Õ‹t
;

2324 i‡(!
Õ‹t
) {

2325 
p‹ç
 = 
	`°rchr
(
ho°
, ',');

2326 i‡(
p‹ç
) {

2327 *
p‹ç
 = '\0';

2328 
p‹ç
++;

2329 
Õ‹t
 = 
	`©oi
(
p‹ç
);

2330 i‡(!
Õ‹t
 ||Üport > 65535) {

2331 
	`log_îr
("fio: bad sîvîÖ‹à%u\n", 
Õ‹t
);

2337 i‡(
Õ‹t
)

2338 *
p‹t
 = 
Õ‹t
;

2340 i‡(!
	`°æí
(
ho°
))

2343 *
±r
 = 
	`°rdup
(
ho°
);

2345 i‡(
	`fio_£rvî_∑r£_ho°
(*
±r
, *
ùv6
, 
öp
, 
öp6
)) {

2346 
	`‰ì
(*
±r
);

2347 *
±r
 = 
NULL
;

2351 i‡(*
p‹t
 == 0)

2352 *
p‹t
 = 
fio_√t_p‹t
;

2355 
	}
}

2369 
	$fio_h™dÀ_£rvî_¨g
()

2371 
p‹t
 = 
fio_√t_p‹t
;

2372 
boﬁ
 
is_sock
;

2373 
ªt
 = 0;

2375 
ßddr_ö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

2377 i‡(!
fio_£rvî_¨g
)

2378 
out
;

2380 
ªt
 = 
	`fio_£rvî_∑r£_°rög
(
fio_£rvî_¨g
, &
böd_sock
, &
is_sock
,

2381 &
p‹t
, &
ßddr_ö
.
sö_addr
,

2382 &
ßddr_ö6
.
sö6_addr
, &
u£_ùv6
);

2384 i‡(!
is_sock
 && 
böd_sock
) {

2385 
	`‰ì
(
böd_sock
);

2386 
böd_sock
 = 
NULL
;

2389 
out
:

2390 
fio_√t_p‹t
 = 
p‹t
;

2391 
ßddr_ö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

2392 
ßddr_ö6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

2393  
ªt
;

2394 
	}
}

2396 
	$sig_öt
(
sig
)

2398 i‡(
böd_sock
)

2399 
	`u∆ök
(
böd_sock
);

2400 
	}
}

2402 
	$£t_sig_h™dÀrs
()

2404 
siga˘i⁄
 
a˘
 = {

2405 .
ß_h™dÀr
 = 
sig_öt
,

2406 .
ß_Êags
 = 
SA_RESTART
,

2409 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

2410 
	}
}

2412 
	$fio_£rvî_de°roy_sk_key
()

2414 
	`±hªad_key_dñëe
(
sk_out_key
);

2415 
	}
}

2417 
	$fio_£rvî_¸óã_sk_key
()

2419 i‡(
	`±hªad_key_¸óã
(&
sk_out_key
, 
NULL
)) {

2420 
	`log_îr
("fio: can't create sk_out backend key\n");

2424 
	`±hªad_£t•ecific
(
sk_out_key
, 
NULL
);

2426 
	}
}

2428 
	$fio_£rvî
()

2430 
sk
, 
ªt
;

2432 
	`d¥öt
(
FD_NET
, "starting server\n");

2434 i‡(
	`fio_h™dÀ_£rvî_¨g
())

2437 
sk
 = 
	`fio_öô_£rvî_c⁄√˘i⁄
();

2438 i‡(
sk
 < 0)

2441 
	`£t_sig_h™dÀrs
();

2443 
ªt
 = 
	`ac˚±_lo›
(
sk
);

2445 
	`˛o£
(
sk
);

2447 i‡(
fio_£rvî_¨g
) {

2448 
	`‰ì
(
fio_£rvî_¨g
);

2449 
fio_£rvî_¨g
 = 
NULL
;

2451 i‡(
böd_sock
)

2452 
	`‰ì
(
böd_sock
);

2454  
ªt
;

2455 
	}
}

2457 
	$fio_£rvî_gŸ_sig«l
(
sig«l
)

2459 
sk_out
 *sk_ouà
	`±hªad_gë•ecific
(
sk_out_key
);

2461 
	`as£π
(
sk_out
);

2463 i‡(
sig«l
 =
SIGPIPE
)

2464 
sk_out
->
sk
 = -1;

2466 
	`log_öfo
("\nfio:Åîmö©ög o¿sig«»%d\n", 
sig«l
);

2467 
exô_backíd
 = 1;

2469 
	}
}

2471 
	$check_exi°ög_pidfûe
(c⁄° *
pidfûe
)

2473 
°©
 
sb
;

2474 
buf
[16];

2475 
pid_t
 
pid
;

2476 
FILE
 *
f
;

2478 i‡(
	`°©
(
pidfûe
, &
sb
))

2481 
f
 = 
	`f›í
(
pidfûe
, "r");

2482 i‡(!
f
)

2485 i‡(
	`‰ód
(
buf
, 
sb
.
°_size
, 1, 
f
) <= 0) {

2486 
	`f˛o£
(
f
);

2489 
	`f˛o£
(
f
);

2491 
pid
 = 
	`©oi
(
buf
);

2492 i‡(
	`kûl
(
pid
, 
SIGCONT
) < 0)

2493  
î∫o
 !
ESRCH
;

2496 
	}
}

2498 
	$wrôe_pid
(
pid_t
 
pid
, c⁄° *
pidfûe
)

2500 
FILE
 *
Âid
;

2502 
Âid
 = 
	`f›í
(
pidfûe
, "w");

2503 i‡(!
Âid
) {

2504 
	`log_îr
("fio: faûed o≥nögÖid fûê%s\n", 
pidfûe
);

2508 
	`Ârötf
(
Âid
, "%u\n", (Ë
pid
);

2509 
	`f˛o£
(
Âid
);

2511 
	}
}

2516 
	$fio_°¨t_£rvî
(*
pidfûe
)

2518 
pid_t
 
pid
;

2519 
ªt
;

2521 #i‡
	`deföed
(
WIN32
)

2522 
WSADATA
 
wsd
;

2523 
	`WSASèπup
(
	`MAKEWORD
(2, 2), &
wsd
);

2526 i‡(!
pidfûe
)

2527  
	`fio_£rvî
();

2529 i‡(
	`check_exi°ög_pidfûe
(
pidfûe
)) {

2530 
	`log_îr
("fio:Öidfile %sÉxistsánd serveráppearsálive\n",

2531 
pidfûe
);

2532 
	`‰ì
(
pidfûe
);

2536 
pid
 = 
	`f‹k
();

2537 i‡(
pid
 < 0) {

2538 
	`log_îr
("fio: faûed sîvî f‹k: %s\n", 
	`°ªº‹
(
î∫o
));

2539 
	`‰ì
(
pidfûe
);

2541 } i‡(
pid
) {

2542 
ªt
 = 
	`wrôe_pid
(
pid
, 
pidfûe
);

2543 
	`‰ì
(
pidfûe
);

2544 
	`_exô
(
ªt
);

2547 
	`£tsid
();

2548 
	`›ílog
("fio", 
LOG_NDELAY
|
LOG_NOWAIT
|
LOG_PID
, 
LOG_USER
);

2549 
log_sy¶og
 = 1;

2550 
	`˛o£
(
STDIN_FILENO
);

2551 
	`˛o£
(
STDOUT_FILENO
);

2552 
	`˛o£
(
STDERR_FILENO
);

2553 
f_out
 = 
NULL
;

2554 
f_îr
 = 
NULL
;

2556 
ªt
 = 
	`fio_£rvî
();

2558 
	`˛o£log
();

2559 
	`u∆ök
(
pidfûe
);

2560 
	`‰ì
(
pidfûe
);

2561  
ªt
;

2562 
	}
}

2564 
	$fio_£rvî_£t_¨g
(c⁄° *
¨g
)

2566 
fio_£rvî_¨g
 = 
	`°rdup
(
¨g
);

2567 
	}
}

	@/home/ysjin/Desktop/fio/fio/server.h

1 #i‚de‡
FIO_SERVER_H


2 
	#FIO_SERVER_H


	)

4 
	~<öây≥s.h
>

5 
	~<°rög.h
>

6 
	~<sys/time.h
>

7 
	~<√töë/ö.h
>

9 
	~"°©.h
"

10 
	~"os/os.h
"

11 
	~"diskutû.h
"

13 
	#FIO_NET_PORT
 8765

	)

15 
	ssk_out
 {

16 
	mªfs
;

19 
	msk
;

20 
fio_muãx
 
	mlock
;

21 
Êi°_hód
 
	mli°
;

22 
fio_muãx
 
	mwaô
;

23 
fio_muãx
 
	mxmô
;

29 
	sfio_√t_cmd
 {

30 
uöt16_t
 
	mvîsi⁄
;

31 
uöt16_t
 
	m›code
;

32 
uöt32_t
 
	mÊags
;

33 
uöt64_t
 
	mèg
;

34 
uöt32_t
 
	mpdu_Àn
;

39 
uöt16_t
 
	mcmd_¸c16
;

40 
uöt16_t
 
	mpdu_¸c16
;

41 
uöt8_t
 
	m∑ylﬂd
[];

44 
	sfio_√t_cmd_ª∂y
 {

45 
Êi°_hód
 
	mli°
;

46 
time•ec
 
	mts
;

47 
uöt64_t
 
	mßved_èg
;

48 
uöt16_t
 
	m›code
;

52 
	mFIO_SERVER_VER
 = 71,

54 
	mFIO_SERVER_MAX_FRAGMENT_PDU
 = 1024,

55 
	mFIO_SERVER_MAX_CMD_MB
 = 2048,

57 
	mFIO_NET_CMD_QUIT
 = 1,

58 
	mFIO_NET_CMD_EXIT
 = 2,

59 
	mFIO_NET_CMD_JOB
 = 3,

60 
	mFIO_NET_CMD_JOBLINE
 = 4,

61 
	mFIO_NET_CMD_TEXT
 = 5,

62 
	mFIO_NET_CMD_TS
 = 6,

63 
	mFIO_NET_CMD_GS
 = 7,

64 
	mFIO_NET_CMD_SEND_ETA
 = 8,

65 
	mFIO_NET_CMD_ETA
 = 9,

66 
	mFIO_NET_CMD_PROBE
 = 10,

67 
	mFIO_NET_CMD_START
 = 11,

68 
	mFIO_NET_CMD_STOP
 = 12,

69 
	mFIO_NET_CMD_DU
 = 13,

70 
	mFIO_NET_CMD_SERVER_START
 = 14,

71 
	mFIO_NET_CMD_ADD_JOB
 = 15,

72 
	mFIO_NET_CMD_RUN
 = 16,

73 
	mFIO_NET_CMD_IOLOG
 = 17,

74 
	mFIO_NET_CMD_UPDATE_JOB
 = 18,

75 
	mFIO_NET_CMD_LOAD_FILE
 = 19,

76 
	mFIO_NET_CMD_VTRIGGER
 = 20,

77 
	mFIO_NET_CMD_SENDFILE
 = 21,

78 
	mFIO_NET_CMD_JOB_OPT
 = 22,

79 
	mFIO_NET_CMD_NR
 = 23,

81 
	mFIO_NET_CMD_F_MORE
 = 1UL << 0,

84 
	mFIO_NET_CMD_CRC_SZ
 = (
fio_√t_cmd
) -

85 2 * (
uöt16_t
),

87 
	mFIO_NET_NAME_MAX
 = 256,

89 
	mFIO_NET_CLIENT_TIMEOUT
 = 5000,

91 
	mFIO_PROBE_FLAG_ZLIB
 = 1UL << 0,

94 
	scmd_£ndfûe
 {

95 
uöt8_t
 
	m∑th
[
FIO_NET_NAME_MAX
];

98 
	scmd_£ndfûe_ª∂y
 {

99 
uöt32_t
 
	msize
;

100 
uöt32_t
 
	mîr‹
;

101 
uöt8_t
 
	md©a
[0];

108 
	scmd_våiggî_pdu
 {

109 
uöt16_t
 
	mÀn
;

110 
uöt8_t
 
	mcmd
[];

113 
	scmd_lﬂd_fûe_pdu
 {

114 
uöt16_t
 
	m«me_Àn
;

115 
uöt16_t
 
	m˛õ¡_ty≥
;

116 
uöt8_t
 
	mfûe
[];

119 
	scmd_ts_pdu
 {

120 
thªad_°©
 
	mts
;

121 
group_run_°©s
 
	mrs
;

124 
	scmd_du_pdu
 {

125 
disk_utû_°©
 
	mdus
;

126 
disk_utû_agg
 
	magg
;

129 
	scmd_˛õ¡_¥obe_pdu
 {

130 
uöt64_t
 
	mÊags
;

131 
uöt8_t
 
	m£rvî
[128];

134 
	scmd_¥obe_ª∂y_pdu
 {

135 
uöt8_t
 
	mho°«me
[64];

136 
uöt8_t
 
	mbigídün
;

137 
uöt8_t
 
	mfio_vîsi⁄
[32];

138 
uöt8_t
 
	mos
;

139 
uöt8_t
 
	m¨ch
;

140 
uöt8_t
 
	mbµ
;

141 
uöt32_t
 
	m˝us
;

142 
uöt64_t
 
	mÊags
;

145 
	scmd_sögÀ_löe_pdu
 {

146 
uöt16_t
 
	mÀn
;

147 
uöt8_t
 
	mãxt
[];

150 
	scmd_löe_pdu
 {

151 
uöt16_t
 
	mlöes
;

152 
uöt16_t
 
	m˛õ¡_ty≥
;

153 
cmd_sögÀ_löe_pdu
 
	m›ti⁄s
[];

156 
	scmd_job_pdu
 {

157 
uöt32_t
 
	mbuf_Àn
;

158 
uöt32_t
 
	m˛õ¡_ty≥
;

159 
uöt8_t
 
	mbuf
[0];

162 
	scmd_°¨t_pdu
 {

163 
uöt32_t
 
	mjobs
;

164 
uöt32_t
 
	m°©_ouçuts
;

167 
	scmd_íd_pdu
 {

168 
uöt32_t
 
	mîr‹
;

169 
uöt32_t
 
	msig«l
;

172 
	scmd_add_job_pdu
 {

173 
uöt32_t
 
	mthªad_numbî
;

174 
uöt32_t
 
	mgroupid
;

175 
thªad_›ti⁄s_∑ck
 
	mt›
;

178 
	scmd_ãxt_pdu
 {

179 
uöt32_t
 
	mÀvñ
;

180 
uöt32_t
 
	mbuf_Àn
;

181 
uöt64_t
 
	mlog_£c
;

182 
uöt64_t
 
	mlog_u£c
;

183 
uöt8_t
 
	mbuf
[0];

187 
	mXMIT_COMPRESSED
 = 1U,

188 
	mSTORE_COMPRESSED
 = 2U,

191 
	scmd_iﬁog_pdu
 {

192 
uöt64_t
 
	mƒ_ßm∂es
;

193 
uöt32_t
 
	mthªad_numbî
;

194 
uöt32_t
 
	mlog_ty≥
;

195 
uöt32_t
 
	mcom¥es£d
;

196 
uöt32_t
 
	mlog_off£t
;

197 
uöt32_t
 
	mlog_hi°_cﬂr£√ss
;

198 
uöt8_t
 
	m«me
[
FIO_NET_NAME_MAX
];

199 
io_ßm∂e
 
	mßm∂es
[0];

202 
	scmd_job_›ti⁄
 {

203 
uöt16_t
 
	mglobÆ
;

204 
uöt16_t
 
	måunˇãd
;

205 
uöt32_t
 
	mgroupid
;

206 
uöt8_t
 
	m«me
[64];

207 
uöt8_t
 
	mvÆue
[128];

210 
fio_°¨t_£rvî
(*);

211 
fio_£rvî_ãxt_ouçut
(, c⁄° *, 
size_t
);

212 
fio_√t_£nd_cmd
(, 
uöt16_t
, c⁄° *, 
off_t
, 
uöt64_t
 *, 
Êi°_hód
 *);

213 
fio_√t_£nd_sim∂e_cmd
(, 
uöt16_t
, 
uöt64_t
, 
Êi°_hód
 *);

214 
fio_£rvî_£t_¨g
(const *);

215 
fio_£rvî_∑r£_°rög
(c⁄° *, **, 
boﬁ
 *, *, 
ö_addr
 *, 
ö6_addr
 *, *);

216 
fio_£rvî_∑r£_ho°
(c⁄° *, , 
ö_addr
 *, 
ö6_addr
 *);

217 c⁄° *
fio_£rvî_›
();

218 
fio_£rvî_gŸ_sig«l
();

220 
	gthªad_°©
;

221 
	ggroup_run_°©s
;

222 
fio_£rvî_£nd_ts
(
thªad_°©
 *, 
group_run_°©s
 *);

223 
fio_£rvî_£nd_gs
(
group_run_°©s
 *);

224 
fio_£rvî_£nd_du
();

225 
fio_£rvî_£nd_job_›ti⁄s
(
Êi°_hód
 *, );

226 
fio_£rvî_gë_vîify_°©e
(const *, , **);

228 
fio_√t_cmd
 *
fio_√t_ªcv_cmd
(
sk
, 
boﬁ
 
waô
);

230 
fio_£nd_iﬁog
(
thªad_d©a
 *, 
io_log
 *, const *);

231 
fio_£rvî_£nd_add_job
(
thªad_d©a
 *);

232 
fio_£rvî_£nd_°¨t
(
thªad_d©a
 *);

233 
fio_√t_£nd_quô
(
sk
);

235 
fio_£rvî_¸óã_sk_key
();

236 
fio_£rvî_de°roy_sk_key
();

238 
exô_backíd
;

239 
fio_√t_p‹t
;

	@/home/ysjin/Desktop/fio/fio/smalloc.c

5 
	~<sys/mm™.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<as£π.h
>

9 
	~<°rög.h
>

10 
	~<uni°d.h
>

11 
	~<öây≥s.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<limôs.h
>

14 
	~<f˙é.h
>

16 
	~"fio.h
"

17 
	~"muãx.h
"

18 
	~"¨ch/¨ch.h
"

19 
	~"os/os.h
"

20 
	~"smÆloc.h
"

21 
	~"log.h
"

23 
	#SMALLOC_REDZONE


	)

25 
	#SMALLOC_BPB
 32

	)

26 
	#SMALLOC_BPI
 ((Ë* 8)

	)

27 
	#SMALLOC_BPL
 (
SMALLOC_BPB
 * 
SMALLOC_BPI
)

	)

29 
	#INITIAL_SIZE
 16*1024*1024

	)

30 
	#INITIAL_POOLS
 8

	)

32 
	#MAX_POOLS
 16

	)

34 
	#SMALLOC_PRE_RED
 0xdódbìfU

	)

35 
	#SMALLOC_POST_RED
 0x5Ø55Ø5U

	)

37 
	gsmÆloc_poﬁ_size
 = 
INITIAL_SIZE
;

38 #ifde‡
SMALLOC_REDZONE


39 c⁄° 
	göt_mask
 = () - 1;

42 
	spoﬁ
 {

43 
fio_muãx
 *
	mlock
;

44 *
	mm≠
;

45 *
	mbôm≠
;

46 
size_t
 
	m‰ì_blocks
;

47 
size_t
 
	mƒ_blocks
;

48 
size_t
 
	m√xt_n⁄_fuŒ
;

49 
size_t
 
	mmm≠_size
;

52 
	sblock_hdr
 {

53 
size_t
 
	msize
;

54 #ifde‡
SMALLOC_REDZONE


55 
	m¥îed
;

59 
poﬁ
 
	gmp
[
MAX_POOLS
];

60 
	gƒ_poﬁs
;

61 
	gœ°_poﬁ
;

63 
ölöe
 
	$±r_vÆid
(
poﬁ
 *poﬁ, *
±r
)

65 
poﬁ_size
 = 
poﬁ
->
ƒ_blocks
 * 
SMALLOC_BPL
;

67  (
±r
 >
poﬁ
->
m≠
Ë&& (±∏<Öoﬁ->m≠ + 
poﬁ_size
);

68 
	}
}

70 
ölöe
 
size_t
 
	$size_to_blocks
(
size_t
 
size
)

72  (
size
 + 
SMALLOC_BPB
 - 1) / SMALLOC_BPB;

73 
	}
}

75 
	$blocks_ôî
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

76 
idx
, 
size_t
 
ƒ_blocks
,

77 (*
func
)(*
m≠
, 
mask
))

80 
ƒ_blocks
) {

81 
this_blocks
, 
mask
;

82 *
m≠
;

84 i‡(
poﬁ_idx
 >
poﬁ
->
ƒ_blocks
)

87 
m≠
 = &
poﬁ
->
bôm≠
[
poﬁ_idx
];

89 
this_blocks
 = 
ƒ_blocks
;

90 i‡(
this_blocks
 + 
idx
 > 
SMALLOC_BPI
) {

91 
this_blocks
 = 
SMALLOC_BPI
 - 
idx
;

92 
idx
 = 
SMALLOC_BPI
 - 
this_blocks
;

95 i‡(
this_blocks
 =
SMALLOC_BPI
)

96 
mask
 = -1U;

98 
mask
 = ((1U << 
this_blocks
Ë- 1Ë<< 
idx
;

100 i‡(!
	`func
(
m≠
, 
mask
))

103 
ƒ_blocks
 -
this_blocks
;

104 
idx
 = 0;

105 
poﬁ_idx
++;

109 
	}
}

111 
	$mask_cmp
(*
m≠
, 
mask
)

113  !(*
m≠
 & 
mask
);

114 
	}
}

116 
	$mask_˛ór
(*
m≠
, 
mask
)

118 
	`as£π
((*
m≠
 & 
mask
) == mask);

119 *
m≠
 &~
mask
;

121 
	}
}

123 
	$mask_£t
(*
m≠
, 
mask
)

125 
	`as£π
(!(*
m≠
 & 
mask
));

126 *
m≠
 |
mask
;

128 
	}
}

130 
	$blocks_‰ì
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

131 
idx
, 
size_t
 
ƒ_blocks
)

133  
	`blocks_ôî
(
poﬁ
, 
poﬁ_idx
, 
idx
, 
ƒ_blocks
, 
mask_cmp
);

134 
	}
}

136 
	$£t_blocks
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

137 
idx
, 
size_t
 
ƒ_blocks
)

139 
	`blocks_ôî
(
poﬁ
, 
poﬁ_idx
, 
idx
, 
ƒ_blocks
, 
mask_£t
);

140 
	}
}

142 
	$˛ór_blocks
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

143 
idx
, 
size_t
 
ƒ_blocks
)

145 
	`blocks_ôî
(
poﬁ
, 
poﬁ_idx
, 
idx
, 
ƒ_blocks
, 
mask_˛ór
);

146 
	}
}

148 
	$föd_√xt_zîo
(
w‹d
, 
°¨t
)

150 
	`as£π
(
w‹d
 != -1U);

151 
w‹d
 >>
°¨t
;

152  
	`ffz
(
w‹d
Ë+ 
°¨t
;

153 
	}
}

155 
boﬁ
 
	$add_poﬁ
(
poﬁ
 *poﬁ, 
Æloc_size
)

157 
bôm≠_blocks
;

158 
mm≠_Êags
;

159 *
±r
;

161 i‡(
ƒ_poﬁs
 =
MAX_POOLS
)

162  
Ál£
;

164 #ifde‡
SMALLOC_REDZONE


165 
Æloc_size
 += ();

167 
Æloc_size
 +(
block_hdr
);

168 i‡(
Æloc_size
 < 
INITIAL_SIZE
)

169 
Æloc_size
 = 
INITIAL_SIZE
;

172 
Æloc_size
 = (Æloc_sizê+ 
SMALLOC_BPL
 - 1) & ~(SMALLOC_BPL - 1);

173 
bôm≠_blocks
 = 
Æloc_size
 / 
SMALLOC_BPL
;

174 
Æloc_size
 +
bôm≠_blocks
 * ();

175 
poﬁ
->
mm≠_size
 = 
Æloc_size
;

177 
poﬁ
->
ƒ_blocks
 = 
bôm≠_blocks
;

178 
poﬁ
->
‰ì_blocks
 = 
bôm≠_blocks
 * 
SMALLOC_BPB
;

180 
mm≠_Êags
 = 
OS_MAP_ANON
;

181 #ifde‡
CONFIG_ESX


182 
mm≠_Êags
 |
MAP_PRIVATE
;

184 
mm≠_Êags
 |
MAP_SHARED
;

186 
±r
 = 
	`mm≠
(
NULL
, 
Æloc_size
, 
PROT_READ
|
PROT_WRITE
, 
mm≠_Êags
, -1, 0);

188 i‡(
±r
 =
MAP_FAILED
)

189 
out_Áû
;

191 
poﬁ
->
m≠
 = 
±r
;

192 
poﬁ
->
bôm≠
 = (*)((*Ë
±r
 + (poﬁ->
ƒ_blocks
 * 
SMALLOC_BPL
));

193 
	`mem£t
(
poﬁ
->
bôm≠
, 0, 
bôm≠_blocks
 * ());

195 
poﬁ
->
lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

196 i‡(!
poﬁ
->
lock
)

197 
out_Áû
;

199 
ƒ_poﬁs
++;

200  
åue
;

201 
out_Áû
:

202 
	`log_îr
("smalloc: failedáddingÖool\n");

203 i‡(
poﬁ
->
m≠
)

204 
	`munm≠
(
poﬁ
->
m≠
,Öoﬁ->
mm≠_size
);

205  
Ál£
;

206 
	}
}

208 
	$söô
()

210 
boﬁ
 
ªt
;

211 
i
;

213 
i
 = 0; i < 
INITIAL_POOLS
; i++) {

214 
ªt
 = 
	`add_poﬁ
(&
mp
[
ƒ_poﬁs
], 
smÆloc_poﬁ_size
);

215 i‡(!
ªt
)

223 
	`as£π
(
i
);

224 
	}
}

226 
	$˛ónup_poﬁ
(
poﬁ
 *pool)

232 
	`munm≠
(
poﬁ
->
m≠
,Öoﬁ->
mm≠_size
);

234 i‡(
poﬁ
->
lock
)

235 
	`fio_muãx_ªmove
(
poﬁ
->
lock
);

236 
	}
}

238 
	$s˛ónup
()

240 
i
;

242 
i
 = 0; i < 
ƒ_poﬁs
; i++)

243 
	`˛ónup_poﬁ
(&
mp
[
i
]);

244 
	}
}

246 #ifde‡
SMALLOC_REDZONE


247 *
	$po°ªd_±r
(
block_hdr
 *
hdr
)

249 
uöçå_t
 
±r
;

251 
±r
 = (
uöçå_t
Ë
hdr
 + hdr->
size
 - ();

252 
±r
 = (
uöçå_t
Ë
	`PTR_ALIGN
’å, 
öt_mask
);

254  (*Ë
±r
;

255 
	}
}

257 
	$fûl_ªdz⁄e
(
block_hdr
 *
hdr
)

259 *
po°ªd
 = 
	`po°ªd_±r
(
hdr
);

261 
hdr
->
¥îed
 = 
SMALLOC_PRE_RED
;

262 *
po°ªd
 = 
SMALLOC_POST_RED
;

263 
	}
}

265 
	$s‰ì_check_ªdz⁄e
(
block_hdr
 *
hdr
)

267 *
po°ªd
 = 
	`po°ªd_±r
(
hdr
);

269 i‡(
hdr
->
¥îed
 !
SMALLOC_PRE_RED
) {

270 
	`log_îr
("smallocÖreÑedzone destroyed!\n"

272 
hdr
, hdr->
¥îed
, 
SMALLOC_PRE_RED
);

273 
	`as£π
(0);

275 i‡(*
po°ªd
 !
SMALLOC_POST_RED
) {

276 
	`log_îr
("smallocÖostÑedzone destroyed!\n"

278 
hdr
, *
po°ªd
, 
SMALLOC_POST_RED
);

279 
	`as£π
(0);

281 
	}
}

283 
	$fûl_ªdz⁄e
(
block_hdr
 *
hdr
)

285 
	}
}

287 
	$s‰ì_check_ªdz⁄e
(
block_hdr
 *
hdr
)

289 
	}
}

292 
	$s‰ì_poﬁ
(
poﬁ
 *poﬁ, *
±r
)

294 
block_hdr
 *
hdr
;

295 
i
, 
idx
;

296 
off£t
;

298 i‡(!
±r
)

301 
±r
 -(*
hdr
);

302 
hdr
 = 
±r
;

304 
	`as£π
(
	`±r_vÆid
(
poﬁ
, 
±r
));

306 
	`s‰ì_check_ªdz⁄e
(
hdr
);

308 
off£t
 = 
±r
 - 
poﬁ
->
m≠
;

309 
i
 = 
off£t
 / 
SMALLOC_BPL
;

310 
idx
 = (
off£t
 % 
SMALLOC_BPL
Ë/ 
SMALLOC_BPB
;

312 
	`fio_muãx_down
(
poﬁ
->
lock
);

313 
	`˛ór_blocks
(
poﬁ
, 
i
, 
idx
, 
	`size_to_blocks
(
hdr
->
size
));

314 i‡(
i
 < 
poﬁ
->
√xt_n⁄_fuŒ
)

315 
poﬁ
->
√xt_n⁄_fuŒ
 = 
i
;

316 
poﬁ
->
‰ì_blocks
 +
	`size_to_blocks
(
hdr
->
size
);

317 
	`fio_muãx_up
(
poﬁ
->
lock
);

318 
	}
}

320 
	$s‰ì
(*
±r
)

322 
poﬁ
 *poﬁ = 
NULL
;

323 
i
;

325 i‡(!
±r
)

328 
i
 = 0; i < 
ƒ_poﬁs
; i++) {

329 i‡(
	`±r_vÆid
(&
mp
[
i
], 
±r
)) {

330 
poﬁ
 = &
mp
[
i
];

335 i‡(
poﬁ
) {

336 
	`s‰ì_poﬁ
(
poﬁ
, 
±r
);

340 
	`log_îr
("smÆloc:Öå %∞nŸ from smÆlo¯poﬁ\n", 
±r
);

341 
	}
}

343 *
	$__smÆloc_poﬁ
(
poﬁ
 *poﬁ, 
size_t
 
size
)

345 
size_t
 
ƒ_blocks
;

346 
i
;

347 
off£t
;

348 
œ°_idx
;

349 *
ªt
 = 
NULL
;

351 
	`fio_muãx_down
(
poﬁ
->
lock
);

353 
ƒ_blocks
 = 
	`size_to_blocks
(
size
);

354 i‡(
ƒ_blocks
 > 
poﬁ
->
‰ì_blocks
)

355 
Áû
;

357 
i
 = 
poﬁ
->
√xt_n⁄_fuŒ
;

358 
œ°_idx
 = 0;

359 
off£t
 = -1U;

360 
i
 < 
poﬁ
->
ƒ_blocks
) {

361 
idx
;

363 i‡(
poﬁ
->
bôm≠
[
i
] == -1U) {

364 
i
++;

365 
poﬁ
->
√xt_n⁄_fuŒ
 = 
i
;

366 
œ°_idx
 = 0;

370 
idx
 = 
	`föd_√xt_zîo
(
poﬁ
->
bôm≠
[
i
], 
œ°_idx
);

371 i‡(!
	`blocks_‰ì
(
poﬁ
, 
i
, 
idx
, 
ƒ_blocks
)) {

372 
idx
 +
ƒ_blocks
;

373 i‡(
idx
 < 
SMALLOC_BPI
)

374 
œ°_idx
 = 
idx
;

376 
œ°_idx
 = 0;

377 
idx
 >
SMALLOC_BPI
) {

378 
i
++;

379 
idx
 -
SMALLOC_BPI
;

384 
	`£t_blocks
(
poﬁ
, 
i
, 
idx
, 
ƒ_blocks
);

385 
off£t
 = 
i
 * 
SMALLOC_BPL
 + 
idx
 * 
SMALLOC_BPB
;

389 i‡(
i
 < 
poﬁ
->
ƒ_blocks
) {

390 
poﬁ
->
‰ì_blocks
 -
ƒ_blocks
;

391 
ªt
 = 
poﬁ
->
m≠
 + 
off£t
;

393 
Áû
:

394 
	`fio_muãx_up
(
poﬁ
->
lock
);

395  
ªt
;

396 
	}
}

398 *
	$smÆloc_poﬁ
(
poﬁ
 *poﬁ, 
size_t
 
size
)

400 
size_t
 
Æloc_size
 = 
size
 + (
block_hdr
);

401 *
±r
;

407 #ifde‡
SMALLOC_REDZONE


408 
Æloc_size
 += ();

409 
Æloc_size
 = (Æloc_sizê+ 
öt_mask
) & ~int_mask;

412 
±r
 = 
	`__smÆloc_poﬁ
(
poﬁ
, 
Æloc_size
);

413 i‡(
±r
) {

414 
block_hdr
 *
hdr
 = 
±r
;

416 
hdr
->
size
 = 
Æloc_size
;

417 
	`fûl_ªdz⁄e
(
hdr
);

419 
±r
 +(*
hdr
);

420 
	`mem£t
(
±r
, 0, 
size
);

423  
±r
;

424 
	}
}

426 *
	$smÆloc
(
size_t
 
size
)

428 
i
, 
íd_poﬁ
;

430 i‡(
size
 != () size)

431  
NULL
;

433 
i
 = 
œ°_poﬁ
;

434 
íd_poﬁ
 = 
ƒ_poﬁs
;

437 ; 
i
 < 
íd_poﬁ
; i++) {

438 *
±r
 = 
	`smÆloc_poﬁ
(&
mp
[
i
], 
size
);

440 i‡(
±r
) {

441 
œ°_poﬁ
 = 
i
;

442  
±r
;

445 i‡(
œ°_poﬁ
) {

446 
íd_poﬁ
 = 
œ°_poﬁ
;

447 
œ°_poﬁ
 = 
i
 = 0;

454 
	`log_îr
("smalloc: OOM. Consider using --alloc-sizeÅo increaseÅhe "

456  
NULL
;

457 
	}
}

459 *
	$sˇŒoc
(
size_t
 
nmemb
, size_à
size
)

461  
	`smÆloc
(
nmemb
 * 
size
);

462 
	}
}

464 *
	$smÆloc_°rdup
(c⁄° *
°r
)

466 *
±r
 = 
NULL
;

468 
±r
 = 
	`smÆloc
(
	`°æí
(
°r
) + 1);

469 i‡(
±r
)

470 
	`°r˝y
(
±r
, 
°r
);

471  
±r
;

472 
	}
}

	@/home/ysjin/Desktop/fio/fio/smalloc.h

1 #i‚de‡
FIO_SMALLOC_H


2 
	#FIO_SMALLOC_H


	)

4 *
smÆloc
(
size_t
);

5 *
sˇŒoc
(
size_t
, size_t);

6 
s‰ì
(*);

7 *
smÆloc_°rdup
(const *);

8 
söô
();

9 
s˛ónup
();

11 
smÆloc_poﬁ_size
;

	@/home/ysjin/Desktop/fio/fio/stat.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/time.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<dúít.h
>

7 
	~<libgí.h
>

8 
	~<m©h.h
>

10 
	~"fio.h
"

11 
	~"diskutû.h
"

12 
	~"lib/õì754.h
"

13 
	~"js⁄.h
"

14 
	~"lib/gërußge.h
"

15 
	~"idÀtime.h
"

16 
	~"lib/pow2.h
"

17 
	~"lib/ouçut_buf„r.h
"

18 
	~"hñ≥r_thªad.h
"

19 
	~"smÆloc.h
"

21 
	#LOG_MSEC_SLACK
 1

	)

23 
fio_muãx
 *
	g°©_muãx
;

25 
	$˛ór_rußge_°©
(
thªad_d©a
 *
td
)

27 
thªad_°©
 *
ts
 = &
td
->ts;

29 
	`fio_gërußge
(&
td
->
ru_°¨t
);

30 
ts
->
u§_time
 =Ås->
sys_time
 = 0;

31 
ts
->
˘x
 = 0;

32 
ts
->
möf
 =Ås->
majf
 = 0;

33 
	}
}

35 
	$upd©e_rußge_°©
(
thªad_d©a
 *
td
)

37 
thªad_°©
 *
ts
 = &
td
->ts;

39 
	`fio_gërußge
(&
td
->
ru_íd
);

40 
ts
->
u§_time
 +
	`mtime_sö˚_tv
(&
td
->
ru_°¨t
.
ru_utime
,

41 &
td
->
ru_íd
.
ru_utime
);

42 
ts
->
sys_time
 +
	`mtime_sö˚_tv
(&
td
->
ru_°¨t
.
ru_°ime
,

43 &
td
->
ru_íd
.
ru_°ime
);

44 
ts
->
˘x
 +
td
->
ru_íd
.
ru_nvcsw
 +Åd->ru_íd.
ru_nivcsw


45 - (
td
->
ru_°¨t
.
ru_nvcsw
 +Åd->ru_°¨t.
ru_nivcsw
);

46 
ts
->
möf
 +
td
->
ru_íd
.
ru_möÊt
 -Åd->
ru_°¨t
.ru_minflt;

47 
ts
->
majf
 +
td
->
ru_íd
.
ru_majÊt
 -Åd->
ru_°¨t
.ru_majflt;

49 
	`mem˝y
(&
td
->
ru_°¨t
, &td->
ru_íd
, (td->ru_end));

50 
	}
}

61 
	$∂©_vÆ_to_idx
(
vÆ
)

63 
msb
, 
îr‹_bôs
, 
ba£
, 
off£t
, 
idx
;

66 i‡(
vÆ
 == 0)

67 
msb
 = 0;

69 
msb
 = ((
vÆ
)*8Ë- 
	`__buûtö_˛zŒ
(val) - 1;

75 i‡(
msb
 <
FIO_IO_U_PLAT_BITS
)

76  
vÆ
;

79 
îr‹_bôs
 = 
msb
 - 
FIO_IO_U_PLAT_BITS
;

82 
ba£
 = (
îr‹_bôs
 + 1Ë<< 
FIO_IO_U_PLAT_BITS
;

88 
off£t
 = (
FIO_IO_U_PLAT_VAL
 - 1Ë& (
vÆ
 >> 
îr‹_bôs
);

91 
idx
 = (
ba£
 + 
off£t
Ë< (
FIO_IO_U_PLAT_NR
 - 1) ?

92 (
ba£
 + 
off£t
Ë: (
FIO_IO_U_PLAT_NR
 - 1);

94  
idx
;

95 
	}
}

101 
	$∂©_idx_to_vÆ
(
idx
)

103 
îr‹_bôs
;

104 
k
, 
ba£
;

106 
	`as£π
(
idx
 < 
FIO_IO_U_PLAT_NR
);

110 i‡(
idx
 < (
FIO_IO_U_PLAT_VAL
 << 1))

111  
idx
;

114 
îr‹_bôs
 = (
idx
 >> 
FIO_IO_U_PLAT_BITS
) - 1;

115 
ba£
 = ((Ë1Ë<< (
îr‹_bôs
 + 
FIO_IO_U_PLAT_BITS
);

118 
k
 = 
idx
 % 
FIO_IO_U_PLAT_VAL
;

121  
ba£
 + ((
k
 + 0.5Ë* (1 << 
îr‹_bôs
));

122 
	}
}

124 
	$doubÀ_cmp
(c⁄° *
a
, c⁄° *
b
)

126 c⁄° 
fio_Â64_t
 
Á
 = *(c⁄° fio_Â64_à*Ë
a
;

127 c⁄° 
fio_Â64_t
 
fb
 = *(c⁄° fio_Â64_à*Ë
b
;

128 
cmp
 = 0;

130 i‡(
Á
.
u
.
f
 > 
fb
.u.f)

131 
cmp
 = 1;

132 i‡(
Á
.
u
.
f
 < 
fb
.u.f)

133 
cmp
 = -1;

135  
cmp
;

136 
	}
}

138 
	$ˇlc_˛©_≥r˚¡ûes
(
uöt64_t
 *
io_u_∂©
, 
ƒ
,

139 
fio_Â64_t
 *
∂i°
, **
ouçut
,

140 *
maxv
, *
möv
)

142 
sum
 = 0;

143 
Àn
, 
i
, 
j
 = 0;

144 
ovÆ_Àn
 = 0;

145 *
ovÆs
 = 
NULL
;

146 
boﬁ
 
is_œ°
;

148 *
möv
 = -1ULL;

149 *
maxv
 = 0;

151 
Àn
 = 0;

152 
Àn
 < 
FIO_IO_U_LIST_MAX_LEN
 && 
∂i°
[Àn].
u
.
f
 != 0.0)

153 
Àn
++;

155 i‡(!
Àn
)

163 i‡(
Àn
 > 1)

164 
	`qs‹t
((*)
∂i°
, 
Àn
, ’li°[0]), 
doubÀ_cmp
);

169 
is_œ°
 = 
Ál£
;

170 
i
 = 0; i < 
FIO_IO_U_PLAT_NR
 && !
is_œ°
; i++) {

171 
sum
 +
io_u_∂©
[
i
];

172 
sum
 >(
∂i°
[
j
].
u
.
f
 / 100.0 * 
ƒ
)) {

173 
	`as£π
(
∂i°
[
j
].
u
.
f
 <= 100.0);

175 i‡(
j
 =
ovÆ_Àn
) {

176 
ovÆ_Àn
 += 100;

177 
ovÆs
 = 
	`ªÆloc
(ovÆs, 
ovÆ_Àn
 * (*ovals));

180 
ovÆs
[
j
] = 
	`∂©_idx_to_vÆ
(
i
);

181 i‡(
ovÆs
[
j
] < *
möv
)

182 *
möv
 = 
ovÆs
[
j
];

183 i‡(
ovÆs
[
j
] > *
maxv
)

184 *
maxv
 = 
ovÆs
[
j
];

186 
is_œ°
 = (
j
 =
Àn
 - 1) != 0;

187 i‡(
is_œ°
)

190 
j
++;

194 *
ouçut
 = 
ovÆs
;

195  
Àn
;

196 
	}
}

201 
	$show_˛©_≥r˚¡ûes
(
uöt64_t
 *
io_u_∂©
, 
ƒ
,

202 
fio_Â64_t
 *
∂i°
, 
¥ecisi⁄
,

203 c⁄° *
¥e
, 
buf_ouçut
 *
out
)

205 
divis‹
, 
Àn
, 
i
, 
j
 = 0;

206 
möv
, 
maxv
;

207 *
ovÆs
;

208 
≥r_löe
, 
sˇÀ_down
, 
time_width
;

209 
boﬁ
 
is_œ°
;

210 
fmt
[32];

212 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
io_u_∂©
, 
ƒ
, 
∂i°
, &
ovÆs
, &
maxv
, &
möv
);

213 i‡(!
Àn
 || !
ovÆs
)

214 
out
;

220 i‡(
möv
 > 2000000 && 
maxv
 > 99999999ULL) {

221 
sˇÀ_down
 = 2;

222 
divis‹
 = 1000000;

223 
	`log_buf
(
out
, " %†≥r˚¡ûe†(m£c):\¿ |", 
¥e
);

224 } i‡(
möv
 > 2000 && 
maxv
 > 99999) {

225 
sˇÀ_down
 = 1;

226 
divis‹
 = 1000;

227 
	`log_buf
(
out
, " %†≥r˚¡ûe†(u£c):\¿ |", 
¥e
);

229 
sˇÀ_down
 = 0;

230 
divis‹
 = 1;

231 
	`log_buf
(
out
, " %†≥r˚¡ûe†“£c):\¿ |", 
¥e
);

235 
time_width
 = 
	`max
(5, (Ë(
	`log10
(
maxv
 / 
divis‹
) + 1));

236 
	`¢¥ötf
(
fmt
, (fmt), " %%%u.%u·h=[%%%dŒu]%%c", 
¥ecisi⁄
 + 3,

237 
¥ecisi⁄
, 
time_width
);

239 
≥r_löe
 = (80 - 7Ë/ (
¥ecisi⁄
 + 10 + 
time_width
);

241 
j
 = 0; j < 
Àn
; j++) {

243 i‡(
j
 !0 && (j % 
≥r_löe
) == 0)

244 
	`log_buf
(
out
, " |");

247 
is_œ°
 = (
j
 =
Àn
 - 1) != 0;

249 
i
 = 0; i < 
sˇÀ_down
; i++)

250 
ovÆs
[
j
] = (ovals[j] + 999) / 1000;

252 
	`log_buf
(
out
, 
fmt
, 
∂i°
[
j
].
u
.
f
, 
ovÆs
[j], 
is_œ°
 ? '\n' : ',');

254 i‡(
is_œ°
)

257 i‡((
j
 % 
≥r_löe
) ==Öer_line - 1)

258 
	`log_buf
(
out
, "\n");

261 
out
:

262 i‡(
ovÆs
)

263 
	`‰ì
(
ovÆs
);

264 
	}
}

266 
boﬁ
 
	$ˇlc_œt
(
io_°©
 *
is
, *
mö
,

267 *
max
, *
món
, *
dev
)

269 
n
 = (Ë
is
->
ßm∂es
;

271 i‡(
n
 == 0)

272  
Ál£
;

274 *
mö
 = 
is
->
mö_vÆ
;

275 *
max
 = 
is
->
max_vÆ
;

276 *
món
 = 
is
->món.
u
.
f
;

278 i‡(
n
 > 1.0)

279 *
dev
 = 
	`sqπ
(
is
->
S
.
u
.
f
 / (
n
 - 1.0));

281 *
dev
 = 0;

283  
åue
;

284 
	}
}

286 
	$show_group_°©s
(
group_run_°©s
 *
rs
, 
buf_ouçut
 *
out
)

288 *
io
, *
agg
, *
mö
, *
max
;

289 *
iﬂ…
, *
aggÆt
, *
möÆt
, *
maxÆt
;

290 c⁄° *
°r
[] = { " READ", " WRITE" , " TRIM"};

291 
i
;

293 
	`log_buf
(
out
, "\nRu¿°©u†grou∞%d (Æ»jobs):\n", 
rs
->
groupid
);

295 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

296 c⁄° 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

298 i‡(!
rs
->
max_run
[
i
])

301 
io
 = 
	`num2°r
(
rs
->
iobyãs
[
i
],Ñs->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

302 
iﬂ…
 = 
	`num2°r
(
rs
->
iobyãs
[
i
],Ñs->
sig_figs
, 1, !
i2p
, 
N2S_BYTE
);

303 
agg
 = 
	`num2°r
(
rs
->agg[
i
],Ñs->
sig_figs
, 1, 
i2p
,Ñs->
unô_ba£
);

304 
aggÆt
 = 
	`num2°r
(
rs
->
agg
[
i
],Ñs->
sig_figs
, 1, !
i2p
,Ñs->
unô_ba£
);

305 
mö
 = 
	`num2°r
(
rs
->
mö_bw
[
i
],Ñs->
sig_figs
, 1, 
i2p
,Ñs->
unô_ba£
);

306 
möÆt
 = 
	`num2°r
(
rs
->
mö_bw
[
i
],Ñs->
sig_figs
, 1, !
i2p
,Ñs->
unô_ba£
);

307 
max
 = 
	`num2°r
(
rs
->
max_bw
[
i
],Ñs->
sig_figs
, 1, 
i2p
,Ñs->
unô_ba£
);

308 
maxÆt
 = 
	`num2°r
(
rs
->
max_bw
[
i
],Ñs->
sig_figs
, 1, !
i2p
,Ñs->
unô_ba£
);

309 
	`log_buf
(
out
, "%s: bw=%s (%s), %s-%s (%s-%s), io=%s (%s),Ñun=%llu-%llumsec\n",

310 
rs
->
unifõd_rw_ªp
 ? " MIXED" : 
°r
[
i
],

311 
agg
, 
aggÆt
, 
mö
, 
max
, 
möÆt
, 
maxÆt
, 
io
, 
iﬂ…
,

312 (Ë
rs
->
mö_run
[
i
],

313 (Ë
rs
->
max_run
[
i
]);

315 
	`‰ì
(
io
);

316 
	`‰ì
(
agg
);

317 
	`‰ì
(
mö
);

318 
	`‰ì
(
max
);

319 
	`‰ì
(
iﬂ…
);

320 
	`‰ì
(
aggÆt
);

321 
	`‰ì
(
möÆt
);

322 
	`‰ì
(
maxÆt
);

324 
	}
}

326 
	$°©_ˇlc_di°
(
uöt64_t
 *
m≠
, 
tŸÆ
, *
io_u_di°
)

328 
i
;

333 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

334 i‡(
tŸÆ
) {

335 
io_u_di°
[
i
] = (Ë
m≠
[i] / (Ë
tŸÆ
;

336 
io_u_di°
[
i
] *= 100.0;

337 i‡(
io_u_di°
[
i
] < 0.1 && 
m≠
[i])

338 
io_u_di°
[
i
] = 0.1;

340 
io_u_di°
[
i
] = 0.0;

342 
	}
}

344 
	$°©_ˇlc_œt
(
thªad_°©
 *
ts
, *
d°
,

345 
uöt64_t
 *
§c
, 
ƒ
)

347 
tŸÆ
 = 
	`ddú_rw_sum
(
ts
->
tŸÆ_io_u
);

348 
i
;

353 
i
 = 0; i < 
ƒ
; i++) {

354 i‡(
tŸÆ
) {

355 
d°
[
i
] = (Ë
§c
[i] / (Ë
tŸÆ
;

356 
d°
[
i
] *= 100.0;

357 i‡(
d°
[
i
] < 0.01 && 
§c
[i])

358 
d°
[
i
] = 0.01;

360 
d°
[
i
] = 0.0;

362 
	}
}

368 
	$°©_ˇlc_œt_nu
(
thªad_°©
 *
ts
, *
io_u_œt_u
)

370 
¡ŸÆ
 = 0, 
tŸÆ
 = 
	`ddú_rw_sum
(
ts
->
tŸÆ_io_u
);

371 
i
;

373 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt_u
,Ås->io_u_œt_u, 
FIO_IO_U_LAT_U_NR
);

375 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++)

376 
¡ŸÆ
 +
ts
->
io_u_œt_n
[
i
];

378 
io_u_œt_u
[0] +100.0 * (Ë
¡ŸÆ
 / (Ë
tŸÆ
;

379 
	}
}

381 
	$°©_ˇlc_œt_n
(
thªad_°©
 *
ts
, *
io_u_œt
)

383 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt
,Ås->
io_u_œt_n
, 
FIO_IO_U_LAT_N_NR
);

384 
	}
}

386 
	$°©_ˇlc_œt_u
(
thªad_°©
 *
ts
, *
io_u_œt
)

388 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt
,Ås->
io_u_œt_u
, 
FIO_IO_U_LAT_U_NR
);

389 
	}
}

391 
	$°©_ˇlc_œt_m
(
thªad_°©
 *
ts
, *
io_u_œt
)

393 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt
,Ås->
io_u_œt_m
, 
FIO_IO_U_LAT_M_NR
);

394 
	}
}

396 
	$di•œy_œt
(c⁄° *
«me
, 
mö
,

397 
max
, 
món
, 
dev
,

398 
buf_ouçut
 *
out
)

400 c⁄° *
ba£
 = "(nsec)";

401 *
möp
, *
maxp
;

403 i‡(
	`n£c_to_m£c
(&
mö
, &
max
, &
món
, &
dev
))

404 
ba£
 = "(msec)";

405 i‡(
	`n£c_to_u£c
(&
mö
, &
max
, &
món
, &
dev
))

406 
ba£
 = "(usec)";

408 
möp
 = 
	`num2°r
(
mö
, 6, 1, 0, 
N2S_NONE
);

409 
maxp
 = 
	`num2°r
(
max
, 6, 1, 0, 
N2S_NONE
);

411 
	`log_buf
(
out
, " %s %s: min=%s, max=%s,ávg=%5.02f,"

412 " stdev=%5.02f\n", 
«me
, 
ba£
, 
möp
, 
maxp
, 
món
, 
dev
);

414 
	`‰ì
(
möp
);

415 
	`‰ì
(
maxp
);

416 
	}
}

418 
	$show_ddú_°©us
(
group_run_°©s
 *
rs
, 
thªad_°©
 *
ts
,

419 
ddú
, 
buf_ouçut
 *
out
)

421 c⁄° *
°r
[] = { "Ñead", "write", "Årim", "sync" };

422 
ru¡
;

423 
mö
, 
max
, 
bw
, 
i›s
;

424 
món
, 
dev
;

425 *
io_p
, *
bw_p
, *
bw_p_Æt
, *
i›s_p
;

426 
i2p
;

428 i‡(
	`ddú_sync
(
ddú
)) {

429 i‡(
	`ˇlc_œt
(&
ts
->
sync_°©
, &
mö
, &
max
, &
món
, &
dev
)) {

430 
	`log_buf
(
out
, " %s:\n", "fsync/fdatasync/sync_file_range");

431 
	`di•œy_œt
(
°r
[
ddú
], 
mö
, 
max
, 
món
, 
dev
, 
out
);

432 
	`show_˛©_≥r˚¡ûes
(
ts
->
io_u_sync_∂©
,

433 
ts
->
sync_°©
.
ßm∂es
,

434 
ts
->
≥r˚¡ûe_li°
,

435 
ts
->
≥r˚¡ûe_¥ecisi⁄
,

436 
°r
[
ddú
], 
out
);

441 
	`as£π
(
	`ddú_rw
(
ddú
));

443 i‡(!
ts
->
ru¡ime
[
ddú
])

446 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

447 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

449 
bw
 = (1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
;

450 
io_p
 = 
	`num2°r
(
ts
->
io_byãs
[
ddú
],Ås->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

451 
bw_p
 = 
	`num2°r
(
bw
, 
ts
->
sig_figs
, 1, 
i2p
,Ås->
unô_ba£
);

452 
bw_p_Æt
 = 
	`num2°r
(
bw
, 
ts
->
sig_figs
, 1, !
i2p
,Ås->
unô_ba£
);

454 
i›s
 = (1000 * (
uöt64_t
)
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

455 
i›s_p
 = 
	`num2°r
(
i›s
, 
ts
->
sig_figs
, 1, 0, 
N2S_NONE
);

457 
	`log_buf
(
out
, " %s: IOPS=%s, BW=%s (%s)(%s/%llumsec)\n",

458 
rs
->
unifõd_rw_ªp
 ? "mixed" : 
°r
[
ddú
],

459 
i›s_p
, 
bw_p
, 
bw_p_Æt
, 
io_p
,

460 (Ë
ts
->
ru¡ime
[
ddú
]);

462 
	`‰ì
(
io_p
);

463 
	`‰ì
(
bw_p
);

464 
	`‰ì
(
bw_p_Æt
);

465 
	`‰ì
(
i›s_p
);

467 i‡(
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

468 
	`di•œy_œt
("¶©", 
mö
, 
max
, 
món
, 
dev
, 
out
);

469 i‡(
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

470 
	`di•œy_œt
("˛©", 
mö
, 
max
, 
món
, 
dev
, 
out
);

471 i‡(
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

472 
	`di•œy_œt
("Ü©", 
mö
, 
max
, 
món
, 
dev
, 
out
);

474 i‡(
ts
->
˛©_≥r˚¡ûes
 ||Ås->
œt_≥r˚¡ûes
) {

475 c⁄° *
«me
 = 
ts
->
˛©_≥r˚¡ûes
 ? "clat" : "Üat";

476 
uöt64_t
 
ßm∂es
;

478 i‡(
ts
->
˛©_≥r˚¡ûes
)

479 
ßm∂es
 = 
ts
->
˛©_°©
[
ddú
].samples;

481 
ßm∂es
 = 
ts
->
œt_°©
[
ddú
].samples;

483 
	`show_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
ddú
],

484 
ßm∂es
,

485 
ts
->
≥r˚¡ûe_li°
,

486 
ts
->
≥r˚¡ûe_¥ecisi⁄
, 
«me
, 
out
);

488 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

489 
p_of_agg
 = 100.0, 
fkb_ba£
 = ()
rs
->
kb_ba£
;

490 c⁄° *
bw_°r
;

492 i‡((
rs
->
unô_ba£
 =1Ë&& 
i2p
)

493 
bw_°r
 = "Kibit";

494 i‡(
rs
->
unô_ba£
 == 1)

495 
bw_°r
 = "kbit";

496 i‡(
i2p
)

497 
bw_°r
 = "KiB";

499 
bw_°r
 = "kB";

501 i‡(
rs
->
agg
[
ddú
]) {

502 
p_of_agg
 = 
món
 * 100 / (Ë(
rs
->
agg
[
ddú
] / 1024);

503 i‡(
p_of_agg
 > 100.0)

504 
p_of_agg
 = 100.0;

507 i‡(
rs
->
unô_ba£
 == 1) {

508 
mö
 *= 8.0;

509 
max
 *= 8.0;

510 
món
 *= 8.0;

511 
dev
 *= 8.0;

514 i‡(
món
 > 
fkb_ba£
 * fkb_base) {

515 
mö
 /
fkb_ba£
;

516 
max
 /
fkb_ba£
;

517 
món
 /
fkb_ba£
;

518 
dev
 /
fkb_ba£
;

519 
bw_°r
 = (
rs
->
unô_ba£
 == 1 ? "Mibit" : "MiB");

522 
	`log_buf
(
out
, " bw (%5s/s): min=%5llu, max=%5llu,Öer=%3.2f%%, "

523 "avg=%5.02f, stdev=%5.02f, sam∂es=%" 
PRIu64
 "\n",

524 
bw_°r
, 
mö
, 
max
, 
p_of_agg
, 
món
, 
dev
,

525 (&
ts
->
bw_°©
[
ddú
])->
ßm∂es
);

527 i‡(
	`ˇlc_œt
(&
ts
->
i›s_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

528 
	`log_buf
(
out
, " iops : min=%5llu, max=%5llu, "

529 "avg=%5.02f, stdev=%5.02f, sam∂es=%" 
PRIu64
 "\n",

530 
mö
, 
max
, 
món
, 
dev
, (&
ts
->
i›s_°©
[
ddú
])->
ßm∂es
);

532 
	}
}

534 
boﬁ
 
	$show_œt
(*
io_u_œt
, 
ƒ
, c⁄° **
ønges
,

535 c⁄° *
msg
, 
buf_ouçut
 *
out
)

537 
boﬁ
 
√w_löe
 = 
åue
, 
shown
 = 
Ál£
;

538 
i
, 
löe
 = 0;

540 
i
 = 0; i < 
ƒ
; i++) {

541 i‡(
io_u_œt
[
i
] <= 0.0)

543 
shown
 = 
åue
;

544 i‡(
√w_löe
) {

545 i‡(
löe
)

546 
	`log_buf
(
out
, "\n");

547 
	`log_buf
(
out
, "Ü© (%sË : ", 
msg
);

548 
√w_löe
 = 
Ál£
;

549 
löe
 = 0;

551 i‡(
löe
)

552 
	`log_buf
(
out
, ", ");

553 
	`log_buf
(
out
, "%s%3.2f%%", 
ønges
[
i
], 
io_u_œt
[i]);

554 
löe
++;

555 i‡(
löe
 == 5)

556 
√w_löe
 = 
åue
;

559 i‡(
shown
)

560 
	`log_buf
(
out
, "\n");

562  
åue
;

563 
	}
}

565 
	$show_œt_n
(*
io_u_œt_n
, 
buf_ouçut
 *
out
)

567 c⁄° *
ønges
[] = { "2=", "4=", "10=", "20=", "50=", "100=",

570 
	`show_œt
(
io_u_œt_n
, 
FIO_IO_U_LAT_N_NR
, 
ønges
, "n£c", 
out
);

571 
	}
}

573 
	$show_œt_u
(*
io_u_œt_u
, 
buf_ouçut
 *
out
)

575 c⁄° *
ønges
[] = { "2=", "4=", "10=", "20=", "50=", "100=",

578 
	`show_œt
(
io_u_œt_u
, 
FIO_IO_U_LAT_U_NR
, 
ønges
, "u£c", 
out
);

579 
	}
}

581 
	$show_œt_m
(*
io_u_œt_m
, 
buf_ouçut
 *
out
)

583 c⁄° *
ønges
[] = { "2=", "4=", "10=", "20=", "50=", "100=",

587 
	`show_œt
(
io_u_œt_m
, 
FIO_IO_U_LAT_M_NR
, 
ønges
, "m£c", 
out
);

588 
	}
}

590 
	$show_œãncõs
(
thªad_°©
 *
ts
, 
buf_ouçut
 *
out
)

592 
io_u_œt_n
[
FIO_IO_U_LAT_N_NR
];

593 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

594 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

596 
	`°©_ˇlc_œt_n
(
ts
, 
io_u_œt_n
);

597 
	`°©_ˇlc_œt_u
(
ts
, 
io_u_œt_u
);

598 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

600 
	`show_œt_n
(
io_u_œt_n
, 
out
);

601 
	`show_œt_u
(
io_u_œt_u
, 
out
);

602 
	`show_œt_m
(
io_u_œt_m
, 
out
);

603 
	}
}

605 
	$block_°©e_ˇãg‹y
(
block_°©e
)

607 
block_°©e
) {

608 
BLOCK_STATE_UNINIT
:

610 
BLOCK_STATE_TRIMMED
:

611 
BLOCK_STATE_WRITTEN
:

613 
BLOCK_STATE_WRITE_FAILURE
:

614 
BLOCK_STATE_TRIM_FAILURE
:

618 
	`as£π
(0);

621 
	}
}

623 
	$com∑ª_block_öfos
(c⁄° *
bs1
, c⁄° *
bs2
)

625 
uöt32_t
 
block1
 = *(uöt32_à*)
bs1
;

626 
uöt32_t
 
block2
 = *(uöt32_à*)
bs2
;

627 
°©e1
 = 
	`BLOCK_INFO_STATE
(
block1
);

628 
°©e2
 = 
	`BLOCK_INFO_STATE
(
block2
);

629 
bsˇt1
 = 
	`block_°©e_ˇãg‹y
(
°©e1
);

630 
bsˇt2
 = 
	`block_°©e_ˇãg‹y
(
°©e2
);

631 
cy˛es1
 = 
	`BLOCK_INFO_TRIMS
(
block1
);

632 
cy˛es2
 = 
	`BLOCK_INFO_TRIMS
(
block2
);

634 i‡(
bsˇt1
 < 
bsˇt2
)

636 i‡(
bsˇt1
 > 
bsˇt2
)

639 i‡(
cy˛es1
 < 
cy˛es2
)

641 i‡(
cy˛es1
 > 
cy˛es2
)

644 i‡(
°©e1
 < 
°©e2
)

646 i‡(
°©e1
 > 
°©e2
)

649 
	`as£π
(
block1
 =
block2
);

651 
	}
}

653 
	$ˇlc_block_≥r˚¡ûes
(
ƒ_block_öfos
, 
uöt32_t
 *
block_öfos
,

654 
fio_Â64_t
 *
∂i°
, **
≥r˚¡ûes
,

655 *
ty≥s
)

657 
Àn
 = 0;

658 
i
, 
ƒ_unöô
;

660 
	`qs‹t
(
block_öfos
, 
ƒ_block_öfos
, (
uöt32_t
), 
com∑ª_block_öfos
);

662 
Àn
 < 
FIO_IO_U_LIST_MAX_LEN
 && 
∂i°
[Àn].
u
.
f
 != 0.0)

663 
Àn
++;

665 i‡(!
Àn
)

673 i‡(
Àn
 > 1)

674 
	`qs‹t
((*)
∂i°
, 
Àn
, ’li°[0]), 
doubÀ_cmp
);

676 
ƒ_unöô
 = 0;

678 
ƒ_unöô
 = 0;

679 
ƒ_unöô
 < 
ƒ_block_öfos


680 && 
	`BLOCK_INFO_STATE
(
block_öfos
[
ƒ_unöô
]Ë=
BLOCK_STATE_UNINIT
;

681 
ƒ_unöô
 ++)

684 i‡(
ƒ_unöô
 =
ƒ_block_öfos
)

687 *
≥r˚¡ûes
 = 
	`ˇŒoc
(
Àn
, (**percentiles));

689 
i
 = 0; i < 
Àn
; i++) {

690 
idx
 = (
∂i°
[
i
].
u
.
f
 * (
ƒ_block_öfos
 - 
ƒ_unöô
) / 100)

691 + 
ƒ_unöô
;

692 (*
≥r˚¡ûes
)[
i
] = 
	`BLOCK_INFO_TRIMS
(
block_öfos
[
idx
]);

695 
	`mem£t
(
ty≥s
, 0, (*ty≥sË* 
BLOCK_STATE_COUNT
);

696 
i
 = 0; i < 
ƒ_block_öfos
; i++)

697 
ty≥s
[
	`BLOCK_INFO_STATE
(
block_öfos
[
i
])]++;

699  
Àn
;

700 
	}
}

702 c⁄° *
	gblock_°©e_«mes
[] = {

703 [
BLOCK_STATE_UNINIT
] = "unwritten",

704 [
BLOCK_STATE_TRIMMED
] = "trimmed",

705 [
BLOCK_STATE_WRITTEN
] = "written",

706 [
BLOCK_STATE_TRIM_FAILURE
] = "trim failure",

707 [
BLOCK_STATE_WRITE_FAILURE
] = "write failure",

710 
	$show_block_öfos
(
ƒ_block_öfos
, 
uöt32_t
 *
block_öfos
,

711 
fio_Â64_t
 *
∂i°
, 
buf_ouçut
 *
out
)

713 
Àn
, 
pos
, 
i
;

714 *
≥r˚¡ûes
 = 
NULL
;

715 
block_°©e_cou¡s
[
BLOCK_STATE_COUNT
];

717 
Àn
 = 
	`ˇlc_block_≥r˚¡ûes
(
ƒ_block_öfos
, 
block_öfos
, 
∂i°
,

718 &
≥r˚¡ûes
, 
block_°©e_cou¡s
);

720 
	`log_buf
(
out
, " blockÜifetimeÖercentiles :\n |");

721 
pos
 = 0;

722 
i
 = 0; i < 
Àn
; i++) {

723 
uöt32_t
 
block_öfo
 = 
≥r˚¡ûes
[
i
];

724 
	#LINE_LENGTH
 75

	)

725 
°r
[
LINE_LENGTH
];

726 
°æn
 = 
	`¢¥ötf
(
°r
, 
LINE_LENGTH
, " %3.2fth=%u%c",

727 
∂i°
[
i
].
u
.
f
, 
block_öfo
,

728 
i
 =
Àn
 - 1 ? '\n' : ',');

729 
	`as£π
(
°æn
 < 
LINE_LENGTH
);

730 i‡(
pos
 + 
°æn
 > 
LINE_LENGTH
) {

731 
pos
 = 0;

732 
	`log_buf
(
out
, "\n |");

734 
	`log_buf
(
out
, "%s", 
°r
);

735 
pos
 +
°æn
;

736 #unde‡
LINE_LENGTH


738 i‡(
≥r˚¡ûes
)

739 
	`‰ì
(
≥r˚¡ûes
);

741 
	`log_buf
(
out
, " states :");

742 
i
 = 0; i < 
BLOCK_STATE_COUNT
; i++)

743 
	`log_buf
(
out
, " %s=%u%c",

744 
block_°©e_«mes
[
i
], 
block_°©e_cou¡s
[i],

745 
i
 =
BLOCK_STATE_COUNT
 - 1 ? '\n' : ',');

746 
	}
}

748 
	$show_ss_n‹mÆ
(
thªad_°©
 *
ts
, 
buf_ouçut
 *
out
)

750 *
p1
, *
p1Æt
, *
p2
;

751 
bw_món
, 
i›s_món
;

752 c⁄° 
i2p
 = 
	`is_powî_of_2
(
ts
->
kb_ba£
);

754 i‡(!
ts
->
ss_dur
)

757 
bw_món
 = 
	`°ódy°©e_bw_món
(
ts
);

758 
i›s_món
 = 
	`°ódy°©e_i›s_món
(
ts
);

760 
p1
 = 
	`num2°r
(
bw_món
 / 
ts
->
kb_ba£
,Ås->
sig_figs
,Ås->kb_ba£, 
i2p
,Ås->
unô_ba£
);

761 
p1Æt
 = 
	`num2°r
(
bw_món
 / 
ts
->
kb_ba£
,Ås->
sig_figs
,Ås->kb_ba£, !
i2p
,Ås->
unô_ba£
);

762 
p2
 = 
	`num2°r
(
i›s_món
, 
ts
->
sig_figs
, 1, 0, 
N2S_NONE
);

764 
	`log_buf
(
out
, " steadystate :áttained=%s, bw=%s (%s), iops=%s, %s%s=%.3f%s\n",

765 
ts
->
ss_°©e
 & 
FIO_SS_ATTAINED
 ? "yes" : "no",

766 
p1
, 
p1Æt
, 
p2
,

767 
ts
->
ss_°©e
 & 
FIO_SS_IOPS
 ? "iops" : "bw",

768 
ts
->
ss_°©e
 & 
FIO_SS_SLOPE
 ? " slope": " mean dev",

769 
ts
->
ss_¸ôîi⁄
.
u
.
f
,

770 
ts
->
ss_°©e
 & 
FIO_SS_PCT
 ? "%" : "");

772 
	`‰ì
(
p1
);

773 
	`‰ì
(
p1Æt
);

774 
	`‰ì
(
p2
);

775 
	}
}

777 
	$show_thªad_°©us_n‹mÆ
(
thªad_°©
 *
ts
,

778 
group_run_°©s
 *
rs
,

779 
buf_ouçut
 *
out
)

781 
u§_˝u
, 
sys_˝u
;

782 
ru¡ime
;

783 
io_u_di°
[
FIO_IO_U_MAP_NR
];

784 
time_t
 
time_p
;

785 
time_buf
[32];

787 i‡(!
	`ddú_rw_sum
(
ts
->
io_byãs
Ë&& !ddú_rw_sum—s->
tŸÆ_io_u
))

790 
	`mem£t
(
time_buf
, 0, (time_buf));

792 
	`time
(&
time_p
);

793 
	`os_˘ime_r
((c⁄° 
time_t
 *Ë&
time_p
, 
time_buf
, (time_buf));

795 i‡(!
ts
->
îr‹
) {

796 
	`log_buf
(
out
, "%s: (groupid=%d, jobs=%d):Érr=%2d:Öid=%d: %s",

797 
ts
->
«me
,Ås->
groupid
,Ås->
membîs
,

798 
ts
->
îr‹
, (Ëts->
pid
, 
time_buf
);

800 
	`log_buf
(
out
, "%s: (groupid=%d, jobs=%d):Érr=%2d (%s):Öid=%d: %s",

801 
ts
->
«me
,Ås->
groupid
,Ås->
membîs
,

802 
ts
->
îr‹
,Ås->
vîr‹
, (Ëts->
pid
,

803 
time_buf
);

806 i‡(
	`°æí
(
ts
->
des¸ùti⁄
))

807 
	`log_buf
(
out
, " Des¸ùti⁄ : [%s]\n", 
ts
->
des¸ùti⁄
);

809 i‡(
ts
->
io_byãs
[
DDIR_READ
])

810 
	`show_ddú_°©us
(
rs
, 
ts
, 
DDIR_READ
, 
out
);

811 i‡(
ts
->
io_byãs
[
DDIR_WRITE
])

812 
	`show_ddú_°©us
(
rs
, 
ts
, 
DDIR_WRITE
, 
out
);

813 i‡(
ts
->
io_byãs
[
DDIR_TRIM
])

814 
	`show_ddú_°©us
(
rs
, 
ts
, 
DDIR_TRIM
, 
out
);

816 
	`show_œãncõs
(
ts
, 
out
);

818 i‡(
ts
->
sync_°©
.
ßm∂es
)

819 
	`show_ddú_°©us
(
rs
, 
ts
, 
DDIR_SYNC
, 
out
);

821 
ru¡ime
 = 
ts
->
tŸÆ_run_time
;

822 i‡(
ru¡ime
) {

823 
ru¡
 = (Ë
ru¡ime
;

825 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

826 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

828 
u§_˝u
 = 0;

829 
sys_˝u
 = 0;

832 
	`log_buf
(
out
, " cpu : usr=%3.2f%%, sys=%3.2f%%, ctx=%llu,"

833 " majf=%Œu, möf=%Œu\n", 
u§_˝u
, 
sys_˝u
,

834 (Ë
ts
->
˘x
,

835 (Ë
ts
->
majf
,

836 (Ë
ts
->
möf
);

838 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

839 
	`log_buf
(
out
, " IO depths : 1=%3.1f%%, 2=%3.1f%%, 4=%3.1f%%, 8=%3.1f%%,"

840 " 16=%3.1f%%, 32=%3.1f%%, >=64=%3.1f%%\n", 
io_u_di°
[0],

841 
io_u_di°
[1], io_u_dist[2],

842 
io_u_di°
[3], io_u_dist[4],

843 
io_u_di°
[5], io_u_dist[6]);

845 
	`°©_ˇlc_di°
(
ts
->
io_u_submô
,Ås->
tŸÆ_submô
, 
io_u_di°
);

846 
	`log_buf
(
out
, " submit : 0=%3.1f%%, 4=%3.1f%%, 8=%3.1f%%, 16=%3.1f%%,"

847 " 32=%3.1f%%, 64=%3.1f%%, >=64=%3.1f%%\n", 
io_u_di°
[0],

848 
io_u_di°
[1], io_u_dist[2],

849 
io_u_di°
[3], io_u_dist[4],

850 
io_u_di°
[5], io_u_dist[6]);

851 
	`°©_ˇlc_di°
(
ts
->
io_u_com∂ëe
,Ås->
tŸÆ_com∂ëe
, 
io_u_di°
);

852 
	`log_buf
(
out
, " complete : 0=%3.1f%%, 4=%3.1f%%, 8=%3.1f%%, 16=%3.1f%%,"

853 " 32=%3.1f%%, 64=%3.1f%%, >=64=%3.1f%%\n", 
io_u_di°
[0],

854 
io_u_di°
[1], io_u_dist[2],

855 
io_u_di°
[3], io_u_dist[4],

856 
io_u_di°
[5], io_u_dist[6]);

857 
	`log_buf
(
out
, " issuedÑwts:Åotal=%llu,%llu,%llu,%llu"

860 (Ë
ts
->
tŸÆ_io_u
[0],

861 (Ë
ts
->
tŸÆ_io_u
[1],

862 (Ë
ts
->
tŸÆ_io_u
[2],

863 (Ë
ts
->
tŸÆ_io_u
[3],

864 (Ë
ts
->
sh‹t_io_u
[0],

865 (Ë
ts
->
sh‹t_io_u
[1],

866 (Ë
ts
->
sh‹t_io_u
[2],

867 (Ë
ts
->
dr›_io_u
[0],

868 (Ë
ts
->
dr›_io_u
[1],

869 (Ë
ts
->
dr›_io_u
[2]);

870 i‡(
ts
->
c⁄töue_⁄_îr‹
) {

871 
	`log_buf
(
out
, "Érrors :Åotal=%llu, first_error=%d/<%s>\n",

872 ()
ts
->
tŸÆ_îr_cou¡
,

873 
ts
->
fú°_îr‹
,

874 
	`°ªº‹
(
ts
->
fú°_îr‹
));

876 i‡(
ts
->
œãncy_dïth
) {

877 
	`log_buf
(
out
, "Üatency :Åarget=%llu, window=%llu,Öercentile=%.2f%%, depth=%u\n",

878 ()
ts
->
œãncy_èrgë
,

879 ()
ts
->
œãncy_wödow
,

880 
ts
->
œãncy_≥r˚¡ûe
.
u
.
f
,

881 
ts
->
œãncy_dïth
);

884 i‡(
ts
->
ƒ_block_öfos
)

885 
	`show_block_öfos
(
ts
->
ƒ_block_öfos
,Ås->
block_öfos
,

886 
ts
->
≥r˚¡ûe_li°
, 
out
);

888 i‡(
ts
->
ss_dur
)

889 
	`show_ss_n‹mÆ
(
ts
, 
out
);

890 
	}
}

892 
	$show_ddú_°©us_ãr£
(
thªad_°©
 *
ts
,

893 
group_run_°©s
 *
rs
, 
ddú
,

894 
vî
, 
buf_ouçut
 *
out
)

896 
mö
, 
max
, 
möv
, 
maxv
, 
bw
, 
i›s
;

897 *
ovÆs
 = 
NULL
;

898 
món
, 
dev
;

899 
Àn
;

900 
i
, 
bw_°©
;

902 
	`as£π
(
	`ddú_rw
(
ddú
));

904 
i›s
 = 
bw
 = 0;

905 i‡(
ts
->
ru¡ime
[
ddú
]) {

906 
uöt64_t
 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

908 
bw
 = ((1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
) / 1024;

909 
i›s
 = (1000 * (
uöt64_t
Ë
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

912 
	`log_buf
(
out
, ";%llu;%llu;%llu;%llu",

913 (Ë
ts
->
io_byãs
[
ddú
] >> 10, 
bw
, 
i›s
,

914 (Ë
ts
->
ru¡ime
[
ddú
]);

916 i‡(
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

917 
	`log_buf
(
out
, ";%Œu;%Œu;%f;%f", 
mö
/1000, 
max
/1000, 
món
/1000, 
dev
/1000);

919 
	`log_buf
(
out
, ";%llu;%llu;%f;%f", 0ULL, 0ULL, 0.0, 0.0);

921 i‡(
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

922 
	`log_buf
(
out
, ";%Œu;%Œu;%f;%f", 
mö
/1000, 
max
/1000, 
món
/1000, 
dev
/1000);

924 
	`log_buf
(
out
, ";%llu;%llu;%f;%f", 0ULL, 0ULL, 0.0, 0.0);

926 i‡(
ts
->
˛©_≥r˚¡ûes
 ||Ås->
œt_≥r˚¡ûes
) {

927 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
ddú
],

928 
ts
->
˛©_°©
[
ddú
].
ßm∂es
,

929 
ts
->
≥r˚¡ûe_li°
, &
ovÆs
, &
maxv
,

930 &
möv
);

932 
Àn
 = 0;

934 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

935 i‡(
i
 >
Àn
) {

936 
	`log_buf
(
out
, ";0%%=0");

939 
	`log_buf
(
out
, ";%f%%=%Œu", 
ts
->
≥r˚¡ûe_li°
[
i
].
u
.
f
, 
ovÆs
[i]/1000);

942 i‡(
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

943 
	`log_buf
(
out
, ";%Œu;%Œu;%f;%f", 
mö
/1000, 
max
/1000, 
món
/1000, 
dev
/1000);

945 
	`log_buf
(
out
, ";%llu;%llu;%f;%f", 0ULL, 0ULL, 0.0, 0.0);

947 i‡(
ovÆs
)

948 
	`‰ì
(
ovÆs
);

950 
bw_°©
 = 
	`ˇlc_œt
(&
ts
->bw_°©[
ddú
], &
mö
, &
max
, &
món
, &
dev
);

951 i‡(
bw_°©
) {

952 
p_of_agg
 = 100.0;

954 i‡(
rs
->
agg
[
ddú
]) {

955 
p_of_agg
 = 
món
 * 100 / (Ë(
rs
->
agg
[
ddú
] / 1024);

956 i‡(
p_of_agg
 > 100.0)

957 
p_of_agg
 = 100.0;

960 
	`log_buf
(
out
, ";%Œu;%Œu;%f%%;%f;%f", 
mö
, 
max
, 
p_of_agg
, 
món
, 
dev
);

962 
	`log_buf
(
out
, ";%llu;%llu;%f%%;%f;%f", 0ULL, 0ULL, 0.0, 0.0, 0.0);

964 i‡(
vî
 == 5) {

965 i‡(
bw_°©
)

966 
	`log_buf
(
out
, ";%" 
PRIu64
, (&
ts
->
bw_°©
[
ddú
])->
ßm∂es
);

968 
	`log_buf
(
out
, ";%lu", 0UL);

970 i‡(
	`ˇlc_œt
(&
ts
->
i›s_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

971 
	`log_buf
(
out
, ";%Œu;%Œu;%f;%f;%" 
PRIu64
, 
mö
, 
max
,

972 
món
, 
dev
, (&
ts
->
i›s_°©
[
ddú
])->
ßm∂es
);

974 
	`log_buf
(
out
, ";%llu;%llu;%f;%f;%lu", 0ULL, 0ULL, 0.0, 0.0, 0UL);

976 
	}
}

978 
	$add_ddú_°©us_js⁄
(
thªad_°©
 *
ts
,

979 
group_run_°©s
 *
rs
, 
ddú
, 
js⁄_obje˘
 *
∑ª¡
)

981 
mö
, 
max
, 
möv
, 
maxv
;

982 
bw_byãs
, 
bw
;

983 *
ovÆs
 = 
NULL
;

984 
món
, 
dev
, 
i›s
;

985 
Àn
;

986 
i
;

987 c⁄° *
ddú«me
[] = { "read", "write", "trim", "sync" };

988 
js⁄_obje˘
 *
dú_obje˘
, *
tmp_obje˘
, *
≥r˚¡ûe_obje˘
, *
˛©_bös_obje˘
 = 
NULL
;

989 
buf
[120];

990 
p_of_agg
 = 100.0;

992 
	`as£π
(
	`ddú_rw
(
ddú
Ë|| 
	`ddú_sync
(ddir));

994 i‡(
ts
->
unifõd_rw_ªp
 && 
ddú
 !
DDIR_READ
)

997 
dú_obje˘
 = 
	`js⁄_¸óã_obje˘
();

998 
	`js⁄_obje˘_add_vÆue_obje˘
(
∑ª¡
,

999 
ts
->
unifõd_rw_ªp
 ? "mixed" : 
ddú«me
[
ddú
], 
dú_obje˘
);

1001 i‡(
	`ddú_rw
(
ddú
)) {

1002 
bw_byãs
 = 0;

1003 
bw
 = 0;

1004 
i›s
 = 0.0;

1005 i‡(
ts
->
ru¡ime
[
ddú
]) {

1006 
uöt64_t
 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

1008 
bw_byãs
 = ((1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
);

1009 
bw
 = 
bw_byãs
 / 1024;

1010 
i›s
 = (1000.0 * (
uöt64_t
Ë
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

1013 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "io_byãs", 
ts
->
io_byãs
[
ddú
]);

1014 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "io_kbyãs", 
ts
->
io_byãs
[
ddú
] >> 10);

1015 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_byãs", 
bw_byãs
);

1016 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw", 
bw
);

1017 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "i›s", 
i›s
);

1018 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "ru¡ime", 
ts
->
ru¡ime
[
ddú
]);

1019 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "tŸÆ_ios", 
ts
->
tŸÆ_io_u
[
ddú
]);

1020 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "sh‹t_ios", 
ts
->
sh‹t_io_u
[
ddú
]);

1021 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "dr›_ios", 
ts
->
dr›_io_u
[
ddú
]);

1023 i‡(!
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

1024 
mö
 = 
max
 = 0;

1025 
món
 = 
dev
 = 0.0;

1027 
tmp_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1028 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "¶©_ns", 
tmp_obje˘
);

1029 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "mö", 
mö
);

1030 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "max", 
max
);

1031 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "món", 
món
);

1032 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "°ddev", 
dev
);

1034 i‡(!
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

1035 
mö
 = 
max
 = 0;

1036 
món
 = 
dev
 = 0.0;

1038 
tmp_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1039 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "˛©_ns", 
tmp_obje˘
);

1040 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "mö", 
mö
);

1041 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "max", 
max
);

1042 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "món", 
món
);

1043 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "°ddev", 
dev
);

1045 i‡(!
	`ˇlc_œt
(&
ts
->
sync_°©
, &
mö
, &
max
, &
món
, &
dev
)) {

1046 
mö
 = 
max
 = 0;

1047 
món
 = 
dev
 = 0.0;

1050 
tmp_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1051 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "œt_ns", 
tmp_obje˘
);

1052 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "tŸÆ_ios", 
ts
->
tŸÆ_io_u
[
DDIR_SYNC
]);

1053 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "mö", 
mö
);

1054 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "max", 
max
);

1055 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "món", 
món
);

1056 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "°ddev", 
dev
);

1059 i‡(
ts
->
˛©_≥r˚¡ûes
 ||Ås->
œt_≥r˚¡ûes
) {

1060 i‡(
	`ddú_rw
(
ddú
)) {

1061 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
ddú
],

1062 
ts
->
˛©_°©
[
ddú
].
ßm∂es
,

1063 
ts
->
≥r˚¡ûe_li°
, &
ovÆs
, &
maxv
,

1064 &
möv
);

1066 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
ts
->
io_u_sync_∂©
,

1067 
ts
->
sync_°©
.
ßm∂es
,

1068 
ts
->
≥r˚¡ûe_li°
, &
ovÆs
, &
maxv
,

1069 &
möv
);

1072 i‡(
Àn
 > 
FIO_IO_U_LIST_MAX_LEN
)

1073 
Àn
 = 
FIO_IO_U_LIST_MAX_LEN
;

1075 
Àn
 = 0;

1077 
≥r˚¡ûe_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1078 
	`js⁄_obje˘_add_vÆue_obje˘
(
tmp_obje˘
, "≥r˚¡ûe", 
≥r˚¡ûe_obje˘
);

1079 
i
 = 0; i < 
Àn
; i++) {

1080 
	`¢¥ötf
(
buf
, (buf), "%f", 
ts
->
≥r˚¡ûe_li°
[
i
].
u
.
f
);

1081 
	`js⁄_obje˘_add_vÆue_öt
(
≥r˚¡ûe_obje˘
, (c⁄° *)
buf
, 
ovÆs
[
i
]);

1084 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON_PLUS
) {

1085 
˛©_bös_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1086 i‡(
ts
->
˛©_≥r˚¡ûes
)

1087 
	`js⁄_obje˘_add_vÆue_obje˘
(
tmp_obje˘
, "bös", 
˛©_bös_obje˘
);

1089 
i
 = 0; i < 
FIO_IO_U_PLAT_NR
; i++) {

1090 i‡(
	`ddú_rw
(
ddú
)) {

1091 i‡(
ts
->
io_u_∂©
[
ddú
][
i
]) {

1092 
	`¢¥ötf
(
buf
, (buf), "%Œu", 
	`∂©_idx_to_vÆ
(
i
));

1093 
	`js⁄_obje˘_add_vÆue_öt
(
˛©_bös_obje˘
, (c⁄° *)
buf
, 
ts
->
io_u_∂©
[
ddú
][
i
]);

1096 i‡(
ts
->
io_u_sync_∂©
[
i
]) {

1097 
	`¢¥ötf
(
buf
, (buf), "%Œu", 
	`∂©_idx_to_vÆ
(
i
));

1098 
	`js⁄_obje˘_add_vÆue_öt
(
˛©_bös_obje˘
, (c⁄° *)
buf
, 
ts
->
io_u_sync_∂©
[
i
]);

1104 i‡(!
	`ddú_rw
(
ddú
))

1107 i‡(!
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

1108 
mö
 = 
max
 = 0;

1109 
món
 = 
dev
 = 0.0;

1111 
tmp_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1112 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "œt_ns", 
tmp_obje˘
);

1113 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "mö", 
mö
);

1114 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "max", 
max
);

1115 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "món", 
món
);

1116 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "°ddev", 
dev
);

1117 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON_PLUS
 && 
ts
->
œt_≥r˚¡ûes
)

1118 
	`js⁄_obje˘_add_vÆue_obje˘
(
tmp_obje˘
, "bös", 
˛©_bös_obje˘
);

1120 i‡(
ovÆs
)

1121 
	`‰ì
(
ovÆs
);

1123 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

1124 i‡(
rs
->
agg
[
ddú
]) {

1125 
p_of_agg
 = 
món
 * 100 / (Ë(
rs
->
agg
[
ddú
] / 1024);

1126 i‡(
p_of_agg
 > 100.0)

1127 
p_of_agg
 = 100.0;

1130 
mö
 = 
max
 = 0;

1131 
p_of_agg
 = 
món
 = 
dev
 = 0.0;

1133 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_mö", 
mö
);

1134 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_max", 
max
);

1135 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "bw_agg", 
p_of_agg
);

1136 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "bw_món", 
món
);

1137 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "bw_dev", 
dev
);

1138 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_samples",

1139 (&
ts
->
bw_°©
[
ddú
])->
ßm∂es
);

1141 i‡(!
	`ˇlc_œt
(&
ts
->
i›s_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

1142 
mö
 = 
max
 = 0;

1143 
món
 = 
dev
 = 0.0;

1145 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "i›s_mö", 
mö
);

1146 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "i›s_max", 
max
);

1147 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "i›s_món", 
món
);

1148 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "i›s_°ddev", 
dev
);

1149 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "iops_samples",

1150 (&
ts
->
i›s_°©
[
ddú
])->
ßm∂es
);

1151 
	}
}

1153 
	$show_thªad_°©us_ãr£_Æl
(
thªad_°©
 *
ts
,

1154 
group_run_°©s
 *
rs
, 
vî
,

1155 
buf_ouçut
 *
out
)

1157 
io_u_di°
[
FIO_IO_U_MAP_NR
];

1158 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

1159 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

1160 
u§_˝u
, 
sys_˝u
;

1161 
i
;

1164 i‡(
vî
 == 2)

1165 
	`log_buf
(
out
, "2;%s;%d;%d", 
ts
->
«me
,Ås->
groupid
,Ås->
îr‹
);

1167 
	`log_buf
(
out
, "%d;%s;%s;%d;%d", 
vî
, 
fio_vîsi⁄_°rög
,

1168 
ts
->
«me
,Ås->
groupid
,Ås->
îr‹
);

1171 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_READ
, 
vî
, 
out
);

1173 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_WRITE
, 
vî
, 
out
);

1175 i‡(
vî
 == 2 || ver == 4 || ver == 5)

1176 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_TRIM
, 
vî
, 
out
);

1179 i‡(
ts
->
tŸÆ_run_time
) {

1180 
ru¡
 = (Ë
ts
->
tŸÆ_run_time
;

1182 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

1183 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

1185 
u§_˝u
 = 0;

1186 
sys_˝u
 = 0;

1189 
	`log_buf
(
out
, ";%f%%;%f%%;%Œu;%Œu;%Œu", 
u§_˝u
, 
sys_˝u
,

1190 (Ë
ts
->
˘x
,

1191 (Ë
ts
->
majf
,

1192 (Ë
ts
->
möf
);

1195 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

1196 
	`°©_ˇlc_œt_nu
(
ts
, 
io_u_œt_u
);

1197 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

1200 
	`log_buf
(
out
, ";%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%",

1201 
io_u_di°
[0], io_u_dist[1], io_u_dist[2], io_u_dist[3],

1202 
io_u_di°
[4], io_u_dist[5], io_u_dist[6]);

1205 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

1206 
	`log_buf
(
out
, ";%3.2f%%", 
io_u_œt_u
[
i
]);

1208 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

1209 
	`log_buf
(
out
, ";%3.2f%%", 
io_u_œt_m
[
i
]);

1212 i‡(
vî
 >= 3)

1213 
	`show_disk_utû
(1, 
NULL
, 
out
);

1216 i‡(
ts
->
c⁄töue_⁄_îr‹
)

1217 
	`log_buf
(
out
, ";%Œu;%d", (Ë
ts
->
tŸÆ_îr_cou¡
,Ås->
fú°_îr‹
);

1218 i‡(
vî
 == 2)

1219 
	`log_buf
(
out
, "\n");

1222 i‡(
	`°æí
(
ts
->
des¸ùti⁄
))

1223 
	`log_buf
(
out
, ";%s", 
ts
->
des¸ùti⁄
);

1225 
	`log_buf
(
out
, "\n");

1226 
	}
}

1228 
	$js⁄_add_job_›ts
(
js⁄_obje˘
 *
roŸ
, c⁄° *
«me
,

1229 
Êi°_hód
 *
›t_li°
)

1231 
js⁄_obje˘
 *
dú_obje˘
;

1232 
Êi°_hód
 *
íåy
;

1233 
¥öt_›ti⁄
 *
p
;

1235 i‡(
	`Êi°_em±y
(
›t_li°
))

1238 
dú_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1239 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, 
«me
, 
dú_obje˘
);

1241 
	`Êi°_f‹_óch
(
íåy
, 
›t_li°
) {

1242 c⁄° *
pos
 = "";

1244 
p
 = 
	`Êi°_íåy
(
íåy
, 
¥öt_›ti⁄
, 
li°
);

1245 i‡(
p
->
vÆue
)

1246 
pos
 = 
p
->
vÆue
;

1247 
	`js⁄_obje˘_add_vÆue_°rög
(
dú_obje˘
, 
p
->
«me
, 
pos
);

1249 
	}
}

1251 
js⁄_obje˘
 *
	$show_thªad_°©us_js⁄
(
thªad_°©
 *
ts
,

1252 
group_run_°©s
 *
rs
,

1253 
Êi°_hód
 *
›t_li°
)

1255 
js⁄_obje˘
 *
roŸ
, *
tmp
;

1256 
jobs_ëa
 *
je
;

1257 
io_u_di°
[
FIO_IO_U_MAP_NR
];

1258 
io_u_œt_n
[
FIO_IO_U_LAT_N_NR
];

1259 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

1260 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

1261 
u§_˝u
, 
sys_˝u
;

1262 
i
;

1263 
size_t
 
size
;

1265 
roŸ
 = 
	`js⁄_¸óã_obje˘
();

1266 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "job«me", 
ts
->
«me
);

1267 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "groupid", 
ts
->
groupid
);

1268 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "îr‹", 
ts
->
îr‹
);

1271 
je
 = 
	`gë_jobs_ëa
(
åue
, &
size
);

1272 i‡(
je
) {

1273 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "ëa", 
je
->
ëa_£c
);

1274 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "ñ≠£d", 
je
->
ñ≠£d_£c
);

1277 i‡(
›t_li°
)

1278 
	`js⁄_add_job_›ts
(
roŸ
, "job o±i⁄s", 
›t_li°
);

1280 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_READ
, 
roŸ
);

1281 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_WRITE
, 
roŸ
);

1282 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_TRIM
, 
roŸ
);

1283 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_SYNC
, 
roŸ
);

1286 i‡(
ts
->
tŸÆ_run_time
) {

1287 
ru¡
 = (Ë
ts
->
tŸÆ_run_time
;

1289 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

1290 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

1292 
u§_˝u
 = 0;

1293 
sys_˝u
 = 0;

1295 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
roŸ
, "u§_˝u", 
u§_˝u
);

1296 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
roŸ
, "sys_˝u", 
sys_˝u
);

1297 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "˘x", 
ts
->
˘x
);

1298 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "majf", 
ts
->
majf
);

1299 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "möf", 
ts
->
möf
);

1303 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

1304 
	`°©_ˇlc_œt_n
(
ts
, 
io_u_œt_n
);

1305 
	`°©_ˇlc_œt_u
(
ts
, 
io_u_œt_u
);

1306 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

1308 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1309 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "iodïth_Àvñ", 
tmp
);

1311 
i
 = 0; i < 7; i++) {

1312 
«me
[20];

1313 i‡(
i
 < 6)

1314 
	`¢¥ötf
(
«me
, 20, "%d", 1 << 
i
);

1316 
	`¢¥ötf
(
«me
, 20, ">=%d", 1 << 
i
);

1317 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, (c⁄° *)
«me
, 
io_u_di°
[
i
]);

1321 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1322 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "œãncy_ns", 
tmp
);

1323 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++) {

1324 c⁄° *
ønges
[] = { "2", "4", "10", "20", "50", "100",

1326 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
ønges
[
i
], 
io_u_œt_n
[i]);

1329 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1330 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "œãncy_us", 
tmp
);

1331 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++) {

1332 c⁄° *
ønges
[] = { "2", "4", "10", "20", "50", "100",

1334 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
ønges
[
i
], 
io_u_œt_u
[i]);

1337 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1338 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "œãncy_ms", 
tmp
);

1339 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++) {

1340 c⁄° *
ønges
[] = { "2", "4", "10", "20", "50", "100",

1343 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
ønges
[
i
], 
io_u_œt_m
[i]);

1347 i‡(
ts
->
c⁄töue_⁄_îr‹
) {

1348 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "tŸÆ_îr", 
ts
->
tŸÆ_îr_cou¡
);

1349 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "fú°_îr‹", 
ts
->
fú°_îr‹
);

1352 i‡(
ts
->
œãncy_dïth
) {

1353 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "œãncy_dïth", 
ts
->
œãncy_dïth
);

1354 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "œãncy_èrgë", 
ts
->
œãncy_èrgë
);

1355 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
roŸ
, "œãncy_≥r˚¡ûe", 
ts
->
œãncy_≥r˚¡ûe
.
u
.
f
);

1356 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "œãncy_wödow", 
ts
->
œãncy_wödow
);

1360 i‡(
	`°æí
(
ts
->
des¸ùti⁄
))

1361 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "desc", 
ts
->
des¸ùti⁄
);

1363 i‡(
ts
->
ƒ_block_öfos
) {

1365 
Àn
;

1366 *
≥r˚¡ûes
 = 
NULL
;

1367 
block_°©e_cou¡s
[
BLOCK_STATE_COUNT
];

1369 
Àn
 = 
	`ˇlc_block_≥r˚¡ûes
(
ts
->
ƒ_block_öfos
,Ås->
block_öfos
,

1370 
ts
->
≥r˚¡ûe_li°
,

1371 &
≥r˚¡ûes
, 
block_°©e_cou¡s
);

1373 i‡(
Àn
) {

1374 
js⁄_obje˘
 *
block
, *
≥r˚¡ûe_obje˘
, *
°©es
;

1375 
°©e
;

1376 
block
 = 
	`js⁄_¸óã_obje˘
();

1377 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "block", 
block
);

1379 
≥r˚¡ûe_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1380 
	`js⁄_obje˘_add_vÆue_obje˘
(
block
, "percentiles",

1381 
≥r˚¡ûe_obje˘
);

1382 
i
 = 0; i < 
Àn
; i++) {

1383 
buf
[20];

1384 
	`¢¥ötf
(
buf
, (buf), "%f",

1385 
ts
->
≥r˚¡ûe_li°
[
i
].
u
.
f
);

1386 
	`js⁄_obje˘_add_vÆue_öt
(
≥r˚¡ûe_obje˘
,

1387 (c⁄° *)
buf
,

1388 
≥r˚¡ûes
[
i
]);

1391 
°©es
 = 
	`js⁄_¸óã_obje˘
();

1392 
	`js⁄_obje˘_add_vÆue_obje˘
(
block
, "°©es", 
°©es
);

1393 
°©e
 = 0; sèã < 
BLOCK_STATE_COUNT
; state++) {

1394 
	`js⁄_obje˘_add_vÆue_öt
(
°©es
,

1395 
block_°©e_«mes
[
°©e
],

1396 
block_°©e_cou¡s
[
°©e
]);

1398 
	`‰ì
(
≥r˚¡ûes
);

1402 i‡(
ts
->
ss_dur
) {

1403 
js⁄_obje˘
 *
d©a
;

1404 
js⁄_¨øy
 *
i›s
, *
bw
;

1405 
i
, 
j
, 
k
;

1406 
ss_buf
[64];

1408 
	`¢¥ötf
(
ss_buf
, (ss_buf), "%s%s:%f%s",

1409 
ts
->
ss_°©e
 & 
FIO_SS_IOPS
 ? "iops" : "bw",

1410 
ts
->
ss_°©e
 & 
FIO_SS_SLOPE
 ? "_slope" : "",

1411 (Ë
ts
->
ss_limô
.
u
.
f
,

1412 
ts
->
ss_°©e
 & 
FIO_SS_PCT
 ? "%" : "");

1414 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1415 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "°ódy°©e", 
tmp
);

1416 
	`js⁄_obje˘_add_vÆue_°rög
(
tmp
, "ss", 
ss_buf
);

1417 
	`js⁄_obje˘_add_vÆue_öt
(
tmp
, "duøti⁄", ()
ts
->
ss_dur
);

1418 
	`js⁄_obje˘_add_vÆue_öt
(
tmp
, "©èöed", (
ts
->
ss_°©e
 & 
FIO_SS_ATTAINED
) > 0);

1420 
	`¢¥ötf
(
ss_buf
, (ss_buf), "%f%s", (Ë
ts
->
ss_¸ôîi⁄
.
u
.
f
,

1421 
ts
->
ss_°©e
 & 
FIO_SS_PCT
 ? "%" : "");

1422 
	`js⁄_obje˘_add_vÆue_°rög
(
tmp
, "¸ôîi⁄", 
ss_buf
);

1423 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "max_devüti⁄", 
ts
->
ss_devüti⁄
.
u
.
f
);

1424 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "¶›e", 
ts
->
ss_¶›e
.
u
.
f
);

1426 
d©a
 = 
	`js⁄_¸óã_obje˘
();

1427 
	`js⁄_obje˘_add_vÆue_obje˘
(
tmp
, "d©a", 
d©a
);

1428 
bw
 = 
	`js⁄_¸óã_¨øy
();

1429 
i›s
 = 
	`js⁄_¸óã_¨øy
();

1437 i‡((
ts
->
ss_°©e
 & 
FIO_SS_ATTAINED
Ë|| !—s->ss_°©ê& 
FIO_SS_BUFFER_FULL
))

1438 
j
 = 
ts
->
ss_hód
;

1440 
j
 = 
ts
->
ss_hód
 =0 ?Ås->
ss_dur
 - 1 :Ås->ss_head - 1;

1441 
i
 = 0; i < 
ts
->
ss_dur
; i++) {

1442 
k
 = (
j
 + 
i
Ë% 
ts
->
ss_dur
;

1443 
	`js⁄_¨øy_add_vÆue_öt
(
bw
, 
ts
->
ss_bw_d©a
[
k
]);

1444 
	`js⁄_¨øy_add_vÆue_öt
(
i›s
, 
ts
->
ss_i›s_d©a
[
k
]);

1446 
	`js⁄_obje˘_add_vÆue_öt
(
d©a
, "bw_món", 
	`°ódy°©e_bw_món
(
ts
));

1447 
	`js⁄_obje˘_add_vÆue_öt
(
d©a
, "i›s_món", 
	`°ódy°©e_i›s_món
(
ts
));

1448 
	`js⁄_obje˘_add_vÆue_¨øy
(
d©a
, "i›s", 
i›s
);

1449 
	`js⁄_obje˘_add_vÆue_¨øy
(
d©a
, "bw", 
bw
);

1452  
roŸ
;

1453 
	}
}

1455 
	$show_thªad_°©us_ãr£
(
thªad_°©
 *
ts
,

1456 
group_run_°©s
 *
rs
,

1457 
buf_ouçut
 *
out
)

1459 i‡(
ãr£_vîsi⁄
 >= 2 &&Åerse_version <= 5)

1460 
	`show_thªad_°©us_ãr£_Æl
(
ts
, 
rs
, 
ãr£_vîsi⁄
, 
out
);

1462 
	`log_îr
("fio: badÅî£ vîsi⁄!? %d\n", 
ãr£_vîsi⁄
);

1463 
	}
}

1465 
js⁄_obje˘
 *
	$show_thªad_°©us
(
thªad_°©
 *
ts
,

1466 
group_run_°©s
 *
rs
,

1467 
Êi°_hód
 *
›t_li°
,

1468 
buf_ouçut
 *
out
)

1470 
js⁄_obje˘
 *
ªt
 = 
NULL
;

1472 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_TERSE
)

1473 
	`show_thªad_°©us_ãr£
(
ts
, 
rs
, 
out
);

1474 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
)

1475 
ªt
 = 
	`show_thªad_°©us_js⁄
(
ts
, 
rs
, 
›t_li°
);

1476 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

1477 
	`show_thªad_°©us_n‹mÆ
(
ts
, 
rs
, 
out
);

1479  
ªt
;

1480 
	}
}

1482 
	$sum_°©
(
io_°©
 *
d°
, io_°© *
§c
, 
boﬁ
 
fú°
)

1484 
món
, 
S
;

1486 i‡(
§c
->
ßm∂es
 == 0)

1489 
d°
->
mö_vÆ
 = 
	`mö
(d°->mö_vÆ, 
§c
->min_val);

1490 
d°
->
max_vÆ
 = 
	`max
(d°->max_vÆ, 
§c
->max_val);

1497 i‡(
fú°
) {

1498 
món
 = 
§c
->món.
u
.
f
;

1499 
S
 = 
§c
->S.
u
.
f
;

1501 
dñè
 = 
§c
->
món
.
u
.
f
 - 
d°
->mean.u.f;

1503 
món
 = ((
§c
->món.
u
.
f
 * src->
ßm∂es
) +

1504 (
d°
->
món
.
u
.
f
 * d°->
ßm∂es
)) /

1505 (
d°
->
ßm∂es
 + 
§c
->samples);

1507 
S
 = 
§c
->S.
u
.
f
 + 
d°
->S.u.‡+ 
	`pow
(
dñè
, 2.0) *

1508 (
d°
->
ßm∂es
 * 
§c
->samples) /

1509 (
d°
->
ßm∂es
 + 
§c
->samples);

1512 
d°
->
ßm∂es
 +
§c
->samples;

1513 
d°
->
món
.
u
.
f
 = mean;

1514 
d°
->
S
.
u
.
f
 = S;

1515 
	}
}

1517 
	$sum_group_°©s
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
)

1519 
i
;

1521 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1522 i‡(
d°
->
max_run
[
i
] < 
§c
->max_run[i])

1523 
d°
->
max_run
[
i
] = 
§c
->max_run[i];

1524 i‡(
d°
->
mö_run
[
i
] && d°->mö_run[i] > 
§c
->min_run[i])

1525 
d°
->
mö_run
[
i
] = 
§c
->min_run[i];

1526 i‡(
d°
->
max_bw
[
i
] < 
§c
->max_bw[i])

1527 
d°
->
max_bw
[
i
] = 
§c
->max_bw[i];

1528 i‡(
d°
->
mö_bw
[
i
] && d°->mö_bw[i] > 
§c
->min_bw[i])

1529 
d°
->
mö_bw
[
i
] = 
§c
->min_bw[i];

1531 
d°
->
iobyãs
[
i
] +
§c
->iobytes[i];

1532 
d°
->
agg
[
i
] +
§c
->agg[i];

1535 i‡(!
d°
->
kb_ba£
)

1536 
d°
->
kb_ba£
 = 
§c
->kb_base;

1537 i‡(!
d°
->
unô_ba£
)

1538 
d°
->
unô_ba£
 = 
§c
->unit_base;

1539 i‡(!
d°
->
sig_figs
)

1540 
d°
->
sig_figs
 = 
§c
->sig_figs;

1541 
	}
}

1543 
	$sum_thªad_°©s
(
thªad_°©
 *
d°
, thªad_°© *
§c
,

1544 
boﬁ
 
fú°
)

1546 
l
, 
k
;

1548 
l
 = 0;Ü < 
DDIR_RWDIR_CNT
;Ü++) {

1549 i‡(!
d°
->
unifõd_rw_ªp
) {

1550 
	`sum_°©
(&
d°
->
˛©_°©
[
l
], &
§c
->˛©_°©[l], 
fú°
);

1551 
	`sum_°©
(&
d°
->
¶©_°©
[
l
], &
§c
->¶©_°©[l], 
fú°
);

1552 
	`sum_°©
(&
d°
->
œt_°©
[
l
], &
§c
->œt_°©[l], 
fú°
);

1553 
	`sum_°©
(&
d°
->
bw_°©
[
l
], &
§c
->bw_°©[l], 
fú°
);

1554 
	`sum_°©
(&
d°
->
i›s_°©
[
l
], &
§c
->i›s_°©[l], 
fú°
);

1556 
d°
->
io_byãs
[
l
] +
§c
->io_bytes[l];

1558 i‡(
d°
->
ru¡ime
[
l
] < 
§c
->runtime[l])

1559 
d°
->
ru¡ime
[
l
] = 
§c
->runtime[l];

1561 
	`sum_°©
(&
d°
->
˛©_°©
[0], &
§c
->˛©_°©[
l
], 
fú°
);

1562 
	`sum_°©
(&
d°
->
¶©_°©
[0], &
§c
->¶©_°©[
l
], 
fú°
);

1563 
	`sum_°©
(&
d°
->
œt_°©
[0], &
§c
->œt_°©[
l
], 
fú°
);

1564 
	`sum_°©
(&
d°
->
bw_°©
[0], &
§c
->bw_°©[
l
], 
fú°
);

1565 
	`sum_°©
(&
d°
->
i›s_°©
[0], &
§c
->i›s_°©[
l
], 
fú°
);

1567 
d°
->
io_byãs
[0] +
§c
->io_byãs[
l
];

1569 i‡(
d°
->
ru¡ime
[0] < 
§c
->ru¡ime[
l
])

1570 
d°
->
ru¡ime
[0] = 
§c
->ru¡ime[
l
];

1576 
fú°
 = 
Ál£
;

1580 
	`sum_°©
(&
d°
->
sync_°©
, &
§c
->sync_°©, 
fú°
);

1581 
d°
->
u§_time
 +
§c
->usr_time;

1582 
d°
->
sys_time
 +
§c
->sys_time;

1583 
d°
->
˘x
 +
§c
->ctx;

1584 
d°
->
majf
 +
§c
->majf;

1585 
d°
->
möf
 +
§c
->minf;

1587 
k
 = 0; k < 
FIO_IO_U_MAP_NR
; k++) {

1588 
d°
->
io_u_m≠
[
k
] +
§c
->io_u_map[k];

1589 
d°
->
io_u_submô
[
k
] +
§c
->io_u_submit[k];

1590 
d°
->
io_u_com∂ëe
[
k
] +
§c
->io_u_complete[k];

1592 
k
 = 0; k < 
FIO_IO_U_LAT_N_NR
; k++) {

1593 
d°
->
io_u_œt_n
[
k
] +
§c
->io_u_lat_n[k];

1594 
d°
->
io_u_œt_u
[
k
] +
§c
->io_u_lat_u[k];

1595 
d°
->
io_u_œt_m
[
k
] +
§c
->io_u_lat_m[k];

1597 
k
 = 0; k < 
FIO_IO_U_PLAT_NR
; k++)

1598 
d°
->
io_u_sync_∂©
[
k
] +
§c
->io_u_sync_plat[k];

1600 
k
 = 0; k < 
DDIR_RWDIR_CNT
; k++) {

1601 i‡(!
d°
->
unifõd_rw_ªp
) {

1602 
d°
->
tŸÆ_io_u
[
k
] +
§c
->total_io_u[k];

1603 
d°
->
sh‹t_io_u
[
k
] +
§c
->short_io_u[k];

1604 
d°
->
dr›_io_u
[
k
] +
§c
->drop_io_u[k];

1606 
d°
->
tŸÆ_io_u
[0] +
§c
->tŸÆ_io_u[
k
];

1607 
d°
->
sh‹t_io_u
[0] +
§c
->sh‹t_io_u[
k
];

1608 
d°
->
dr›_io_u
[0] +
§c
->dr›_io_u[
k
];

1612 
d°
->
tŸÆ_io_u
[
DDIR_SYNC
] +
§c
->total_io_u[DDIR_SYNC];

1614 
k
 = 0; k < 
DDIR_RWDIR_CNT
; k++) {

1615 
m
;

1617 
m
 = 0; m < 
FIO_IO_U_PLAT_NR
; m++) {

1618 i‡(!
d°
->
unifõd_rw_ªp
)

1619 
d°
->
io_u_∂©
[
k
][
m
] +
§c
->io_u_plat[k][m];

1621 
d°
->
io_u_∂©
[0][
m
] +
§c
->io_u_∂©[
k
][m];

1625 
d°
->
tŸÆ_run_time
 +
§c
->total_run_time;

1626 
d°
->
tŸÆ_submô
 +
§c
->total_submit;

1627 
d°
->
tŸÆ_com∂ëe
 +
§c
->total_complete;

1628 
	}
}

1630 
	$öô_group_run_°©
(
group_run_°©s
 *
gs
)

1632 
i
;

1633 
	`mem£t
(
gs
, 0, (*gs));

1635 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

1636 
gs
->
mö_bw
[
i
] = gs->
mö_run
[i] = ~0UL;

1637 
	}
}

1639 
	$öô_thªad_°©
(
thªad_°©
 *
ts
)

1641 
j
;

1643 
	`mem£t
(
ts
, 0, (*ts));

1645 
j
 = 0; j < 
DDIR_RWDIR_CNT
; j++) {

1646 
ts
->
œt_°©
[
j
].
mö_vÆ
 = -1UL;

1647 
ts
->
˛©_°©
[
j
].
mö_vÆ
 = -1UL;

1648 
ts
->
¶©_°©
[
j
].
mö_vÆ
 = -1UL;

1649 
ts
->
bw_°©
[
j
].
mö_vÆ
 = -1UL;

1650 
ts
->
i›s_°©
[
j
].
mö_vÆ
 = -1UL;

1652 
ts
->
sync_°©
.
mö_vÆ
 = -1UL;

1653 
ts
->
groupid
 = -1;

1654 
	}
}

1656 
	$__show_run_°©s
()

1658 
group_run_°©s
 *
run°©s
, *
rs
;

1659 
thªad_d©a
 *
td
;

1660 
thªad_°©
 *
thªad°©s
, *
ts
;

1661 
i
, 
j
, 
k
, 
ƒ_ts
, 
œ°_ts
, 
idx
;

1662 
boﬁ
 
kb_ba£_w¨√d
 = 
Ál£
;

1663 
boﬁ
 
unô_ba£_w¨√d
 = 
Ál£
;

1664 
js⁄_obje˘
 *
roŸ
 = 
NULL
;

1665 
js⁄_¨øy
 *
¨øy
 = 
NULL
;

1666 
buf_ouçut
 
ouçut
[
FIO_OUTPUT_NR
];

1667 
Êi°_hód
 **
›t_li°s
;

1669 
run°©s
 = 
	`mÆloc
((
group_run_°©s
Ë* (
groupid
 + 1));

1671 
i
 = 0; i < 
groupid
 + 1; i++)

1672 
	`öô_group_run_°©
(&
run°©s
[
i
]);

1678 
ƒ_ts
 = 0;

1679 
œ°_ts
 = -1;

1680 
	`f‹_óch_td
(
td
, 
i
) {

1681 i‡(!
td
->
o
.
group_ªp‹tög
) {

1682 
ƒ_ts
++;

1685 i‡(
œ°_ts
 =
td
->
groupid
)

1687 i‡(!
td
->
o
.
°©s
)

1690 
œ°_ts
 = 
td
->
groupid
;

1691 
ƒ_ts
++;

1694 
thªad°©s
 = 
	`mÆloc
(
ƒ_ts
 * (
thªad_°©
));

1695 
›t_li°s
 = 
	`mÆloc
(
ƒ_ts
 * (
Êi°_hód
 *));

1697 
i
 = 0; i < 
ƒ_ts
; i++) {

1698 
	`öô_thªad_°©
(&
thªad°©s
[
i
]);

1699 
›t_li°s
[
i
] = 
NULL
;

1702 
j
 = 0;

1703 
œ°_ts
 = -1;

1704 
idx
 = 0;

1705 
	`f‹_óch_td
(
td
, 
i
) {

1706 i‡(!
td
->
o
.
°©s
)

1708 i‡(
idx
 && (!
td
->
o
.
group_ªp‹tög
 ||

1709 (
td
->
o
.
group_ªp‹tög
 && 
œ°_ts
 !td->
groupid
))) {

1710 
idx
 = 0;

1711 
j
++;

1714 
œ°_ts
 = 
td
->
groupid
;

1716 
ts
 = &
thªad°©s
[
j
];

1718 
ts
->
˛©_≥r˚¡ûes
 = 
td
->
o
.clat_percentiles;

1719 
ts
->
œt_≥r˚¡ûes
 = 
td
->
o
.lat_percentiles;

1720 
ts
->
≥r˚¡ûe_¥ecisi⁄
 = 
td
->
o
.percentile_precision;

1721 
	`mem˝y
(
ts
->
≥r˚¡ûe_li°
, 
td
->
o
.percentile_list, (td->o.percentile_list));

1722 
›t_li°s
[
j
] = &
td
->
›t_li°
;

1724 
idx
++;

1725 
ts
->
membîs
++;

1727 i‡(
ts
->
groupid
 == -1) {

1731 
	`°∫˝y
(
ts
->
«me
, 
td
->
o
.«me, 
FIO_JOBNAME_SIZE
 - 1);

1732 i‡(
td
->
o
.
des¸ùti⁄
)

1733 
	`°∫˝y
(
ts
->
des¸ùti⁄
, 
td
->
o
.description,

1734 
FIO_JOBDESC_SIZE
 - 1);

1736 
	`mem£t
(
ts
->
des¸ùti⁄
, 0, 
FIO_JOBDESC_SIZE
);

1742 
ts
->
thªad_numbî
 = 
td
->thread_number;

1743 
ts
->
groupid
 = 
td
->groupid;

1748 
ts
->
pid
 = 
td
->pid;

1750 
ts
->
kb_ba£
 = 
td
->
o
.kb_base;

1751 
ts
->
unô_ba£
 = 
td
->
o
.unit_base;

1752 
ts
->
sig_figs
 = 
td
->
o
.sig_figs;

1753 
ts
->
unifõd_rw_ªp
 = 
td
->
o
.unified_rw_rep;

1754 } i‡(
ts
->
kb_ba£
 !
td
->
o
.kb_ba£ && !
kb_ba£_w¨√d
) {

1755 
	`log_öfo
("fio: kb_base differs for jobs in group, using"

1756 " %uá†thêba£\n", 
ts
->
kb_ba£
);

1757 
kb_ba£_w¨√d
 = 
åue
;

1758 } i‡(
ts
->
unô_ba£
 !
td
->
o
.unô_ba£ && !
unô_ba£_w¨√d
) {

1759 
	`log_öfo
("fio: unit_base differs for jobs in group, using"

1760 " %uá†thêba£\n", 
ts
->
unô_ba£
);

1761 
unô_ba£_w¨√d
 = 
åue
;

1764 
ts
->
c⁄töue_⁄_îr‹
 = 
td
->
o
.continue_on_error;

1765 
ts
->
tŸÆ_îr_cou¡
 +
td
->total_err_count;

1766 
ts
->
fú°_îr‹
 = 
td
->first_error;

1767 i‡(!
ts
->
îr‹
) {

1768 i‡(!
td
->
îr‹
 &&Åd->
o
.
c⁄töue_⁄_îr‹
 &&

1769 
td
->
fú°_îr‹
) {

1770 
ts
->
îr‹
 = 
td
->
fú°_îr‹
;

1771 
ts
->
vîr‹
[(ts->verror) - 1] = '\0';

1772 
	`°∫˝y
(
ts
->
vîr‹
, 
td
->verror, (ts->verror) - 1);

1773 } i‡(
td
->
îr‹
) {

1774 
ts
->
îr‹
 = 
td
->error;

1775 
ts
->
vîr‹
[(ts->verror) - 1] = '\0';

1776 
	`°∫˝y
(
ts
->
vîr‹
, 
td
->verror, (ts->verror) - 1);

1780 
ts
->
œãncy_dïth
 = 
td
->
œãncy_qd
;

1781 
ts
->
œãncy_èrgë
 = 
td
->
o
.latency_target;

1782 
ts
->
œãncy_≥r˚¡ûe
 = 
td
->
o
.latency_percentile;

1783 
ts
->
œãncy_wödow
 = 
td
->
o
.latency_window;

1785 
ts
->
ƒ_block_öfos
 = 
td
->ts.nr_block_infos;

1786 
k
 = 0; k < 
ts
->
ƒ_block_öfos
; k++)

1787 
ts
->
block_öfos
[
k
] = 
td
->ts.block_infos[k];

1789 
	`sum_thªad_°©s
(
ts
, &
td
->ts, 
idx
 == 1);

1791 i‡(
td
->
o
.
ss_dur
) {

1792 
ts
->
ss_°©e
 = 
td
->
ss
.
°©e
;

1793 
ts
->
ss_dur
 = 
td
->
ss
.
dur
;

1794 
ts
->
ss_hód
 = 
td
->
ss
.
hód
;

1795 
ts
->
ss_bw_d©a
 = 
td
->
ss
.
bw_d©a
;

1796 
ts
->
ss_i›s_d©a
 = 
td
->
ss
.
i›s_d©a
;

1797 
ts
->
ss_limô
.
u
.
f
 = 
td
->
ss
.
limô
;

1798 
ts
->
ss_¶›e
.
u
.
f
 = 
td
->
ss
.
¶›e
;

1799 
ts
->
ss_devüti⁄
.
u
.
f
 = 
td
->
ss
.
devüti⁄
;

1800 
ts
->
ss_¸ôîi⁄
.
u
.
f
 = 
td
->
ss
.
¸ôîi⁄
;

1803 
ts
->
ss_dur
 =Ås->
ss_°©e
 = 0;

1806 
i
 = 0; i < 
ƒ_ts
; i++) {

1807 
bw
;

1809 
ts
 = &
thªad°©s
[
i
];

1810 i‡(
ts
->
groupid
 == -1)

1812 
rs
 = &
run°©s
[
ts
->
groupid
];

1813 
rs
->
kb_ba£
 = 
ts
->kb_base;

1814 
rs
->
unô_ba£
 = 
ts
->unit_base;

1815 
rs
->
sig_figs
 = 
ts
->sig_figs;

1816 
rs
->
unifõd_rw_ªp
 +
ts
->unified_rw_rep;

1818 
j
 = 0; j < 
DDIR_RWDIR_CNT
; j++) {

1819 i‡(!
ts
->
ru¡ime
[
j
])

1821 i‡(
ts
->
ru¡ime
[
j
] < 
rs
->
mö_run
[j] || !rs->min_run[j])

1822 
rs
->
mö_run
[
j
] = 
ts
->
ru¡ime
[j];

1823 i‡(
ts
->
ru¡ime
[
j
] > 
rs
->
max_run
[j])

1824 
rs
->
max_run
[
j
] = 
ts
->
ru¡ime
[j];

1826 
bw
 = 0;

1827 i‡(
ts
->
ru¡ime
[
j
])

1828 
bw
 = 
ts
->
io_byãs
[
j
] * 1000 /Ås->
ru¡ime
[j];

1829 i‡(
bw
 < 
rs
->
mö_bw
[
j
])

1830 
rs
->
mö_bw
[
j
] = 
bw
;

1831 i‡(
bw
 > 
rs
->
max_bw
[
j
])

1832 
rs
->
max_bw
[
j
] = 
bw
;

1834 
rs
->
iobyãs
[
j
] +
ts
->
io_byãs
[j];

1838 
i
 = 0; i < 
groupid
 + 1; i++) {

1839 
ddú
;

1841 
rs
 = &
run°©s
[
i
];

1843 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

1844 i‡(
rs
->
max_run
[
ddú
])

1845 
rs
->
agg
[
ddú
] = (rs->
iobyãs
[ddir] * 1000) /

1846 
rs
->
max_run
[
ddú
];

1850 
i
 = 0; i < 
FIO_OUTPUT_NR
; i++)

1851 
	`buf_ouçut_öô
(&
ouçut
[
i
]);

1856 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

1857 
	`log_buf
(&
ouçut
[
__FIO_OUTPUT_NORMAL
], "\n");

1858 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
) {

1859 
thªad_d©a
 *
globÆ
;

1860 
time_buf
[32];

1861 
timevÆ
 
now
;

1862 
ms_sö˚_ïoch
;

1864 
	`gëtimeofday
(&
now
, 
NULL
);

1865 
ms_sö˚_ïoch
 = ()(
now
.
tv_£c
) * 1000 +

1866 ()(
now
.
tv_u£c
) / 1000;

1868 
	`os_˘ime_r
((c⁄° 
time_t
 *Ë&
now
.
tv_£c
, 
time_buf
,

1869 (
time_buf
));

1870 i‡(
time_buf
[
	`°æí
(time_buf) - 1] == '\n')

1871 
time_buf
[
	`°æí
(time_buf) - 1] = '\0';

1873 
roŸ
 = 
	`js⁄_¸óã_obje˘
();

1874 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "fiÿvîsi⁄", 
fio_vîsi⁄_°rög
);

1875 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "time°amp", 
now
.
tv_£c
);

1876 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "time°amp_ms", 
ms_sö˚_ïoch
);

1877 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "time", 
time_buf
);

1878 
globÆ
 = 
	`gë_globÆ_›ti⁄s
();

1879 
	`js⁄_add_job_›ts
(
roŸ
, "globÆ o±i⁄s", &
globÆ
->
›t_li°
);

1880 
¨øy
 = 
	`js⁄_¸óã_¨øy
();

1881 
	`js⁄_obje˘_add_vÆue_¨øy
(
roŸ
, "jobs", 
¨øy
);

1884 i‡(
is_backíd
)

1885 
	`fio_£rvî_£nd_job_›ti⁄s
(&
	`gë_globÆ_›ti⁄s
()->
›t_li°
, -1U);

1887 
i
 = 0; i < 
ƒ_ts
; i++) {

1888 
ts
 = &
thªad°©s
[
i
];

1889 
rs
 = &
run°©s
[
ts
->
groupid
];

1891 i‡(
is_backíd
) {

1892 
	`fio_£rvî_£nd_job_›ti⁄s
(
›t_li°s
[
i
], i);

1893 
	`fio_£rvî_£nd_ts
(
ts
, 
rs
);

1895 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_TERSE
)

1896 
	`show_thªad_°©us_ãr£
(
ts
, 
rs
, &
ouçut
[
__FIO_OUTPUT_TERSE
]);

1897 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
) {

1898 
js⁄_obje˘
 *
tmp
 = 
	`show_thªad_°©us_js⁄
(
ts
, 
rs
, 
›t_li°s
[
i
]);

1899 
	`js⁄_¨øy_add_vÆue_obje˘
(
¨øy
, 
tmp
);

1901 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

1902 
	`show_thªad_°©us_n‹mÆ
(
ts
, 
rs
, &
ouçut
[
__FIO_OUTPUT_NORMAL
]);

1905 i‡(!
is_backíd
 && (
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
)) {

1907 
	`show_disk_utû
(1, 
roŸ
, &
ouçut
[
__FIO_OUTPUT_JSON
]);

1909 
	`show_idÀ_¥of_°©s
(
FIO_OUTPUT_JSON
, 
roŸ
, &
ouçut
[
__FIO_OUTPUT_JSON
]);

1911 
	`js⁄_¥öt_obje˘
(
roŸ
, &
ouçut
[
__FIO_OUTPUT_JSON
]);

1912 
	`log_buf
(&
ouçut
[
__FIO_OUTPUT_JSON
], "\n");

1913 
	`js⁄_‰ì_obje˘
(
roŸ
);

1916 
i
 = 0; i < 
groupid
 + 1; i++) {

1917 
rs
 = &
run°©s
[
i
];

1919 
rs
->
groupid
 = 
i
;

1920 i‡(
is_backíd
)

1921 
	`fio_£rvî_£nd_gs
(
rs
);

1922 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

1923 
	`show_group_°©s
(
rs
, &
ouçut
[
__FIO_OUTPUT_NORMAL
]);

1926 i‡(
is_backíd
)

1927 
	`fio_£rvî_£nd_du
();

1928 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

1929 
	`show_disk_utû
(0, 
NULL
, &
ouçut
[
__FIO_OUTPUT_NORMAL
]);

1930 
	`show_idÀ_¥of_°©s
(
FIO_OUTPUT_NORMAL
, 
NULL
, &
ouçut
[
__FIO_OUTPUT_NORMAL
]);

1933 
i
 = 0; i < 
FIO_OUTPUT_NR
; i++) {

1934 
buf_ouçut
 *
out
 = &
ouçut
[
i
];

1936 
	`log_öfo_buf
(
out
->
buf
, out->
buÊí
);

1937 
	`buf_ouçut_‰ì
(
out
);

1940 
	`log_öfo_Êush
();

1941 
	`‰ì
(
run°©s
);

1942 
	`‰ì
(
thªad°©s
);

1943 
	`‰ì
(
›t_li°s
);

1944 
	}
}

1946 
	$show_run_°©s
()

1948 
	`fio_muãx_down
(
°©_muãx
);

1949 
	`__show_run_°©s
();

1950 
	`fio_muãx_up
(
°©_muãx
);

1951 
	}
}

1953 
	$__show_ru¬ög_run_°©s
()

1955 
thªad_d©a
 *
td
;

1956 *
π
;

1957 
time•ec
 
ts
;

1958 
i
;

1960 
	`fio_muãx_down
(
°©_muãx
);

1962 
π
 = 
	`mÆloc
(
thªad_numbî
 * ());

1963 
	`fio_gëtime
(&
ts
, 
NULL
);

1965 
	`f‹_óch_td
(
td
, 
i
) {

1966 
td
->
upd©e_rußge
 = 1;

1967 
td
->
ts
.
io_byãs
[
DDIR_READ
] =Åd->io_bytes[DDIR_READ];

1968 
td
->
ts
.
io_byãs
[
DDIR_WRITE
] =Åd->io_bytes[DDIR_WRITE];

1969 
td
->
ts
.
io_byãs
[
DDIR_TRIM
] =Åd->io_bytes[DDIR_TRIM];

1970 
td
->
ts
.
tŸÆ_run_time
 = 
	`mtime_sö˚
(&td->
ïoch
, &ts);

1972 
π
[
i
] = 
	`mtime_sö˚
(&
td
->
°¨t
, &
ts
);

1973 i‡(
	`td_ªad
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_READ
])

1974 
td
->
ts
.
ru¡ime
[
DDIR_READ
] +
π
[
i
];

1975 i‡(
	`td_wrôe
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_WRITE
])

1976 
td
->
ts
.
ru¡ime
[
DDIR_WRITE
] +
π
[
i
];

1977 i‡(
	`td_åim
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_TRIM
])

1978 
td
->
ts
.
ru¡ime
[
DDIR_TRIM
] +
π
[
i
];

1981 
	`f‹_óch_td
(
td
, 
i
) {

1982 i‡(
td
->
run°©e
 >
TD_EXITED
)

1984 i‡(
td
->
rußge_£m
) {

1985 
td
->
upd©e_rußge
 = 1;

1986 
	`fio_muãx_down
(
td
->
rußge_£m
);

1988 
td
->
upd©e_rußge
 = 0;

1991 
	`__show_run_°©s
();

1993 
	`f‹_óch_td
(
td
, 
i
) {

1994 i‡(
	`td_ªad
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_READ
])

1995 
td
->
ts
.
ru¡ime
[
DDIR_READ
] -
π
[
i
];

1996 i‡(
	`td_wrôe
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_WRITE
])

1997 
td
->
ts
.
ru¡ime
[
DDIR_WRITE
] -
π
[
i
];

1998 i‡(
	`td_åim
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_TRIM
])

1999 
td
->
ts
.
ru¡ime
[
DDIR_TRIM
] -
π
[
i
];

2002 
	`‰ì
(
π
);

2003 
	`fio_muãx_up
(
°©_muãx
);

2004 
	}
}

2006 
boﬁ
 
	g°©us_öãrvÆ_öô
;

2007 
time•ec
 
	g°©us_time
;

2008 
boﬁ
 
	g°©us_fûe_dißbÀd
;

2010 
	#FIO_STATUS_FILE
 "fio-dump-°©us"

	)

2012 
	$check_°©us_fûe
()

2014 
°©
 
sb
;

2015 c⁄° *
ãmp_dú
;

2016 
fio_°©us_fûe_∑th
[
PATH_MAX
];

2018 i‡(
°©us_fûe_dißbÀd
)

2021 
ãmp_dú
 = 
	`gëív
("TMPDIR");

2022 i‡(
ãmp_dú
 =
NULL
) {

2023 
ãmp_dú
 = 
	`gëív
("TEMP");

2024 i‡(
ãmp_dú
 && 
	`°æí
—emp_dúË>
PATH_MAX
)

2025 
ãmp_dú
 = 
NULL
;

2027 i‡(
ãmp_dú
 =
NULL
)

2028 
ãmp_dú
 = "/tmp";

2030 
	`¢¥ötf
(
fio_°©us_fûe_∑th
, (fio_°©us_fûe_∑th), "%s/%s", 
ãmp_dú
, 
FIO_STATUS_FILE
);

2032 i‡(
	`°©
(
fio_°©us_fûe_∑th
, &
sb
))

2035 i‡(
	`u∆ök
(
fio_°©us_fûe_∑th
) < 0) {

2036 
	`log_îr
("fio: faûedÅÿu∆ök %s: %s\n", 
fio_°©us_fûe_∑th
,

2037 
	`°ªº‹
(
î∫o
));

2038 
	`log_îr
("fio: disabling status file updates\n");

2039 
°©us_fûe_dißbÀd
 = 
åue
;

2043 
	}
}

2045 
	$check_f‹_ru¬ög_°©s
()

2047 i‡(
°©us_öãrvÆ
) {

2048 i‡(!
°©us_öãrvÆ_öô
) {

2049 
	`fio_gëtime
(&
°©us_time
, 
NULL
);

2050 
°©us_öãrvÆ_öô
 = 
åue
;

2051 } i‡(
	`mtime_sö˚_now
(&
°©us_time
Ë>
°©us_öãrvÆ
) {

2052 
	`show_ru¬ög_run_°©s
();

2053 
	`fio_gëtime
(&
°©us_time
, 
NULL
);

2057 i‡(
	`check_°©us_fûe
()) {

2058 
	`show_ru¬ög_run_°©s
();

2061 
	}
}

2063 
ölöe
 
	$add_°©_ßm∂e
(
io_°©
 *
is
, 
d©a
)

2065 
vÆ
 = 
d©a
;

2066 
dñè
;

2068 i‡(
d©a
 > 
is
->
max_vÆ
)

2069 
is
->
max_vÆ
 = 
d©a
;

2070 i‡(
d©a
 < 
is
->
mö_vÆ
)

2071 
is
->
mö_vÆ
 = 
d©a
;

2073 
dñè
 = 
vÆ
 - 
is
->
món
.
u
.
f
;

2074 i‡(
dñè
) {

2075 
is
->
món
.
u
.
f
 +
dñè
 / (is->
ßm∂es
 + 1.0);

2076 
is
->
S
.
u
.
f
 +
dñè
 * (
vÆ
 - is->
món
.u.f);

2079 
is
->
ßm∂es
++;

2080 
	}
}

2086 
io_logs
 *
	$gë_√w_log
(
io_log
 *
iﬁog
)

2088 
size_t
 
√w_size
, 
√w_ßm∂es
;

2089 
io_logs
 *
cur_log
;

2095 i‡(!
iﬁog
->
cur_log_max
)

2096 
√w_ßm∂es
 = 
DEF_LOG_ENTRIES
;

2098 
√w_ßm∂es
 = 
iﬁog
->
cur_log_max
 * 2;

2099 i‡(
√w_ßm∂es
 > 
MAX_LOG_ENTRIES
)

2100 
√w_ßm∂es
 = 
MAX_LOG_ENTRIES
;

2103 
√w_size
 = 
√w_ßm∂es
 * 
	`log_íåy_sz
(
iﬁog
);

2105 
cur_log
 = 
	`smÆloc
((*cur_log));

2106 i‡(
cur_log
) {

2107 
	`INIT_FLIST_HEAD
(&
cur_log
->
li°
);

2108 
cur_log
->
log
 = 
	`mÆloc
(
√w_size
);

2109 i‡(
cur_log
->
log
) {

2110 
cur_log
->
ƒ_ßm∂es
 = 0;

2111 
cur_log
->
max_ßm∂es
 = 
√w_ßm∂es
;

2112 
	`Êi°_add_èû
(&
cur_log
->
li°
, &
iﬁog
->
io_logs
);

2113 
iﬁog
->
cur_log_max
 = 
√w_ßm∂es
;

2114  
cur_log
;

2116 
	`s‰ì
(
cur_log
);

2119  
NULL
;

2120 
	}
}

2125 
io_logs
 *
	$ªgrow_log
(
io_log
 *
iﬁog
)

2127 
io_logs
 *
cur_log
;

2128 
i
;

2130 i‡(!
iﬁog
 || iﬁog->
dißbÀd
)

2131 
dißbÀ
;

2133 
cur_log
 = 
	`iﬁog_cur_log
(
iﬁog
);

2134 i‡(!
cur_log
) {

2135 
cur_log
 = 
	`gë_√w_log
(
iﬁog
);

2136 i‡(!
cur_log
)

2137  
NULL
;

2140 i‡(
cur_log
->
ƒ_ßm∂es
 < cur_log->
max_ßm∂es
)

2141  
cur_log
;

2147 i‡(
iﬁog
->
log_gz
) {

2148 i‡(
	`iﬁog_cur_Êush
(
iﬁog
, 
cur_log
)) {

2149 
	`log_îr
("fio: failed flushing iolog! Will stopÜogging.\n");

2150  
NULL
;

2157 
cur_log
 = 
	`gë_√w_log
(
iﬁog
);

2158 i‡(!
cur_log
) {

2159 
	`log_îr
("fio: failedÉxtending iolog! Will stopÜogging.\n");

2160  
NULL
;

2163 i‡(!
iﬁog
->
≥ndög
 || !iﬁog->≥ndög->
ƒ_ßm∂es
)

2164  
cur_log
;

2169 
i
 = 0; i < 
iﬁog
->
≥ndög
->
ƒ_ßm∂es
; i++) {

2170 
io_ßm∂e
 *
§c
, *
d°
;

2172 
§c
 = 
	`gë_ßm∂e
(
iﬁog
, iﬁog->
≥ndög
, 
i
);

2173 
d°
 = 
	`gë_ßm∂e
(
iﬁog
, 
cur_log
, 
i
);

2174 
	`mem˝y
(
d°
, 
§c
, 
	`log_íåy_sz
(
iﬁog
));

2176 
cur_log
->
ƒ_ßm∂es
 = 
iﬁog
->
≥ndög
->nr_samples;

2178 
iﬁog
->
≥ndög
->
ƒ_ßm∂es
 = 0;

2179  
cur_log
;

2180 
dißbÀ
:

2181 i‡(
iﬁog
)

2182 
iﬁog
->
dißbÀd
 = 
åue
;

2183  
NULL
;

2184 
	}
}

2186 
	$ªgrow_logs
(
thªad_d©a
 *
td
)

2188 
	`ªgrow_log
(
td
->
¶©_log
);

2189 
	`ªgrow_log
(
td
->
˛©_log
);

2190 
	`ªgrow_log
(
td
->
˛©_hi°_log
);

2191 
	`ªgrow_log
(
td
->
œt_log
);

2192 
	`ªgrow_log
(
td
->
bw_log
);

2193 
	`ªgrow_log
(
td
->
i›s_log
);

2194 
td
->
Êags
 &~
TD_F_REGROW_LOGS
;

2195 
	}
}

2197 
io_logs
 *
	$gë_cur_log
(
io_log
 *
iﬁog
)

2199 
io_logs
 *
cur_log
;

2201 
cur_log
 = 
	`iﬁog_cur_log
(
iﬁog
);

2202 i‡(!
cur_log
) {

2203 
cur_log
 = 
	`gë_√w_log
(
iﬁog
);

2204 i‡(!
cur_log
)

2205  
NULL
;

2208 i‡(
cur_log
->
ƒ_ßm∂es
 < cur_log->
max_ßm∂es
)

2209  
cur_log
;

2218 i‡(
iﬁog
->
td
->
o
.
io_submô_mode
 =
IO_MODE_OFFLOAD
 ||

2219 !
	`≥r_unô_log
(
iﬁog
))

2220  
	`ªgrow_log
(
iﬁog
);

2222 
iﬁog
->
td
->
Êags
 |
TD_F_REGROW_LOGS
;

2223 
	`as£π
(
iﬁog
->
≥ndög
->
ƒ_ßm∂es
 < iﬁog->≥ndög->
max_ßm∂es
);

2224  
iﬁog
->
≥ndög
;

2225 
	}
}

2227 
	$__add_log_ßm∂e
(
io_log
 *
iﬁog
, 
io_ßm∂e_d©a
 
d©a
,

2228 
fio_ddú
 
ddú
, 
bs
,

2229 
t
, 
uöt64_t
 
off£t
)

2231 
io_logs
 *
cur_log
;

2233 i‡(
iﬁog
->
dißbÀd
)

2235 i‡(
	`Êi°_em±y
(&
iﬁog
->
io_logs
))

2236 
iﬁog
->
avg_œ°
[
ddú
] = 
t
;

2238 
cur_log
 = 
	`gë_cur_log
(
iﬁog
);

2239 i‡(
cur_log
) {

2240 
io_ßm∂e
 *
s
;

2242 
s
 = 
	`gë_ßm∂e
(
iﬁog
, 
cur_log
, cur_log->
ƒ_ßm∂es
);

2244 
s
->
d©a
 = data;

2245 
s
->
time
 = 
t
 + (
iﬁog
->
td
 ? iﬁog->td->
unix_ïoch
 : 0);

2246 
	`io_ßm∂e_£t_ddú
(
iﬁog
, 
s
, 
ddú
);

2247 
s
->
bs
 = bs;

2249 i‡(
iﬁog
->
log_off£t
) {

2250 
io_ßm∂e_off£t
 *
so
 = (*Ë
s
;

2252 
so
->
off£t
 = offset;

2255 
cur_log
->
ƒ_ßm∂es
++;

2259 
iﬁog
->
dißbÀd
 = 
åue
;

2260 
	}
}

2262 
ölöe
 
	$ª£t_io_°©
(
io_°©
 *
ios
)

2264 
ios
->
max_vÆ
 = ios->
mö_vÆ
 = ios->
ßm∂es
 = 0;

2265 
ios
->
món
.
u
.
f
 = ios->
S
.u.f = 0;

2266 
	}
}

2268 
	$ª£t_io_°©s
(
thªad_d©a
 *
td
)

2270 
thªad_°©
 *
ts
 = &
td
->ts;

2271 
i
, 
j
;

2273 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

2274 
	`ª£t_io_°©
(&
ts
->
˛©_°©
[
i
]);

2275 
	`ª£t_io_°©
(&
ts
->
¶©_°©
[
i
]);

2276 
	`ª£t_io_°©
(&
ts
->
œt_°©
[
i
]);

2277 
	`ª£t_io_°©
(&
ts
->
bw_°©
[
i
]);

2278 
	`ª£t_io_°©
(&
ts
->
i›s_°©
[
i
]);

2280 
ts
->
io_byãs
[
i
] = 0;

2281 
ts
->
ru¡ime
[
i
] = 0;

2282 
ts
->
tŸÆ_io_u
[
i
] = 0;

2283 
ts
->
sh‹t_io_u
[
i
] = 0;

2284 
ts
->
dr›_io_u
[
i
] = 0;

2286 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++) {

2287 
ts
->
io_u_∂©
[
i
][
j
] = 0;

2288 i‡(!
i
)

2289 
ts
->
io_u_sync_∂©
[
j
] = 0;

2293 
ts
->
tŸÆ_io_u
[
DDIR_SYNC
] = 0;

2295 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

2296 
ts
->
io_u_m≠
[
i
] = 0;

2297 
ts
->
io_u_submô
[
i
] = 0;

2298 
ts
->
io_u_com∂ëe
[
i
] = 0;

2301 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++)

2302 
ts
->
io_u_œt_n
[
i
] = 0;

2303 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

2304 
ts
->
io_u_œt_u
[
i
] = 0;

2305 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

2306 
ts
->
io_u_œt_m
[
i
] = 0;

2308 
ts
->
tŸÆ_submô
 = 0;

2309 
ts
->
tŸÆ_com∂ëe
 = 0;

2310 
	}
}

2312 
	$__add_°©_to_log
(
io_log
 *
iﬁog
, 
fio_ddú
 
ddú
,

2313 
ñ≠£d
, 
boﬁ
 
log_max
)

2320 i‡(
iﬁog
->
avg_wödow
[
ddú
].
ßm∂es
) {

2321 
io_ßm∂e_d©a
 
d©a
;

2323 i‡(
log_max
)

2324 
d©a
.
vÆ
 = 
iﬁog
->
avg_wödow
[
ddú
].
max_vÆ
;

2326 
d©a
.
vÆ
 = 
iﬁog
->
avg_wödow
[
ddú
].
món
.
u
.
f
 + 0.50;

2328 
	`__add_log_ßm∂e
(
iﬁog
, 
d©a
, 
ddú
, 0, 
ñ≠£d
, 0);

2331 
	`ª£t_io_°©
(&
iﬁog
->
avg_wödow
[
ddú
]);

2332 
	}
}

2334 
	$_add_°©_to_log
(
io_log
 *
iﬁog
, 
ñ≠£d
,

2335 
boﬁ
 
log_max
)

2337 
ddú
;

2339 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++)

2340 
	`__add_°©_to_log
(
iﬁog
, 
ddú
, 
ñ≠£d
, 
log_max
);

2341 
	}
}

2343 
	$add_log_ßm∂e
(
thªad_d©a
 *
td
,

2344 
io_log
 *
iﬁog
,

2345 
io_ßm∂e_d©a
 
d©a
,

2346 
fio_ddú
 
ddú
, 
bs
,

2347 
uöt64_t
 
off£t
)

2349 
ñ≠£d
, 
this_wödow
;

2351 i‡(!
	`ddú_rw
(
ddú
))

2354 
ñ≠£d
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

2359 i‡(!
iﬁog
->
avg_m£c
) {

2360 
	`__add_log_ßm∂e
(
iﬁog
, 
d©a
, 
ddú
, 
bs
, 
ñ≠£d
, 
off£t
);

2368 
	`add_°©_ßm∂e
(&
iﬁog
->
avg_wödow
[
ddú
], 
d©a
.
vÆ
);

2374 
this_wödow
 = 
ñ≠£d
 - 
iﬁog
->
avg_œ°
[
ddú
];

2375 i‡(
ñ≠£d
 < 
iﬁog
->
avg_œ°
[
ddú
])

2376  
iﬁog
->
avg_œ°
[
ddú
] - 
ñ≠£d
;

2377 i‡(
this_wödow
 < 
iﬁog
->
avg_m£c
) {

2378 
diff
 = 
iﬁog
->
avg_m£c
 - 
this_wödow
;

2380 i‡(
	`ölöe_log
(
iﬁog
Ë|| 
diff
 > 
LOG_MSEC_SLACK
)

2381  
diff
;

2384 
	`__add_°©_to_log
(
iﬁog
, 
ddú
, 
ñ≠£d
, 
td
->
o
.
log_max
 != 0);

2386 
iﬁog
->
avg_œ°
[
ddú
] = 
ñ≠£d
 - (
this_wödow
 - iﬁog->
avg_m£c
);

2387  
iﬁog
->
avg_m£c
;

2388 
	}
}

2390 
	$föÆize_logs
(
thªad_d©a
 *
td
, 
boﬁ
 
unô_logs
)

2392 
ñ≠£d
;

2394 
ñ≠£d
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

2396 i‡(
td
->
˛©_log
 && 
unô_logs
)

2397 
	`_add_°©_to_log
(
td
->
˛©_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

2398 i‡(
td
->
¶©_log
 && 
unô_logs
)

2399 
	`_add_°©_to_log
(
td
->
¶©_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

2400 i‡(
td
->
œt_log
 && 
unô_logs
)

2401 
	`_add_°©_to_log
(
td
->
œt_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

2402 i‡(
td
->
bw_log
 && (
unô_logs
 =
	`≥r_unô_log
(td->bw_log)))

2403 
	`_add_°©_to_log
(
td
->
bw_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

2404 i‡(
td
->
i›s_log
 && (
unô_logs
 =
	`≥r_unô_log
(td->iops_log)))

2405 
	`_add_°©_to_log
(
td
->
i›s_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

2406 
	}
}

2408 
	$add_agg_ßm∂e
(
io_ßm∂e_d©a
 
d©a
, 
fio_ddú
 
ddú
, 
bs
)

2410 
io_log
 *
iﬁog
;

2412 i‡(!
	`ddú_rw
(
ddú
))

2415 
iﬁog
 = 
agg_io_log
[
ddú
];

2416 
	`__add_log_ßm∂e
(
iﬁog
, 
d©a
, 
ddú
, 
bs
, 
	`mtime_sö˚_gíesis
(), 0);

2417 
	}
}

2419 
	$add_sync_˛©_ßm∂e
(
thªad_°©
 *
ts
, 
n£c
)

2421 
idx
 = 
	`∂©_vÆ_to_idx
(
n£c
);

2422 
	`as£π
(
idx
 < 
FIO_IO_U_PLAT_NR
);

2424 
ts
->
io_u_sync_∂©
[
idx
]++;

2425 
	`add_°©_ßm∂e
(&
ts
->
sync_°©
, 
n£c
);

2426 
	}
}

2428 
	$add_˛©_≥r˚¡ûe_ßm∂e
(
thªad_°©
 *
ts
,

2429 
n£c
, 
fio_ddú
 
ddú
)

2431 
idx
 = 
	`∂©_vÆ_to_idx
(
n£c
);

2432 
	`as£π
(
idx
 < 
FIO_IO_U_PLAT_NR
);

2434 
ts
->
io_u_∂©
[
ddú
][
idx
]++;

2435 
	}
}

2437 
	$add_˛©_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

2438 
n£c
, 
bs
, 
uöt64_t
 
off£t
)

2440 
ñ≠£d
, 
this_wödow
;

2441 
thªad_°©
 *
ts
 = &
td
->ts;

2442 
io_log
 *
iﬁog
 = 
td
->
˛©_hi°_log
;

2444 
	`td_io_u_lock
(
td
);

2446 
	`add_°©_ßm∂e
(&
ts
->
˛©_°©
[
ddú
], 
n£c
);

2448 i‡(
td
->
˛©_log
)

2449 
	`add_log_ßm∂e
(
td
,Åd->
˛©_log
, 
	`ßm∂e_vÆ
(
n£c
), 
ddú
, 
bs
,

2450 
off£t
);

2452 i‡(
ts
->
˛©_≥r˚¡ûes
)

2453 
	`add_˛©_≥r˚¡ûe_ßm∂e
(
ts
, 
n£c
, 
ddú
);

2455 i‡(
iﬁog
 && iﬁog->
hi°_m£c
) {

2456 
io_hi°
 *
hw
 = &
iﬁog
->
hi°_wödow
[
ddú
];

2458 
hw
->
ßm∂es
++;

2459 
ñ≠£d
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

2460 i‡(!
hw
->
hi°_œ°
)

2461 
hw
->
hi°_œ°
 = 
ñ≠£d
;

2462 
this_wödow
 = 
ñ≠£d
 - 
hw
->
hi°_œ°
;

2464 i‡(
this_wödow
 >
iﬁog
->
hi°_m£c
) {

2465 
uöt64_t
 *
io_u_∂©
;

2466 
io_u_∂©_íåy
 *
d°
;

2475 
io_u_∂©
 = (
uöt64_t
 *Ë
td
->
ts
.io_u_∂©[
ddú
];

2476 
d°
 = 
	`mÆloc
((
io_u_∂©_íåy
));

2477 
	`mem˝y
(&(
d°
->
io_u_∂©
), io_u_plat,

2478 
FIO_IO_U_PLAT_NR
 * ());

2479 
	`Êi°_add
(&
d°
->
li°
, &
hw
->list);

2480 
	`__add_log_ßm∂e
(
iﬁog
, 
	`ßm∂e_∂©
(
d°
), 
ddú
, 
bs
,

2481 
ñ≠£d
, 
off£t
);

2488 
hw
->
hi°_œ°
 = 
ñ≠£d
 - (
this_wödow
 - 
iﬁog
->
hi°_m£c
);

2489 
hw
->
ßm∂es
 = 0;

2493 
	`td_io_u_u∆ock
(
td
);

2494 
	}
}

2496 
	$add_¶©_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

2497 
u£c
, 
bs
, 
uöt64_t
 
off£t
)

2499 
thªad_°©
 *
ts
 = &
td
->ts;

2501 i‡(!
	`ddú_rw
(
ddú
))

2504 
	`td_io_u_lock
(
td
);

2506 
	`add_°©_ßm∂e
(&
ts
->
¶©_°©
[
ddú
], 
u£c
);

2508 i‡(
td
->
¶©_log
)

2509 
	`add_log_ßm∂e
(
td
,Åd->
¶©_log
, 
	`ßm∂e_vÆ
(
u£c
), 
ddú
, 
bs
, 
off£t
);

2511 
	`td_io_u_u∆ock
(
td
);

2512 
	}
}

2514 
	$add_œt_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

2515 
n£c
, 
bs
, 
uöt64_t
 
off£t
)

2517 
thªad_°©
 *
ts
 = &
td
->ts;

2519 i‡(!
	`ddú_rw
(
ddú
))

2522 
	`td_io_u_lock
(
td
);

2524 
	`add_°©_ßm∂e
(&
ts
->
œt_°©
[
ddú
], 
n£c
);

2526 i‡(
td
->
œt_log
)

2527 
	`add_log_ßm∂e
(
td
,Åd->
œt_log
, 
	`ßm∂e_vÆ
(
n£c
), 
ddú
, 
bs
,

2528 
off£t
);

2530 i‡(
ts
->
œt_≥r˚¡ûes
)

2531 
	`add_˛©_≥r˚¡ûe_ßm∂e
(
ts
, 
n£c
, 
ddú
);

2533 
	`td_io_u_u∆ock
(
td
);

2534 
	}
}

2536 
	$add_bw_ßm∂e
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

2537 
byãs
, 
•ít
)

2539 
thªad_°©
 *
ts
 = &
td
->ts;

2540 
øã
;

2542 i‡(
•ít
)

2543 
øã
 = (Ë(
byãs
 * 1000000ULL / 
•ít
);

2545 
øã
 = 0;

2547 
	`td_io_u_lock
(
td
);

2549 
	`add_°©_ßm∂e
(&
ts
->
bw_°©
[
io_u
->
ddú
], 
øã
);

2551 i‡(
td
->
bw_log
)

2552 
	`add_log_ßm∂e
(
td
,Åd->
bw_log
, 
	`ßm∂e_vÆ
(
øã
), 
io_u
->
ddú
,

2553 
byãs
, 
io_u
->
off£t
);

2555 
td
->
°©_io_byãs
[
io_u
->
ddú
] =Åd->
this_io_byãs
[io_u->ddir];

2556 
	`td_io_u_u∆ock
(
td
);

2557 
	}
}

2559 
	$__add_ßm∂es
(
thªad_d©a
 *
td
, 
time•ec
 *
∑ª¡_tv
,

2560 
time•ec
 *
t
, 
avg_time
,

2561 
uöt64_t
 *
this_io_byãs
, uöt64_à*
°©_io_byãs
,

2562 
io_°©
 *
°©
, 
io_log
 *
log
,

2563 
boﬁ
 
is_kb
)

2565 
•ít
, 
øã
;

2566 
fio_ddú
 
ddú
;

2567 
√xt
, 
√xt_log
;

2569 
√xt_log
 = 
avg_time
;

2571 
•ít
 = 
	`mtime_sö˚
(
∑ª¡_tv
, 
t
);

2572 i‡(
•ít
 < 
avg_time
 &&ávg_timê- s≥¡ >
LOG_MSEC_SLACK
)

2573  
avg_time
 - 
•ít
;

2575 
	`td_io_u_lock
(
td
);

2580 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

2581 
uöt64_t
 
dñè
;

2583 
dñè
 = 
this_io_byãs
[
ddú
] - 
°©_io_byãs
[ddir];

2584 i‡(!
dñè
)

2587 i‡(
•ít
) {

2588 i‡(
is_kb
)

2589 
øã
 = 
dñè
 * 1000 / 
•ít
 / 1024;

2591 
øã
 = (
dñè
 * 1000Ë/ 
•ít
;

2593 
øã
 = 0;

2595 
	`add_°©_ßm∂e
(&
°©
[
ddú
], 
øã
);

2597 i‡(
log
) {

2598 
bs
 = 0;

2600 i‡(
td
->
o
.
mö_bs
[
ddú
] =td->o.
max_bs
[ddir])

2601 
bs
 = 
td
->
o
.
mö_bs
[
ddú
];

2603 
√xt
 = 
	`add_log_ßm∂e
(
td
, 
log
, 
	`ßm∂e_vÆ
(
øã
), 
ddú
, 
bs
, 0);

2604 
√xt_log
 = 
	`mö
“ext_log, 
√xt
);

2607 
°©_io_byãs
[
ddú
] = 
this_io_byãs
[ddir];

2610 
	`time•ec_add_m£c
(
∑ª¡_tv
, 
avg_time
);

2612 
	`td_io_u_u∆ock
(
td
);

2614 i‡(
•ít
 <
avg_time
)

2615 
√xt
 = 
avg_time
;

2617 
√xt
 = 
avg_time
 - (1 + 
•ít
 -ávg_time);

2619  
	`mö
(
√xt
, 
√xt_log
);

2620 
	}
}

2622 
	$add_bw_ßm∂es
(
thªad_d©a
 *
td
, 
time•ec
 *
t
)

2624  
	`__add_ßm∂es
(
td
, &td->
bw_ßm∂e_time
, 
t
,Åd->
o
.
bw_avg_time
,

2625 
td
->
this_io_byãs
,Åd->
°©_io_byãs
,

2626 
td
->
ts
.
bw_°©
,Åd->
bw_log
, 
åue
);

2627 
	}
}

2629 
	$add_i›s_ßm∂e
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

2630 
byãs
)

2632 
thªad_°©
 *
ts
 = &
td
->ts;

2634 
	`td_io_u_lock
(
td
);

2636 
	`add_°©_ßm∂e
(&
ts
->
i›s_°©
[
io_u
->
ddú
], 1);

2638 i‡(
td
->
i›s_log
)

2639 
	`add_log_ßm∂e
(
td
,Åd->
i›s_log
, 
	`ßm∂e_vÆ
(1), 
io_u
->
ddú
,

2640 
byãs
, 
io_u
->
off£t
);

2642 
td
->
°©_io_blocks
[
io_u
->
ddú
] =Åd->
this_io_blocks
[io_u->ddir];

2643 
	`td_io_u_u∆ock
(
td
);

2644 
	}
}

2646 
	$add_i›s_ßm∂es
(
thªad_d©a
 *
td
, 
time•ec
 *
t
)

2648  
	`__add_ßm∂es
(
td
, &td->
i›s_ßm∂e_time
, 
t
,Åd->
o
.
i›s_avg_time
,

2649 
td
->
this_io_blocks
,Åd->
°©_io_blocks
,

2650 
td
->
ts
.
i›s_°©
,Åd->
i›s_log
, 
Ál£
);

2651 
	}
}

2656 
	$ˇlc_log_ßm∂es
()

2658 
thªad_d©a
 *
td
;

2659 
√xt
 = ~0U, 
tmp
;

2660 
time•ec
 
now
;

2661 
i
;

2663 
	`fio_gëtime
(&
now
, 
NULL
);

2665 
	`f‹_óch_td
(
td
, 
i
) {

2666 i‡(!
td
->
o
.
°©s
)

2668 i‡(
	`ö_ømp_time
(
td
) ||

2669 !(
td
->
run°©e
 =
TD_RUNNING
 ||Åd->run°©ê=
TD_VERIFYING
)) {

2670 
√xt
 = 
	`mö
(
td
->
o
.
i›s_avg_time
,Åd->o.
bw_avg_time
);

2673 i‡(!
td
->
bw_log
 ||

2674 (
td
->
bw_log
 && !
	`≥r_unô_log
(td->bw_log))) {

2675 
tmp
 = 
	`add_bw_ßm∂es
(
td
, &
now
);

2676 i‡(
tmp
 < 
√xt
)

2677 
√xt
 = 
tmp
;

2679 i‡(!
td
->
i›s_log
 ||

2680 (
td
->
i›s_log
 && !
	`≥r_unô_log
(td->iops_log))) {

2681 
tmp
 = 
	`add_i›s_ßm∂es
(
td
, &
now
);

2682 i‡(
tmp
 < 
√xt
)

2683 
√xt
 = 
tmp
;

2687  
√xt
 == ~0U ? 0 :Çext;

2688 
	}
}

2690 
	$°©_öô
()

2692 
°©_muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

2693 
	}
}

2695 
	$°©_exô
()

2701 
	`fio_muãx_down
(
°©_muãx
);

2702 
	`fio_muãx_ªmove
(
°©_muãx
);

2703 
	}
}

2708 
	$show_ru¬ög_run_°©s
()

2710 
	`hñ≥r_do_°©
();

2711 
	}
}

2713 
uöt32_t
 *
	$io_u_block_öfo
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

2717 
idx
 = (
io_u
->
off£t
 - io_u->
fûe
->
fûe_off£t
)

2718 / 
td
->
o
.
bs
[
DDIR_TRIM
];

2719 
uöt32_t
 *
öfo
 = &
td
->
ts
.
block_öfos
[
idx
];

2720 
	`as£π
(
idx
 < 
td
->
ts
.
ƒ_block_öfos
);

2721  
öfo
;

2722 
	}
}

	@/home/ysjin/Desktop/fio/fio/stat.h

1 #i‚de‡
FIO_STAT_H


2 
	#FIO_STAT_H


	)

4 
	~"iﬁog.h
"

5 
	~"lib/ouçut_buf„r.h
"

7 
	sgroup_run_°©s
 {

8 
uöt64_t
 
	mmax_run
[
DDIR_RWDIR_CNT
], 
	mmö_run
[DDIR_RWDIR_CNT];

9 
uöt64_t
 
	mmax_bw
[
DDIR_RWDIR_CNT
], 
	mmö_bw
[DDIR_RWDIR_CNT];

10 
uöt64_t
 
	miobyãs
[
DDIR_RWDIR_CNT
];

11 
uöt64_t
 
	magg
[
DDIR_RWDIR_CNT
];

12 
uöt32_t
 
	mkb_ba£
;

13 
uöt32_t
 
	munô_ba£
;

14 
uöt32_t
 
	msig_figs
;

15 
uöt32_t
 
	mgroupid
;

16 
uöt32_t
 
	munifõd_rw_ªp
;

17 } 
__©åibuã__
((
∑cked
));

22 
	#FIO_IO_U_MAP_NR
 7

	)

23 
	#FIO_IO_U_LAT_N_NR
 10

	)

24 
	#FIO_IO_U_LAT_U_NR
 10

	)

25 
	#FIO_IO_U_LAT_M_NR
 12

	)

30 
	#FIO_IO_U_PLAT_BITS
 6

	)

31 
	#FIO_IO_U_PLAT_VAL
 (1 << 
FIO_IO_U_PLAT_BITS
)

	)

32 
	#FIO_IO_U_PLAT_GROUP_NR
 29

	)

33 
	#FIO_IO_U_PLAT_NR
 (
FIO_IO_U_PLAT_GROUP_NR
 * 
FIO_IO_U_PLAT_VAL
)

	)

34 
	#FIO_IO_U_LIST_MAX_LEN
 20

	)

124 
	#MAX_NR_BLOCK_INFOS
 8192

	)

125 
	#BLOCK_INFO_STATE_SHIFT
 29

	)

126 
	#BLOCK_INFO_TRIMS
(
block_öfo
) \

127 ((
block_öfo
Ë& ((1 << 
BLOCK_INFO_STATE_SHIFT
Ë- 1))

	)

128 
	#BLOCK_INFO_STATE
(
block_öfo
) \

129 ((
block_öfo
Ë>> 
BLOCK_INFO_STATE_SHIFT
)

	)

130 
	#BLOCK_INFO
(
°©e
, 
åim_cy˛es
) \

131 ((
åim_cy˛es
Ë| ((Ë(
°©e
Ë<< 
BLOCK_INFO_STATE_SHIFT
))

	)

132 
	#BLOCK_INFO_SET_STATE
(
block_öfo
, 
°©e
) \

133 
	`BLOCK_INFO
(
°©e
, 
	`BLOCK_INFO_TRIMS
(
block_öfo
))

	)

134 
	eblock_öfo_°©e
 {

135 
	mBLOCK_STATE_UNINIT
,

136 
	mBLOCK_STATE_TRIMMED
,

137 
	mBLOCK_STATE_WRITTEN
,

138 
	mBLOCK_STATE_TRIM_FAILURE
,

139 
	mBLOCK_STATE_WRITE_FAILURE
,

140 
	mBLOCK_STATE_COUNT
,

143 
	#MAX_PATTERN_SIZE
 512

	)

144 
	#FIO_JOBNAME_SIZE
 128

	)

145 
	#FIO_JOBDESC_SIZE
 256

	)

146 
	#FIO_VERROR_SIZE
 128

	)

148 
	sthªad_°©
 {

149 
	m«me
[
FIO_JOBNAME_SIZE
];

150 
	mvîr‹
[
FIO_VERROR_SIZE
];

151 
uöt32_t
 
	mîr‹
;

152 
uöt32_t
 
	mthªad_numbî
;

153 
uöt32_t
 
	mgroupid
;

154 
uöt32_t
 
	mpid
;

155 
	mdes¸ùti⁄
[
FIO_JOBDESC_SIZE
];

156 
uöt32_t
 
	mmembîs
;

157 
uöt32_t
 
	munifõd_rw_ªp
;

162 
io_°©
 
sync_°©
 
__©åibuã__
((
Æig√d
(8)));

163 
io_°©
 
	m˛©_°©
[
DDIR_RWDIR_CNT
];

164 
io_°©
 
	m¶©_°©
[
DDIR_RWDIR_CNT
];

165 
io_°©
 
	mœt_°©
[
DDIR_RWDIR_CNT
];

166 
io_°©
 
	mbw_°©
[
DDIR_RWDIR_CNT
];

167 
io_°©
 
	mi›s_°©
[
DDIR_RWDIR_CNT
];

172 
uöt64_t
 
	mu§_time
;

173 
uöt64_t
 
	msys_time
;

174 
uöt64_t
 
	m˘x
;

175 
uöt64_t
 
	mmöf
, 
	mmajf
;

180 
uöt32_t
 
	m˛©_≥r˚¡ûes
;

181 
uöt32_t
 
	mœt_≥r˚¡ûes
;

182 
uöt64_t
 
	m≥r˚¡ûe_¥ecisi⁄
;

183 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

185 
uöt64_t
 
	mio_u_m≠
[
FIO_IO_U_MAP_NR
];

186 
uöt64_t
 
	mio_u_submô
[
FIO_IO_U_MAP_NR
];

187 
uöt64_t
 
	mio_u_com∂ëe
[
FIO_IO_U_MAP_NR
];

188 
uöt64_t
 
	mio_u_œt_n
[
FIO_IO_U_LAT_N_NR
];

189 
uöt64_t
 
	mio_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

190 
uöt64_t
 
	mio_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

191 
uöt64_t
 
	mio_u_∂©
[
DDIR_RWDIR_CNT
][
FIO_IO_U_PLAT_NR
];

192 
uöt64_t
 
	mio_u_sync_∂©
[
FIO_IO_U_PLAT_NR
];

194 
uöt64_t
 
	mtŸÆ_io_u
[
DDIR_RWDIR_SYNC_CNT
];

195 
uöt64_t
 
	msh‹t_io_u
[
DDIR_RWDIR_CNT
];

196 
uöt64_t
 
	mdr›_io_u
[
DDIR_RWDIR_CNT
];

197 
uöt64_t
 
	mtŸÆ_submô
;

198 
uöt64_t
 
	mtŸÆ_com∂ëe
;

200 
uöt64_t
 
	mio_byãs
[
DDIR_RWDIR_CNT
];

201 
uöt64_t
 
	mru¡ime
[
DDIR_RWDIR_CNT
];

202 
uöt64_t
 
	mtŸÆ_run_time
;

208 
uöt16_t
 
	mc⁄töue_⁄_îr‹
;

209 
uöt32_t
 
	m∑d2
;

211 
uöt32_t
 
	mfú°_îr‹
;

212 
uöt64_t
 
	mtŸÆ_îr_cou¡
;

214 
uöt64_t
 
	mƒ_block_öfos
;

215 
uöt32_t
 
	mblock_öfos
[
MAX_NR_BLOCK_INFOS
];

217 
uöt32_t
 
	mkb_ba£
;

218 
uöt32_t
 
	munô_ba£
;

220 
uöt32_t
 
	mœãncy_dïth
;

221 
uöt32_t
 
	m∑d3
;

222 
uöt64_t
 
	mœãncy_èrgë
;

223 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

224 
uöt64_t
 
	mœãncy_wödow
;

226 
uöt32_t
 
	msig_figs
;

228 
uöt64_t
 
	mss_dur
;

229 
uöt32_t
 
	mss_°©e
;

230 
uöt32_t
 
	mss_hód
;

232 
fio_Â64_t
 
	mss_limô
;

233 
fio_Â64_t
 
	mss_¶›e
;

234 
fio_Â64_t
 
	mss_devüti⁄
;

235 
fio_Â64_t
 
	mss_¸ôîi⁄
;

238 
uöt64_t
 *
	mss_i›s_d©a
;

239 
uöt64_t
 
	m∑d4
;

243 
uöt64_t
 *
	mss_bw_d©a
;

244 
uöt64_t
 
	m∑d5
;

246 } 
__©åibuã__
((
∑cked
));

248 
	sjobs_ëa
 {

249 
uöt32_t
 
	mƒ_ru¬ög
;

250 
uöt32_t
 
	mƒ_ømp
;

252 
uöt32_t
 
	mƒ_≥ndög
;

253 
uöt32_t
 
	mƒ_£âög_up
;

255 
uöt64_t
 
	mm_øã
[
DDIR_RWDIR_CNT
], 
	mt_øã
[DDIR_RWDIR_CNT];

256 
uöt64_t
 
	møã
[
DDIR_RWDIR_CNT
];

257 
uöt32_t
 
	mm_i›s
[
DDIR_RWDIR_CNT
], 
	mt_i›s
[DDIR_RWDIR_CNT];

258 
uöt32_t
 
	mi›s
[
DDIR_RWDIR_CNT
];

259 
uöt64_t
 
	mñ≠£d_£c
;

260 
uöt64_t
 
	mëa_£c
;

261 
uöt32_t
 
	mis_pow2
;

262 
uöt32_t
 
	munô_ba£
;

264 
uöt32_t
 
	msig_figs
;

266 
uöt32_t
 
	mfûes_›í
;

271 
uöt32_t
 
	mƒ_thªads
;

272 
uöt8_t
 
	mrun_°r
[];

273 } 
__©åibuã__
((
∑cked
));

275 
	sio_u_∂©_íåy
 {

276 
Êi°_hód
 
	mli°
;

277 
uöt64_t
 
	mio_u_∂©
[
FIO_IO_U_PLAT_NR
];

280 
fio_muãx
 *
°©_muãx
;

282 
jobs_ëa
 *
gë_jobs_ëa
(
boﬁ
 
f‹˚
, 
size_t
 *
size
);

284 
°©_öô
();

285 
°©_exô
();

287 
js⁄_obje˘
 * 
show_thªad_°©us
(
thªad_°©
 *
ts
, 
group_run_°©s
 *
rs
, 
Êi°_hód
 *, 
buf_ouçut
 *);

288 
show_group_°©s
(
group_run_°©s
 *
rs
, 
buf_ouçut
 *);

289 
boﬁ
 
ˇlc_thªad_°©us
(
jobs_ëa
 *
je
, 
f‹˚
);

290 
di•œy_thªad_°©us
(
jobs_ëa
 *
je
);

291 
show_run_°©s
();

292 
__show_run_°©s
();

293 
__show_ru¬ög_run_°©s
();

294 
show_ru¬ög_run_°©s
();

295 
check_f‹_ru¬ög_°©s
();

296 
sum_thªad_°©s
(
thªad_°©
 *
d°
, thªad_°© *
§c
, 
boﬁ
 
fú°
);

297 
sum_group_°©s
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
);

298 
öô_thªad_°©
(
thªad_°©
 *
ts
);

299 
öô_group_run_°©
(
group_run_°©s
 *
gs
);

300 
ëa_to_°r
(*
°r
, 
ëa_£c
);

301 
boﬁ
 
ˇlc_œt
(
io_°©
 *
is
, *
mö
, *
max
, *
món
, *
dev
);

302 
ˇlc_˛©_≥r˚¡ûes
(
uöt64_t
 *
io_u_∂©
, 
ƒ
, 
fio_Â64_t
 *
∂i°
, **
ouçut
, *
maxv
, *
möv
);

303 
°©_ˇlc_œt_n
(
thªad_°©
 *
ts
, *
io_u_œt
);

304 
°©_ˇlc_œt_m
(
thªad_°©
 *
ts
, *
io_u_œt
);

305 
°©_ˇlc_œt_u
(
thªad_°©
 *
ts
, *
io_u_œt
);

306 
°©_ˇlc_di°
(
uöt64_t
 *
m≠
, 
tŸÆ
, *
io_u_di°
);

307 
ª£t_io_°©s
(
thªad_d©a
 *);

308 
upd©e_rußge_°©
(
thªad_d©a
 *);

309 
˛ór_rußge_°©
(
thªad_d©a
 *);

311 
add_œt_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

312 , 
uöt64_t
);

313 
add_˛©_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

314 , 
uöt64_t
);

315 
add_¶©_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

316 , 
uöt64_t
);

317 
add_agg_ßm∂e
(
io_ßm∂e_d©a
, 
fio_ddú
, );

318 
add_i›s_ßm∂e
(
thªad_d©a
 *, 
io_u
 *,

320 
add_bw_ßm∂e
(
thªad_d©a
 *, 
io_u
 *,

322 
add_sync_˛©_ßm∂e
(
thªad_°©
 *
ts
,

323 
n£c
);

324 
ˇlc_log_ßm∂es
();

326 
io_log
 *
agg_io_log
[
DDIR_RWDIR_CNT
];

327 
wrôe_bw_log
;

329 
ölöe
 
boﬁ
 
	$n£c_to_u£c
(*
mö
,

330 *
max
, *
món
,

331 *
dev
)

333 i‡(*
mö
 > 2000 && *
max
 > 99999 && *
dev
 > 1000.0) {

334 *
mö
 /= 1000;

335 *
max
 /= 1000;

336 *
món
 /= 1000.0;

337 *
dev
 /= 1000.0;

338  
åue
;

341  
Ál£
;

342 
	}
}

344 
ölöe
 
boﬁ
 
	$n£c_to_m£c
(*
mö
,

345 *
max
, *
món
,

346 *
dev
)

348 i‡(*
mö
 > 2000000 && *
max
 > 99999999ULL && *
dev
 > 1000000.0) {

349 *
mö
 /= 1000000;

350 *
max
 /= 1000000;

351 *
món
 /= 1000000.0;

352 *
dev
 /= 1000000.0;

353  
åue
;

356  
Ál£
;

357 
	}
}

362 
	#__THREAD_RUNSTR_SZ
(
ƒ
Ë(“rË* 5)

	)

363 
	#THREAD_RUNSTR_SZ
 
	`__THREAD_RUNSTR_SZ
(
thªad_numbî
)

	)

365 
uöt32_t
 *
io_u_block_öfo
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

	@/home/ysjin/Desktop/fio/fio/steadystate.c

1 
	~<°dlib.h
>

3 
	~"fio.h
"

4 
	~"°ódy°©e.h
"

5 
	~"hñ≥r_thªad.h
"

7 
boﬁ
 
	g°ódy°©e_íabÀd
 = 
Ál£
;

9 
	$°ódy°©e_‰ì
(
thªad_d©a
 *
td
)

11 
	`‰ì
(
td
->
ss
.
i›s_d©a
);

12 
	`‰ì
(
td
->
ss
.
bw_d©a
);

13 
td
->
ss
.
i›s_d©a
 = 
NULL
;

14 
td
->
ss
.
bw_d©a
 = 
NULL
;

15 
	}
}

17 
	$°ódy°©e_Æloc
(
thªad_d©a
 *
td
)

19 
td
->
ss
.
bw_d©a
 = 
	`ˇŒoc
—d->ss.
dur
, (
uöt64_t
));

20 
td
->
ss
.
i›s_d©a
 = 
	`ˇŒoc
—d->ss.
dur
, (
uöt64_t
));

22 
td
->
ss
.
°©e
 |
FIO_SS_DATA
;

23 
	}
}

25 
	$°ódy°©e_£tup
()

27 
thªad_d©a
 *
td
, *
¥ev_td
;

28 
i
, 
¥ev_groupid
;

30 i‡(!
°ódy°©e_íabÀd
)

38 
¥ev_groupid
 = -1;

39 
¥ev_td
 = 
NULL
;

40 
	`f‹_óch_td
(
td
, 
i
) {

41 i‡(!
td
->
ss
.
dur
)

44 i‡(!
td
->
o
.
group_ªp‹tög
) {

45 
	`°ódy°©e_Æloc
(
td
);

49 i‡(
¥ev_groupid
 !
td
->
groupid
) {

50 i‡(
¥ev_td
)

51 
	`°ódy°©e_Æloc
(
¥ev_td
);

52 
¥ev_groupid
 = 
td
->
groupid
;

54 
¥ev_td
 = 
td
;

57 i‡(
¥ev_td
 &&Öªv_td->
o
.
group_ªp‹tög
)

58 
	`°ódy°©e_Æloc
(
¥ev_td
);

59 
	}
}

61 
boﬁ
 
	$°ódy°©e_¶›e
(
uöt64_t
 
i›s
, uöt64_à
bw
,

62 
thªad_d©a
 *
td
)

64 
i
, 
j
;

65 
ªsu…
;

66 
°ódy°©e_d©a
 *
ss
 = &
td
->ss;

67 
uöt64_t
 
√w_vÆ
;

69 
ss
->
bw_d©a
[ss->
èû
] = 
bw
;

70 
ss
->
i›s_d©a
[ss->
èû
] = 
i›s
;

72 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

73 
√w_vÆ
 = 
i›s
;

75 
√w_vÆ
 = 
bw
;

77 i‡(
ss
->
°©e
 & 
FIO_SS_BUFFER_FULL
 || ss->
èû
 - ss->
hód
 =ss->
dur
 - 1) {

78 i‡(!(
ss
->
°©e
 & 
FIO_SS_BUFFER_FULL
)) {

80 
i
 = 0, 
ss
->
sum_y
 = 0; i < ss->
dur
; i++) {

81 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

82 
ss
->
sum_y
 +ss->
i›s_d©a
[
i
];

84 
ss
->
sum_y
 +ss->
bw_d©a
[
i
];

85 
j
 = (
ss
->
hód
 + 
i
Ë% ss->
dur
;

86 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

87 
ss
->
sum_xy
 +
i
 * ss->
i›s_d©a
[
j
];

89 
ss
->
sum_xy
 +
i
 * ss->
bw_d©a
[
j
];

91 
ss
->
°©e
 |
FIO_SS_BUFFER_FULL
;

93 
ss
->
sum_y
 -ss->
ﬁde°_y
;

94 
ss
->
sum_y
 +
√w_vÆ
;

95 
ss
->
sum_xy
 = ss->sum_xy - ss->
sum_y
 + ss->
dur
 * 
√w_vÆ
;

98 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

99 
ss
->
ﬁde°_y
 = ss->
i›s_d©a
[ss->
hód
];

101 
ss
->
ﬁde°_y
 = ss->
bw_d©a
[ss->
hód
];

109 
ss
->
¶›e
 = (ss->
sum_xy
 - (Ëss->
sum_x
 * ss->
sum_y
 / ss->
dur
) /

110 (
ss
->
sum_x_sq
 - (Ëss->
sum_x
 * ss->sum_x / ss->
dur
);

111 i‡(
ss
->
°©e
 & 
FIO_SS_PCT
)

112 
ss
->
¸ôîi⁄
 = 100.0 * ss->
¶›e
 / (ss->
sum_y
 / ss->
dur
);

114 
ss
->
¸ôîi⁄
 = ss->
¶›e
;

116 
	`d¥öt
(
FD_STEADYSTATE
, "sum_y: %llu, sum_xy: %llu, slope: %f, "

118 (Ë
ss
->
sum_y
,

119 (Ë
ss
->
sum_xy
,

120 
ss
->
¶›e
, ss->
¸ôîi⁄
, ss->
limô
);

122 
ªsu…
 = 
ss
->
¸ôîi⁄
 * (ss->criterion < 0.0 ? -1.0 : 1.0);

123 i‡(
ªsu…
 < 
ss
->
limô
)

124  
åue
;

127 
ss
->
èû
 = (ss->èû + 1Ë% ss->
dur
;

128 i‡(
ss
->
èû
 <ss->
hód
)

129 
ss
->
hód
 = (ss->hód + 1Ë% ss->
dur
;

131  
Ál£
;

132 
	}
}

134 
boﬁ
 
	$°ódy°©e_devüti⁄
(
uöt64_t
 
i›s
, uöt64_à
bw
,

135 
thªad_d©a
 *
td
)

137 
i
;

138 
diff
;

139 
món
;

141 
°ódy°©e_d©a
 *
ss
 = &
td
->ss;

143 
ss
->
bw_d©a
[ss->
èû
] = 
bw
;

144 
ss
->
i›s_d©a
[ss->
èû
] = 
i›s
;

146 i‡(
ss
->
°©e
 & 
FIO_SS_BUFFER_FULL
 || ss->
èû
 - ss->
hód
 =ss->
dur
 - 1) {

147 i‡(!(
ss
->
°©e
 & 
FIO_SS_BUFFER_FULL
)) {

149 
i
 = 0, 
ss
->
sum_y
 = 0; i < ss->
dur
; i++)

150 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

151 
ss
->
sum_y
 +ss->
i›s_d©a
[
i
];

153 
ss
->
sum_y
 +ss->
bw_d©a
[
i
];

154 
ss
->
°©e
 |
FIO_SS_BUFFER_FULL
;

156 
ss
->
sum_y
 -ss->
ﬁde°_y
;

157 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

158 
ss
->
sum_y
 +ss->
i›s_d©a
[ss->
èû
];

160 
ss
->
sum_y
 +ss->
bw_d©a
[ss->
èû
];

163 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

164 
ss
->
ﬁde°_y
 = ss->
i›s_d©a
[ss->
hód
];

166 
ss
->
ﬁde°_y
 = ss->
bw_d©a
[ss->
hód
];

168 
món
 = (Ë
ss
->
sum_y
 / ss->
dur
;

169 
ss
->
devüti⁄
 = 0.0;

171 
i
 = 0; i < 
ss
->
dur
; i++) {

172 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

173 
diff
 = 
ss
->
i›s_d©a
[
i
] - 
món
;

175 
diff
 = 
ss
->
bw_d©a
[
i
] - 
món
;

176 
ss
->
devüti⁄
 = 
	`max
(ss->devüti⁄, 
diff
 * (diff < 0.0 ? -1.0 : 1.0));

179 i‡(
ss
->
°©e
 & 
FIO_SS_PCT
)

180 
ss
->
¸ôîi⁄
 = 100.0 * ss->
devüti⁄
 / 
món
;

182 
ss
->
¸ôîi⁄
 = ss->
devüti⁄
;

184 
	`d¥öt
(
FD_STEADYSTATE
, "sum_y: %llu, mean: %f, max diff: %f, "

186 (Ë
ss
->
sum_y
, 
món
,

187 
ss
->
devüti⁄
, ss->
¸ôîi⁄
, ss->
limô
);

189 i‡(
ss
->
¸ôîi⁄
 < ss->
limô
)

190  
åue
;

193 
ss
->
èû
 = (ss->èû + 1Ë% ss->
dur
;

194 i‡(
ss
->
èû
 <ss->
hód
)

195 
ss
->
hód
 = (ss->hód + 1Ë% ss->
dur
;

197  
Ál£
;

198 
	}
}

200 
	$°ódy°©e_check
()

202 
i
, 
j
, 
ddú
, 
¥ev_groupid
, 
group_ømp_time_ovî
 = 0;

203 
øã_time
;

204 
thªad_d©a
 *
td
, *
td2
;

205 
time•ec
 
now
;

206 
uöt64_t
 
group_bw
 = 0, 
group_i›s
 = 0;

207 
uöt64_t
 
td_i›s
, 
td_byãs
;

208 
boﬁ
 
ªt
;

210 
¥ev_groupid
 = -1;

211 
	`f‹_óch_td
(
td
, 
i
) {

212 
°ódy°©e_d©a
 *
ss
 = &
td
->ss;

214 i‡(!
ss
->
dur
 || 
td
->
run°©e
 <
TD_SETTING_UP
 ||

215 
td
->
run°©e
 >
TD_EXITED
 || !
ss
->
°©e
 ||

216 
ss
->
°©e
 & 
FIO_SS_ATTAINED
)

219 
td_i›s
 = 0;

220 
td_byãs
 = 0;

221 i‡(!
td
->
o
.
group_ªp‹tög
 ||

222 (
td
->
o
.
group_ªp‹tög
 &&Åd->
groupid
 !
¥ev_groupid
)) {

223 
group_bw
 = 0;

224 
group_i›s
 = 0;

225 
group_ømp_time_ovî
 = 0;

227 
¥ev_groupid
 = 
td
->
groupid
;

229 
	`fio_gëtime
(&
now
, 
NULL
);

230 i‡(
ss
->
ømp_time
 && !(ss->
°©e
 & 
FIO_SS_RAMP_OVER
)) {

235 i‡(
	`utime_sö˚
(&
td
->
ïoch
, &
now
Ë>(
ss
->
ømp_time
 + 1000000L))

236 
ss
->
°©e
 |
FIO_SS_RAMP_OVER
;

239 
	`td_io_u_lock
(
td
);

240 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

241 
td_i›s
 +
td
->
io_blocks
[
ddú
];

242 
td_byãs
 +
td
->
io_byãs
[
ddú
];

244 
	`td_io_u_u∆ock
(
td
);

246 
øã_time
 = 
	`mtime_sö˚
(&
ss
->
¥ev_time
, &
now
);

247 
	`mem˝y
(&
ss
->
¥ev_time
, &
now
, (now));

256 i‡(
ss
->
°©e
 & 
FIO_SS_RAMP_OVER
) {

257 
group_bw
 +1000 * (
td_byãs
 - 
ss
->
¥ev_byãs
Ë/ 
øã_time
;

258 
group_i›s
 +1000 * (
td_i›s
 - 
ss
->
¥ev_i›s
Ë/ 
øã_time
;

259 ++
group_ømp_time_ovî
;

261 
ss
->
¥ev_i›s
 = 
td_i›s
;

262 
ss
->
¥ev_byãs
 = 
td_byãs
;

264 i‡(
td
->
o
.
group_ªp‹tög
 && !(
ss
->
°©e
 & 
FIO_SS_DATA
))

271 i‡(!
group_ømp_time_ovî
)

274 
	`d¥öt
(
FD_STEADYSTATE
, "steadystate_check()Åhread: %d, "

277 
i
, 
td
->
groupid
, 
øã_time
,

278 (Ë
group_i›s
,

279 (Ë
group_bw
,

280 
ss
->
hód
, ss->
èû
);

282 i‡(
ss
->
°©e
 & 
FIO_SS_SLOPE
)

283 
ªt
 = 
	`°ódy°©e_¶›e
(
group_i›s
, 
group_bw
, 
td
);

285 
ªt
 = 
	`°ódy°©e_devüti⁄
(
group_i›s
, 
group_bw
, 
td
);

287 i‡(
ªt
) {

288 i‡(
td
->
o
.
group_ªp‹tög
) {

289 
	`f‹_óch_td
(
td2
, 
j
) {

290 i‡(
td2
->
groupid
 =
td
->groupid) {

291 
td2
->
ss
.
°©e
 |
FIO_SS_ATTAINED
;

292 
	`fio_m¨k_td_ãrmö©e
(
td2
);

296 
ss
->
°©e
 |
FIO_SS_ATTAINED
;

297 
	`fio_m¨k_td_ãrmö©e
(
td
);

301 
	}
}

303 
	$td_°ódy°©e_öô
(
thªad_d©a
 *
td
)

305 
°ódy°©e_d©a
 *
ss
 = &
td
->ss;

306 
thªad_›ti⁄s
 *
o
 = &
td
->o;

307 
thªad_d©a
 *
td2
;

308 
j
;

310 
	`mem£t
(
ss
, 0, (*ss));

312 i‡(
o
->
ss_dur
) {

313 
°ódy°©e_íabÀd
 = 
åue
;

314 
o
->
ss_dur
 /= 1000000L;

317 
ss
->
dur
 = 
o
->
ss_dur
;

318 
ss
->
limô
 = 
o
->
ss_limô
.
u
.
f
;

319 
ss
->
ømp_time
 = 
o
->
ss_ømp_time
;

321 
ss
->
°©e
 = 
o
->
ss_°©e
;

322 i‡(!
td
->
ss
.
ømp_time
)

323 
ss
->
°©e
 |
FIO_SS_RAMP_OVER
;

325 
ss
->
sum_x
 = 
o
->
ss_dur
 * (o->ss_dur - 1) / 2;

326 
ss
->
sum_x_sq
 = (
o
->
ss_dur
 - 1) * (o->ss_dur) * (2*o->ss_dur - 1) / 6;

330 
	`f‹_óch_td
(
td2
, 
j
) {

331 i‡(
td2
->
groupid
 =
td
->groupid) {

332 
°ódy°©e_d©a
 *
ss2
 = &
td2
->
ss
;

334 i‡(
ss2
->
dur
 !
ss
->dur ||

335 
ss2
->
limô
 !
ss
->limit ||

336 
ss2
->
ømp_time
 !
ss
->ramp_time ||

337 
ss2
->
°©e
 !
ss
->state ||

338 
ss2
->
sum_x
 !
ss
->sum_x ||

339 
ss2
->
sum_x_sq
 !
ss
->sum_x_sq) {

340 
	`td_vîr‹
(
td
, 
EINVAL
, "jobÑejected: steadystate options must be consistent withinÑeporting groups");

347 
	}
}

349 
uöt64_t
 
	$°ódy°©e_bw_món
(
thªad_°©
 *
ts
)

351 
i
;

352 
uöt64_t
 
sum
;

354 
i
 = 0, 
sum
 = 0; i < 
ts
->
ss_dur
; i++)

355 
sum
 +
ts
->
ss_bw_d©a
[
i
];

357  
sum
 / 
ts
->
ss_dur
;

358 
	}
}

360 
uöt64_t
 
	$°ódy°©e_i›s_món
(
thªad_°©
 *
ts
)

362 
i
;

363 
uöt64_t
 
sum
;

365 
i
 = 0, 
sum
 = 0; i < 
ts
->
ss_dur
; i++)

366 
sum
 +
ts
->
ss_i›s_d©a
[
i
];

368  
sum
 / 
ts
->
ss_dur
;

369 
	}
}

	@/home/ysjin/Desktop/fio/fio/steadystate.h

1 #i‚de‡
FIO_STEADYSTATE_H


2 
	#FIO_STEADYSTATE_H


	)

4 
	~"°©.h
"

5 
	~"thªad_›ti⁄s.h
"

6 
	~"lib/õì754.h
"

8 
°ódy°©e_‰ì
(
thªad_d©a
 *);

9 
°ódy°©e_check
();

10 
°ódy°©e_£tup
();

11 
td_°ódy°©e_öô
(
thªad_d©a
 *);

12 
uöt64_t
 
°ódy°©e_bw_món
(
thªad_°©
 *);

13 
uöt64_t
 
°ódy°©e_i›s_món
(
thªad_°©
 *);

15 
boﬁ
 
°ódy°©e_íabÀd
;

17 
	s°ódy°©e_d©a
 {

18 
	mlimô
;

19 
	mdur
;

20 
	mømp_time
;

22 
uöt32_t
 
	m°©e
;

24 
	mhód
;

25 
	mèû
;

26 
uöt64_t
 *
	mi›s_d©a
;

27 
uöt64_t
 *
	mbw_d©a
;

29 
	m¶›e
;

30 
	mdevüti⁄
;

31 
	m¸ôîi⁄
;

33 
uöt64_t
 
	msum_y
;

34 
uöt64_t
 
	msum_x
;

35 
uöt64_t
 
	msum_x_sq
;

36 
uöt64_t
 
	msum_xy
;

37 
uöt64_t
 
	mﬁde°_y
;

39 
time•ec
 
	m¥ev_time
;

40 
uöt64_t
 
	m¥ev_i›s
;

41 
uöt64_t
 
	m¥ev_byãs
;

45 
	m__FIO_SS_IOPS
 = 0,

46 
	m__FIO_SS_BW
,

47 
	m__FIO_SS_SLOPE
,

48 
	m__FIO_SS_ATTAINED
,

49 
	m__FIO_SS_RAMP_OVER
,

50 
	m__FIO_SS_DATA
,

51 
	m__FIO_SS_PCT
,

52 
	m__FIO_SS_BUFFER_FULL
,

56 
	mFIO_SS_IOPS
 = 1 << 
__FIO_SS_IOPS
,

57 
	mFIO_SS_BW
 = 1 << 
__FIO_SS_BW
,

58 
	mFIO_SS_SLOPE
 = 1 << 
__FIO_SS_SLOPE
,

59 
	mFIO_SS_ATTAINED
 = 1 << 
__FIO_SS_ATTAINED
,

60 
	mFIO_SS_RAMP_OVER
 = 1 << 
__FIO_SS_RAMP_OVER
,

61 
	mFIO_SS_DATA
 = 1 << 
__FIO_SS_DATA
,

62 
	mFIO_SS_PCT
 = 1 << 
__FIO_SS_PCT
,

63 
	mFIO_SS_BUFFER_FULL
 = 1 << 
__FIO_SS_BUFFER_FULL
,

65 
	mFIO_SS_IOPS_SLOPE
 = 
FIO_SS_IOPS
 | 
FIO_SS_SLOPE
,

66 
	mFIO_SS_BW_SLOPE
 = 
FIO_SS_BW
 | 
FIO_SS_SLOPE
,

69 
	#STEADYSTATE_MSEC
 1000

	)

	@/home/ysjin/Desktop/fio/fio/t/arch.c

1 
	~"../¨ch/¨ch.h
"

3 
	g¨ch_Êags
 = 0;

4 
boﬁ
 
	gtsc_ªlübÀ
;

5 
	g¨ch_øndom
;

	@/home/ysjin/Desktop/fio/fio/t/axmap.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<f˙é.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<öây≥s.h
>

8 
	~"../lib/lf§.h
"

9 
	~"../lib/axm≠.h
"

11 
	$ã°_ªguœr
(
size_t
 
size
, 
£ed
)

13 
fio_lf§
 
lf§
;

14 
axm≠
 *
m≠
;

15 
size_t
 
osize
;

16 
uöt64_t
 
ff
;

17 
îr
;

19 
	`¥ötf
("Usög %ŒuÉ¡rõs...", (Ë
size
);

20 
	`fÊush
(
°dout
);

22 
	`lf§_öô
(&
lf§
, 
size
, 
£ed
, seed & 0xF);

23 
m≠
 = 
	`axm≠_√w
(
size
);

24 
osize
 = 
size
;

25 
îr
 = 0;

27 
size
--) {

28 
uöt64_t
 
vÆ
;

30 i‡(
	`lf§_√xt
(&
lf§
, &
vÆ
)) {

31 
	`¥ötf
("lfsr: shortÜoop\n");

32 
îr
 = 1;

35 i‡(
	`axm≠_is£t
(
m≠
, 
vÆ
)) {

36 
	`¥ötf
("bitálready set\n");

37 
îr
 = 1;

40 
	`axm≠_£t
(
m≠
, 
vÆ
);

41 i‡(!
	`axm≠_is£t
(
m≠
, 
vÆ
)) {

42 
	`¥ötf
("bitÇot set\n");

43 
îr
 = 1;

48 i‡(
îr
)

49  
îr
;

51 
ff
 = 
	`axm≠_√xt_‰ì
(
m≠
, 
osize
);

52 i‡(
ff
 !(
uöt64_t
) -1ULL) {

53 
	`¥ötf
("axm≠_√xt_‰ì brokí: gŸ %Œu\n", (Ë
ff
);

57 
	`¥ötf
("pass!\n");

58 
	`axm≠_‰ì
(
m≠
);

60 
	}
}

62 
	$ã°_mu…i
(
size_t
 
size
, 
bô_off
)

64 
m≠_size
 = 
size
;

65 
axm≠
 *
m≠
;

66 
uöt64_t
 
vÆ
 = 
bô_off
;

67 
i
, 
îr
;

69 
	`¥ötf
("Te° mu…ò%ŒuÉ¡rõ†%u off£t...", (Ë
size
, 
bô_off
);

70 
	`fÊush
(
°dout
);

72 
m≠
 = 
	`axm≠_√w
(
m≠_size
);

73 
vÆ
 + 128 <
m≠_size
) {

74 
îr
 = 0;

75 
i
 = 
vÆ
; i < val + 128; i++) {

76 i‡(
	`axm≠_is£t
(
m≠
, 
vÆ
 + 
i
)) {

77 
	`¥ötf
("bitálready set\n");

78 
îr
 = 1;

83 i‡(
îr
)

86 
îr
 = 
	`axm≠_£t_ƒ
(
m≠
, 
vÆ
, 128);

87 i‡(
îr
 != 128) {

88 
	`¥ötf
("⁄ly së %u bôs\n", 
îr
);

92 
îr
 = 0;

93 
i
 = 0; i < 128; i++) {

94 i‡(!
	`axm≠_is£t
(
m≠
, 
vÆ
 + 
i
)) {

95 
	`¥ötf
("bôÇŸ së: %Œu\n", (Ë
vÆ
 + 
i
);

96 
îr
 = 1;

101 
vÆ
 += 128;

102 i‡(
îr
)

106 i‡(!
îr
)

107 
	`¥ötf
("pass!\n");

109 
	`axm≠_‰ì
(
m≠
);

110  
îr
;

111 
	}
}

113 
	$maö
(
¨gc
, *
¨gv
[])

115 
size_t
 
size
 = (1UL << 23) - 200;

116 
£ed
 = 1;

118 i‡(
¨gc
 > 1) {

119 
size
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 10);

120 i‡(
¨gc
 > 2)

121 
£ed
 = 
	`°πoul
(
¨gv
[2], 
NULL
, 10);

124 i‡(
	`ã°_ªguœr
(
size
, 
£ed
))

126 i‡(
	`ã°_mu…i
(
size
, 0))

128 i‡(
	`ã°_mu…i
(
size
, 17))

132 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/btrace2fio.c

1 
	~<°dio.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<öây≥s.h
>

5 
	~<m©h.h
>

6 
	~<as£π.h
>

8 
	~"../io_ddú.h
"

9 
	~"../Êi°.h
"

10 
	~"../hash.h
"

11 
	~"../fifo.h
"

12 
	~"../blkåa˚_≠i.h
"

13 
	~"../os/os.h
"

14 
	~"../log.h
"

15 
	~"../o¶ib/löux-dev-lookup.h
"

17 
	#TRACE_FIFO_SIZE
 8192

	)

19 
	gπ_thªshﬁd
 = 1000000;

20 
	gios_thªshﬁd
 = 10;

21 
	gøã_thªshﬁd
;

22 
	g£t_øã
;

23 
	gmax_dïth
 = 256;

24 
	gouçut_ascii
 = 1;

25 *
	gfûíame
;

27 **
	gadd_›ts
;

28 
	gn_add_›ts
;

33 
	gcﬁœp£_íåõs
 = 0;

34 
	gdïth_diff
 = 1;

35 
	gøndom_diff
 = 5;

37 
	sbs
 {

38 
	mbs
;

39 
	mƒ
;

40 
	mmîges
;

43 
	såa˚_fûe
 {

44 *
	m«me
;

45 
	mmaj‹
, 
	mmö‹
;

48 
	sbåa˚_out
 {

49 
	mios
[
DDIR_RWDIR_CNT
];

50 
	mmîges
[
DDIR_RWDIR_CNT
];

52 
uöt64_t
 
	mœ°_íd
[
DDIR_RWDIR_CNT
];

53 
uöt64_t
 
	m£q
[
DDIR_RWDIR_CNT
];

55 
bs
 *
	mbs
[
DDIR_RWDIR_CNT
];

56 
	mƒ_bs
[
DDIR_RWDIR_CNT
];

58 
	möÊight
;

59 
	mdïth
;

60 
	mdïth_dißbÀd
;

61 
	mcom∂ëe_£í
;

63 
uöt64_t
 
	mfú°_âime
[
DDIR_RWDIR_CNT
];

64 
uöt64_t
 
	mœ°_âime
[
DDIR_RWDIR_CNT
];

65 
uöt64_t
 
	mkib
[
DDIR_RWDIR_CNT
];

67 
uöt64_t
 
	m°¨t_dñay
;

70 
	sbåa˚_pid
 {

71 
Êi°_hód
 
	mhash_li°
;

72 
Êi°_hód
 
	mpid_li°
;

73 
pid_t
 
	mpid
;

75 
pid_t
 *
	mmîge_pids
;

76 
	mƒ_mîge_pids
;

78 
åa˚_fûe
 *
	mfûes
;

79 
	mƒ_fûes
;

80 
	mœ°_maj‹
, 
	mœ°_mö‹
;

81 
	mnumjobs
;

82 
	mign‹e
;

84 
båa˚_out
 
	mo
;

87 
	söÊight
 {

88 
Êi°_hód
 
	mli°
;

89 
båa˚_pid
 *
	mp
;

90 
uöt64_t
 
	míd_£˘‹
;

93 
	#PID_HASH_BITS
 10

	)

94 
	#PID_HASH_SIZE
 (1U << 
PID_HASH_BITS
)

	)

96 
Êi°_hód
 
	gpid_hash
[
PID_HASH_SIZE
];

97 
FLIST_HEAD
(
pid_li°
);

99 
	#INFLIGHT_HASH_BITS
 8

	)

100 
	#INFLIGHT_HASH_SIZE
 (1U << 
INFLIGHT_HASH_BITS
)

	)

101 
Êi°_hód
 
	göÊight_hash
[
INFLIGHT_HASH_SIZE
];

103 
uöt64_t
 
	gfú°_âime
 = -1ULL;

105 
öÊight
 *
	$öÊight_föd
(
uöt64_t
 
£˘‹
)

107 
Êi°_hód
 *
öÊight_li°
;

108 
Êi°_hód
 *
e
;

110 
öÊight_li°
 = &
öÊight_hash
[
	`hash_l⁄g
(
£˘‹
, 
INFLIGHT_HASH_BITS
)];

112 
	`Êi°_f‹_óch
(
e
, 
öÊight_li°
) {

113 
öÊight
 *
i
 = 
	`Êi°_íåy
(
e
, öÊight, 
li°
);

115 i‡(
i
->
íd_£˘‹
 =
£˘‹
)

116  
i
;

119  
NULL
;

120 
	}
}

122 
	$öÊight_ªmove
(
öÊight
 *
i
)

124 
båa˚_out
 *
o
 = &
i
->
p
->o;

126 
o
->
öÊight
--;

127 
	`as£π
(
o
->
öÊight
 >= 0);

128 
	`Êi°_dñ
(&
i
->
li°
);

129 
	`‰ì
(
i
);

130 
	}
}

132 
	$__öÊight_add
(
öÊight
 *
i
)

134 
Êi°_hód
 *
li°
;

136 
li°
 = &
öÊight_hash
[
	`hash_l⁄g
(
i
->
íd_£˘‹
, 
INFLIGHT_HASH_BITS
)];

137 
	`Êi°_add_èû
(&
i
->
li°
,Üist);

138 
	}
}

140 
	$öÊight_add
(
båa˚_pid
 *
p
, 
uöt64_t
 
£˘‹
, 
uöt32_t
 
Àn
)

142 
båa˚_out
 *
o
 = &
p
->o;

143 
öÊight
 *
i
;

145 
i
 = 
	`ˇŒoc
(1, (*i));

146 
i
->
p
 =Ö;

147 
o
->
öÊight
++;

148 i‡(!
o
->
dïth_dißbÀd
) {

149 
o
->
dïth
 = 
	`max
((Ëo->dïth, o->
öÊight
);

150 i‡(
o
->
dïth
 >
max_dïth
 && !o->
com∂ëe_£í
) {

151 
o
->
dïth_dißbÀd
 = 1;

152 
o
->
dïth
 = 
max_dïth
;

155 
i
->
íd_£˘‹
 = 
£˘‹
 + (
Àn
 >> 9);

156 
	`__öÊight_add
(
i
);

157 
	}
}

159 
	$öÊight_mîge
(
öÊight
 *
i
, 
rw
, 
size
)

161 
i
->
p
->
o
.
mîges
[
rw
]++;

162 i‡(
size
) {

163 
i
->
íd_£˘‹
 +(
size
 >> 9);

164 
	`Êi°_dñ
(&
i
->
li°
);

165 
	`__öÊight_add
(
i
);

167 
	}
}

172 
	$ªfûl_fifo
(
fifo
 *fifo, 
fd
)

174 
buf
[
TRACE_FIFO_SIZE
];

175 
tŸÆ
;

176 
ªt
;

178 
tŸÆ
 = (
buf
);

179 i‡(
tŸÆ
 > 
	`fifo_room
(
fifo
))

180 
tŸÆ
 = 
	`fifo_room
(
fifo
);

182 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
tŸÆ
);

183 i‡(
ªt
 < 0) {

184 
	`≥º‹
("readÑefill");

188 i‡(
ªt
 > 0)

189 
ªt
 = 
	`fifo_put
(
fifo
, 
buf
,Ñet);

191  
ªt
;

192 
	}
}

197 
	$åa˚_fifo_gë
(
fifo
 *fifo, 
fd
, *
buf
,

198 
Àn
)

200 i‡(
	`fifo_Àn
(
fifo
Ë< 
Àn
) {

201 
ªt
 = 
	`ªfûl_fifo
(
fifo
, 
fd
);

203 i‡(
ªt
 < 0)

204  
ªt
;

207  
	`fifo_gë
(
fifo
, 
buf
, 
Àn
);

208 
	}
}

213 
	$disˇrd_pdu
(
fifo
 *fifo, 
fd
, 
blk_io_åa˚
 *
t
)

215 i‡(
t
->
pdu_Àn
 == 0)

218  
	`åa˚_fifo_gë
(
fifo
, 
fd
, 
NULL
, 
t
->
pdu_Àn
);

219 
	}
}

221 
	$h™dÀ_åa˚_nŸify
(
blk_io_åa˚
 *
t
)

223 
t
->
a˘i⁄
) {

224 
BLK_TN_PROCESS
:

227 
BLK_TN_TIMESTAMP
:

230 
BLK_TN_MESSAGE
:

233 
	`log_îr
("unknow¿åa˚á˘ %x\n", 
t
->
a˘i⁄
);

238 
	}
}

240 
	$__add_bs
(
båa˚_out
 *
o
, 
Àn
, 
rw
)

242 
o
->
bs
[
rw
] = 
	`ªÆloc
(o->bs[rw], (o->
ƒ_bs
[rw] + 1) * (bs));

243 
o
->
bs
[
rw
][o->
ƒ_bs
[rw]].b†
Àn
;

244 
o
->
bs
[
rw
][o->
ƒ_bs
[rw]].
ƒ
 = 1;

245 
o
->
ƒ_bs
[
rw
]++;

246 
	}
}

248 
	$add_bs
(
båa˚_out
 *
o
, 
Àn
, 
rw
)

250 
bs
 *b†
o
->bs[
rw
];

251 
i
;

253 i‡(!
o
->
ƒ_bs
[
rw
]) {

254 
	`__add_bs
(
o
, 
Àn
, 
rw
);

258 
i
 = 0; i < 
o
->
ƒ_bs
[
rw
]; i++) {

259 i‡(
bs
[
i
].b†=
Àn
) {

260 
bs
[
i
].
ƒ
++;

265 
	`__add_bs
(
o
, 
Àn
, 
rw
);

266 
	}
}

268 
	#FMINORBITS
 20

	)

269 
	#FMINORMASK
 ((1U << 
FMINORBITS
Ë- 1)

	)

270 
	#FMAJOR
(
dev
Ë((Ë((devË>> 
FMINORBITS
))

	)

271 
	#FMINOR
(
dev
Ë((Ë((devË& 
FMINORMASK
))

	)

273 
	$båa˚_add_fûe
(
båa˚_pid
 *
p
, 
uöt32_t
 
devno
)

275 
maj
 = 
	`FMAJOR
(
devno
);

276 
mö
 = 
	`FMINOR
(
devno
);

277 
åa˚_fûe
 *
f
;

278 
i
;

279 
dev
[256];

281 i‡(
fûíame
)

283 i‡(
p
->
œ°_maj‹
 =
maj
 &&Ö->
œ°_mö‹
 =
mö
)

286 
p
->
œ°_maj‹
 = 
maj
;

287 
p
->
œ°_mö‹
 = 
mö
;

292 
i
 = 0; i < 
p
->
ƒ_fûes
; i++) {

293 
f
 = &
p
->
fûes
[
i
];

295 i‡(
f
->
maj‹
 =
maj
 && f->
mö‹
 =
mö
)

299 
	`°r˝y
(
dev
, "/dev");

300 i‡(!
	`blkåa˚_lookup_devi˚
(
NULL
, 
dev
, 
maj
, 
mö
)) {

301 
	`log_îr
("fio: faûedÅÿföd devi˚ %u/%u\n", 
maj
, 
mö
);

302 i‡(!
ouçut_ascii
) {

303 
	`log_îr
("fio: use -dÅo specify device\n");

309 
p
->
fûes
 = 
	`ªÆloc
’->fûes, (p->
ƒ_fûes
 + 1Ë* (*
f
));

310 
f
 = &
p
->
fûes
[p->
ƒ_fûes
];

311 
f
->
«me
 = 
	`°rdup
(
dev
);

312 
f
->
maj‹
 = 
maj
;

313 
f
->
mö‹
 = 
mö
;

314 
p
->
ƒ_fûes
++;

316 
	}
}

318 
	$t_to_rwdú
(
blk_io_åa˚
 *
t
)

320 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_DISCARD
))

321  
DDIR_TRIM
;

323  (
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
)) != 0;

324 
	}
}

326 
	$h™dÀ_åa˚_disˇrd
(
blk_io_åa˚
 *
t
, 
båa˚_pid
 *
p
)

328 
båa˚_out
 *
o
 = &
p
->o;

330 i‡(
	`båa˚_add_fûe
(
p
, 
t
->
devi˚
))

333 i‡(
o
->
fú°_âime
[2] == -1ULL)

334 
o
->
fú°_âime
[2] = 
t
->
time
;

336 
o
->
ios
[
DDIR_TRIM
]++;

337 
	`add_bs
(
o
, 
t
->
byãs
, 
DDIR_TRIM
);

339 
	}
}

341 
	$h™dÀ_åa˚_fs
(
blk_io_åa˚
 *
t
, 
båa˚_pid
 *
p
)

343 
båa˚_out
 *
o
 = &
p
->o;

344 
rw
;

346 i‡(
	`båa˚_add_fûe
(
p
, 
t
->
devi˚
))

349 
fú°_âime
 = 
	`mö
(fú°_âime, (
uöt64_t
Ë
t
->
time
);

351 
rw
 = (
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
)) != 0;

353 i‡(
o
->
fú°_âime
[
rw
] == -1ULL)

354 
o
->
fú°_âime
[
rw
] = 
t
->
time
;

356 
	`add_bs
(
o
, 
t
->
byãs
, 
rw
);

357 
o
->
ios
[
rw
]++;

359 i‡(
t
->
£˘‹
 =
o
->
œ°_íd
[
rw
] || o->last_end[rw] == -1ULL)

360 
o
->
£q
[
rw
]++;

362 
o
->
œ°_íd
[
rw
] = 
t
->
£˘‹
 + (t->
byãs
 >> 9);

364 
	}
}

366 
	$h™dÀ_queue_åa˚
(
blk_io_åa˚
 *
t
, 
båa˚_pid
 *
p
)

368 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

369  
	`h™dÀ_åa˚_nŸify
(
t
);

370 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_DISCARD
))

371  
	`h™dÀ_åa˚_disˇrd
(
t
, 
p
);

373  
	`h™dÀ_åa˚_fs
(
t
, 
p
);

374 
	}
}

376 
	$h™dÀ_åa˚
(
blk_io_åa˚
 *
t
, 
båa˚_pid
 *
p
)

378 
a˘
 = 
t
->
a˘i⁄
 & 0xffff;

379 
ªt
 = 0;

381 i‡(
a˘
 =
__BLK_TA_QUEUE
) {

382 
	`öÊight_add
(
p
, 
t
->
£˘‹
,Å->
byãs
);

383 
ªt
 = 
	`h™dÀ_queue_åa˚
(
t
, 
p
);

384 } i‡(
a˘
 =
__BLK_TA_BACKMERGE
) {

385 
öÊight
 *
i
;

387 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
 + (t->
byãs
 >> 9));

388 i‡(
i
)

389 
	`öÊight_ªmove
(
i
);

391 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
);

392 i‡(
i
)

393 
	`öÊight_mîge
(
i
, 
	`t_to_rwdú
(
t
),Å->
byãs
);

394 } i‡(
a˘
 =
__BLK_TA_FRONTMERGE
) {

395 
öÊight
 *
i
;

397 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
 + (t->
byãs
 >> 9));

398 i‡(
i
)

399 
	`öÊight_ªmove
(
i
);

401 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
);

402 i‡(
i
)

403 
	`öÊight_mîge
(
i
, 
	`t_to_rwdú
(
t
), 0);

404 } i‡(
a˘
 =
__BLK_TA_COMPLETE
) {

405 
öÊight
 *
i
;

407 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
 + (t->
byãs
 >> 9));

408 i‡(
i
) {

409 
i
->
p
->
o
.
kib
[
	`t_to_rwdú
(
t
)] +—->
byãs
 >> 10);

410 
i
->
p
->
o
.
com∂ëe_£í
 = 1;

411 
	`öÊight_ªmove
(
i
);

415  
ªt
;

416 
	}
}

418 
	$byãsw≠_åa˚
(
blk_io_åa˚
 *
t
)

420 
t
->
magic
 = 
	`fio_sw≠32
(t->magic);

421 
t
->
£quí˚
 = 
	`fio_sw≠32
(t->sequence);

422 
t
->
time
 = 
	`fio_sw≠64
(t->time);

423 
t
->
£˘‹
 = 
	`fio_sw≠64
(t->sector);

424 
t
->
byãs
 = 
	`fio_sw≠32
(t->bytes);

425 
t
->
a˘i⁄
 = 
	`fio_sw≠32
(t->action);

426 
t
->
pid
 = 
	`fio_sw≠32
(t->pid);

427 
t
->
devi˚
 = 
	`fio_sw≠32
(t->device);

428 
t
->
˝u
 = 
	`fio_sw≠32
(t->cpu);

429 
t
->
îr‹
 = 
	`fio_sw≠16
(t->error);

430 
t
->
pdu_Àn
 = 
	`fio_sw≠16
(t->pdu_len);

431 
	}
}

433 
båa˚_pid
 *
	$pid_hash_föd
(
pid_t
 
pid
, 
Êi°_hód
 *
li°
)

435 
Êi°_hód
 *
e
;

436 
båa˚_pid
 *
p
;

438 
	`Êi°_f‹_óch
(
e
, 
li°
) {

439 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
hash_li°
);

440 i‡(
p
->
pid
 ==Öid)

441  
p
;

444  
NULL
;

445 
	}
}

447 
båa˚_pid
 *
	$pid_hash_gë
(
pid_t
 
pid
)

449 
Êi°_hód
 *
hash_li°
;

450 
båa˚_pid
 *
p
;

452 
hash_li°
 = &
pid_hash
[
	`hash_l⁄g
(
pid
, 
PID_HASH_BITS
)];

454 
p
 = 
	`pid_hash_föd
(
pid
, 
hash_li°
);

455 i‡(!
p
) {

456 
i
;

458 
p
 = 
	`ˇŒoc
(1, (*p));

460 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

461 
p
->
o
.
fú°_âime
[
i
] = -1ULL;

462 
p
->
o
.
œ°_âime
[
i
] = -1ULL;

463 
p
->
o
.
œ°_íd
[
i
] = -1ULL;

466 
p
->
pid
 =Öid;

467 
p
->
numjobs
 = 1;

468 
	`Êi°_add_èû
(&
p
->
hash_li°
, hash_list);

469 
	`Êi°_add_èû
(&
p
->
pid_li°
, &pid_list);

472  
p
;

473 
	}
}

479 
	$lﬂd_blkåa˚
(c⁄° *
‚ame
, 
√ed_sw≠
)

481 
båa˚_pid
 *
p
;

482 
åa˚s
;

483 
blk_io_åa˚
 
t
;

484 
fifo
 *fifo;

485 
fd
, 
ªt
 = 0;

487 
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
);

488 i‡(
fd
 < 0) {

489 
	`≥º‹
("openÅrace file\n");

493 
fifo
 = 
	`fifo_Æloc
(
TRACE_FIFO_SIZE
);

495 
åa˚s
 = 0;

497 
ªt
 = 
	`åa˚_fifo_gë
(
fifo
, 
fd
, &
t
, (t));

498 i‡(
ªt
 < 0)

499 
îr
;

500 i‡(!
ªt
)

502 i‡(
ªt
 < (Ë(
t
)) {

503 
	`log_îr
("fio: short fifo get\n");

507 i‡(
√ed_sw≠
)

508 
	`byãsw≠_åa˚
(&
t
);

510 i‡((
t
.
magic
 & 0xffffff00Ë!
BLK_IO_TRACE_MAGIC
) {

511 
	`log_îr
("fio: bad magi¯ö blkåa˚ d©a: %x\n", 
t
.
magic
);

512 
îr
;

514 i‡((
t
.
magic
 & 0xffË!
BLK_IO_TRACE_VERSION
) {

515 
	`log_îr
("fio: bad blkåa˚ vîsi⁄ %d\n", 
t
.
magic
 & 0xff);

516 
îr
;

518 
ªt
 = 
	`disˇrd_pdu
(
fifo
, 
fd
, &
t
);

519 i‡(
ªt
 < 0) {

520 
	`log_îr
("blktraceÜseek\n");

521 
îr
;

522 } i‡(
t
.
pdu_Àn
 !
ªt
) {

523 
	`log_îr
("fio: disˇrded %d o‡%d\n", 
ªt
, 
t
.
pdu_Àn
);

524 
îr
;

527 
p
 = 
	`pid_hash_gë
(
t
.
pid
);

528 
ªt
 = 
	`h™dÀ_åa˚
(&
t
, 
p
);

529 i‡(
ªt
)

531 
p
->
o
.
œ°_âime
[
	`t_to_rwdú
(&
t
)] =Å.
time
;

532 
åa˚s
++;

535 
	`fifo_‰ì
(
fifo
);

536 
	`˛o£
(
fd
);

538 i‡(
ªt
)

539  
ªt
;

541 i‡(
ouçut_ascii
)

542 
	`¥ötf
("Tø˚†lﬂded: %lu\n", 
åa˚s
);

545 
îr
:

546 
	`˛o£
(
fd
);

547 
	`fifo_‰ì
(
fifo
);

549 
	}
}

551 
	$bs_cmp
(c⁄° *
ba
, c⁄° *
bb
)

553 c⁄° 
bs
 *
bß
 = 
ba
;

554 c⁄° 
bs
 *
bsb
 = 
bb
;

556  
bsb
->
ƒ
 - 
bß
->nr;

557 
	}
}

559 
	$o_to_kib_øã
(
båa˚_out
 *
o
, 
rw
)

561 
uöt64_t
 
u£c
 = (
o
->
œ°_âime
[
rw
] - o->
fú°_âime
[rw]) / 1000ULL;

562 
uöt64_t
 
vÆ
;

564 i‡(!
u£c
)

567 
u£c
 /= 1000;

568 i‡(!
u£c
)

571 
vÆ
 = 
o
->
kib
[
rw
] * 1000ULL;

572  
vÆ
 / 
u£c
;

573 
	}
}

575 
uöt64_t
 
	$o_fú°_âime
(
båa˚_out
 *
o
)

577 
uöt64_t
 
fú°
;

579 
fú°
 = 
	`mö
(
o
->
fú°_âime
[0], o->first_ttime[1]);

580  
	`mö
(
fú°
, 
o
->
fú°_âime
[2]);

581 
	}
}

583 
uöt64_t
 
	$o_l⁄ge°_âime
(
båa˚_out
 *
o
)

585 
uöt64_t
 
ªt
 = 0;

586 
i
;

588 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

589 
uöt64_t
 
diff
;

591 
diff
 = 
o
->
œ°_âime
[
i
] - o->
fú°_âime
[i];

592 
ªt
 = 
	`max
(
diff
,Ñet);

595  
ªt
;

596 
	}
}

598 
	$__ouçut_p_ascii
(
båa˚_pid
 *
p
, *
ios
)

600 c⁄° *
msg
[] = { "reads", "writes", "trims" };

601 
båa˚_out
 *
o
 = &
p
->o;

602 
tŸÆ
, 
u£c
;

603 
i
, 
j
;

605 
	`¥ötf
("[pid:\t%u", 
p
->
pid
);

606 i‡(
p
->
ƒ_mîge_pids
)

607 
i
 = 0; i < 
p
->
ƒ_mîge_pids
; i++)

608 
	`¥ötf
(", %u", 
p
->
mîge_pids
[
i
]);

609 
	`¥ötf
("]\n");

611 
tŸÆ
 = 
	`ddú_rw_sum
(
o
->
ios
);

612 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

613 
≥rc
;

615 i‡(!
o
->
ios
[
i
])

618 
ios
[
i
] +
o
->ios[i] + o->
mîges
[i];

619 
	`¥ötf
("%s\n", 
msg
[
i
]);

620 
≥rc
 = ((Ë
o
->
ios
[
i
] * 100.0Ë/ (Ë
tŸÆ
;

621 
	`¥ötf
("\tios: %lu (≥rc=%3.2f%%)\n", 
o
->
ios
[
i
], 
≥rc
);

622 
≥rc
 = ((Ë
o
->
mîges
[
i
] * 100.0Ë/ (Ë
tŸÆ
;

623 
	`¥ötf
("\tmîges: %lu (≥rc=%3.2f%%)\n", 
o
->
mîges
[
i
], 
≥rc
);

624 
≥rc
 = ((Ë
o
->
£q
[
i
] * 100.0Ë/ (Ëo->
ios
[i];

625 
	`¥ötf
("\t£q: %lu (≥rc=%3.2f%%)\n", (Ë
o
->
£q
[
i
], 
≥rc
);

626 
	`¥ötf
("\å©e: %lu KiB/£c\n", 
	`o_to_kib_øã
(
o
, 
i
));

628 
j
 = 0; j < 
o
->
ƒ_bs
[
i
]; j++) {

629 
bs
 *b†&
o
->bs[
i
][
j
];

631 
≥rc
 = (((Ë
bs
->
ƒ
 * 100.0Ë/ (Ë
o
->
ios
[
i
]);

632 
	`¥ötf
("\tbs=%u,Öîc=%3.2f%%\n", 
bs
->bs, 
≥rc
);

636 
	`¥ötf
("dïth:\t%u\n", 
o
->
dïth
);

637 
u£c
 = 
	`o_l⁄ge°_âime
(
o
) / 1000ULL;

638 
	`¥ötf
("u£c:\t%lu (dñay=%Œu)\n", 
u£c
, (Ë
o
->
°¨t_dñay
);

640 
	`¥ötf
("files:\t");

641 
i
 = 0; i < 
p
->
ƒ_fûes
; i++)

642 
	`¥ötf
("%s,", 
p
->
fûes
[
i
].
«me
);

643 
	`¥ötf
("\n");

645 
	`¥ötf
("\n");

646 
	}
}

648 
	$__ouçut_p_fio
(
båa˚_pid
 *
p
, *
ios
)

650 
båa˚_out
 *
o
 = &
p
->o;

651 
tŸÆ
;

652 
time
;

653 
≥rc
;

654 
i
, 
j
;

656 i‡((
o
->
ios
[0] + o->ios[1]) && o->ios[2]) {

657 
	`log_îr
("fio:Årace has bothÑead/writeándÅrim\n");

660 i‡(!
p
->
ƒ_fûes
) {

661 
	`log_îr
("fio:Ço devices found\n");

665 
	`¥ötf
("[pid%u", 
p
->
pid
);

666 i‡(
p
->
ƒ_mîge_pids
)

667 
i
 = 0; i < 
p
->
ƒ_mîge_pids
; i++)

668 
	`¥ötf
(",pid%u", 
p
->
mîge_pids
[
i
]);

669 
	`¥ötf
("]\n");

671 
	`¥ötf
("numjobs=%u\n", 
p
->
numjobs
);

672 
	`¥ötf
("direct=1\n");

673 i‡(
o
->
dïth
 == 1)

674 
	`¥ötf
("ioengine=sync\n");

676 
	`¥ötf
("i€ngöeˆibaio\niodïth=%u\n", 
o
->
dïth
);

678 i‡(
o
->
ios
[0] && !o->ios[1])

679 
	`¥ötf
("rw=randread\n");

680 i‡(!
o
->
ios
[0] && o->ios[1])

681 
	`¥ötf
("rw=randwrite\n");

682 i‡(
o
->
ios
[2])

683 
	`¥ötf
("rw=randtrim\n");

685 
	`¥ötf
("rw=randrw\n");

686 
tŸÆ
 = 
	`ddú_rw_sum
(
o
->
ios
);

687 
≥rc
 = ((Ë
o
->
ios
[0] * 100.0Ë/ (Ë
tŸÆ
;

688 
	`¥ötf
("rwmixªad=%u\n", (Ë
	`Êo‹
(
≥rc
 + 0.50));

691 
	`¥ötf
("percentage_random=");

692 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

693 i‡(
o
->
£q
[
i
] && o->
ios
[i]) {

694 
≥rc
 = ((Ë
o
->
£q
[
i
] * 100.0Ë/ (Ëo->
ios
[i];

695 i‡(
≥rc
 >= 99.0)

696 
≥rc
 = 100.0;

698 
≥rc
 = 100.0;

700 i‡(
i
)

701 
	`¥ötf
(",");

702 
≥rc
 = 100.0 -Öerc;

703 
	`¥ötf
("%u", (Ë
	`Êo‹
(
≥rc
 + 0.5));

705 
	`¥ötf
("\n");

707 
	`¥ötf
("filename=");

708 
i
 = 0; i < 
p
->
ƒ_fûes
; i++) {

709 i‡(
i
)

710 
	`¥ötf
(":");

711 
	`¥ötf
("%s", 
p
->
fûes
[
i
].
«me
);

713 
	`¥ötf
("\n");

715 i‡(
o
->
°¨t_dñay
 / 1000000ULL)

716 
	`¥ötf
("°¨tdñay=%Œus\n", 
o
->
°¨t_dñay
 / 1000000ULL);

718 
time
 = 
	`o_l⁄ge°_âime
(
o
);

719 
time
 = (time + 1000000000ULL - 1) / 1000000000ULL;

720 
	`¥ötf
("ru¡ime=%Œus\n", 
time
);

722 
	`¥ötf
("bssplit=");

723 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

725 i‡(
i
 && 
o
->
ƒ_bs
[i - 1] && o->nr_bs[i])

726 
	`¥ötf
(",");

728 
j
 = 0; j < 
o
->
ƒ_bs
[
i
]; j++) {

729 
bs
 *b†&
o
->bs[
i
][
j
];

731 
≥rc
 = (((Ë
bs
->
ƒ
 * 100.0Ë/ (Ë
o
->
ios
[
i
]);

732 i‡(
≥rc
 < 1.00)

734 i‡(
j
)

735 
	`¥ötf
(":");

736 i‡(
j
 + 1 =
o
->
ƒ_bs
[
i
])

737 
	`¥ötf
("%u/", 
bs
->bs);

739 
	`¥ötf
("%u/%u", 
bs
->bs, (Ë
	`Êo‹
(
≥rc
 + 0.5));

742 
	`¥ötf
("\n");

744 i‡(
£t_øã
) {

745 
	`¥ötf
("rate=");

746 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

747 
øã
;

749 
øã
 = 
	`o_to_kib_øã
(
o
, 
i
);

750 i‡(
i
)

751 
	`¥ötf
(",");

752 i‡(
øã
)

753 
	`¥ötf
("%luk", 
øã
);

755 
	`¥ötf
("\n");

758 i‡(
n_add_›ts
)

759 
i
 = 0; i < 
n_add_›ts
; i++)

760 
	`¥ötf
("%s\n", 
add_›ts
[
i
]);

762 
	`¥ötf
("\n");

764 
	}
}

766 
	$__ouçut_p
(
båa˚_pid
 *
p
, *
ios
)

768 
båa˚_out
 *
o
 = &
p
->o;

769 
i
, 
ªt
 = 0;

771 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

772 i‡(
o
->
ƒ_bs
[
i
] <= 1)

774 
	`qs‹t
(
o
->
bs
[
i
], o->
ƒ_bs
[i], (bs), 
bs_cmp
);

777 i‡(
fûíame
) {

778 
p
->
fûes
 = 
	`mÆloc
((
åa˚_fûe
));

779 
p
->
ƒ_fûes
++;

780 
p
->
fûes
[0].
«me
 = 
fûíame
;

783 i‡(
ouçut_ascii
)

784 
	`__ouçut_p_ascii
(
p
, 
ios
);

786 
ªt
 = 
	`__ouçut_p_fio
(
p
, 
ios
);

788  
ªt
;

789 
	}
}

791 
	$ªmove_ddú
(
båa˚_out
 *
o
, 
rw
)

793 
o
->
ios
[
rw
] = 0;

794 
	}
}

796 
	$¥u√_íåy
(
båa˚_out
 *
o
)

798 
øã
;

799 
uöt64_t
 
time
;

800 
i
;

802 i‡(
	`ddú_rw_sum
(
o
->
ios
Ë< 
ios_thªshﬁd
)

805 
time
 = 
	`o_l⁄ge°_âime
(
o
) / 1000ULL;

806 i‡(
time
 < 
π_thªshﬁd
)

809 
øã
 = 0;

810 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

811 
this_øã
;

813 
this_øã
 = 
	`o_to_kib_øã
(
o
, 
i
);

814 i‡(
this_øã
 < 
øã_thªshﬁd
) {

815 
	`ªmove_ddú
(
o
, 
i
);

816 
this_øã
 = 0;

818 
øã
 +
this_øã
;

821 i‡(
øã
 < 
øã_thªshﬁd
)

825 
	}
}

827 
	$íåy_cmp
(*
¥iv
, 
Êi°_hód
 *
a
, Êi°_hód *
b
)

829 
båa˚_pid
 *
∑
 = 
	`Êi°_íåy
(
a
, båa˚_pid, 
pid_li°
);

830 
båa˚_pid
 *
pb
 = 
	`Êi°_íåy
(
b
, båa˚_pid, 
pid_li°
);

832  
	`ddú_rw_sum
(
pb
->
o
.
ios
Ë- ddú_rw_sum(
∑
->o.ios);

833 
	}
}

835 
	$‰ì_p
(
båa˚_pid
 *
p
)

837 
båa˚_out
 *
o
 = &
p
->o;

838 
i
;

840 
i
 = 0; i < 
p
->
ƒ_fûes
; i++) {

841 i‡(
p
->
fûes
[
i
].
«me
 &&Ö->fûes[i].«mê!
fûíame
)

842 
	`‰ì
(
p
->
fûes
[
i
].
«me
);

845 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

846 
	`‰ì
(
o
->
bs
[
i
]);

848 
	`‰ì
(
p
->
fûes
);

849 
	`Êi°_dñ
(&
p
->
pid_li°
);

850 
	`Êi°_dñ
(&
p
->
hash_li°
);

851 
	`‰ì
(
p
);

852 
	}
}

854 
	$íåõs_˛o£
(
båa˚_pid
 *
pida
, båa˚_pid *
pidb
)

856 
≥rˇ
, 
≥rcb
, 
fdiff
;

857 
i
, 
idiff
;

859 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

860 i‡((
pida
->
o
.
ios
[
i
] && !
pidb
->o.ios[i]) ||

861 (
pidb
->
o
.
ios
[
i
] && !
pida
->o.ios[i]))

863 i‡(
pida
->
o
.
ios
[
i
] && 
pidb
->o.ios[i]) {

864 
≥rˇ
 = ((Ë
pida
->
o
.
£q
[
i
] * 100.0Ë/ (Ëpida->o.
ios
[i];

865 
≥rcb
 = ((Ë
pidb
->
o
.
£q
[
i
] * 100.0Ë/ (Ëpidb->o.
ios
[i];

866 
fdiff
 = 
≥rˇ
 - 
≥rcb
;

867 i‡(
	`Ábs
(
fdiff
Ë> 
øndom_diff
)

871 
idiff
 = 
pida
->
o
.
dïth
 - 
pidb
->o.depth;

872 i‡(
	`abs
(
idiff
Ë> 
dïth_diff
)

877 
	}
}

879 
	$mîge_bs
(
bs
 **
bßp
, *
ƒ_bßp
,

880 
bs
 *
bsb
, 
ƒ_bsb
)

882 
bs
 *
bß
 = *
bßp
;

883 
ƒ_bß
 = *
ƒ_bßp
;

884 
a
, 
b
;

886 
b
 = 0; b < 
ƒ_bsb
; b++) {

887 
√xt
, 
found
 = 0;

889 
a
 = 0;á < 
ƒ_bß
;á++) {

890 i‡(
bsb
[
b
].
bs
 !
bß
[
a
].bs)

893 
bß
[
a
].
ƒ
 +
bsb
[
b
].nr;

894 
bß
[
a
].
mîges
 +
bsb
[
b
].merges;

895 
found
 = 1;

899 i‡(
found
)

902 
√xt
 = *
ƒ_bßp
;

903 
bß
 = 
	`ªÆloc
(bß, (
√xt
 + 1Ë* (
bs
));

904 
bß
[
√xt
].
bs
 = 
bsb
[
b
].bs;

905 
bß
[
√xt
].
ƒ
 = 
bsb
[
b
].nr;

906 (*
ƒ_bßp
)++;

907 *
bßp
 = 
bß
;

909 
	}
}

911 
	$mîge_íåõs
(
båa˚_pid
 *
pida
, båa˚_pid *
pidb
)

913 
i
;

915 i‡(!
	`íåõs_˛o£
(
pida
, 
pidb
))

918 
pida
->
ƒ_mîge_pids
++;

919 
pida
->
mîge_pids
 = 
	`ªÆloc
’ida->mîge_pids,Öida->
ƒ_mîge_pids
 * (
pid_t
));

920 
pida
->
mîge_pids
[pida->
ƒ_mîge_pids
 - 1] = 
pidb
->
pid
;

922 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

923 
båa˚_out
 *
ﬂ
 = &
pida
->
o
;

924 
båa˚_out
 *
ob
 = &
pidb
->
o
;

926 
ﬂ
->
ios
[
i
] +
ob
->ios[i];

927 
ﬂ
->
mîges
[
i
] +
ob
->merges[i];

928 
ﬂ
->
£q
[
i
] +
ob
->seq[i];

929 
ﬂ
->
kib
[
i
] +
ob
->kib[i];

930 
ﬂ
->
fú°_âime
[
i
] = 
	`mö
(ﬂ->fú°_âime[i], 
ob
->first_ttime[i]);

931 
ﬂ
->
œ°_âime
[
i
] = 
	`max
(ﬂ->œ°_âime[i], 
ob
->last_ttime[i]);

932 
	`mîge_bs
(&
ﬂ
->
bs
[
i
], &ﬂ->
ƒ_bs
[i], 
ob
->bs[i], ob->nr_bs[i]);

935 
pida
->
o
.
°¨t_dñay
 = 
	`mö
’ida->o.°¨t_dñay, 
pidb
->o.start_delay);

936 
pida
->
o
.
dïth
 = (pida->o.dïth + 
pidb
->o.depth) / 2;

938 
	}
}

940 
	$check_mîges
(
båa˚_pid
 *
p
, 
Êi°_hód
 *
pidli°
)

942 
Êi°_hód
 *
e
, *
tmp
;

944 i‡(
p
->
ign‹e
)

947 
	`Êi°_f‹_óch_ß„
(
e
, 
tmp
, 
pidli°
) {

948 
båa˚_pid
 *
pidb
;

950 
pidb
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

951 i‡(
pidb
 =
p
)

954 i‡(
	`mîge_íåõs
(
p
, 
pidb
)) {

955 
pidb
->
ign‹e
 = 1;

956 
p
->
numjobs
++;

959 
	}
}

961 
	$ouçut_p
()

963 
ios
[
DDIR_RWDIR_CNT
];

964 
Êi°_hód
 *
e
, *
tmp
;

965 
dïth_dißbÀd
 = 0;

966 
ªt
 = 0;

968 
	`Êi°_f‹_óch_ß„
(
e
, 
tmp
, &
pid_li°
) {

969 
båa˚_pid
 *
p
;

971 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

972 i‡(
	`¥u√_íåy
(&
p
->
o
)) {

973 
	`‰ì_p
(
p
);

976 
p
->
o
.
°¨t_dñay
 = (
	`o_fú°_âime
(&p->oË/ 1000ULLË- 
fú°_âime
;

977 
dïth_dißbÀd
 +
p
->
o
.depth_disabled;

980 i‡(
cﬁœp£_íåõs
) {

981 
båa˚_pid
 *
p
;

983 
	`Êi°_f‹_óch_ß„
(
e
, 
tmp
, &
pid_li°
) {

984 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

985 
	`check_mîges
(
p
, &
pid_li°
);

988 
	`Êi°_f‹_óch_ß„
(
e
, 
tmp
, &
pid_li°
) {

989 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

990 i‡(
p
->
ign‹e
)

991 
	`‰ì_p
(
p
);

995 i‡(
dïth_dißbÀd
)

996 
	`log_îr
("fio: missög com∂ëi⁄Åø˚s, dïth†ˇµedáà%u\n", 
max_dïth
);

998 
	`mem£t
(
ios
, 0, (ios));

1000 
	`Êi°_s‹t
(
NULL
, &
pid_li°
, 
íåy_cmp
);

1002 
	`Êi°_f‹_óch
(
e
, &
pid_li°
) {

1003 
båa˚_pid
 *
p
;

1005 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

1006 
ªt
 |
	`__ouçut_p
(
p
, 
ios
);

1007 i‡(
ªt
 && !
ouçut_ascii
)

1011 i‡(
ouçut_ascii
)

1012 
	`¥ötf
("TŸÆ:Ñóds=%lu, wrôes=%lu\n", 
ios
[0], ios[1]);

1014  
ªt
;

1015 
	}
}

1017 
	$ußge
(*
¨gv
[])

1019 
	`log_îr
("%s: [›ti⁄s] <blkåa˚ bö fûe>\n", 
¨gv
[0]);

1020 
	`log_îr
("\t-t\tUsecÅhresholdÅo ignoreÅask\n");

1021 
	`log_îr
("\t-n\tNumber IOSÅhresholdÅo ignoreÅask\n");

1022 
	`log_îr
("\t-f\tFio job file output\n");

1023 
	`log_îr
("\t-d\tUseÅhis file/device forÑeplay\n");

1024 
	`log_îr
("\t-r\tIgnore jobs withÜessÅhanÅhis KiB/secÑate\n");

1025 
	`log_îr
("\t-R\tSëÑ©êö fiÿjob (def=%u)\n", 
£t_øã
);

1026 
	`log_îr
("\t-D\tC≠ queuêdïtháàthi†vÆuê(def=%u)\n", 
max_dïth
);

1027 
	`log_îr
("\t-c\tCﬁœp£ \"idítiˇl\" job†(def=%u)\n", 
cﬁœp£_íåõs
);

1028 
	`log_îr
("\t-u\tDïth dif„ªn˚ f‹ cﬁœp£ (def=%u)\n", 
dïth_diff
);

1029 
	`log_îr
("\t-x\tR™dom dif„ªn˚ f‹ cﬁœp£ (def=%u)\n", 
øndom_diff
);

1030 
	`log_îr
("\t-a\tAdditional fio optionÅoáddÅo job file\n");

1032 
	}
}

1034 
	$åa˚_√eds_sw≠
(c⁄° *
åa˚_fûe
, *
sw≠
)

1036 
blk_io_åa˚
 
t
;

1037 
fd
, 
ªt
;

1039 *
sw≠
 = -1;

1041 
fd
 = 
	`›í
(
åa˚_fûe
, 
O_RDONLY
);

1042 i‡(
fd
 < 0) {

1043 
	`≥º‹
("open");

1047 
ªt
 = 
	`ªad
(
fd
, &
t
, (t));

1048 i‡(
ªt
 < 0) {

1049 
	`˛o£
(
fd
);

1050 
	`≥º‹
("read");

1052 } i‡(
ªt
 !(
t
)) {

1053 
	`˛o£
(
fd
);

1054 
	`log_îr
("fio: shortÑead onÅrace file\n");

1058 
	`˛o£
(
fd
);

1060 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
)

1061 *
sw≠
 = 0;

1066 
t
.
magic
 = 
	`fio_sw≠32
(t.magic);

1067 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
)

1068 *
sw≠
 = 1;

1071 i‡(*
sw≠
 == -1) {

1072 
	`log_îr
("fio: blktraceáppears corrupt\n");

1077 
	}
}

1079 
	$maö
(
¨gc
, *
¨gv
[])

1081 
√ed_sw≠
, 
i
, 
c
;

1083 i‡(
¨gc
 < 2)

1084  
	`ußge
(
¨gv
);

1086 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "t:n:fd:r:RD:c:u:x:a:")) != -1) {

1087 
c
) {

1089 
£t_øã
 = 1;

1092 
øã_thªshﬁd
 = 
	`©oi
(
›èrg
);

1095 
π_thªshﬁd
 = 
	`©oi
(
›èrg
);

1098 
ios_thªshﬁd
 = 
	`©oi
(
›èrg
);

1101 
ouçut_ascii
 = 0;

1104 
fûíame
 = 
	`°rdup
(
›èrg
);

1107 
max_dïth
 = 
	`©oi
(
›èrg
);

1110 
cﬁœp£_íåõs
 = 
	`©oi
(
›èrg
);

1113 
dïth_diff
 = 
	`©oi
(
›èrg
);

1116 
øndom_diff
 = 
	`©oi
(
›èrg
);

1119 
add_›ts
 = 
	`ªÆloc
◊dd_›ts, (
n_add_›ts
 + 1) * (*));

1120 
add_›ts
[
n_add_›ts
] = 
	`°rdup
(
›èrg
);

1121 
n_add_›ts
++;

1125  
	`ußge
(
¨gv
);

1129 i‡(
¨gc
 =
›töd
)

1130  
	`ußge
(
¨gv
);

1132 i‡(
	`åa˚_√eds_sw≠
(
¨gv
[
›töd
], &
√ed_sw≠
))

1135 
i
 = 0; i < 
PID_HASH_SIZE
; i++)

1136 
	`INIT_FLIST_HEAD
(&
pid_hash
[
i
]);

1137 
i
 = 0; i < 
INFLIGHT_HASH_SIZE
; i++)

1138 
	`INIT_FLIST_HEAD
(&
öÊight_hash
[
i
]);

1140 
	`lﬂd_blkåa˚
(
¨gv
[
›töd
], 
√ed_sw≠
);

1141 
fú°_âime
 /= 1000ULL;

1143  
	`ouçut_p
();

1144 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/debug.c

1 
	~<°dio.h
>

3 
FILE
 *
	gf_îr
;

4 
time•ec
 *
	gfio_ts
 = 
NULL
;

5 
	gfio_debug
 = 0;

7 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...)

9 
	}
}

11 
	$debug_öô
()

13 
f_îr
 = 
°dîr
;

14 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/debug.h

1 #i‚de‡
FIO_DEBUG_INC_H


2 
	#FIO_DEBUG_INC_H


	)

4 
debug_öô
();

	@/home/ysjin/Desktop/fio/fio/t/dedupe.c

6 
	~<°dio.h
>

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<öây≥s.h
>

10 
	~<as£π.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~<sys/io˘l.h
>

14 
	~<f˙é.h
>

15 
	~<°rög.h
>

17 
	~"../Êi°.h
"

18 
	~"../log.h
"

19 
	~"../muãx.h
"

20 
	~"../smÆloc.h
"

21 
	~"../mömax.h
"

22 
	~"../¸c/md5.h
"

23 
	~"../lib/memÆign.h
"

24 
	~"../os/os.h
"

25 
	~"../gëtime.h
"

26 
	~"../fio_time.h
"

27 
	~"../lib/rbåì.h
"

29 
	~"../lib/bloom.h
"

30 
	~"debug.h
"

32 
	sw‹kî_thªad
 {

33 
±hªad_t
 
	mthªad
;

35 vﬁ©ûê
	md⁄e
;

37 
	mfd
;

38 
uöt64_t
 
	mcur_off£t
;

39 
uöt64_t
 
	msize
;

41 
	môems
;

42 
	mdu≥s
;

43 
	mîr
;

46 
	sexã¡
 {

47 
Êi°_hód
 
	mli°
;

48 
uöt64_t
 
	moff£t
;

51 
	schunk
 {

52 
rb_node
 
	mrb_node
;

53 
uöt64_t
 
	mcou¡
;

54 
uöt32_t
 
	mhash
[
MD5_HASH_WORDS
];

55 
Êi°_hód
 
	mexã¡_li°
[0];

58 
	sôem
 {

59 
uöt64_t
 
	moff£t
;

60 
uöt32_t
 
	mhash
[
MD5_HASH_WORDS
];

63 
rb_roŸ
 
	grb_roŸ
;

64 
bloom
 *
	gbloom
;

65 
fio_muãx
 *
	grb_lock
;

67 
	gblocksize
 = 4096;

68 
	gnum_thªads
;

69 
	gchunk_size
 = 1048576;

70 
	gdump_ouçut
;

71 
	godúe˘
;

72 
	gcﬁlisi⁄_check
;

73 
	g¥öt_¥ogªss
 = 1;

74 
	gu£_bloom
 = 1;

76 
uöt64_t
 
	gtŸÆ_size
;

77 
uöt64_t
 
	gcur_off£t
;

78 
fio_muãx
 *
	gsize_lock
;

80 
fio_fûe
 
	gfûe
;

82 
uöt64_t
 
	$gë_size
(
fio_fûe
 *
f
, 
°©
 *
sb
)

84 
uöt64_t
 
ªt
;

86 i‡(
	`S_ISBLK
(
sb
->
°_mode
)) {

87 
byãs
 = 0;

89 i‡(
	`blockdev_size
(
f
, &
byãs
)) {

90 
	`log_îr
("dedupe: failed getting bdev size\n");

93 
ªt
 = 
byãs
;

95 
ªt
 = 
sb
->
°_size
;

97  (
ªt
 & ~((
uöt64_t
)
blocksize
 - 1));

98 
	}
}

100 
	$gë_w‹k
(
uöt64_t
 *
off£t
, uöt64_à*
size
)

102 
uöt64_t
 
this_chunk
;

103 
ªt
 = 1;

105 
	`fio_muãx_down
(
size_lock
);

107 i‡(
cur_off£t
 < 
tŸÆ_size
) {

108 *
off£t
 = 
cur_off£t
;

109 
this_chunk
 = 
	`mö
((
uöt64_t
)
chunk_size
, 
tŸÆ_size
 - 
cur_off£t
);

110 *
size
 = 
this_chunk
;

111 
cur_off£t
 +
this_chunk
;

112 
ªt
 = 0;

115 
	`fio_muãx_up
(
size_lock
);

116  
ªt
;

117 
	}
}

119 
	$__ªad_block
(
fd
, *
buf
, 
off_t
 
off£t
, 
size_t
 
cou¡
)

121 
ssize_t
 
ªt
;

123 
ªt
 = 
	`¥ód
(
fd
, 
buf
, 
cou¡
, 
off£t
);

124 i‡(
ªt
 < 0) {

125 
	`≥º‹
("pread");

127 } i‡(!
ªt
)

129 i‡(
ªt
 !
cou¡
) {

130 
	`log_îr
("dedupe: shortÑead on block\n");

135 
	}
}

137 
	$ªad_block
(
fd
, *
buf
, 
off_t
 
off£t
)

139  
	`__ªad_block
(
fd
, 
buf
, 
off£t
, 
blocksize
);

140 
	}
}

142 
	$add_ôem
(
chunk
 *
c
, 
ôem
 *
i
)

148 i‡(
dump_ouçut
 || 
cﬁlisi⁄_check
) {

149 
exã¡
 *
e
;

151 
e
 = 
	`mÆloc
((*e));

152 
e
->
off£t
 = 
i
->offset;

153 
	`Êi°_add_èû
(&
e
->
li°
, &
c
->
exã¡_li°
[0]);

156 
c
->
cou¡
++;

157 
	}
}

159 
	$cﬁ_check
(
chunk
 *
c
, 
ôem
 *
i
)

161 
exã¡
 *
e
;

162 *
cbuf
, *
ibuf
;

163 
ªt
 = 1;

165 
cbuf
 = 
	`fio_memÆign
(
blocksize
, blocksize);

166 
ibuf
 = 
	`fio_memÆign
(
blocksize
, blocksize);

168 
e
 = 
	`Êi°_íåy
(
c
->
exã¡_li°
[0].
√xt
, 
exã¡
, 
li°
);

169 i‡(
	`ªad_block
(
fûe
.
fd
, 
cbuf
, 
e
->
off£t
))

170 
out
;

172 i‡(
	`ªad_block
(
fûe
.
fd
, 
ibuf
, 
i
->
off£t
))

173 
out
;

175 
ªt
 = 
	`memcmp
(
ibuf
, 
cbuf
, 
blocksize
);

176 
out
:

177 
	`fio_mem‰ì
(
cbuf
, 
blocksize
);

178 
	`fio_mem‰ì
(
ibuf
, 
blocksize
);

179  
ªt
;

180 
	}
}

182 
chunk
 *
	$Æloc_chunk
()

184 
chunk
 *
c
;

186 i‡(
cﬁlisi⁄_check
 || 
dump_ouçut
) {

187 
c
 = 
	`mÆloc
((
chunk
Ë+ (
Êi°_hód
));

188 
	`INIT_FLIST_HEAD
(&
c
->
exã¡_li°
[0]);

190 
c
 = 
	`mÆloc
((
chunk
));

192  
c
;

193 
	}
}

195 
	$ö£π_chunk
(
ôem
 *
i
)

197 
rb_node
 **
p
, *
∑ª¡
;

198 
chunk
 *
c
;

199 
diff
;

201 
p
 = &
rb_roŸ
.
rb_node
;

202 
∑ª¡
 = 
NULL
;

203 *
p
) {

204 
∑ª¡
 = *
p
;

206 
c
 = 
	`rb_íåy
(
∑ª¡
, 
chunk
, 
rb_node
);

207 
diff
 = 
	`memcmp
(
i
->
hash
, 
c
->hash, (i->hash));

208 i‡(
diff
 < 0)

209 
p
 = &(*p)->
rb_À·
;

210 i‡(
diff
 > 0)

211 
p
 = &(*p)->
rb_right
;

213 
ªt
;

215 i‡(!
cﬁlisi⁄_check
)

216 
add
;

218 
	`fio_muãx_up
(
rb_lock
);

219 
ªt
 = 
	`cﬁ_check
(
c
, 
i
);

220 
	`fio_muãx_down
(
rb_lock
);

222 i‡(!
ªt
)

223 
add
;

225 
p
 = &(*p)->
rb_right
;

229 
c
 = 
	`Æloc_chunk
();

230 
	`RB_CLEAR_NODE
(&
c
->
rb_node
);

231 
c
->
cou¡
 = 0;

232 
	`mem˝y
(
c
->
hash
, 
i
->hash, (i->hash));

233 
	`rb_lök_node
(&
c
->
rb_node
, 
∑ª¡
, 
p
);

234 
	`rb_ö£π_cﬁ‹
(&
c
->
rb_node
, &
rb_roŸ
);

235 
add
:

236 
	`add_ôem
(
c
, 
i
);

237 
	}
}

239 
	$ö£π_chunks
(
ôem
 *
ôems
, 
nôems
,

240 
uöt64_t
 *
ndu≥s
)

242 
i
;

244 
	`fio_muãx_down
(
rb_lock
);

246 
i
 = 0; i < 
nôems
; i++) {

247 i‡(
bloom
) {

248 
s
;

249 
r
;

251 
s
 = (
ôems
[
i
].
hash
Ë/ (
uöt32_t
);

252 
r
 = 
	`bloom_£t
(
bloom
, 
ôems
[
i
].
hash
, 
s
);

253 *
ndu≥s
 +
r
;

255 
	`ö£π_chunk
(&
ôems
[
i
]);

258 
	`fio_muãx_up
(
rb_lock
);

259 
	}
}

261 
	$¸c_buf
(*
buf
, 
uöt32_t
 *
hash
)

263 
fio_md5_˘x
 
˘x
 = { .
hash
 = hash };

265 
	`fio_md5_öô
(&
˘x
);

266 
	`fio_md5_upd©e
(&
˘x
, 
buf
, 
blocksize
);

267 
	`fio_md5_föÆ
(&
˘x
);

268 
	}
}

270 
	$ªad_blocks
(
fd
, *
buf
, 
off_t
 
off£t
, 
size_t
 
size
)

272 i‡(
	`__ªad_block
(
fd
, 
buf
, 
off£t
, 
size
))

275  
size
 / 
blocksize
;

276 
	}
}

278 
	$do_w‹k
(
w‹kî_thªad
 *
thªad
, *
buf
)

280 
nblocks
, 
i
;

281 
off_t
 
off£t
;

282 
nôems
 = 0;

283 
uöt64_t
 
ndu≥s
 = 0;

284 
ôem
 *
ôems
;

286 
off£t
 = 
thªad
->
cur_off£t
;

288 
nblocks
 = 
	`ªad_blocks
(
thªad
->
fd
, 
buf
, 
off£t
, 
	`mö
—hªad->
size
, (
uöt64_t
)
chunk_size
));

289 i‡(!
nblocks
)

292 
ôems
 = 
	`mÆloc
((*ôemsË* 
nblocks
);

294 
i
 = 0; i < 
nblocks
; i++) {

295 *
thi•å
 = 
buf
 + (
i
 * 
blocksize
);

297 
ôems
[
i
].
off£t
 = offset;

298 
	`¸c_buf
(
thi•å
, 
ôems
[
i
].
hash
);

299 
off£t
 +
blocksize
;

300 
nôems
++;

303 
	`ö£π_chunks
(
ôems
, 
nôems
, &
ndu≥s
);

305 
	`‰ì
(
ôems
);

306 
thªad
->
ôems
 +
nôems
;

307 
thªad
->
du≥s
 +
ndu≥s
;

309 
	}
}

311 *
	$thªad_‚
(*
d©a
)

313 
w‹kî_thªad
 *
thªad
 = 
d©a
;

314 *
buf
;

316 
buf
 = 
	`fio_memÆign
(
blocksize
, 
chunk_size
);

319 i‡(
	`gë_w‹k
(&
thªad
->
cur_off£t
, &thªad->
size
)) {

320 
thªad
->
îr
 = 1;

323 i‡(
	`do_w‹k
(
thªad
, 
buf
)) {

324 
thªad
->
îr
 = 1;

329 
thªad
->
d⁄e
 = 1;

330 
	`fio_mem‰ì
(
buf
, 
chunk_size
);

331  
NULL
;

332 
	}
}

334 
	$show_¥ogªss
(
w‹kî_thªad
 *
thªads
, 
tŸÆ
)

336 
œ°_nôems
 = 0;

337 
time•ec
 
œ°_tv
;

339 
	`fio_gëtime
(&
œ°_tv
, 
NULL
);

341 
¥öt_¥ogªss
) {

342 
this_ôems
;

343 
nôems
 = 0;

344 
uöt64_t
 
tdiff
;

345 
≥rc
;

346 
some_d⁄e
 = 0;

347 
i
;

349 
i
 = 0; i < 
num_thªads
; i++) {

350 
nôems
 +
thªads
[
i
].
ôems
;

351 
some_d⁄e
 = 
thªads
[
i
].
d⁄e
;

352 i‡(
some_d⁄e
)

356 i‡(
some_d⁄e
)

359 
≥rc
 = (Ë
nôems
 / (Ë
tŸÆ
;

360 
≥rc
 *= 100.0;

361 
this_ôems
 = 
nôems
 - 
œ°_nôems
;

362 
this_ôems
 *
blocksize
;

363 
tdiff
 = 
	`mtime_sö˚_now
(&
œ°_tv
);

364 i‡(
tdiff
) {

365 
this_ôems
 = (this_ôem†* 1000Ë/ (
tdiff
 * 1024);

366 
	`¥ötf
("%3.2f%% d⁄ê(%luKiB/£c)\r", 
≥rc
, 
this_ôems
);

367 
œ°_nôems
 = 
nôems
;

368 
	`fio_gëtime
(&
œ°_tv
, 
NULL
);

370 
	`¥ötf
("%3.2f%% d⁄e\r", 
≥rc
);

371 
	`fÊush
(
°dout
);

372 
	`u¶ìp
(250000);

374 
	}
}

376 
	$run_dedu≥_thªads
(
fio_fûe
 *
f
, 
uöt64_t
 
dev_size
,

377 
uöt64_t
 *
√xã¡s
, uöt64_à*
nchunks
)

379 
w‹kî_thªad
 *
thªads
;

380 
nôems
, 
tŸÆ_ôems
;

381 
i
, 
îr
 = 0;

383 
tŸÆ_size
 = 
dev_size
;

384 
tŸÆ_ôems
 = 
dev_size
 / 
blocksize
;

385 
cur_off£t
 = 0;

386 
size_lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

388 
thªads
 = 
	`mÆloc
(
num_thªads
 * (
w‹kî_thªad
));

389 
i
 = 0; i < 
num_thªads
; i++) {

390 
	`mem£t
(&
thªads
[
i
], 0, (
w‹kî_thªad
));

391 
thªads
[
i
].
fd
 = 
f
->fd;

393 
îr
 = 
	`±hªad_¸óã
(&
thªads
[
i
].
thªad
, 
NULL
, 
thªad_‚
, &threads[i]);

394 i‡(
îr
) {

395 
	`log_îr
("fio:Åhread startup failed\n");

400 
	`show_¥ogªss
(
thªads
, 
tŸÆ_ôems
);

402 
nôems
 = 0;

403 *
√xã¡s
 = 0;

404 *
nchunks
 = 1;

405 
i
 = 0; i < 
num_thªads
; i++) {

406 *
ªt
;

407 
	`±hªad_joö
(
thªads
[
i
].
thªad
, &
ªt
);

408 
nôems
 +
thªads
[
i
].
ôems
;

409 *
nchunks
 +
thªads
[
i
].
du≥s
;

412 
	`¥ötf
("Thªads(%u): %lu iãm†¥o˚s£d\n", 
num_thªads
, 
nôems
);

414 *
√xã¡s
 = 
nôems
;

415 *
nchunks
 = 
nôems
 - *nchunks;

417 
	`fio_muãx_ªmove
(
size_lock
);

418 
	`‰ì
(
thªads
);

419  
îr
;

420 
	}
}

422 
	$dedu≥_check
(c⁄° *
fûíame
, 
uöt64_t
 *
√xã¡s
,

423 
uöt64_t
 *
nchunks
)

425 
uöt64_t
 
dev_size
;

426 
°©
 
sb
;

427 
Êags
;

429 
Êags
 = 
O_RDONLY
;

430 i‡(
odúe˘
)

431 
Êags
 |
OS_O_DIRECT
;

433 
	`mem£t
(&
fûe
, 0, (file));

434 
fûe
.
fûe_«me
 = 
	`°rdup
(
fûíame
);

436 
fûe
.
fd
 = 
	`›í
(
fûíame
, 
Êags
);

437 i‡(
fûe
.
fd
 == -1) {

438 
	`≥º‹
("open");

439 
îr
;

442 i‡(
	`f°©
(
fûe
.
fd
, &
sb
) < 0) {

443 
	`≥º‹
("fstat");

444 
îr
;

447 
dev_size
 = 
	`gë_size
(&
fûe
, &
sb
);

448 i‡(!
dev_size
)

449 
îr
;

451 i‡(
u£_bloom
) {

452 
uöt64_t
 
bloom_íåõs
;

454 
bloom_íåõs
 = 8 * (
dev_size
 / 
blocksize
);

455 
bloom
 = 
	`bloom_√w
(
bloom_íåõs
);

458 
	`¥ötf
("Wû»check <%s>, sizê<%Œu>, usög %uÅhªads\n", 
fûíame
, (Ë
dev_size
, 
num_thªads
);

460  
	`run_dedu≥_thªads
(&
fûe
, 
dev_size
, 
√xã¡s
, 
nchunks
);

461 
îr
:

462 i‡(
fûe
.
fd
 != -1)

463 
	`˛o£
(
fûe
.
fd
);

464 
	`‰ì
(
fûe
.
fûe_«me
);

466 
	}
}

468 
	$show_chunk
(
chunk
 *
c
)

470 
Êi°_hód
 *
n
;

471 
exã¡
 *
e
;

473 
	`¥ötf
("¯hash %8x %8x %8x %8x, cou¡ %lu\n", 
c
->
hash
[0], c->hash[1], c->hash[2], c->hash[3], (Ëc->
cou¡
);

474 
	`Êi°_f‹_óch
(
n
, &
c
->
exã¡_li°
[0]) {

475 
e
 = 
	`Êi°_íåy
(
n
, 
exã¡
, 
li°
);

476 
	`¥ötf
("\toff£à%Œu\n", (Ë
e
->
off£t
);

478 
	}
}

480 
	$show_°©
(
uöt64_t
 
√xã¡s
, uöt64_à
nchunks
)

482 
≥rc
, 
øtio
;

484 
	`¥ötf
("Exã¡s=%lu, Uniquêexã¡s=%lu\n", (Ë
√xã¡s
, (Ë
nchunks
);

486 i‡(
nchunks
) {

487 
øtio
 = (Ë
√xã¡s
 / (Ë
nchunks
;

488 
	`¥ötf
("De-du≥Ñ©io: 1:%3.2f\n", 
øtio
 - 1.0);

490 
	`¥ötf
("De-dupeÑatio: 1:infinite\n");

492 
≥rc
 = 1.00 - ((Ë
nchunks
 / (Ë
√xã¡s
);

493 
≥rc
 *= 100.0;

494 
	`¥ötf
("Fiÿ£âög: dedu≥_≥r˚¡age=%u\n", (Ë(
≥rc
 + 0.50));

496 
	}
}

498 
	$ôî_rb_åì
(
uöt64_t
 *
√xã¡s
, uöt64_à*
nchunks
)

500 
rb_node
 *
n
;

502 *
nchunks
 = *
√xã¡s
 = 0;

504 
n
 = 
	`rb_fú°
(&
rb_roŸ
);

505 i‡(!
n
)

509 
chunk
 *
c
;

511 
c
 = 
	`rb_íåy
(
n
, 
chunk
, 
rb_node
);

512 (*
nchunks
)++;

513 *
√xã¡s
 +
c
->
cou¡
;

515 i‡(
dump_ouçut
)

516 
	`show_chunk
(
c
);

518 } (
n
 = 
	`rb_√xt
“)Ë!
NULL
);

519 
	}
}

521 
	$ußge
(*
¨gv
[])

523 
	`log_îr
("Check for dedupable blocks oná device/file\n\n");

524 
	`log_îr
("%s: [›ti⁄s] <devi˚ o∏fûe>\n", 
¨gv
[0]);

525 
	`log_îr
("\t-b\tChunk sizeÅo use\n");

526 
	`log_îr
("\t-t\tNumber ofÅhreadsÅo use\n");

527 
	`log_îr
("\t-d\tFullÉxtent/chunk debug output\n");

528 
	`log_îr
("\t-o\tUse O_DIRECT\n");

529 
	`log_îr
("\t-c\tFull collision check\n");

530 
	`log_îr
("\t-B\tUseÖrobabilistic bloom filter\n");

531 
	`log_îr
("\t-p\tPrintÖrogress indicator\n");

533 
	}
}

535 
	$maö
(
¨gc
, *
¨gv
[])

537 
uöt64_t
 
√xã¡s
 = 0, 
nchunks
 = 0;

538 
c
, 
ªt
;

540 
	`¨ch_öô
(
¨gv
);

541 
	`debug_öô
();

543 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "b:t:d:o:c:p:B:")) != -1) {

544 
c
) {

546 
blocksize
 = 
	`©oi
(
›èrg
);

549 
num_thªads
 = 
	`©oi
(
›èrg
);

552 
dump_ouçut
 = 
	`©oi
(
›èrg
);

555 
odúe˘
 = 
	`©oi
(
›èrg
);

558 
cﬁlisi⁄_check
 = 
	`©oi
(
›èrg
);

561 
¥öt_¥ogªss
 = 
	`©oi
(
›èrg
);

564 
u£_bloom
 = 
	`©oi
(
›èrg
);

568  
	`ußge
(
¨gv
);

572 i‡(
cﬁlisi⁄_check
 || 
dump_ouçut
)

573 
u£_bloom
 = 0;

575 i‡(!
num_thªads
)

576 
num_thªads
 = 
	`˝us_⁄löe
();

578 i‡(
¨gc
 =
›töd
)

579  
	`ußge
(
¨gv
);

581 
	`söô
();

583 
rb_roŸ
 = 
RB_ROOT
;

584 
rb_lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

586 
ªt
 = 
	`dedu≥_check
(
¨gv
[
›töd
], &
√xã¡s
, &
nchunks
);

588 i‡(!
ªt
) {

589 i‡(!
bloom
)

590 
	`ôî_rb_åì
(&
√xã¡s
, &
nchunks
);

592 
	`show_°©
(
√xã¡s
, 
nchunks
);

595 
	`fio_muãx_ªmove
(
rb_lock
);

596 i‡(
bloom
)

597 
	`bloom_‰ì
(
bloom
);

598 
	`s˛ónup
();

599  
ªt
;

600 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/gen-rand.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<öây≥s.h
>

4 
	~<as£π.h
>

5 
	~<m©h.h
>

6 
	~<°rög.h
>

8 
	~"../lib/ty≥s.h
"

9 
	~"../log.h
"

10 
	~"../lib/lf§.h
"

11 
	~"../lib/axm≠.h
"

12 
	~"../smÆloc.h
"

13 
	~"../mömax.h
"

14 
	~"../lib/ønd.h
"

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
‰™d_°©e
 
s
;

19 
uöt64_t
 
i
, 
°¨t
, 
íd
, 
nvÆues
;

20 *
buckës
, 
ödex
, 
∑ss
, 
Áû
;

21 
p
, 
dev
, 
món
, 
vmö
, 
vmax
;

23 i‡(
¨gc
 < 4) {

24 
	`log_îr
("%s: sèπÉndÇvÆues\n", 
¨gv
[0]);

28 
°¨t
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 10);

29 
íd
 = 
	`°πoul
(
¨gv
[2], 
NULL
, 10);

31 i‡(
°¨t
 >
íd
) {

32 
	`log_îr
("%s: sèπ mu° bêsmÆÀ∏th™Énd\n", 
¨gv
[0]);

35 
ödex
 = 1 + 
íd
 - 
°¨t
;

36 
buckës
 = 
	`ˇŒoc
(
ödex
, ());

38 
nvÆues
 = 
	`°πoul
(
¨gv
[3], 
NULL
, 10);

40 
	`öô_ønd
(&
s
, 
Ál£
);

42 
i
 = 0; i < 
nvÆues
; i++) {

43 
v
 = 
	`ønd32_bëwìn
(&
s
, 
°¨t
, 
íd
);

45 
buckës
[
v
 - 
°¨t
]++;

48 
p
 = 1.0 / 
ödex
;

49 
dev
 = 
	`sqπ
(
nvÆues
 * 
p
 * (1.0 -Ö));

50 
món
 = 
nvÆues
 * 
p
;

51 
vmö
 = 
món
 - 
dev
;

52 
vmax
 = 
món
 + 
dev
;

54 
∑ss
 = 
Áû
 = 0;

55 
i
 = 0; i < 
ödex
; i++) {

56 i‡(
buckës
[
i
] < 
vmö
 || buckës[i] > 
vmax
) {

57 
	`¥ötf
("FAIL buckë%4lu: vÆ=%8lu (%.1‡< %.1‡> %.1f)\n", (Ë
i
 + 1, 
buckës
[i], 
vmö
, 
món
, 
vmax
);

58 
Áû
++;

60 
	`¥ötf
("PASS buckë%4lu: vÆ=%8lu (%.1‡< %.1‡> %.1f)\n", (Ë
i
 + 1, 
buckës
[i], 
vmö
, 
món
, 
vmax
);

61 
∑ss
++;

65 
	`¥ötf
("Pas£s=%lu, Faû=%lu\n", 
∑ss
, 
Áû
);

66 
	`‰ì
(
buckës
);

68 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/genzipf.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<f˙é.h
>

18 
	~<°rög.h
>

19 
	~<uni°d.h
>

21 
	~"../lib/zùf.h
"

22 
	~"../lib/gauss.h
"

23 
	~"../Êi°.h
"

24 
	~"../hash.h
"

26 
	#DEF_NR_OUTPUT
 20

	)

28 
	snode
 {

29 
Êi°_hód
 
	mli°
;

30 
	mvÆ
;

31 
	mhôs
;

34 
Êi°_hód
 *
	ghash
;

35 
	ghash_bôs
 = 24;

36 
	ghash_size
 = 1 << 24;

39 
	mTYPE_NONE
 = 0,

40 
	mTYPE_ZIPF
,

41 
	mTYPE_PARETO
,

42 
	mTYPE_NORMAL
,

44 c⁄° *
	gdi°_ty≥s
[] = { "None", "Zipf", "Pareto", "Normal" };

47 
	mOUTPUT_NORMAL
,

48 
	mOUTPUT_CSV
,

51 
	gdi°_ty≥
 = 
TYPE_ZIPF
;

52 
	ggib_size
 = 500;

53 
	gblock_size
 = 4096;

54 
	gouçut_ƒ™ges
 = 
DEF_NR_OUTPUT
;

55 
	g≥r˚¡age
;

56 
	gdi°_vÆ
;

57 
	gouçut_ty≥
 = 
OUTPUT_NORMAL
;

59 
	#DEF_ZIPF_VAL
 1.2

	)

60 
	#DEF_PARETO_VAL
 0.3

	)

62 
	$hashv
(
vÆ
)

64  
	`jhash
(&
vÆ
, (vÆ), 0Ë& (
hash_size
 - 1);

65 
	}
}

67 
node
 *
	$hash_lookup
(
vÆ
)

69 
Êi°_hód
 *
l
 = &
hash
[
	`hashv
(
vÆ
)];

70 
Êi°_hód
 *
íåy
;

71 
node
 *
n
;

73 
	`Êi°_f‹_óch
(
íåy
, 
l
) {

74 
n
 = 
	`Êi°_íåy
(
íåy
, 
node
, 
li°
);

75 i‡(
n
->
vÆ
 == val)

76  
n
;

79  
NULL
;

80 
	}
}

82 
	$hash_ö£π
(
node
 *
n
, 
vÆ
)

84 
Êi°_hód
 *
l
 = &
hash
[
	`hashv
(
vÆ
)];

86 
n
->
vÆ
 = val;

87 
n
->
hôs
 = 1;

88 
	`Êi°_add_èû
(&
n
->
li°
, 
l
);

89 
	}
}

91 
	$ußge
()

93 
	`¥ötf
("genzipf:Åest zipf/pareto values for fio input\n");

94 
	`¥ötf
("\t-h\tThis help screen\n");

95 
	`¥ötf
("\t-p\tGenerate size of data setÅhatáre hit byÅhisÖercentage\n");

96 
	`¥ötf
("\t-t\tDistributionÅype (zipf,Öareto, orÇormal)\n");

97 
	`¥ötf
("\t-i\tDistributionálgorithm input (zipfÅheta,ÖaretoÖower,\n"

99 
	`¥ötf
("\t-b\tBlock size ofá givenÑange (in bytes)\n");

100 
	`¥ötf
("\t-g\tSize of data set (in gigabytes)\n");

101 
	`¥ötf
("\t-o\tNumber of outputÑows\n");

102 
	`¥ötf
("\t-c\tOutputÑanges in CSV format\n");

103 
	}
}

105 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

107 c⁄° *
›t°rög
 = "t:g:i:o:b:p:ch";

108 
c
, 
di°_vÆ_£t
 = 0;

110 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
›t°rög
)) != -1) {

111 
c
) {

113 
	`ußge
();

116 
≥r˚¡age
 = 
	`©of
(
›èrg
);

119 
block_size
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

122 i‡(!
	`°∫cmp
(
›èrg
, "zipf", 4))

123 
di°_ty≥
 = 
TYPE_ZIPF
;

124 i‡(!
	`°∫cmp
(
›èrg
, "pareto", 6))

125 
di°_ty≥
 = 
TYPE_PARETO
;

126 i‡(!
	`°∫cmp
(
›èrg
, "normal", 6))

127 
di°_ty≥
 = 
TYPE_NORMAL
;

129 
	`¥ötf
("wr⁄g di°Åy≥: %s\n", 
›èrg
);

134 
gib_size
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

137 
di°_vÆ
 = 
	`©of
(
›èrg
);

138 
di°_vÆ_£t
 = 1;

141 
ouçut_ƒ™ges
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

144 
ouçut_ty≥
 = 
OUTPUT_CSV
;

147 
	`¥ötf
("bad o±i⁄ %c\n", 
c
);

152 i‡(
di°_ty≥
 =
TYPE_PARETO
) {

153 i‡((
di°_vÆ
 >= 1.00 || dist_val < 0.00)) {

154 
	`¥ötf
("pareto input must be > 0.00ánd < 1.00\n");

157 i‡(!
di°_vÆ_£t
)

158 
di°_vÆ
 = 
DEF_PARETO_VAL
;

159 } i‡(
di°_ty≥
 =
TYPE_ZIPF
) {

160 i‡(
di°_vÆ
 == 1.0) {

161 
	`¥ötf
("zipf input must be differentÅhan 1.0\n");

164 i‡(!
di°_vÆ_£t
)

165 
di°_vÆ
 = 
DEF_ZIPF_VAL
;

169 
	}
}

171 
	souçut_sum
 {

172 
	mouçut
;

173 
	mƒ™ges
;

176 
	$node_cmp
(c⁄° *
p1
, c⁄° *
p2
)

178 c⁄° 
node
 *
n1
 = 
p1
;

179 c⁄° 
node
 *
n2
 = 
p2
;

181  
n2
->
hôs
 - 
n1
->hits;

182 
	}
}

184 
	$ouçut_csv
(
node
 *
nodes
, 
¬odes
)

186 
i
;

188 
	`¥ötf
("rank, count\n");

189 
i
 = 0; i < 
¬odes
; i++)

190 
	`¥ötf
("%lu, %lu\n", 
i
, 
nodes
[i].
hôs
);

191 
	}
}

193 
	$ouçut_n‹mÆ
(
node
 *
nodes
, 
¬odes
,

194 
ƒ™ges
)

196 
i
, 
j
, 
cur_vÆs
, 
öãrvÆ_°ï
, 
√xt_öãrvÆ
, 
tŸÆ_vÆs
;

197 
blocks
 = 
≥r˚¡age
 * 
¬odes
 / 100;

198 
hô_≥r˚¡_sum
 = 0;

199 
hô_sum
 = 0;

200 
≥rc
, 
≥rc_i
;

201 
ouçut_sum
 *
ouçut_sums
;

203 
öãrvÆ_°ï
 = (
¬odes
 - 1Ë/ 
ouçut_ƒ™ges
 + 1;

204 
√xt_öãrvÆ
 = 
öãrvÆ_°ï
;

205 
ouçut_sums
 = 
	`mÆloc
(
ouçut_ƒ™ges
 * (
ouçut_sum
));

207 
i
 = 0; i < 
ouçut_ƒ™ges
; i++) {

208 
ouçut_sums
[
i
].
ouçut
 = 0.0;

209 
ouçut_sums
[
i
].
ƒ™ges
 = 0;

212 
j
 = 
tŸÆ_vÆs
 = 
cur_vÆs
 = 0;

214 
i
 = 0; i < 
¬odes
; i++) {

215 
ouçut_sum
 *
os
 = &
ouçut_sums
[
j
];

216 
node
 *nodê&
nodes
[
i
];

217 
cur_vÆs
 +
node
->
hôs
;

218 
tŸÆ_vÆs
 +
node
->
hôs
;

219 
os
->
ƒ™ges
 +
node
->
hôs
;

220 i‡(
i
 =(
√xt_öãrvÆ
Ë-1 || i =
¬odes
 - 1) {

221 
os
->
ouçut
 = (Ë
cur_vÆs
 / (Ë
ƒ™ges
;

222 
os
->
ouçut
 *= 100.0;

223 
cur_vÆs
 = 0;

224 
√xt_öãrvÆ
 +
öãrvÆ_°ï
;

225 
j
++;

228 i‡(
≥r˚¡age
) {

229 i‡(
tŸÆ_vÆs
 >
blocks
) {

230 
cs
 = (Ë
i
 * 
block_size
 / (1024.0 * 1024.0);

231 
p
 = 'M';

233 i‡(
cs
 > 1024.0) {

234 
cs
 /= 1024.0;

235 
p
 = 'G';

237 i‡(
cs
 > 1024.0) {

238 
cs
 /= 1024.0;

239 
p
 = 'T';

242 
	`¥ötf
("%.2f%% o‡hô†ßtisfõd i¿%.3f%cB o‡ˇche\n", 
≥r˚¡age
, 
cs
, 
p
);

243 
≥r˚¡age
 = 0.0;

248 
≥rc_i
 = 100.0 / ()
ouçut_ƒ™ges
;

249 
≥rc
 = 0.0;

251 
	`¥ötf
("\n Rows Hits %% Sum %% # Hits Size\n");

252 
	`¥ötf
("-----------------------------------------------------------------------\n");

253 
i
 = 0; i < 
ouçut_ƒ™ges
; i++) {

254 
ouçut_sum
 *
os
 = &
ouçut_sums
[
i
];

255 
gb
 = ()
os
->
ƒ™ges
 * 
block_size
 / 1024.0;

256 
p
 = 'K';

258 i‡(
gb
 > 1024.0) {

259 
p
 = 'M';

260 
gb
 /= 1024.0;

262 i‡(
gb
 > 1024.0) {

263 
p
 = 'G';

264 
gb
 /= 1024.0;

267 
≥rc
 +
≥rc_i
;

268 
hô_≥r˚¡_sum
 +
os
->
ouçut
;

269 
hô_sum
 +
os
->
ƒ™ges
;

270 
	`¥ötf
("%s %6.2f%%\t%6.2f%%\t\t%6.2f%%\t\t%8u\t%6.2f%c\n",

271 
i
 ? "|->" : "T›", 
≥rc
, 
os
->
ouçut
, 
hô_≥r˚¡_sum
,

272 
os
->
ƒ™ges
, 
gb
, 
p
);

275 
	`¥ötf
("-----------------------------------------------------------------------\n");

276 
	`¥ötf
("TŸÆ\t\t\t\t\t\t%8Œu\n", 
hô_sum
);

277 
	`‰ì
(
ouçut_sums
);

278 
	}
}

280 
	$maö
(
¨gc
, *
¨gv
[])

282 
off£t
;

283 
ƒ™ges
;

284 
¬odes
;

285 
node
 *
nodes
;

286 
zùf_°©e
 
zs
;

287 
gauss_°©e
 
gs
;

288 
i
, 
j
;

290 i‡(
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
))

293 i‡(
ouçut_ty≥
 !
OUTPUT_CSV
)

294 
	`¥ötf
("Generating %s distribution with %f inputánd %lu GiB sizeánd %lu block_size.\n",

295 
di°_ty≥s
[
di°_ty≥
], 
di°_vÆ
, 
gib_size
, 
block_size
);

297 
ƒ™ges
 = 
gib_size
 * 1024 * 1024 * 1024ULL;

298 
ƒ™ges
 /
block_size
;

300 i‡(
di°_ty≥
 =
TYPE_ZIPF
)

301 
	`zùf_öô
(&
zs
, 
ƒ™ges
, 
di°_vÆ
, 1);

302 i‡(
di°_ty≥
 =
TYPE_PARETO
)

303 
	`∑ªto_öô
(&
zs
, 
ƒ™ges
, 
di°_vÆ
, 1);

305 
	`gauss_öô
(&
gs
, 
ƒ™ges
, 
di°_vÆ
, 1);

307 
hash_bôs
 = 0;

308 
hash_size
 = 
ƒ™ges
;

309 (
hash_size
 >>= 1) != 0)

310 
hash_bôs
++;

312 
hash_size
 = 1 << 
hash_bôs
;

314 
hash
 = 
	`ˇŒoc
(
hash_size
, (
Êi°_hód
));

315 
i
 = 0; i < 
hash_size
; i++)

316 
	`INIT_FLIST_HEAD
(&
hash
[
i
]);

318 
nodes
 = 
	`mÆloc
(
ƒ™ges
 * (
node
));

320 
i
 = 
j
 = 0; i < 
ƒ™ges
; i++) {

321 
node
 *
n
;

323 i‡(
di°_ty≥
 =
TYPE_ZIPF
)

324 
off£t
 = 
	`zùf_√xt
(&
zs
);

325 i‡(
di°_ty≥
 =
TYPE_PARETO
)

326 
off£t
 = 
	`∑ªto_√xt
(&
zs
);

328 
off£t
 = 
	`gauss_√xt
(&
gs
);

330 
n
 = 
	`hash_lookup
(
off£t
);

331 i‡(
n
)

332 
n
->
hôs
++;

334 
	`hash_ö£π
(&
nodes
[
j
], 
off£t
);

335 
j
++;

339 
	`qs‹t
(
nodes
, 
j
, (
node
), 
node_cmp
);

340 
¬odes
 = 
j
;

342 i‡(
ouçut_ty≥
 =
OUTPUT_CSV
)

343 
	`ouçut_csv
(
nodes
, 
¬odes
);

345 
	`ouçut_n‹mÆ
(
nodes
, 
¬odes
, 
ƒ™ges
);

347 
	`‰ì
(
hash
);

348 
	`‰ì
(
nodes
);

350 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/ieee754.c

1 
	~<°dio.h
>

2 
	~"../lib/õì754.h
"

4 
	gvÆues
[] = { -17.23, 17.23, 123.4567, 98765.4321, 0.0 };

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
uöt64_t
 
i
;

9 
f
;

10 
j
;

12 
j
 = 0;

14 
i
 = 
	`fio_doubÀ_to_uöt64
(
vÆues
[
j
]);

15 
f
 = 
	`fio_uöt64_to_doubÀ
(
i
);

16 
	`¥ötf
("%‡-> %f\n", 
vÆues
[
j
], 
f
);

17 
j
++;

18 } 
vÆues
[
j
] != 0.0);

21 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/lfsr-test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<time.h
>

4 
	~<m©h.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

10 
	~"../lib/lf§.h
"

11 
	~"../gëtime.h
"

12 
	~"../fio_time.h
"

14 
	$ußge
()

16 
	`¥ötf
("Usage:Üfsr-test 0x<numbers> [seed] [spin] [verify]\n");

17 
	`¥ötf
("-------------------------------------------------------------\n");

18 
	`¥ötf
("*numbers: how manyÑandomÇumbersÅoÖroduce (in hex)\n"

25 
	}
}

27 
	$maö
(
¨gc
, *
¨gv
[])

29 
r
;

30 
time•ec
 
°¨t
, 
íd
;

31 
fio_lf§
 *
Ê
;

32 
vîify
 = 0;

33 
•ö
 = 0;

34 
uöt64_t
 
£ed
 = 0;

35 
uöt64_t
 
numbîs
;

36 
uöt64_t
 
v_size
;

37 
uöt64_t
 
i
;

38 *
v
 = 
NULL
, *
v_°¨t
;

39 
tŸÆ
, 
món
;

41 
	`¨ch_öô
(
¨gv
);

44 
¨gc
) {

45 5: i‡(
	`°∫cmp
(
¨gv
[4], "verify", 7) == 0)

46 
vîify
 = 1;

47 4: 
•ö
 = 
	`©oi
(
¨gv
[3]);

48 3: 
£ed
 = 
	`©ﬁ
(
¨gv
[2]);

49 2: 
numbîs
 = 
	`°πﬁ
(
¨gv
[1], 
NULL
, 16);

51 : 
	`ußge
();

56 
Ê
 = 
	`mÆloc
((
fio_lf§
));

57 i‡(!
Ê
) {

58 
	`≥º‹
("malloc");

62 
r
 = 
	`lf§_öô
(
Ê
, 
numbîs
, 
£ed
, 
•ö
);

63 i‡(
r
) {

64 
	`¥ötf
("Initialization failed.\n");

65  
r
;

69 
	`¥ötf
("LFSR specs\n");

70 
	`¥ötf
("==========================\n");

71 
	`¥ötf
("Sizêi† %u\n", 64 - 
	`__buûtö_˛zl
(
Ê
->
ˇched_bô
));

72 
	`¥ötf
("Max vÆ i† %lu\n", (Ë
Ê
->
max_vÆ
);

73 
	`¥ötf
("XOR-mask i† 0x%lX\n", (Ë
Ê
->
x‹mask
);

74 
	`¥ötf
("Sìd i† %lu\n", (Ë
Ê
->
œ°_vÆ
);

75 
	`¥ötf
("Spö i† %u\n", 
Ê
->
•ö
);

76 
	`¥ötf
("Cy˛êÀngth i†%lu\n", (Ë
Ê
->
cy˛e_Àngth
);

79 i‡(
vîify
) {

80 
v_size
 = 
numbîs
 * (
uöt8_t
);

81 
v
 = 
	`mÆloc
(
v_size
);

82 
	`mem£t
(
v
, 0, 
v_size
);

83 
	`¥ötf
("\nVîifiˇti⁄ÅabÀ i†%l‡KiB\n", ()(
v_size
) / 1024);

85 
v_°¨t
 = 
v
;

92 
	`Ârötf
(
°dîr
, "\nTest initiated... ");

93 
	`fio_gëtime
(&
°¨t
, 
NULL
);

94 !
	`lf§_√xt
(
Ê
, &
i
)) {

95 i‡(
vîify
)

96 *(
uöt8_t
 *)(
v
 + 
i
) += 1;

98 
	`fio_gëtime
(&
íd
, 
NULL
);

99 
	`Ârötf
(
°dîr
, "finished.\n");

103 
r
 = 0;

104 i‡(
vîify
) {

105 
	`Ârötf
(
°dîr
, "VerifyingÑesults... ");

106 
i
 = 0; i < 
numbîs
; i++) {

107 i‡(*(
uöt8_t
 *)(
v
 + 
i
) != 1) {

108 
	`Ârötf
(
°dîr
, "failed (%lu = %d).\n",

109 (Ë
i
,

110 *(
uöt8_t
 *)(
v
 + 
i
));

111 
r
 = 1;

115 i‡(!
r
)

116 
	`Ârötf
(
°dîr
, "OK!\n");

120 
tŸÆ
 = 
	`utime_sö˚
(&
°¨t
, &
íd
);

121 
món
 = 
tŸÆ
 / 
Ê
->
num_vÆs
;

123 
	`¥ötf
("\nTimeÑesults ");

124 i‡(
vîify
)

125 
	`¥ötf
("(slower dueÅo verification)");

126 
	`¥ötf
("\n==============================\n");

127 
	`¥ötf
("Eœp£d: %l‡s\n", 
tŸÆ
 / 
	`pow
(10,6));

128 
	`¥ötf
("Món: %l‡us\n", 
món
);

130 
	`‰ì
(
v_°¨t
);

131 
	`‰ì
(
Ê
);

132  
r
;

133 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/log.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

3 
	~"../mömax.h
"

5 
size_t
 
	$log_îr
(c⁄° *
f‹m©
, ...)

7 
buf„r
[1024];

8 
va_li°
 
¨gs
;

9 
size_t
 
Àn
;

11 
	`va_°¨t
(
¨gs
, 
f‹m©
);

12 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
f‹m©
, 
¨gs
);

13 
	`va_íd
(
¨gs
);

14 
Àn
 = 
	`mö
÷í, (
buf„r
) - 1);

16  
	`fwrôe
(
buf„r
, 
Àn
, 1, 
°dîr
);

17 
	}
}

19 
size_t
 
	$log_öfo
(c⁄° *
f‹m©
, ...)

21 
buf„r
[1024];

22 
va_li°
 
¨gs
;

23 
size_t
 
Àn
;

25 
	`va_°¨t
(
¨gs
, 
f‹m©
);

26 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
f‹m©
, 
¨gs
);

27 
	`va_íd
(
¨gs
);

28 
Àn
 = 
	`mö
÷í, (
buf„r
) - 1);

30  
	`fwrôe
(
buf„r
, 
Àn
, 1, 
°dout
);

31 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/memlock.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<±hªad.h
>

6 
	sthªad_d©a
 {

7 
	mmib
;

8 } 
	gtd
;

10 *
	$w‹kî
(*
d©a
)

12 
thªad_d©a
 *
td
 = 
d©a
;

13 
ödex
;

14 
size_t
 
size
;

15 *
buf
;

16 
i
, 
fú°
 = 1;

18 
size
 = 
td
->
mib
 * 1024UL * 1024UL;

19 
buf
 = 
	`mÆloc
(
size
);

21 
i
 = 0; i < 100000; i++) {

22 
ödex
 = 0; index + 4096 < 
size
; index += 4096)

23 
	`mem£t
(&
buf
[
ödex
+512], 0x89, 512);

24 i‡(
fú°
) {

25 
	`¥ötf
("lo›%d: did %lu MiB\n", 
i
+1, 
size
/(1024UL*1024UL));

26 
fú°
 = 0;

29  
NULL
;

30 
	}
}

32 
	$maö
(
¨gc
, *
¨gv
[])

34 
mib
, 
thªads
;

35 
±hªad_t
 *
±hªads
;

36 
i
;

38 i‡(
¨gc
 < 3) {

39 
	`¥ötf
("%s: <MiBÖîÅhªad> <thªads>\n", 
¨gv
[0]);

43 
mib
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 10);

44 
thªads
 = 
	`°πoul
(
¨gv
[2], 
NULL
, 10);

46 
±hªads
 = 
	`ˇŒoc
(
thªads
, (
±hªad_t
));

47 
td
.
mib
 = mib;

49 
i
 = 0; i < 
thªads
; i++)

50 
	`±hªad_¸óã
(&
±hªads
[
i
], 
NULL
, 
w‹kî
, &
td
);

52 
i
 = 0; i < 
thªads
; i++) {

53 *
ªt
;

55 
	`±hªad_joö
(
±hªads
[
i
], &
ªt
);

58 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/read-to-pipe-async.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<sys/time.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/°©.h
>

30 
	~<öây≥s.h
>

31 
	~<°rög.h
>

32 
	~<±hªad.h
>

33 
	~<î∫o.h
>

34 
	~<as£π.h
>

36 
	~"../Êi°.h
"

38 
	gbs
 = 4096;

39 
	gmax_us
 = 10000;

40 *
	gfûe
;

41 
	g£∑øã_wrôî
 = 1;

43 
	#PLAT_BITS
 8

	)

44 
	#PLAT_VAL
 (1 << 
PLAT_BITS
)

	)

45 
	#PLAT_GROUP_NR
 19

	)

46 
	#PLAT_NR
 (
PLAT_GROUP_NR
 * 
PLAT_VAL
)

	)

47 
	#PLAT_LIST_MAX
 20

	)

49 
	s°©s
 {

50 
	m∂©
[
PLAT_NR
];

51 
	mƒ_ßm∂es
;

52 
	mmax
;

53 
	mmö
;

54 
	movî
;

57 
	g∂i°
[
PLAT_LIST_MAX
] = { 50.0, 75.0, 90.0, 95.0, 99.0, 99.5, 99.9, 99.99, 99.999, 99.9999, };

59 
	sthªad_d©a
 {

60 
	mexô
;

61 
	md⁄e
;

62 
±hªad_muãx_t
 
	mlock
;

63 
±hªad_c⁄d_t
 
	mc⁄d
;

64 
±hªad_muãx_t
 
	md⁄e_lock
;

65 
±hªad_c⁄d_t
 
	md⁄e_c⁄d
;

66 
±hªad_t
 
	mthªad
;

69 
	swrôî_thªad
 {

70 
Êi°_hód
 
	mli°
;

71 
Êi°_hód
 
	md⁄e_li°
;

72 
°©s
 
	ms
;

73 
thªad_d©a
 
	mthªad
;

76 
	sªadî_thªad
 {

77 
Êi°_hód
 
	mli°
;

78 
Êi°_hód
 
	md⁄e_li°
;

79 
	m°¨ãd
;

80 
	mbusy
;

81 
	mwrôe_£q
;

82 
°©s
 
	ms
;

83 
thªad_d©a
 
	mthªad
;

86 
	sw‹k_ôem
 {

87 
Êi°_hód
 
	mli°
;

88 *
	mbuf
;

89 
size_t
 
	mbuf_size
;

90 
off_t
 
	moff
;

91 
	mfd
;

92 
	m£q
;

93 
wrôî_thªad
 *
	mwrôî
;

94 
ªadî_thªad
 *
	mªadî
;

95 
±hªad_muãx_t
 
	mlock
;

96 
±hªad_c⁄d_t
 
	mc⁄d
;

97 
±hªad_t
 
	mthªad
;

100 
ªadî_thªad
 
	gªadî_thªad
;

101 
wrôî_thªad
 
	gwrôî_thªad
;

103 
uöt64_t
 
	$utime_sö˚
(c⁄° 
timevÆ
 *
s
, c⁄° timevÆ *
e
)

105 
£c
, 
u£c
;

106 
uöt64_t
 
ªt
;

108 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

109 
u£c
 = 
e
->
tv_u£c
 - 
s
->tv_usec;

110 i‡(
£c
 > 0 && 
u£c
 < 0) {

111 
£c
--;

112 
u£c
 += 1000000;

115 i‡(
£c
 < 0 || (£¯=0 && 
u£c
 < 0))

118 
ªt
 = 
£c
 * 1000000ULL + 
u£c
;

120  
ªt
;

121 
	}
}

123 
w‹k_ôem
 *
	$föd_£q
(
wrôî_thªad
 *
w
, 
£q
)

125 
w‹k_ôem
 *
w‹k
;

126 
Êi°_hód
 *
íåy
;

128 i‡(
	`Êi°_em±y
(&
w
->
li°
))

129  
NULL
;

131 
	`Êi°_f‹_óch
(
íåy
, &
w
->
li°
) {

132 
w‹k
 = 
	`Êi°_íåy
(
íåy
, 
w‹k_ôem
, 
li°
);

133 i‡(
w‹k
->
£q
 == seq)

134  
w‹k
;

137  
NULL
;

138 
	}
}

140 
	$∂©_vÆ_to_idx
(
vÆ
)

142 
msb
, 
îr‹_bôs
, 
ba£
, 
off£t
;

145 i‡(
vÆ
 == 0)

146 
msb
 = 0;

148 
msb
 = (
vÆ
)*8 - 
	`__buûtö_˛z
(val) - 1;

154 i‡(
msb
 <
PLAT_BITS
)

155  
vÆ
;

158 
îr‹_bôs
 = 
msb
 - 
PLAT_BITS
;

161 
ba£
 = (
îr‹_bôs
 + 1Ë<< 
PLAT_BITS
;

167 
off£t
 = (
PLAT_VAL
 - 1Ë& (
vÆ
 >> 
îr‹_bôs
);

170  (
ba£
 + 
off£t
Ë< (
PLAT_NR
 - 1) ?

171 (
ba£
 + 
off£t
Ë: (
PLAT_NR
 - 1);

172 
	}
}

178 
	$∂©_idx_to_vÆ
(
idx
)

180 
îr‹_bôs
, 
k
, 
ba£
;

182 
	`as£π
(
idx
 < 
PLAT_NR
);

186 i‡(
idx
 < (
PLAT_VAL
 << 1))

187  
idx
;

190 
îr‹_bôs
 = (
idx
 >> 
PLAT_BITS
) - 1;

191 
ba£
 = 1 << (
îr‹_bôs
 + 
PLAT_BITS
);

194 
k
 = 
idx
 % 
PLAT_VAL
;

197  
ba£
 + ((
k
 + 0.5Ë* (1 << 
îr‹_bôs
));

198 
	}
}

200 
	$add_œt
(
°©s
 *
s
, 
us
, c⁄° *
«me
)

202 
œt_ödex
 = 0;

204 i‡(
us
 > 
s
->
max
)

205 
s
->
max
 = 
us
;

206 i‡(
us
 < 
s
->
mö
)

207 
s
->
mö
 = 
us
;

209 i‡(
us
 > 
max_us
) {

210 
	`Ârötf
(
°dîr
, "%†œãncy=%u u£c\n", 
«me
, 
us
);

211 
s
->
ovî
++;

214 
œt_ödex
 = 
	`∂©_vÆ_to_idx
(
us
);

215 
	`__sync_„tch_™d_add
(&
s
->
∂©
[
œt_ödex
], 1);

216 
	`__sync_„tch_™d_add
(&
s
->
ƒ_ßm∂es
, 1);

217 
	}
}

219 
	$wrôe_w‹k
(
w‹k_ôem
 *
w‹k
)

221 
timevÆ
 
s
, 
e
;

222 
ssize_t
 
ªt
;

224 
	`gëtimeofday
(&
s
, 
NULL
);

225 
ªt
 = 
	`wrôe
(
STDOUT_FILENO
, 
w‹k
->
buf
, w‹k->
buf_size
);

226 
	`gëtimeofday
(&
e
, 
NULL
);

227 
	`as£π
(
ªt
 =
w‹k
->
buf_size
);

229 
	`add_œt
(&
w‹k
->
wrôî
->
s
, 
	`utime_sö˚
(&s, &
e
), "write");

230  
w‹k
->
£q
 + 1;

231 
	}
}

233 
	$thªad_exôög
(
thªad_d©a
 *
thªad
)

235 
	`__sync_„tch_™d_add
(&
thªad
->
d⁄e
, 1);

236 
	`±hªad_c⁄d_sig«l
(&
thªad
->
d⁄e_c⁄d
);

237 
	}
}

239 *
	$wrôî_‚
(*
d©a
)

241 
wrôî_thªad
 *
wt
 = 
d©a
;

242 
w‹k_ôem
 *
w‹k
;

243 
£q
 = 1;

245 
w‹k
 = 
NULL
;

246 !
wt
->
thªad
.
exô
 || !
	`Êi°_em±y
(&wt->
li°
)) {

247 
	`±hªad_muãx_lock
(&
wt
->
thªad
.
lock
);

249 i‡(
w‹k
) {

250 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
wt
->
d⁄e_li°
);

251 
w‹k
 = 
NULL
;

254 
w‹k
 = 
	`föd_£q
(
wt
, 
£q
);

255 i‡(
w‹k
)

256 
	`Êi°_dñ_öô
(&
w‹k
->
li°
);

258 
	`±hªad_c⁄d_waô
(&
wt
->
thªad
.
c⁄d
, &wt->thªad.
lock
);

260 
	`±hªad_muãx_u∆ock
(&
wt
->
thªad
.
lock
);

262 i‡(
w‹k
)

263 
£q
 = 
	`wrôe_w‹k
(
w‹k
);

266 
	`thªad_exôög
(&
wt
->
thªad
);

267  
NULL
;

268 
	}
}

270 
	$ªadî_w‹k
(
w‹k_ôem
 *
w‹k
)

272 
timevÆ
 
s
, 
e
;

273 
ssize_t
 
ªt
;

274 
size_t
 
À·
;

275 *
buf
;

276 
off_t
 
off
;

278 
	`gëtimeofday
(&
s
, 
NULL
);

280 
À·
 = 
w‹k
->
buf_size
;

281 
buf
 = 
w‹k
->buf;

282 
off
 = 
w‹k
->off;

283 
À·
) {

284 
ªt
 = 
	`¥ód
(
w‹k
->
fd
, 
buf
, 
À·
, 
off
);

285 i‡(!
ªt
) {

286 
	`Ârötf
(
°dîr
, "zeroÑead\n");

288 } i‡(
ªt
 < 0) {

289 
	`Ârötf
(
°dîr
, "î∫o=%d\n", 
î∫o
);

292 
À·
 -
ªt
;

293 
off
 +
ªt
;

294 
buf
 +
ªt
;

297 
	`gëtimeofday
(&
e
, 
NULL
);

299 
	`add_œt
(&
w‹k
->
ªadî
->
s
, 
	`utime_sö˚
(&s, &
e
), "read");

301 
	`±hªad_c⁄d_sig«l
(&
w‹k
->
c⁄d
);

303 i‡(
£∑øã_wrôî
) {

304 
	`±hªad_muãx_lock
(&
w‹k
->
wrôî
->
thªad
.
lock
);

305 
	`Êi°_add_èû
(&
w‹k
->
li°
, &w‹k->
wrôî
->list);

306 
	`±hªad_muãx_u∆ock
(&
w‹k
->
wrôî
->
thªad
.
lock
);

307 
	`±hªad_c⁄d_sig«l
(&
w‹k
->
wrôî
->
thªad
.
c⁄d
);

309 
ªadî_thªad
 *
π
 = 
w‹k
->
ªadî
;

310 
w‹k_ôem
 *
√xt
 = 
NULL
;

311 
Êi°_hód
 *
íåy
;

316 i‡(
w‹k
->
£q
 =
π
->
wrôe_£q
)

317 
wrôe_ô
;

319 
	`±hªad_muãx_lock
(&
π
->
thªad
.
lock
);

321 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
π
->
d⁄e_li°
);

326 
w‹k
 = 
NULL
;

327 
	`Êi°_f‹_óch
(
íåy
, &
π
->
d⁄e_li°
) {

328 
√xt
 = 
	`Êi°_íåy
(
íåy
, 
w‹k_ôem
, 
li°
);

329 i‡(
√xt
->
£q
 =
π
->
wrôe_£q
) {

330 
w‹k
 = 
√xt
;

331 
	`Êi°_dñ
(&
w‹k
->
li°
);

336 
	`±hªad_muãx_u∆ock
(&
π
->
thªad
.
lock
);

338 i‡(
w‹k
) {

339 
wrôe_ô
:

340 
	`wrôe_w‹k
(
w‹k
);

341 
	`__sync_„tch_™d_add
(&
π
->
wrôe_£q
, 1);

344 
	}
}

346 *
	$ªadî_⁄e_off
(*
d©a
)

348 
	`ªadî_w‹k
(
d©a
);

349  
NULL
;

350 
	}
}

352 *
	$ªadî_‚
(*
d©a
)

354 
ªadî_thªad
 *
π
 = 
d©a
;

355 
w‹k_ôem
 *
w‹k
;

357 !
π
->
thªad
.
exô
 || !
	`Êi°_em±y
(&π->
li°
)) {

358 
w‹k
 = 
NULL
;

359 
	`±hªad_muãx_lock
(&
π
->
thªad
.
lock
);

360 i‡(!
	`Êi°_em±y
(&
π
->
li°
)) {

361 
w‹k
 = 
	`Êi°_fú°_íåy
(&
π
->
li°
, 
w‹k_ôem
,Üist);

362 
	`Êi°_dñ_öô
(&
w‹k
->
li°
);

364 
	`±hªad_c⁄d_waô
(&
π
->
thªad
.
c⁄d
, &π->thªad.
lock
);

365 
	`±hªad_muãx_u∆ock
(&
π
->
thªad
.
lock
);

367 i‡(
w‹k
) {

368 
	`__sync_„tch_™d_add
(&
π
->
busy
, 1);

369 
	`ªadî_w‹k
(
w‹k
);

370 
	`__sync_„tch_™d_sub
(&
π
->
busy
, 1);

374 
	`thªad_exôög
(&
π
->
thªad
);

375  
NULL
;

376 
	}
}

378 
	$queue_w‹k
(
ªadî_thªad
 *
π
, 
w‹k_ôem
 *
w‹k
)

380 i‡(!
π
->
°¨ãd
) {

381 
	`±hªad_muãx_lock
(&
π
->
thªad
.
lock
);

382 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
π
->list);

383 
	`±hªad_muãx_u∆ock
(&
π
->
thªad
.
lock
);

385 
π
->
°¨ãd
 = 1;

386 
	`±hªad_¸óã
(&
π
->
thªad
.thªad, 
NULL
, 
ªadî_‚
,Ñt);

387 } i‡(!
π
->
busy
 && !
	`±hªad_muãx_åylock
(&π->
thªad
.
lock
)) {

388 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
π
->list);

389 
	`±hªad_muãx_u∆ock
(&
π
->
thªad
.
lock
);

391 
	`±hªad_c⁄d_sig«l
(&
π
->
thªad
.
c⁄d
);

393 
ªt
 = 
	`±hªad_¸óã
(&
w‹k
->
thªad
, 
NULL
, 
ªadî_⁄e_off
, work);

394 i‡(
ªt
)

395 
	`Ârötf
(
°dîr
, "±hªad_¸óã=%d\n", 
ªt
);

397 
	`±hªad_dëach
(
w‹k
->
thªad
);

399 
	}
}

401 
	$ˇlc_≥r˚¡ûes
(*
io_u_∂©
, 
ƒ
,

402 **
ouçut
)

404 
sum
 = 0;

405 
Àn
, 
i
, 
j
 = 0;

406 
ovÆ_Àn
 = 0;

407 *
ovÆs
 = 
NULL
;

408 
is_œ°
;

410 
Àn
 = 0;

411 
Àn
 < 
PLAT_LIST_MAX
 && 
∂i°
[len] != 0.0)

412 
Àn
++;

414 i‡(!
Àn
)

420 
is_œ°
 = 0;

421 
i
 = 0; i < 
PLAT_NR
 && !
is_œ°
; i++) {

422 
sum
 +
io_u_∂©
[
i
];

423 
sum
 >(
∂i°
[
j
] / 100.0 * 
ƒ
)) {

424 
	`as£π
(
∂i°
[
j
] <= 100.0);

426 i‡(
j
 =
ovÆ_Àn
) {

427 
ovÆ_Àn
 += 100;

428 
ovÆs
 = 
	`ªÆloc
(ovÆs, 
ovÆ_Àn
 * ());

431 
ovÆs
[
j
] = 
	`∂©_idx_to_vÆ
(
i
);

432 
is_œ°
 = (
j
 =
Àn
 - 1);

433 i‡(
is_œ°
)

436 
j
++;

440 *
ouçut
 = 
ovÆs
;

441  
Àn
;

442 
	}
}

444 
	$show_œãncõs
(
°©s
 *
s
, c⁄° *
msg
)

446 *
ovÆs
 = 
NULL
;

447 
Àn
, 
i
;

449 
Àn
 = 
	`ˇlc_≥r˚¡ûes
(
s
->
∂©
, s->
ƒ_ßm∂es
, &
ovÆs
);

450 i‡(
Àn
) {

451 
	`Ârötf
(
°dîr
, "L©ícyÖî˚¡ûe†(u£cË(%s)\n", 
msg
);

452 
i
 = 0; i < 
Àn
; i++)

453 
	`Ârötf
(
°dîr
, "\t%2.4·h: %u\n", 
∂i°
[
i
], 
ovÆs
[i]);

456 i‡(
ovÆs
)

457 
	`‰ì
(
ovÆs
);

459 
	`Ârötf
(
°dîr
, "\tOvî=%u, mö=%u, max=%u\n", 
s
->
ovî
, s->
mö
, s->
max
);

460 
	}
}

462 
	$öô_thªad
(
thªad_d©a
 *
thªad
)

464 
	`±hªad_c⁄d_öô
(&
thªad
->
c⁄d
, 
NULL
);

465 
	`±hªad_c⁄d_öô
(&
thªad
->
d⁄e_c⁄d
, 
NULL
);

466 
	`±hªad_muãx_öô
(&
thªad
->
lock
, 
NULL
);

467 
	`±hªad_muãx_öô
(&
thªad
->
d⁄e_lock
, 
NULL
);

468 
thªad
->
exô
 = 0;

469 
	}
}

471 
exô_thªad
(
thªad_d©a
 *
thªad
,

472 
‚
(
wrôî_thªad
 *),

473 
wrôî_thªad
 *
wt
)

475 
__sync_„tch_™d_add
(&
thªad
->
exô
, 1);

476 
±hªad_c⁄d_sig«l
(&
thªad
->
c⁄d
);

478 !
	gthªad
->
	gd⁄e
) {

479 
±hªad_muãx_lock
(&
thªad
->
d⁄e_lock
);

481 i‡(
	g‚
) {

482 
timevÆ
 
	gtv
;

483 
time•ec
 
	gts
;

485 
gëtimeofday
(&
tv
, 
NULL
);

486 
	gts
.
	gtv_£c
 = 
tv
.
tv_£c
 + 1;

487 
	gts
.
	gtv_n£c
 = 
tv
.
tv_u£c
 * 1000ULL;

489 
±hªad_c⁄d_timedwaô
(&
thªad
->
d⁄e_c⁄d
, &thªad->
d⁄e_lock
, &
ts
);

490 
‚
(
wt
);

492 
±hªad_c⁄d_waô
(&
thªad
->
d⁄e_c⁄d
, &thªad->
d⁄e_lock
);

494 
±hªad_muãx_u∆ock
(&
thªad
->
d⁄e_lock
);

498 
	$ußge
(*
¨gv
[])

500 
	`Ârötf
(
°dîr
, "%s: [-b blocksize] [-àmax u£c] [-w sï¨©êwrôî] -‡fûe\n", 
¨gv
[0]);

502 
	}
}

504 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

506 
c
;

508 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f:b:t:w:")) != -1) {

509 
c
) {

511 
fûe
 = 
	`°rdup
(
›èrg
);

514 
bs
 = 
	`©oi
(
›èrg
);

517 
max_us
 = 
	`©oi
(
›èrg
);

520 
£∑øã_wrôî
 = 
	`©oi
(
›èrg
);

521 i‡(!
£∑øã_wrôî
)

522 
	`Ârötf
(
°dîr
, "inline writing is broken\n");

526  
	`ußge
(
¨gv
);

530 i‡(!
fûe
)

531  
	`ußge
(
¨gv
);

534 
	}
}

536 
	$¥u√_d⁄e_íåõs
(
wrôî_thªad
 *
wt
)

538 
	`FLIST_HEAD
(
li°
);

540 i‡(
	`Êi°_em±y
(&
wt
->
d⁄e_li°
))

543 i‡(
	`±hªad_muãx_åylock
(&
wt
->
thªad
.
lock
))

546 i‡(!
	`Êi°_em±y
(&
wt
->
d⁄e_li°
))

547 
	`Êi°_•li˚_öô
(&
wt
->
d⁄e_li°
, &
li°
);

548 
	`±hªad_muãx_u∆ock
(&
wt
->
thªad
.
lock
);

550 !
	`Êi°_em±y
(&
li°
)) {

551 
w‹k_ôem
 *
w‹k
;

553 
w‹k
 = 
	`Êi°_fú°_íåy
(&
li°
, 
w‹k_ôem
,Üist);

554 
	`Êi°_dñ
(&
w‹k
->
li°
);

556 
	`±hªad_c⁄d_de°roy
(&
w‹k
->
c⁄d
);

557 
	`±hªad_muãx_de°roy
(&
w‹k
->
lock
);

558 
	`‰ì
(
w‹k
->
buf
);

559 
	`‰ì
(
w‹k
);

561 
	}
}

563 
	$maö
(
¨gc
, *
¨gv
[])

565 
timevÆ
 
s
, 
ª
, 
we
;

566 
ªadî_thªad
 *
π
;

567 
wrôî_thªad
 *
wt
;

568 
øã
;

569 
°©
 
sb
;

570 
size_t
 
byãs
;

571 
off_t
 
off
;

572 
fd
, 
£q
;

574 i‡(
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
))

577 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

578 i‡(
fd
 < 0) {

579 
	`≥º‹
("open");

583 i‡(
	`f°©
(
fd
, &
sb
) < 0) {

584 
	`≥º‹
("stat");

588 
wt
 = &
wrôî_thªad
;

589 
	`öô_thªad
(&
wt
->
thªad
);

590 
	`INIT_FLIST_HEAD
(&
wt
->
li°
);

591 
	`INIT_FLIST_HEAD
(&
wt
->
d⁄e_li°
);

592 
wt
->
s
.
max
 = 0;

593 
wt
->
s
.
mö
 = -1U;

594 
	`±hªad_¸óã
(&
wt
->
thªad
.thªad, 
NULL
, 
wrôî_‚
, wt);

596 
π
 = &
ªadî_thªad
;

597 
	`öô_thªad
(&
π
->
thªad
);

598 
	`INIT_FLIST_HEAD
(&
π
->
li°
);

599 
	`INIT_FLIST_HEAD
(&
π
->
d⁄e_li°
);

600 
π
->
s
.
max
 = 0;

601 
π
->
s
.
mö
 = -1U;

602 
π
->
wrôe_£q
 = 1;

604 
off
 = 0;

605 
£q
 = 0;

606 
byãs
 = 0;

608 
	`gëtimeofday
(&
s
, 
NULL
);

610 
sb
.
°_size
) {

611 
w‹k_ôem
 *
w‹k
;

612 
size_t
 
this_Àn
;

613 
time•ec
 
ts
;

614 
timevÆ
 
tv
;

616 
	`¥u√_d⁄e_íåõs
(
wt
);

618 
this_Àn
 = 
sb
.
°_size
;

619 i‡(
this_Àn
 > 
bs
)

620 
this_Àn
 = 
bs
;

622 
w‹k
 = 
	`ˇŒoc
(1, (*work));

623 
w‹k
->
buf
 = 
	`mÆloc
(
this_Àn
);

624 
w‹k
->
buf_size
 = 
this_Àn
;

625 
w‹k
->
off
 = off;

626 
w‹k
->
fd
 = fd;

627 
w‹k
->
£q
 = ++seq;

628 
w‹k
->
wrôî
 = 
wt
;

629 
w‹k
->
ªadî
 = 
π
;

630 
	`±hªad_c⁄d_öô
(&
w‹k
->
c⁄d
, 
NULL
);

631 
	`±hªad_muãx_öô
(&
w‹k
->
lock
, 
NULL
);

633 
	`queue_w‹k
(
π
, 
w‹k
);

635 
	`gëtimeofday
(&
tv
, 
NULL
);

636 
ts
.
tv_£c
 = 
tv
.tv_sec;

637 
ts
.
tv_n£c
 = 
tv
.
tv_u£c
 * 1000ULL;

638 
ts
.
tv_n£c
 +
max_us
 * 1000ULL;

639 i‡(
ts
.
tv_n£c
 >= 1000000000ULL) {

640 
ts
.
tv_n£c
 -= 1000000000ULL;

641 
ts
.
tv_£c
++;

644 
	`±hªad_muãx_lock
(&
w‹k
->
lock
);

645 
	`±hªad_c⁄d_timedwaô
(&
w‹k
->
c⁄d
, &w‹k->
lock
, &
ts
);

646 
	`±hªad_muãx_u∆ock
(&
w‹k
->
lock
);

648 
off
 +
this_Àn
;

649 
sb
.
°_size
 -
this_Àn
;

650 
byãs
 +
this_Àn
;

653 
	`exô_thªad
(&
π
->
thªad
, 
NULL
, NULL);

654 
	`gëtimeofday
(&
ª
, 
NULL
);

656 
	`exô_thªad
(&
wt
->
thªad
, 
¥u√_d⁄e_íåõs
, wt);

657 
	`gëtimeofday
(&
we
, 
NULL
);

659 
	`show_œãncõs
(&
π
->
s
, "READERS");

660 
	`show_œãncõs
(&
wt
->
s
, "WRITERS");

662 
byãs
 /= 1024;

663 
øã
 = (
byãs
 * 1000UL * 1000ULË/ 
	`utime_sö˚
(&
s
, &
ª
);

664 
	`Ârötf
(
°dîr
, "RódÑ©ê(KiB/£cË: %lu\n", 
øã
);

665 
øã
 = (
byãs
 * 1000UL * 1000ULË/ 
	`utime_sö˚
(&
s
, &
we
);

666 
	`Ârötf
(
°dîr
, "Wrôêøã (KiB/£c): %lu\n", 
øã
);

668 
	`˛o£
(
fd
);

670 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/stest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<as£π.h
>

5 
	~"../smÆloc.h
"

6 
	~"../Êi°.h
"

7 
	~"../¨ch/¨ch.h
"

8 
	~"debug.h
"

10 
	#MAGIC1
 0xa9b1c8d2

	)

11 
	#MAGIC2
 0xf0a1e9b3

	)

13 
	#LOOPS
 32

	)

15 
	sñem
 {

16 
	mmagic1
;

17 
Êi°_hód
 
	mli°
;

18 
	mmagic2
;

21 
FLIST_HEAD
(
li°
);

23 
	$do_ønd_Ælocs
()

25 
size
, 
ƒ
, 
rounds
 = 0;

26 
tŸÆ
;

27 
ñem
 *
e
;

29 
rounds
++ < 
LOOPS
) {

30 #ifde‡
STEST_SEED


31 
	`§™d
(
MAGIC1
);

33 
ƒ
 = 
tŸÆ
 = 0;

34 
tŸÆ
 < 120*1024*1024UL) {

35 
size
 = 8 * (
ñem
Ë+ (Ë(999.0 * (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)));

36 
e
 = 
	`smÆloc
(
size
);

37 i‡(!
e
) {

38 
	`¥ötf
("Áûáà%lu, sizê%u\n", 
tŸÆ
, 
size
);

41 
e
->
magic1
 = 
MAGIC1
;

42 
e
->
magic2
 = 
MAGIC2
;

43 
tŸÆ
 +
size
;

44 
	`Êi°_add_èû
(&
e
->
li°
, &list);

45 
ƒ
++;

48 
	`¥ötf
("GŸ iãms: %u\n", 
ƒ
);

50 !
	`Êi°_em±y
(&
li°
)) {

51 
e
 = 
	`Êi°_íåy
(
li°
.
√xt
, 
ñem
,Üist);

52 
	`as£π
(
e
->
magic1
 =
MAGIC1
);

53 
	`as£π
(
e
->
magic2
 =
MAGIC2
);

54 
	`Êi°_dñ
(&
e
->
li°
);

55 
	`s‰ì
(
e
);

60 
	}
}

62 
	$maö
(
¨gc
, *
¨gv
[])

64 
	`¨ch_öô
(
¨gv
);

65 
	`söô
();

66 
	`debug_öô
();

68 
	`do_ønd_Ælocs
();

70 
	`s˛ónup
();

72 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/time-test.c

78 
	~<°dio.h
>

79 
	~<°dlib.h
>

80 
	~<limôs.h
>

81 
	~<as£π.h
>

82 
	~<°dlib.h
>

83 
	~"lib/£qlock.h
"

85 
	#DEBUG
 0

	)

86 
	#MAX_CLOCK_SEC
 365*24*60*60ULL

	)

87 
	#MAX_CLOCK_SEC_2STAGE
 60*60ULL

	)

88 
	#d¥ötf
(...Ëi‡(
DEBUG
Ë{ 
	`¥ötf
(
__VA_ARGS__
); }

	)

91 
	m__CLOCK64_BIT
 = 1 << 0,

92 
	m__CLOCK128_BIT
 = 1 << 1,

93 
	m__CLOCK_MULT_SHIFT
 = 1 << 2,

94 
	m__CLOCK_EMULATE_128
 = 1 << 3,

95 
	m__CLOCK_2STAGE
 = 1 << 4,

96 
	m__CLOCK_LOCK
 = 1 << 5,

98 
	mCLOCK64_MULT_SHIFT
 = 
__CLOCK64_BIT
 | 
__CLOCK_MULT_SHIFT
,

99 
	mCLOCK64_EMULATE_128
 = 
__CLOCK64_BIT
 | 
__CLOCK_EMULATE_128
,

100 
	mCLOCK64_2STAGE
 = 
__CLOCK64_BIT
 | 
__CLOCK_2STAGE
,

101 
	mCLOCK64_LOCK
 = 
__CLOCK64_BIT
 | 
__CLOCK_LOCK
,

102 
	mCLOCK128_MULT_SHIFT
 = 
__CLOCK128_BIT
 | 
__CLOCK_MULT_SHIFT
,

105 
£qlock
 
	g˛ock_£qlock
;

106 
	gcy˛es_°¨t
;

107 
	gñ≠£d_n£c
;

109 
	gmax_cy˛es_shi·
;

110 
	gmax_cy˛es_mask
;

111 
	gn£cs_f‹_max_cy˛es
;

113 
	g˛ock_shi·
;

114 
	g˛ock_mu…
;

116 *
	gn£cs
;

117 
	g˛ock_mu…64_128
[2];

118 
__uöt128_t
 
	g˛ock_mu…128
;

134 
	$do_mu…
(
a
[2], 
b
,

135 
¥odu˘
[2])

137 
¥odu˘
[0] =Öroduct[1] = 0;

139 
	}
}

141 
	$do_div
(
a
[2], 
b
,

142 
c
[2])

145 
	}
}

147 
	$do_shi·64
(
a
[2], 
cou¡
)

149 
a
[0] =á[1] >> (
cou¡
-64);

150 
a
[1] = 0;

151 
	}
}

153 
	$do_shi·
(
a
[2], 
cou¡
)

155 i‡(
cou¡
 > 64)

156 
	`do_shi·64
(
a
, 
cou¡
);

158 
cou¡
--) {

159 
a
[0] >>= 1;

160 
a
[0] |=á[1] << 63;

161 
a
[1] >>= 1;

164 
	}
}

166 
	$upd©e_˛ock
(
t
)

168 
	`wrôe_£qlock_begö
(&
˛ock_£qlock
);

169 
ñ≠£d_n£c
 = (
t
 >> 
max_cy˛es_shi·
Ë* 
n£cs_f‹_max_cy˛es
;

170 
cy˛es_°¨t
 = 
t
 & ~
max_cy˛es_mask
;

171 
	`wrôe_£qlock_íd
(&
˛ock_£qlock
);

172 
	}
}

174 
	$_gë_n£c
(
mode
, 
t
)

176 
mode
) {

177 
CLOCK64_MULT_SHIFT
:

178  (
t
 * 
˛ock_mu…
Ë>> 
˛ock_shi·
;

179 
CLOCK64_EMULATE_128
: {

180 
¥odu˘
[2] = { };

182 
	`do_mu…
(
˛ock_mu…64_128
, 
t
, 
¥odu˘
);

183 
	`do_shi·
(
¥odu˘
, 
˛ock_shi·
);

184  
¥odu˘
[0];

186 
CLOCK64_2STAGE
: {

187 
mu…ùÀs
, 
n£c
;

189 
mu…ùÀs
 = 
t
 >> 
max_cy˛es_shi·
;

190 
	`d¥ötf
("mu…ùÀs=%Œu\n", 
mu…ùÀs
);

191 
n£c
 = 
mu…ùÀs
 * 
n£cs_f‹_max_cy˛es
;

192 
n£c
 +((
t
 & 
max_cy˛es_mask
Ë* 
˛ock_mu…
Ë>> 
˛ock_shi·
;

193  
n£c
;

195 
CLOCK64_LOCK
: {

196 
£q
;

197 
n£c
;

200 
£q
 = 
	`ªad_£qlock_begö
(&
˛ock_£qlock
);

201 
n£c
 = 
ñ≠£d_n£c
;

202 
n£c
 +((
t
 - 
cy˛es_°¨t
Ë* 
˛ock_mu…
Ë>> 
˛ock_shi·
;

203 } 
	`ªad_£qlock_ªåy
(&
˛ock_£qlock
, 
£q
));

204  
n£c
;

206 
CLOCK128_MULT_SHIFT
:

207  ()((
t
 * 
˛ock_mu…128
Ë>> 
˛ock_shi·
);

209 
	`as£π
(0);

211 
	}
}

213 
	$gë_n£c
(
mode
, 
t
)

215 i‡(
mode
 =
CLOCK64_LOCK
) {

216 
	`upd©e_˛ock
(
t
);

219  
	`_gë_n£c
(
mode
, 
t
);

220 
	}
}

222 
	$ˇlc_mu…_shi·
(
mode
, *
mu…
, *
shi·
,

223 
max_£c
,

224 
cy˛es_≥r_u£c
)

226 
max_ticks
;

227 
max_ticks
 = 
max_£c
 * 
cy˛es_≥r_u£c
 * 1000000ULL;

229 
mode
) {

230 
CLOCK64_MULT_SHIFT
: {

231 
max_mu…
, 
tmp
;

232 
s·
 = 0;

239 
max_mu…
 = 
ULLONG_MAX
 / 
max_ticks
;

240 
	`d¥ötf
("max_ticks=%Œu, __buûtö_˛zŒ=%d, max_mu…=%Œu\n", 
max_ticks
, 
	`__buûtö_˛zŒ
(max_ticks), 
max_mu…
);

246 
tmp
 = 
max_mu…
 * 
cy˛es_≥r_u£c
 / 1000;

247 
tmp
 > 1) {

248 
tmp
 >>= 1;

249 
s·
++;

250 
	`d¥ötf
("tmp=%Œu, s·=%u\n", 
tmp
, 
s·
);

253 *
shi·
 = 
s·
;

254 *((*)
mu…
Ë(Ë((1ULL << 
s·
Ë* 1000 / 
cy˛es_≥r_u£c
);

257 
CLOCK64_EMULATE_128
: {

258 
max_mu…
[2], 
tmp
[2] = { };

259 
s·
 = 0;

267 
max_mu…
[0] = max_mu…[1] = 
ULLONG_MAX
;

268 
	`do_div
(
max_mu…
, 
max_ticks
, max_mult);

269 
	`d¥ötf
("max_ticks=%llu, __builtin_clzll=%d, max_mult=0x%016llx%016llx\n",

270 
max_ticks
, 
	`__buûtö_˛zŒ
(max_ticks), 
max_mu…
[1], max_mult[0]);

276 
	`do_div
(
max_mu…
, 
cy˛es_≥r_u£c
, 
tmp
);

277 
	`do_div
(
tmp
, 1000ULL,Åmp);

278 
tmp
[0] > 1 ||Åmp[1] > 1) {

279 
	`do_shi·
(
tmp
, 1);

280 
s·
++;

281 
	`d¥ötf
("tmp=0x%016Œx%016Œx, s·=%u\n", 
tmp
[1],Åmp[0], 
s·
);

284 *
shi·
 = 
s·
;

288 
CLOCK64_2STAGE
: {

289 
tmp
;

305 
	`ˇlc_mu…_shi·
(
CLOCK64_MULT_SHIFT
, 
mu…
, 
shi·
, 
MAX_CLOCK_SEC_2STAGE
, 
cy˛es_≥r_u£c
);

308 
max_cy˛es_shi·
 = 
max_cy˛es_mask
 = 0;

309 
tmp
 = 
MAX_CLOCK_SEC_2STAGE
 * 1000000ULL * 
cy˛es_≥r_u£c
;

310 
	`d¥ötf
("tmp=%Œu, max_cy˛es_shi·=%u\n", 
tmp
, 
max_cy˛es_shi·
);

311 
tmp
 > 1) {

312 
tmp
 >>= 1;

313 
max_cy˛es_shi·
++;

314 
	`d¥ötf
("tmp=%Œu, max_cy˛es_shi·=%u\n", 
tmp
, 
max_cy˛es_shi·
);

318 
n£cs_f‹_max_cy˛es
 = (1ULL << 
max_cy˛es_shi·
Ë* *((*)
mu…
Ë>> *
shi·
;

321 
tmp
 = 0;Åm∞< 
max_cy˛es_shi·
;Åmp++)

322 
max_cy˛es_mask
 |1ULL << 
tmp
;

324 
	`d¥ötf
("max_cycles_shift=%u, 2^max_cycles_shift=%llu,Çsecs_for_max_cycles=%llu, max_cycles_mask=%016llx\n",

325 
max_cy˛es_shi·
, (1ULL << max_cycles_shift),

326 
n£cs_f‹_max_cy˛es
, 
max_cy˛es_mask
);

331 
CLOCK64_LOCK
: {

344 
	`ˇlc_mu…_shi·
(
CLOCK64_2STAGE
, 
mu…
, 
shi·
, 
MAX_CLOCK_SEC
, 
cy˛es_≥r_u£c
);

345 
cy˛es_°¨t
 = 0;

348 
CLOCK128_MULT_SHIFT
: {

349 
__uöt128_t
 
max_mu…
, 
tmp
;

350 
s·
 = 0;

357 
max_mu…
 = ((
__uöt128_t
Ë
ULLONG_MAX
) << 64 | ULLONG_MAX;

358 
max_mu…
 /
max_ticks
;

359 
	`d¥ötf
("max_ticks=%llu, __builtin_clzll=%d, max_mult=0x%016llx%016llx\n",

360 
max_ticks
, 
	`__buûtö_˛zŒ
(max_ticks),

361 (Ë(
max_mu…
 >> 64),

362 (Ë
max_mu…
);

368 
tmp
 = 
max_mu…
 * 
cy˛es_≥r_u£c
 / 1000;

369 
tmp
 > 1) {

370 
tmp
 >>= 1;

371 
s·
++;

372 
	`d¥ötf
("tmp=0x%016llx%016llx, sft=%u\n",

373 (Ë(
tmp
 >> 64),

374 (Ë
tmp
, 
s·
);

377 *
shi·
 = 
s·
;

378 *((
__uöt128_t
 *)
mu…
Ë(__uöt128_tË(((__uöt128_t)1 << 
s·
Ë* 1000 / 
cy˛es_≥r_u£c
);

382 
	}
}

384 
	$disc⁄töuôy
(
mode
, 
dñè_ticks
, 
dñè_n£c
,

385 
°¨t
, 
Àn
)

387 
i
;

388 
mism©ches
 = 0, 
bad_mism©ches
 = 0;

389 
dñè
, 
max_mism©ch
 = 0;

390 *
ns
 = 
n£cs
;

392 
i
 = 0; i < 
Àn
; 
ns
++, i++) {

393 *
ns
 = 
	`gë_n£c
(
mode
, 
°¨t
 + 
i
);

394 i‡(
i
 - 
dñè_ticks
 >= 0) {

395 i‡(*
ns
 > *“†- 
dñè_ticks
))

396 
dñè
 = *
ns
 - *“†- 
dñè_ticks
);

398 
dñè
 = *(
ns
 - 
dñè_ticks
) - *ns;

399 i‡(
dñè
 > 
dñè_n£c
)

400 
dñè
 -
dñè_n£c
;

402 
dñè
 = 
dñè_n£c
 - delta;

403 i‡(
dñè
) {

404 
mism©ches
++;

405 i‡(
dñè
 > 1)

406 
bad_mism©ches
++;

407 i‡(
dñè
 > 
max_mism©ch
)

408 
max_mism©ch
 = 
dñè
;

411 i‡(!
bad_mism©ches
)

412 
	`as£π
(
max_mism©ch
 == 0 || max_mismatch == 1);

413 i‡(!
mism©ches
)

414 
	`as£π
(
max_mism©ch
 == 0);

417 
	`¥ötf
("%lu discontinuities (%lu%%) (%luÉrrors > 1ns, max delta = %lluns) forÅicks = %llu...%llu\n",

418 
mism©ches
, (mism©che†* 100Ë/ 
Àn
, 
bad_mism©ches
, 
max_mism©ch
, 
°¨t
,

419 
°¨t
 + 
Àn
 - 1);

420  
mism©ches
;

421 
	}
}

423 
	#MIN_TICKS
 1ULL

	)

424 
	#LEN
 1000000000ULL

	)

425 
	#NSEC_ONE_SEC
 1000000000ULL

	)

426 
	#TESTLEN
 9

	)

428 
	$ã°_˛ock
(
mode
, 
cy˛es_≥r_u£c
, 
Á°_ã°
,

429 
quõt
, 
dñè_ticks
, 
dñè_n£c
)

431 
i
;

432 
dñè
;

433 
max_ticks
;

434 
n£cs
;

435 *
mu…
;

436 
ã°_ns
[
TESTLEN
] =

437 {
NSEC_ONE_SEC
, NSEC_ONE_SEC,

438 
NSEC_ONE_SEC
, NSEC_ONE_SEC*60, NSEC_ONE_SEC*60*60,

439 
NSEC_ONE_SEC
*60*60*2, NSEC_ONE_SEC*60*60*4,

440 
NSEC_ONE_SEC
*60*60*8, NSEC_ONE_SEC*60*60*24};

441 
ã°_ticks
[
TESTLEN
];

443 
max_ticks
 = 
MAX_CLOCK_SEC
 * (Ë
cy˛es_≥r_u£c
 * 1000000ULL;

445 
mode
) {

446 
CLOCK64_MULT_SHIFT
:

447 
mu…
 = &
˛ock_mu…
;

449 
CLOCK64_EMULATE_128
:

450 
mu…
 = 
˛ock_mu…64_128
;

452 
CLOCK64_2STAGE
:

453 
mu…
 = &
˛ock_mu…
;

455 
CLOCK64_LOCK
:

456 
mu…
 = &
˛ock_mu…
;

458 
CLOCK128_MULT_SHIFT
:

459 
mu…
 = &
˛ock_mu…128
;

462 
	`as£π
(0);

464 
	`ˇlc_mu…_shi·
(
mode
, 
mu…
, &
˛ock_shi·
, 
MAX_CLOCK_SEC
, 
cy˛es_≥r_u£c
);

465 
n£cs
 = 
	`gë_n£c
(
mode
, 
max_ticks
);

466 
dñè
 = 
n£cs
/1000000 - 
MAX_CLOCK_SEC
*1000;

468 i‡(
mode
 =
CLOCK64_2STAGE
) {

469 
ã°_ns
[0] = 
n£cs_f‹_max_cy˛es
 - 1;

470 
ã°_ns
[1] = 
n£cs_f‹_max_cy˛es
;

471 
ã°_ticks
[0] = (1ULL << 
max_cy˛es_shi·
) - 1;

472 
ã°_ticks
[1] = (1ULL << 
max_cy˛es_shi·
);

474 
i
 = 2; i < 
TESTLEN
; i++)

475 
ã°_ticks
[
i
] = 
ã°_ns
[i] / 1000 * 
cy˛es_≥r_u£c
;

478 
i
 = 0; i < 
TESTLEN
; i++)

479 
ã°_ticks
[
i
] = 
ã°_ns
[i] / 1000 * 
cy˛es_≥r_u£c
;

482 i‡(!
quõt
) {

483 
	`¥ötf
("cycles_per_usec=%d, delta_ticks=%d, delta_nsec=%d, max_ticks=%llu, shift=%u, 2^shift=%llu\n",

484 
cy˛es_≥r_u£c
, 
dñè_ticks
, 
dñè_n£c
, 
max_ticks
, 
˛ock_shi·
, (1ULL << clock_shift));

485 
mode
) {

486 
CLOCK64_LOCK
:

487 
CLOCK64_2STAGE
:

488 
CLOCK64_MULT_SHIFT
: {

489 
	`¥ötf
("clock_mult=%llu, clock_mult / 2^clock_shift=%f\n",

490 
˛ock_mu…
, (Ë˛ock_mu… / (1ULL << 
˛ock_shi·
));

493 
CLOCK64_EMULATE_128
: {

494 
	`¥ötf
("clock_mult=0x%016llx%016llx\n",

495 
˛ock_mu…64_128
[1], clock_mult64_128[0]);

498 
CLOCK128_MULT_SHIFT
: {

499 
	`¥ötf
("clock_mult=0x%016llx%016llx\n",

500 (Ë(
˛ock_mu…128
 >> 64),

501 (Ë
˛ock_mu…128
);

505 
	`¥ötf
("get_nsec(max_ticks) = %lluns, should be %lluns,Érror<=abs(%lld)ms\n",

506 
n£cs
, 
MAX_CLOCK_SEC
*1000000000ULL, 
dñè
);

509 
i
 = 0; i < 
TESTLEN
; i++)

511 
n£cs
 = 
	`gë_n£c
(
mode
, 
ã°_ticks
[
i
]);

512 
dñè
 = 
n£cs
 > 
ã°_ns
[
i
] ?Çsecs -Åest_ns[i] :Åest_ns[i] -Çsecs;

513 i‡(!
quõt
 || 
dñè
 > 0)

514 
	`¥ötf
("get_nsec(%llu)=%llu,Éxpected %llu, delta=%llu\n",

515 
ã°_ticks
[
i
], 
n£cs
, 
ã°_ns
[i], 
dñè
);

518 i‡(!
Á°_ã°
) {

519 
	`disc⁄töuôy
(
mode
, 
dñè_ticks
, 
dñè_n£c
, 
max_ticks
 - 
LEN
 + 1, LEN);

520 
	`disc⁄töuôy
(
mode
, 
dñè_ticks
, 
dñè_n£c
, 
MIN_TICKS
, 
LEN
);

523 i‡(!
quõt
)

524 
	`¥ötf
("\n\n");

526  
dñè
;

527 
	}
}

529 
	$maö
(
¨gc
, *
¨gv
[])

531 
n£cs
 = 
	`mÆloc
(
LEN
 * ());

533 
	`ã°_˛ock
(
CLOCK64_LOCK
, 3333, 1, 0, 0, 0);

534 
	`ã°_˛ock
(
CLOCK64_LOCK
, 1000, 1, 0, 1, 1);

535 
	`ã°_˛ock
(
CLOCK64_LOCK
, 1100, 1, 0, 11, 10);

536 
	`ã°_˛ock
(
CLOCK64_LOCK
, 3000, 1, 0, 3, 1);

537 
	`ã°_˛ock
(
CLOCK64_LOCK
, 3333, 1, 0, 3333, 1000);

538 
	`ã°_˛ock
(
CLOCK64_LOCK
, 3392, 1, 0, 424, 125);

539 
	`ã°_˛ock
(
CLOCK64_LOCK
, 4500, 1, 0, 9, 2);

540 
	`ã°_˛ock
(
CLOCK64_LOCK
, 5000, 1, 0, 5, 1);

542 
	`‰ì
(
n£cs
);

544 
	}
}

	@/home/ysjin/Desktop/fio/fio/t/verify-state.c

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<uni°d.h
>

9 
	~<î∫o.h
>

10 
	~<f˙é.h
>

11 
	~<°rög.h
>

12 
	~"../log.h
"

13 
	~"../os/os.h
"

14 
	~"../vîify-°©e.h
"

15 
	~"../¸c/¸c32c.h
"

16 
	~"debug.h
"

18 
	$show_s
(
thªad_io_li°
 *
s
, 
no_s
)

20 
i
;

22 
	`¥ötf
("Thªad:\t\t%u\n", 
no_s
);

23 
	`¥ötf
("Name:\t\t%s\n", 
s
->
«me
);

24 
	`¥ötf
("Com∂ëi⁄s:\t%Œu\n", (Ë
s
->
no_comps
);

25 
	`¥ötf
("Dïth:\t\t%Œu\n", (Ë
s
->
dïth
);

26 
	`¥ötf
("Numbî IOs:\t%Œu\n", (Ë
s
->
numbîio
);

27 
	`¥ötf
("Index:\t\t%Œu\n", (Ë
s
->
ödex
);

29 
	`¥ötf
("Completions:\n");

30 i‡(!
s
->
no_comps
)

32 
i
 = 
s
->
no_comps
 - 1; i >= 0; i--) {

33 
	`¥ötf
("\t(file=%2llu) %llu\n",

34 (Ë
s
->
comps
[
i
].
fûío
,

35 (Ë
s
->
comps
[
i
].
off£t
);

37 
	}
}

39 
	$show
(
thªad_io_li°
 *
s
, 
size_t
 
size
)

41 
no_s
;

43 
no_s
 = 0;

45 
i
;

47 
s
->
no_comps
 = 
	`À64_to_˝u
(s->no_comps);

48 
s
->
dïth
 = 
	`À32_to_˝u
(s->depth);

49 
s
->
nofûes
 = 
	`À32_to_˝u
(s->nofiles);

50 
s
->
numbîio
 = 
	`À64_to_˝u
(s->numberio);

51 
s
->
ödex
 = 
	`À64_to_˝u
(s->index);

53 
i
 = 0; i < 
s
->
no_comps
; i++) {

54 
s
->
comps
[
i
].
fûío
 = 
	`À64_to_˝u
(s->comps[i].fileno);

55 
s
->
comps
[
i
].
off£t
 = 
	`À64_to_˝u
(s->comps[i].offset);

58 
	`show_s
(
s
, 
no_s
);

59 
no_s
++;

60 
size
 -
	`__thªad_io_li°_sz
(
s
->
dïth
, s->
nofûes
);

61 
s
 = (
thªad_io_li°
 *)((*) s +

62 
	`__thªad_io_li°_sz
(
s
->
dïth
, s->
nofûes
));

63 } 
size
 != 0);

64 
	}
}

66 
	$show_vîify_°©e
(*
buf
, 
size_t
 
size
)

68 
vîify_°©e_hdr
 *
hdr
 = 
buf
;

69 
thªad_io_li°
 *
s
;

70 
uöt32_t
 
¸c
;

72 
hdr
->
vîsi⁄
 = 
	`À64_to_˝u
(hdr->version);

73 
hdr
->
size
 = 
	`À64_to_˝u
(hdr->size);

74 
hdr
->
¸c
 = 
	`À64_to_˝u
(hdr->crc);

76 
	`¥ötf
("Vîsi⁄:\t0x%x\n", (Ë
hdr
->
vîsi⁄
);

77 
	`¥ötf
("Size:\t\t%u\n", (Ë
hdr
->
size
);

78 
	`¥ötf
("CRC:\t\t0x%x\n", (Ë
hdr
->
¸c
);

80 
size
 -(*
hdr
);

81 i‡(
hdr
->
size
 != size) {

82 
	`log_îr
("Size mismatch\n");

86 
s
 = 
buf
 + (*
hdr
);

87 
¸c
 = 
	`fio_¸c32c
((*Ë
s
, 
hdr
->
size
);

88 i‡(
¸c
 !
hdr
->crc) {

89 
	`log_îr
("¸¯mism©ch %x !%x\n", 
¸c
, (Ë
hdr
->crc);

93 i‡(
hdr
->
vîsi⁄
 == 0x03)

94 
	`show
(
s
, 
size
);

96 
	`log_îr
("Unsuµ‹ãd vîsi⁄ %d\n", (Ë
hdr
->
vîsi⁄
);

97 
	}
}

99 
	$show_fûe
(c⁄° *
fûe
)

101 
°©
 
sb
;

102 *
buf
;

103 
ªt
, 
fd
;

105 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

106 i‡(
fd
 < 0) {

107 
	`log_îr
("›í %s: %s\n", 
fûe
, 
	`°ªº‹
(
î∫o
));

111 i‡(
	`f°©
(
fd
, &
sb
) < 0) {

112 
	`log_îr
("°©: %s\n", 
	`°ªº‹
(
î∫o
));

113 
	`˛o£
(
fd
);

117 
buf
 = 
	`mÆloc
(
sb
.
°_size
);

118 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
sb
.
°_size
);

119 i‡(
ªt
 < 0) {

120 
	`log_îr
("ªad: %s\n", 
	`°ªº‹
(
î∫o
));

121 
	`˛o£
(
fd
);

122 
	`‰ì
(
buf
);

124 } i‡(
ªt
 !
sb
.
°_size
) {

125 
	`log_îr
("ShortÑead\n");

126 
	`˛o£
(
fd
);

127 
	`‰ì
(
buf
);

131 
	`˛o£
(
fd
);

132 
	`show_vîify_°©e
(
buf
, 
sb
.
°_size
);

134 
	`‰ì
(
buf
);

136 
	}
}

138 
	$maö
(
¨gc
, *
¨gv
[])

140 
i
, 
ªt
;

142 
	`debug_öô
();

144 i‡(
¨gc
 < 2) {

145 
	`log_îr
("Ußge: %†<°©êfûe>\n", 
¨gv
[0]);

149 
ªt
 = 0;

150 
i
 = 1; i < 
¨gc
; i++) {

151 
ªt
 = 
	`show_fûe
(
¨gv
[
i
]);

152 i‡(
ªt
)

156  
ªt
;

157 
	}
}

	@/home/ysjin/Desktop/fio/fio/td_error.c

1 
	~"fio.h
"

2 
	~"io_ddú.h
"

3 
	~"td_îr‹.h
"

5 
	g__NON_FATAL_ERR
[] = { 
EIO
, 
EILSEQ
 };

7 
îr‹_ty≥_bô
 
	$td_îr‹_ty≥
(
fio_ddú
 
ddú
, 
îr
)

9 i‡(
îr
 =
EILSEQ
)

10  
ERROR_TYPE_VERIFY_BIT
;

11 i‡(
ddú
 =
DDIR_READ
)

12  
ERROR_TYPE_READ_BIT
;

13  
ERROR_TYPE_WRITE_BIT
;

14 
	}
}

16 
	$td_n⁄_Áèl_îr‹
(
thªad_d©a
 *
td
, 
îr‹_ty≥_bô
 
ëy≥
,

17 
îr
)

19 
i
;

21 i‡(!
td
->
o
.
ign‹e_îr‹
[
ëy≥
]) {

22 
td
->
o
.
ign‹e_îr‹
[
ëy≥
] = 
__NON_FATAL_ERR
;

23 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 
	`ARRAY_SIZE
(
__NON_FATAL_ERR
);

26 i‡(!(
td
->
o
.
c⁄töue_⁄_îr‹
 & (1 << 
ëy≥
)))

28 
i
 = 0; i < 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
]; i++)

29 i‡(
td
->
o
.
ign‹e_îr‹
[
ëy≥
][
i
] =
îr
)

33 
	}
}

35 
	$upd©e_îr‹_cou¡
(
thªad_d©a
 *
td
, 
îr
)

37 
td
->
tŸÆ_îr_cou¡
++;

38 i‡(
td
->
tŸÆ_îr_cou¡
 == 1)

39 
td
->
fú°_îr‹
 = 
îr
;

40 
	}
}

	@/home/ysjin/Desktop/fio/fio/td_error.h

1 #i‚de‡
FIO_TD_ERROR_H


2 
	#FIO_TD_ERROR_H


	)

8 
	eîr‹_ty≥_bô
 {

9 
	mERROR_TYPE_READ_BIT
 = 0,

10 
	mERROR_TYPE_WRITE_BIT
 = 1,

11 
	mERROR_TYPE_VERIFY_BIT
 = 2,

12 
	mERROR_TYPE_CNT
 = 3,

15 
	eîr‹_ty≥
 {

16 
	mERROR_TYPE_NONE
 = 0,

17 
	mERROR_TYPE_READ
 = 1 << 
ERROR_TYPE_READ_BIT
,

18 
	mERROR_TYPE_WRITE
 = 1 << 
ERROR_TYPE_WRITE_BIT
,

19 
	mERROR_TYPE_VERIFY
 = 1 << 
ERROR_TYPE_VERIFY_BIT
,

20 
	mERROR_TYPE_ANY
 = 0xffff,

23 
îr‹_ty≥_bô
 
td_îr‹_ty≥
(
fio_ddú
 
ddú
, 
îr
);

24 
td_n⁄_Áèl_îr‹
(
thªad_d©a
 *
td
, 
îr‹_ty≥_bô
 
ëy≥
,

25 
îr
);

26 
upd©e_îr‹_cou¡
(
thªad_d©a
 *
td
, 
îr
);

	@/home/ysjin/Desktop/fio/fio/thread_options.h

1 #i‚de‡
FIO_THREAD_OPTIONS_H


2 
	#FIO_THREAD_OPTIONS_H


	)

4 
	~"¨ch/¨ch.h
"

5 
	~"os/os.h
"

6 
	~"›ti⁄s.h
"

7 
	~"°©.h
"

8 
	~"gëtime.h
"

9 
	~"lib/õì754.h
"

10 
	~"lib/∑âîn.h
"

11 
	~"td_îr‹.h
"

16 
	efio_memty≥
 {

17 
	mMEM_MALLOC
 = 0,

18 
	mMEM_SHM
,

19 
	mMEM_SHMHUGE
,

20 
	mMEM_MMAP
,

21 
	mMEM_MMAPHUGE
,

22 
	mMEM_MMAPSHARED
,

23 
	mMEM_CUDA_MALLOC
,

26 
	#ERROR_STR_MAX
 128

	)

28 
	#BSSPLIT_MAX
 64

	)

29 
	#ZONESPLIT_MAX
 256

	)

31 
	sbs•lô
 {

32 
uöt32_t
 
	mbs
;

33 
uöt32_t
 
	m≥rc
;

36 
	sz⁄e_•lô
 {

37 
uöt8_t
 
	mac˚ss_≥rc
;

38 
uöt8_t
 
	msize_≥rc
;

39 
uöt8_t
 
	m∑d
[6];

40 
uöt64_t
 
	msize
;

43 
	#NR_OPTS_SZ
 (
FIO_MAX_OPTS
 / (8 * (
uöt64_t
)))

	)

45 
	#OPT_MAGIC
 0x4f50544e

	)

47 
	sthªad_›ti⁄s
 {

48 
	mmagic
;

49 
uöt64_t
 
	m£t_›ti⁄s
[
NR_OPTS_SZ
];

50 *
	mdes¸ùti⁄
;

51 *
	m«me
;

52 *
	mwaô_f‹
;

53 *
	mdúe˘‹y
;

54 *
	mfûíame
;

55 *
	mfûíame_f‹m©
;

56 *
	m›ídú
;

57 *
	mi€ngöe
;

58 *
	mi€ngöe_so_∑th
;

59 *
	mmm≠fûe
;

60 
td_ddú
 
	mtd_ddú
;

61 
	mrw_£q
;

62 
	mkb_ba£
;

63 
	munô_ba£
;

64 
	mddú_£q_ƒ
;

65 
	mddú_£q_add
;

66 
	miodïth
;

67 
	miodïth_low
;

68 
	miodïth_b©ch
;

69 
	miodïth_b©ch_com∂ëe_mö
;

70 
	miodïth_b©ch_com∂ëe_max
;

71 
	m£rülize_ovîœp
;

73 
	munique_fûíame
;

75 
	msize
;

76 
	mio_size
;

77 
	msize_≥r˚¡
;

78 
	mfûl_devi˚
;

79 
	mfûe_≠≥nd
;

80 
	mfûe_size_low
;

81 
	mfûe_size_high
;

82 
	m°¨t_off£t
;

83 
	m°¨t_off£t_Æign
;

85 
	mbs
[
DDIR_RWDIR_CNT
];

86 
	mba
[
DDIR_RWDIR_CNT
];

87 
	mmö_bs
[
DDIR_RWDIR_CNT
];

88 
	mmax_bs
[
DDIR_RWDIR_CNT
];

89 
bs•lô
 *
	mbs•lô
[
DDIR_RWDIR_CNT
];

90 
	mbs•lô_ƒ
[
DDIR_RWDIR_CNT
];

92 *
	mign‹e_îr‹
[
ERROR_TYPE_CNT
];

93 
	mign‹e_îr‹_ƒ
[
ERROR_TYPE_CNT
];

94 
	mîr‹_dump
;

96 
	mƒ_fûes
;

97 
	m›í_fûes
;

98 
fûe_lock_mode
 
	mfûe_lock_mode
;

100 
	modúe˘
;

101 
	mﬂtomic
;

102 
	mövÆid©e_ˇche
;

103 
	m¸óã_£rülize
;

104 
	m¸óã_fsync
;

105 
	m¸óã_⁄_›í
;

106 
	m¸óã_⁄ly
;

107 
	míd_fsync
;

108 
	m¥e_ªad
;

109 
	msync_io
;

110 
	mwrôe_höt
;

111 
	mvîify
;

112 
	mdo_vîify
;

113 
	mvîifys‹t
;

114 
	mvîifys‹t_ƒ
;

115 
	mvîify_öãrvÆ
;

116 
	mvîify_off£t
;

117 
	mvîify_∑âîn
[
MAX_PATTERN_SIZE
];

118 
	mvîify_∑âîn_byãs
;

119 
∑âîn_fmt
 
	mvîify_fmt
[8];

120 
	mvîify_fmt_sz
;

121 
	mvîify_Áèl
;

122 
	mvîify_dump
;

123 
	mvîify_async
;

124 
	mvîify_backlog
;

125 
	mvîify_b©ch
;

126 
	mex≥rimíèl_vîify
;

127 
	mvîify_°©e
;

128 
	mvîify_°©e_ßve
;

129 
	mu£_thªad
;

130 
	mu∆ök
;

131 
	mu∆ök_óch_lo›
;

132 
	mdo_disk_utû
;

133 
	movîride_sync
;

134 
	mønd_ª≥©abÀ
;

135 
	mÆÃ™d_ª≥©abÀ
;

136 
	mønd_£ed
;

137 
	mdï_u£_os_ønd
;

138 
	mlog_avg_m£c
;

139 
	mlog_hi°_m£c
;

140 
	mlog_hi°_cﬂr£√ss
;

141 
	mlog_max
;

142 
	mlog_off£t
;

143 
	mlog_gz
;

144 
	mlog_gz_°‹e
;

145 
	mlog_unix_ïoch
;

146 
	mn‹™domm≠
;

147 
	mso·øndomm≠
;

148 
	mbs_u«lig√d
;

149 
	mfsync_⁄_˛o£
;

150 
	mbs_is_£q_ønd
;

152 
	mvîify_⁄ly
;

154 
	møndom_di°ributi⁄
;

155 
	mexôÆl_îr‹
;

157 
z⁄e_•lô
 *
	mz⁄e_•lô
[
DDIR_RWDIR_CNT
];

158 
	mz⁄e_•lô_ƒ
[
DDIR_RWDIR_CNT
];

160 
fio_Â64_t
 
	mzùf_thëa
;

161 
fio_Â64_t
 
	m∑ªto_h
;

162 
fio_Â64_t
 
	mgauss_dev
;

164 
	møndom_gíî©‹
;

166 
	m≥rc_ønd
[
DDIR_RWDIR_CNT
];

168 
	mhugïage_size
;

169 
	mrw_mö_bs
;

170 
	mthöktime
;

171 
	mthöktime_•ö
;

172 
	mthöktime_blocks
;

173 
	mfsync_blocks
;

174 
	mfd©async_blocks
;

175 
	mb¨rõr_blocks
;

176 
	m°¨t_dñay
;

177 
	m°¨t_dñay_high
;

178 
	mtimeout
;

179 
	mømp_time
;

180 
	mss_°©e
;

181 
fio_Â64_t
 
	mss_limô
;

182 
	mss_dur
;

183 
	mss_ømp_time
;

184 
	movîwrôe
;

185 
	mbw_avg_time
;

186 
	mi›s_avg_time
;

187 
	mlo›s
;

188 
	mz⁄e_ønge
;

189 
	mz⁄e_size
;

190 
	mz⁄e_skù
;

191 
	mlockmem
;

192 
fio_memty≥
 
	mmem_ty≥
;

193 
	mmem_Æign
;

195 
	mmax_œãncy
;

197 
	m°⁄ewÆl
;

198 
	m√w_group
;

199 
	mnumjobs
;

200 
os_˝u_mask_t
 
	m˝umask
;

201 
os_˝u_mask_t
 
	mvîify_˝umask
;

202 
os_˝u_mask_t
 
	mlog_gz_˝umask
;

203 
	m˝us_Ælowed_pﬁicy
;

204 *
	mnuma_˝unodes
;

205 
	mnuma_mem_mode
;

206 
	mnuma_mem_¥e„r_node
;

207 *
	mnuma_memnodes
;

208 
	mgpu_dev_id
;

209 
	m°¨t_off£t_≥r˚¡
;

211 
	miﬁog
;

212 
	mrwmixcy˛e
;

213 
	mrwmix
[
DDIR_RWDIR_CNT
];

214 
	mni˚
;

215 
	mi›rio
;

216 
	mi›rio_˛ass
;

217 
	mfûe_£rvi˚_ty≥
;

218 
	mgroup_ªp‹tög
;

219 
	m°©s
;

220 
	mÁdvi£_höt
;

221 
fio_ÁŒoˇã_mode
 
	mÁŒoˇã_mode
;

222 
	mzîo_buf„rs
;

223 
	mªfûl_buf„rs
;

224 
	ms¸ambÀ_buf„rs
;

225 
	mbuf„r_∑âîn
[
MAX_PATTERN_SIZE
];

226 
	mbuf„r_∑âîn_byãs
;

227 
	mcom¥ess_≥r˚¡age
;

228 
	mcom¥ess_chunk
;

229 
	mdedu≥_≥r˚¡age
;

230 
	mtime_ba£d
;

231 
	mdißbÀ_œt
;

232 
	mdißbÀ_˛©
;

233 
	mdißbÀ_¶©
;

234 
	mdißbÀ_bw
;

235 
	munifõd_rw_ªp
;

236 
	mgtod_ªdu˚
;

237 
	mgtod_˝u
;

238 
fio_cs
 
	m˛ocksour˚
;

239 
	mno_°Æl
;

240 
	måim_≥r˚¡age
;

241 
	måim_b©ch
;

242 
	måim_zîo
;

243 
	måim_backlog
;

244 
	m˛©_≥r˚¡ûes
;

245 
	mœt_≥r˚¡ûes
;

246 
	m≥r˚¡ûe_¥ecisi⁄
;

247 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

249 *
	mªad_iﬁog_fûe
;

250 *
	mwrôe_iﬁog_fûe
;

252 
	mwrôe_bw_log
;

253 
	mwrôe_œt_log
;

254 
	mwrôe_i›s_log
;

255 
	mwrôe_hi°_log
;

257 *
	mbw_log_fûe
;

258 *
	mœt_log_fûe
;

259 *
	mi›s_log_fûe
;

260 *
	mhi°_log_fûe
;

261 *
	mª∂ay_ªdúe˘
;

266 *
	mexec_¥îun
;

267 *
	mexec_po°run
;

269 
uöt64_t
 
	møã
[
DDIR_RWDIR_CNT
];

270 
uöt64_t
 
	møãmö
[
DDIR_RWDIR_CNT
];

271 
	møãcy˛e
;

272 
	mio_submô_mode
;

273 
	møã_i›s
[
DDIR_RWDIR_CNT
];

274 
	møã_i›s_mö
[
DDIR_RWDIR_CNT
];

275 
	møã_¥o˚ss
;

276 
	møã_ign_thök
;

278 *
	mioscheduÀr
;

283 
îr‹_ty≥
 
	mc⁄töue_⁄_îr‹
;

288 *
	m¥ofûe
;

293 *
	mcgroup
;

294 
	mcgroup_weight
;

295 
	mcgroup_nodñëe
;

297 
	muid
;

298 
	mgid
;

300 
	mÊow_id
;

301 
	mÊow
;

302 
	mÊow_w©îm¨k
;

303 
	mÊow_¶ìp
;

305 
	moff£t_ö¸emít
;

306 
	mnumbî_ios
;

308 
	msync_fûe_ønge
;

310 
	mœãncy_èrgë
;

311 
	mœãncy_wödow
;

312 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

314 
	msig_figs
;

316 
	mblock_îr‹_hi°
;

318 
	mª∂ay_Æign
;

319 
	mª∂ay_sˇÀ
;

321 
	m≥r_job_logs
;

323 
	mÆlow_¸óã
;

324 
	mÆlow_mou¡ed_wrôe
;

327 
	#FIO_TOP_STR_MAX
 256

	)

329 
	sthªad_›ti⁄s_∑ck
 {

330 
uöt64_t
 
	m£t_›ti⁄s
[
NR_OPTS_SZ
];

331 
uöt8_t
 
	mdes¸ùti⁄
[
FIO_TOP_STR_MAX
];

332 
uöt8_t
 
	m«me
[
FIO_TOP_STR_MAX
];

333 
uöt8_t
 
	mwaô_f‹
[
FIO_TOP_STR_MAX
];

334 
uöt8_t
 
	mdúe˘‹y
[
FIO_TOP_STR_MAX
];

335 
uöt8_t
 
	mfûíame
[
FIO_TOP_STR_MAX
];

336 
uöt8_t
 
	mfûíame_f‹m©
[
FIO_TOP_STR_MAX
];

337 
uöt8_t
 
	m›ídú
[
FIO_TOP_STR_MAX
];

338 
uöt8_t
 
	mi€ngöe
[
FIO_TOP_STR_MAX
];

339 
uöt8_t
 
	mmm≠fûe
[
FIO_TOP_STR_MAX
];

340 
uöt32_t
 
	mtd_ddú
;

341 
uöt32_t
 
	mrw_£q
;

342 
uöt32_t
 
	mkb_ba£
;

343 
uöt32_t
 
	munô_ba£
;

344 
uöt32_t
 
	mddú_£q_ƒ
;

345 
uöt64_t
 
	mddú_£q_add
;

346 
uöt32_t
 
	miodïth
;

347 
uöt32_t
 
	miodïth_low
;

348 
uöt32_t
 
	miodïth_b©ch
;

349 
uöt32_t
 
	miodïth_b©ch_com∂ëe_mö
;

350 
uöt32_t
 
	miodïth_b©ch_com∂ëe_max
;

351 
uöt32_t
 
	m£rülize_ovîœp
;

352 
uöt32_t
 
	mœt_≥r˚¡ûes
;

354 
uöt64_t
 
	msize
;

355 
uöt64_t
 
	mio_size
;

356 
uöt32_t
 
	msize_≥r˚¡
;

357 
uöt32_t
 
	mfûl_devi˚
;

358 
uöt32_t
 
	mfûe_≠≥nd
;

359 
uöt32_t
 
	munique_fûíame
;

360 
uöt64_t
 
	mfûe_size_low
;

361 
uöt64_t
 
	mfûe_size_high
;

362 
uöt64_t
 
	m°¨t_off£t
;

363 
uöt64_t
 
	m°¨t_off£t_Æign
;

365 
uöt32_t
 
	mbs
[
DDIR_RWDIR_CNT
];

366 
uöt32_t
 
	mba
[
DDIR_RWDIR_CNT
];

367 
uöt32_t
 
	mmö_bs
[
DDIR_RWDIR_CNT
];

368 
uöt32_t
 
	mmax_bs
[
DDIR_RWDIR_CNT
];

369 
bs•lô
 
	mbs•lô
[
DDIR_RWDIR_CNT
][
BSSPLIT_MAX
];

370 
uöt32_t
 
	mbs•lô_ƒ
[
DDIR_RWDIR_CNT
];

372 
uöt32_t
 
	mign‹e_îr‹
[
ERROR_TYPE_CNT
][
ERROR_STR_MAX
];

373 
uöt32_t
 
	mign‹e_îr‹_ƒ
[
ERROR_TYPE_CNT
];

374 
uöt32_t
 
	mîr‹_dump
;

376 
uöt32_t
 
	mƒ_fûes
;

377 
uöt32_t
 
	m›í_fûes
;

378 
uöt32_t
 
	mfûe_lock_mode
;

380 
uöt32_t
 
	modúe˘
;

381 
uöt32_t
 
	mﬂtomic
;

382 
uöt32_t
 
	mövÆid©e_ˇche
;

383 
uöt32_t
 
	m¸óã_£rülize
;

384 
uöt32_t
 
	m¸óã_fsync
;

385 
uöt32_t
 
	m¸óã_⁄_›í
;

386 
uöt32_t
 
	m¸óã_⁄ly
;

387 
uöt32_t
 
	míd_fsync
;

388 
uöt32_t
 
	m¥e_ªad
;

389 
uöt32_t
 
	msync_io
;

390 
uöt32_t
 
	mwrôe_höt
;

391 
uöt32_t
 
	mvîify
;

392 
uöt32_t
 
	mdo_vîify
;

393 
uöt32_t
 
	mvîifys‹t
;

394 
uöt32_t
 
	mvîifys‹t_ƒ
;

395 
uöt32_t
 
	mvîify_öãrvÆ
;

396 
uöt32_t
 
	mvîify_off£t
;

397 
uöt8_t
 
	mvîify_∑âîn
[
MAX_PATTERN_SIZE
];

398 
uöt32_t
 
	mvîify_∑âîn_byãs
;

399 
uöt32_t
 
	mvîify_Áèl
;

400 
uöt32_t
 
	mvîify_dump
;

401 
uöt32_t
 
	mvîify_async
;

402 
uöt64_t
 
	mvîify_backlog
;

403 
uöt32_t
 
	mvîify_b©ch
;

404 
uöt32_t
 
	mex≥rimíèl_vîify
;

405 
uöt32_t
 
	mvîify_°©e
;

406 
uöt32_t
 
	mvîify_°©e_ßve
;

407 
uöt32_t
 
	mu£_thªad
;

408 
uöt32_t
 
	mu∆ök
;

409 
uöt32_t
 
	mu∆ök_óch_lo›
;

410 
uöt32_t
 
	mdo_disk_utû
;

411 
uöt32_t
 
	movîride_sync
;

412 
uöt32_t
 
	mønd_ª≥©abÀ
;

413 
uöt32_t
 
	mÆÃ™d_ª≥©abÀ
;

414 
uöt64_t
 
	mønd_£ed
;

415 
uöt32_t
 
	mdï_u£_os_ønd
;

416 
uöt32_t
 
	mlog_avg_m£c
;

417 
uöt32_t
 
	mlog_hi°_m£c
;

418 
uöt32_t
 
	mlog_hi°_cﬂr£√ss
;

419 
uöt32_t
 
	mlog_max
;

420 
uöt32_t
 
	mlog_off£t
;

421 
uöt32_t
 
	mlog_gz
;

422 
uöt32_t
 
	mlog_gz_°‹e
;

423 
uöt32_t
 
	mlog_unix_ïoch
;

424 
uöt32_t
 
	mn‹™domm≠
;

425 
uöt32_t
 
	mso·øndomm≠
;

426 
uöt32_t
 
	mbs_u«lig√d
;

427 
uöt32_t
 
	mfsync_⁄_˛o£
;

428 
uöt32_t
 
	mbs_is_£q_ønd
;

430 
uöt32_t
 
	møndom_di°ributi⁄
;

431 
uöt32_t
 
	mexôÆl_îr‹
;

433 
uöt32_t
 
	msync_fûe_ønge
;

435 
z⁄e_•lô
 
	mz⁄e_•lô
[
DDIR_RWDIR_CNT
][
ZONESPLIT_MAX
];

436 
uöt32_t
 
	mz⁄e_•lô_ƒ
[
DDIR_RWDIR_CNT
];

438 
fio_Â64_t
 
	mzùf_thëa
;

439 
fio_Â64_t
 
	m∑ªto_h
;

440 
fio_Â64_t
 
	mgauss_dev
;

442 
uöt32_t
 
	møndom_gíî©‹
;

444 
uöt32_t
 
	m≥rc_ønd
[
DDIR_RWDIR_CNT
];

446 
uöt32_t
 
	mhugïage_size
;

447 
uöt32_t
 
	mrw_mö_bs
;

448 
uöt32_t
 
	mthöktime
;

449 
uöt32_t
 
	mthöktime_•ö
;

450 
uöt32_t
 
	mthöktime_blocks
;

451 
uöt32_t
 
	mfsync_blocks
;

452 
uöt32_t
 
	mfd©async_blocks
;

453 
uöt32_t
 
	mb¨rõr_blocks
;

454 
uöt64_t
 
	m°¨t_dñay
;

455 
uöt64_t
 
	m°¨t_dñay_high
;

456 
uöt64_t
 
	mtimeout
;

457 
uöt64_t
 
	mømp_time
;

458 
uöt64_t
 
	mss_dur
;

459 
uöt64_t
 
	mss_ømp_time
;

460 
uöt32_t
 
	mss_°©e
;

461 
fio_Â64_t
 
	mss_limô
;

462 
uöt32_t
 
	movîwrôe
;

463 
uöt32_t
 
	mbw_avg_time
;

464 
uöt32_t
 
	mi›s_avg_time
;

465 
uöt32_t
 
	mlo›s
;

466 
uöt64_t
 
	mz⁄e_ønge
;

467 
uöt64_t
 
	mz⁄e_size
;

468 
uöt64_t
 
	mz⁄e_skù
;

469 
uöt64_t
 
	mlockmem
;

470 
uöt32_t
 
	mmem_ty≥
;

471 
uöt32_t
 
	mmem_Æign
;

473 
uöt32_t
 
	m°⁄ewÆl
;

474 
uöt32_t
 
	m√w_group
;

475 
uöt32_t
 
	mnumjobs
;

480 
uöt8_t
 
	m˝umask
[
FIO_TOP_STR_MAX
];

481 
uöt8_t
 
	mvîify_˝umask
[
FIO_TOP_STR_MAX
];

482 
uöt8_t
 
	mlog_gz_˝umask
[
FIO_TOP_STR_MAX
];

484 
uöt32_t
 
	mgpu_dev_id
;

485 
uöt32_t
 
	m°¨t_off£t_≥r˚¡
;

486 
uöt32_t
 
	m˝us_Ælowed_pﬁicy
;

487 
uöt32_t
 
	miﬁog
;

488 
uöt32_t
 
	mrwmixcy˛e
;

489 
uöt32_t
 
	mrwmix
[
DDIR_RWDIR_CNT
];

490 
uöt32_t
 
	mni˚
;

491 
uöt32_t
 
	mi›rio
;

492 
uöt32_t
 
	mi›rio_˛ass
;

493 
uöt32_t
 
	mfûe_£rvi˚_ty≥
;

494 
uöt32_t
 
	mgroup_ªp‹tög
;

495 
uöt32_t
 
	m°©s
;

496 
uöt32_t
 
	mÁdvi£_höt
;

497 
uöt32_t
 
	mÁŒoˇã_mode
;

498 
uöt32_t
 
	mzîo_buf„rs
;

499 
uöt32_t
 
	mªfûl_buf„rs
;

500 
uöt32_t
 
	ms¸ambÀ_buf„rs
;

501 
uöt8_t
 
	mbuf„r_∑âîn
[
MAX_PATTERN_SIZE
];

502 
uöt32_t
 
	mbuf„r_∑âîn_byãs
;

503 
uöt32_t
 
	mcom¥ess_≥r˚¡age
;

504 
uöt32_t
 
	mcom¥ess_chunk
;

505 
uöt32_t
 
	mdedu≥_≥r˚¡age
;

506 
uöt32_t
 
	mtime_ba£d
;

507 
uöt32_t
 
	mdißbÀ_œt
;

508 
uöt32_t
 
	mdißbÀ_˛©
;

509 
uöt32_t
 
	mdißbÀ_¶©
;

510 
uöt32_t
 
	mdißbÀ_bw
;

511 
uöt32_t
 
	munifõd_rw_ªp
;

512 
uöt32_t
 
	mgtod_ªdu˚
;

513 
uöt32_t
 
	mgtod_˝u
;

514 
uöt32_t
 
	m˛ocksour˚
;

515 
uöt32_t
 
	mno_°Æl
;

516 
uöt32_t
 
	måim_≥r˚¡age
;

517 
uöt32_t
 
	måim_b©ch
;

518 
uöt32_t
 
	måim_zîo
;

519 
uöt64_t
 
	måim_backlog
;

520 
uöt32_t
 
	m˛©_≥r˚¡ûes
;

521 
uöt32_t
 
	m≥r˚¡ûe_¥ecisi⁄
;

522 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

524 
uöt8_t
 
	mªad_iﬁog_fûe
[
FIO_TOP_STR_MAX
];

525 
uöt8_t
 
	mwrôe_iﬁog_fûe
[
FIO_TOP_STR_MAX
];

527 
uöt32_t
 
	mwrôe_bw_log
;

528 
uöt32_t
 
	mwrôe_œt_log
;

529 
uöt32_t
 
	mwrôe_i›s_log
;

530 
uöt32_t
 
	mwrôe_hi°_log
;

532 
uöt8_t
 
	mbw_log_fûe
[
FIO_TOP_STR_MAX
];

533 
uöt8_t
 
	mœt_log_fûe
[
FIO_TOP_STR_MAX
];

534 
uöt8_t
 
	mi›s_log_fûe
[
FIO_TOP_STR_MAX
];

535 
uöt8_t
 
	mhi°_log_fûe
[
FIO_TOP_STR_MAX
];

536 
uöt8_t
 
	mª∂ay_ªdúe˘
[
FIO_TOP_STR_MAX
];

541 
uöt8_t
 
	mexec_¥îun
[
FIO_TOP_STR_MAX
];

542 
uöt8_t
 
	mexec_po°run
[
FIO_TOP_STR_MAX
];

544 
uöt64_t
 
	møã
[
DDIR_RWDIR_CNT
];

545 
uöt64_t
 
	møãmö
[
DDIR_RWDIR_CNT
];

546 
uöt32_t
 
	møãcy˛e
;

547 
uöt32_t
 
	mio_submô_mode
;

548 
uöt32_t
 
	møã_i›s
[
DDIR_RWDIR_CNT
];

549 
uöt32_t
 
	møã_i›s_mö
[
DDIR_RWDIR_CNT
];

550 
uöt32_t
 
	møã_¥o˚ss
;

551 
uöt32_t
 
	møã_ign_thök
;

552 
uöt32_t
 
	m∑d
;

554 
uöt8_t
 
	mioscheduÀr
[
FIO_TOP_STR_MAX
];

559 
uöt32_t
 
	mc⁄töue_⁄_îr‹
;

564 
uöt8_t
 
	m¥ofûe
[
FIO_TOP_STR_MAX
];

569 
uöt8_t
 
	mcgroup
[
FIO_TOP_STR_MAX
];

570 
uöt32_t
 
	mcgroup_weight
;

571 
uöt32_t
 
	mcgroup_nodñëe
;

573 
uöt32_t
 
	muid
;

574 
uöt32_t
 
	mgid
;

576 
öt32_t
 
	mÊow_id
;

577 
öt32_t
 
	mÊow
;

578 
öt32_t
 
	mÊow_w©îm¨k
;

579 
uöt32_t
 
	mÊow_¶ìp
;

581 
uöt64_t
 
	moff£t_ö¸emít
;

582 
uöt64_t
 
	mnumbî_ios
;

584 
uöt64_t
 
	mœãncy_èrgë
;

585 
uöt64_t
 
	mœãncy_wödow
;

586 
uöt64_t
 
	mmax_œãncy
;

587 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

589 
uöt32_t
 
	msig_figs
;

591 
uöt32_t
 
	mblock_îr‹_hi°
;

593 
uöt32_t
 
	mª∂ay_Æign
;

594 
uöt32_t
 
	mª∂ay_sˇÀ
;

596 
uöt32_t
 
	m≥r_job_logs
;

598 
uöt32_t
 
	mÆlow_¸óã
;

599 
uöt32_t
 
	mÆlow_mou¡ed_wrôe
;

600 } 
__©åibuã__
((
∑cked
));

602 
c⁄vît_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
, 
thªad_›ti⁄s_∑ck
 *
t›
);

603 
c⁄vît_thªad_›ti⁄s_to_√t
(
thªad_›ti⁄s_∑ck
 *
t›
, 
thªad_›ti⁄s
 *);

604 
fio_ã°_cc⁄v
(
thªad_›ti⁄s
 *);

605 
›ti⁄s_deÁu…_fûl
(
thªad_›ti⁄s
 *
o
);

	@/home/ysjin/Desktop/fio/fio/tickmarks.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<mÆloc.h
>

4 
	~<°rög.h
>

13 
	~"tickm¨ks.h
"

15 
	#MAX
(
a
, 
b
Ë((◊Ë< (b)Ë? (bË: (a))

	)

17 
	$ni˚num
(
x
, 
round
)

19 
exp
;

20 
f
;

22 
exp
 = 
	`Êo‹
(
	`log10
(
x
));

23 
f
 = 
x
 / 
	`pow
(10.0, 
exp
);

24 i‡(
round
) {

25 i‡(
f
 < 1.5)

26  1.0 * 
	`pow
(10.0, 
exp
);

27 i‡(
f
 < 3.0)

28  2.0 * 
	`pow
(10.0, 
exp
);

29 i‡(
f
 < 7.0)

30  5.0 * 
	`pow
(10.0, 
exp
);

31  10.0 * 
	`pow
(10.0, 
exp
);

33 i‡(
f
 <= 1.0)

34  1.0 * 
	`pow
(10.0, 
exp
);

35 i‡(
f
 <= 2.0)

36  2.0 * 
	`pow
(10.0, 
exp
);

37 i‡(
f
 <= 5.0)

38  5.0 * 
	`pow
(10.0, 
exp
);

39  10.0 * 
	`pow
(10.0, 
exp
);

40 
	}
}

42 
	$sh‹ãn
(
tickm¨k
 *
tm
, 
¡icks
, *
powî_of_ãn
,

43 
u£_KMG_symbﬁs
, 
ba£_off£t
)

45 c⁄° 
sh‹ãn_chr
[] = { 0, 'K', 'M', 'G', 'P', 'E', 0 };

46 
i
, 
l
, 
mösh‹ãn
, 
sh‹ãn_idx
 = 0;

47 *
°r
;

49 
mösh‹ãn
 = 100;

50 
i
 = 0; i < 
¡icks
; i++) {

51 
°r
 = 
tm
[
i
].
°rög
;

52 
l
 = 
	`°æí
(
°r
);

54 i‡(
	`°rcmp
(
°r
, "0") == 0)

56 i‡(
l
 > 9 && 
	`°rcmp
(&
°r
[l - 9], "000000000") == 0) {

57 *
powî_of_ãn
 = 9;

58 
sh‹ãn_idx
 = 3;

59 } i‡(6 < 
mösh‹ãn
 && 
l
 > 6 &&

60 
	`°rcmp
(&
°r
[
l
 - 6], "000000") == 0) {

61 *
powî_of_ãn
 = 6;

62 
sh‹ãn_idx
 = 2;

63 } i‡(
l
 > 3 && 
	`°rcmp
(&
°r
[l - 3], "000") == 0) {

64 *
powî_of_ãn
 = 3;

65 
sh‹ãn_idx
 = 1;

67 *
powî_of_ãn
 = 0;

70 i‡(*
powî_of_ãn
 < 
mösh‹ãn
)

71 
mösh‹ãn
 = *
powî_of_ãn
;

74 i‡(
mösh‹ãn
 == 0)

76 i‡(!
u£_KMG_symbﬁs
)

77 
sh‹ãn_idx
 = 0;

78 i‡(
ba£_off£t
)

79 
sh‹ãn_idx
 +
ba£_off£t
;

81 
i
 = 0; i < 
¡icks
; i++) {

82 
°r
 = 
tm
[
i
].
°rög
;

83 
l
 = 
	`°æí
(
°r
);

84 
°r
[
l
 - 
mösh‹ãn
] = 
sh‹ãn_chr
[
sh‹ãn_idx
];

85 i‡(
sh‹ãn_idx
)

86 
°r
[
l
 - 
mösh‹ãn
 + 1] = '\0';

88 
	}
}

90 
	$ˇlc_tickm¨ks
(
mö
, 
max
, 
¡icks
, 
tickm¨k
 **
tm
,

91 *
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off£t
)

93 
°r
[100];

94 
n‰ac
;

95 
d
;

96 
gøphmö
, 
gøphmax
;

97 
ønge
, 
x
;

98 
cou¡
, 
i
;

101 
ønge
 = 
	`ni˚num
(
max
 - 
mö
, 0);

102 
d
 = 
	`ni˚num
(
ønge
 / (
¡icks
 - 1), 1);

103 
gøphmö
 = 
	`Êo‹
(
mö
 / 
d
) * d;

104 
gøphmax
 = 
	`˚û
(
max
 / 
d
) * d;

105 
n‰ac
 = 
	`MAX
(-
	`Êo‹
(
	`log10
(
d
)), 0);

106 
	`¢¥ötf
(
°r
, (°r)-1, "%%.%df", 
n‰ac
);

108 
cou¡
 = ((
gøphmax
 + 0.5 * 
d
Ë- 
gøphmö
) / d + 1;

109 *
tm
 = 
	`mÆloc
((**tmË* 
cou¡
);

111 
i
 = 0;

112 
x
 = 
gøphmö
; x < 
gøphmax
 + 0.5 * 
d
; x += d) {

113 (*
tm
)[
i
].
vÆue
 = 
x
;

114 
	`•rötf
((*
tm
)[
i
].
°rög
, 
°r
, 
x
);

115 
i
++;

117 
	`sh‹ãn
(*
tm
, 
i
, 
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off£t
);

118  
i
;

119 
	}
}

123 
	$ã°_ønge
(
x
, 
y
)

125 
¡icks
, 
i
;

127 
tickm¨k
 *
tm
 = 
NULL
;

128 
	`¥ötf
("Te°ögÑ™gê%g - %g\n", 
x
, 
y
);

129 
¡icks
 = 
	`ˇlc_tickm¨ks
(
x
, 
y
, 10, &
tm
);

131 
i
 = 0; i < 
¡icks
; i++)

132 
	`¥ötf
(" (%sË%g\n", 
tm
[
i
].
°rög
,Åm[i].
vÆue
);

134 
	`¥ötf
("\n\n");

135 
	`‰ì
(
tm
);

136 
	}
}

138 
	$maö
(
¨gc
, *
¨gv
[])

140 
	`ã°_ønge
(0.0005, 0.008);

141 
	`ã°_ønge
(0.5, 0.8);

142 
	`ã°_ønge
(5.5, 8.8);

143 
	`ã°_ønge
(50.5, 80.8);

144 
	`ã°_ønge
(-20, 20.8);

145 
	`ã°_ønge
(-30, 700.8);

146 
	}
}

	@/home/ysjin/Desktop/fio/fio/tickmarks.h

1 #i‚de‡
TICKMARKS_H


2 
	#TICKMARKS_H


	)

4 
	stickm¨k
 {

5 
	mvÆue
;

6 
	m°rög
[20];

9 
ˇlc_tickm¨ks
(
mö
, 
max
, 
¡icks
, 
tickm¨k
 **
tm
,

10 *
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off
);

	@/home/ysjin/Desktop/fio/fio/time.c

1 
	~<time.h
>

2 
	~<sys/time.h
>

4 
	~"fio.h
"

6 
time•ec
 
	ggíesis
;

7 
	gns_gønuœrôy
;

9 
	$time•ec_add_m£c
(
time•ec
 *
ts
, 
m£c
)

11 
uöt64_t
 
adj_n£c
 = 1000000ULL * 
m£c
;

13 
ts
->
tv_n£c
 +
adj_n£c
;

14 i‡(
adj_n£c
 >= 1000000000) {

15 
uöt64_t
 
adj_£c
 = 
adj_n£c
 / 1000000000;

17 
ts
->
tv_n£c
 -
adj_£c
 * 1000000000;

18 
ts
->
tv_£c
 +
adj_£c
;

20 i‡(
ts
->
tv_n£c
 >= 1000000000){

21 
ts
->
tv_n£c
 -= 1000000000;

22 
ts
->
tv_£c
++;

24 
	}
}

29 
uöt64_t
 
	$u£c_•ö
(
u£c
)

31 
time•ec
 
°¨t
;

32 
uöt64_t
 
t
;

34 
	`fio_gëtime
(&
°¨t
, 
NULL
);

35 (
t
 = 
	`utime_sö˚_now
(&
°¨t
)Ë< 
u£c
)

36 
n›
;

38  
t
;

39 
	}
}

41 
uöt64_t
 
	$u£c_¶ìp
(
thªad_d©a
 *
td
, 
u£c
)

43 
time•ec
 
ªq
;

44 
time•ec
 
tv
;

45 
uöt64_t
 
t
 = 0;

48 
ts
 = 
u£c
;

50 i‡(
u£c
 < 
ns_gønuœrôy
) {

51 
t
 +
	`u£c_•ö
(
u£c
);

55 
ts
 = 
u£c
 - 
ns_gønuœrôy
;

57 i‡(
ts
 >= 1000000) {

58 
ªq
.
tv_£c
 = 
ts
 / 1000000;

59 
ts
 -1000000 * 
ªq
.
tv_£c
;

61 
ªq
.
tv_£c
 = 0;

63 
ªq
.
tv_n£c
 = 
ts
 * 1000;

64 
	`fio_gëtime
(&
tv
, 
NULL
);

66 i‡(
	`«no¶ìp
(&
ªq
, 
NULL
) < 0)

69 
ts
 = 
	`utime_sö˚_now
(&
tv
);

70 
t
 +
ts
;

71 i‡(
ts
 >
u£c
)

74 
u£c
 -
ts
;

75 } !
td
->
ãrmö©e
);

77  
t
;

78 
	}
}

80 
uöt64_t
 
	$time_sö˚_gíesis
()

82  
	`time_sö˚_now
(&
gíesis
);

83 
	}
}

85 
uöt64_t
 
	$mtime_sö˚_gíesis
()

87  
	`mtime_sö˚_now
(&
gíesis
);

88 
	}
}

90 
uöt64_t
 
	$utime_sö˚_gíesis
()

92  
	`utime_sö˚_now
(&
gíesis
);

93 
	}
}

95 
boﬁ
 
	$ö_ømp_time
(
thªad_d©a
 *
td
)

97  
td
->
o
.
ømp_time
 && !td->
ømp_time_ovî
;

98 
	}
}

100 
boﬁ
 
	$∑ª¡_upd©e_ømp
(
thªad_d©a
 *
td
)

102 
thªad_d©a
 *
∑ª¡
 = 
td
->parent;

104 i‡(!
∑ª¡
 ||Ö¨ít->
ømp_time_ovî
)

105  
Ál£
;

107 
	`ª£t_Æl_°©s
(
∑ª¡
);

108 
∑ª¡
->
ømp_time_ovî
 = 
åue
;

109 
	`td_£t_run°©e
(
∑ª¡
, 
TD_RAMP
);

110  
åue
;

111 
	}
}

113 
boﬁ
 
	$ømp_time_ovî
(
thªad_d©a
 *
td
)

115 i‡(!
td
->
o
.
ømp_time
 ||Åd->
ømp_time_ovî
)

116  
åue
;

118 i‡(
	`utime_sö˚_now
(&
td
->
ïoch
Ë>td->
o
.
ømp_time
) {

119 
td
->
ømp_time_ovî
 = 
åue
;

120 
	`ª£t_Æl_°©s
(
td
);

121 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

128 i‡(
	`∑ª¡_upd©e_ømp
(
td
))

129 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

131  
åue
;

134  
Ál£
;

135 
	}
}

137 
	$fio_time_öô
()

139 
i
;

141 
	`fio_˛ock_öô
();

146 
i
 = 0; i < 10; i++) {

147 
time•ec
 
tv
, 
ts
;

148 
ñ≠£d
;

150 
	`fio_gëtime
(&
tv
, 
NULL
);

151 
ts
.
tv_£c
 = 0;

152 
ts
.
tv_n£c
 = 1000;

154 
	`«no¶ìp
(&
ts
, 
NULL
);

155 
ñ≠£d
 = 
	`utime_sö˚_now
(&
tv
);

157 i‡(
ñ≠£d
 > 
ns_gønuœrôy
)

158 
ns_gønuœrôy
 = 
ñ≠£d
;

160 
	}
}

162 
	$£t_gíesis_time
()

164 
	`fio_gëtime
(&
gíesis
, 
NULL
);

165 
	}
}

167 
	$£t_ïoch_time
(
thªad_d©a
 *
td
, 
log_unix_ïoch
)

169 
	`fio_gëtime
(&
td
->
ïoch
, 
NULL
);

170 i‡(
log_unix_ïoch
) {

171 
timevÆ
 
tv
;

172 
	`gëtimeofday
(&
tv
, 
NULL
);

173 
td
->
unix_ïoch
 = ()(
tv
.
tv_£c
) * 1000 +

174 ()(
tv
.
tv_u£c
) / 1000;

176 
	}
}

178 
	$fûl_°¨t_time
(
time•ec
 *
t
)

180 
	`mem˝y
(
t
, &
gíesis
, (genesis));

181 
	}
}

	@/home/ysjin/Desktop/fio/fio/trim.c

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<°rög.h
>

7 
	~<as£π.h
>

8 
	~<±hªad.h
>

10 
	~"fio.h
"

11 
	~"åim.h
"

13 #ifde‡
FIO_HAVE_TRIM


14 
boﬁ
 
	$gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

16 
io_põ˚
 *
ùo
;

21 i‡(
io_u
->
fûe
)

22  
åue
;

23 i‡(
	`Êi°_em±y
(&
td
->
åim_li°
))

24  
Ál£
;

26 
	`as£π
(
td
->
åim_íåõs
);

27 
ùo
 = 
	`Êi°_fú°_íåy
(&
td
->
åim_li°
, 
io_põ˚
,Årim_list);

28 
	`ªmove_åim_íåy
(
td
, 
ùo
);

30 
io_u
->
off£t
 = 
ùo
->offset;

31 
io_u
->
buÊí
 = 
ùo
->
Àn
;

32 
io_u
->
fûe
 = 
ùo
->file;

38 i‡(!
td
->
o
.
åim_zîo
) {

39 i‡(
ùo
->
Êags
 & 
IP_F_ONLIST
)

40 
	`Êi°_dñ
(&
ùo
->
li°
);

42 
	`as£π
(
ùo
->
Êags
 & 
IP_F_ONRB
);

43 
	`rb_îa£
(&
ùo
->
rb_node
, &
td
->
io_hi°_åì
);

45 
td
->
io_hi°_Àn
--;

46 
	`‰ì
(
ùo
);

48 
ùo
->
Êags
 |
IP_F_TRIMMED
;

50 i‡(!
	`fio_fûe_›í
(
io_u
->
fûe
)) {

51 
r
 = 
	`td_io_›í_fûe
(
td
, 
io_u
->
fûe
);

53 i‡(
r
) {

54 
	`d¥öt
(
FD_VERIFY
, "failed file %s open\n",

55 
io_u
->
fûe
->
fûe_«me
);

56  
Ál£
;

60 
	`gë_fûe
(
io_u
->
fûe
);

61 
	`as£π
(
	`fio_fûe_›í
(
io_u
->
fûe
));

62 
io_u
->
ddú
 = 
DDIR_TRIM
;

63 
io_u
->
x„r_buf
 = 
NULL
;

64 
io_u
->
x„r_buÊí
 = io_u->
buÊí
;

66 
	`d¥öt
(
FD_VERIFY
, "gë_√xt_åim:Ñë io_u %p\n", 
io_u
);

67  
åue
;

68 
	}
}

70 
boﬁ
 
	$io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

72 
vÆ
;

73 
uöt64_t
 
‰™d_max
;

74 
r
;

76 i‡(!
td
->
o
.
åim_≥r˚¡age
)

77  
Ál£
;

79 
‰™d_max
 = 
	`ønd_max
(&
td
->
åim_°©e
);

80 
r
 = 
	`__ønd
(&
td
->
åim_°©e
);

81 
vÆ
 = (
‰™d_max
 / 100ULL);

83 
vÆ
 *(Ë
td
->
o
.
åim_≥r˚¡age
;

84  
r
 <
vÆ
;

85 
	}
}

	@/home/ysjin/Desktop/fio/fio/trim.h

1 #i‚de‡
FIO_TRIM_H


2 
	#FIO_TRIM_H


	)

4 
	~"fio.h
"

6 #ifde‡
FIO_HAVE_TRIM


7 
boﬁ
 
__mu°_check
 
gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

8 
boﬁ
 
io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

14 
ölöe
 
	$ªmove_åim_íåy
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

16 i‡(!
	`Êi°_em±y
(&
ùo
->
åim_li°
)) {

17 
	`Êi°_dñ_öô
(&
ùo
->
åim_li°
);

18 
td
->
åim_íåõs
--;

20 
	}
}

23 
ölöe
 
boﬁ
 
	$gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

25  
Ál£
;

26 
	}
}

27 
ölöe
 
boﬁ
 
	$io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

29  
Ál£
;

30 
	}
}

31 
ölöe
 
	$ªmove_åim_íåy
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

33 
	}
}

	@/home/ysjin/Desktop/fio/fio/verify-state.h

1 #i‚de‡
FIO_VERIFY_STATE_H


2 
	#FIO_VERIFY_STATE_H


	)

4 
	~<°döt.h
>

5 
	~<°rög.h
>

6 
	~<limôs.h
>

8 
	sthªad_ønd32_°©e
 {

9 
uöt32_t
 
	ms
[4];

12 
	sthªad_ønd64_°©e
 {

13 
uöt64_t
 
	ms
[6];

16 
	sthªad_ønd_°©e
 {

17 
uöt64_t
 
	mu£64
;

19 
thªad_ønd32_°©e
 
	m°©e32
;

20 
thªad_ønd64_°©e
 
	m°©e64
;

27 
	sfûe_comp
 {

28 
uöt64_t
 
	mfûío
;

29 
uöt64_t
 
	moff£t
;

32 
	sthªad_io_li°
 {

33 
uöt64_t
 
	mno_comps
;

34 
uöt32_t
 
	mdïth
;

35 
uöt32_t
 
	mnofûes
;

36 
uöt64_t
 
	mnumbîio
;

37 
uöt64_t
 
	mödex
;

38 
thªad_ønd_°©e
 
	mønd
;

39 
uöt8_t
 
	m«me
[64];

40 
fûe_comp
 
	mcomps
[0];

43 
	sÆl_io_li°
 {

44 
uöt64_t
 
	mthªads
;

45 
thªad_io_li°
 
	m°©e
[0];

48 
	#VSTATE_HDR_VERSION
 0x03

	)

50 
	svîify_°©e_hdr
 {

51 
uöt64_t
 
	mvîsi⁄
;

52 
uöt64_t
 
	msize
;

53 
uöt64_t
 
	m¸c
;

56 
	#IO_LIST_ALL
 0xffffffff

	)

58 
	gio_u
;

59 
Æl_io_li°
 *
gë_Æl_io_li°
(, 
size_t
 *);

60 
__vîify_ßve_°©e
(
Æl_io_li°
 *, const *);

61 
vîify_ßve_°©e
(
mask
);

62 
vîify_lﬂd_°©e
(
thªad_d©a
 *, const *);

63 
vîify_‰ì_°©e
(
thªad_d©a
 *);

64 
vîify_°©e_should_°›
(
thªad_d©a
 *, 
io_u
 *);

65 
vîify_assign_°©e
(
thªad_d©a
 *, *);

66 
vîify_°©e_hdr
(vîify_°©e_hd∏*, 
thªad_io_li°
 *);

68 
ölöe
 
size_t
 
	$__thªad_io_li°_sz
(
uöt32_t
 
dïth
, uöt32_à
nofûes
)

70  (
thªad_io_li°
Ë+ 
dïth
 * 
nofûes
 * (
fûe_comp
);

71 
	}
}

73 
ölöe
 
size_t
 
	$thªad_io_li°_sz
(
thªad_io_li°
 *
s
)

75  
	`__thªad_io_li°_sz
(
	`À32_to_˝u
(
s
->
dïth
),Üe32_to_˝u(s->
nofûes
));

76 
	}
}

78 
ölöe
 
thªad_io_li°
 *
	$io_li°_√xt
(
thªad_io_li°
 *
s
)

80  (
thªad_io_li°
 *)((*Ë
s
 + 
	`thªad_io_li°_sz
(s));

81 
	}
}

83 
ölöe
 
	$vîify_°©e_gí_«me
(*
out
, 
size_t
 
size
,

84 c⁄° *
«me
, c⁄° *
¥efix
,

85 
num
)

87 
íame
[
PATH_MAX
];

88 *
±r
;

93 
±r
 = 
íame
;

95 *
±r
 = *
«me
;

96 i‡(*
±r
 == '\0')

98 i‡(*
±r
 == '/')

99 *
±r
 = '.';

100 
±r
++;

101 
«me
++;

104 
	`¢¥ötf
(
out
, 
size
, "%s-%s-%d-vîify.°©e", 
¥efix
, 
íame
, 
num
);

105 
out
[
size
 - 1] = '\0';

106 
	}
}

	@/home/ysjin/Desktop/fio/fio/verify.c

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<°rög.h
>

7 
	~<as£π.h
>

8 
	~<±hªad.h
>

9 
	~<libgí.h
>

11 
	~"fio.h
"

12 
	~"vîify.h
"

13 
	~"åim.h
"

14 
	~"lib/ønd.h
"

15 
	~"lib/hweight.h
"

16 
	~"lib/∑âîn.h
"

18 
	~"¸c/md5.h
"

19 
	~"¸c/¸c64.h
"

20 
	~"¸c/¸c32.h
"

21 
	~"¸c/¸c32c.h
"

22 
	~"¸c/¸c16.h
"

23 
	~"¸c/¸c7.h
"

24 
	~"¸c/sha256.h
"

25 
	~"¸c/sha512.h
"

26 
	~"¸c/sha1.h
"

27 
	~"¸c/xxhash.h
"

28 
	~"¸c/sha3.h
"

30 
p›uœã_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

31 
vîify_hódî
 *
hdr
, 
hódî_num
,

32 
hódî_Àn
);

33 
__fûl_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

34 
vîify_hódî
 *
hdr
, 
hódî_num
,

35 
hódî_Àn
, 
uöt64_t
 
ønd_£ed
);

37 
	$fûl_buf„r_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
)

39 ()
	`˝y_∑âîn
(
td
->
o
.
buf„r_∑âîn
,Åd->o.
buf„r_∑âîn_byãs
, 
p
, 
Àn
);

40 
	}
}

42 
	$__fûl_buf„r
(
thªad_›ti⁄s
 *
o
, 
£ed
, *
p
,

43 
Àn
)

45 
	`__fûl_øndom_buf_≥r˚¡age
(
£ed
, 
p
, 
o
->
com¥ess_≥r˚¡age
, 
Àn
,Üí, o->
buf„r_∑âîn
, o->
buf„r_∑âîn_byãs
);

46 
	}
}

48 
	$fûl_buf„r
(
thªad_d©a
 *
td
, *
p
,

49 
Àn
)

51 
‰™d_°©e
 *
fs
 = &
td
->
vîify_°©e
;

52 
thªad_›ti⁄s
 *
o
 = &
td
->o;

54  
	`fûl_øndom_buf_≥r˚¡age
(
fs
, 
p
, 
o
->
com¥ess_≥r˚¡age
, 
Àn
,Üí, o->
buf„r_∑âîn
, o->
buf„r_∑âîn_byãs
);

55 
	}
}

57 
	$fûl_vîify_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
,

58 
io_u
 *io_u, 
£ed
, 
u£_£ed
)

60 
thªad_›ti⁄s
 *
o
 = &
td
->o;

62 i‡(!
o
->
vîify_∑âîn_byãs
) {

63 
	`d¥öt
(
FD_VERIFY
, "fû»øndom byã†Àn=%u\n", 
Àn
);

65 i‡(
u£_£ed
)

66 
	`__fûl_buf„r
(
o
, 
£ed
, 
p
, 
Àn
);

68 
io_u
->
ønd_£ed
 = 
	`fûl_buf„r
(
td
, 
p
, 
Àn
);

74 i‡(!
td
->
o
.
vîify_fmt_sz
 && 
io_u
->
buf_fûÀd_Àn
 >
Àn
) {

75 
	`d¥öt
(
FD_VERIFY
, "usingálready filled verifyÖattern b=%dÜen=%u\n",

76 
o
->
vîify_∑âîn_byãs
, 
Àn
);

80 ()
	`∑°e_f‹m©
(
td
->
o
.
vîify_∑âîn
,Åd->o.
vîify_∑âîn_byãs
,

81 
td
->
o
.
vîify_fmt
,Åd->o.
vîify_fmt_sz
,

82 
p
, 
Àn
, 
io_u
);

83 
io_u
->
buf_fûÀd_Àn
 = 
Àn
;

84 
	}
}

86 
	$gë_hdr_öc
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

88 
hdr_öc
;

94 
hdr_öc
 = 
io_u
->
buÊí
;

95 i‡(
td
->
o
.
vîify_öãrvÆ
 &&Åd->o.vîify_öãrvÆ <
io_u
->
buÊí
 &&

96 !
td
->
o
.
bs_u«lig√d
)

97 
hdr_öc
 = 
td
->
o
.
vîify_öãrvÆ
;

99  
hdr_öc
;

100 
	}
}

102 
	$fûl_∑âîn_hódîs
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

103 
£ed
, 
u£_£ed
)

105 
hdr_öc
, 
hódî_num
;

106 
vîify_hódî
 *
hdr
;

107 *
p
 = 
io_u
->
buf
;

109 
	`fûl_vîify_∑âîn
(
td
, 
p
, 
io_u
->
buÊí
, io_u, 
£ed
, 
u£_£ed
);

111 
hdr_öc
 = 
	`gë_hdr_öc
(
td
, 
io_u
);

112 
hódî_num
 = 0;

113 ; 
p
 < 
io_u
->
buf
 + io_u->
buÊí
;Ö +
hdr_öc
) {

114 
hdr
 = 
p
;

115 
	`p›uœã_hdr
(
td
, 
io_u
, 
hdr
, 
hódî_num
, 
hdr_öc
);

116 
hódî_num
++;

118 
	}
}

120 
	$memswp
(*
buf1
, *
buf2
, 
Àn
)

122 
sw≠
[200];

124 
	`as£π
(
Àn
 <(
sw≠
));

126 
	`mem˝y
(&
sw≠
, 
buf1
, 
Àn
);

127 
	`mem˝y
(
buf1
, 
buf2
, 
Àn
);

128 
	`mem˝y
(
buf2
, &
sw≠
, 
Àn
);

129 
	}
}

131 
	$hexdump
(*
buf„r
, 
Àn
)

133 *
p
 = 
buf„r
;

134 
i
;

136 
i
 = 0; i < 
Àn
; i++)

137 
	`log_îr
("%02x", 
p
[
i
]);

138 
	`log_îr
("\n");

139 
	}
}

144 
ölöe
 
	$__hdr_size
(
vîify_ty≥
)

146 
Àn
 = 0;

148 
vîify_ty≥
) {

149 
VERIFY_NONE
:

150 
VERIFY_HDR_ONLY
:

151 
VERIFY_NULL
:

152 
VERIFY_PATTERN
:

153 
Àn
 = 0;

155 
VERIFY_MD5
:

156 
Àn
 = (
vhdr_md5
);

158 
VERIFY_CRC64
:

159 
Àn
 = (
vhdr_¸c64
);

161 
VERIFY_CRC32C
:

162 
VERIFY_CRC32
:

163 
VERIFY_CRC32C_INTEL
:

164 
Àn
 = (
vhdr_¸c32
);

166 
VERIFY_CRC16
:

167 
Àn
 = (
vhdr_¸c16
);

169 
VERIFY_CRC7
:

170 
Àn
 = (
vhdr_¸c7
);

172 
VERIFY_SHA256
:

173 
Àn
 = (
vhdr_sha256
);

175 
VERIFY_SHA512
:

176 
Àn
 = (
vhdr_sha512
);

178 
VERIFY_SHA3_224
:

179 
Àn
 = (
vhdr_sha3_224
);

181 
VERIFY_SHA3_256
:

182 
Àn
 = (
vhdr_sha3_256
);

184 
VERIFY_SHA3_384
:

185 
Àn
 = (
vhdr_sha3_384
);

187 
VERIFY_SHA3_512
:

188 
Àn
 = (
vhdr_sha3_512
);

190 
VERIFY_XXHASH
:

191 
Àn
 = (
vhdr_xxhash
);

193 
VERIFY_SHA1
:

194 
Àn
 = (
vhdr_sha1
);

196 
VERIFY_PATTERN_NO_HDR
:

199 
	`log_îr
("fio: unknown verify header!\n");

200 
	`as£π
(0);

203  
Àn
 + (
vîify_hódî
);

204 
	}
}

206 
ölöe
 
	$hdr_size
(
thªad_d©a
 *
td
,

207 
vîify_hódî
 *
hdr
)

209 i‡(
td
->
o
.
vîify
 =
VERIFY_PATTERN_NO_HDR
)

212  
	`__hdr_size
(
hdr
->
vîify_ty≥
);

213 
	}
}

215 *
	$hdr_¥iv
(
vîify_hódî
 *
hdr
)

217 *
¥iv
 = 
hdr
;

219  
¥iv
 + (
vîify_hódî
);

220 
	}
}

226 
	svc⁄t
 {

230 
io_u
 *
	mio_u
;

231 
	mhdr_num
;

232 
thªad_d©a
 *
	mtd
;

237 c⁄° *
	m«me
;

238 *
	mgood_¸c
;

239 *
	mbad_¸c
;

240 
	m¸c_Àn
;

243 
	#DUMP_BUF_SZ
 255

	)

245 
	$dump_buf
(*
buf
, 
Àn
, 
off£t
,

246 c⁄° *
ty≥
, 
fio_fûe
 *
f
)

248 *
±r
, 
‚ame
[
DUMP_BUF_SZ
];

249 
size_t
 
buf_À·
 = 
DUMP_BUF_SZ
;

250 
ªt
, 
fd
;

252 
±r
 = 
	`°rdup
(
f
->
fûe_«me
);

254 
	`mem£t
(
‚ame
, 0, (fname));

255 i‡(
aux_∑th
)

256 
	`•rötf
(
‚ame
, "%s%c", 
aux_∑th
, 
FIO_OS_PATH_SEPARATOR
);

258 
	`°∫˝y
(
‚ame
 + 
	`°æí
(‚ame), 
	`ba£«me
(
±r
), 
buf_À·
 - 1);

260 
buf_À·
 -
	`°æí
(
‚ame
);

261 i‡(
buf_À·
 <= 0) {

262 i‡(!
	`fio_did_w¨n
(
FIO_WARN_VERIFY_BUF
))

263 
	`log_îr
("fio: verify failure dump bufferÅoo small\n");

264 
	`‰ì
(
±r
);

268 
	`¢¥ötf
(
‚ame
 + 
	`°æí
(‚ame), 
buf_À·
, ".%Œu.%s", 
off£t
, 
ty≥
);

270 
fd
 = 
	`›í
(
‚ame
, 
O_CREAT
 | 
O_TRUNC
 | 
O_WRONLY
, 0644);

271 i‡(
fd
 < 0) {

272 
	`≥º‹
("open verify buf file");

273 
	`‰ì
(
±r
);

277 
Àn
) {

278 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

279 i‡(!
ªt
)

281 i‡(
ªt
 < 0) {

282 
	`≥º‹
("write verify buf file");

285 
Àn
 -
ªt
;

286 
buf
 +
ªt
;

289 
	`˛o£
(
fd
);

290 
	`log_îr
(" %†d©®dum≥dá†%s\n", 
ty≥
, 
‚ame
);

291 
	`‰ì
(
±r
);

292 
	}
}

298 
	$__dump_vîify_buf„rs
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

300 
thªad_d©a
 *
td
 = 
vc
->td;

301 
io_u
 *io_u = 
vc
->io_u;

302 
hdr_off£t
;

303 
io_u
 
dummy
;

304 *
buf
;

306 i‡(!
td
->
o
.
vîify_dump
)

312 
hdr_off£t
 = 
vc
->
hdr_num
 * 
hdr
->
Àn
;

314 
	`dump_buf
(
io_u
->
buf
 + 
hdr_off£t
, 
hdr
->
Àn
, io_u->
off£t
 + hdr_offset,

315 "ª˚ived", 
vc
->
io_u
->
fûe
);

320 
buf
 = 
	`mÆloc
(
io_u
->
buÊí
);

321 
dummy
 = *
io_u
;

322 
dummy
.
buf
 = buf;

323 
dummy
.
ønd_£ed
 = 
hdr
->rand_seed;

324 
dummy
.
buf_fûÀd_Àn
 = 0;

325 
dummy
.
buÊí
 = 
io_u
->buflen;

327 
	`fûl_∑âîn_hódîs
(
td
, &
dummy
, 
hdr
->
ønd_£ed
, 1);

329 
	`dump_buf
(
buf
 + 
hdr_off£t
, 
hdr
->
Àn
, 
io_u
->
off£t
 + hdr_offset,

330 "ex≥˘ed", 
vc
->
io_u
->
fûe
);

331 
	`‰ì
(
buf
);

332 
	}
}

334 
	$dump_vîify_buf„rs
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

336 
thªad_d©a
 *
td
 = 
vc
->td;

337 
vîify_hódî
 
shdr
;

339 i‡(
td
->
o
.
vîify
 =
VERIFY_PATTERN_NO_HDR
) {

340 
	`__fûl_hdr
(
td
, 
vc
->
io_u
, &
shdr
, 0, vc->io_u->
buÊí
, 0);

341 
hdr
 = &
shdr
;

344 
	`__dump_vîify_buf„rs
(
hdr
, 
vc
);

345 
	}
}

347 
	$log_vîify_Áûuª
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

349 
off£t
;

351 
off£t
 = 
vc
->
io_u
->offset;

352 
off£t
 +
vc
->
hdr_num
 * 
hdr
->
Àn
;

353 
	`log_îr
("%.8s: verify failedát file %s offset %llu,Üength %u\n",

354 
vc
->
«me
, vc->
io_u
->
fûe
->
fûe_«me
, 
off£t
, 
hdr
->
Àn
);

356 i‡(
vc
->
good_¸c
 && vc->
bad_¸c
) {

357 
	`log_îr
(" Expected CRC: ");

358 
	`hexdump
(
vc
->
good_¸c
, vc->
¸c_Àn
);

359 
	`log_îr
(" Received CRC: ");

360 
	`hexdump
(
vc
->
bad_¸c
, vc->
¸c_Àn
);

363 
	`dump_vîify_buf„rs
(
hdr
, 
vc
);

364 
	}
}

369 
ölöe
 *
	$io_u_vîify_off
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

371  
vc
->
io_u
->
buf
 + vc->
hdr_num
 * 
hdr
->
Àn
 + 
	`hdr_size
(vc->
td
, hdr);

372 
	}
}

374 
	$vîify_io_u_∑âîn
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

376 
thªad_d©a
 *
td
 = 
vc
->td;

377 
io_u
 *io_u = 
vc
->io_u;

378 *
buf
, *
∑âîn
;

379 
hódî_size
 = 
	`__hdr_size
(
td
->
o
.
vîify
);

380 
Àn
, 
mod
, 
i
, 
∑âîn_size
;

381 
rc
;

383 
∑âîn
 = 
td
->
o
.
vîify_∑âîn
;

384 
∑âîn_size
 = 
td
->
o
.
vîify_∑âîn_byãs
;

385 
	`as£π
(
∑âîn_size
 != 0);

387 ()
	`∑°e_f‹m©_ö∂a˚
(
∑âîn
, 
∑âîn_size
,

388 
td
->
o
.
vîify_fmt
,Åd->o.
vîify_fmt_sz
, 
io_u
);

390 
buf
 = (*Ë
hdr
 + 
hódî_size
;

391 
Àn
 = 
	`gë_hdr_öc
(
td
, 
io_u
Ë- 
hódî_size
;

392 
mod
 = (
	`gë_hdr_öc
(
td
, 
io_u
Ë* 
vc
->
hdr_num
 + 
hódî_size
Ë% 
∑âîn_size
;

394 
rc
 = 
	`cmp_∑âîn
(
∑âîn
, 
∑âîn_size
, 
mod
, 
buf
, 
Àn
);

395 i‡(!
rc
)

399 
i
 = 0; i < 
Àn
; i++) {

400 i‡(
buf
[
i
] !
∑âîn
[
mod
]) {

401 
bôs
;

403 
bôs
 = 
	`hweight8
(
buf
[
i
] ^ 
∑âîn
[
mod
]);

404 
	`log_îr
("fio: gotÖattern '%02x', wanted '%02x'. Bad bits %d\n",

405 ()
buf
[
i
],

406 ()
∑âîn
[
mod
],

407 
bôs
);

408 
	`log_îr
("fio: badÖ©ã∫ block off£à%u\n", 
i
);

409 
vc
->
«me
 = "pattern";

410 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

411  
EILSEQ
;

413 
mod
++;

414 i‡(
mod
 =
td
->
o
.
vîify_∑âîn_byãs
)

415 
mod
 = 0;

419 
	`as£π
(0);

420  
EILSEQ
;

421 
	}
}

423 
	$vîify_io_u_xxhash
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

425 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

426 
vhdr_xxhash
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

427 
uöt32_t
 
hash
;

428 *
°©e
;

430 
	`d¥öt
(
FD_VERIFY
, "xxhash vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

432 
°©e
 = 
	`XXH32_öô
(1);

433 
	`XXH32_upd©e
(
°©e
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

434 
hash
 = 
	`XXH32_dige°
(
°©e
);

436 i‡(
vh
->
hash
 == hash)

439 
vc
->
«me
 = "xxhash";

440 
vc
->
good_¸c
 = &
vh
->
hash
;

441 
vc
->
bad_¸c
 = &
hash
;

442 
vc
->
¸c_Àn
 = (
hash
);

443 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

444  
EILSEQ
;

445 
	}
}

447 
	$vîify_io_u_sha3
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
,

448 
fio_sha3_˘x
 *
sha3_˘x
, 
uöt8_t
 *
sha
,

449 
sha_size
, c⁄° *
«me
)

451 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

453 
	`d¥öt
(
FD_VERIFY
, "%†vîify io_u %p,Üí %u\n", 
«me
, 
vc
->
io_u
, 
hdr
->
Àn
);

455 
	`fio_sha3_upd©e
(
sha3_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

456 
	`fio_sha3_föÆ
(
sha3_˘x
);

458 i‡(!
	`memcmp
(
sha
, 
sha3_˘x
->sha, 
sha_size
))

461 
vc
->
«me
 =Çame;

462 
vc
->
good_¸c
 = 
sha
;

463 
vc
->
bad_¸c
 = 
sha3_˘x
->
sha
;

464 
vc
->
¸c_Àn
 = 
sha_size
;

465 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

466  
EILSEQ
;

467 
	}
}

469 
	$vîify_io_u_sha3_224
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

471 
vhdr_sha3_224
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

472 
uöt8_t
 
sha
[
SHA3_224_DIGEST_SIZE
];

473 
fio_sha3_˘x
 
sha3_˘x
 = {

474 .
sha
 = sha,

477 
	`fio_sha3_224_öô
(&
sha3_˘x
);

479  
	`vîify_io_u_sha3
(
hdr
, 
vc
, &
sha3_˘x
, 
vh
->
sha
,

480 
SHA3_224_DIGEST_SIZE
, "sha3-224");

481 
	}
}

483 
	$vîify_io_u_sha3_256
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

485 
vhdr_sha3_256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

486 
uöt8_t
 
sha
[
SHA3_256_DIGEST_SIZE
];

487 
fio_sha3_˘x
 
sha3_˘x
 = {

488 .
sha
 = sha,

491 
	`fio_sha3_256_öô
(&
sha3_˘x
);

493  
	`vîify_io_u_sha3
(
hdr
, 
vc
, &
sha3_˘x
, 
vh
->
sha
,

494 
SHA3_256_DIGEST_SIZE
, "sha3-256");

495 
	}
}

497 
	$vîify_io_u_sha3_384
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

499 
vhdr_sha3_384
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

500 
uöt8_t
 
sha
[
SHA3_384_DIGEST_SIZE
];

501 
fio_sha3_˘x
 
sha3_˘x
 = {

502 .
sha
 = sha,

505 
	`fio_sha3_384_öô
(&
sha3_˘x
);

507  
	`vîify_io_u_sha3
(
hdr
, 
vc
, &
sha3_˘x
, 
vh
->
sha
,

508 
SHA3_384_DIGEST_SIZE
, "sha3-384");

509 
	}
}

511 
	$vîify_io_u_sha3_512
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

513 
vhdr_sha3_512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

514 
uöt8_t
 
sha
[
SHA3_512_DIGEST_SIZE
];

515 
fio_sha3_˘x
 
sha3_˘x
 = {

516 .
sha
 = sha,

519 
	`fio_sha3_512_öô
(&
sha3_˘x
);

521  
	`vîify_io_u_sha3
(
hdr
, 
vc
, &
sha3_˘x
, 
vh
->
sha
,

522 
SHA3_512_DIGEST_SIZE
, "sha3-512");

523 
	}
}

525 
	$vîify_io_u_sha512
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

527 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

528 
vhdr_sha512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

529 
uöt8_t
 
sha512
[128];

530 
fio_sha512_˘x
 
sha512_˘x
 = {

531 .
buf
 = 
sha512
,

534 
	`d¥öt
(
FD_VERIFY
, "sha512 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

536 
	`fio_sha512_öô
(&
sha512_˘x
);

537 
	`fio_sha512_upd©e
(&
sha512_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

539 i‡(!
	`memcmp
(
vh
->
sha512
, 
sha512_˘x
.
buf
, (sha512)))

542 
vc
->
«me
 = "sha512";

543 
vc
->
good_¸c
 = 
vh
->
sha512
;

544 
vc
->
bad_¸c
 = 
sha512_˘x
.
buf
;

545 
vc
->
¸c_Àn
 = (
vh
->
sha512
);

546 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

547  
EILSEQ
;

548 
	}
}

550 
	$vîify_io_u_sha256
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

552 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

553 
vhdr_sha256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

554 
uöt8_t
 
sha256
[64];

555 
fio_sha256_˘x
 
sha256_˘x
 = {

556 .
buf
 = 
sha256
,

559 
	`d¥öt
(
FD_VERIFY
, "sha256 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

561 
	`fio_sha256_öô
(&
sha256_˘x
);

562 
	`fio_sha256_upd©e
(&
sha256_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

563 
	`fio_sha256_föÆ
(&
sha256_˘x
);

565 i‡(!
	`memcmp
(
vh
->
sha256
, 
sha256_˘x
.
buf
, (sha256)))

568 
vc
->
«me
 = "sha256";

569 
vc
->
good_¸c
 = 
vh
->
sha256
;

570 
vc
->
bad_¸c
 = 
sha256_˘x
.
buf
;

571 
vc
->
¸c_Àn
 = (
vh
->
sha256
);

572 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

573  
EILSEQ
;

574 
	}
}

576 
	$vîify_io_u_sha1
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

578 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

579 
vhdr_sha1
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

580 
uöt32_t
 
sha1
[5];

581 
fio_sha1_˘x
 
sha1_˘x
 = {

582 .
H
 = 
sha1
,

585 
	`d¥öt
(
FD_VERIFY
, "sha1 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

587 
	`fio_sha1_öô
(&
sha1_˘x
);

588 
	`fio_sha1_upd©e
(&
sha1_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

589 
	`fio_sha1_föÆ
(&
sha1_˘x
);

591 i‡(!
	`memcmp
(
vh
->
sha1
, 
sha1_˘x
.
H
, (sha1)))

594 
vc
->
«me
 = "sha1";

595 
vc
->
good_¸c
 = 
vh
->
sha1
;

596 
vc
->
bad_¸c
 = 
sha1_˘x
.
H
;

597 
vc
->
¸c_Àn
 = (
vh
->
sha1
);

598 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

599  
EILSEQ
;

600 
	}
}

602 
	$vîify_io_u_¸c7
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

604 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

605 
vhdr_¸c7
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

606 
c
;

608 
	`d¥öt
(
FD_VERIFY
, "¸c7 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

610 
c
 = 
	`fio_¸c7
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

612 i‡(
c
 =
vh
->
¸c7
)

615 
vc
->
«me
 = "crc7";

616 
vc
->
good_¸c
 = &
vh
->
¸c7
;

617 
vc
->
bad_¸c
 = &
c
;

618 
vc
->
¸c_Àn
 = 1;

619 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

620  
EILSEQ
;

621 
	}
}

623 
	$vîify_io_u_¸c16
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

625 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

626 
vhdr_¸c16
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

627 
c
;

629 
	`d¥öt
(
FD_VERIFY
, "¸c16 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

631 
c
 = 
	`fio_¸c16
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

633 i‡(
c
 =
vh
->
¸c16
)

636 
vc
->
«me
 = "crc16";

637 
vc
->
good_¸c
 = &
vh
->
¸c16
;

638 
vc
->
bad_¸c
 = &
c
;

639 
vc
->
¸c_Àn
 = 2;

640 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

641  
EILSEQ
;

642 
	}
}

644 
	$vîify_io_u_¸c64
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

646 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

647 
vhdr_¸c64
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

648 
c
;

650 
	`d¥öt
(
FD_VERIFY
, "¸c64 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

652 
c
 = 
	`fio_¸c64
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

654 i‡(
c
 =
vh
->
¸c64
)

657 
vc
->
«me
 = "crc64";

658 
vc
->
good_¸c
 = &
vh
->
¸c64
;

659 
vc
->
bad_¸c
 = &
c
;

660 
vc
->
¸c_Àn
 = 8;

661 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

662  
EILSEQ
;

663 
	}
}

665 
	$vîify_io_u_¸c32
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

667 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

668 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

669 
uöt32_t
 
c
;

671 
	`d¥öt
(
FD_VERIFY
, "¸c32 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

673 
c
 = 
	`fio_¸c32
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

675 i‡(
c
 =
vh
->
¸c32
)

678 
vc
->
«me
 = "crc32";

679 
vc
->
good_¸c
 = &
vh
->
¸c32
;

680 
vc
->
bad_¸c
 = &
c
;

681 
vc
->
¸c_Àn
 = 4;

682 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

683  
EILSEQ
;

684 
	}
}

686 
	$vîify_io_u_¸c32c
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

688 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

689 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

690 
uöt32_t
 
c
;

692 
	`d¥öt
(
FD_VERIFY
, "¸c32¯vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

694 
c
 = 
	`fio_¸c32c
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

696 i‡(
c
 =
vh
->
¸c32
)

699 
vc
->
«me
 = "crc32c";

700 
vc
->
good_¸c
 = &
vh
->
¸c32
;

701 
vc
->
bad_¸c
 = &
c
;

702 
vc
->
¸c_Àn
 = 4;

703 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

704  
EILSEQ
;

705 
	}
}

707 
	$vîify_io_u_md5
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

709 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

710 
vhdr_md5
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

711 
uöt32_t
 
hash
[
MD5_HASH_WORDS
];

712 
fio_md5_˘x
 
md5_˘x
 = {

713 .
hash
 = hash,

716 
	`d¥öt
(
FD_VERIFY
, "md5 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

718 
	`fio_md5_öô
(&
md5_˘x
);

719 
	`fio_md5_upd©e
(&
md5_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

720 
	`fio_md5_föÆ
(&
md5_˘x
);

722 i‡(!
	`memcmp
(
vh
->
md5_dige°
, 
md5_˘x
.
hash
, (hash)))

725 
vc
->
«me
 = "md5";

726 
vc
->
good_¸c
 = 
vh
->
md5_dige°
;

727 
vc
->
bad_¸c
 = 
md5_˘x
.
hash
;

728 
vc
->
¸c_Àn
 = (
hash
);

729 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

730  
EILSEQ
;

731 
	}
}

736 
	$vîify_io_u_async
(
thªad_d©a
 *
td
, 
io_u
 **
io_u_±r
)

738 
io_u
 *io_u = *
io_u_±r
;

740 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

742 i‡(
io_u
->
fûe
)

743 
	`put_fûe_log
(
td
, 
io_u
->
fûe
);

745 i‡(
io_u
->
Êags
 & 
IO_U_F_IN_CUR_DEPTH
) {

746 
td
->
cur_dïth
--;

747 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_IN_CUR_DEPTH
);

749 
	`Êi°_add_èû
(&
io_u
->
vîify_li°
, &
td
->verify_list);

750 *
io_u_±r
 = 
NULL
;

752 
	`±hªad_c⁄d_sig«l
(&
td
->
vîify_c⁄d
);

753 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

755 
	}
}

762 
	$mem_is_zîo
(c⁄° *
d©a
, 
size_t
 
Àngth
)

764 c⁄° *
p
 = 
d©a
;

765 
size_t
 
Àn
;

768 
Àn
 = 0;Üen < 16;Üen++) {

769 i‡(!
Àngth
)

771 i‡(*
p
)

773 
p
++;

774 
Àngth
--;

778  
	`memcmp
(
d©a
, 
p
, 
Àngth
) == 0;

779 
	}
}

781 
	$mem_is_zîo_¶ow
(c⁄° *
d©a
, 
size_t
 
Àngth
, size_à*
off£t
)

783 c⁄° *
p
 = 
d©a
;

785 *
off£t
 = 0;

786 
Àngth
) {

787 i‡(*
p
)

789 (*
off£t
)++;

790 
Àngth
--;

791 
p
++;

794  !
Àngth
;

795 
	}
}

797 
	$vîify_åimmed_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

799 
size_t
 
off£t
;

801 i‡(!
td
->
o
.
åim_zîo
)

804 i‡(
	`mem_is_zîo
(
io_u
->
buf
, io_u->
buÊí
))

807 
	`mem_is_zîo_¶ow
(
io_u
->
buf
, io_u->
buÊí
, &
off£t
);

809 
	`log_îr
("trim: verify failedát file %s offset %llu,Üength %lu"

811 
io_u
->
fûe
->
fûe_«me
, io_u->
off£t
, io_u->
buÊí
,

812 (Ë
off£t
);

813  
EILSEQ
;

814 
	}
}

816 
	$vîify_hódî
(
io_u
 *io_u, 
thªad_d©a
 *
td
,

817 
vîify_hódî
 *
hdr
, 
hdr_num
,

818 
hdr_Àn
)

820 *
p
 = 
hdr
;

821 
uöt32_t
 
¸c
;

823 i‡(
hdr
->
magic
 !
FIO_HDR_MAGIC
) {

824 
	`log_îr
("verify: bad magic header %x, wanted %x",

825 
hdr
->
magic
, 
FIO_HDR_MAGIC
);

826 
îr
;

828 i‡(
hdr
->
Àn
 !
hdr_Àn
) {

829 
	`log_îr
("verify: bad headerÜength %u, wanted %u",

830 
hdr
->
Àn
, 
hdr_Àn
);

831 
îr
;

833 i‡(
hdr
->
ønd_£ed
 !
io_u
->rand_seed) {

834 
	`log_îr
("vîify: bad hódîÑ™d_£ed %"
PRIu64


835 ", w™ãd %"
PRIu64
,

836 
hdr
->
ønd_£ed
, 
io_u
->rand_seed);

837 
îr
;

839 i‡(
hdr
->
off£t
 !
io_u
->off£à+ 
hdr_num
 * 
td
->
o
.
vîify_öãrvÆ
) {

840 
	`log_îr
("vîify: bad hódî off£à%"
PRIu64


842 
hdr
->
off£t
, 
io_u
->offset);

843 
îr
;

854 i‡(
	`td_wrôe
(
td
Ë&& (
	`td_mö_bs
—dË=
	`td_max_bs
(td)) &&

855 !
td
->
o
.
time_ba£d
)

856 i‡(!
td
->
o
.
vîify_⁄ly
 ||Åd->o.
lo›s
 == 0)

857 i‡(
hdr
->
numbîio
 !
io_u
->numberio) {

858 
	`log_îr
("vîify: bad hódîÇumbîiÿ%"
PRIu16


859 ", w™ãd %"
PRIu16
,

860 
hdr
->
numbîio
, 
io_u
->numberio);

861 
îr
;

864 
¸c
 = 
	`fio_¸c32c
(
p
, 
	`off£tof
(
vîify_hódî
, 
¸c32
));

865 i‡(
¸c
 !
hdr
->
¸c32
) {

866 
	`log_îr
("verify: bad header crc %x, calculated %x",

867 
hdr
->
¸c32
, 
¸c
);

868 
îr
;

872 
îr
:

873 
	`log_îr
("át file %s offset %llu,Üength %u\n",

874 
io_u
->
fûe
->
fûe_«me
,

875 
io_u
->
off£t
 + 
hdr_num
 * 
hdr_Àn
, hdr_len);

877 i‡(
td
->
o
.
vîify_dump
)

878 
	`dump_buf
(
p
, 
hdr_Àn
, 
io_u
->
off£t
 + 
hdr_num
 * hdr_len,

879 "hdr_Áû", 
io_u
->
fûe
);

881  
EILSEQ
;

882 
	}
}

884 
	$vîify_io_u
(
thªad_d©a
 *
td
, 
io_u
 **
io_u_±r
)

886 
vîify_hódî
 *
hdr
;

887 
io_u
 *io_u = *
io_u_±r
;

888 
hódî_size
, 
hdr_öc
, 
hdr_num
 = 0;

889 *
p
;

890 
ªt
;

892 i‡(
td
->
o
.
vîify
 =
VERIFY_NULL
 || 
io_u
->
ddú
 !
DDIR_READ
)

898 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_FAKEIO
))

901 i‡(
io_u
->
Êags
 & 
IO_U_F_TRIMMED
) {

902 
ªt
 = 
	`vîify_åimmed_io_u
(
td
, 
io_u
);

903 
d⁄e
;

906 
hdr_öc
 = 
	`gë_hdr_öc
(
td
, 
io_u
);

908 
ªt
 = 0;

909 
p
 = 
io_u
->
buf
;Ö < io_u->bu‡+ io_u->
buÊí
;

910 
p
 +
hdr_öc
, 
hdr_num
++) {

911 
vc⁄t
 
vc
 = {

912 .
io_u
 = io_u,

913 .
hdr_num
 = hdr_num,

914 .
td
 =Åd,

916 
vîify_ty≥
;

918 i‡(
ªt
 && 
td
->
o
.
vîify_Áèl
)

921 
hódî_size
 = 
	`__hdr_size
(
td
->
o
.
vîify
);

922 i‡(
td
->
o
.
vîify_off£t
)

923 
	`memswp
(
p
,Ö + 
td
->
o
.
vîify_off£t
, 
hódî_size
);

924 
hdr
 = 
p
;

930 i‡(
td
->
o
.
vîifys‹t
 || (td->
Êags
 & 
TD_F_VER_BACKLOG
))

931 
io_u
->
ønd_£ed
 = 
hdr
->rand_seed;

933 i‡(
td
->
o
.
vîify
 !
VERIFY_PATTERN_NO_HDR
) {

934 
ªt
 = 
	`vîify_hódî
(
io_u
, 
td
, 
hdr
, 
hdr_num
, 
hdr_öc
);

935 i‡(
ªt
)

936  
ªt
;

939 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

940 
vîify_ty≥
 = 
td
->
o
.
vîify
;

942 
vîify_ty≥
 = 
hdr
->verify_type;

944 
vîify_ty≥
) {

945 
VERIFY_HDR_ONLY
:

948 i‡(
td
->
o
.
vîify_∑âîn_byãs
)

949 
ªt
 = 
	`vîify_io_u_∑âîn
(
hdr
, &
vc
);

951 
VERIFY_MD5
:

952 
ªt
 = 
	`vîify_io_u_md5
(
hdr
, &
vc
);

954 
VERIFY_CRC64
:

955 
ªt
 = 
	`vîify_io_u_¸c64
(
hdr
, &
vc
);

957 
VERIFY_CRC32C
:

958 
VERIFY_CRC32C_INTEL
:

959 
ªt
 = 
	`vîify_io_u_¸c32c
(
hdr
, &
vc
);

961 
VERIFY_CRC32
:

962 
ªt
 = 
	`vîify_io_u_¸c32
(
hdr
, &
vc
);

964 
VERIFY_CRC16
:

965 
ªt
 = 
	`vîify_io_u_¸c16
(
hdr
, &
vc
);

967 
VERIFY_CRC7
:

968 
ªt
 = 
	`vîify_io_u_¸c7
(
hdr
, &
vc
);

970 
VERIFY_SHA256
:

971 
ªt
 = 
	`vîify_io_u_sha256
(
hdr
, &
vc
);

973 
VERIFY_SHA512
:

974 
ªt
 = 
	`vîify_io_u_sha512
(
hdr
, &
vc
);

976 
VERIFY_SHA3_224
:

977 
ªt
 = 
	`vîify_io_u_sha3_224
(
hdr
, &
vc
);

979 
VERIFY_SHA3_256
:

980 
ªt
 = 
	`vîify_io_u_sha3_256
(
hdr
, &
vc
);

982 
VERIFY_SHA3_384
:

983 
ªt
 = 
	`vîify_io_u_sha3_384
(
hdr
, &
vc
);

985 
VERIFY_SHA3_512
:

986 
ªt
 = 
	`vîify_io_u_sha3_512
(
hdr
, &
vc
);

988 
VERIFY_XXHASH
:

989 
ªt
 = 
	`vîify_io_u_xxhash
(
hdr
, &
vc
);

991 
VERIFY_SHA1
:

992 
ªt
 = 
	`vîify_io_u_sha1
(
hdr
, &
vc
);

994 
VERIFY_PATTERN
:

995 
VERIFY_PATTERN_NO_HDR
:

996 
ªt
 = 
	`vîify_io_u_∑âîn
(
hdr
, &
vc
);

999 
	`log_îr
("Bad vîifyÅy≥ %u\n", 
hdr
->
vîify_ty≥
);

1000 
ªt
 = 
EINVAL
;

1003 i‡(
ªt
 && 
vîify_ty≥
 !
hdr
->verify_type)

1004 
	`log_îr
("fio: verifyÅype mismatch (%u media, %u given)\n",

1005 
hdr
->
vîify_ty≥
, verify_type);

1008 
d⁄e
:

1009 i‡(
ªt
 && 
td
->
o
.
vîify_Áèl
)

1010 
	`fio_m¨k_td_ãrmö©e
(
td
);

1012  
ªt
;

1013 
	}
}

1015 
	$fûl_xxhash
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1017 
vhdr_xxhash
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1018 *
°©e
;

1020 
°©e
 = 
	`XXH32_öô
(1);

1021 
	`XXH32_upd©e
(
°©e
, 
p
, 
Àn
);

1022 
vh
->
hash
 = 
	`XXH32_dige°
(
°©e
);

1023 
	}
}

1025 
	$fûl_sha3
(
fio_sha3_˘x
 *
sha3_˘x
, *
p
, 
Àn
)

1027 
	`fio_sha3_upd©e
(
sha3_˘x
, 
p
, 
Àn
);

1028 
	`fio_sha3_föÆ
(
sha3_˘x
);

1029 
	}
}

1031 
	$fûl_sha3_224
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1033 
vhdr_sha3_224
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1034 
fio_sha3_˘x
 
sha3_˘x
 = {

1035 .
sha
 = 
vh
->sha,

1038 
	`fio_sha3_224_öô
(&
sha3_˘x
);

1039 
	`fûl_sha3
(&
sha3_˘x
, 
p
, 
Àn
);

1040 
	}
}

1042 
	$fûl_sha3_256
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1044 
vhdr_sha3_256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1045 
fio_sha3_˘x
 
sha3_˘x
 = {

1046 .
sha
 = 
vh
->sha,

1049 
	`fio_sha3_256_öô
(&
sha3_˘x
);

1050 
	`fûl_sha3
(&
sha3_˘x
, 
p
, 
Àn
);

1051 
	}
}

1053 
	$fûl_sha3_384
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1055 
vhdr_sha3_384
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1056 
fio_sha3_˘x
 
sha3_˘x
 = {

1057 .
sha
 = 
vh
->sha,

1060 
	`fio_sha3_384_öô
(&
sha3_˘x
);

1061 
	`fûl_sha3
(&
sha3_˘x
, 
p
, 
Àn
);

1062 
	}
}

1064 
	$fûl_sha3_512
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1066 
vhdr_sha3_512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1067 
fio_sha3_˘x
 
sha3_˘x
 = {

1068 .
sha
 = 
vh
->sha,

1071 
	`fio_sha3_512_öô
(&
sha3_˘x
);

1072 
	`fûl_sha3
(&
sha3_˘x
, 
p
, 
Àn
);

1073 
	}
}

1075 
	$fûl_sha512
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1077 
vhdr_sha512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1078 
fio_sha512_˘x
 
sha512_˘x
 = {

1079 .
buf
 = 
vh
->
sha512
,

1082 
	`fio_sha512_öô
(&
sha512_˘x
);

1083 
	`fio_sha512_upd©e
(&
sha512_˘x
, 
p
, 
Àn
);

1084 
	}
}

1086 
	$fûl_sha256
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1088 
vhdr_sha256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1089 
fio_sha256_˘x
 
sha256_˘x
 = {

1090 .
buf
 = 
vh
->
sha256
,

1093 
	`fio_sha256_öô
(&
sha256_˘x
);

1094 
	`fio_sha256_upd©e
(&
sha256_˘x
, 
p
, 
Àn
);

1095 
	`fio_sha256_föÆ
(&
sha256_˘x
);

1096 
	}
}

1098 
	$fûl_sha1
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1100 
vhdr_sha1
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1101 
fio_sha1_˘x
 
sha1_˘x
 = {

1102 .
H
 = 
vh
->
sha1
,

1105 
	`fio_sha1_öô
(&
sha1_˘x
);

1106 
	`fio_sha1_upd©e
(&
sha1_˘x
, 
p
, 
Àn
);

1107 
	`fio_sha1_föÆ
(&
sha1_˘x
);

1108 
	}
}

1110 
	$fûl_¸c7
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1112 
vhdr_¸c7
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1114 
vh
->
¸c7
 = 
	`fio_¸c7
(
p
, 
Àn
);

1115 
	}
}

1117 
	$fûl_¸c16
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1119 
vhdr_¸c16
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1121 
vh
->
¸c16
 = 
	`fio_¸c16
(
p
, 
Àn
);

1122 
	}
}

1124 
	$fûl_¸c32
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1126 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1128 
vh
->
¸c32
 = 
	`fio_¸c32
(
p
, 
Àn
);

1129 
	}
}

1131 
	$fûl_¸c32c
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1133 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1135 
vh
->
¸c32
 = 
	`fio_¸c32c
(
p
, 
Àn
);

1136 
	}
}

1138 
	$fûl_¸c64
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1140 
vhdr_¸c64
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1142 
vh
->
¸c64
 = 
	`fio_¸c64
(
p
, 
Àn
);

1143 
	}
}

1145 
	$fûl_md5
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1147 
vhdr_md5
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1148 
fio_md5_˘x
 
md5_˘x
 = {

1149 .
hash
 = (
uöt32_t
 *Ë
vh
->
md5_dige°
,

1152 
	`fio_md5_öô
(&
md5_˘x
);

1153 
	`fio_md5_upd©e
(&
md5_˘x
, 
p
, 
Àn
);

1154 
	`fio_md5_föÆ
(&
md5_˘x
);

1155 
	}
}

1157 
	$__fûl_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1158 
vîify_hódî
 *
hdr
, 
hódî_num
,

1159 
hódî_Àn
, 
uöt64_t
 
ønd_£ed
)

1161 *
p
 = 
hdr
;

1163 
hdr
->
magic
 = 
FIO_HDR_MAGIC
;

1164 
hdr
->
vîify_ty≥
 = 
td
->
o
.
vîify
;

1165 
hdr
->
Àn
 = 
hódî_Àn
;

1166 
hdr
->
ønd_£ed
 =Ñand_seed;

1167 
hdr
->
off£t
 = 
io_u
->off£à+ 
hódî_num
 * 
td
->
o
.
vîify_öãrvÆ
;

1168 
hdr
->
time_£c
 = 
io_u
->
°¨t_time
.
tv_£c
;

1169 
hdr
->
time_n£c
 = 
io_u
->
°¨t_time
.
tv_n£c
;

1170 
hdr
->
thªad
 = 
td
->
thªad_numbî
;

1171 
hdr
->
numbîio
 = 
io_u
->numberio;

1172 
hdr
->
¸c32
 = 
	`fio_¸c32c
(
p
, 
	`off£tof
(
vîify_hódî
, crc32));

1173 
	}
}

1176 
	$fûl_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1177 
vîify_hódî
 *
hdr
, 
hódî_num
,

1178 
hódî_Àn
, 
uöt64_t
 
ønd_£ed
)

1180 i‡(
td
->
o
.
vîify
 !
VERIFY_PATTERN_NO_HDR
)

1181 
	`__fûl_hdr
(
td
, 
io_u
, 
hdr
, 
hódî_num
, 
hódî_Àn
, 
ønd_£ed
);

1182 
	}
}

1184 
	$p›uœã_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1185 
vîify_hódî
 *
hdr
, 
hódî_num
,

1186 
hódî_Àn
)

1188 
d©a_Àn
;

1189 *
d©a
;

1190 *
p
;

1192 
p
 = (*Ë
hdr
;

1194 
	`fûl_hdr
(
td
, 
io_u
, 
hdr
, 
hódî_num
, 
hódî_Àn
, io_u->
ønd_£ed
);

1196 
d©a_Àn
 = 
hódî_Àn
 - 
	`hdr_size
(
td
, 
hdr
);

1198 
d©a
 = 
p
 + 
	`hdr_size
(
td
, 
hdr
);

1199 
td
->
o
.
vîify
) {

1200 
VERIFY_MD5
:

1201 
	`d¥öt
(
FD_VERIFY
, "fill md5 io_u %p,Üen %u\n",

1202 
io_u
, 
hdr
->
Àn
);

1203 
	`fûl_md5
(
hdr
, 
d©a
, 
d©a_Àn
);

1205 
VERIFY_CRC64
:

1206 
	`d¥öt
(
FD_VERIFY
, "fill crc64 io_u %p,Üen %u\n",

1207 
io_u
, 
hdr
->
Àn
);

1208 
	`fûl_¸c64
(
hdr
, 
d©a
, 
d©a_Àn
);

1210 
VERIFY_CRC32C
:

1211 
VERIFY_CRC32C_INTEL
:

1212 
	`d¥öt
(
FD_VERIFY
, "fill crc32c io_u %p,Üen %u\n",

1213 
io_u
, 
hdr
->
Àn
);

1214 
	`fûl_¸c32c
(
hdr
, 
d©a
, 
d©a_Àn
);

1216 
VERIFY_CRC32
:

1217 
	`d¥öt
(
FD_VERIFY
, "fill crc32 io_u %p,Üen %u\n",

1218 
io_u
, 
hdr
->
Àn
);

1219 
	`fûl_¸c32
(
hdr
, 
d©a
, 
d©a_Àn
);

1221 
VERIFY_CRC16
:

1222 
	`d¥öt
(
FD_VERIFY
, "fill crc16 io_u %p,Üen %u\n",

1223 
io_u
, 
hdr
->
Àn
);

1224 
	`fûl_¸c16
(
hdr
, 
d©a
, 
d©a_Àn
);

1226 
VERIFY_CRC7
:

1227 
	`d¥öt
(
FD_VERIFY
, "fill crc7 io_u %p,Üen %u\n",

1228 
io_u
, 
hdr
->
Àn
);

1229 
	`fûl_¸c7
(
hdr
, 
d©a
, 
d©a_Àn
);

1231 
VERIFY_SHA256
:

1232 
	`d¥öt
(
FD_VERIFY
, "fill sha256 io_u %p,Üen %u\n",

1233 
io_u
, 
hdr
->
Àn
);

1234 
	`fûl_sha256
(
hdr
, 
d©a
, 
d©a_Àn
);

1236 
VERIFY_SHA512
:

1237 
	`d¥öt
(
FD_VERIFY
, "fill sha512 io_u %p,Üen %u\n",

1238 
io_u
, 
hdr
->
Àn
);

1239 
	`fûl_sha512
(
hdr
, 
d©a
, 
d©a_Àn
);

1241 
VERIFY_SHA3_224
:

1242 
	`d¥öt
(
FD_VERIFY
, "fill sha3-224 io_u %p,Üen %u\n",

1243 
io_u
, 
hdr
->
Àn
);

1244 
	`fûl_sha3_224
(
hdr
, 
d©a
, 
d©a_Àn
);

1246 
VERIFY_SHA3_256
:

1247 
	`d¥öt
(
FD_VERIFY
, "fill sha3-256 io_u %p,Üen %u\n",

1248 
io_u
, 
hdr
->
Àn
);

1249 
	`fûl_sha3_256
(
hdr
, 
d©a
, 
d©a_Àn
);

1251 
VERIFY_SHA3_384
:

1252 
	`d¥öt
(
FD_VERIFY
, "fill sha3-384 io_u %p,Üen %u\n",

1253 
io_u
, 
hdr
->
Àn
);

1254 
	`fûl_sha3_384
(
hdr
, 
d©a
, 
d©a_Àn
);

1256 
VERIFY_SHA3_512
:

1257 
	`d¥öt
(
FD_VERIFY
, "fill sha3-512 io_u %p,Üen %u\n",

1258 
io_u
, 
hdr
->
Àn
);

1259 
	`fûl_sha3_512
(
hdr
, 
d©a
, 
d©a_Àn
);

1261 
VERIFY_XXHASH
:

1262 
	`d¥öt
(
FD_VERIFY
, "fill xxhash io_u %p,Üen %u\n",

1263 
io_u
, 
hdr
->
Àn
);

1264 
	`fûl_xxhash
(
hdr
, 
d©a
, 
d©a_Àn
);

1266 
VERIFY_SHA1
:

1267 
	`d¥öt
(
FD_VERIFY
, "fill sha1 io_u %p,Üen %u\n",

1268 
io_u
, 
hdr
->
Àn
);

1269 
	`fûl_sha1
(
hdr
, 
d©a
, 
d©a_Àn
);

1271 
VERIFY_HDR_ONLY
:

1272 
VERIFY_PATTERN
:

1273 
VERIFY_PATTERN_NO_HDR
:

1277 
	`log_îr
("fio: bad vîifyÅy≥: %d\n", 
td
->
o
.
vîify
);

1278 
	`as£π
(0);

1281 i‡(
td
->
o
.
vîify_off£t
 && 
	`hdr_size
—d, 
hdr
))

1282 
	`memswp
(
p
,Ö + 
td
->
o
.
vîify_off£t
, 
	`hdr_size
—d, 
hdr
));

1283 
	}
}

1289 
	$p›uœã_vîify_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1291 i‡(
td
->
o
.
vîify
 =
VERIFY_NULL
)

1294 
io_u
->
numbîio
 = 
td
->
io_issues
[io_u->
ddú
];

1296 
	`fûl_∑âîn_hódîs
(
td
, 
io_u
, 0, 0);

1297 
	}
}

1299 
	$gë_√xt_vîify
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1301 
io_põ˚
 *
ùo
 = 
NULL
;

1306 i‡(
io_u
->
fûe
)

1309 i‡(!
	`RB_EMPTY_ROOT
(&
td
->
io_hi°_åì
)) {

1310 
rb_node
 *
n
 = 
	`rb_fú°
(&
td
->
io_hi°_åì
);

1312 
ùo
 = 
	`rb_íåy
(
n
, 
io_põ˚
, 
rb_node
);

1317 
	`ªad_b¨rõr
();

1318 i‡(
ùo
->
Êags
 & 
IP_F_IN_FLIGHT
)

1319 
nŸhög
;

1321 
	`rb_îa£
(
n
, &
td
->
io_hi°_åì
);

1322 
	`as£π
(
ùo
->
Êags
 & 
IP_F_ONRB
);

1323 
ùo
->
Êags
 &~
IP_F_ONRB
;

1324 } i‡(!
	`Êi°_em±y
(&
td
->
io_hi°_li°
)) {

1325 
ùo
 = 
	`Êi°_fú°_íåy
(&
td
->
io_hi°_li°
, 
io_põ˚
, 
li°
);

1330 
	`ªad_b¨rõr
();

1331 i‡(
ùo
->
Êags
 & 
IP_F_IN_FLIGHT
)

1332 
nŸhög
;

1334 
	`Êi°_dñ
(&
ùo
->
li°
);

1335 
	`as£π
(
ùo
->
Êags
 & 
IP_F_ONLIST
);

1336 
ùo
->
Êags
 &~
IP_F_ONLIST
;

1339 i‡(
ùo
) {

1340 
td
->
io_hi°_Àn
--;

1342 
io_u
->
off£t
 = 
ùo
->offset;

1343 
io_u
->
buÊí
 = 
ùo
->
Àn
;

1344 
io_u
->
numbîio
 = 
ùo
->numberio;

1345 
io_u
->
fûe
 = 
ùo
->file;

1346 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_VER_LIST
);

1348 i‡(
ùo
->
Êags
 & 
IP_F_TRIMMED
)

1349 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_TRIMMED
);

1351 i‡(!
	`fio_fûe_›í
(
io_u
->
fûe
)) {

1352 
r
 = 
	`td_io_›í_fûe
(
td
, 
io_u
->
fûe
);

1354 i‡(
r
) {

1355 
	`d¥öt
(
FD_VERIFY
, "failed file %s open\n",

1356 
io_u
->
fûe
->
fûe_«me
);

1361 
	`gë_fûe
(
ùo
->
fûe
);

1362 
	`as£π
(
	`fio_fûe_›í
(
io_u
->
fûe
));

1363 
io_u
->
ddú
 = 
DDIR_READ
;

1364 
io_u
->
x„r_buf
 = io_u->
buf
;

1365 
io_u
->
x„r_buÊí
 = io_u->
buÊí
;

1367 
	`ªmove_åim_íåy
(
td
, 
ùo
);

1368 
	`‰ì
(
ùo
);

1369 
	`d¥öt
(
FD_VERIFY
, "gë_√xt_vîify:Ñë io_u %p\n", 
io_u
);

1371 i‡(!
td
->
o
.
vîify_∑âîn_byãs
) {

1372 
io_u
->
ønd_£ed
 = 
	`__ønd
(&
td
->
vîify_°©e
);

1374 
io_u
->
ønd_£ed
 *
	`__ønd
(&
td
->
vîify_°©e
);

1379 
nŸhög
:

1380 
	`d¥öt
(
FD_VERIFY
, "get_next_verify:Émpty\n");

1382 
	}
}

1384 
	$fio_vîify_öô
(
thªad_d©a
 *
td
)

1386 i‡(
td
->
o
.
vîify
 =
VERIFY_CRC32C_INTEL
 ||

1387 
td
->
o
.
vîify
 =
VERIFY_CRC32C
) {

1388 
	`¸c32c_¨m64_¥obe
();

1389 
	`¸c32c_öãl_¥obe
();

1391 
	}
}

1393 *
	$vîify_async_thªad
(*
d©a
)

1395 
thªad_d©a
 *
td
 = 
d©a
;

1396 
io_u
 *io_u;

1397 
ªt
 = 0;

1399 i‡(
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
vîify_˝umask
) &&

1400 
	`fio_£èfföôy
(
td
->
pid
,Åd->
o
.
vîify_˝umask
)) {

1401 
	`log_îr
("fio: failed setting verifyÅhreadáffinity\n");

1402 
d⁄e
;

1406 
	`FLIST_HEAD
(
li°
);

1408 
	`ªad_b¨rõr
();

1409 i‡(
td
->
vîify_thªad_exô
)

1412 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1414 
	`Êi°_em±y
(&
td
->
vîify_li°
) &&

1415 !
td
->
vîify_thªad_exô
) {

1416 
ªt
 = 
	`±hªad_c⁄d_waô
(&
td
->
vîify_c⁄d
,

1417 &
td
->
io_u_lock
);

1418 i‡(
ªt
) {

1419 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1424 
	`Êi°_•li˚_öô
(&
td
->
vîify_li°
, &
li°
);

1425 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1427 i‡(
	`Êi°_em±y
(&
li°
))

1430 !
	`Êi°_em±y
(&
li°
)) {

1431 
io_u
 = 
	`Êi°_fú°_íåy
(&
li°
, io_u, 
vîify_li°
);

1432 
	`Êi°_dñ_öô
(&
io_u
->
vîify_li°
);

1434 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_NO_FILE_PUT
);

1435 
ªt
 = 
	`vîify_io_u
(
td
, &
io_u
);

1437 
	`put_io_u
(
td
, 
io_u
);

1438 i‡(!
ªt
)

1440 i‡(
	`td_n⁄_Áèl_îr‹
(
td
, 
ERROR_TYPE_VERIFY_BIT
, 
ªt
)) {

1441 
	`upd©e_îr‹_cou¡
(
td
, 
ªt
);

1442 
	`td_˛ór_îr‹
(
td
);

1443 
ªt
 = 0;

1446 } !
ªt
);

1448 i‡(
ªt
) {

1449 
	`td_vîr‹
(
td
, 
ªt
, "async_verify");

1450 i‡(
td
->
o
.
vîify_Áèl
)

1451 
	`fio_m¨k_td_ãrmö©e
(
td
);

1454 
d⁄e
:

1455 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1456 
td
->
ƒ_vîify_thªads
--;

1457 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1459 
	`±hªad_c⁄d_sig«l
(&
td
->
‰ì_c⁄d
);

1460  
NULL
;

1461 
	}
}

1463 
	$vîify_async_öô
(
thªad_d©a
 *
td
)

1465 
i
, 
ªt
;

1466 
±hªad_©å_t
 
©å
;

1468 
	`±hªad_©å_öô
(&
©å
);

1469 
	`±hªad_©å_£t°acksize
(&
©å
, 2 * 
PTHREAD_STACK_MIN
);

1471 
td
->
vîify_thªad_exô
 = 0;

1473 
td
->
vîify_thªads
 = 
	`mÆloc
((
±hªad_t
Ë*Åd->
o
.
vîify_async
);

1474 
i
 = 0; i < 
td
->
o
.
vîify_async
; i++) {

1475 
ªt
 = 
	`±hªad_¸óã
(&
td
->
vîify_thªads
[
i
], &
©å
,

1476 
vîify_async_thªad
, 
td
);

1477 i‡(
ªt
) {

1478 
	`log_îr
("fio:ásync verify creation failed: %s\n",

1479 
	`°ªº‹
(
ªt
));

1482 
ªt
 = 
	`±hªad_dëach
(
td
->
vîify_thªads
[
i
]);

1483 i‡(
ªt
) {

1484 
	`log_îr
("fio:ásync verifyÅhread detach failed: %s\n",

1485 
	`°ªº‹
(
ªt
));

1488 
td
->
ƒ_vîify_thªads
++;

1491 
	`±hªad_©å_de°roy
(&
©å
);

1493 i‡(
i
 !
td
->
o
.
vîify_async
) {

1494 
	`log_îr
("fio: o∆y %d vîifyÅhªad†°¨ãd,Éxôög\n", 
i
);

1495 
td
->
vîify_thªad_exô
 = 1;

1496 
	`wrôe_b¨rõr
();

1497 
	`±hªad_c⁄d_brﬂdˇ°
(&
td
->
vîify_c⁄d
);

1502 
	}
}

1504 
	$vîify_async_exô
(
thªad_d©a
 *
td
)

1506 
td
->
vîify_thªad_exô
 = 1;

1507 
	`wrôe_b¨rõr
();

1508 
	`±hªad_c⁄d_brﬂdˇ°
(&
td
->
vîify_c⁄d
);

1510 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1512 
td
->
ƒ_vîify_thªads
)

1513 
	`±hªad_c⁄d_waô
(&
td
->
‰ì_c⁄d
, &td->
io_u_lock
);

1515 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1516 
	`‰ì
(
td
->
vîify_thªads
);

1517 
td
->
vîify_thªads
 = 
NULL
;

1518 
	}
}

1520 
	$∑°e_blockoff
(*
buf
, 
Àn
, *
¥iv
)

1522 
io_u
 *
io
 = 
¥iv
;

1523 
off
;

1525 
	`ty≥check
(
	`ty≥of
(
off
), 
io
->
off£t
);

1526 
off
 = 
	`˝u_to_À64
((
uöt64_t
)
io
->
off£t
);

1527 
Àn
 = 
	`mö
÷í, ()(
off
));

1528 
	`mem˝y
(
buf
, &
off
, 
Àn
);

1530 
	}
}

1532 
	$__fûl_fûe_com∂ëi⁄s
(
thªad_d©a
 *
td
,

1533 
thªad_io_li°
 *
s
,

1534 
fio_fûe
 *
f
, *
ödex
)

1536 
comps
;

1537 
i
, 
j
;

1539 i‡(!
f
->
œ°_wrôe_comp
)

1542 i‡(
td
->
io_blocks
[
DDIR_WRITE
] <Åd->
o
.
iodïth
)

1543 
comps
 = 
td
->
io_blocks
[
DDIR_WRITE
];

1545 
comps
 = 
td
->
o
.
iodïth
;

1547 
j
 = 
f
->
œ°_wrôe_idx
 - 1;

1548 
i
 = 0; i < 
comps
; i++) {

1549 i‡(
j
 == -1)

1550 
j
 = 
td
->
o
.
iodïth
 - 1;

1551 
s
->
comps
[*
ödex
].
fûío
 = 
	`__˝u_to_À64
(
f
->fileno);

1552 
s
->
comps
[*
ödex
].
off£t
 = 
	`˝u_to_À64
(
f
->
œ°_wrôe_comp
[
j
]);

1553 (*
ödex
)++;

1554 
j
--;

1557  
comps
;

1558 
	}
}

1560 
	$fûl_fûe_com∂ëi⁄s
(
thªad_d©a
 *
td
,

1561 
thªad_io_li°
 *
s
, *
ödex
)

1563 
fio_fûe
 *
f
;

1564 
i
;

1565 
comps
 = 0;

1567 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1568 
comps
 +
	`__fûl_fûe_com∂ëi⁄s
(
td
, 
s
, 
f
, 
ödex
);

1570  
comps
;

1571 
	}
}

1573 
Æl_io_li°
 *
	$gë_Æl_io_li°
(
ßve_mask
, 
size_t
 *
sz
)

1575 
Æl_io_li°
 *
ªp
;

1576 
thªad_d©a
 *
td
;

1577 
size_t
 
dïth
;

1578 *
√xt
;

1579 
i
, 
ƒ
;

1581 
	`compûëime_as£π
((
Æl_io_li°
) == 8, "all_io_list");

1587 
dïth
 = 0;

1588 
ƒ
 = 0;

1589 
	`f‹_óch_td
(
td
, 
i
) {

1590 i‡(
ßve_mask
 !
IO_LIST_ALL
 && (
i
 + 1) != save_mask)

1592 
td
->
°›_io
 = 1;

1593 
td
->
Êags
 |
TD_F_VSTATE_SAVED
;

1594 
dïth
 +(
td
->
o
.
iodïth
 *Åd->o.
ƒ_fûes
);

1595 
ƒ
++;

1598 i‡(!
ƒ
)

1599  
NULL
;

1601 *
sz
 = (*
ªp
);

1602 *
sz
 +
ƒ
 * (
thªad_io_li°
);

1603 *
sz
 +
dïth
 * (
fûe_comp
);

1604 
ªp
 = 
	`mÆloc
(*
sz
);

1605 
	`mem£t
(
ªp
, 0, *
sz
);

1607 
ªp
->
thªads
 = 
	`˝u_to_À64
((
uöt64_t
Ë
ƒ
);

1609 
√xt
 = &
ªp
->
°©e
[0];

1610 
	`f‹_óch_td
(
td
, 
i
) {

1611 
thªad_io_li°
 *
s
 = 
√xt
;

1612 
comps
, 
ödex
 = 0;

1614 i‡(
ßve_mask
 !
IO_LIST_ALL
 && (
i
 + 1) != save_mask)

1617 
comps
 = 
	`fûl_fûe_com∂ëi⁄s
(
td
, 
s
, &
ödex
);

1619 
s
->
no_comps
 = 
	`˝u_to_À64
((
uöt64_t
Ë
comps
);

1620 
s
->
dïth
 = 
	`˝u_to_À64
((
uöt64_t
Ë
td
->
o
.
iodïth
);

1621 
s
->
nofûes
 = 
	`˝u_to_À64
((
uöt64_t
Ë
td
->
o
.
ƒ_fûes
);

1622 
s
->
numbîio
 = 
	`˝u_to_À64
((
uöt64_t
Ë
td
->
io_issues
[
DDIR_WRITE
]);

1623 
s
->
ödex
 = 
	`˝u_to_À64
((
uöt64_t
Ë
i
);

1624 i‡(
td
->
øndom_°©e
.
u£64
) {

1625 
s
->
ønd
.
°©e64
.s[0] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s1
);

1626 
s
->
ønd
.
°©e64
.s[1] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s2
);

1627 
s
->
ønd
.
°©e64
.s[2] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s3
);

1628 
s
->
ønd
.
°©e64
.s[3] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s4
);

1629 
s
->
ønd
.
°©e64
.s[4] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s5
);

1630 
s
->
ønd
.
°©e64
.s[5] = 0;

1631 
s
->
ønd
.
u£64
 = 
	`˝u_to_À64
((
uöt64_t
)1);

1633 
s
->
ønd
.
°©e32
.s[0] = 
	`˝u_to_À32
(
td
->
øndom_°©e
.°©e32.
s1
);

1634 
s
->
ønd
.
°©e32
.s[1] = 
	`˝u_to_À32
(
td
->
øndom_°©e
.°©e32.
s2
);

1635 
s
->
ønd
.
°©e32
.s[2] = 
	`˝u_to_À32
(
td
->
øndom_°©e
.°©e32.
s3
);

1636 
s
->
ønd
.
°©e32
.s[3] = 0;

1637 
s
->
ønd
.
u£64
 = 0;

1639 
s
->
«me
[(s->name) - 1] = '\0';

1640 
	`°∫˝y
((*Ë
s
->
«me
, 
td
->
o
.name, (s->name) - 1);

1641 
√xt
 = 
	`io_li°_√xt
(
s
);

1644  
ªp
;

1645 
	}
}

1647 
	$›í_°©e_fûe
(c⁄° *
«me
, c⁄° *
¥efix
, 
num
,

1648 
f‹_wrôe
)

1650 
out
[
PATH_MAX
];

1651 
Êags
;

1652 
fd
;

1654 i‡(
f‹_wrôe
)

1655 
Êags
 = 
O_CREAT
 | 
O_TRUNC
 | 
O_WRONLY
 | 
O_SYNC
;

1657 
Êags
 = 
O_RDONLY
;

1659 
	`vîify_°©e_gí_«me
(
out
, (out), 
«me
, 
¥efix
, 
num
);

1661 
fd
 = 
	`›í
(
out
, 
Êags
, 0644);

1662 i‡(
fd
 == -1) {

1663 
	`≥º‹
("fio: open state file");

1664 
	`log_îr
("fio: sèã fûe: %†(f‹_wrôe=%d)\n", 
out
, 
f‹_wrôe
);

1668  
fd
;

1669 
	}
}

1671 
	$wrôe_thªad_li°_°©e
(
thªad_io_li°
 *
s
,

1672 c⁄° *
¥efix
)

1674 
vîify_°©e_hdr
 
hdr
;

1675 
uöt64_t
 
¸c
;

1676 
ssize_t
 
ªt
;

1677 
fd
;

1679 
fd
 = 
	`›í_°©e_fûe
((c⁄° *Ë
s
->
«me
, 
¥efix
, s->
ödex
, 1);

1680 i‡(
fd
 == -1)

1683 
¸c
 = 
	`fio_¸c32c
((*)
s
, 
	`thªad_io_li°_sz
(s));

1685 
hdr
.
vîsi⁄
 = 
	`˝u_to_À64
((
uöt64_t
Ë
VSTATE_HDR_VERSION
);

1686 
hdr
.
size
 = 
	`˝u_to_À64
((
uöt64_t
Ë
	`thªad_io_li°_sz
(
s
));

1687 
hdr
.
¸c
 = 
	`˝u_to_À64
(crc);

1688 
ªt
 = 
	`wrôe
(
fd
, &
hdr
, (hdr));

1689 i‡(
ªt
 !(
hdr
))

1690 
wrôe_Áû
;

1692 
ªt
 = 
	`wrôe
(
fd
, 
s
, 
	`thªad_io_li°_sz
(s));

1693 i‡(
ªt
 !
	`thªad_io_li°_sz
(
s
)) {

1694 
wrôe_Áû
:

1695 i‡(
ªt
 < 0)

1696 
	`≥º‹
("fio: write state file");

1697 
	`log_îr
("fio: failedÅo write state file\n");

1698 
ªt
 = 1;

1700 
ªt
 = 0;

1702 
	`˛o£
(
fd
);

1703  
ªt
;

1704 
	}
}

1706 
	$__vîify_ßve_°©e
(
Æl_io_li°
 *
°©e
, c⁄° *
¥efix
)

1708 
thªad_io_li°
 *
s
 = &
°©e
->state[0];

1709 
i
;

1711 
i
 = 0; i < 
	`À64_to_˝u
(
°©e
->
thªads
); i++) {

1712 
	`wrôe_thªad_li°_°©e
(
s
, 
¥efix
);

1713 
s
 = 
	`io_li°_√xt
(s);

1715 
	}
}

1717 
	$vîify_ßve_°©e
(
mask
)

1719 
Æl_io_li°
 *
°©e
;

1720 
size_t
 
sz
;

1722 
°©e
 = 
	`gë_Æl_io_li°
(
mask
, &
sz
);

1723 i‡(
°©e
) {

1724 
¥efix
[
PATH_MAX
];

1726 i‡(
aux_∑th
)

1727 
	`•rötf
(
¥efix
, "%s%˛oˇl", 
aux_∑th
, 
FIO_OS_PATH_SEPARATOR
);

1729 
	`°r˝y
(
¥efix
, "local");

1731 
	`__vîify_ßve_°©e
(
°©e
, 
¥efix
);

1732 
	`‰ì
(
°©e
);

1734 
	}
}

1736 
	$vîify_‰ì_°©e
(
thªad_d©a
 *
td
)

1738 i‡(
td
->
v°©e
)

1739 
	`‰ì
(
td
->
v°©e
);

1740 
	}
}

1742 
	$vîify_assign_°©e
(
thªad_d©a
 *
td
, *
p
)

1744 
thªad_io_li°
 *
s
 = 
p
;

1745 
i
;

1747 
s
->
no_comps
 = 
	`À64_to_˝u
(s->no_comps);

1748 
s
->
dïth
 = 
	`À32_to_˝u
(s->depth);

1749 
s
->
nofûes
 = 
	`À32_to_˝u
(s->nofiles);

1750 
s
->
numbîio
 = 
	`À64_to_˝u
(s->numberio);

1751 
s
->
ønd
.
u£64
 = 
	`À64_to_˝u
(s->rand.use64);

1753 i‡(
s
->
ønd
.
u£64
) {

1754 
i
 = 0; i < 6; i++)

1755 
s
->
ønd
.
°©e64
.s[
i
] = 
	`À64_to_˝u
(s->rand.state64.s[i]);

1757 
i
 = 0; i < 4; i++)

1758 
s
->
ønd
.
°©e32
.s[
i
] = 
	`À32_to_˝u
(s->rand.state32.s[i]);

1761 
i
 = 0; i < 
s
->
no_comps
; i++) {

1762 
s
->
comps
[
i
].
fûío
 = 
	`À64_to_˝u
(s->comps[i].fileno);

1763 
s
->
comps
[
i
].
off£t
 = 
	`À64_to_˝u
(s->comps[i].offset);

1766 
td
->
v°©e
 = 
p
;

1767 
	}
}

1769 
	$vîify_°©e_hdr
(
vîify_°©e_hdr
 *
hdr
, 
thªad_io_li°
 *
s
)

1771 
uöt64_t
 
¸c
;

1773 
hdr
->
vîsi⁄
 = 
	`À64_to_˝u
(hdr->version);

1774 
hdr
->
size
 = 
	`À64_to_˝u
(hdr->size);

1775 
hdr
->
¸c
 = 
	`À64_to_˝u
(hdr->crc);

1777 i‡(
hdr
->
vîsi⁄
 !
VSTATE_HDR_VERSION
)

1780 
¸c
 = 
	`fio_¸c32c
((*)
s
, 
hdr
->
size
);

1781 i‡(
¸c
 !
hdr
->crc)

1785 
	}
}

1787 
	$vîify_lﬂd_°©e
(
thªad_d©a
 *
td
, c⁄° *
¥efix
)

1789 
vîify_°©e_hdr
 
hdr
;

1790 *
s
 = 
NULL
;

1791 
uöt64_t
 
¸c
;

1792 
ssize_t
 
ªt
;

1793 
fd
;

1795 i‡(!
td
->
o
.
vîify_°©e
)

1798 
fd
 = 
	`›í_°©e_fûe
(
td
->
o
.
«me
, 
¥efix
,Åd->
thªad_numbî
 - 1, 0);

1799 i‡(
fd
 == -1)

1802 
ªt
 = 
	`ªad
(
fd
, &
hdr
, (hdr));

1803 i‡(
ªt
 !(
hdr
)) {

1804 i‡(
ªt
 < 0)

1805 
	`td_vîr‹
(
td
, 
î∫o
, "read verify state hdr");

1806 
	`log_îr
("fio: failedÑeading verify state header\n");

1807 
îr
;

1810 
hdr
.
vîsi⁄
 = 
	`À64_to_˝u
(hdr.version);

1811 
hdr
.
size
 = 
	`À64_to_˝u
(hdr.size);

1812 
hdr
.
¸c
 = 
	`À64_to_˝u
(hdr.crc);

1814 i‡(
hdr
.
vîsi⁄
 !
VSTATE_HDR_VERSION
) {

1815 
	`log_îr
("fio: unsupported (%d) version in verify state header\n",

1816 (Ë
hdr
.
vîsi⁄
);

1817 
îr
;

1820 
s
 = 
	`mÆloc
(
hdr
.
size
);

1821 
ªt
 = 
	`ªad
(
fd
, 
s
, 
hdr
.
size
);

1822 i‡(
ªt
 !
hdr
.
size
) {

1823 i‡(
ªt
 < 0)

1824 
	`td_vîr‹
(
td
, 
î∫o
, "read verify state");

1825 
	`log_îr
("fio: failedÑeading verity state\n");

1826 
îr
;

1829 
¸c
 = 
	`fio_¸c32c
(
s
, 
hdr
.
size
);

1830 i‡(
¸c
 !
hdr
.crc) {

1831 
	`log_îr
("fio: verify state is corrupt\n");

1832 
îr
;

1835 
	`˛o£
(
fd
);

1837 
	`vîify_assign_°©e
(
td
, 
s
);

1839 
îr
:

1840 i‡(
s
)

1841 
	`‰ì
(
s
);

1842 
	`˛o£
(
fd
);

1844 
	}
}

1849 
	$vîify_°©e_should_°›
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1851 
thªad_io_li°
 *
s
 = 
td
->
v°©e
;

1852 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1853 
i
;

1855 i‡(!
s
 || !
f
)

1862 i‡((
td
->
io_blocks
[
DDIR_READ
] < 
s
->
dïth
 ||

1863 
s
->
numbîio
 - 
td
->
io_blocks
[
DDIR_READ
] > s->
dïth
) &&

1864 
s
->
numbîio
 > s->
dïth
)

1872 
i
 = 0; i < 
s
->
no_comps
; i++) {

1873 i‡(
s
->
comps
[
i
].
fûío
 !
f
->fileno)

1875 i‡(
io_u
->
off£t
 =
s
->
comps
[
i
].offset)

1883 
	}
}

	@/home/ysjin/Desktop/fio/fio/verify.h

1 #i‚de‡
FIO_VERIFY_H


2 
	#FIO_VERIFY_H


	)

4 
	~<°döt.h
>

5 
	~"vîify-°©e.h
"

7 
	#FIO_HDR_MAGIC
 0xacˇ

	)

10 
	mVERIFY_NONE
 = 0,

11 
	mVERIFY_HDR_ONLY
,

14 
	mVERIFY_MD5
,

15 
	mVERIFY_CRC64
,

16 
	mVERIFY_CRC32
,

17 
	mVERIFY_CRC32C
,

18 
	mVERIFY_CRC32C_INTEL
,

19 
	mVERIFY_CRC16
,

20 
	mVERIFY_CRC7
,

21 
	mVERIFY_SHA256
,

22 
	mVERIFY_SHA512
,

23 
	mVERIFY_SHA3_224
,

24 
	mVERIFY_SHA3_256
,

25 
	mVERIFY_SHA3_384
,

26 
	mVERIFY_SHA3_512
,

27 
	mVERIFY_XXHASH
,

28 
	mVERIFY_SHA1
,

29 
	mVERIFY_PATTERN
,

30 
	mVERIFY_PATTERN_NO_HDR
,

31 
	mVERIFY_NULL
,

39 
	svîify_hódî
 {

40 
uöt16_t
 
	mmagic
;

41 
uöt16_t
 
	mvîify_ty≥
;

42 
uöt32_t
 
	mÀn
;

43 
uöt64_t
 
	mønd_£ed
;

44 
uöt64_t
 
	moff£t
;

45 
uöt32_t
 
	mtime_£c
;

46 
uöt32_t
 
	mtime_n£c
;

47 
uöt16_t
 
	mthªad
;

48 
uöt16_t
 
	mnumbîio
;

49 
uöt32_t
 
	m¸c32
;

52 
	svhdr_md5
 {

53 
uöt32_t
 
	mmd5_dige°
[4];

55 
	svhdr_sha3_224
 {

56 
uöt8_t
 
	msha
[224 / 8];

58 
	svhdr_sha3_256
 {

59 
uöt8_t
 
	msha
[256 / 8];

61 
	svhdr_sha3_384
 {

62 
uöt8_t
 
	msha
[384 / 8];

64 
	svhdr_sha3_512
 {

65 
uöt8_t
 
	msha
[512 / 8];

67 
	svhdr_sha512
 {

68 
uöt8_t
 
	msha512
[128];

70 
	svhdr_sha256
 {

71 
uöt8_t
 
	msha256
[64];

73 
	svhdr_sha1
 {

74 
uöt32_t
 
	msha1
[5];

76 
	svhdr_¸c64
 {

77 
uöt64_t
 
	m¸c64
;

79 
	svhdr_¸c32
 {

80 
uöt32_t
 
	m¸c32
;

82 
	svhdr_¸c16
 {

83 
uöt16_t
 
	m¸c16
;

85 
	svhdr_¸c7
 {

86 
uöt8_t
 
	m¸c7
;

88 
	svhdr_xxhash
 {

89 
uöt32_t
 
	mhash
;

95 
p›uœã_vîify_io_u
(
thªad_d©a
 *, 
io_u
 *);

96 
__mu°_check
 
gë_√xt_vîify
(
thªad_d©a
 *
td
, 
io_u
 *);

97 
__mu°_check
 
vîify_io_u
(
thªad_d©a
 *, 
io_u
 **);

98 
vîify_io_u_async
(
thªad_d©a
 *, 
io_u
 **);

99 
fûl_vîify_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
, 
io_u
 *io_u, 
£ed
, 
u£_£ed
);

100 
fûl_buf„r_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
);

101 
fio_vîify_öô
(
thªad_d©a
 *
td
);

106 
vîify_async_öô
(
thªad_d©a
 *);

107 
vîify_async_exô
(
thªad_d©a
 *);

112 
∑°e_blockoff
(*
buf
, 
Àn
, *
¥iv
);

	@/home/ysjin/Desktop/fio/fio/workqueue.c

7 
	~<uni°d.h
>

9 
	~"fio.h
"

10 
	~"Êi°.h
"

11 
	~"w‹kqueue.h
"

12 
	~"smÆloc.h
"

15 
	mSW_F_IDLE
 = 1 << 0,

16 
	mSW_F_RUNNING
 = 1 << 1,

17 
	mSW_F_EXIT
 = 1 << 2,

18 
	mSW_F_ACCOUNTED
 = 1 << 3,

19 
	mSW_F_ERROR
 = 1 << 4,

22 
submô_w‹kî
 *
	$__gë_submô_w‹kî
(
w‹kqueue
 *
wq
,

23 
°¨t
,

24 
íd
,

25 
submô_w‹kî
 **
be°
)

27 
submô_w‹kî
 *
sw
 = 
NULL
;

29 
°¨t
 <
íd
) {

30 
sw
 = &
wq
->
w‹kîs
[
°¨t
];

31 i‡(
sw
->
Êags
 & 
SW_F_IDLE
)

32  
sw
;

33 i‡(!(*
be°
Ë|| 
sw
->
£q
 < (*best)->seq)

34 *
be°
 = 
sw
;

35 
°¨t
++;

38  
NULL
;

39 
	}
}

41 
submô_w‹kî
 *
	$gë_submô_w‹kî
(
w‹kqueue
 *
wq
)

43 
√xt
 = 
wq
->
√xt_‰ì_w‹kî
;

44 
submô_w‹kî
 *
sw
, *
be°
 = 
NULL
;

46 
	`as£π
(
√xt
 < 
wq
->
max_w‹kîs
);

48 
sw
 = 
	`__gë_submô_w‹kî
(
wq
, 
√xt
, wq->
max_w‹kîs
 - 1, &
be°
);

49 i‡(!
sw
 && 
√xt
)

50 
sw
 = 
	`__gë_submô_w‹kî
(
wq
, 0, 
√xt
 - 1, &
be°
);

55 i‡(!
sw
)

56 
sw
 = 
be°
;

58 i‡(
sw
->
ödex
 =
wq
->
√xt_‰ì_w‹kî
) {

59 i‡(
sw
->
ödex
 + 1 < 
wq
->
max_w‹kîs
)

60 
wq
->
√xt_‰ì_w‹kî
 = 
sw
->
ödex
 + 1;

62 
wq
->
√xt_‰ì_w‹kî
 = 0;

65  
sw
;

66 
	}
}

68 
boﬁ
 
	$Æl_sw_idÀ
(
w‹kqueue
 *
wq
)

70 
i
;

72 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++) {

73 
submô_w‹kî
 *
sw
 = &
wq
->
w‹kîs
[
i
];

75 i‡(!(
sw
->
Êags
 & 
SW_F_IDLE
))

76  
Ál£
;

79  
åue
;

80 
	}
}

85 
	$w‹kqueue_Êush
(
w‹kqueue
 *
wq
)

87 
wq
->
wake_idÀ
 = 1;

89 !
	`Æl_sw_idÀ
(
wq
)) {

90 
	`±hªad_muãx_lock
(&
wq
->
Êush_lock
);

91 
	`±hªad_c⁄d_waô
(&
wq
->
Êush_c⁄d
, &wq->
Êush_lock
);

92 
	`±hªad_muãx_u∆ock
(&
wq
->
Êush_lock
);

95 
wq
->
wake_idÀ
 = 0;

96 
	}
}

101 
	$w‹kqueue_íqueue
(
w‹kqueue
 *
wq
, 
w‹kqueue_w‹k
 *
w‹k
)

103 
submô_w‹kî
 *
sw
;

105 
sw
 = 
	`gë_submô_w‹kî
(
wq
);

106 
	`as£π
(
sw
);

108 
	`±hªad_muãx_lock
(&
sw
->
lock
);

109 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
sw
->
w‹k_li°
);

110 
sw
->
£q
 = ++
wq
->
w‹k_£q
;

111 
sw
->
Êags
 &~
SW_F_IDLE
;

113 
	`±hªad_c⁄d_sig«l
(&
sw
->
c⁄d
);

114 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

115 
	}
}

117 
	$h™dÀ_li°
(
submô_w‹kî
 *
sw
, 
Êi°_hód
 *
li°
)

119 
w‹kqueue
 *
wq
 = 
sw
->wq;

120 
w‹kqueue_w‹k
 *
w‹k
;

122 !
	`Êi°_em±y
(
li°
)) {

123 
w‹k
 = 
	`Êi°_fú°_íåy
(
li°
, 
w‹kqueue_w‹k
,Üist);

124 
	`Êi°_dñ_öô
(&
w‹k
->
li°
);

125 
wq
->
›s
.
	`‚
(
sw
, 
w‹k
);

127 
	}
}

129 *
	$w‹kî_thªad
(*
d©a
)

131 
submô_w‹kî
 *
sw
 = 
d©a
;

132 
w‹kqueue
 *
wq
 = 
sw
->wq;

133 
ªt
 = 0;

134 
	`FLIST_HEAD
(
loˇl_li°
);

136 
	`sk_out_assign
(
sw
->
sk_out
);

138 i‡(
wq
->
›s
.
ni˚
) {

139 i‡(
	`ni˚
(
wq
->
›s
.
ni˚
) < 0) {

140 
	`log_îr
("w‹kqueue:Çi˚ %s\n", 
	`°ªº‹
(
î∫o
));

141 
ªt
 = 1;

145 i‡(!
ªt
)

146 
ªt
 = 
	`w‹kqueue_öô_w‹kî
(
sw
);

148 
	`±hªad_muãx_lock
(&
sw
->
lock
);

149 
sw
->
Êags
 |
SW_F_RUNNING
;

150 i‡(
ªt
)

151 
sw
->
Êags
 |
SW_F_ERROR
;

152 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

154 
	`±hªad_muãx_lock
(&
wq
->
Êush_lock
);

155 
	`±hªad_c⁄d_sig«l
(&
wq
->
Êush_c⁄d
);

156 
	`±hªad_muãx_u∆ock
(&
wq
->
Êush_lock
);

158 i‡(
sw
->
Êags
 & 
SW_F_ERROR
)

159 
d⁄e
;

162 
	`±hªad_muãx_lock
(&
sw
->
lock
);

164 i‡(
	`Êi°_em±y
(&
sw
->
w‹k_li°
)) {

165 i‡(
sw
->
Êags
 & 
SW_F_EXIT
) {

166 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

170 i‡(
	`w‹kqueue_¥e_¶ìp_check
(
sw
)) {

171 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

172 
	`w‹kqueue_¥e_¶ìp
(
sw
);

173 
	`±hªad_muãx_lock
(&
sw
->
lock
);

180 i‡(!
	`Êi°_em±y
(&
sw
->
w‹k_li°
))

181 
h™dÀ_w‹k
;

183 i‡(
sw
->
Êags
 & 
SW_F_EXIT
) {

184 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

186 } i‡(!(
sw
->
Êags
 & 
SW_F_IDLE
)) {

187 
sw
->
Êags
 |
SW_F_IDLE
;

188 
wq
->
√xt_‰ì_w‹kî
 = 
sw
->
ödex
;

189 i‡(
wq
->
wake_idÀ
)

190 
	`±hªad_c⁄d_sig«l
(&
wq
->
Êush_c⁄d
);

192 i‡(
wq
->
›s
.
upd©e_ac˘_‚
)

193 
wq
->
›s
.
	`upd©e_ac˘_‚
(
sw
);

195 
	`±hªad_c⁄d_waô
(&
sw
->
c⁄d
, &sw->
lock
);

197 
h™dÀ_w‹k
:

198 
	`Êi°_•li˚_öô
(&
sw
->
w‹k_li°
, &
loˇl_li°
);

200 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

201 
	`h™dÀ_li°
(
sw
, &
loˇl_li°
);

204 i‡(
wq
->
›s
.
upd©e_ac˘_‚
)

205 
wq
->
›s
.
	`upd©e_ac˘_‚
(
sw
);

207 
d⁄e
:

208 
	`sk_out_dr›
();

209  
NULL
;

210 
	}
}

212 
	$‰ì_w‹kî
(
submô_w‹kî
 *
sw
, *
sum_˙t
)

214 
w‹kqueue
 *
wq
 = 
sw
->wq;

216 
	`w‹kqueue_exô_w‹kî
(
sw
, 
sum_˙t
);

218 
	`±hªad_c⁄d_de°roy
(&
sw
->
c⁄d
);

219 
	`±hªad_muãx_de°roy
(&
sw
->
lock
);

221 i‡(
wq
->
›s
.
‰ì_w‹kî_‚
)

222 
wq
->
›s
.
	`‰ì_w‹kî_‚
(
sw
);

223 
	}
}

225 
	$shutdown_w‹kî
(
submô_w‹kî
 *
sw
, *
sum_˙t
)

227 
	`±hªad_joö
(
sw
->
thªad
, 
NULL
);

228 
	`‰ì_w‹kî
(
sw
, 
sum_˙t
);

229 
	}
}

231 
	$w‹kqueue_exô
(
w‹kqueue
 *
wq
)

233 
shutdown
, 
sum_˙t
 = 0;

234 
submô_w‹kî
 *
sw
;

235 
i
;

237 i‡(!
wq
->
w‹kîs
)

240 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++) {

241 
sw
 = &
wq
->
w‹kîs
[
i
];

243 
	`±hªad_muãx_lock
(&
sw
->
lock
);

244 
sw
->
Êags
 |
SW_F_EXIT
;

245 
	`±hªad_c⁄d_sig«l
(&
sw
->
c⁄d
);

246 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

250 
shutdown
 = 0;

251 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++) {

252 
sw
 = &
wq
->
w‹kîs
[
i
];

253 i‡(
sw
->
Êags
 & 
SW_F_ACCOUNTED
)

255 
	`±hªad_muãx_lock
(&
sw
->
lock
);

256 
sw
->
Êags
 |
SW_F_ACCOUNTED
;

257 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

258 
	`shutdown_w‹kî
(
sw
, &
sum_˙t
);

259 
shutdown
++;

261 } 
shutdown
 && shutdow¿!
wq
->
max_w‹kîs
);

263 
	`s‰ì
(
wq
->
w‹kîs
);

264 
wq
->
w‹kîs
 = 
NULL
;

265 
	`±hªad_muãx_de°roy
(&
wq
->
Êush_lock
);

266 
	`±hªad_c⁄d_de°roy
(&
wq
->
Êush_c⁄d
);

267 
	`±hªad_muãx_de°roy
(&
wq
->
°©_lock
);

268 
	}
}

270 
	$°¨t_w‹kî
(
w‹kqueue
 *
wq
, 
ödex
,

271 
sk_out
 *sk_out)

273 
submô_w‹kî
 *
sw
 = &
wq
->
w‹kîs
[
ödex
];

274 
ªt
;

276 
	`INIT_FLIST_HEAD
(&
sw
->
w‹k_li°
);

278 
ªt
 = 
	`muãx_c⁄d_öô_psh¨ed
(&
sw
->
lock
, &sw->
c⁄d
);

279 i‡(
ªt
)

280  
ªt
;

282 
sw
->
wq
 = wq;

283 
sw
->
ödex
 = index;

284 
sw
->
sk_out
 = sk_out;

286 i‡(
wq
->
›s
.
Æloc_w‹kî_‚
) {

287 
ªt
 = 
wq
->
›s
.
	`Æloc_w‹kî_‚
(
sw
);

288 i‡(
ªt
)

289  
ªt
;

292 
ªt
 = 
	`±hªad_¸óã
(&
sw
->
thªad
, 
NULL
, 
w‹kî_thªad
, sw);

293 i‡(!
ªt
) {

294 
	`±hªad_muãx_lock
(&
sw
->
lock
);

295 
sw
->
Êags
 = 
SW_F_IDLE
;

296 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

300 
	`‰ì_w‹kî
(
sw
, 
NULL
);

302 
	}
}

304 
	$w‹kqueue_öô
(
thªad_d©a
 *
td
, 
w‹kqueue
 *
wq
,

305 
w‹kqueue_›s
 *
›s
, 
max_w‹kîs
,

306 
sk_out
 *sk_out)

308 
ru¬ög
;

309 
i
, 
îr‹
;

310 
ªt
;

312 
wq
->
max_w‹kîs
 = max_workers;

313 
wq
->
td
 =Åd;

314 
wq
->
›s
 = *ops;

315 
wq
->
w‹k_£q
 = 0;

316 
wq
->
√xt_‰ì_w‹kî
 = 0;

318 
ªt
 = 
	`muãx_c⁄d_öô_psh¨ed
(&
wq
->
Êush_lock
, &wq->
Êush_c⁄d
);

319 i‡(
ªt
)

320 
îr
;

321 
ªt
 = 
	`muãx_öô_psh¨ed
(&
wq
->
°©_lock
);

322 i‡(
ªt
)

323 
îr
;

325 
wq
->
w‹kîs
 = 
	`smÆloc
(wq->
max_w‹kîs
 * (
submô_w‹kî
));

326 i‡(!
wq
->
w‹kîs
)

327 
îr
;

329 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++)

330 i‡(
	`°¨t_w‹kî
(
wq
, 
i
, 
sk_out
))

333 
wq
->
max_w‹kîs
 = 
i
;

334 i‡(!
wq
->
max_w‹kîs
)

335 
îr
;

340 
îr‹
 = 0;

342 
submô_w‹kî
 *
sw
;

344 
ru¬ög
 = 0;

345 
	`±hªad_muãx_lock
(&
wq
->
Êush_lock
);

346 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++) {

347 
sw
 = &
wq
->
w‹kîs
[
i
];

348 
	`±hªad_muãx_lock
(&
sw
->
lock
);

349 i‡(
sw
->
Êags
 & 
SW_F_RUNNING
)

350 
ru¬ög
++;

351 i‡(
sw
->
Êags
 & 
SW_F_ERROR
)

352 
îr‹
++;

353 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

356 i‡(
îr‹
 || 
ru¬ög
 =
wq
->
max_w‹kîs
) {

357 
	`±hªad_muãx_u∆ock
(&
wq
->
Êush_lock
);

361 
	`±hªad_c⁄d_waô
(&
wq
->
Êush_c⁄d
, &wq->
Êush_lock
);

362 
	`±hªad_muãx_u∆ock
(&
wq
->
Êush_lock
);

365 i‡(!
îr‹
)

368 
îr
:

369 
	`log_îr
("Can't createÑate workqueue\n");

370 
	`td_vîr‹
(
td
, 
ESRCH
, "workqueue_init");

371 
	`w‹kqueue_exô
(
wq
);

373 
	}
}

	@/home/ysjin/Desktop/fio/fio/workqueue.h

1 #i‚de‡
FIO_RATE_H


2 
	#FIO_RATE_H


	)

4 
	~"Êi°.h
"

6 
	sw‹kqueue_w‹k
 {

7 
Êi°_hód
 
	mli°
;

10 
	ssubmô_w‹kî
 {

11 
±hªad_t
 
	mthªad
;

12 
±hªad_muãx_t
 
	mlock
;

13 
±hªad_c⁄d_t
 
	mc⁄d
;

14 
Êi°_hód
 
	mw‹k_li°
;

15 
	mÊags
;

16 
	mödex
;

17 
uöt64_t
 
	m£q
;

18 
w‹kqueue
 *
	mwq
;

19 *
	m¥iv
;

20 
sk_out
 *
	msk_out
;

23 (
	tw‹kqueue_w‹k_‚
)(
	tsubmô_w‹kî
 *, 
	tw‹kqueue_w‹k
 *);

24 
	$boﬁ
 (
	tw‹kqueue_¥e_¶ìp_Êush_‚
)(
	tsubmô_w‹kî
 *);

25 (
	tw‹kqueue_¥e_¶ìp_‚
)(
	tsubmô_w‹kî
 *);

26 (
	tw‹kqueue_Æloc_w‹kî_‚
)(
	tsubmô_w‹kî
 *);

27 (
	tw‹kqueue_‰ì_w‹kî_‚
)(
	tsubmô_w‹kî
 *);

28 (
	tw‹kqueue_öô_w‹kî_‚
)(
	tsubmô_w‹kî
 *);

29 (
	tw‹kqueue_exô_w‹kî_‚
)(
	tsubmô_w‹kî
 *, *);

30 (
	tw‹kqueue_upd©e_ac˘_‚
)(
	tsubmô_w‹kî
 *);

32 
	sw‹kqueue_›s
 {

33 
w‹kqueue_w‹k_‚
 *
‚
;

34 
w‹kqueue_¥e_¶ìp_Êush_‚
 *
¥e_¶ìp_Êush_‚
;

35 
w‹kqueue_¥e_¶ìp_‚
 *
¥e_¶ìp_‚
;

37 
w‹kqueue_upd©e_ac˘_‚
 *
upd©e_ac˘_‚
;

39 
w‹kqueue_Æloc_w‹kî_‚
 *
Æloc_w‹kî_‚
;

40 
w‹kqueue_‰ì_w‹kî_‚
 *
‰ì_w‹kî_‚
;

42 
w‹kqueue_öô_w‹kî_‚
 *
öô_w‹kî_‚
;

43 
w‹kqueue_exô_w‹kî_‚
 *
exô_w‹kî_‚
;

45 
ni˚
;

48 
	sw‹kqueue
 {

49 
max_w‹kîs
;

51 
thªad_d©a
 *
td
;

52 
w‹kqueue_›s
 
›s
;

54 
uöt64_t
 
w‹k_£q
;

55 
submô_w‹kî
 *
w‹kîs
;

56 
√xt_‰ì_w‹kî
;

58 
±hªad_c⁄d_t
 
Êush_c⁄d
;

59 
±hªad_muãx_t
 
Êush_lock
;

60 
±hªad_muãx_t
 
°©_lock
;

61 vﬁ©ûê
wake_idÀ
;

64 
	`w‹kqueue_öô
(
thªad_d©a
 *
td
, 
w‹kqueue
 *
wq
, 
w‹kqueue_›s
 *
›s
, 
max_w‹kîs
, 
sk_out
 *sk_out);

65 
	`w‹kqueue_exô
(
w‹kqueue
 *
wq
);

67 
	`w‹kqueue_íqueue
(
w‹kqueue
 *
wq
, 
w‹kqueue_w‹k
 *
w‹k
);

68 
	`w‹kqueue_Êush
(
w‹kqueue
 *
wq
);

70 
ölöe
 
boﬁ
 
	$w‹kqueue_¥e_¶ìp_check
(
submô_w‹kî
 *
sw
)

72 
w‹kqueue
 *
wq
 = 
sw
->wq;

74 i‡(!
wq
->
›s
.
¥e_¶ìp_Êush_‚
)

75  
Ál£
;

77  
wq
->
›s
.
	`¥e_¶ìp_Êush_‚
(
sw
);

78 
	}
}

80 
ölöe
 
	$w‹kqueue_¥e_¶ìp
(
submô_w‹kî
 *
sw
)

82 
w‹kqueue
 *
wq
 = 
sw
->wq;

84 i‡(
wq
->
›s
.
¥e_¶ìp_‚
)

85 
wq
->
›s
.
	`¥e_¶ìp_‚
(
sw
);

86 
	}
}

88 
ölöe
 
	$w‹kqueue_öô_w‹kî
(
submô_w‹kî
 *
sw
)

90 
w‹kqueue
 *
wq
 = 
sw
->wq;

92 i‡(!
wq
->
›s
.
öô_w‹kî_‚
)

95  
wq
->
›s
.
	`öô_w‹kî_‚
(
sw
);

96 
	}
}

98 
ölöe
 
	$w‹kqueue_exô_w‹kî
(
submô_w‹kî
 *
sw
,

99 *
sum_˙t
)

101 
w‹kqueue
 *
wq
 = 
sw
->wq;

102 
tmp
 = 1;

104 i‡(!
wq
->
›s
.
exô_w‹kî_‚
)

107 i‡(!
sum_˙t
)

108 
sum_˙t
 = &
tmp
;

110 
wq
->
›s
.
	`exô_w‹kî_‚
(
sw
, 
sum_˙t
);

111 
	}
}

	@/usr/include/aio.h

22 #i‚de‡
_AIO_H


23 
	#_AIO_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<sys/ty≥s.h
>

27 
	#__√ed_sigevít_t


	)

28 
	~<bôs/sigöfo.h
>

29 
	#__√ed_time•ec


	)

30 
	~<time.h
>

32 
__BEGIN_DECLS


35 
	saiocb


37 
	maio_fûdes
;

38 
	maio_lio_›code
;

39 
	maio_ªq¥io
;

40 vﬁ©ûê*
	maio_buf
;

41 
size_t
 
	maio_nbyãs
;

42 
sigevít
 
	maio_sigevít
;

45 
aiocb
 *
	m__√xt_¥io
;

46 
	m__abs_¥io
;

47 
	m__pﬁicy
;

48 
	m__îr‹_code
;

49 
__ssize_t
 
	m__ªtu∫_vÆue
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	maio_off£t
;

53 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

55 
__off64_t
 
	maio_off£t
;

57 
	m__glibc_ª£rved
[32];

62 #ifde‡
__USE_LARGEFILE64


63 
	saiocb64


65 
	maio_fûdes
;

66 
	maio_lio_›code
;

67 
	maio_ªq¥io
;

68 vﬁ©ûê*
	maio_buf
;

69 
size_t
 
	maio_nbyãs
;

70 
sigevít
 
	maio_sigevít
;

73 
aiocb
 *
	m__√xt_¥io
;

74 
	m__abs_¥io
;

75 
	m__pﬁicy
;

76 
	m__îr‹_code
;

77 
__ssize_t
 
	m__ªtu∫_vÆue
;

79 
__off64_t
 
	maio_off£t
;

80 
	m__glibc_ª£rved
[32];

85 #ifde‡
__USE_GNU


88 
	saioöô


90 
	maio_thªads
;

91 
	maio_num
;

92 
	maio_locks
;

93 
	maio_u£dba
;

94 
	maio_debug
;

95 
	maio_numu£rs
;

96 
	maio_idÀ_time
;

98 
	maio_ª£rved
;

106 
	mAIO_CANCELED
,

107 
	#AIO_CANCELED
 
AIO_CANCELED


	)

108 
	mAIO_NOTCANCELED
,

109 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

110 
	mAIO_ALLDONE


111 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

118 
	mLIO_READ
,

119 
	#LIO_READ
 
LIO_READ


	)

120 
	mLIO_WRITE
,

121 
	#LIO_WRITE
 
LIO_WRITE


	)

122 
	mLIO_NOP


123 
	#LIO_NOP
 
LIO_NOP


	)

130 
	mLIO_WAIT
,

131 
	#LIO_WAIT
 
LIO_WAIT


	)

132 
	mLIO_NOWAIT


133 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

138 #ifde‡
__USE_GNU


139 
	$aio_öô
 (c⁄° 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #i‚de‡
__USE_FILE_OFFSET64


145 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

150 
	$lio_li°io
 (
__mode
,

151 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

152 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
	$aio_îr‹
 (c⁄° 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

158 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

162 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

169 
	$aio_su•íd
 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

170 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

171 
	`__n⁄nuŒ
 ((1));

175 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

176 
__THROW
 
	`__n⁄nuŒ
 ((2));

178 #ifde‡
__REDIRECT_NTH


179 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

180 
	`__n⁄nuŒ
 ((1));

181 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

182 
	`__n⁄nuŒ
 ((1));

184 
	`__REDIRECT_NTH
 (
lio_li°io
,

185 (
__mode
,

186 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

187 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

188 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

190 
	`__REDIRECT_NTH
 (
aio_îr‹
, (c⁄° 
aiocb
 *
__aiocbp
),

191 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

192 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

193 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

195 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

196 (
__fûdes
, 
aiocb
 *
__aiocbp
),

197 
aio_ˇn˚l64
);

199 
	`__REDIRECT_NTH
 (
aio_su•íd
,

200 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

201 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

202 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT_NTH
 (
aio_fsync
,

205 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

206 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

209 
	#aio_ªad
 
aio_ªad64


	)

210 
	#aio_wrôe
 
aio_wrôe64


	)

211 
	#lio_li°io
 
lio_li°io64


	)

212 
	#aio_îr‹
 
aio_îr‹64


	)

213 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

214 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

215 
	#aio_su•íd
 
aio_su•íd64


	)

216 
	#aio_fsync
 
aio_fsync64


	)

220 #ifde‡
__USE_LARGEFILE64


221 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$lio_li°io64
 (
__mode
,

225 
aiocb64
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

226 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

227 
__THROW
 
	`__n⁄nuŒ
 ((2));

229 
	$aio_îr‹64
 (c⁄° 
aiocb64
 *
__aiocbp
)

230 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

236 
	$aio_su•íd64
 (c⁄° 
aiocb64
 *c⁄° 
__li°
[], 
__√¡
,

237 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

238 
__THROW
 
	`__n⁄nuŒ
 ((1));

240 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2));

244 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/byteswap.h

18 #i‚de‡
_BYTESWAP_H


19 
	#_BYTESWAP_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/byãsw≠.h
>

31 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

34 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #ifde‡
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #ifde‡
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #ifde‡
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_ALTERA_NIOS2
 113

	)

253 
	#EM_AARCH64
 183

	)

254 
	#EM_TILEPRO
 188

	)

255 
	#EM_MICROBLAZE
 189

	)

256 
	#EM_TILEGX
 191

	)

257 
	#EM_NUM
 192

	)

263 
	#EM_ALPHA
 0x9026

	)

267 
	#EV_NONE
 0

	)

268 
	#EV_CURRENT
 1

	)

269 
	#EV_NUM
 2

	)

275 
Elf32_W‹d
 
	msh_«me
;

276 
Elf32_W‹d
 
	msh_ty≥
;

277 
Elf32_W‹d
 
	msh_Êags
;

278 
Elf32_Addr
 
	msh_addr
;

279 
Elf32_Off
 
	msh_off£t
;

280 
Elf32_W‹d
 
	msh_size
;

281 
Elf32_W‹d
 
	msh_lök
;

282 
Elf32_W‹d
 
	msh_öfo
;

283 
Elf32_W‹d
 
	msh_addølign
;

284 
Elf32_W‹d
 
	msh_ítsize
;

285 } 
	tElf32_Shdr
;

289 
Elf64_W‹d
 
	msh_«me
;

290 
Elf64_W‹d
 
	msh_ty≥
;

291 
Elf64_Xw‹d
 
	msh_Êags
;

292 
Elf64_Addr
 
	msh_addr
;

293 
Elf64_Off
 
	msh_off£t
;

294 
Elf64_Xw‹d
 
	msh_size
;

295 
Elf64_W‹d
 
	msh_lök
;

296 
Elf64_W‹d
 
	msh_öfo
;

297 
Elf64_Xw‹d
 
	msh_addølign
;

298 
Elf64_Xw‹d
 
	msh_ítsize
;

299 } 
	tElf64_Shdr
;

303 
	#SHN_UNDEF
 0

	)

304 
	#SHN_LORESERVE
 0xff00

	)

305 
	#SHN_LOPROC
 0xff00

	)

306 
	#SHN_BEFORE
 0xff00

	)

308 
	#SHN_AFTER
 0xff01

	)

310 
	#SHN_HIPROC
 0xff1‡

	)

311 
	#SHN_LOOS
 0xff20

	)

312 
	#SHN_HIOS
 0xff3‡

	)

313 
	#SHN_ABS
 0xfff1

	)

314 
	#SHN_COMMON
 0xfff2

	)

315 
	#SHN_XINDEX
 0xfff‡

	)

316 
	#SHN_HIRESERVE
 0xfff‡

	)

320 
	#SHT_NULL
 0

	)

321 
	#SHT_PROGBITS
 1

	)

322 
	#SHT_SYMTAB
 2

	)

323 
	#SHT_STRTAB
 3

	)

324 
	#SHT_RELA
 4

	)

325 
	#SHT_HASH
 5

	)

326 
	#SHT_DYNAMIC
 6

	)

327 
	#SHT_NOTE
 7

	)

328 
	#SHT_NOBITS
 8

	)

329 
	#SHT_REL
 9

	)

330 
	#SHT_SHLIB
 10

	)

331 
	#SHT_DYNSYM
 11

	)

332 
	#SHT_INIT_ARRAY
 14

	)

333 
	#SHT_FINI_ARRAY
 15

	)

334 
	#SHT_PREINIT_ARRAY
 16

	)

335 
	#SHT_GROUP
 17

	)

336 
	#SHT_SYMTAB_SHNDX
 18

	)

337 
	#SHT_NUM
 19

	)

338 
	#SHT_LOOS
 0x60000000

	)

339 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

340 
	#SHT_GNU_HASH
 0x6ffffff6

	)

341 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

342 
	#SHT_CHECKSUM
 0x6ffffff8

	)

343 
	#SHT_LOSUNW
 0x6fffffÁ

	)

344 
	#SHT_SUNW_move
 0x6fffffÁ

	)

345 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

346 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

347 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

348 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

349 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

350 
	#SHT_HISUNW
 0x6ffffff‡

	)

351 
	#SHT_HIOS
 0x6ffffff‡

	)

352 
	#SHT_LOPROC
 0x70000000

	)

353 
	#SHT_HIPROC
 0x7ffffff‡

	)

354 
	#SHT_LOUSER
 0x80000000

	)

355 
	#SHT_HIUSER
 0x8ffffff‡

	)

359 
	#SHF_WRITE
 (1 << 0Ë

	)

360 
	#SHF_ALLOC
 (1 << 1Ë

	)

361 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

362 
	#SHF_MERGE
 (1 << 4Ë

	)

363 
	#SHF_STRINGS
 (1 << 5Ë

	)

364 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

365 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

366 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

368 
	#SHF_GROUP
 (1 << 9Ë

	)

369 
	#SHF_TLS
 (1 << 10Ë

	)

370 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

371 
	#SHF_MASKOS
 0x0ff00000

	)

372 
	#SHF_MASKPROC
 0xf0000000

	)

373 
	#SHF_ORDERED
 (1 << 30Ë

	)

375 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

382 
Elf32_W‹d
 
	mch_ty≥
;

383 
Elf32_W‹d
 
	mch_size
;

384 
Elf32_W‹d
 
	mch_addølign
;

385 } 
	tElf32_Chdr
;

389 
Elf64_W‹d
 
	mch_ty≥
;

390 
Elf64_W‹d
 
	mch_ª£rved
;

391 
Elf64_Xw‹d
 
	mch_size
;

392 
Elf64_Xw‹d
 
	mch_addølign
;

393 } 
	tElf64_Chdr
;

396 
	#ELFCOMPRESS_ZLIB
 1

	)

397 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

398 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

399 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

400 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

403 
	#GRP_COMDAT
 0x1

	)

409 
Elf32_W‹d
 
	m°_«me
;

410 
Elf32_Addr
 
	m°_vÆue
;

411 
Elf32_W‹d
 
	m°_size
;

412 
	m°_öfo
;

413 
	m°_Ÿhî
;

414 
Elf32_Se˘i⁄
 
	m°_shndx
;

415 } 
	tElf32_Sym
;

419 
Elf64_W‹d
 
	m°_«me
;

420 
	m°_öfo
;

421 
	m°_Ÿhî
;

422 
Elf64_Se˘i⁄
 
	m°_shndx
;

423 
Elf64_Addr
 
	m°_vÆue
;

424 
Elf64_Xw‹d
 
	m°_size
;

425 } 
	tElf64_Sym
;

432 
Elf32_HÆf
 
	msi_boundto
;

433 
Elf32_HÆf
 
	msi_Êags
;

434 } 
	tElf32_Symöfo
;

438 
Elf64_HÆf
 
	msi_boundto
;

439 
Elf64_HÆf
 
	msi_Êags
;

440 } 
	tElf64_Symöfo
;

443 
	#SYMINFO_BT_SELF
 0xfff‡

	)

444 
	#SYMINFO_BT_PARENT
 0xff„

	)

445 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

448 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

449 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

450 
	#SYMINFO_FLG_COPY
 0x0004

	)

451 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

454 
	#SYMINFO_NONE
 0

	)

455 
	#SYMINFO_CURRENT
 1

	)

456 
	#SYMINFO_NUM
 2

	)

461 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

462 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

463 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

466 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

467 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

468 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

472 
	#STB_LOCAL
 0

	)

473 
	#STB_GLOBAL
 1

	)

474 
	#STB_WEAK
 2

	)

475 
	#STB_NUM
 3

	)

476 
	#STB_LOOS
 10

	)

477 
	#STB_GNU_UNIQUE
 10

	)

478 
	#STB_HIOS
 12

	)

479 
	#STB_LOPROC
 13

	)

480 
	#STB_HIPROC
 15

	)

484 
	#STT_NOTYPE
 0

	)

485 
	#STT_OBJECT
 1

	)

486 
	#STT_FUNC
 2

	)

487 
	#STT_SECTION
 3

	)

488 
	#STT_FILE
 4

	)

489 
	#STT_COMMON
 5

	)

490 
	#STT_TLS
 6

	)

491 
	#STT_NUM
 7

	)

492 
	#STT_LOOS
 10

	)

493 
	#STT_GNU_IFUNC
 10

	)

494 
	#STT_HIOS
 12

	)

495 
	#STT_LOPROC
 13

	)

496 
	#STT_HIPROC
 15

	)

503 
	#STN_UNDEF
 0

	)

508 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

511 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

514 
	#STV_DEFAULT
 0

	)

515 
	#STV_INTERNAL
 1

	)

516 
	#STV_HIDDEN
 2

	)

517 
	#STV_PROTECTED
 3

	)

524 
Elf32_Addr
 
	mr_off£t
;

525 
Elf32_W‹d
 
	mr_öfo
;

526 } 
	tElf32_Rñ
;

535 
Elf64_Addr
 
	mr_off£t
;

536 
Elf64_Xw‹d
 
	mr_öfo
;

537 } 
	tElf64_Rñ
;

543 
Elf32_Addr
 
	mr_off£t
;

544 
Elf32_W‹d
 
	mr_öfo
;

545 
Elf32_Sw‹d
 
	mr_addíd
;

546 } 
	tElf32_Rña
;

550 
Elf64_Addr
 
	mr_off£t
;

551 
Elf64_Xw‹d
 
	mr_öfo
;

552 
Elf64_Sxw‹d
 
	mr_addíd
;

553 } 
	tElf64_Rña
;

557 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

558 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

559 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

561 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

562 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

563 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

569 
Elf32_W‹d
 
	mp_ty≥
;

570 
Elf32_Off
 
	mp_off£t
;

571 
Elf32_Addr
 
	mp_vaddr
;

572 
Elf32_Addr
 
	mp_∑ddr
;

573 
Elf32_W‹d
 
	mp_fûesz
;

574 
Elf32_W‹d
 
	mp_memsz
;

575 
Elf32_W‹d
 
	mp_Êags
;

576 
Elf32_W‹d
 
	mp_Æign
;

577 } 
	tElf32_Phdr
;

581 
Elf64_W‹d
 
	mp_ty≥
;

582 
Elf64_W‹d
 
	mp_Êags
;

583 
Elf64_Off
 
	mp_off£t
;

584 
Elf64_Addr
 
	mp_vaddr
;

585 
Elf64_Addr
 
	mp_∑ddr
;

586 
Elf64_Xw‹d
 
	mp_fûesz
;

587 
Elf64_Xw‹d
 
	mp_memsz
;

588 
Elf64_Xw‹d
 
	mp_Æign
;

589 } 
	tElf64_Phdr
;

595 
	#PN_XNUM
 0xffff

	)

599 
	#PT_NULL
 0

	)

600 
	#PT_LOAD
 1

	)

601 
	#PT_DYNAMIC
 2

	)

602 
	#PT_INTERP
 3

	)

603 
	#PT_NOTE
 4

	)

604 
	#PT_SHLIB
 5

	)

605 
	#PT_PHDR
 6

	)

606 
	#PT_TLS
 7

	)

607 
	#PT_NUM
 8

	)

608 
	#PT_LOOS
 0x60000000

	)

609 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

610 
	#PT_GNU_STACK
 0x6474e551

	)

611 
	#PT_GNU_RELRO
 0x6474e552

	)

612 
	#PT_LOSUNW
 0x6fffffÁ

	)

613 
	#PT_SUNWBSS
 0x6fffffÁ

	)

614 
	#PT_SUNWSTACK
 0x6ffffffb

	)

615 
	#PT_HISUNW
 0x6fffffff

	)

616 
	#PT_HIOS
 0x6ffffff‡

	)

617 
	#PT_LOPROC
 0x70000000

	)

618 
	#PT_HIPROC
 0x7ffffff‡

	)

622 
	#PF_X
 (1 << 0Ë

	)

623 
	#PF_W
 (1 << 1Ë

	)

624 
	#PF_R
 (1 << 2Ë

	)

625 
	#PF_MASKOS
 0x0ff00000

	)

626 
	#PF_MASKPROC
 0xf0000000

	)

630 
	#NT_PRSTATUS
 1

	)

631 
	#NT_FPREGSET
 2

	)

632 
	#NT_PRPSINFO
 3

	)

633 
	#NT_PRXREG
 4

	)

634 
	#NT_TASKSTRUCT
 4

	)

635 
	#NT_PLATFORM
 5

	)

636 
	#NT_AUXV
 6

	)

637 
	#NT_GWINDOWS
 7

	)

638 
	#NT_ASRS
 8

	)

639 
	#NT_PSTATUS
 10

	)

640 
	#NT_PSINFO
 13

	)

641 
	#NT_PRCRED
 14

	)

642 
	#NT_UTSNAME
 15

	)

643 
	#NT_LWPSTATUS
 16

	)

644 
	#NT_LWPSINFO
 17

	)

645 
	#NT_PRFPXREG
 20

	)

646 
	#NT_SIGINFO
 0x53494749

	)

648 
	#NT_FILE
 0x46494c45

	)

650 
	#NT_PRXFPREG
 0x46e62b7‡

	)

651 
	#NT_PPC_VMX
 0x100

	)

652 
	#NT_PPC_SPE
 0x101

	)

653 
	#NT_PPC_VSX
 0x102

	)

654 
	#NT_386_TLS
 0x200

	)

655 
	#NT_386_IOPERM
 0x201

	)

656 
	#NT_X86_XSTATE
 0x202

	)

657 
	#NT_S390_HIGH_GPRS
 0x300

	)

658 
	#NT_S390_TIMER
 0x301

	)

659 
	#NT_S390_TODCMP
 0x302

	)

660 
	#NT_S390_TODPREG
 0x303

	)

661 
	#NT_S390_CTRS
 0x304

	)

662 
	#NT_S390_PREFIX
 0x305

	)

663 
	#NT_S390_LAST_BREAK
 0x306

	)

664 
	#NT_S390_SYSTEM_CALL
 0x307

	)

665 
	#NT_S390_TDB
 0x308

	)

666 
	#NT_ARM_VFP
 0x400

	)

667 
	#NT_ARM_TLS
 0x401

	)

668 
	#NT_ARM_HW_BREAK
 0x402

	)

669 
	#NT_ARM_HW_WATCH
 0x403

	)

673 
	#NT_VERSION
 1

	)

680 
Elf32_Sw‹d
 
	md_èg
;

683 
Elf32_W‹d
 
	md_vÆ
;

684 
Elf32_Addr
 
	md_±r
;

685 } 
	md_un
;

686 } 
	tElf32_Dyn
;

690 
Elf64_Sxw‹d
 
	md_èg
;

693 
Elf64_Xw‹d
 
	md_vÆ
;

694 
Elf64_Addr
 
	md_±r
;

695 } 
	md_un
;

696 } 
	tElf64_Dyn
;

700 
	#DT_NULL
 0

	)

701 
	#DT_NEEDED
 1

	)

702 
	#DT_PLTRELSZ
 2

	)

703 
	#DT_PLTGOT
 3

	)

704 
	#DT_HASH
 4

	)

705 
	#DT_STRTAB
 5

	)

706 
	#DT_SYMTAB
 6

	)

707 
	#DT_RELA
 7

	)

708 
	#DT_RELASZ
 8

	)

709 
	#DT_RELAENT
 9

	)

710 
	#DT_STRSZ
 10

	)

711 
	#DT_SYMENT
 11

	)

712 
	#DT_INIT
 12

	)

713 
	#DT_FINI
 13

	)

714 
	#DT_SONAME
 14

	)

715 
	#DT_RPATH
 15

	)

716 
	#DT_SYMBOLIC
 16

	)

717 
	#DT_REL
 17

	)

718 
	#DT_RELSZ
 18

	)

719 
	#DT_RELENT
 19

	)

720 
	#DT_PLTREL
 20

	)

721 
	#DT_DEBUG
 21

	)

722 
	#DT_TEXTREL
 22

	)

723 
	#DT_JMPREL
 23

	)

724 
	#DT_BIND_NOW
 24

	)

725 
	#DT_INIT_ARRAY
 25

	)

726 
	#DT_FINI_ARRAY
 26

	)

727 
	#DT_INIT_ARRAYSZ
 27

	)

728 
	#DT_FINI_ARRAYSZ
 28

	)

729 
	#DT_RUNPATH
 29

	)

730 
	#DT_FLAGS
 30

	)

731 
	#DT_ENCODING
 32

	)

732 
	#DT_PREINIT_ARRAY
 32

	)

733 
	#DT_PREINIT_ARRAYSZ
 33

	)

734 
	#DT_NUM
 34

	)

735 
	#DT_LOOS
 0x6000000d

	)

736 
	#DT_HIOS
 0x6ffff000

	)

737 
	#DT_LOPROC
 0x70000000

	)

738 
	#DT_HIPROC
 0x7ffffff‡

	)

739 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

744 
	#DT_VALRNGLO
 0x6ffffd00

	)

745 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

746 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

747 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

748 
	#DT_CHECKSUM
 0x6ffffdf8

	)

749 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

750 
	#DT_MOVEENT
 0x6ffffdÁ

	)

751 
	#DT_MOVESZ
 0x6ffffdfb

	)

752 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

753 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

755 
	#DT_SYMINSZ
 0x6ffffd„

	)

756 
	#DT_SYMINENT
 0x6ffffdf‡

	)

757 
	#DT_VALRNGHI
 0x6ffffdff

	)

758 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

759 
	#DT_VALNUM
 12

	)

766 
	#DT_ADDRRNGLO
 0x6fff„00

	)

767 
	#DT_GNU_HASH
 0x6fff„f5

	)

768 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

769 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

770 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

771 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

772 
	#DT_CONFIG
 0x6fff„Á

	)

773 
	#DT_DEPAUDIT
 0x6fff„fb

	)

774 
	#DT_AUDIT
 0x6fff„f¯

	)

775 
	#DT_PLTPAD
 0x6fff„fd

	)

776 
	#DT_MOVETAB
 0x6fff„„

	)

777 
	#DT_SYMINFO
 0x6fff„f‡

	)

778 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

779 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

780 
	#DT_ADDRNUM
 11

	)

784 
	#DT_VERSYM
 0x6ffffff0

	)

786 
	#DT_RELACOUNT
 0x6ffffff9

	)

787 
	#DT_RELCOUNT
 0x6fffffÁ

	)

790 
	#DT_FLAGS_1
 0x6ffffffb

	)

791 
	#DT_VERDEF
 0x6ffffff¯

	)

793 
	#DT_VERDEFNUM
 0x6ffffffd

	)

794 
	#DT_VERNEED
 0x6fffff„

	)

796 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

797 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

798 
	#DT_VERSIONTAGNUM
 16

	)

802 
	#DT_AUXILIARY
 0x7ffffffd

	)

803 
	#DT_FILTER
 0x7ffffff‡

	)

804 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

805 
	#DT_EXTRANUM
 3

	)

808 
	#DF_ORIGIN
 0x00000001

	)

809 
	#DF_SYMBOLIC
 0x00000002

	)

810 
	#DF_TEXTREL
 0x00000004

	)

811 
	#DF_BIND_NOW
 0x00000008

	)

812 
	#DF_STATIC_TLS
 0x00000010

	)

816 
	#DF_1_NOW
 0x00000001

	)

817 
	#DF_1_GLOBAL
 0x00000002

	)

818 
	#DF_1_GROUP
 0x00000004

	)

819 
	#DF_1_NODELETE
 0x00000008

	)

820 
	#DF_1_LOADFLTR
 0x00000010

	)

821 
	#DF_1_INITFIRST
 0x00000020

	)

822 
	#DF_1_NOOPEN
 0x00000040

	)

823 
	#DF_1_ORIGIN
 0x00000080

	)

824 
	#DF_1_DIRECT
 0x00000100

	)

825 
	#DF_1_TRANS
 0x00000200

	)

826 
	#DF_1_INTERPOSE
 0x00000400

	)

827 
	#DF_1_NODEFLIB
 0x00000800

	)

828 
	#DF_1_NODUMP
 0x00001000

	)

829 
	#DF_1_CONFALT
 0x00002000

	)

830 
	#DF_1_ENDFILTEE
 0x00004000

	)

831 
	#DF_1_DISPRELDNE
 0x00008000

	)

832 
	#DF_1_DISPRELPND
 0x00010000

	)

833 
	#DF_1_NODIRECT
 0x00020000

	)

834 
	#DF_1_IGNMULDEF
 0x00040000

	)

835 
	#DF_1_NOKSYMS
 0x00080000

	)

836 
	#DF_1_NOHDR
 0x00100000

	)

837 
	#DF_1_EDITED
 0x00200000

	)

838 
	#DF_1_NORELOC
 0x00400000

	)

839 
	#DF_1_SYMINTPOSE
 0x00800000

	)

840 
	#DF_1_GLOBAUDIT
 0x01000000

	)

841 
	#DF_1_SINGLETON
 0x02000000

	)

844 
	#DTF_1_PARINIT
 0x00000001

	)

845 
	#DTF_1_CONFEXP
 0x00000002

	)

848 
	#DF_P1_LAZYLOAD
 0x00000001

	)

849 
	#DF_P1_GROUPPERM
 0x00000002

	)

856 
Elf32_HÆf
 
	mvd_vîsi⁄
;

857 
Elf32_HÆf
 
	mvd_Êags
;

858 
Elf32_HÆf
 
	mvd_ndx
;

859 
Elf32_HÆf
 
	mvd_˙t
;

860 
Elf32_W‹d
 
	mvd_hash
;

861 
Elf32_W‹d
 
	mvd_aux
;

862 
Elf32_W‹d
 
	mvd_√xt
;

864 } 
	tElf32_Vîdef
;

868 
Elf64_HÆf
 
	mvd_vîsi⁄
;

869 
Elf64_HÆf
 
	mvd_Êags
;

870 
Elf64_HÆf
 
	mvd_ndx
;

871 
Elf64_HÆf
 
	mvd_˙t
;

872 
Elf64_W‹d
 
	mvd_hash
;

873 
Elf64_W‹d
 
	mvd_aux
;

874 
Elf64_W‹d
 
	mvd_√xt
;

876 } 
	tElf64_Vîdef
;

880 
	#VER_DEF_NONE
 0

	)

881 
	#VER_DEF_CURRENT
 1

	)

882 
	#VER_DEF_NUM
 2

	)

885 
	#VER_FLG_BASE
 0x1

	)

886 
	#VER_FLG_WEAK
 0x2

	)

889 
	#VER_NDX_LOCAL
 0

	)

890 
	#VER_NDX_GLOBAL
 1

	)

891 
	#VER_NDX_LORESERVE
 0xff00

	)

892 
	#VER_NDX_ELIMINATE
 0xff01

	)

898 
Elf32_W‹d
 
	mvda_«me
;

899 
Elf32_W‹d
 
	mvda_√xt
;

901 } 
	tElf32_Vîdaux
;

905 
Elf64_W‹d
 
	mvda_«me
;

906 
Elf64_W‹d
 
	mvda_√xt
;

908 } 
	tElf64_Vîdaux
;

915 
Elf32_HÆf
 
	mvn_vîsi⁄
;

916 
Elf32_HÆf
 
	mvn_˙t
;

917 
Elf32_W‹d
 
	mvn_fûe
;

919 
Elf32_W‹d
 
	mvn_aux
;

920 
Elf32_W‹d
 
	mvn_√xt
;

922 } 
	tElf32_Vî√ed
;

926 
Elf64_HÆf
 
	mvn_vîsi⁄
;

927 
Elf64_HÆf
 
	mvn_˙t
;

928 
Elf64_W‹d
 
	mvn_fûe
;

930 
Elf64_W‹d
 
	mvn_aux
;

931 
Elf64_W‹d
 
	mvn_√xt
;

933 } 
	tElf64_Vî√ed
;

937 
	#VER_NEED_NONE
 0

	)

938 
	#VER_NEED_CURRENT
 1

	)

939 
	#VER_NEED_NUM
 2

	)

945 
Elf32_W‹d
 
	mv«_hash
;

946 
Elf32_HÆf
 
	mv«_Êags
;

947 
Elf32_HÆf
 
	mv«_Ÿhî
;

948 
Elf32_W‹d
 
	mv«_«me
;

949 
Elf32_W‹d
 
	mv«_√xt
;

951 } 
	tElf32_Vî«ux
;

955 
Elf64_W‹d
 
	mv«_hash
;

956 
Elf64_HÆf
 
	mv«_Êags
;

957 
Elf64_HÆf
 
	mv«_Ÿhî
;

958 
Elf64_W‹d
 
	mv«_«me
;

959 
Elf64_W‹d
 
	mv«_√xt
;

961 } 
	tElf64_Vî«ux
;

965 
	#VER_FLG_WEAK
 0x2

	)

979 
uöt32_t
 
	ma_ty≥
;

982 
uöt32_t
 
	ma_vÆ
;

986 } 
	ma_un
;

987 } 
	tElf32_auxv_t
;

991 
uöt64_t
 
	ma_ty≥
;

994 
uöt64_t
 
	ma_vÆ
;

998 } 
	ma_un
;

999 } 
	tElf64_auxv_t
;

1001 
	~<bôs/auxv.h
>

1007 
Elf32_W‹d
 
	mn_«mesz
;

1008 
Elf32_W‹d
 
	mn_descsz
;

1009 
Elf32_W‹d
 
	mn_ty≥
;

1010 } 
	tElf32_Nhdr
;

1014 
Elf64_W‹d
 
	mn_«mesz
;

1015 
Elf64_W‹d
 
	mn_descsz
;

1016 
Elf64_W‹d
 
	mn_ty≥
;

1017 } 
	tElf64_Nhdr
;

1022 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1025 
	#ELF_NOTE_GNU
 "GNU"

	)

1031 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1042 
	#NT_GNU_ABI_TAG
 1

	)

1043 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1047 
	#ELF_NOTE_OS_LINUX
 0

	)

1048 
	#ELF_NOTE_OS_GNU
 1

	)

1049 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1050 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1058 
	#NT_GNU_HWCAP
 2

	)

1062 
	#NT_GNU_BUILD_ID
 3

	)

1065 
	#NT_GNU_GOLD_VERSION
 4

	)

1071 
Elf32_Xw‹d
 
	mm_vÆue
;

1072 
Elf32_W‹d
 
	mm_öfo
;

1073 
Elf32_W‹d
 
	mm_poff£t
;

1074 
Elf32_HÆf
 
	mm_ª≥©
;

1075 
Elf32_HÆf
 
	mm_°ride
;

1076 } 
	tElf32_Move
;

1080 
Elf64_Xw‹d
 
	mm_vÆue
;

1081 
Elf64_Xw‹d
 
	mm_öfo
;

1082 
Elf64_Xw‹d
 
	mm_poff£t
;

1083 
Elf64_HÆf
 
	mm_ª≥©
;

1084 
Elf64_HÆf
 
	mm_°ride
;

1085 } 
	tElf64_Move
;

1088 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1089 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1090 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1092 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1093 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1094 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1100 
	#EF_CPU32
 0x00810000

	)

1104 
	#R_68K_NONE
 0

	)

1105 
	#R_68K_32
 1

	)

1106 
	#R_68K_16
 2

	)

1107 
	#R_68K_8
 3

	)

1108 
	#R_68K_PC32
 4

	)

1109 
	#R_68K_PC16
 5

	)

1110 
	#R_68K_PC8
 6

	)

1111 
	#R_68K_GOT32
 7

	)

1112 
	#R_68K_GOT16
 8

	)

1113 
	#R_68K_GOT8
 9

	)

1114 
	#R_68K_GOT32O
 10

	)

1115 
	#R_68K_GOT16O
 11

	)

1116 
	#R_68K_GOT8O
 12

	)

1117 
	#R_68K_PLT32
 13

	)

1118 
	#R_68K_PLT16
 14

	)

1119 
	#R_68K_PLT8
 15

	)

1120 
	#R_68K_PLT32O
 16

	)

1121 
	#R_68K_PLT16O
 17

	)

1122 
	#R_68K_PLT8O
 18

	)

1123 
	#R_68K_COPY
 19

	)

1124 
	#R_68K_GLOB_DAT
 20

	)

1125 
	#R_68K_JMP_SLOT
 21

	)

1126 
	#R_68K_RELATIVE
 22

	)

1127 
	#R_68K_TLS_GD32
 25

	)

1128 
	#R_68K_TLS_GD16
 26

	)

1129 
	#R_68K_TLS_GD8
 27

	)

1130 
	#R_68K_TLS_LDM32
 28

	)

1131 
	#R_68K_TLS_LDM16
 29

	)

1132 
	#R_68K_TLS_LDM8
 30

	)

1133 
	#R_68K_TLS_LDO32
 31

	)

1134 
	#R_68K_TLS_LDO16
 32

	)

1135 
	#R_68K_TLS_LDO8
 33

	)

1136 
	#R_68K_TLS_IE32
 34

	)

1137 
	#R_68K_TLS_IE16
 35

	)

1138 
	#R_68K_TLS_IE8
 36

	)

1139 
	#R_68K_TLS_LE32
 37

	)

1141 
	#R_68K_TLS_LE16
 38

	)

1143 
	#R_68K_TLS_LE8
 39

	)

1145 
	#R_68K_TLS_DTPMOD32
 40

	)

1146 
	#R_68K_TLS_DTPREL32
 41

	)

1147 
	#R_68K_TLS_TPREL32
 42

	)

1149 
	#R_68K_NUM
 43

	)

1155 
	#R_386_NONE
 0

	)

1156 
	#R_386_32
 1

	)

1157 
	#R_386_PC32
 2

	)

1158 
	#R_386_GOT32
 3

	)

1159 
	#R_386_PLT32
 4

	)

1160 
	#R_386_COPY
 5

	)

1161 
	#R_386_GLOB_DAT
 6

	)

1162 
	#R_386_JMP_SLOT
 7

	)

1163 
	#R_386_RELATIVE
 8

	)

1164 
	#R_386_GOTOFF
 9

	)

1165 
	#R_386_GOTPC
 10

	)

1166 
	#R_386_32PLT
 11

	)

1167 
	#R_386_TLS_TPOFF
 14

	)

1168 
	#R_386_TLS_IE
 15

	)

1170 
	#R_386_TLS_GOTIE
 16

	)

1172 
	#R_386_TLS_LE
 17

	)

1174 
	#R_386_TLS_GD
 18

	)

1176 
	#R_386_TLS_LDM
 19

	)

1179 
	#R_386_16
 20

	)

1180 
	#R_386_PC16
 21

	)

1181 
	#R_386_8
 22

	)

1182 
	#R_386_PC8
 23

	)

1183 
	#R_386_TLS_GD_32
 24

	)

1185 
	#R_386_TLS_GD_PUSH
 25

	)

1186 
	#R_386_TLS_GD_CALL
 26

	)

1188 
	#R_386_TLS_GD_POP
 27

	)

1189 
	#R_386_TLS_LDM_32
 28

	)

1191 
	#R_386_TLS_LDM_PUSH
 29

	)

1192 
	#R_386_TLS_LDM_CALL
 30

	)

1194 
	#R_386_TLS_LDM_POP
 31

	)

1195 
	#R_386_TLS_LDO_32
 32

	)

1196 
	#R_386_TLS_IE_32
 33

	)

1198 
	#R_386_TLS_LE_32
 34

	)

1200 
	#R_386_TLS_DTPMOD32
 35

	)

1201 
	#R_386_TLS_DTPOFF32
 36

	)

1202 
	#R_386_TLS_TPOFF32
 37

	)

1203 
	#R_386_SIZE32
 38

	)

1204 
	#R_386_TLS_GOTDESC
 39

	)

1205 
	#R_386_TLS_DESC_CALL
 40

	)

1208 
	#R_386_TLS_DESC
 41

	)

1212 
	#R_386_IRELATIVE
 42

	)

1214 
	#R_386_NUM
 43

	)

1220 
	#STT_SPARC_REGISTER
 13

	)

1224 
	#EF_SPARCV9_MM
 3

	)

1225 
	#EF_SPARCV9_TSO
 0

	)

1226 
	#EF_SPARCV9_PSO
 1

	)

1227 
	#EF_SPARCV9_RMO
 2

	)

1228 
	#EF_SPARC_LEDATA
 0x800000

	)

1229 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1230 
	#EF_SPARC_32PLUS
 0x000100

	)

1231 
	#EF_SPARC_SUN_US1
 0x000200

	)

1232 
	#EF_SPARC_HAL_R1
 0x000400

	)

1233 
	#EF_SPARC_SUN_US3
 0x000800

	)

1237 
	#R_SPARC_NONE
 0

	)

1238 
	#R_SPARC_8
 1

	)

1239 
	#R_SPARC_16
 2

	)

1240 
	#R_SPARC_32
 3

	)

1241 
	#R_SPARC_DISP8
 4

	)

1242 
	#R_SPARC_DISP16
 5

	)

1243 
	#R_SPARC_DISP32
 6

	)

1244 
	#R_SPARC_WDISP30
 7

	)

1245 
	#R_SPARC_WDISP22
 8

	)

1246 
	#R_SPARC_HI22
 9

	)

1247 
	#R_SPARC_22
 10

	)

1248 
	#R_SPARC_13
 11

	)

1249 
	#R_SPARC_LO10
 12

	)

1250 
	#R_SPARC_GOT10
 13

	)

1251 
	#R_SPARC_GOT13
 14

	)

1252 
	#R_SPARC_GOT22
 15

	)

1253 
	#R_SPARC_PC10
 16

	)

1254 
	#R_SPARC_PC22
 17

	)

1255 
	#R_SPARC_WPLT30
 18

	)

1256 
	#R_SPARC_COPY
 19

	)

1257 
	#R_SPARC_GLOB_DAT
 20

	)

1258 
	#R_SPARC_JMP_SLOT
 21

	)

1259 
	#R_SPARC_RELATIVE
 22

	)

1260 
	#R_SPARC_UA32
 23

	)

1264 
	#R_SPARC_PLT32
 24

	)

1265 
	#R_SPARC_HIPLT22
 25

	)

1266 
	#R_SPARC_LOPLT10
 26

	)

1267 
	#R_SPARC_PCPLT32
 27

	)

1268 
	#R_SPARC_PCPLT22
 28

	)

1269 
	#R_SPARC_PCPLT10
 29

	)

1270 
	#R_SPARC_10
 30

	)

1271 
	#R_SPARC_11
 31

	)

1272 
	#R_SPARC_64
 32

	)

1273 
	#R_SPARC_OLO10
 33

	)

1274 
	#R_SPARC_HH22
 34

	)

1275 
	#R_SPARC_HM10
 35

	)

1276 
	#R_SPARC_LM22
 36

	)

1277 
	#R_SPARC_PC_HH22
 37

	)

1278 
	#R_SPARC_PC_HM10
 38

	)

1279 
	#R_SPARC_PC_LM22
 39

	)

1280 
	#R_SPARC_WDISP16
 40

	)

1281 
	#R_SPARC_WDISP19
 41

	)

1282 
	#R_SPARC_GLOB_JMP
 42

	)

1283 
	#R_SPARC_7
 43

	)

1284 
	#R_SPARC_5
 44

	)

1285 
	#R_SPARC_6
 45

	)

1286 
	#R_SPARC_DISP64
 46

	)

1287 
	#R_SPARC_PLT64
 47

	)

1288 
	#R_SPARC_HIX22
 48

	)

1289 
	#R_SPARC_LOX10
 49

	)

1290 
	#R_SPARC_H44
 50

	)

1291 
	#R_SPARC_M44
 51

	)

1292 
	#R_SPARC_L44
 52

	)

1293 
	#R_SPARC_REGISTER
 53

	)

1294 
	#R_SPARC_UA64
 54

	)

1295 
	#R_SPARC_UA16
 55

	)

1296 
	#R_SPARC_TLS_GD_HI22
 56

	)

1297 
	#R_SPARC_TLS_GD_LO10
 57

	)

1298 
	#R_SPARC_TLS_GD_ADD
 58

	)

1299 
	#R_SPARC_TLS_GD_CALL
 59

	)

1300 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1301 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1302 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1303 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1304 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1305 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1306 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1307 
	#R_SPARC_TLS_IE_HI22
 67

	)

1308 
	#R_SPARC_TLS_IE_LO10
 68

	)

1309 
	#R_SPARC_TLS_IE_LD
 69

	)

1310 
	#R_SPARC_TLS_IE_LDX
 70

	)

1311 
	#R_SPARC_TLS_IE_ADD
 71

	)

1312 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1313 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1314 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1315 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1316 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1317 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1318 
	#R_SPARC_TLS_TPOFF32
 78

	)

1319 
	#R_SPARC_TLS_TPOFF64
 79

	)

1320 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1321 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1322 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1323 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1324 
	#R_SPARC_GOTDATA_OP
 84

	)

1325 
	#R_SPARC_H34
 85

	)

1326 
	#R_SPARC_SIZE32
 86

	)

1327 
	#R_SPARC_SIZE64
 87

	)

1328 
	#R_SPARC_WDISP10
 88

	)

1329 
	#R_SPARC_JMP_IREL
 248

	)

1330 
	#R_SPARC_IRELATIVE
 249

	)

1331 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1332 
	#R_SPARC_GNU_VTENTRY
 251

	)

1333 
	#R_SPARC_REV32
 252

	)

1335 
	#R_SPARC_NUM
 253

	)

1339 
	#DT_SPARC_REGISTER
 0x70000001

	)

1340 
	#DT_SPARC_NUM
 2

	)

1346 
	#EF_MIPS_NOREORDER
 1

	)

1347 
	#EF_MIPS_PIC
 2

	)

1348 
	#EF_MIPS_CPIC
 4

	)

1349 
	#EF_MIPS_XGOT
 8

	)

1350 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1351 
	#EF_MIPS_ABI2
 32

	)

1352 
	#EF_MIPS_ABI_ON32
 64

	)

1353 
	#EF_MIPS_FP64
 512

	)

1354 
	#EF_MIPS_NAN2008
 1024

	)

1355 
	#EF_MIPS_ARCH
 0xf0000000

	)

1359 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1360 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1361 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1362 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1363 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1364 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1365 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1366 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1367 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1371 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1372 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1373 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1374 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1375 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1376 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1377 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1381 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1382 
	#SHN_MIPS_TEXT
 0xff01

	)

1383 
	#SHN_MIPS_DATA
 0xff02

	)

1384 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1385 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1389 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1390 
	#SHT_MIPS_MSYM
 0x70000001

	)

1391 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1392 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1393 
	#SHT_MIPS_UCODE
 0x70000004

	)

1394 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1395 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1396 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1397 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1398 
	#SHT_MIPS_RELD
 0x70000009

	)

1399 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1400 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1401 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1402 
	#SHT_MIPS_SHDR
 0x70000010

	)

1403 
	#SHT_MIPS_FDESC
 0x70000011

	)

1404 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1405 
	#SHT_MIPS_DENSE
 0x70000013

	)

1406 
	#SHT_MIPS_PDESC
 0x70000014

	)

1407 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1408 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1409 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1410 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1411 
	#SHT_MIPS_LINE
 0x70000019

	)

1412 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1413 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1414 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1415 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1416 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1417 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1418 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1419 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1420 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1421 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1422 
	#SHT_MIPS_XLATE
 0x70000024

	)

1423 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1424 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1425 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1426 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1427 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1431 
	#SHF_MIPS_GPREL
 0x10000000

	)

1432 
	#SHF_MIPS_MERGE
 0x20000000

	)

1433 
	#SHF_MIPS_ADDR
 0x40000000

	)

1434 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1435 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1436 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1437 
	#SHF_MIPS_NAMES
 0x02000000

	)

1438 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1444 
	#STO_MIPS_DEFAULT
 0x0

	)

1445 
	#STO_MIPS_INTERNAL
 0x1

	)

1446 
	#STO_MIPS_HIDDEN
 0x2

	)

1447 
	#STO_MIPS_PROTECTED
 0x3

	)

1448 
	#STO_MIPS_PLT
 0x8

	)

1449 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1452 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1460 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1461 
Elf32_W‹d
 
	mgt_unu£d
;

1462 } 
	mgt_hódî
;

1465 
Elf32_W‹d
 
	mgt_g_vÆue
;

1466 
Elf32_W‹d
 
	mgt_byãs
;

1467 } 
	mgt_íåy
;

1468 } 
	tElf32_g±ab
;

1474 
Elf32_W‹d
 
	mri_g¥mask
;

1475 
Elf32_W‹d
 
	mri_˝rmask
[4];

1476 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1477 } 
	tElf32_RegInfo
;

1483 
	mköd
;

1485 
	msize
;

1486 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1488 
Elf32_W‹d
 
	möfo
;

1489 } 
	tElf_O±i⁄s
;

1493 
	#ODK_NULL
 0

	)

1494 
	#ODK_REGINFO
 1

	)

1495 
	#ODK_EXCEPTIONS
 2

	)

1496 
	#ODK_PAD
 3

	)

1497 
	#ODK_HWPATCH
 4

	)

1498 
	#ODK_FILL
 5

	)

1499 
	#ODK_TAGS
 6

	)

1500 
	#ODK_HWAND
 7

	)

1501 
	#ODK_HWOR
 8

	)

1505 
	#OEX_FPU_MIN
 0x1‡

	)

1506 
	#OEX_FPU_MAX
 0x1f00

	)

1507 
	#OEX_PAGE0
 0x10000

	)

1508 
	#OEX_SMM
 0x20000

	)

1509 
	#OEX_FPDBUG
 0x40000

	)

1510 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1511 
	#OEX_DISMISS
 0x80000

	)

1513 
	#OEX_FPU_INVAL
 0x10

	)

1514 
	#OEX_FPU_DIV0
 0x08

	)

1515 
	#OEX_FPU_OFLO
 0x04

	)

1516 
	#OEX_FPU_UFLO
 0x02

	)

1517 
	#OEX_FPU_INEX
 0x01

	)

1521 
	#OHW_R4KEOP
 0x1

	)

1522 
	#OHW_R8KPFETCH
 0x2

	)

1523 
	#OHW_R5KEOP
 0x4

	)

1524 
	#OHW_R5KCVTL
 0x8

	)

1526 
	#OPAD_PREFIX
 0x1

	)

1527 
	#OPAD_POSTFIX
 0x2

	)

1528 
	#OPAD_SYMBOL
 0x4

	)

1534 
Elf32_W‹d
 
	mhwp_Êags1
;

1535 
Elf32_W‹d
 
	mhwp_Êags2
;

1536 } 
	tElf_O±i⁄s_Hw
;

1540 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1541 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1545 
	#R_MIPS_NONE
 0

	)

1546 
	#R_MIPS_16
 1

	)

1547 
	#R_MIPS_32
 2

	)

1548 
	#R_MIPS_REL32
 3

	)

1549 
	#R_MIPS_26
 4

	)

1550 
	#R_MIPS_HI16
 5

	)

1551 
	#R_MIPS_LO16
 6

	)

1552 
	#R_MIPS_GPREL16
 7

	)

1553 
	#R_MIPS_LITERAL
 8

	)

1554 
	#R_MIPS_GOT16
 9

	)

1555 
	#R_MIPS_PC16
 10

	)

1556 
	#R_MIPS_CALL16
 11

	)

1557 
	#R_MIPS_GPREL32
 12

	)

1559 
	#R_MIPS_SHIFT5
 16

	)

1560 
	#R_MIPS_SHIFT6
 17

	)

1561 
	#R_MIPS_64
 18

	)

1562 
	#R_MIPS_GOT_DISP
 19

	)

1563 
	#R_MIPS_GOT_PAGE
 20

	)

1564 
	#R_MIPS_GOT_OFST
 21

	)

1565 
	#R_MIPS_GOT_HI16
 22

	)

1566 
	#R_MIPS_GOT_LO16
 23

	)

1567 
	#R_MIPS_SUB
 24

	)

1568 
	#R_MIPS_INSERT_A
 25

	)

1569 
	#R_MIPS_INSERT_B
 26

	)

1570 
	#R_MIPS_DELETE
 27

	)

1571 
	#R_MIPS_HIGHER
 28

	)

1572 
	#R_MIPS_HIGHEST
 29

	)

1573 
	#R_MIPS_CALL_HI16
 30

	)

1574 
	#R_MIPS_CALL_LO16
 31

	)

1575 
	#R_MIPS_SCN_DISP
 32

	)

1576 
	#R_MIPS_REL16
 33

	)

1577 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1578 
	#R_MIPS_PJUMP
 35

	)

1579 
	#R_MIPS_RELGOT
 36

	)

1580 
	#R_MIPS_JALR
 37

	)

1581 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1582 
	#R_MIPS_TLS_DTPREL32
 39

	)

1583 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1584 
	#R_MIPS_TLS_DTPREL64
 41

	)

1585 
	#R_MIPS_TLS_GD
 42

	)

1586 
	#R_MIPS_TLS_LDM
 43

	)

1587 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1588 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1589 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1590 
	#R_MIPS_TLS_TPREL32
 47

	)

1591 
	#R_MIPS_TLS_TPREL64
 48

	)

1592 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1593 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1594 
	#R_MIPS_GLOB_DAT
 51

	)

1595 
	#R_MIPS_COPY
 126

	)

1596 
	#R_MIPS_JUMP_SLOT
 127

	)

1598 
	#R_MIPS_NUM
 128

	)

1602 
	#PT_MIPS_REGINFO
 0x70000000

	)

1603 
	#PT_MIPS_RTPROC
 0x70000001

	)

1604 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1609 
	#PF_MIPS_LOCAL
 0x10000000

	)

1613 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1614 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1615 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1616 
	#DT_MIPS_IVERSION
 0x70000004

	)

1617 
	#DT_MIPS_FLAGS
 0x70000005

	)

1618 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1619 
	#DT_MIPS_MSYM
 0x70000007

	)

1620 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1621 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1622 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1623 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1624 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1625 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1626 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1627 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1628 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1629 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1630 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1631 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1633 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1634 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1636 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1637 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1639 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1641 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1643 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1645 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1647 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1648 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1649 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1650 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1651 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1652 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1653 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1654 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1655 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1656 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1657 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1658 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1660 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1662 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1663 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1664 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1666 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1670 
	#DT_MIPS_RWPLT
 0x70000034

	)

1674 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1675 
	#DT_MIPS_NUM
 0x36

	)

1679 
	#RHF_NONE
 0

	)

1680 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1681 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1682 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1683 
	#RHF_NO_MOVE
 (1 << 3)

	)

1684 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1685 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1686 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1687 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1688 
	#RHF_PIXIE
 (1 << 8)

	)

1689 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1690 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1691 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1692 
	#RHF_CORD
 (1 << 12)

	)

1693 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1694 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1700 
Elf32_W‹d
 
	ml_«me
;

1701 
Elf32_W‹d
 
	ml_time_°amp
;

1702 
Elf32_W‹d
 
	ml_checksum
;

1703 
Elf32_W‹d
 
	ml_vîsi⁄
;

1704 
Elf32_W‹d
 
	ml_Êags
;

1705 } 
	tElf32_Lib
;

1709 
Elf64_W‹d
 
	ml_«me
;

1710 
Elf64_W‹d
 
	ml_time_°amp
;

1711 
Elf64_W‹d
 
	ml_checksum
;

1712 
Elf64_W‹d
 
	ml_vîsi⁄
;

1713 
Elf64_W‹d
 
	ml_Êags
;

1714 } 
	tElf64_Lib
;

1719 
	#LL_NONE
 0

	)

1720 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1721 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1722 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1723 
	#LL_EXPORTS
 (1 << 3)

	)

1724 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1725 
	#LL_DELTA
 (1 << 5)

	)

1729 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1734 
Elf32_HÆf
 
	mvîsi⁄
;

1736 
	miß_Àvñ
;

1738 
	miß_ªv
;

1740 
	mg¥_size
;

1742 
	m˝r1_size
;

1744 
	m˝r2_size
;

1746 
	mÂ_abi
;

1748 
Elf32_W‹d
 
	miß_ext
;

1750 
Elf32_W‹d
 
	ma£s
;

1752 
Elf32_W‹d
 
	mÊags1
;

1753 
Elf32_W‹d
 
	mÊags2
;

1754 } 
	tElf_MIPS_ABIFœgs_v0
;

1758 
	#MIPS_AFL_REG_NONE
 0x00

	)

1759 
	#MIPS_AFL_REG_32
 0x01

	)

1760 
	#MIPS_AFL_REG_64
 0x02

	)

1761 
	#MIPS_AFL_REG_128
 0x03

	)

1765 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1766 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1767 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1768 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1769 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1770 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1771 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1772 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1773 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1774 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1775 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1776 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1777 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1778 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1782 
	#MIPS_AFL_EXT_XLR
 1

	)

1783 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1784 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1785 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1786 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1787 
	#MIPS_AFL_EXT_5900
 6

	)

1788 
	#MIPS_AFL_EXT_4650
 7

	)

1789 
	#MIPS_AFL_EXT_4010
 8

	)

1790 
	#MIPS_AFL_EXT_4100
 9

	)

1791 
	#MIPS_AFL_EXT_3900
 10

	)

1792 
	#MIPS_AFL_EXT_10000
 11

	)

1793 
	#MIPS_AFL_EXT_SB1
 12

	)

1794 
	#MIPS_AFL_EXT_4111
 13

	)

1795 
	#MIPS_AFL_EXT_4120
 14

	)

1796 
	#MIPS_AFL_EXT_5400
 15

	)

1797 
	#MIPS_AFL_EXT_5500
 16

	)

1798 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

1799 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

1802 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

1808 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

1810 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

1812 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

1814 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

1816 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

1818 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

1820 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

1822 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

1824 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

1831 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1832 
	#EF_PARISC_EXT
 0x00020000

	)

1833 
	#EF_PARISC_LSB
 0x00040000

	)

1834 
	#EF_PARISC_WIDE
 0x00080000

	)

1835 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1837 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1838 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1842 
	#EFA_PARISC_1_0
 0x020b

	)

1843 
	#EFA_PARISC_1_1
 0x0210

	)

1844 
	#EFA_PARISC_2_0
 0x0214

	)

1848 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1850 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1854 
	#SHT_PARISC_EXT
 0x70000000

	)

1855 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1856 
	#SHT_PARISC_DOC
 0x70000002

	)

1860 
	#SHF_PARISC_SHORT
 0x20000000

	)

1861 
	#SHF_PARISC_HUGE
 0x40000000

	)

1862 
	#SHF_PARISC_SBP
 0x80000000

	)

1866 
	#STT_PARISC_MILLICODE
 13

	)

1868 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1869 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1873 
	#R_PARISC_NONE
 0

	)

1874 
	#R_PARISC_DIR32
 1

	)

1875 
	#R_PARISC_DIR21L
 2

	)

1876 
	#R_PARISC_DIR17R
 3

	)

1877 
	#R_PARISC_DIR17F
 4

	)

1878 
	#R_PARISC_DIR14R
 6

	)

1879 
	#R_PARISC_PCREL32
 9

	)

1880 
	#R_PARISC_PCREL21L
 10

	)

1881 
	#R_PARISC_PCREL17R
 11

	)

1882 
	#R_PARISC_PCREL17F
 12

	)

1883 
	#R_PARISC_PCREL14R
 14

	)

1884 
	#R_PARISC_DPREL21L
 18

	)

1885 
	#R_PARISC_DPREL14R
 22

	)

1886 
	#R_PARISC_GPREL21L
 26

	)

1887 
	#R_PARISC_GPREL14R
 30

	)

1888 
	#R_PARISC_LTOFF21L
 34

	)

1889 
	#R_PARISC_LTOFF14R
 38

	)

1890 
	#R_PARISC_SECREL32
 41

	)

1891 
	#R_PARISC_SEGBASE
 48

	)

1892 
	#R_PARISC_SEGREL32
 49

	)

1893 
	#R_PARISC_PLTOFF21L
 50

	)

1894 
	#R_PARISC_PLTOFF14R
 54

	)

1895 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1896 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1897 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1898 
	#R_PARISC_FPTR64
 64

	)

1899 
	#R_PARISC_PLABEL32
 65

	)

1900 
	#R_PARISC_PLABEL21L
 66

	)

1901 
	#R_PARISC_PLABEL14R
 70

	)

1902 
	#R_PARISC_PCREL64
 72

	)

1903 
	#R_PARISC_PCREL22F
 74

	)

1904 
	#R_PARISC_PCREL14WR
 75

	)

1905 
	#R_PARISC_PCREL14DR
 76

	)

1906 
	#R_PARISC_PCREL16F
 77

	)

1907 
	#R_PARISC_PCREL16WF
 78

	)

1908 
	#R_PARISC_PCREL16DF
 79

	)

1909 
	#R_PARISC_DIR64
 80

	)

1910 
	#R_PARISC_DIR14WR
 83

	)

1911 
	#R_PARISC_DIR14DR
 84

	)

1912 
	#R_PARISC_DIR16F
 85

	)

1913 
	#R_PARISC_DIR16WF
 86

	)

1914 
	#R_PARISC_DIR16DF
 87

	)

1915 
	#R_PARISC_GPREL64
 88

	)

1916 
	#R_PARISC_GPREL14WR
 91

	)

1917 
	#R_PARISC_GPREL14DR
 92

	)

1918 
	#R_PARISC_GPREL16F
 93

	)

1919 
	#R_PARISC_GPREL16WF
 94

	)

1920 
	#R_PARISC_GPREL16DF
 95

	)

1921 
	#R_PARISC_LTOFF64
 96

	)

1922 
	#R_PARISC_LTOFF14WR
 99

	)

1923 
	#R_PARISC_LTOFF14DR
 100

	)

1924 
	#R_PARISC_LTOFF16F
 101

	)

1925 
	#R_PARISC_LTOFF16WF
 102

	)

1926 
	#R_PARISC_LTOFF16DF
 103

	)

1927 
	#R_PARISC_SECREL64
 104

	)

1928 
	#R_PARISC_SEGREL64
 112

	)

1929 
	#R_PARISC_PLTOFF14WR
 115

	)

1930 
	#R_PARISC_PLTOFF14DR
 116

	)

1931 
	#R_PARISC_PLTOFF16F
 117

	)

1932 
	#R_PARISC_PLTOFF16WF
 118

	)

1933 
	#R_PARISC_PLTOFF16DF
 119

	)

1934 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1935 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1936 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1937 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1938 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1939 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1940 
	#R_PARISC_LORESERVE
 128

	)

1941 
	#R_PARISC_COPY
 128

	)

1942 
	#R_PARISC_IPLT
 129

	)

1943 
	#R_PARISC_EPLT
 130

	)

1944 
	#R_PARISC_TPREL32
 153

	)

1945 
	#R_PARISC_TPREL21L
 154

	)

1946 
	#R_PARISC_TPREL14R
 158

	)

1947 
	#R_PARISC_LTOFF_TP21L
 162

	)

1948 
	#R_PARISC_LTOFF_TP14R
 166

	)

1949 
	#R_PARISC_LTOFF_TP14F
 167

	)

1950 
	#R_PARISC_TPREL64
 216

	)

1951 
	#R_PARISC_TPREL14WR
 219

	)

1952 
	#R_PARISC_TPREL14DR
 220

	)

1953 
	#R_PARISC_TPREL16F
 221

	)

1954 
	#R_PARISC_TPREL16WF
 222

	)

1955 
	#R_PARISC_TPREL16DF
 223

	)

1956 
	#R_PARISC_LTOFF_TP64
 224

	)

1957 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1958 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1959 
	#R_PARISC_LTOFF_TP16F
 229

	)

1960 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1961 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1962 
	#R_PARISC_GNU_VTENTRY
 232

	)

1963 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1964 
	#R_PARISC_TLS_GD21L
 234

	)

1965 
	#R_PARISC_TLS_GD14R
 235

	)

1966 
	#R_PARISC_TLS_GDCALL
 236

	)

1967 
	#R_PARISC_TLS_LDM21L
 237

	)

1968 
	#R_PARISC_TLS_LDM14R
 238

	)

1969 
	#R_PARISC_TLS_LDMCALL
 239

	)

1970 
	#R_PARISC_TLS_LDO21L
 240

	)

1971 
	#R_PARISC_TLS_LDO14R
 241

	)

1972 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1973 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1974 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1975 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1976 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1977 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1978 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1979 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1980 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1981 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1982 
	#R_PARISC_HIRESERVE
 255

	)

1986 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1987 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1988 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1989 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1990 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1991 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1992 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1993 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1994 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1995 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1996 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1997 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1998 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1999 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2000 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2002 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2003 
	#PT_PARISC_UNWIND
 0x70000001

	)

2007 
	#PF_PARISC_SBP
 0x08000000

	)

2009 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2010 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2011 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2012 
	#PF_HP_CODE
 0x01000000

	)

2013 
	#PF_HP_MODIFY
 0x02000000

	)

2014 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2015 
	#PF_HP_SBP
 0x08000000

	)

2022 
	#EF_ALPHA_32BIT
 1

	)

2023 
	#EF_ALPHA_CANRELAX
 2

	)

2028 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2029 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2033 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2036 
	#STO_ALPHA_NOPV
 0x80

	)

2037 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2041 
	#R_ALPHA_NONE
 0

	)

2042 
	#R_ALPHA_REFLONG
 1

	)

2043 
	#R_ALPHA_REFQUAD
 2

	)

2044 
	#R_ALPHA_GPREL32
 3

	)

2045 
	#R_ALPHA_LITERAL
 4

	)

2046 
	#R_ALPHA_LITUSE
 5

	)

2047 
	#R_ALPHA_GPDISP
 6

	)

2048 
	#R_ALPHA_BRADDR
 7

	)

2049 
	#R_ALPHA_HINT
 8

	)

2050 
	#R_ALPHA_SREL16
 9

	)

2051 
	#R_ALPHA_SREL32
 10

	)

2052 
	#R_ALPHA_SREL64
 11

	)

2053 
	#R_ALPHA_GPRELHIGH
 17

	)

2054 
	#R_ALPHA_GPRELLOW
 18

	)

2055 
	#R_ALPHA_GPREL16
 19

	)

2056 
	#R_ALPHA_COPY
 24

	)

2057 
	#R_ALPHA_GLOB_DAT
 25

	)

2058 
	#R_ALPHA_JMP_SLOT
 26

	)

2059 
	#R_ALPHA_RELATIVE
 27

	)

2060 
	#R_ALPHA_TLS_GD_HI
 28

	)

2061 
	#R_ALPHA_TLSGD
 29

	)

2062 
	#R_ALPHA_TLS_LDM
 30

	)

2063 
	#R_ALPHA_DTPMOD64
 31

	)

2064 
	#R_ALPHA_GOTDTPREL
 32

	)

2065 
	#R_ALPHA_DTPREL64
 33

	)

2066 
	#R_ALPHA_DTPRELHI
 34

	)

2067 
	#R_ALPHA_DTPRELLO
 35

	)

2068 
	#R_ALPHA_DTPREL16
 36

	)

2069 
	#R_ALPHA_GOTTPREL
 37

	)

2070 
	#R_ALPHA_TPREL64
 38

	)

2071 
	#R_ALPHA_TPRELHI
 39

	)

2072 
	#R_ALPHA_TPRELLO
 40

	)

2073 
	#R_ALPHA_TPREL16
 41

	)

2075 
	#R_ALPHA_NUM
 46

	)

2078 
	#LITUSE_ALPHA_ADDR
 0

	)

2079 
	#LITUSE_ALPHA_BASE
 1

	)

2080 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2081 
	#LITUSE_ALPHA_JSR
 3

	)

2082 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2083 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2086 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2087 
	#DT_ALPHA_NUM
 1

	)

2092 
	#EF_PPC_EMB
 0x80000000

	)

2095 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2096 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2100 
	#R_PPC_NONE
 0

	)

2101 
	#R_PPC_ADDR32
 1

	)

2102 
	#R_PPC_ADDR24
 2

	)

2103 
	#R_PPC_ADDR16
 3

	)

2104 
	#R_PPC_ADDR16_LO
 4

	)

2105 
	#R_PPC_ADDR16_HI
 5

	)

2106 
	#R_PPC_ADDR16_HA
 6

	)

2107 
	#R_PPC_ADDR14
 7

	)

2108 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2109 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2110 
	#R_PPC_REL24
 10

	)

2111 
	#R_PPC_REL14
 11

	)

2112 
	#R_PPC_REL14_BRTAKEN
 12

	)

2113 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2114 
	#R_PPC_GOT16
 14

	)

2115 
	#R_PPC_GOT16_LO
 15

	)

2116 
	#R_PPC_GOT16_HI
 16

	)

2117 
	#R_PPC_GOT16_HA
 17

	)

2118 
	#R_PPC_PLTREL24
 18

	)

2119 
	#R_PPC_COPY
 19

	)

2120 
	#R_PPC_GLOB_DAT
 20

	)

2121 
	#R_PPC_JMP_SLOT
 21

	)

2122 
	#R_PPC_RELATIVE
 22

	)

2123 
	#R_PPC_LOCAL24PC
 23

	)

2124 
	#R_PPC_UADDR32
 24

	)

2125 
	#R_PPC_UADDR16
 25

	)

2126 
	#R_PPC_REL32
 26

	)

2127 
	#R_PPC_PLT32
 27

	)

2128 
	#R_PPC_PLTREL32
 28

	)

2129 
	#R_PPC_PLT16_LO
 29

	)

2130 
	#R_PPC_PLT16_HI
 30

	)

2131 
	#R_PPC_PLT16_HA
 31

	)

2132 
	#R_PPC_SDAREL16
 32

	)

2133 
	#R_PPC_SECTOFF
 33

	)

2134 
	#R_PPC_SECTOFF_LO
 34

	)

2135 
	#R_PPC_SECTOFF_HI
 35

	)

2136 
	#R_PPC_SECTOFF_HA
 36

	)

2139 
	#R_PPC_TLS
 67

	)

2140 
	#R_PPC_DTPMOD32
 68

	)

2141 
	#R_PPC_TPREL16
 69

	)

2142 
	#R_PPC_TPREL16_LO
 70

	)

2143 
	#R_PPC_TPREL16_HI
 71

	)

2144 
	#R_PPC_TPREL16_HA
 72

	)

2145 
	#R_PPC_TPREL32
 73

	)

2146 
	#R_PPC_DTPREL16
 74

	)

2147 
	#R_PPC_DTPREL16_LO
 75

	)

2148 
	#R_PPC_DTPREL16_HI
 76

	)

2149 
	#R_PPC_DTPREL16_HA
 77

	)

2150 
	#R_PPC_DTPREL32
 78

	)

2151 
	#R_PPC_GOT_TLSGD16
 79

	)

2152 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2153 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2154 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2155 
	#R_PPC_GOT_TLSLD16
 83

	)

2156 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2157 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2158 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2159 
	#R_PPC_GOT_TPREL16
 87

	)

2160 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2161 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2162 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2163 
	#R_PPC_GOT_DTPREL16
 91

	)

2164 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2165 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2166 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2167 
	#R_PPC_TLSGD
 95

	)

2168 
	#R_PPC_TLSLD
 96

	)

2172 
	#R_PPC_EMB_NADDR32
 101

	)

2173 
	#R_PPC_EMB_NADDR16
 102

	)

2174 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2175 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2176 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2177 
	#R_PPC_EMB_SDAI16
 106

	)

2178 
	#R_PPC_EMB_SDA2I16
 107

	)

2179 
	#R_PPC_EMB_SDA2REL
 108

	)

2180 
	#R_PPC_EMB_SDA21
 109

	)

2181 
	#R_PPC_EMB_MRKREF
 110

	)

2182 
	#R_PPC_EMB_RELSEC16
 111

	)

2183 
	#R_PPC_EMB_RELST_LO
 112

	)

2184 
	#R_PPC_EMB_RELST_HI
 113

	)

2185 
	#R_PPC_EMB_RELST_HA
 114

	)

2186 
	#R_PPC_EMB_BIT_FLD
 115

	)

2187 
	#R_PPC_EMB_RELSDA
 116

	)

2190 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2191 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2192 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2193 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2194 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2195 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2198 
	#R_PPC_IRELATIVE
 248

	)

2201 
	#R_PPC_REL16
 249

	)

2202 
	#R_PPC_REL16_LO
 250

	)

2203 
	#R_PPC_REL16_HI
 251

	)

2204 
	#R_PPC_REL16_HA
 252

	)

2208 
	#R_PPC_TOC16
 255

	)

2211 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2212 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2213 
	#DT_PPC_NUM
 2

	)

2216 
	#PPC_OPT_TLS
 1

	)

2219 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2220 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2221 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2222 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2223 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2224 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2225 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2226 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2227 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2228 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2229 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2230 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2231 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2232 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2233 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2234 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2235 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2236 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2238 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2239 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2240 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2241 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2243 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2244 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2245 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2246 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2247 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2248 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2249 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2250 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2252 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2253 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2254 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2255 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2256 
	#R_PPC64_ADDR30
 37

	)

2257 
	#R_PPC64_ADDR64
 38

	)

2258 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2259 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2260 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2261 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2262 
	#R_PPC64_UADDR64
 43

	)

2263 
	#R_PPC64_REL64
 44

	)

2264 
	#R_PPC64_PLT64
 45

	)

2265 
	#R_PPC64_PLTREL64
 46

	)

2266 
	#R_PPC64_TOC16
 47

	)

2267 
	#R_PPC64_TOC16_LO
 48

	)

2268 
	#R_PPC64_TOC16_HI
 49

	)

2269 
	#R_PPC64_TOC16_HA
 50

	)

2270 
	#R_PPC64_TOC
 51

	)

2271 
	#R_PPC64_PLTGOT16
 52

	)

2272 
	#R_PPC64_PLTGOT16_LO
 53

	)

2273 
	#R_PPC64_PLTGOT16_HI
 54

	)

2274 
	#R_PPC64_PLTGOT16_HA
 55

	)

2276 
	#R_PPC64_ADDR16_DS
 56

	)

2277 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2278 
	#R_PPC64_GOT16_DS
 58

	)

2279 
	#R_PPC64_GOT16_LO_DS
 59

	)

2280 
	#R_PPC64_PLT16_LO_DS
 60

	)

2281 
	#R_PPC64_SECTOFF_DS
 61

	)

2282 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2283 
	#R_PPC64_TOC16_DS
 63

	)

2284 
	#R_PPC64_TOC16_LO_DS
 64

	)

2285 
	#R_PPC64_PLTGOT16_DS
 65

	)

2286 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2289 
	#R_PPC64_TLS
 67

	)

2290 
	#R_PPC64_DTPMOD64
 68

	)

2291 
	#R_PPC64_TPREL16
 69

	)

2292 
	#R_PPC64_TPREL16_LO
 70

	)

2293 
	#R_PPC64_TPREL16_HI
 71

	)

2294 
	#R_PPC64_TPREL16_HA
 72

	)

2295 
	#R_PPC64_TPREL64
 73

	)

2296 
	#R_PPC64_DTPREL16
 74

	)

2297 
	#R_PPC64_DTPREL16_LO
 75

	)

2298 
	#R_PPC64_DTPREL16_HI
 76

	)

2299 
	#R_PPC64_DTPREL16_HA
 77

	)

2300 
	#R_PPC64_DTPREL64
 78

	)

2301 
	#R_PPC64_GOT_TLSGD16
 79

	)

2302 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2303 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2304 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2305 
	#R_PPC64_GOT_TLSLD16
 83

	)

2306 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2307 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2308 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2309 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2310 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2311 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2312 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2313 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2314 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2315 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2316 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2317 
	#R_PPC64_TPREL16_DS
 95

	)

2318 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2319 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2320 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2321 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2322 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2323 
	#R_PPC64_DTPREL16_DS
 101

	)

2324 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2325 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2326 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2327 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2328 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2329 
	#R_PPC64_TLSGD
 107

	)

2330 
	#R_PPC64_TLSLD
 108

	)

2331 
	#R_PPC64_TOCSAVE
 109

	)

2334 
	#R_PPC64_ADDR16_HIGH
 110

	)

2335 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2336 
	#R_PPC64_TPREL16_HIGH
 112

	)

2337 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2338 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2339 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2342 
	#R_PPC64_JMP_IREL
 247

	)

2343 
	#R_PPC64_IRELATIVE
 248

	)

2344 
	#R_PPC64_REL16
 249

	)

2345 
	#R_PPC64_REL16_LO
 250

	)

2346 
	#R_PPC64_REL16_HI
 251

	)

2347 
	#R_PPC64_REL16_HA
 252

	)

2353 
	#EF_PPC64_ABI
 3

	)

2356 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2357 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2358 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2359 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2360 
	#DT_PPC64_NUM
 4

	)

2363 
	#PPC64_OPT_TLS
 1

	)

2364 
	#PPC64_OPT_MULTI_TOC
 2

	)

2367 
	#STO_PPC64_LOCAL_BIT
 5

	)

2368 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2369 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2370 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2376 
	#EF_ARM_RELEXEC
 0x01

	)

2377 
	#EF_ARM_HASENTRY
 0x02

	)

2378 
	#EF_ARM_INTERWORK
 0x04

	)

2379 
	#EF_ARM_APCS_26
 0x08

	)

2380 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2381 
	#EF_ARM_PIC
 0x20

	)

2382 
	#EF_ARM_ALIGN8
 0x40

	)

2383 
	#EF_ARM_NEW_ABI
 0x80

	)

2384 
	#EF_ARM_OLD_ABI
 0x100

	)

2385 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2386 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2387 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2389 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2390 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2395 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2396 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2397 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2398 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2401 
	#EF_ARM_BE8
 0x00800000

	)

2402 
	#EF_ARM_LE8
 0x00400000

	)

2404 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2405 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2406 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2407 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2408 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2409 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2410 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2413 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2414 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2417 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2418 
	#SHF_ARM_COMDEF
 0x80000000

	)

2422 
	#PF_ARM_SB
 0x10000000

	)

2424 
	#PF_ARM_PI
 0x20000000

	)

2425 
	#PF_ARM_ABS
 0x40000000

	)

2428 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2431 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2432 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2433 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2438 
	#R_AARCH64_NONE
 0

	)

2441 
	#R_AARCH64_P32_ABS32
 1

	)

2442 
	#R_AARCH64_P32_COPY
 180

	)

2443 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2444 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2445 
	#R_AARCH64_P32_RELATIVE
 183

	)

2446 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2447 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2448 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2449 
	#R_AARCH64_P32_TLSDESC
 187

	)

2450 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2453 
	#R_AARCH64_ABS64
 257

	)

2454 
	#R_AARCH64_ABS32
 258

	)

2455 
	#R_AARCH64_ABS16
 259

	)

2456 
	#R_AARCH64_PREL64
 260

	)

2457 
	#R_AARCH64_PREL32
 261

	)

2458 
	#R_AARCH64_PREL16
 262

	)

2459 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2460 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2461 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2462 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2463 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2464 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2465 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2466 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2467 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2468 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2469 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2470 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2471 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2472 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2473 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2474 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2475 
	#R_AARCH64_TSTBR14
 279

	)

2476 
	#R_AARCH64_CONDBR19
 280

	)

2477 
	#R_AARCH64_JUMP26
 282

	)

2478 
	#R_AARCH64_CALL26
 283

	)

2479 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2480 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2481 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2482 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2483 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2484 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2485 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2486 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2487 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2488 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2489 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2490 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2491 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2492 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2493 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2494 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2495 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2496 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2497 
	#R_AARCH64_GOTREL64
 307

	)

2498 
	#R_AARCH64_GOTREL32
 308

	)

2499 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2500 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2501 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2502 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2503 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2504 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2505 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2506 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2507 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2508 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2509 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2510 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2511 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2512 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2513 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2514 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2515 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2516 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2517 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2518 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2519 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2520 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2521 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2522 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2523 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2524 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2525 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2526 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2527 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2528 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2529 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2530 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2531 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2532 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2533 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2534 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2535 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2536 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2537 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2538 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2539 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2540 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2541 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2542 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2543 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2544 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2545 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2546 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2547 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2548 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2549 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2550 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2551 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2552 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2553 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2554 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2555 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2556 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2557 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2558 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2559 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2560 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2561 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2562 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2563 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2564 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2565 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2566 
	#R_AARCH64_COPY
 1024

	)

2567 
	#R_AARCH64_GLOB_DAT
 1025

	)

2568 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2569 
	#R_AARCH64_RELATIVE
 1027

	)

2570 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2571 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2572 
	#R_AARCH64_TLS_TPREL
 1030

	)

2573 
	#R_AARCH64_TLSDESC
 1031

	)

2574 
	#R_AARCH64_IRELATIVE
 1032

	)

2578 
	#R_ARM_NONE
 0

	)

2579 
	#R_ARM_PC24
 1

	)

2581 
	#R_ARM_ABS32
 2

	)

2582 
	#R_ARM_REL32
 3

	)

2583 
	#R_ARM_PC13
 4

	)

2584 
	#R_ARM_ABS16
 5

	)

2585 
	#R_ARM_ABS12
 6

	)

2586 
	#R_ARM_THM_ABS5
 7

	)

2587 
	#R_ARM_ABS8
 8

	)

2588 
	#R_ARM_SBREL32
 9

	)

2589 
	#R_ARM_THM_PC22
 10

	)

2590 
	#R_ARM_THM_PC8
 11

	)

2592 
	#R_ARM_AMP_VCALL9
 12

	)

2593 
	#R_ARM_SWI24
 13

	)

2594 
	#R_ARM_TLS_DESC
 13

	)

2595 
	#R_ARM_THM_SWI8
 14

	)

2596 
	#R_ARM_XPC25
 15

	)

2597 
	#R_ARM_THM_XPC22
 16

	)

2598 
	#R_ARM_TLS_DTPMOD32
 17

	)

2599 
	#R_ARM_TLS_DTPOFF32
 18

	)

2600 
	#R_ARM_TLS_TPOFF32
 19

	)

2601 
	#R_ARM_COPY
 20

	)

2602 
	#R_ARM_GLOB_DAT
 21

	)

2603 
	#R_ARM_JUMP_SLOT
 22

	)

2604 
	#R_ARM_RELATIVE
 23

	)

2605 
	#R_ARM_GOTOFF
 24

	)

2606 
	#R_ARM_GOTPC
 25

	)

2607 
	#R_ARM_GOT32
 26

	)

2608 
	#R_ARM_PLT32
 27

	)

2609 
	#R_ARM_CALL
 28

	)

2610 
	#R_ARM_JUMP24
 29

	)

2612 
	#R_ARM_THM_JUMP24
 30

	)

2613 
	#R_ARM_BASE_ABS
 31

	)

2614 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2615 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2616 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2617 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2618 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2619 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2620 
	#R_ARM_TARGET1
 38

	)

2621 
	#R_ARM_SBREL31
 39

	)

2622 
	#R_ARM_V4BX
 40

	)

2623 
	#R_ARM_TARGET2
 41

	)

2624 
	#R_ARM_PREL31
 42

	)

2625 
	#R_ARM_MOVW_ABS_NC
 43

	)

2626 
	#R_ARM_MOVT_ABS
 44

	)

2627 
	#R_ARM_MOVW_PREL_NC
 45

	)

2628 
	#R_ARM_MOVT_PREL
 46

	)

2629 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2630 
	#R_ARM_THM_MOVT_ABS
 48

	)

2632 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2634 
	#R_ARM_THM_MOVT_PREL
 50

	)

2636 
	#R_ARM_THM_JUMP19
 51

	)

2638 
	#R_ARM_THM_JUMP6
 52

	)

2640 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2642 
	#R_ARM_THM_PC12
 54

	)

2644 
	#R_ARM_ABS32_NOI
 55

	)

2645 
	#R_ARM_REL32_NOI
 56

	)

2646 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2647 
	#R_ARM_ALU_PC_G0
 58

	)

2648 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2649 
	#R_ARM_ALU_PC_G1
 60

	)

2650 
	#R_ARM_ALU_PC_G2
 61

	)

2651 
	#R_ARM_LDR_PC_G1
 62

	)

2652 
	#R_ARM_LDR_PC_G2
 63

	)

2653 
	#R_ARM_LDRS_PC_G0
 64

	)

2655 
	#R_ARM_LDRS_PC_G1
 65

	)

2657 
	#R_ARM_LDRS_PC_G2
 66

	)

2659 
	#R_ARM_LDC_PC_G0
 67

	)

2660 
	#R_ARM_LDC_PC_G1
 68

	)

2661 
	#R_ARM_LDC_PC_G2
 69

	)

2662 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2663 
	#R_ARM_ALU_SB_G0
 71

	)

2664 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2665 
	#R_ARM_ALU_SB_G1
 73

	)

2666 
	#R_ARM_ALU_SB_G2
 74

	)

2667 
	#R_ARM_LDR_SB_G0
 75

	)

2669 
	#R_ARM_LDR_SB_G1
 76

	)

2671 
	#R_ARM_LDR_SB_G2
 77

	)

2673 
	#R_ARM_LDRS_SB_G0
 78

	)

2675 
	#R_ARM_LDRS_SB_G1
 79

	)

2677 
	#R_ARM_LDRS_SB_G2
 80

	)

2679 
	#R_ARM_LDC_SB_G0
 81

	)

2680 
	#R_ARM_LDC_SB_G1
 82

	)

2681 
	#R_ARM_LDC_SB_G2
 83

	)

2682 
	#R_ARM_MOVW_BREL_NC
 84

	)

2684 
	#R_ARM_MOVT_BREL
 85

	)

2686 
	#R_ARM_MOVW_BREL
 86

	)

2688 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2690 
	#R_ARM_THM_MOVT_BREL
 88

	)

2692 
	#R_ARM_THM_MOVW_BREL
 89

	)

2694 
	#R_ARM_TLS_GOTDESC
 90

	)

2695 
	#R_ARM_TLS_CALL
 91

	)

2696 
	#R_ARM_TLS_DESCSEQ
 92

	)

2697 
	#R_ARM_THM_TLS_CALL
 93

	)

2698 
	#R_ARM_PLT32_ABS
 94

	)

2699 
	#R_ARM_GOT_ABS
 95

	)

2700 
	#R_ARM_GOT_PREL
 96

	)

2701 
	#R_ARM_GOT_BREL12
 97

	)

2703 
	#R_ARM_GOTOFF12
 98

	)

2705 
	#R_ARM_GOTRELAX
 99

	)

2706 
	#R_ARM_GNU_VTENTRY
 100

	)

2707 
	#R_ARM_GNU_VTINHERIT
 101

	)

2708 
	#R_ARM_THM_PC11
 102

	)

2709 
	#R_ARM_THM_PC9
 103

	)

2711 
	#R_ARM_TLS_GD32
 104

	)

2713 
	#R_ARM_TLS_LDM32
 105

	)

2715 
	#R_ARM_TLS_LDO32
 106

	)

2717 
	#R_ARM_TLS_IE32
 107

	)

2719 
	#R_ARM_TLS_LE32
 108

	)

2721 
	#R_ARM_TLS_LDO12
 109

	)

2723 
	#R_ARM_TLS_LE12
 110

	)

2725 
	#R_ARM_TLS_IE12GP
 111

	)

2727 
	#R_ARM_ME_TOO
 128

	)

2728 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2729 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2730 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2731 
	#R_ARM_THM_GOT_BREL12
 131

	)

2733 
	#R_ARM_IRELATIVE
 160

	)

2734 
	#R_ARM_RXPC25
 249

	)

2735 
	#R_ARM_RSBREL32
 250

	)

2736 
	#R_ARM_THM_RPC22
 251

	)

2737 
	#R_ARM_RREL32
 252

	)

2738 
	#R_ARM_RABS22
 253

	)

2739 
	#R_ARM_RPC24
 254

	)

2740 
	#R_ARM_RBASE
 255

	)

2742 
	#R_ARM_NUM
 256

	)

2747 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2748 
	#EF_IA_64_ABI64
 0x00000010

	)

2749 
	#EF_IA_64_ARCH
 0xff000000

	)

2752 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2753 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2754 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2755 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2756 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2759 
	#PF_IA_64_NORECOV
 0x80000000

	)

2762 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2763 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2766 
	#SHF_IA_64_SHORT
 0x10000000

	)

2767 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2770 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2771 
	#DT_IA_64_NUM
 1

	)

2774 
	#R_IA64_NONE
 0x00

	)

2775 
	#R_IA64_IMM14
 0x21

	)

2776 
	#R_IA64_IMM22
 0x22

	)

2777 
	#R_IA64_IMM64
 0x23

	)

2778 
	#R_IA64_DIR32MSB
 0x24

	)

2779 
	#R_IA64_DIR32LSB
 0x25

	)

2780 
	#R_IA64_DIR64MSB
 0x26

	)

2781 
	#R_IA64_DIR64LSB
 0x27

	)

2782 
	#R_IA64_GPREL22
 0x2®

	)

2783 
	#R_IA64_GPREL64I
 0x2b

	)

2784 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2785 
	#R_IA64_GPREL32LSB
 0x2d

	)

2786 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2787 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2788 
	#R_IA64_LTOFF22
 0x32

	)

2789 
	#R_IA64_LTOFF64I
 0x33

	)

2790 
	#R_IA64_PLTOFF22
 0x3®

	)

2791 
	#R_IA64_PLTOFF64I
 0x3b

	)

2792 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2793 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2794 
	#R_IA64_FPTR64I
 0x43

	)

2795 
	#R_IA64_FPTR32MSB
 0x44

	)

2796 
	#R_IA64_FPTR32LSB
 0x45

	)

2797 
	#R_IA64_FPTR64MSB
 0x46

	)

2798 
	#R_IA64_FPTR64LSB
 0x47

	)

2799 
	#R_IA64_PCREL60B
 0x48

	)

2800 
	#R_IA64_PCREL21B
 0x49

	)

2801 
	#R_IA64_PCREL21M
 0x4®

	)

2802 
	#R_IA64_PCREL21F
 0x4b

	)

2803 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2804 
	#R_IA64_PCREL32LSB
 0x4d

	)

2805 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2806 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2807 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2808 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2809 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2810 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2811 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2812 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2813 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2814 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2815 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2816 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2817 
	#R_IA64_SECREL32MSB
 0x64

	)

2818 
	#R_IA64_SECREL32LSB
 0x65

	)

2819 
	#R_IA64_SECREL64MSB
 0x66

	)

2820 
	#R_IA64_SECREL64LSB
 0x67

	)

2821 
	#R_IA64_REL32MSB
 0x6¯

	)

2822 
	#R_IA64_REL32LSB
 0x6d

	)

2823 
	#R_IA64_REL64MSB
 0x6ê

	)

2824 
	#R_IA64_REL64LSB
 0x6‡

	)

2825 
	#R_IA64_LTV32MSB
 0x74

	)

2826 
	#R_IA64_LTV32LSB
 0x75

	)

2827 
	#R_IA64_LTV64MSB
 0x76

	)

2828 
	#R_IA64_LTV64LSB
 0x77

	)

2829 
	#R_IA64_PCREL21BI
 0x79

	)

2830 
	#R_IA64_PCREL22
 0x7®

	)

2831 
	#R_IA64_PCREL64I
 0x7b

	)

2832 
	#R_IA64_IPLTMSB
 0x80

	)

2833 
	#R_IA64_IPLTLSB
 0x81

	)

2834 
	#R_IA64_COPY
 0x84

	)

2835 
	#R_IA64_SUB
 0x85

	)

2836 
	#R_IA64_LTOFF22X
 0x86

	)

2837 
	#R_IA64_LDXMOV
 0x87

	)

2838 
	#R_IA64_TPREL14
 0x91

	)

2839 
	#R_IA64_TPREL22
 0x92

	)

2840 
	#R_IA64_TPREL64I
 0x93

	)

2841 
	#R_IA64_TPREL64MSB
 0x96

	)

2842 
	#R_IA64_TPREL64LSB
 0x97

	)

2843 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2844 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2845 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2846 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2847 
	#R_IA64_DTPREL14
 0xb1

	)

2848 
	#R_IA64_DTPREL22
 0xb2

	)

2849 
	#R_IA64_DTPREL64I
 0xb3

	)

2850 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2851 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2852 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2853 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2854 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2859 
	#EF_SH_MACH_MASK
 0x1f

	)

2860 
	#EF_SH_UNKNOWN
 0x0

	)

2861 
	#EF_SH1
 0x1

	)

2862 
	#EF_SH2
 0x2

	)

2863 
	#EF_SH3
 0x3

	)

2864 
	#EF_SH_DSP
 0x4

	)

2865 
	#EF_SH3_DSP
 0x5

	)

2866 
	#EF_SH4AL_DSP
 0x6

	)

2867 
	#EF_SH3E
 0x8

	)

2868 
	#EF_SH4
 0x9

	)

2869 
	#EF_SH2E
 0xb

	)

2870 
	#EF_SH4A
 0xc

	)

2871 
	#EF_SH2A
 0xd

	)

2872 
	#EF_SH4_NOFPU
 0x10

	)

2873 
	#EF_SH4A_NOFPU
 0x11

	)

2874 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2875 
	#EF_SH2A_NOFPU
 0x13

	)

2876 
	#EF_SH3_NOMMU
 0x14

	)

2877 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2878 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2879 
	#EF_SH2A_SH4
 0x17

	)

2880 
	#EF_SH2A_SH3E
 0x18

	)

2883 
	#R_SH_NONE
 0

	)

2884 
	#R_SH_DIR32
 1

	)

2885 
	#R_SH_REL32
 2

	)

2886 
	#R_SH_DIR8WPN
 3

	)

2887 
	#R_SH_IND12W
 4

	)

2888 
	#R_SH_DIR8WPL
 5

	)

2889 
	#R_SH_DIR8WPZ
 6

	)

2890 
	#R_SH_DIR8BP
 7

	)

2891 
	#R_SH_DIR8W
 8

	)

2892 
	#R_SH_DIR8L
 9

	)

2893 
	#R_SH_SWITCH16
 25

	)

2894 
	#R_SH_SWITCH32
 26

	)

2895 
	#R_SH_USES
 27

	)

2896 
	#R_SH_COUNT
 28

	)

2897 
	#R_SH_ALIGN
 29

	)

2898 
	#R_SH_CODE
 30

	)

2899 
	#R_SH_DATA
 31

	)

2900 
	#R_SH_LABEL
 32

	)

2901 
	#R_SH_SWITCH8
 33

	)

2902 
	#R_SH_GNU_VTINHERIT
 34

	)

2903 
	#R_SH_GNU_VTENTRY
 35

	)

2904 
	#R_SH_TLS_GD_32
 144

	)

2905 
	#R_SH_TLS_LD_32
 145

	)

2906 
	#R_SH_TLS_LDO_32
 146

	)

2907 
	#R_SH_TLS_IE_32
 147

	)

2908 
	#R_SH_TLS_LE_32
 148

	)

2909 
	#R_SH_TLS_DTPMOD32
 149

	)

2910 
	#R_SH_TLS_DTPOFF32
 150

	)

2911 
	#R_SH_TLS_TPOFF32
 151

	)

2912 
	#R_SH_GOT32
 160

	)

2913 
	#R_SH_PLT32
 161

	)

2914 
	#R_SH_COPY
 162

	)

2915 
	#R_SH_GLOB_DAT
 163

	)

2916 
	#R_SH_JMP_SLOT
 164

	)

2917 
	#R_SH_RELATIVE
 165

	)

2918 
	#R_SH_GOTOFF
 166

	)

2919 
	#R_SH_GOTPC
 167

	)

2921 
	#R_SH_NUM
 256

	)

2927 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2931 
	#R_390_NONE
 0

	)

2932 
	#R_390_8
 1

	)

2933 
	#R_390_12
 2

	)

2934 
	#R_390_16
 3

	)

2935 
	#R_390_32
 4

	)

2936 
	#R_390_PC32
 5

	)

2937 
	#R_390_GOT12
 6

	)

2938 
	#R_390_GOT32
 7

	)

2939 
	#R_390_PLT32
 8

	)

2940 
	#R_390_COPY
 9

	)

2941 
	#R_390_GLOB_DAT
 10

	)

2942 
	#R_390_JMP_SLOT
 11

	)

2943 
	#R_390_RELATIVE
 12

	)

2944 
	#R_390_GOTOFF32
 13

	)

2945 
	#R_390_GOTPC
 14

	)

2946 
	#R_390_GOT16
 15

	)

2947 
	#R_390_PC16
 16

	)

2948 
	#R_390_PC16DBL
 17

	)

2949 
	#R_390_PLT16DBL
 18

	)

2950 
	#R_390_PC32DBL
 19

	)

2951 
	#R_390_PLT32DBL
 20

	)

2952 
	#R_390_GOTPCDBL
 21

	)

2953 
	#R_390_64
 22

	)

2954 
	#R_390_PC64
 23

	)

2955 
	#R_390_GOT64
 24

	)

2956 
	#R_390_PLT64
 25

	)

2957 
	#R_390_GOTENT
 26

	)

2958 
	#R_390_GOTOFF16
 27

	)

2959 
	#R_390_GOTOFF64
 28

	)

2960 
	#R_390_GOTPLT12
 29

	)

2961 
	#R_390_GOTPLT16
 30

	)

2962 
	#R_390_GOTPLT32
 31

	)

2963 
	#R_390_GOTPLT64
 32

	)

2964 
	#R_390_GOTPLTENT
 33

	)

2965 
	#R_390_PLTOFF16
 34

	)

2966 
	#R_390_PLTOFF32
 35

	)

2967 
	#R_390_PLTOFF64
 36

	)

2968 
	#R_390_TLS_LOAD
 37

	)

2969 
	#R_390_TLS_GDCALL
 38

	)

2971 
	#R_390_TLS_LDCALL
 39

	)

2973 
	#R_390_TLS_GD32
 40

	)

2975 
	#R_390_TLS_GD64
 41

	)

2977 
	#R_390_TLS_GOTIE12
 42

	)

2979 
	#R_390_TLS_GOTIE32
 43

	)

2981 
	#R_390_TLS_GOTIE64
 44

	)

2983 
	#R_390_TLS_LDM32
 45

	)

2985 
	#R_390_TLS_LDM64
 46

	)

2987 
	#R_390_TLS_IE32
 47

	)

2989 
	#R_390_TLS_IE64
 48

	)

2991 
	#R_390_TLS_IEENT
 49

	)

2993 
	#R_390_TLS_LE32
 50

	)

2995 
	#R_390_TLS_LE64
 51

	)

2997 
	#R_390_TLS_LDO32
 52

	)

2999 
	#R_390_TLS_LDO64
 53

	)

3001 
	#R_390_TLS_DTPMOD
 54

	)

3002 
	#R_390_TLS_DTPOFF
 55

	)

3003 
	#R_390_TLS_TPOFF
 56

	)

3005 
	#R_390_20
 57

	)

3006 
	#R_390_GOT20
 58

	)

3007 
	#R_390_GOTPLT20
 59

	)

3008 
	#R_390_TLS_GOTIE20
 60

	)

3010 
	#R_390_IRELATIVE
 61

	)

3012 
	#R_390_NUM
 62

	)

3016 
	#R_CRIS_NONE
 0

	)

3017 
	#R_CRIS_8
 1

	)

3018 
	#R_CRIS_16
 2

	)

3019 
	#R_CRIS_32
 3

	)

3020 
	#R_CRIS_8_PCREL
 4

	)

3021 
	#R_CRIS_16_PCREL
 5

	)

3022 
	#R_CRIS_32_PCREL
 6

	)

3023 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3024 
	#R_CRIS_GNU_VTENTRY
 8

	)

3025 
	#R_CRIS_COPY
 9

	)

3026 
	#R_CRIS_GLOB_DAT
 10

	)

3027 
	#R_CRIS_JUMP_SLOT
 11

	)

3028 
	#R_CRIS_RELATIVE
 12

	)

3029 
	#R_CRIS_16_GOT
 13

	)

3030 
	#R_CRIS_32_GOT
 14

	)

3031 
	#R_CRIS_16_GOTPLT
 15

	)

3032 
	#R_CRIS_32_GOTPLT
 16

	)

3033 
	#R_CRIS_32_GOTREL
 17

	)

3034 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3035 
	#R_CRIS_32_PLT_PCREL
 19

	)

3037 
	#R_CRIS_NUM
 20

	)

3041 
	#R_X86_64_NONE
 0

	)

3042 
	#R_X86_64_64
 1

	)

3043 
	#R_X86_64_PC32
 2

	)

3044 
	#R_X86_64_GOT32
 3

	)

3045 
	#R_X86_64_PLT32
 4

	)

3046 
	#R_X86_64_COPY
 5

	)

3047 
	#R_X86_64_GLOB_DAT
 6

	)

3048 
	#R_X86_64_JUMP_SLOT
 7

	)

3049 
	#R_X86_64_RELATIVE
 8

	)

3050 
	#R_X86_64_GOTPCREL
 9

	)

3052 
	#R_X86_64_32
 10

	)

3053 
	#R_X86_64_32S
 11

	)

3054 
	#R_X86_64_16
 12

	)

3055 
	#R_X86_64_PC16
 13

	)

3056 
	#R_X86_64_8
 14

	)

3057 
	#R_X86_64_PC8
 15

	)

3058 
	#R_X86_64_DTPMOD64
 16

	)

3059 
	#R_X86_64_DTPOFF64
 17

	)

3060 
	#R_X86_64_TPOFF64
 18

	)

3061 
	#R_X86_64_TLSGD
 19

	)

3063 
	#R_X86_64_TLSLD
 20

	)

3065 
	#R_X86_64_DTPOFF32
 21

	)

3066 
	#R_X86_64_GOTTPOFF
 22

	)

3068 
	#R_X86_64_TPOFF32
 23

	)

3069 
	#R_X86_64_PC64
 24

	)

3070 
	#R_X86_64_GOTOFF64
 25

	)

3071 
	#R_X86_64_GOTPC32
 26

	)

3073 
	#R_X86_64_GOT64
 27

	)

3074 
	#R_X86_64_GOTPCREL64
 28

	)

3076 
	#R_X86_64_GOTPC64
 29

	)

3077 
	#R_X86_64_GOTPLT64
 30

	)

3078 
	#R_X86_64_PLTOFF64
 31

	)

3080 
	#R_X86_64_SIZE32
 32

	)

3081 
	#R_X86_64_SIZE64
 33

	)

3082 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3083 
	#R_X86_64_TLSDESC_CALL
 35

	)

3085 
	#R_X86_64_TLSDESC
 36

	)

3086 
	#R_X86_64_IRELATIVE
 37

	)

3087 
	#R_X86_64_RELATIVE64
 38

	)

3089 
	#R_X86_64_NUM
 39

	)

3093 
	#R_MN10300_NONE
 0

	)

3094 
	#R_MN10300_32
 1

	)

3095 
	#R_MN10300_16
 2

	)

3096 
	#R_MN10300_8
 3

	)

3097 
	#R_MN10300_PCREL32
 4

	)

3098 
	#R_MN10300_PCREL16
 5

	)

3099 
	#R_MN10300_PCREL8
 6

	)

3100 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3101 
	#R_MN10300_GNU_VTENTRY
 8

	)

3102 
	#R_MN10300_24
 9

	)

3103 
	#R_MN10300_GOTPC32
 10

	)

3104 
	#R_MN10300_GOTPC16
 11

	)

3105 
	#R_MN10300_GOTOFF32
 12

	)

3106 
	#R_MN10300_GOTOFF24
 13

	)

3107 
	#R_MN10300_GOTOFF16
 14

	)

3108 
	#R_MN10300_PLT32
 15

	)

3109 
	#R_MN10300_PLT16
 16

	)

3110 
	#R_MN10300_GOT32
 17

	)

3111 
	#R_MN10300_GOT24
 18

	)

3112 
	#R_MN10300_GOT16
 19

	)

3113 
	#R_MN10300_COPY
 20

	)

3114 
	#R_MN10300_GLOB_DAT
 21

	)

3115 
	#R_MN10300_JMP_SLOT
 22

	)

3116 
	#R_MN10300_RELATIVE
 23

	)

3117 
	#R_MN10300_TLS_GD
 24

	)

3118 
	#R_MN10300_TLS_LD
 25

	)

3119 
	#R_MN10300_TLS_LDO
 26

	)

3120 
	#R_MN10300_TLS_GOTIE
 27

	)

3122 
	#R_MN10300_TLS_IE
 28

	)

3124 
	#R_MN10300_TLS_LE
 29

	)

3126 
	#R_MN10300_TLS_DTPMOD
 30

	)

3127 
	#R_MN10300_TLS_DTPOFF
 31

	)

3128 
	#R_MN10300_TLS_TPOFF
 32

	)

3129 
	#R_MN10300_SYM_DIFF
 33

	)

3131 
	#R_MN10300_ALIGN
 34

	)

3133 
	#R_MN10300_NUM
 35

	)

3137 
	#R_M32R_NONE
 0

	)

3138 
	#R_M32R_16
 1

	)

3139 
	#R_M32R_32
 2

	)

3140 
	#R_M32R_24
 3

	)

3141 
	#R_M32R_10_PCREL
 4

	)

3142 
	#R_M32R_18_PCREL
 5

	)

3143 
	#R_M32R_26_PCREL
 6

	)

3144 
	#R_M32R_HI16_ULO
 7

	)

3145 
	#R_M32R_HI16_SLO
 8

	)

3146 
	#R_M32R_LO16
 9

	)

3147 
	#R_M32R_SDA16
 10

	)

3148 
	#R_M32R_GNU_VTINHERIT
 11

	)

3149 
	#R_M32R_GNU_VTENTRY
 12

	)

3151 
	#R_M32R_16_RELA
 33

	)

3152 
	#R_M32R_32_RELA
 34

	)

3153 
	#R_M32R_24_RELA
 35

	)

3154 
	#R_M32R_10_PCREL_RELA
 36

	)

3155 
	#R_M32R_18_PCREL_RELA
 37

	)

3156 
	#R_M32R_26_PCREL_RELA
 38

	)

3157 
	#R_M32R_HI16_ULO_RELA
 39

	)

3158 
	#R_M32R_HI16_SLO_RELA
 40

	)

3159 
	#R_M32R_LO16_RELA
 41

	)

3160 
	#R_M32R_SDA16_RELA
 42

	)

3161 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3162 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3163 
	#R_M32R_REL32
 45

	)

3165 
	#R_M32R_GOT24
 48

	)

3166 
	#R_M32R_26_PLTREL
 49

	)

3167 
	#R_M32R_COPY
 50

	)

3168 
	#R_M32R_GLOB_DAT
 51

	)

3169 
	#R_M32R_JMP_SLOT
 52

	)

3170 
	#R_M32R_RELATIVE
 53

	)

3171 
	#R_M32R_GOTOFF
 54

	)

3172 
	#R_M32R_GOTPC24
 55

	)

3173 
	#R_M32R_GOT16_HI_ULO
 56

	)

3175 
	#R_M32R_GOT16_HI_SLO
 57

	)

3177 
	#R_M32R_GOT16_LO
 58

	)

3178 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3180 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3182 
	#R_M32R_GOTPC_LO
 61

	)

3184 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3186 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3188 
	#R_M32R_GOTOFF_LO
 64

	)

3189 
	#R_M32R_NUM
 256

	)

3192 
	#R_MICROBLAZE_NONE
 0

	)

3193 
	#R_MICROBLAZE_32
 1

	)

3194 
	#R_MICROBLAZE_32_PCREL
 2

	)

3195 
	#R_MICROBLAZE_64_PCREL
 3

	)

3196 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3197 
	#R_MICROBLAZE_64
 5

	)

3198 
	#R_MICROBLAZE_32_LO
 6

	)

3199 
	#R_MICROBLAZE_SRO32
 7

	)

3200 
	#R_MICROBLAZE_SRW32
 8

	)

3201 
	#R_MICROBLAZE_64_NONE
 9

	)

3202 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3203 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3204 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3205 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3206 
	#R_MICROBLAZE_GOT_64
 14

	)

3207 
	#R_MICROBLAZE_PLT_64
 15

	)

3208 
	#R_MICROBLAZE_REL
 16

	)

3209 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3210 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3211 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3212 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3213 
	#R_MICROBLAZE_COPY
 21

	)

3214 
	#R_MICROBLAZE_TLS
 22

	)

3215 
	#R_MICROBLAZE_TLSGD
 23

	)

3216 
	#R_MICROBLAZE_TLSLD
 24

	)

3217 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3218 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3219 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3220 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3221 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3224 
	#DT_NIOS2_GP
 0x70000002

	)

3227 
	#R_NIOS2_NONE
 0

	)

3228 
	#R_NIOS2_S16
 1

	)

3229 
	#R_NIOS2_U16
 2

	)

3230 
	#R_NIOS2_PCREL16
 3

	)

3231 
	#R_NIOS2_CALL26
 4

	)

3232 
	#R_NIOS2_IMM5
 5

	)

3233 
	#R_NIOS2_CACHE_OPX
 6

	)

3234 
	#R_NIOS2_IMM6
 7

	)

3235 
	#R_NIOS2_IMM8
 8

	)

3236 
	#R_NIOS2_HI16
 9

	)

3237 
	#R_NIOS2_LO16
 10

	)

3238 
	#R_NIOS2_HIADJ16
 11

	)

3239 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3240 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3241 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3242 
	#R_NIOS2_GPREL
 15

	)

3243 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3244 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3245 
	#R_NIOS2_UJMP
 18

	)

3246 
	#R_NIOS2_CJMP
 19

	)

3247 
	#R_NIOS2_CALLR
 20

	)

3248 
	#R_NIOS2_ALIGN
 21

	)

3250 
	#R_NIOS2_GOT16
 22

	)

3251 
	#R_NIOS2_CALL16
 23

	)

3252 
	#R_NIOS2_GOTOFF_LO
 24

	)

3253 
	#R_NIOS2_GOTOFF_HA
 25

	)

3254 
	#R_NIOS2_PCREL_LO
 26

	)

3255 
	#R_NIOS2_PCREL_HA
 27

	)

3256 
	#R_NIOS2_TLS_GD16
 28

	)

3257 
	#R_NIOS2_TLS_LDM16
 29

	)

3258 
	#R_NIOS2_TLS_LDO16
 30

	)

3259 
	#R_NIOS2_TLS_IE16
 31

	)

3260 
	#R_NIOS2_TLS_LE16
 32

	)

3261 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3262 
	#R_NIOS2_TLS_DTPREL
 34

	)

3263 
	#R_NIOS2_TLS_TPREL
 35

	)

3264 
	#R_NIOS2_COPY
 36

	)

3265 
	#R_NIOS2_GLOB_DAT
 37

	)

3266 
	#R_NIOS2_JUMP_SLOT
 38

	)

3267 
	#R_NIOS2_RELATIVE
 39

	)

3268 
	#R_NIOS2_GOTOFF
 40

	)

3269 
	#R_NIOS2_CALL26_NOAT
 41

	)

3270 
	#R_NIOS2_GOT_LO
 42

	)

3271 
	#R_NIOS2_GOT_HA
 43

	)

3272 
	#R_NIOS2_CALL_LO
 44

	)

3273 
	#R_NIOS2_CALL_HA
 45

	)

3276 
	#R_TILEPRO_NONE
 0

	)

3277 
	#R_TILEPRO_32
 1

	)

3278 
	#R_TILEPRO_16
 2

	)

3279 
	#R_TILEPRO_8
 3

	)

3280 
	#R_TILEPRO_32_PCREL
 4

	)

3281 
	#R_TILEPRO_16_PCREL
 5

	)

3282 
	#R_TILEPRO_8_PCREL
 6

	)

3283 
	#R_TILEPRO_LO16
 7

	)

3284 
	#R_TILEPRO_HI16
 8

	)

3285 
	#R_TILEPRO_HA16
 9

	)

3286 
	#R_TILEPRO_COPY
 10

	)

3287 
	#R_TILEPRO_GLOB_DAT
 11

	)

3288 
	#R_TILEPRO_JMP_SLOT
 12

	)

3289 
	#R_TILEPRO_RELATIVE
 13

	)

3290 
	#R_TILEPRO_BROFF_X1
 14

	)

3291 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3292 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3293 
	#R_TILEPRO_IMM8_X0
 17

	)

3294 
	#R_TILEPRO_IMM8_Y0
 18

	)

3295 
	#R_TILEPRO_IMM8_X1
 19

	)

3296 
	#R_TILEPRO_IMM8_Y1
 20

	)

3297 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3298 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3299 
	#R_TILEPRO_IMM16_X0
 23

	)

3300 
	#R_TILEPRO_IMM16_X1
 24

	)

3301 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3302 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3303 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3304 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3305 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3306 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3307 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3308 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3309 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3310 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3311 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3312 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3313 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3314 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3315 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3316 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3317 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3318 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3319 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3320 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3321 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3322 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3323 
	#R_TILEPRO_MMSTART_X0
 47

	)

3324 
	#R_TILEPRO_MMEND_X0
 48

	)

3325 
	#R_TILEPRO_MMSTART_X1
 49

	)

3326 
	#R_TILEPRO_MMEND_X1
 50

	)

3327 
	#R_TILEPRO_SHAMT_X0
 51

	)

3328 
	#R_TILEPRO_SHAMT_X1
 52

	)

3329 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3330 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3331 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3333 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3334 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3335 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3336 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3337 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3338 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3339 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3340 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3341 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3342 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3343 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3344 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3345 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3346 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3347 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3348 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3349 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3350 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3351 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3352 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3353 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3354 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3355 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3356 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3357 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3358 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3359 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3360 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3361 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3362 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3363 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3364 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3365 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3367 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3368 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3370 
	#R_TILEPRO_NUM
 130

	)

3374 
	#R_TILEGX_NONE
 0

	)

3375 
	#R_TILEGX_64
 1

	)

3376 
	#R_TILEGX_32
 2

	)

3377 
	#R_TILEGX_16
 3

	)

3378 
	#R_TILEGX_8
 4

	)

3379 
	#R_TILEGX_64_PCREL
 5

	)

3380 
	#R_TILEGX_32_PCREL
 6

	)

3381 
	#R_TILEGX_16_PCREL
 7

	)

3382 
	#R_TILEGX_8_PCREL
 8

	)

3383 
	#R_TILEGX_HW0
 9

	)

3384 
	#R_TILEGX_HW1
 10

	)

3385 
	#R_TILEGX_HW2
 11

	)

3386 
	#R_TILEGX_HW3
 12

	)

3387 
	#R_TILEGX_HW0_LAST
 13

	)

3388 
	#R_TILEGX_HW1_LAST
 14

	)

3389 
	#R_TILEGX_HW2_LAST
 15

	)

3390 
	#R_TILEGX_COPY
 16

	)

3391 
	#R_TILEGX_GLOB_DAT
 17

	)

3392 
	#R_TILEGX_JMP_SLOT
 18

	)

3393 
	#R_TILEGX_RELATIVE
 19

	)

3394 
	#R_TILEGX_BROFF_X1
 20

	)

3395 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3396 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3397 
	#R_TILEGX_IMM8_X0
 23

	)

3398 
	#R_TILEGX_IMM8_Y0
 24

	)

3399 
	#R_TILEGX_IMM8_X1
 25

	)

3400 
	#R_TILEGX_IMM8_Y1
 26

	)

3401 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3402 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3403 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3404 
	#R_TILEGX_MMSTART_X0
 30

	)

3405 
	#R_TILEGX_MMEND_X0
 31

	)

3406 
	#R_TILEGX_SHAMT_X0
 32

	)

3407 
	#R_TILEGX_SHAMT_X1
 33

	)

3408 
	#R_TILEGX_SHAMT_Y0
 34

	)

3409 
	#R_TILEGX_SHAMT_Y1
 35

	)

3410 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3411 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3412 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3413 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3414 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3415 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3416 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3417 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3418 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3419 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3420 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3421 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3422 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3423 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3424 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3425 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3426 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3427 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3428 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3429 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3430 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3431 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3432 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3433 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3434 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3435 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3436 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3437 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3438 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3439 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3440 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3441 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3442 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3443 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3444 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3445 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3446 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3447 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3448 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3449 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3450 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3451 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3452 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3453 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3454 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3455 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3456 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3457 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3458 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3459 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3460 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3461 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3462 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3463 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3465 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3466 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3467 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3468 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3469 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3470 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3471 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3472 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3473 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3474 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3475 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3476 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3478 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3479 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3480 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3481 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3482 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3483 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3484 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3485 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3486 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3487 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3488 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3489 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3490 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3491 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3492 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3493 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3495 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3496 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3498 
	#R_TILEGX_NUM
 130

	)

3501 
	g__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libaio.h

23 #i‚de‡
__LIBAIO_H


24 
	#__LIBAIO_H


	)

26 #ifde‡
__˝lu•lus


30 
	~<sys/ty≥s.h
>

31 
	~<°rög.h
>

33 
time•ec
;

34 
sockaddr
;

35 
iovec
;

37 
io_c⁄ãxt
 *
	tio_c⁄ãxt_t
;

39 
	eio_iocb_cmd
 {

40 
IO_CMD_PREAD
 = 0,

41 
IO_CMD_PWRITE
 = 1,

43 
IO_CMD_FSYNC
 = 2,

44 
IO_CMD_FDSYNC
 = 3,

46 
IO_CMD_POLL
 = 5,

47 
IO_CMD_NOOP
 = 6,

48 
IO_CMD_PREADV
 = 7,

49 
IO_CMD_PWRITEV
 = 8,

50 } 
	tio_iocb_cmd_t
;

53 #i‡
deföed
(
__i386__
Ë|| (deföed(
__¨m__
Ë&& !deföed(
__ARMEB__
)) || \

54 (
deföed
(
__sh__
Ë&& deföed(
__LITTLE_ENDIAN__
)) || \

55 
deföed
(
__bfö__
) || \

56 (
deföed
(
__MIPSEL__
Ë&& !deföed(
__mùs64
)) || \

57 
deföed
(
__¸is__
)

58 
	#PADDED
(
x
, 
y
Ëx; 
	)
y

59 
	#PADDED±r
(
x
, 
y
Ëx; 
	)
y

60 
	#PADDEDul
(
x
, 
y
Ëx; 
	)
y

63 #ñi‡
deföed
(
__ü64__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__Æpha__
) || \

64 (
deföed
(
__mùs64
Ë&& deföed(
__MIPSEL__
)) || \

65 (
deföed
(
__Ørch64__
Ë&& deföed(
__AARCH64EL__
))

66 
	#PADDED
(
x
, 
y
Ëx, 
	)
y

67 
	#PADDED±r
(
x
, 
y
Ë
	)
x

68 
	#PADDEDul
(
x
, 
y
Ë
	)
x

71 #ñi‡
deföed
(
__powîpc64__
Ë|| deföed(
__s390x__
) || \

72 (
deföed
(
__hµa__
Ë&& deföed(
__¨ch64__
)) || \

73 (
deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)) || \

74 (
deföed
(
__mùs64
Ë&& deföed(
__MIPSEB__
)) || \

75 (
deföed
(
__Ørch64__
Ë&& deföed(
__AARCH64EB__
))

76 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

77 
	#PADDED±r
(
x
,
y
Ë
	)
x

78 
	#PADDEDul
(
x
, 
y
Ë
	)
x

81 #ñi‡
deföed
(
__PPC__
Ë|| deföed(
__s390__
) || \

82 (
deföed
(
__¨m__
Ë&& deföed(
__ARMEB__
)) || \

83 (
deföed
(
__sh__
Ë&& deföed (
__BIG_ENDIAN__
)) || \

84 
deföed
(
__•¨c__
Ë|| deföed(
__MIPSEB__
Ë|| deföed(
__m68k__
) || \

85 
deföed
(
__hµa__
Ë|| deföed(
__‰v__
Ë|| deföed(
__avr32__
)

86 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

87 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

88 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

91 #îr‹ 
ídün
?

94 
	sio_iocb_pﬁl
 {

95 
PADDED
(
evíts
, 
__∑d1
);

98 
	sio_iocb_sockaddr
 {

99 
sockaddr
 *
addr
;

100 
Àn
;

103 
	sio_iocb_comm⁄
 {

104 
PADDED±r
(*
buf
, 
__∑d1
);

105 
PADDEDul
(
nbyãs
, 
__∑d2
);

106 
off£t
;

107 
__∑d3
;

108 
Êags
;

109 
ªsfd
;

112 
	sio_iocb_ve˘‹
 {

113 c⁄° 
iovec
 *
vec
;

114 
ƒ
;

115 
off£t
;

118 
	siocb
 {

119 
PADDED±r
(*
d©a
, 
__∑d1
);

120 
PADDED
(
key
, 
__∑d2
);

122 
aio_lio_›code
;

123 
aio_ªq¥io
;

124 
aio_fûdes
;

127 
io_iocb_comm⁄
 
c
;

128 
io_iocb_ve˘‹
 
v
;

129 
io_iocb_pﬁl
 
pﬁl
;

130 
io_iocb_sockaddr
 
ßddr
;

131 } 
u
;

134 
	sio_evít
 {

135 
PADDED±r
(*
d©a
, 
__∑d1
);

136 
PADDED±r
(
iocb
 *
obj
, 
__∑d2
);

137 
PADDEDul
(
ªs
, 
__∑d3
);

138 
PADDEDul
(
ªs2
, 
__∑d4
);

141 #unde‡
PADDED


142 #unde‡
PADDED±r


143 #unde‡
PADDEDul


145 (*
io_ˇŒback_t
)(
	tio_c⁄ãxt_t
 
	t˘x
, 
	tiocb
 *iocb, 
	tªs
, 
	tªs2
);

148 
io_queue_öô
(
maxevíts
, 
io_c⁄ãxt_t
 *
˘xp
);

150 
io_queue_ªÀa£
(
io_c⁄ãxt_t
 
˘x
);

152 
io_queue_run
(
io_c⁄ãxt_t
 
˘x
);

155 
io_£tup
(
maxevíts
, 
io_c⁄ãxt_t
 *
˘xp
);

156 
io_de°roy
(
io_c⁄ãxt_t
 
˘x
);

157 
io_submô
(
io_c⁄ãxt_t
 
˘x
, 
ƒ
, 
iocb
 *
ios
[]);

158 
io_ˇn˚l
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_evít
 *
evt
);

159 
io_gëevíts
(
io_c⁄ãxt_t
 
˘x_id
, 
mö_ƒ
, 
ƒ
, 
io_evít
 *
evíts
, 
time•ec
 *
timeout
);

162 
ölöe
 
io_£t_ˇŒback
(
iocb
 *iocb, 
io_ˇŒback_t
 
cb
)

164 
	giocb
->
	gd©a
 = (*)
cb
;

167 
ölöe
 
io_¥ï_¥ód
(
iocb
 *iocb, 
fd
, *
buf
, 
size_t
 
cou¡
, 
off£t
)

169 
mem£t
(
iocb
, 0, (*iocb));

170 
	giocb
->
	gaio_fûdes
 = 
fd
;

171 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PREAD
;

172 
	giocb
->
	gaio_ªq¥io
 = 0;

173 
	giocb
->
	gu
.
	gc
.
	gbuf
 = 
buf
;

174 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
cou¡
;

175 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

178 
ölöe
 
io_¥ï_pwrôe
(
iocb
 *iocb, 
fd
, *
buf
, 
size_t
 
cou¡
, 
off£t
)

180 
mem£t
(
iocb
, 0, (*iocb));

181 
	giocb
->
	gaio_fûdes
 = 
fd
;

182 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PWRITE
;

183 
	giocb
->
	gaio_ªq¥io
 = 0;

184 
	giocb
->
	gu
.
	gc
.
	gbuf
 = 
buf
;

185 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
cou¡
;

186 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

189 
ölöe
 
io_¥ï_¥ódv
(
iocb
 *iocb, 
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
, 
off£t
)

191 
mem£t
(
iocb
, 0, (*iocb));

192 
	giocb
->
	gaio_fûdes
 = 
fd
;

193 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PREADV
;

194 
	giocb
->
	gaio_ªq¥io
 = 0;

195 
	giocb
->
	gu
.
	gc
.
	gbuf
 = (*)
iov
;

196 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
iov˙t
;

197 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

200 
ölöe
 
io_¥ï_pwrôev
(
iocb
 *iocb, 
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
, 
off£t
)

202 
mem£t
(
iocb
, 0, (*iocb));

203 
	giocb
->
	gaio_fûdes
 = 
fd
;

204 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PWRITEV
;

205 
	giocb
->
	gaio_ªq¥io
 = 0;

206 
	giocb
->
	gu
.
	gc
.
	gbuf
 = (*)
iov
;

207 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
iov˙t
;

208 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

213 
ölöe
 
io_¥ï_pﬁl
(
iocb
 *iocb, 
fd
, 
evíts
)

215 
mem£t
(
iocb
, 0, (*iocb));

216 
	giocb
->
	gaio_fûdes
 = 
fd
;

217 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_POLL
;

218 
	giocb
->
	gaio_ªq¥io
 = 0;

219 
	giocb
->
	gu
.
	gpﬁl
.
	gevíts
 = 
evíts
;

222 
ölöe
 
io_pﬁl
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_ˇŒback_t
 
cb
, 
fd
, 
evíts
)

224 
io_¥ï_pﬁl
(
iocb
, 
fd
, 
evíts
);

225 
io_£t_ˇŒback
(
iocb
, 
cb
);

226  
io_submô
(
˘x
, 1, &
iocb
);

229 
ölöe
 
io_¥ï_fsync
(
iocb
 *iocb, 
fd
)

231 
mem£t
(
iocb
, 0, (*iocb));

232 
	giocb
->
	gaio_fûdes
 = 
fd
;

233 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_FSYNC
;

234 
	giocb
->
	gaio_ªq¥io
 = 0;

237 
ölöe
 
io_fsync
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_ˇŒback_t
 
cb
, 
fd
)

239 
io_¥ï_fsync
(
iocb
, 
fd
);

240 
io_£t_ˇŒback
(
iocb
, 
cb
);

241  
io_submô
(
˘x
, 1, &
iocb
);

244 
ölöe
 
io_¥ï_fdsync
(
iocb
 *iocb, 
fd
)

246 
mem£t
(
iocb
, 0, (*iocb));

247 
	giocb
->
	gaio_fûdes
 = 
fd
;

248 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_FDSYNC
;

249 
	giocb
->
	gaio_ªq¥io
 = 0;

252 
ölöe
 
io_fdsync
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_ˇŒback_t
 
cb
, 
fd
)

254 
io_¥ï_fdsync
(
iocb
, 
fd
);

255 
io_£t_ˇŒback
(
iocb
, 
cb
);

256  
io_submô
(
˘x
, 1, &
iocb
);

259 
ölöe
 
io_£t_evítfd
(
iocb
 *iocb, 
evítfd
)

261 
	giocb
->
	gu
.
	gc
.
	gÊags
 |= (1 << 0) ;

262 
	giocb
->
	gu
.
	gc
.
	gªsfd
 = 
evítfd
;

265 #ifde‡
__˝lu•lus


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/falloc.h

1 #i‚de‡
_FALLOC_H_


2 
	#_FALLOC_H_


	)

4 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

5 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

6 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

28 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

42 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

59 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/ty≥s.h
>

24 #unde‡
NR_OPEN


25 
	#INR_OPEN_CUR
 1024

	)

26 
	#INR_OPEN_MAX
 4096

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

29 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

31 
	#SEEK_SET
 0

	)

32 
	#SEEK_CUR
 1

	)

33 
	#SEEK_END
 2

	)

34 
	#SEEK_DATA
 3

	)

35 
	#SEEK_HOLE
 4

	)

36 
	#SEEK_MAX
 
SEEK_HOLE


	)

38 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

39 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

40 
	#RENAME_WHITEOUT
 (1 << 2Ë

	)

42 
	sf°rim_ønge
 {

43 
__u64
 
	m°¨t
;

44 
__u64
 
	mÀn
;

45 
__u64
 
	mmöÀn
;

49 
	sfûes_°©_°ru˘
 {

50 
	mƒ_fûes
;

51 
	mƒ_‰ì_fûes
;

52 
	mmax_fûes
;

55 
	söodes_°©_t
 {

56 
	mƒ_öodes
;

57 
	mƒ_unu£d
;

58 
	mdummy
[5];

62 
	#NR_FILE
 8192

	)

68 
	#MS_RDONLY
 1

	)

69 
	#MS_NOSUID
 2

	)

70 
	#MS_NODEV
 4

	)

71 
	#MS_NOEXEC
 8

	)

72 
	#MS_SYNCHRONOUS
 16

	)

73 
	#MS_REMOUNT
 32

	)

74 
	#MS_MANDLOCK
 64

	)

75 
	#MS_DIRSYNC
 128

	)

76 
	#MS_NOATIME
 1024

	)

77 
	#MS_NODIRATIME
 2048

	)

78 
	#MS_BIND
 4096

	)

79 
	#MS_MOVE
 8192

	)

80 
	#MS_REC
 16384

	)

81 
	#MS_VERBOSE
 32768

	)

83 
	#MS_SILENT
 32768

	)

84 
	#MS_POSIXACL
 (1<<16Ë

	)

85 
	#MS_UNBINDABLE
 (1<<17Ë

	)

86 
	#MS_PRIVATE
 (1<<18Ë

	)

87 
	#MS_SLAVE
 (1<<19Ë

	)

88 
	#MS_SHARED
 (1<<20Ë

	)

89 
	#MS_RELATIME
 (1<<21Ë

	)

90 
	#MS_KERNMOUNT
 (1<<22Ë

	)

91 
	#MS_I_VERSION
 (1<<23Ë

	)

92 
	#MS_STRICTATIME
 (1<<24Ë

	)

93 
	#MS_LAZYTIME
 (1<<25Ë

	)

96 
	#MS_SUBMOUNT
 (1<<26)

	)

97 
	#MS_NOSEC
 (1<<28)

	)

98 
	#MS_BORN
 (1<<29)

	)

99 
	#MS_ACTIVE
 (1<<30)

	)

100 
	#MS_NOUSER
 (1<<31)

	)

105 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
|\

106 
MS_LAZYTIME
)

	)

111 
	#MS_MGC_VAL
 0xC0ED0000

	)

112 
	#MS_MGC_MSK
 0xffff0000

	)

117 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

118 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

119 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

120 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

121 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

122 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

123 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

124 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

125 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

126 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

127 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

128 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

130 
	#BLKPG
 
	`_IO
(0x12,105)

	)

134 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

135 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

140 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

141 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

142 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

143 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

144 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

145 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

146 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

147 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

148 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

149 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

150 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

151 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

152 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

153 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

154 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

155 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

157 
	#BMAP_IOCTL
 1

	)

158 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

159 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

160 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

161 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

162 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

164 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

165 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

166 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

167 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

168 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

169 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

170 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

171 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

172 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

177 
	#FS_SECRM_FL
 0x00000001

	)

178 
	#FS_UNRM_FL
 0x00000002

	)

179 
	#FS_COMPR_FL
 0x00000004

	)

180 
	#FS_SYNC_FL
 0x00000008

	)

181 
	#FS_IMMUTABLE_FL
 0x00000010

	)

182 
	#FS_APPEND_FL
 0x00000020

	)

183 
	#FS_NODUMP_FL
 0x00000040

	)

184 
	#FS_NOATIME_FL
 0x00000080

	)

186 
	#FS_DIRTY_FL
 0x00000100

	)

187 
	#FS_COMPRBLK_FL
 0x00000200

	)

188 
	#FS_NOCOMP_FL
 0x00000400

	)

189 
	#FS_ECOMPR_FL
 0x00000800

	)

191 
	#FS_BTREE_FL
 0x00001000

	)

192 
	#FS_INDEX_FL
 0x00001000

	)

193 
	#FS_IMAGIC_FL
 0x00002000

	)

194 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

195 
	#FS_NOTAIL_FL
 0x00008000

	)

196 
	#FS_DIRSYNC_FL
 0x00010000

	)

197 
	#FS_TOPDIR_FL
 0x00020000

	)

198 
	#FS_EXTENT_FL
 0x00080000

	)

199 
	#FS_DIRECTIO_FL
 0x00100000

	)

200 
	#FS_NOCOW_FL
 0x00800000

	)

201 
	#FS_PROJINHERIT_FL
 0x20000000

	)

202 
	#FS_RESERVED_FL
 0x80000000

	)

204 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

205 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

208 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

209 
	#SYNC_FILE_RANGE_WRITE
 2

	)

210 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/major.h

1 #i‚de‡
_LINUX_MAJOR_H


2 
	#_LINUX_MAJOR_H


	)

9 
	#UNNAMED_MAJOR
 0

	)

10 
	#MEM_MAJOR
 1

	)

11 
	#RAMDISK_MAJOR
 1

	)

12 
	#FLOPPY_MAJOR
 2

	)

13 
	#PTY_MASTER_MAJOR
 2

	)

14 
	#IDE0_MAJOR
 3

	)

15 
	#HD_MAJOR
 
IDE0_MAJOR


	)

16 
	#PTY_SLAVE_MAJOR
 3

	)

17 
	#TTY_MAJOR
 4

	)

18 
	#TTYAUX_MAJOR
 5

	)

19 
	#LP_MAJOR
 6

	)

20 
	#VCS_MAJOR
 7

	)

21 
	#LOOP_MAJOR
 7

	)

22 
	#SCSI_DISK0_MAJOR
 8

	)

23 
	#SCSI_TAPE_MAJOR
 9

	)

24 
	#MD_MAJOR
 9

	)

25 
	#MISC_MAJOR
 10

	)

26 
	#SCSI_CDROM_MAJOR
 11

	)

27 
	#MUX_MAJOR
 11

	)

28 
	#XT_DISK_MAJOR
 13

	)

29 
	#INPUT_MAJOR
 13

	)

30 
	#SOUND_MAJOR
 14

	)

31 
	#CDU31A_CDROM_MAJOR
 15

	)

32 
	#JOYSTICK_MAJOR
 15

	)

33 
	#GOLDSTAR_CDROM_MAJOR
 16

	)

34 
	#OPTICS_CDROM_MAJOR
 17

	)

35 
	#SANYO_CDROM_MAJOR
 18

	)

36 
	#CYCLADES_MAJOR
 19

	)

37 
	#CYCLADESAUX_MAJOR
 20

	)

38 
	#MITSUMI_X_CDROM_MAJOR
 20

	)

39 
	#MFM_ACORN_MAJOR
 21

	)

40 
	#SCSI_GENERIC_MAJOR
 21

	)

41 
	#IDE1_MAJOR
 22

	)

42 
	#DIGICU_MAJOR
 22

	)

43 
	#DIGI_MAJOR
 23

	)

44 
	#MITSUMI_CDROM_MAJOR
 23

	)

45 
	#CDU535_CDROM_MAJOR
 24

	)

46 
	#STL_SERIALMAJOR
 24

	)

47 
	#MATSUSHITA_CDROM_MAJOR
 25

	)

48 
	#STL_CALLOUTMAJOR
 25

	)

49 
	#MATSUSHITA_CDROM2_MAJOR
 26

	)

50 
	#QIC117_TAPE_MAJOR
 27

	)

51 
	#MATSUSHITA_CDROM3_MAJOR
 27

	)

52 
	#MATSUSHITA_CDROM4_MAJOR
 28

	)

53 
	#STL_SIOMEMMAJOR
 28

	)

54 
	#ACSI_MAJOR
 28

	)

55 
	#AZTECH_CDROM_MAJOR
 29

	)

56 
	#FB_MAJOR
 29

	)

57 
	#MTD_BLOCK_MAJOR
 31

	)

58 
	#CM206_CDROM_MAJOR
 32

	)

59 
	#IDE2_MAJOR
 33

	)

60 
	#IDE3_MAJOR
 34

	)

61 
	#Z8530_MAJOR
 34

	)

62 
	#XPRAM_MAJOR
 35

	)

63 
	#NETLINK_MAJOR
 36

	)

64 
	#PS2ESDI_MAJOR
 36

	)

65 
	#IDETAPE_MAJOR
 37

	)

66 
	#Z2RAM_MAJOR
 37

	)

67 
	#APBLOCK_MAJOR
 38

	)

68 
	#DDV_MAJOR
 39

	)

69 
	#NBD_MAJOR
 43

	)

70 
	#RISCOM8_NORMAL_MAJOR
 48

	)

71 
	#DAC960_MAJOR
 48

	)

72 
	#RISCOM8_CALLOUT_MAJOR
 49

	)

73 
	#MKISS_MAJOR
 55

	)

74 
	#DSP56K_MAJOR
 55

	)

76 
	#IDE4_MAJOR
 56

	)

77 
	#IDE5_MAJOR
 57

	)

79 
	#SCSI_DISK1_MAJOR
 65

	)

80 
	#SCSI_DISK2_MAJOR
 66

	)

81 
	#SCSI_DISK3_MAJOR
 67

	)

82 
	#SCSI_DISK4_MAJOR
 68

	)

83 
	#SCSI_DISK5_MAJOR
 69

	)

84 
	#SCSI_DISK6_MAJOR
 70

	)

85 
	#SCSI_DISK7_MAJOR
 71

	)

87 
	#COMPAQ_SMART2_MAJOR
 72

	)

88 
	#COMPAQ_SMART2_MAJOR1
 73

	)

89 
	#COMPAQ_SMART2_MAJOR2
 74

	)

90 
	#COMPAQ_SMART2_MAJOR3
 75

	)

91 
	#COMPAQ_SMART2_MAJOR4
 76

	)

92 
	#COMPAQ_SMART2_MAJOR5
 77

	)

93 
	#COMPAQ_SMART2_MAJOR6
 78

	)

94 
	#COMPAQ_SMART2_MAJOR7
 79

	)

96 
	#SPECIALIX_NORMAL_MAJOR
 75

	)

97 
	#SPECIALIX_CALLOUT_MAJOR
 76

	)

99 
	#AURORA_MAJOR
 79

	)

101 
	#I2O_MAJOR
 80

	)

103 
	#SHMIQ_MAJOR
 85

	)

104 
	#SCSI_CHANGER_MAJOR
 86

	)

106 
	#IDE6_MAJOR
 88

	)

107 
	#IDE7_MAJOR
 89

	)

108 
	#IDE8_MAJOR
 90

	)

109 
	#MTD_CHAR_MAJOR
 90

	)

110 
	#IDE9_MAJOR
 91

	)

112 
	#DASD_MAJOR
 94

	)

114 
	#MDISK_MAJOR
 95

	)

116 
	#UBD_MAJOR
 98

	)

118 
	#PP_MAJOR
 99

	)

119 
	#JSFD_MAJOR
 99

	)

121 
	#PHONE_MAJOR
 100

	)

123 
	#COMPAQ_CISS_MAJOR
 104

	)

124 
	#COMPAQ_CISS_MAJOR1
 105

	)

125 
	#COMPAQ_CISS_MAJOR2
 106

	)

126 
	#COMPAQ_CISS_MAJOR3
 107

	)

127 
	#COMPAQ_CISS_MAJOR4
 108

	)

128 
	#COMPAQ_CISS_MAJOR5
 109

	)

129 
	#COMPAQ_CISS_MAJOR6
 110

	)

130 
	#COMPAQ_CISS_MAJOR7
 111

	)

132 
	#VIODASD_MAJOR
 112

	)

133 
	#VIOCD_MAJOR
 113

	)

135 
	#ATARAID_MAJOR
 114

	)

137 
	#SCSI_DISK8_MAJOR
 128

	)

138 
	#SCSI_DISK9_MAJOR
 129

	)

139 
	#SCSI_DISK10_MAJOR
 130

	)

140 
	#SCSI_DISK11_MAJOR
 131

	)

141 
	#SCSI_DISK12_MAJOR
 132

	)

142 
	#SCSI_DISK13_MAJOR
 133

	)

143 
	#SCSI_DISK14_MAJOR
 134

	)

144 
	#SCSI_DISK15_MAJOR
 135

	)

146 
	#UNIX98_PTY_MASTER_MAJOR
 128

	)

147 
	#UNIX98_PTY_MAJOR_COUNT
 8

	)

148 
	#UNIX98_PTY_SLAVE_MAJOR
 (
UNIX98_PTY_MASTER_MAJOR
+
UNIX98_PTY_MAJOR_COUNT
)

	)

150 
	#DRBD_MAJOR
 147

	)

151 
	#RTF_MAJOR
 150

	)

152 
	#RAW_MAJOR
 162

	)

154 
	#USB_ACM_MAJOR
 166

	)

155 
	#USB_ACM_AUX_MAJOR
 167

	)

156 
	#USB_CHAR_MAJOR
 180

	)

158 
	#MMC_BLOCK_MAJOR
 179

	)

160 
	#VXVM_MAJOR
 199

	)

161 
	#VXSPEC_MAJOR
 200

	)

162 
	#VXDMP_MAJOR
 201

	)

164 
	#XENVBD_MAJOR
 202

	)

166 
	#MSR_MAJOR
 202

	)

167 
	#CPUID_MAJOR
 203

	)

169 
	#OSST_MAJOR
 206

	)

171 
	#IBM_TTY3270_MAJOR
 227

	)

172 
	#IBM_FS3270_MAJOR
 228

	)

174 
	#VIOTAPE_MAJOR
 230

	)

176 
	#BLOCK_EXT_MAJOR
 259

	)

177 
	#SCSI_OSD_MAJOR
 260

	)

	@/usr/include/linux/mempolicy.h

5 #i‚de‡
_LINUX_MEMPOLICY_H


6 
	#_LINUX_MEMPOLICY_H


	)

8 
	~<löux/î∫o.h
>

19 
	mMPOL_DEFAULT
,

20 
	mMPOL_PREFERRED
,

21 
	mMPOL_BIND
,

22 
	mMPOL_INTERLEAVE
,

23 
	mMPOL_LOCAL
,

24 
	mMPOL_MAX
,

27 
	empﬁ_ªböd_°ï
 {

28 
	mMPOL_REBIND_ONCE
,

29 
	mMPOL_REBIND_STEP1
,

30 
	mMPOL_REBIND_STEP2
,

31 
	mMPOL_REBIND_NSTEP
,

35 
	#MPOL_F_STATIC_NODES
 (1 << 15)

	)

36 
	#MPOL_F_RELATIVE_NODES
 (1 << 14)

	)

42 
	#MPOL_MODE_FLAGS
 (
MPOL_F_STATIC_NODES
 | 
MPOL_F_RELATIVE_NODES
)

	)

45 
	#MPOL_F_NODE
 (1<<0Ë

	)

46 
	#MPOL_F_ADDR
 (1<<1Ë

	)

47 
	#MPOL_F_MEMS_ALLOWED
 (1<<2Ë

	)

50 
	#MPOL_MF_STRICT
 (1<<0Ë

	)

51 
	#MPOL_MF_MOVE
 (1<<1Ë

	)

53 
	#MPOL_MF_MOVE_ALL
 (1<<2Ë

	)

54 
	#MPOL_MF_LAZY
 (1<<3Ë

	)

55 
	#MPOL_MF_INTERNAL
 (1<<4Ë

	)

57 
	#MPOL_MF_VALID
 (
MPOL_MF_STRICT
 | \

58 
MPOL_MF_MOVE
 | \

59 
MPOL_MF_MOVE_ALL
)

	)

66 
	#MPOL_F_SHARED
 (1 << 0Ë

	)

67 
	#MPOL_F_LOCAL
 (1 << 1Ë

	)

68 
	#MPOL_F_REBINDING
 (1 << 2Ë

	)

69 
	#MPOL_F_MOF
 (1 << 3Ë

	)

70 
	#MPOL_F_MORON
 (1 << 4Ë

	)

	@/usr/include/linux/raw.h

1 #i‚de‡
__LINUX_RAW_H


2 
	#__LINUX_RAW_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#RAW_SETBIND
 
	`_IO
–0xac, 0 )

	)

7 
	#RAW_GETBIND
 
	`_IO
–0xac, 1 )

	)

9 
	søw_c⁄fig_ªque°


11 
	møw_mö‹
;

12 
__u64
 
	mblock_maj‹
;

13 
__u64
 
	mblock_mö‹
;

16 
	#MAX_RAW_MINORS
 
CONFIG_MAX_RAW_DEVS


	)

	@/usr/include/linux/shm.h

1 #i‚de‡
_LINUX_SHM_H_


2 
	#_LINUX_SHM_H_


	)

4 
	~<löux/ùc.h
>

5 
	~<löux/î∫o.h
>

6 
	~<uni°d.h
>

17 
	#SHMMIN
 1

	)

18 
	#SHMMNI
 4096

	)

19 
	#SHMMAX
 (
ULONG_MAX
 - (1UL << 24)Ë

	)

20 
	#SHMALL
 (
ULONG_MAX
 - (1UL << 24)Ë

	)

21 
	#SHMSEG
 
SHMMNI


	)

24 
	sshmid_ds
 {

25 
ùc_≥rm
 
	mshm_≥rm
;

26 
	mshm_£gsz
;

27 
__kî√l_time_t
 
	mshm_©ime
;

28 
__kî√l_time_t
 
	mshm_dtime
;

29 
__kî√l_time_t
 
	mshm_˘ime
;

30 
__kî√l_ùc_pid_t
 
	mshm_˝id
;

31 
__kî√l_ùc_pid_t
 
	mshm_Õid
;

32 
	mshm_«âch
;

33 
	mshm_unu£d
;

34 *
	mshm_unu£d2
;

35 *
	mshm_unu£d3
;

39 
	~<asm/shmbuf.h
>

42 
	#SHM_R
 0400

	)

43 
	#SHM_W
 0200

	)

46 
	#SHM_RDONLY
 010000

	)

47 
	#SHM_RND
 020000

	)

48 
	#SHM_REMAP
 040000

	)

49 
	#SHM_EXEC
 0100000

	)

52 
	#SHM_LOCK
 11

	)

53 
	#SHM_UNLOCK
 12

	)

56 
	#SHM_STAT
 13

	)

57 
	#SHM_INFO
 14

	)

60 
	sshmöfo
 {

61 
	mshmmax
;

62 
	mshmmö
;

63 
	mshmmni
;

64 
	mshm£g
;

65 
	mshmÆl
;

68 
	sshm_öfo
 {

69 
	mu£d_ids
;

70 
__kî√l_ul⁄g_t
 
	mshm_tŸ
;

71 
__kî√l_ul⁄g_t
 
	mshm_rss
;

72 
__kî√l_ul⁄g_t
 
	mshm_swp
;

73 
__kî√l_ul⁄g_t
 
	msw≠_©ãm±s
;

74 
__kî√l_ul⁄g_t
 
	msw≠_suc˚s£s
;

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/unistd.h

1 #i‚de‡
_LINUX_UNISTD_H_


2 
	#_LINUX_UNISTD_H_


	)

7 
	~<asm/uni°d.h
>

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/mntent.h

19 #i‚def 
_MNTENT_H


20 
	#_MNTENT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_FILE


	)

24 
	~<°dio.h
>

25 
	~<∑ths.h
>

29 
	#MNTTAB
 
_PATH_MNTTAB


	)

32 
	#MOUNTED
 
_PATH_MOUNTED


	)

36 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

37 
	#MNTTYPE_NFS
 "nfs"

	)

38 
	#MNTTYPE_SWAP
 "sw≠"

	)

42 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

43 
	#MNTOPT_RO
 "ro"

	)

44 
	#MNTOPT_RW
 "rw"

	)

45 
	#MNTOPT_SUID
 "suid"

	)

46 
	#MNTOPT_NOSUID
 "nosuid"

	)

47 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

50 
__BEGIN_DECLS


53 
	sm¡ít


55 *
	mm¡_f¢ame
;

56 *
	mm¡_dú
;

57 *
	mm¡_ty≥
;

58 *
	mm¡_›ts
;

59 
	mm¡_‰eq
;

60 
	mm¡_∑s¢o
;

66 
FILE
 *
	$£tm¡ít
 (c⁄° *
__fûe
, c⁄° *
__mode
Ë
__THROW
;

71 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

73 #ifde‡
__USE_MISC


75 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

76 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

77 *
__ª°ri˘
 
__buf„r
,

78 
__bufsize
Ë
__THROW
;

83 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

84 c⁄° 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

87 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

91 *
	$hasm¡›t
 (c⁄° 
m¡ít
 *
__m¡
,

92 c⁄° *
__›t
Ë
__THROW
;

95 
__END_DECLS


	@/usr/include/mtd/mtd-user.h

20 #i‚de‡
__MTD_USER_H__


21 
	#__MTD_USER_H__


	)

24 
	~<mtd/mtd-abi.h
>

26 
mtd_öfo_u£r
 
	tmtd_öfo_t
;

27 
îa£_öfo_u£r
 
	tîa£_öfo_t
;

28 
ªgi⁄_öfo_u£r
 
	tªgi⁄_öfo_t
;

29 
«nd_ooböfo
 
	t«nd_ooböfo_t
;

30 
«nd_ec˛ayout_u£r
 
	t«nd_ec˛ayout_t
;

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

73 #ifde‡
__USE_MISC


74 
	~<sys/ty≥s.h
>

75 
	~<sys/sockë.h
>

77 
u_öt32_t
 
	tt˝_£q
;

82 
	st˝hdr


84 
__exãnsi⁄__
 union

88 
u_öt16_t
 
	mth_•‹t
;

89 
u_öt16_t
 
	mth_dp‹t
;

90 
t˝_£q
 
	mth_£q
;

91 
t˝_£q
 
	mth_ack
;

92 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


93 
u_öt8_t
 
	mth_x2
:4;

94 
u_öt8_t
 
	mth_off
:4;

96 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


97 
u_öt8_t
 
	mth_off
:4;

98 
u_öt8_t
 
	mth_x2
:4;

100 
u_öt8_t
 
	mth_Êags
;

101 
	#TH_FIN
 0x01

	)

102 
	#TH_SYN
 0x02

	)

103 
	#TH_RST
 0x04

	)

104 
	#TH_PUSH
 0x08

	)

105 
	#TH_ACK
 0x10

	)

106 
	#TH_URG
 0x20

	)

107 
u_öt16_t
 
	mth_wö
;

108 
u_öt16_t
 
	mth_sum
;

109 
u_öt16_t
 
	mth_uΩ
;

113 
u_öt16_t
 
	msour˚
;

114 
u_öt16_t
 
	mde°
;

115 
u_öt32_t
 
	m£q
;

116 
u_öt32_t
 
	mack_£q
;

117 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


118 
u_öt16_t
 
	mªs1
:4;

119 
u_öt16_t
 
	mdoff
:4;

120 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	msyn
:1;

122 
u_öt16_t
 
	mr°
:1;

123 
u_öt16_t
 
	mpsh
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	murg
:1;

126 
u_öt16_t
 
	mªs2
:2;

127 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


128 
u_öt16_t
 
	mdoff
:4;

129 
u_öt16_t
 
	mªs1
:4;

130 
u_öt16_t
 
	mªs2
:2;

131 
u_öt16_t
 
	murg
:1;

132 
u_öt16_t
 
	mack
:1;

133 
u_öt16_t
 
	mpsh
:1;

134 
u_öt16_t
 
	mr°
:1;

135 
u_öt16_t
 
	msyn
:1;

136 
u_öt16_t
 
	mfö
:1;

140 
u_öt16_t
 
	mwödow
;

141 
u_öt16_t
 
	mcheck
;

142 
u_öt16_t
 
	murg_±r
;

149 
	mTCP_ESTABLISHED
 = 1,

150 
	mTCP_SYN_SENT
,

151 
	mTCP_SYN_RECV
,

152 
	mTCP_FIN_WAIT1
,

153 
	mTCP_FIN_WAIT2
,

154 
	mTCP_TIME_WAIT
,

155 
	mTCP_CLOSE
,

156 
	mTCP_CLOSE_WAIT
,

157 
	mTCP_LAST_ACK
,

158 
	mTCP_LISTEN
,

159 
	mTCP_CLOSING


162 
	#TCPOPT_EOL
 0

	)

163 
	#TCPOPT_NOP
 1

	)

164 
	#TCPOPT_MAXSEG
 2

	)

165 
	#TCPOLEN_MAXSEG
 4

	)

166 
	#TCPOPT_WINDOW
 3

	)

167 
	#TCPOLEN_WINDOW
 3

	)

168 
	#TCPOPT_SACK_PERMITTED
 4

	)

169 
	#TCPOLEN_SACK_PERMITTED
 2

	)

170 
	#TCPOPT_SACK
 5

	)

171 
	#TCPOPT_TIMESTAMP
 8

	)

172 
	#TCPOLEN_TIMESTAMP
 10

	)

173 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

175 
	#TCPOPT_TSTAMP_HDR
 \

176 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

184 
	#TCP_MSS
 512

	)

186 
	#TCP_MAXWIN
 65535

	)

188 
	#TCP_MAX_WINSHIFT
 14

	)

190 
	#SOL_TCP
 6

	)

193 
	#TCPI_OPT_TIMESTAMPS
 1

	)

194 
	#TCPI_OPT_SACK
 2

	)

195 
	#TCPI_OPT_WSCALE
 4

	)

196 
	#TCPI_OPT_ECN
 8

	)

197 
	#TCPI_OPT_ECN_SEEN
 16

	)

198 
	#TCPI_OPT_SYN_DATA
 32

	)

201 
	et˝_ˇ_°©e


203 
	mTCP_CA_O≥n
 = 0,

204 
	mTCP_CA_Dis‹dî
 = 1,

205 
	mTCP_CA_CWR
 = 2,

206 
	mTCP_CA_Recovîy
 = 3,

207 
	mTCP_CA_Loss
 = 4

210 
	st˝_öfo


212 
u_öt8_t
 
	mt˝i_°©e
;

213 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

214 
u_öt8_t
 
	mt˝i_ªå™smôs
;

215 
u_öt8_t
 
	mt˝i_¥obes
;

216 
u_öt8_t
 
	mt˝i_backoff
;

217 
u_öt8_t
 
	mt˝i_›ti⁄s
;

218 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

220 
u_öt32_t
 
	mt˝i_πo
;

221 
u_öt32_t
 
	mt˝i_©o
;

222 
u_öt32_t
 
	mt˝i_¢d_mss
;

223 
u_öt32_t
 
	mt˝i_rcv_mss
;

225 
u_öt32_t
 
	mt˝i_u«cked
;

226 
u_öt32_t
 
	mt˝i_ßcked
;

227 
u_öt32_t
 
	mt˝i_lo°
;

228 
u_öt32_t
 
	mt˝i_ªå™s
;

229 
u_öt32_t
 
	mt˝i_Áckës
;

232 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

233 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

234 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

235 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

238 
u_öt32_t
 
	mt˝i_pmtu
;

239 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

240 
u_öt32_t
 
	mt˝i_πt
;

241 
u_öt32_t
 
	mt˝i_πtv¨
;

242 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

243 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

244 
u_öt32_t
 
	mt˝i_advmss
;

245 
u_öt32_t
 
	mt˝i_ª‹dîög
;

247 
u_öt32_t
 
	mt˝i_rcv_πt
;

248 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

250 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

255 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

257 
	st˝_md5sig


259 
sockaddr_°‹age
 
	mt˝m_addr
;

260 
u_öt16_t
 
	m__t˝m_∑d1
;

261 
u_öt16_t
 
	mt˝m_keyÀn
;

262 
u_öt32_t
 
	m__t˝m_∑d2
;

263 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

267 
	st˝_ª∑ú_›t


269 
u_öt32_t
 
	m›t_code
;

270 
u_öt32_t
 
	m›t_vÆ
;

276 
	mTCP_NO_QUEUE
,

277 
	mTCP_RECV_QUEUE
,

278 
	mTCP_SEND_QUEUE
,

279 
	mTCP_QUEUES_NR
,

283 
	#TCP_COOKIE_MIN
 8

	)

284 
	#TCP_COOKIE_MAX
 16

	)

285 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

288 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

289 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

293 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

294 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

296 
	#TCP_MSS_DEFAULT
 536U

	)

297 
	#TCP_MSS_DESIRED
 1220U

	)

299 
	st˝_cookõ_å™ß˘i⁄s


301 
u_öt16_t
 
	mt˝˘_Êags
;

302 
u_öt8_t
 
	m__t˝˘_∑d1
;

303 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

304 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

305 
u_öt16_t
 
	mt˝˘_u£d
;

306 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/numa.h

17 #i‚de‡
_NUMA_H


18 
	#_NUMA_H
 1

	)

21 
	#LIBNUMA_API_VERSION
 2

	)

25 
	~<°ddef.h
>

26 
	~<°rög.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<°dlib.h
>

30 #i‡
deföed
(
__x86_64__
Ë|| deföed(
__i386__
)

31 
	#NUMA_NUM_NODES
 128

	)

33 
	#NUMA_NUM_NODES
 2048

	)

36 #ifde‡
__˝lu•lus


41 
n
[
NUMA_NUM_NODES
/(()*8)];

42 } 
	tnodemask_t
;

44 
	sbômask
 {

45 
size
;

46 *
maskp
;

50 
numa_bômask_isbô£t
(c⁄° 
bômask
 *, );

51 
bômask
 *
numa_bômask_£èŒ
(bitmask *);

52 
bômask
 *
numa_bômask_˛óøŒ
(bitmask *);

53 
bômask
 *
numa_bômask_£tbô
(bitmask *, );

54 
bômask
 *
numa_bômask_˛órbô
(bitmask *, );

55 
numa_bômask_nbyãs
(
bômask
 *);

56 
numa_bômask_weight
(c⁄° 
bômask
 *);

57 
bômask
 *
numa_bômask_Æloc
();

58 
numa_bômask_‰ì
(
bômask
 *);

59 
numa_bômask_equÆ
(c⁄° 
bômask
 *, const bitmask *);

60 
c›y_nodemask_to_bômask
(
nodemask_t
 *, 
bômask
 *);

61 
c›y_bômask_to_nodemask
(
bômask
 *, 
nodemask_t
 *);

62 
c›y_bômask_to_bômask
(
bômask
 *, bitmask *);

66 
ölöe
 
nodemask_zîo
(
nodemask_t
 *
mask
)

68 
bômask
 
tmp
;

70 
tmp
.
maskp
 = (*)
mask
;

71 
tmp
.
size
 = (
nodemask_t
) * 8;

72 
numa_bômask_˛óøŒ
(&
tmp
);

75 
ölöe
 
nodemask_zîo_com∑t
(
nodemask_t
 *
mask
)

77 
bômask
 
tmp
;

79 
tmp
.
maskp
 = (*)
mask
;

80 
tmp
.
size
 = (
nodemask_t
) * 8;

81 
numa_bômask_˛óøŒ
(&
tmp
);

84 
ölöe
 
nodemask_£t_com∑t
(
nodemask_t
 *
mask
, 
node
)

86 
mask
->
n
[
node
 / (8*())] |=

87 (1UL<<(
node
%(8*())));

90 
ölöe
 
nodemask_˛r_com∑t
(
nodemask_t
 *
mask
, 
node
)

92 
mask
->
n
[
node
 / (8*())] &=

93 ~(1UL<<(
node
%(8*())));

96 
ölöe
 
nodemask_is£t_com∑t
(c⁄° 
nodemask_t
 *
mask
, 
node
)

98 i‡(()
node
 >
NUMA_NUM_NODES
)

100 i‡(
mask
->
n
[
node
 / (8*())] &

101 (1UL<<(
node
%(8*()))))

106 
ölöe
 
nodemask_equÆ
(c⁄° 
nodemask_t
 *
a
, c⁄°Çodemask_à*
b
)

108 
bômask
 
tmp_a
, 
tmp_b
;

110 
tmp_a
.
maskp
 = (*)
a
;

111 
tmp_a
.
size
 = (
nodemask_t
) * 8;

113 
tmp_b
.
maskp
 = (*)
b
;

114 
tmp_b
.
size
 = (
nodemask_t
) * 8;

116  
numa_bômask_equÆ
(&
tmp_a
, &
tmp_b
);

119 
ölöe
 
nodemask_equÆ_com∑t
(c⁄° 
nodemask_t
 *
a
, c⁄°Çodemask_à*
b
)

121 
bômask
 
tmp_a
, 
tmp_b
;

123 
tmp_a
.
maskp
 = (*)
a
;

124 
tmp_a
.
size
 = (
nodemask_t
) * 8;

126 
tmp_b
.
maskp
 = (*)
b
;

127 
tmp_b
.
size
 = (
nodemask_t
) * 8;

129  
numa_bômask_equÆ
(&
tmp_a
, &
tmp_b
);

134 
numa_avaûabÀ
();

139 
numa_max_node
();

140 
numa_max_possibÀ_node
();

142 
numa_¥e„ºed
();

145 
numa_node_size64
(
node
, *
‰ìp
);

146 
numa_node_size
(
node
, *
‰ìp
);

148 
numa_∑gesize
();

152 
bômask
 *
numa_Æl_nodes_±r
;

155 
bômask
 *
numa_nodes_±r
;

158 
nodemask_t
 
numa_Æl_nodes
;

161 
bômask
 *
numa_Æl_˝us_±r
;

164 
bômask
 *
numa_no_nodes_±r
;

167 
nodemask_t
 
numa_no_nodes
;

170 
numa_böd
(
bômask
 *
nodes
);

173 
numa_£t_öãæóve_mask
(
bômask
 *
nodemask
);

176 
bômask
 *
numa_gë_öãæóve_mask
();

179 
bômask
 *
numa_Æloˇã_nodemask
();

181 
ölöe
 
numa_‰ì_nodemask
(
bômask
 *
b
)

183 
numa_bômask_‰ì
(
b
);

187 
numa_£t_¥e„ºed
(
node
);

190 
numa_£t_loˇœŒoc
();

193 
numa_£t_memböd
(
bômask
 *
nodemask
);

196 
bômask
 *
numa_gë_memböd
();

199 
bômask
 *
numa_gë_mems_Ælowed
();

201 
numa_gë_öãæóve_node
();

207 *
numa_Æloc_öãæóved_sub£t
(
size_t
 
size
, 
bômask
 *
nodemask
);

209 *
numa_Æloc_öãæóved
(
size_t
 
size
);

211 *
numa_Æloc_⁄node
(
size_t
 
size
, 
node
);

213 *
numa_Æloc_loˇl
(
size_t
 
size
);

215 *
numa_Æloc
(
size_t
 
size
);

217 *
numa_ªÆloc
(*
ﬁd_addr
, 
size_t
 
ﬁd_size
, size_à
√w_size
);

219 
numa_‰ì
(*
mem
, 
size_t
 
size
);

225 
numa_öãæóve_mem‹y
(*
mem
, 
size_t
 
size
, 
bômask
 *
mask
);

228 
numa_t⁄ode_mem‹y
(*
°¨t
, 
size_t
 
size
, 
node
);

231 
numa_t⁄odemask_mem‹y
(*
mem
, 
size_t
 
size
, 
bômask
 *
mask
);

234 
numa_£éoˇl_mem‹y
(*
°¨t
, 
size_t
 
size
);

237 
numa_pﬁi˚_mem‹y
(*
°¨t
, 
size_t
 
size
);

240 
numa_run_⁄_node_mask
(
bômask
 *
mask
);

242 
numa_run_⁄_node_mask_Æl
(
bômask
 *
mask
);

244 
numa_run_⁄_node
(
node
);

246 
bômask
 * 
numa_gë_run_node_mask
();

249 
numa_£t_böd_pﬁicy
(
°ri˘
);

252 
numa_£t_°ri˘
(
Êag
);

255 
numa_num_possibÀ_nodes
();

258 
numa_num_possibÀ_˝us
();

261 
numa_num_c⁄figuªd_nodes
();

264 
numa_num_c⁄figuªd_˝us
();

267 
numa_num_èsk_˝us
();

268 
numa_num_thªad_˝us
();

271 
numa_num_èsk_nodes
();

272 
numa_num_thªad_nodes
();

275 
bômask
 *
numa_Æloˇã_˝umask
();

277 
ölöe
 
numa_‰ì_˝umask
(
bômask
 *
b
)

279 
numa_bômask_‰ì
(
b
);

283 
numa_node_to_˝us
(, 
bômask
 *);

286 
numa_node_of_˝u
(
˝u
);

289 
numa_di°™˚
(
node1
, 
node2
);

295 
numa_îr‹
(*
whîe
);

299 
numa_exô_⁄_îr‹
;

302 
numa_w¨n
(
num
, *
fmt
, ...);

305 
numa_exô_⁄_w¨n
;

307 
numa_migøã_∑ges
(
pid
, 
bômask
 *
‰om
, bômask *
to
);

309 
numa_move_∑ges
(
pid
, 
cou¡
, **
∑ges
,

310 c⁄° *
nodes
, *
°©us
, 
Êags
);

312 
numa_sched_gëafföôy
(
pid_t
, 
bômask
 *);

313 
numa_sched_£èfföôy
(
pid_t
, 
bômask
 *);

316 
bômask
 *
numa_∑r£_node°rög
(const *);

320 
bômask
 *
numa_∑r£_node°rög_Æl
(const *);

323 
bômask
 *
numa_∑r£_˝u°rög
(const *);

327 
bômask
 *
numa_∑r£_˝u°rög_Æl
(const *);

335 
ölöe
 
numa_£t_öãæóve_mask_com∑t
(
nodemask_t
 *
nodemask
)

337 
bômask
 
	gtmp
;

339 
	gtmp
.
	gmaskp
 = (*)
nodemask
;

340 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

341 
numa_£t_öãæóve_mask
(&
tmp
);

344 
ölöe
 
nodemask_t
 
numa_gë_öãæóve_mask_com∑t
()

346 
bômask
 *
	gç
;

347 
nodemask_t
 
	gmask
;

349 
	gç
 = 
numa_gë_öãæóve_mask
();

350 
c›y_bômask_to_nodemask
(
ç
, &
mask
);

351 
numa_bômask_‰ì
(
ç
);

352  
	gmask
;

355 
ölöe
 
numa_böd_com∑t
(
nodemask_t
 *
mask
)

357 
bômask
 *
	gç
;

359 
	gç
 = 
numa_Æloˇã_nodemask
();

360 
c›y_nodemask_to_bômask
(
mask
, 
ç
);

361 
numa_böd
(
ç
);

362 
numa_bômask_‰ì
(
ç
);

365 
ölöe
 
numa_£t_memböd_com∑t
(
nodemask_t
 *
mask
)

367 
bômask
 
	gtmp
;

369 
	gtmp
.
	gmaskp
 = (*)
mask
;

370 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

371 
numa_£t_memböd
(&
tmp
);

374 
ölöe
 
nodemask_t
 
numa_gë_memböd_com∑t
()

376 
bômask
 *
	gç
;

377 
nodemask_t
 
	gmask
;

379 
	gç
 = 
numa_gë_memböd
();

380 
c›y_bômask_to_nodemask
(
ç
, &
mask
);

381 
numa_bômask_‰ì
(
ç
);

382  
	gmask
;

385 
ölöe
 *
numa_Æloc_öãæóved_sub£t_com∑t
(
size_t
 
size
,

386 c⁄° 
nodemask_t
 *
mask
)

388 
bômask
 
	gtmp
;

390 
	gtmp
.
	gmaskp
 = (*)
mask
;

391 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

392  
numa_Æloc_öãæóved_sub£t
(
size
, &
tmp
);

395 
ölöe
 
numa_run_⁄_node_mask_com∑t
(c⁄° 
nodemask_t
 *
mask
)

397 
bômask
 
	gtmp
;

399 
	gtmp
.
	gmaskp
 = (*)
mask
;

400 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

401  
numa_run_⁄_node_mask
(&
tmp
);

404 
ölöe
 
nodemask_t
 
numa_gë_run_node_mask_com∑t
()

406 
bômask
 *
	gç
;

407 
nodemask_t
 
	gmask
;

409 
	gç
 = 
numa_gë_run_node_mask
();

410 
c›y_bômask_to_nodemask
(
ç
, &
mask
);

411 
numa_bômask_‰ì
(
ç
);

412  
	gmask
;

415 
ölöe
 
numa_öãæóve_mem‹y_com∑t
(*
mem
, 
size_t
 
size
,

416 c⁄° 
nodemask_t
 *
mask
)

418 
bômask
 
	gtmp
;

420 
	gtmp
.
	gmaskp
 = (*)
mask
;

421 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

422 
numa_öãæóve_mem‹y
(
mem
, 
size
, &
tmp
);

425 
ölöe
 
numa_t⁄odemask_mem‹y_com∑t
(*
mem
, 
size_t
 
size
,

426 c⁄° 
nodemask_t
 *
mask
)

428 
bômask
 
	gtmp
;

430 
	gtmp
.
	gmaskp
 = (*)
mask
;

431 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

432 
numa_t⁄odemask_mem‹y
(
mem
, 
size
, &
tmp
);

435 
ölöe
 
numa_sched_gëafföôy_com∑t
(
pid_t
 
pid
, 
Àn
,

436 *
mask
)

438 
bômask
 
	gtmp
;

440 
	gtmp
.
	gmaskp
 = (*)
mask
;

441 
	gtmp
.
	gsize
 = 
Àn
 * 8;

442  
numa_sched_gëafföôy
(
pid
, &
tmp
);

445 
ölöe
 
numa_sched_£èfföôy_com∑t
(
pid_t
 
pid
, 
Àn
,

446 *
mask
)

448 
bômask
 
	gtmp
;

450 
	gtmp
.
	gmaskp
 = (*)
mask
;

451 
	gtmp
.
	gsize
 = 
Àn
 * 8;

452  
numa_sched_£èfföôy
(
pid
, &
tmp
);

455 
ölöe
 
numa_node_to_˝us_com∑t
(
node
, *
buf„r
,

456 
buf„r_Àn
)

458 
bômask
 
	gtmp
;

460 
	gtmp
.
	gmaskp
 = (*)
buf„r
;

461 
	gtmp
.
	gsize
 = 
buf„r_Àn
 * 8;

462  
numa_node_to_˝us
(
node
, &
tmp
);

471 #ifde‡
NUMA_VERSION1_COMPATIBILITY


472 
	~<numacom∑t1.h
>

475 #ifde‡
__˝lu•lus


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/rados/librados.h

15 #i‚de‡
CEPH_LIBRADOS_H


16 
	#CEPH_LIBRADOS_H


	)

18 #ifde‡
__˝lu•lus


22 
	~<√töë/ö.h
>

23 #i‡
deföed
(
__löux__
)

24 
	~<löux/ty≥s.h
>

25 #ñi‡
deföed
(
__FªeBSD__
)

26 
	~<sys/ty≥s.h
>

28 
	~<uni°d.h
>

29 
	~<°rög.h
>

30 
	~"ødos_ty≥s.h
"

32 
	~<sys/time.h
>

34 #i‚de‡
CEPH_OSD_TMAP_SET


36 
	#CEPH_OSD_TMAP_HDR
 'h'

	)

37 
	#CEPH_OSD_TMAP_SET
 's'

	)

38 
	#CEPH_OSD_TMAP_CREATE
 'c'

	)

39 
	#CEPH_OSD_TMAP_RM
 'r'

	)

42 
	#LIBRADOS_VER_MAJOR
 0

	)

43 
	#LIBRADOS_VER_MINOR
 69

	)

44 
	#LIBRADOS_VER_EXTRA
 1

	)

46 
	#LIBRADOS_VERSION
(
maj
, 
mö
, 
exåa
Ë((maj << 16Ë+ (mö << 8Ë+Éxåa)

	)

48 
	#LIBRADOS_VERSION_CODE
 
	`LIBRADOS_VERSION
(
LIBRADOS_VER_MAJOR
, 
LIBRADOS_VER_MINOR
, 
LIBRADOS_VER_EXTRA
)

	)

50 
	#LIBRADOS_SUPPORTS_WATCH
 1

	)

55 
	#LIBRADOS_LOCK_FLAG_RENEW
 0x1

	)

60 
	#LIBRADOS_CREATE_EXCLUSIVE
 1

	)

61 
	#LIBRADOS_CREATE_IDEMPOTENT
 0

	)

69 
LIBRADOS_OP_FLAG_EXCL
 = 0x1,

71 
LIBRADOS_OP_FLAG_FAILOK
 = 0x2,

73 
LIBRADOS_OP_FLAG_FADVISE_RANDOM
 = 0x4,

75 
LIBRADOS_OP_FLAG_FADVISE_SEQUENTIAL
 = 0x8,

77 
LIBRADOS_OP_FLAG_FADVISE_WILLNEED
 = 0x10,

79 
LIBRADOS_OP_FLAG_FADVISE_DONTNEED
 = 0x20,

81 
LIBRADOS_OP_FLAG_FADVISE_NOCACHE
 = 0x40,

84 #i‡
__GNUC__
 >= 4

85 
	#CEPH_RADOS_API
 
	`__©åibuã__
 ((
	`visibûôy
 ("deÁu…")))

	)

87 
	#CEPH_RADOS_API


	)

99 
LIBRADOS_CMPXATTR_OP_EQ
 = 1,

100 
LIBRADOS_CMPXATTR_OP_NE
 = 2,

101 
LIBRADOS_CMPXATTR_OP_GT
 = 3,

102 
LIBRADOS_CMPXATTR_OP_GTE
 = 4,

103 
LIBRADOS_CMPXATTR_OP_LT
 = 5,

104 
LIBRADOS_CMPXATTR_OP_LTE
 = 6

116 
LIBRADOS_OPERATION_NOFLAG
 = 0,

117 
LIBRADOS_OPERATION_BALANCE_READS
 = 1,

118 
LIBRADOS_OPERATION_LOCALIZE_READS
 = 2,

119 
LIBRADOS_OPERATION_ORDER_READS_WRITES
 = 4,

120 
LIBRADOS_OPERATION_IGNORE_CACHE
 = 8,

121 
LIBRADOS_OPERATION_SKIPRWLOCKS
 = 16,

122 
LIBRADOS_OPERATION_IGNORE_OVERLAY
 = 32,

126 
LIBRADOS_OPERATION_FULL_TRY
 = 64,

133 
	#LIBRADOS_SNAP_HEAD
 ((
uöt64_t
)(-2))

	)

134 
	#LIBRADOS_SNAP_DIR
 ((
uöt64_t
)(-1))

	)

145 *
	tødos_t
;

158 *
	tødos_c⁄fig_t
;

180 *
	tødos_io˘x_t
;

190 *
	tødos_li°_˘x_t
;

198 * 
	tødos_obje˘_li°_curs‹
;

200 
	sødos_obje˘_li°_ôem
 {

201 
size_t
 
oid_Àngth
;

202 *
oid
;

204 
size_t
 
n•a˚_Àngth
;

205 *
n•a˚
;

207 
size_t
 
loˇt‹_Àngth
;

208 *
loˇt‹
;

209 } 
	tødos_obje˘_li°_ôem
;

215 
uöt64_t
 
	tødos_¢≠_t
;

223 *
	tødos_x©ås_ôî_t
;

232 *
	tødos_om≠_ôî_t
;

238 
	sødos_poﬁ_°©_t
 {

240 
uöt64_t
 
num_byãs
;

242 
uöt64_t
 
num_kb
;

244 
uöt64_t
 
num_obje˘s
;

246 
uöt64_t
 
num_obje˘_˛⁄es
;

248 
uöt64_t
 
num_obje˘_c›õs
;

249 
uöt64_t
 
num_obje˘s_missög_⁄_¥im¨y
;

251 
uöt64_t
 
num_obje˘s_unfound
;

254 
uöt64_t
 
num_obje˘s_degøded
;

255 
uöt64_t
 
num_rd
;

256 
uöt64_t
 
num_rd_kb
;

257 
uöt64_t
 
num_wr
;

258 
uöt64_t
 
num_wr_kb
;

265 
	sødos_˛u°î_°©_t
 {

266 
uöt64_t
 
kb
, 
kb_u£d
, 
kb_avaû
;

267 
uöt64_t
 
num_obje˘s
;

291 *
	tødos_wrôe_›_t
;

312 *
	tødos_ªad_›_t
;

329 
CEPH_RADOS_API
 
ødos_vîsi⁄
(*
maj‹
, *
mö‹
, *
exåa
);

350 
CEPH_RADOS_API
 
ødos_¸óã
(
ødos_t
 *
˛u°î
, c⁄° * c⁄° 
id
);

360 
CEPH_RADOS_API
 
ødos_¸óã2
(
ødos_t
 *
p˛u°î
,

361 c⁄° *c⁄° 
˛u°î«me
,

362 c⁄° * c⁄° 
«me
, 
uöt64_t
 
Êags
);

373 
CEPH_RADOS_API
 
ødos_¸óã_wôh_c⁄ãxt
(
ødos_t
 *
˛u°î
,

374 
ødos_c⁄fig_t
 
c˘
);

390 
CEPH_RADOS_API
 
ødos_pög_m⁄ô‹
(
ødos_t
 
˛u°î
, c⁄° *
m⁄_id
,

391 **
out°r
, 
size_t
 *
out°æí
);

408 
CEPH_RADOS_API
 
ødos_c⁄√˘
(
ødos_t
 
˛u°î
);

428 
CEPH_RADOS_API
 
ødos_shutdown
(
ødos_t
 
˛u°î
);

466 
CEPH_RADOS_API
 
ødos_c⁄f_ªad_fûe
(
ødos_t
 
˛u°î
, c⁄° *
∑th
);

485 
CEPH_RADOS_API
 
ødos_c⁄f_∑r£_¨gv
(
ødos_t
 
˛u°î
, 
¨gc
,

486 c⁄° **
¨gv
);

502 
CEPH_RADOS_API
 
ødos_c⁄f_∑r£_¨gv_ªmaödî
(
ødos_t
 
˛u°î
, 
¨gc
,

503 c⁄° **
¨gv
,

504 c⁄° **
ªm¨gv
);

520 
CEPH_RADOS_API
 
ødos_c⁄f_∑r£_ív
(
ødos_t
 
˛u°î
, c⁄° *
v¨
);

533 
CEPH_RADOS_API
 
ødos_c⁄f_£t
(
ødos_t
 
˛u°î
, c⁄° *
›ti⁄
,

534 c⁄° *
vÆue
);

547 
CEPH_RADOS_API
 
ødos_c⁄f_gë
(
ødos_t
 
˛u°î
, c⁄° *
›ti⁄
,

548 *
buf
, 
size_t
 
Àn
);

563 
CEPH_RADOS_API
 
ødos_˛u°î_°©
(
ødos_t
 
˛u°î
,

564 
ødos_˛u°î_°©_t
 *
ªsu…
);

578 
CEPH_RADOS_API
 
ødos_˛u°î_fsid
(
ødos_t
 
˛u°î
, *
buf
, 
size_t
 
Àn
);

586 
CEPH_RADOS_API
 
ødos_waô_f‹_œã°_osdm≠
(
ødos_t
 
˛u°î
);

615 
CEPH_RADOS_API
 
ødos_poﬁ_li°
(
ødos_t
 
˛u°î
, *
buf
, 
size_t
 
Àn
);

633 
CEPH_RADOS_API
 
ødos_öc⁄si°ít_pg_li°
(
ødos_t
 
˛u°î
, 
öt64_t
 
poﬁ
,

634 *
buf
, 
size_t
 
Àn
);

644 
CEPH_RADOS_API
 
ødos_c⁄fig_t
 
ødos_c˘
(
ødos_t
 
˛u°î
);

654 
CEPH_RADOS_API
 
uöt64_t
 
ødos_gë_ö°™˚_id
(
ødos_t
 
˛u°î
);

667 
CEPH_RADOS_API
 
ødos_io˘x_¸óã
(
ødos_t
 
˛u°î
, c⁄° *
poﬁ_«me
,

668 
ødos_io˘x_t
 *
io˘x
);

669 
CEPH_RADOS_API
 
ødos_io˘x_¸óã2
(
ødos_t
 
˛u°î
, 
öt64_t
 
poﬁ_id
,

670 
ødos_io˘x_t
 *
io˘x
);

692 
CEPH_RADOS_API
 
ødos_io˘x_de°roy
(
ødos_io˘x_t
 
io
);

700 
CEPH_RADOS_API
 
ødos_c⁄fig_t
 
ødos_io˘x_c˘
(
ødos_io˘x_t
 
io
);

710 
CEPH_RADOS_API
 
ødos_t
 
ødos_io˘x_gë_˛u°î
(
ødos_io˘x_t
 
io
);

721 
CEPH_RADOS_API
 
ødos_io˘x_poﬁ_°©
(
ødos_io˘x_t
 
io
,

722 
ødos_poﬁ_°©_t
 *
°©s
);

732 
CEPH_RADOS_API
 
öt64_t
 
ødos_poﬁ_lookup
(
ødos_t
 
˛u°î
,

733 c⁄° *
poﬁ_«me
);

744 
CEPH_RADOS_API
 
ødos_poﬁ_ªvî£_lookup
(
ødos_t
 
˛u°î
, 
öt64_t
 
id
,

745 *
buf
, 
size_t
 
maxÀn
);

757 
CEPH_RADOS_API
 
ødos_poﬁ_¸óã
(
ødos_t
 
˛u°î
, c⁄° *
poﬁ_«me
);

770 
CEPH_RADOS_API
 
ødos_poﬁ_¸óã_wôh_auid
(
ødos_t
 
˛u°î
,

771 c⁄° *
poﬁ_«me
,

772 
uöt64_t
 
auid
);

782 
CEPH_RADOS_API
 
ødos_poﬁ_¸óã_wôh_¸ush_ruÀ
(
ødos_t
 
˛u°î
,

783 c⁄° *
poﬁ_«me
,

784 
uöt8_t
 
¸ush_ruÀ_num
);

798 
CEPH_RADOS_API
 
ødos_poﬁ_¸óã_wôh_Æl
(
ødos_t
 
˛u°î
,

799 c⁄° *
poﬁ_«me
,

800 
uöt64_t
 
auid
,

801 
uöt8_t
 
¸ush_ruÀ_num
);

814 
CEPH_RADOS_API
 
ødos_poﬁ_gë_ba£_tõr
(
ødos_t
 
˛u°î
, 
öt64_t
 
poﬁ
,

815 
öt64_t
* 
ba£_tõr
);

827 
CEPH_RADOS_API
 
ødos_poﬁ_dñëe
(
ødos_t
 
˛u°î
, c⁄° *
poﬁ_«me
);

839 
CEPH_RADOS_API
 
ødos_io˘x_poﬁ_£t_auid
(
ødos_io˘x_t
 
io
, 
uöt64_t
 
auid
);

848 
CEPH_RADOS_API
 
ødos_io˘x_poﬁ_gë_auid
(
ødos_io˘x_t
 
io
, 
uöt64_t
 *
auid
);

851 
CEPH_RADOS_API
 
ødos_io˘x_poﬁ_ªquúes_Æignmít
(
ødos_io˘x_t
 
io
)

852 
__©åibuã__
((
dïªˇãd
));

861 
CEPH_RADOS_API
 
ødos_io˘x_poﬁ_ªquúes_Æignmít2
(
ødos_io˘x_t
 
io
,

862 *
ªquúes
);

865 
CEPH_RADOS_API
 
uöt64_t
 
ødos_io˘x_poﬁ_ªquúed_Æignmít
(
ødos_io˘x_t
 
io
)

866 
__©åibuã__
((
dïªˇãd
));

875 
CEPH_RADOS_API
 
ødos_io˘x_poﬁ_ªquúed_Æignmít2
(
ødos_io˘x_t
 
io
,

876 
uöt64_t
 *
Æignmít
);

884 
CEPH_RADOS_API
 
öt64_t
 
ødos_io˘x_gë_id
(
ødos_io˘x_t
 
io
);

894 
CEPH_RADOS_API
 
ødos_io˘x_gë_poﬁ_«me
(
ødos_io˘x_t
 
io
, *
buf
,

895 
maxÀn
);

920 
CEPH_RADOS_API
 
ødos_io˘x_loˇt‹_£t_key
(
ødos_io˘x_t
 
io
,

921 c⁄° *
key
);

934 
CEPH_RADOS_API
 
ødos_io˘x_£t_«me•a˚
(
ødos_io˘x_t
 
io
,

935 c⁄° *
n•a˚
);

949 
CEPH_RADOS_API
 
ødos_nobje˘s_li°_›í
(
ødos_io˘x_t
 
io
,

950 
ødos_li°_˘x_t
 *
˘x
);

958 
CEPH_RADOS_API
 
uöt32_t
 
ødos_nobje˘s_li°_gë_pg_hash_posôi⁄
(
ødos_li°_˘x_t
 
˘x
);

967 
CEPH_RADOS_API
 
uöt32_t
 
ødos_nobje˘s_li°_£ek
(
ødos_li°_˘x_t
 
˘x
,

968 
uöt32_t
 
pos
);

982 
CEPH_RADOS_API
 
ødos_nobje˘s_li°_√xt
(
ødos_li°_˘x_t
 
˘x
,

983 c⁄° **
íåy
,

984 c⁄° **
key
,

985 c⁄° **
n•a˚
);

995 
CEPH_RADOS_API
 
ødos_nobje˘s_li°_˛o£
(
ødos_li°_˘x_t
 
˘x
);

997 
CEPH_RADOS_API
 
ødos_obje˘_li°_curs‹
 
ødos_obje˘_li°_begö
(
ødos_io˘x_t
 
io
);

998 
CEPH_RADOS_API
 
ødos_obje˘_li°_curs‹
 
ødos_obje˘_li°_íd
(
ødos_io˘x_t
 
io
);

1000 
CEPH_RADOS_API
 
ødos_obje˘_li°_is_íd
(
ødos_io˘x_t
 
io
,

1001 
ødos_obje˘_li°_curs‹
 
cur
);

1003 
CEPH_RADOS_API
 
ødos_obje˘_li°_curs‹_‰ì
(
ødos_io˘x_t
 
io
,

1004 
ødos_obje˘_li°_curs‹
 
cur
);

1006 
CEPH_RADOS_API
 
ødos_obje˘_li°_curs‹_cmp
(
ødos_io˘x_t
 
io
,

1007 
ødos_obje˘_li°_curs‹
 
lhs
,Ñados_obje˘_li°_curs‹ 
rhs
);

1012 
CEPH_RADOS_API
 
ødos_obje˘_li°
(
ødos_io˘x_t
 
io
,

1013 c⁄° 
ødos_obje˘_li°_curs‹
 
°¨t
,

1014 c⁄° 
ødos_obje˘_li°_curs‹
 
föish
,

1015 c⁄° 
size_t
 
ªsu…_size
,

1016 c⁄° *
fûãr_buf
,

1017 c⁄° 
size_t
 
fûãr_buf_Àn
,

1018 
ødos_obje˘_li°_ôem
 *
ªsu…s
,

1019 
ødos_obje˘_li°_curs‹
 *
√xt
);

1021 
CEPH_RADOS_API
 
ødos_obje˘_li°_‰ì
(

1022 c⁄° 
size_t
 
ªsu…_size
,

1023 
ødos_obje˘_li°_ôem
 *
ªsu…s
);

1038 
CEPH_RADOS_API
 
ødos_obje˘_li°_¶i˚
(
ødos_io˘x_t
 
io
,

1039 c⁄° 
ødos_obje˘_li°_curs‹
 
°¨t
,

1040 c⁄° 
ødos_obje˘_li°_curs‹
 
föish
,

1041 c⁄° 
size_t
 
n
,

1042 c⁄° 
size_t
 
m
,

1043 
ødos_obje˘_li°_curs‹
 *
•lô_°¨t
,

1044 
ødos_obje˘_li°_curs‹
 *
•lô_föish
);

1058 
CEPH_RADOS_API
 
ødos_obje˘s_li°_›í
(
ødos_io˘x_t
 
io
,

1059 
ødos_li°_˘x_t
 *
˘x
);

1064 
CEPH_RADOS_API
 
uöt32_t
 
ødos_obje˘s_li°_gë_pg_hash_posôi⁄
(
ødos_li°_˘x_t
 
˘x
);

1069 
CEPH_RADOS_API
 
uöt32_t
 
ødos_obje˘s_li°_£ek
(
ødos_li°_˘x_t
 
˘x
,

1070 
uöt32_t
 
pos
);

1075 
CEPH_RADOS_API
 
ødos_obje˘s_li°_√xt
(
ødos_li°_˘x_t
 
˘x
,

1076 c⁄° **
íåy
,

1077 c⁄° **
key
);

1082 
CEPH_RADOS_API
 
ødos_obje˘s_li°_˛o£
(
ødos_li°_˘x_t
 
˘x
);

1122 
CEPH_RADOS_API
 
ødos_io˘x_¢≠_¸óã
(
ødos_io˘x_t
 
io
,

1123 c⁄° *
¢≠«me
);

1132 
CEPH_RADOS_API
 
ødos_io˘x_¢≠_ªmove
(
ødos_io˘x_t
 
io
,

1133 c⁄° *
¢≠«me
);

1146 
CEPH_RADOS_API
 
ødos_io˘x_¢≠_rﬁlback
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1147 c⁄° *
¢≠«me
);

1152 
CEPH_RADOS_API
 
ødos_rﬁlback
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1153 c⁄° *
¢≠«me
)

1154 
__©åibuã__
((
dïªˇãd
));

1166 
CEPH_RADOS_API
 
ødos_io˘x_¢≠_£t_ªad
(
ødos_io˘x_t
 
io
,

1167 
ødos_¢≠_t
 
¢≠
);

1180 
CEPH_RADOS_API
 
ødos_io˘x_£lfm™aged_¢≠_¸óã
(
ødos_io˘x_t
 
io
,

1181 
ødos_¢≠_t
 *
¢≠id
);

1193 
CEPH_RADOS_API
 
ødos_io˘x_£lfm™aged_¢≠_ªmove
(
ødos_io˘x_t
 
io
,

1194 
ødos_¢≠_t
 
¢≠id
);

1207 
CEPH_RADOS_API
 
ødos_io˘x_£lfm™aged_¢≠_rﬁlback
(
ødos_io˘x_t
 
io
,

1208 c⁄° *
oid
,

1209 
ødos_¢≠_t
 
¢≠id
);

1223 
CEPH_RADOS_API
 
ødos_io˘x_£lfm™aged_¢≠_£t_wrôe_˘x
(
ødos_io˘x_t
 
io
,

1224 
ødos_¢≠_t
 
£q
,

1225 
ødos_¢≠_t
 *
¢≠s
,

1226 
num_¢≠s
);

1241 
CEPH_RADOS_API
 
ødos_io˘x_¢≠_li°
(
ødos_io˘x_t
 
io
, 
ødos_¢≠_t
 *
¢≠s
,

1242 
maxÀn
);

1252 
CEPH_RADOS_API
 
ødos_io˘x_¢≠_lookup
(
ødos_io˘x_t
 
io
, c⁄° *
«me
,

1253 
ødos_¢≠_t
 *
id
);

1265 
CEPH_RADOS_API
 
ødos_io˘x_¢≠_gë_«me
(
ødos_io˘x_t
 
io
, 
ødos_¢≠_t
 
id
,

1266 *
«me
, 
maxÀn
);

1276 
CEPH_RADOS_API
 
ødos_io˘x_¢≠_gë_°amp
(
ødos_io˘x_t
 
io
, 
ødos_¢≠_t
 
id
,

1277 
time_t
 *
t
);

1303 
CEPH_RADOS_API
 
uöt64_t
 
ødos_gë_œ°_vîsi⁄
(
ødos_io˘x_t
 
io
);

1317 
CEPH_RADOS_API
 
ødos_wrôe
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1318 c⁄° *
buf
, 
size_t
 
Àn
, 
uöt64_t
 
off
);

1333 
CEPH_RADOS_API
 
ødos_wrôe_fuŒ
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1334 c⁄° *
buf
, 
size_t
 
Àn
);

1354 
CEPH_RADOS_API
 
ødos_˛⁄e_ønge
(
ødos_io˘x_t
 
io
, c⁄° *
d°
,

1355 
uöt64_t
 
d°_off
, c⁄° *
§c
,

1356 
uöt64_t
 
§c_off
, 
size_t
 
Àn
);

1368 
CEPH_RADOS_API
 
ødos_≠≥nd
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1369 c⁄° *
buf
, 
size_t
 
Àn
);

1385 
CEPH_RADOS_API
 
ødos_ªad
(
ødos_io˘x_t
 
io
, c⁄° *
oid
, *
buf
,

1386 
size_t
 
Àn
, 
uöt64_t
 
off
);

1397 
CEPH_RADOS_API
 
ødos_ªmove
(
ødos_io˘x_t
 
io
, c⁄° *
oid
);

1410 
CEPH_RADOS_API
 
ødos_åunc
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1411 
uöt64_t
 
size
);

1433 
CEPH_RADOS_API
 
ødos_gëx©å
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

1434 c⁄° *
«me
, *
buf
, 
size_t
 
Àn
);

1446 
CEPH_RADOS_API
 
ødos_£tx©å
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

1447 c⁄° *
«me
, c⁄° *
buf
,

1448 
size_t
 
Àn
);

1458 
CEPH_RADOS_API
 
ødos_rmx©å
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

1459 c⁄° *
«me
);

1471 
CEPH_RADOS_API
 
ødos_gëx©ås
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1472 
ødos_x©ås_ôî_t
 *
ôî
);

1489 
CEPH_RADOS_API
 
ødos_gëx©ås_√xt
(
ødos_x©ås_ôî_t
 
ôî
,

1490 c⁄° **
«me
, c⁄° **
vÆ
,

1491 
size_t
 *
Àn
);

1500 
CEPH_RADOS_API
 
ødos_gëx©ås_íd
(
ødos_x©ås_ôî_t
 
ôî
);

1521 
CEPH_RADOS_API
 
ødos_om≠_gë_√xt
(
ødos_om≠_ôî_t
 
ôî
,

1522 **
key
,

1523 **
vÆ
,

1524 
size_t
 *
Àn
);

1533 
CEPH_RADOS_API
 
ødos_om≠_gë_íd
(
ødos_om≠_ôî_t
 
ôî
);

1546 
CEPH_RADOS_API
 
ødos_°©
(
ødos_io˘x_t
 
io
, c⁄° *
o
, 
uöt64_t
 *
psize
,

1547 
time_t
 *
pmtime
);

1595 
CEPH_RADOS_API
 
ødos_tm≠_upd©e
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

1596 c⁄° *
cmdbuf
, 
size_t
 
cmdbuÊí
);

1620 
CEPH_RADOS_API
 
ødos_tm≠_put
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

1621 c⁄° *
buf
, 
size_t
 
buÊí
);

1636 
CEPH_RADOS_API
 
ødos_tm≠_gë
(
ødos_io˘x_t
 
io
, c⁄° *
o
, *
buf
,

1637 
size_t
 
buÊí
);

1661 
CEPH_RADOS_API
 
ødos_exec
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1662 c⁄° *
˛s
, c⁄° *
mëhod
,

1663 c⁄° *
ö_buf
, 
size_t
 
ö_Àn
, *
buf
,

1664 
size_t
 
out_Àn
);

1682 *
	tødos_com∂ëi⁄_t
;

1690 (*
ødos_ˇŒback_t
)(
	tødos_com∂ëi⁄_t
 
	tcb
, *
	t¨g
);

1714 
CEPH_RADOS_API
 
ødos_aio_¸óã_com∂ëi⁄
(*
cb_¨g
,

1715 
ødos_ˇŒback_t
 
cb_com∂ëe
,

1716 
ødos_ˇŒback_t
 
cb_ß„
,

1717 
ødos_com∂ëi⁄_t
 *
pc
);

1729 
CEPH_RADOS_API
 
ødos_aio_waô_f‹_com∂ëe
(
ødos_com∂ëi⁄_t
 
c
);

1741 
CEPH_RADOS_API
 
ødos_aio_waô_f‹_ß„
(
ødos_com∂ëi⁄_t
 
c
);

1752 
CEPH_RADOS_API
 
ødos_aio_is_com∂ëe
(
ødos_com∂ëi⁄_t
 
c
);

1763 
CEPH_RADOS_API
 
ødos_aio_is_ß„
(
ødos_com∂ëi⁄_t
 
c
);

1775 
CEPH_RADOS_API
 
ødos_aio_waô_f‹_com∂ëe_™d_cb
(
ødos_com∂ëi⁄_t
 
c
);

1787 
CEPH_RADOS_API
 
ødos_aio_waô_f‹_ß„_™d_cb
(
ødos_com∂ëi⁄_t
 
c
);

1795 
CEPH_RADOS_API
 
ødos_aio_is_com∂ëe_™d_cb
(
ødos_com∂ëi⁄_t
 
c
);

1803 
CEPH_RADOS_API
 
ødos_aio_is_ß„_™d_cb
(
ødos_com∂ëi⁄_t
 
c
);

1819 
CEPH_RADOS_API
 
ødos_aio_gë_ªtu∫_vÆue
(
ødos_com∂ëi⁄_t
 
c
);

1835 
CEPH_RADOS_API
 
uöt64_t
 
ødos_aio_gë_vîsi⁄
(
ødos_com∂ëi⁄_t
 
c
);

1845 
CEPH_RADOS_API
 
ødos_aio_ªÀa£
(
ødos_com∂ëi⁄_t
 
c
);

1862 
CEPH_RADOS_API
 
ødos_aio_wrôe
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1863 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
,

1864 c⁄° *
buf
, 
size_t
 
Àn
, 
uöt64_t
 
off
);

1882 
CEPH_RADOS_API
 
ødos_aio_≠≥nd
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1883 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
,

1884 c⁄° *
buf
, 
size_t
 
Àn
);

1904 
CEPH_RADOS_API
 
ødos_aio_wrôe_fuŒ
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1905 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
,

1906 c⁄° *
buf
, 
size_t
 
Àn
);

1922 
CEPH_RADOS_API
 
ødos_aio_ªmove
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1923 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
);

1944 
CEPH_RADOS_API
 
ødos_aio_ªad
(
ødos_io˘x_t
 
io
, c⁄° *
oid
,

1945 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
,

1946 *
buf
, 
size_t
 
Àn
, 
uöt64_t
 
off
);

1960 
CEPH_RADOS_API
 
ødos_aio_Êush
(
ødos_io˘x_t
 
io
);

1972 
CEPH_RADOS_API
 
ødos_aio_Êush_async
(
ødos_io˘x_t
 
io
,

1973 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
);

1985 
CEPH_RADOS_API
 
ødos_aio_°©
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

1986 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
,

1987 
uöt64_t
 *
psize
, 
time_t
 *
pmtime
);

1996 
CEPH_RADOS_API
 
ødos_aio_ˇn˚l
(
ødos_io˘x_t
 
io
,

1997 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
);

2032 (*
ødos_w©chcb_t
)(
	tuöt8_t
 
	t›code
, 
	tuöt64_t
 
	tvî
, *
	t¨g
);

2047 (*
ødos_w©chcb2_t
)(*
	t¨g
,

2048 
	tuöt64_t
 
	tnŸify_id
,

2049 
	tuöt64_t
 
	th™dÀ
,

2050 
	tuöt64_t
 
	tnŸifõr_id
,

2051 *
	td©a
,

2052 
	tsize_t
 
	td©a_Àn
);

2066 (*
ødos_w©chîrcb_t
)(*
	t¥e
, 
	tuöt64_t
 
	tcookõ
, 
	tîr
);

2093 
CEPH_RADOS_API
 
ødos_w©ch
(
ødos_io˘x_t
 
io
, c⁄° *
o
, 
uöt64_t
 
vî
,

2094 
uöt64_t
 *
cookõ
,

2095 
ødos_w©chcb_t
 
w©chcb
, *
¨g
)

2096 
__©åibuã__
((
dïªˇãd
));

2120 
CEPH_RADOS_API
 
ødos_w©ch2
(
ødos_io˘x_t
 
io
, c⁄° *
o
, 
uöt64_t
 *
cookõ
,

2121 
ødos_w©chcb2_t
 
w©chcb
,

2122 
ødos_w©chîrcb_t
 
w©chîrcb
,

2123 *
¨g
);

2147 
CEPH_RADOS_API
 
ødos_aio_w©ch
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

2148 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
, 
uöt64_t
 *
h™dÀ
,

2149 
ødos_w©chcb2_t
 
w©chcb
,

2150 
ødos_w©chîrcb_t
 
w©chîrcb
,

2151 *
¨g
);

2167 
CEPH_RADOS_API
 
ødos_w©ch_check
(
ødos_io˘x_t
 
io
, 
uöt64_t
 
cookõ
);

2180 
CEPH_RADOS_API
 
ødos_unw©ch
(
ødos_io˘x_t
 
io
, c⁄° *
o
, 
uöt64_t
 
cookõ
)

2181 
__©åibuã__
((
dïªˇãd
));

2193 
CEPH_RADOS_API
 
ødos_unw©ch2
(
ødos_io˘x_t
 
io
, 
uöt64_t
 
cookõ
);

2206 
CEPH_RADOS_API
 
ødos_aio_unw©ch
(
ødos_io˘x_t
 
io
, 
uöt64_t
 
cookõ
,

2207 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
);

2225 
CEPH_RADOS_API
 
ødos_nŸify
(
ødos_io˘x_t
 
io
, c⁄° *
o
, 
uöt64_t
 
vî
,

2226 c⁄° *
buf
, 
buf_Àn
)

2227 
__©åibuã__
((
dïªˇãd
));

2275 
CEPH_RADOS_API
 
ødos_nŸify2
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

2276 c⁄° *
buf
, 
buf_Àn
,

2277 
uöt64_t
 
timeout_ms
,

2278 **
ª∂y_buf„r
, 
size_t
 *
ª∂y_buf„r_Àn
);

2279 
CEPH_RADOS_API
 
ødos_aio_nŸify
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

2280 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
,

2281 c⁄° *
buf
, 
buf_Àn
,

2282 
uöt64_t
 
timeout_ms
, **
ª∂y_buf„r
,

2283 
size_t
 *
ª∂y_buf„r_Àn
);

2296 
CEPH_RADOS_API
 
ødos_nŸify_ack
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

2297 
uöt64_t
 
nŸify_id
, uöt64_à
cookõ
,

2298 c⁄° *
buf
, 
buf_Àn
);

2312 
CEPH_RADOS_API
 
ødos_w©ch_Êush
(
ødos_t
 
˛u°î
);

2327 
CEPH_RADOS_API
 
ødos_aio_w©ch_Êush
(
ødos_t
 
˛u°î
, 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
);

2341 
CEPH_RADOS_API
 
ødos_ˇche_pö
(
ødos_io˘x_t
 
io
, c⁄° *
o
);

2352 
CEPH_RADOS_API
 
ødos_ˇche_u≈ö
(
ødos_io˘x_t
 
io
, c⁄° *
o
);

2373 
CEPH_RADOS_API
 
ødos_£t_Æloc_höt
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

2374 
uöt64_t
 
ex≥˘ed_obje˘_size
,

2375 
uöt64_t
 
ex≥˘ed_wrôe_size
);

2401 
CEPH_RADOS_API
 
ødos_wrôe_›_t
 
ødos_¸óã_wrôe_›
();

2407 
CEPH_RADOS_API
 
ødos_ªÀa£_wrôe_›
(
ødos_wrôe_›_t
 
wrôe_›
);

2414 
CEPH_RADOS_API
 
ødos_wrôe_›_£t_Êags
(
ødos_wrôe_›_t
 
wrôe_›
,

2415 
Êags
);

2421 
CEPH_RADOS_API
 
ødos_wrôe_›_as£π_exi°s
(
ødos_wrôe_›_t
 
wrôe_›
);

2436 
CEPH_RADOS_API
 
ødos_wrôe_›_as£π_vîsi⁄
(
ødos_wrôe_›_t
 
wrôe_›
, 
uöt64_t
 
vî
);

2449 
CEPH_RADOS_API
 
ødos_wrôe_›_cmpx©å
(
ødos_wrôe_›_t
 
wrôe_›
,

2450 c⁄° *
«me
,

2451 
uöt8_t
 
com∑ris⁄_›î©‹
,

2452 c⁄° *
vÆue
,

2453 
size_t
 
vÆue_Àn
);

2468 
CEPH_RADOS_API
 
ødos_wrôe_›_om≠_cmp
(
ødos_wrôe_›_t
 
wrôe_›
,

2469 c⁄° *
key
,

2470 
uöt8_t
 
com∑ris⁄_›î©‹
,

2471 c⁄° *
vÆ
,

2472 
size_t
 
vÆ_Àn
,

2473 *
¥vÆ
);

2482 
CEPH_RADOS_API
 
ødos_wrôe_›_£tx©å
(
ødos_wrôe_›_t
 
wrôe_›
,

2483 c⁄° *
«me
,

2484 c⁄° *
vÆue
,

2485 
size_t
 
vÆue_Àn
);

2492 
CEPH_RADOS_API
 
ødos_wrôe_›_rmx©å
(
ødos_wrôe_›_t
 
wrôe_›
,

2493 c⁄° *
«me
);

2503 
CEPH_RADOS_API
 
ødos_wrôe_›_¸óã
(
ødos_wrôe_›_t
 
wrôe_›
,

2504 
ex˛usive
,

2505 c⁄° * 
ˇãg‹y
);

2514 
CEPH_RADOS_API
 
ødos_wrôe_›_wrôe
(
ødos_wrôe_›_t
 
wrôe_›
,

2515 c⁄° *
buf„r
,

2516 
size_t
 
Àn
,

2517 
uöt64_t
 
off£t
);

2525 
CEPH_RADOS_API
 
ødos_wrôe_›_wrôe_fuŒ
(
ødos_wrôe_›_t
 
wrôe_›
,

2526 c⁄° *
buf„r
,

2527 
size_t
 
Àn
);

2535 
CEPH_RADOS_API
 
ødos_wrôe_›_≠≥nd
(
ødos_wrôe_›_t
 
wrôe_›
,

2536 c⁄° *
buf„r
,

2537 
size_t
 
Àn
);

2542 
CEPH_RADOS_API
 
ødos_wrôe_›_ªmove
(
ødos_wrôe_›_t
 
wrôe_›
);

2549 
CEPH_RADOS_API
 
ødos_wrôe_›_åunˇã
(
ødos_wrôe_›_t
 
wrôe_›
,

2550 
uöt64_t
 
off£t
);

2558 
CEPH_RADOS_API
 
ødos_wrôe_›_zîo
(
ødos_wrôe_›_t
 
wrôe_›
,

2559 
uöt64_t
 
off£t
,

2560 
uöt64_t
 
Àn
);

2573 
CEPH_RADOS_API
 
ødos_wrôe_›_exec
(
ødos_wrôe_›_t
 
wrôe_›
,

2574 c⁄° *
˛s
,

2575 c⁄° *
mëhod
,

2576 c⁄° *
ö_buf
,

2577 
size_t
 
ö_Àn
,

2578 *
¥vÆ
);

2589 
CEPH_RADOS_API
 
ødos_wrôe_›_om≠_£t
(
ødos_wrôe_›_t
 
wrôe_›
,

2590 c⁄°* c⁄°* 
keys
,

2591 c⁄°* c⁄°* 
vÆs
,

2592 c⁄° 
size_t
 *
Àns
,

2593 
size_t
 
num
);

2602 
CEPH_RADOS_API
 
ødos_wrôe_›_om≠_rm_keys
(
ødos_wrôe_›_t
 
wrôe_›
,

2603 c⁄°* c⁄°* 
keys
,

2604 
size_t
 
keys_Àn
);

2611 
CEPH_RADOS_API
 
ødos_wrôe_›_om≠_˛ór
(
ødos_wrôe_›_t
 
wrôe_›
);

2620 
CEPH_RADOS_API
 
ødos_wrôe_›_£t_Æloc_höt
(
ødos_wrôe_›_t
 
wrôe_›
,

2621 
uöt64_t
 
ex≥˘ed_obje˘_size
,

2622 
uöt64_t
 
ex≥˘ed_wrôe_size
);

2632 
CEPH_RADOS_API
 
ødos_wrôe_›_›î©e
(
ødos_wrôe_›_t
 
wrôe_›
,

2633 
ødos_io˘x_t
 
io
,

2634 c⁄° *
oid
,

2635 
time_t
 *
mtime
,

2636 
Êags
);

2646 
CEPH_RADOS_API
 
ødos_wrôe_›_›î©e2
(
ødos_wrôe_›_t
 
wrôe_›
,

2647 
ødos_io˘x_t
 
io
,

2648 c⁄° *
oid
,

2649 
time•ec
 *
mtime
,

2650 
Êags
);

2661 
CEPH_RADOS_API
 
ødos_aio_wrôe_›_›î©e
(
ødos_wrôe_›_t
 
wrôe_›
,

2662 
ødos_io˘x_t
 
io
,

2663 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
,

2664 c⁄° *
oid
,

2665 
time_t
 *
mtime
,

2666 
Êags
);

2676 
CEPH_RADOS_API
 
ødos_ªad_›_t
 
ødos_¸óã_ªad_›
();

2682 
CEPH_RADOS_API
 
ødos_ªÀa£_ªad_›
(
ødos_ªad_›_t
 
ªad_›
);

2689 
CEPH_RADOS_API
 
ødos_ªad_›_£t_Êags
(
ødos_ªad_›_t
 
ªad_›
, 
Êags
);

2695 
CEPH_RADOS_API
 
ødos_ªad_›_as£π_exi°s
(
ødos_ªad_›_t
 
ªad_›
);

2710 
CEPH_RADOS_API
 
ødos_ªad_›_as£π_vîsi⁄
(
ødos_ªad_›_t
 
ªad_›
, 
uöt64_t
 
vî
);

2723 
CEPH_RADOS_API
 
ødos_ªad_›_cmpx©å
(
ødos_ªad_›_t
 
ªad_›
,

2724 c⁄° *
«me
,

2725 
uöt8_t
 
com∑ris⁄_›î©‹
,

2726 c⁄° *
vÆue
,

2727 
size_t
 
vÆue_Àn
);

2736 
CEPH_RADOS_API
 
ødos_ªad_›_gëx©ås
(
ødos_ªad_›_t
 
ªad_›
,

2737 
ødos_x©ås_ôî_t
 *
ôî
,

2738 *
¥vÆ
);

2753 
CEPH_RADOS_API
 
ødos_ªad_›_om≠_cmp
(
ødos_ªad_›_t
 
ªad_›
,

2754 c⁄° *
key
,

2755 
uöt8_t
 
com∑ris⁄_›î©‹
,

2756 c⁄° *
vÆ
,

2757 
size_t
 
vÆ_Àn
,

2758 *
¥vÆ
);

2767 
CEPH_RADOS_API
 
ødos_ªad_›_°©
(
ødos_ªad_›_t
 
ªad_›
,

2768 
uöt64_t
 *
psize
,

2769 
time_t
 *
pmtime
,

2770 *
¥vÆ
);

2786 
CEPH_RADOS_API
 
ødos_ªad_›_ªad
(
ødos_ªad_›_t
 
ªad_›
,

2787 
uöt64_t
 
off£t
,

2788 
size_t
 
Àn
,

2789 *
buf„r
,

2790 
size_t
 *
byãs_ªad
,

2791 *
¥vÆ
);

2811 
CEPH_RADOS_API
 
ødos_ªad_›_exec
(
ødos_ªad_›_t
 
ªad_›
,

2812 c⁄° *
˛s
,

2813 c⁄° *
mëhod
,

2814 c⁄° *
ö_buf
,

2815 
size_t
 
ö_Àn
,

2816 **
out_buf
,

2817 
size_t
 *
out_Àn
,

2818 *
¥vÆ
);

2837 
CEPH_RADOS_API
 
ødos_ªad_›_exec_u£r_buf
(
ødos_ªad_›_t
 
ªad_›
,

2838 c⁄° *
˛s
,

2839 c⁄° *
mëhod
,

2840 c⁄° *
ö_buf
,

2841 
size_t
 
ö_Àn
,

2842 *
out_buf
,

2843 
size_t
 
out_Àn
,

2844 
size_t
 *
u£d_Àn
,

2845 *
¥vÆ
);

2859 
CEPH_RADOS_API
 
ødos_ªad_›_om≠_gë_vÆs
(
ødos_ªad_›_t
 
ªad_›
,

2860 c⁄° *
°¨t_a·î
,

2861 c⁄° *
fûãr_¥efix
,

2862 
uöt64_t
 
max_ªtu∫
,

2863 
ødos_om≠_ôî_t
 *
ôî
,

2864 *
¥vÆ
);

2878 
CEPH_RADOS_API
 
ødos_ªad_›_om≠_gë_keys
(
ødos_ªad_›_t
 
ªad_›
,

2879 c⁄° *
°¨t_a·î
,

2880 
uöt64_t
 
max_ªtu∫
,

2881 
ødos_om≠_ôî_t
 *
ôî
,

2882 *
¥vÆ
);

2895 
CEPH_RADOS_API
 
ødos_ªad_›_om≠_gë_vÆs_by_keys
(
ødos_ªad_›_t
 
ªad_›
,

2896 c⁄°* c⁄°* 
keys
,

2897 
size_t
 
keys_Àn
,

2898 
ødos_om≠_ôî_t
 *
ôî
,

2899 *
¥vÆ
);

2908 
CEPH_RADOS_API
 
ødos_ªad_›_›î©e
(
ødos_ªad_›_t
 
ªad_›
,

2909 
ødos_io˘x_t
 
io
,

2910 c⁄° *
oid
,

2911 
Êags
);

2921 
CEPH_RADOS_API
 
ødos_aio_ªad_›_›î©e
(
ødos_ªad_›_t
 
ªad_›
,

2922 
ødos_io˘x_t
 
io
,

2923 
ødos_com∂ëi⁄_t
 
com∂ëi⁄
,

2924 c⁄° *
oid
,

2925 
Êags
);

2943 
CEPH_RADOS_API
 
ødos_lock_ex˛usive
(
ødos_io˘x_t
 
io
, c⁄° * 
oid
,

2944 c⁄° * 
«me
, c⁄° * 
cookõ
,

2945 c⁄° * 
desc
,

2946 
timevÆ
 * 
duøti⁄
,

2947 
uöt8_t
 
Êags
);

2964 
CEPH_RADOS_API
 
ødos_lock_sh¨ed
(
ødos_io˘x_t
 
io
, c⁄° * 
o
,

2965 c⁄° * 
«me
, c⁄° * 
cookõ
,

2966 c⁄° * 
èg
, c⁄° * 
desc
,

2967 
timevÆ
 * 
duøti⁄
, 
uöt8_t
 
Êags
);

2979 
CEPH_RADOS_API
 
ødos_u∆ock
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

2980 c⁄° *
«me
, c⁄° *
cookõ
);

3005 
CEPH_RADOS_API
 
ssize_t
 
ødos_li°_lockîs
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

3006 c⁄° *
«me
, *
ex˛usive
,

3007 *
èg
, 
size_t
 *
èg_Àn
,

3008 *
˛õ¡s
, 
size_t
 *
˛õ¡s_Àn
,

3009 *
cookõs
, 
size_t
 *
cookõs_Àn
,

3010 *
addrs
, 
size_t
 *
addrs_Àn
);

3025 
CEPH_RADOS_API
 
ødos_bªak_lock
(
ødos_io˘x_t
 
io
, c⁄° *
o
,

3026 c⁄° *
«me
, c⁄° *
˛õ¡
,

3027 c⁄° *
cookõ
);

3037 
CEPH_RADOS_API
 
ødos_bœckli°_add
(
ødos_t
 
˛u°î
,

3038 *
˛õ¡_addªss
,

3039 
uöt32_t
 
expúe_£c⁄ds
);

3070 
CEPH_RADOS_API
 
ødos_m⁄_comm™d
(
ødos_t
 
˛u°î
, c⁄° **
cmd
,

3071 
size_t
 
cmdÀn
, c⁄° *
öbuf
,

3072 
size_t
 
öbuÊí
, **
outbuf
,

3073 
size_t
 *
outbuÊí
, **
outs
,

3074 
size_t
 *
out¶í
);

3098 
CEPH_RADOS_API
 
ødos_m⁄_comm™d_èrgë
(
ødos_t
 
˛u°î
, c⁄° *
«me
,

3099 c⁄° **
cmd
, 
size_t
 
cmdÀn
,

3100 c⁄° *
öbuf
, 
size_t
 
öbuÊí
,

3101 **
outbuf
, 
size_t
 *
outbuÊí
,

3102 **
outs
, 
size_t
 *
out¶í
);

3111 
CEPH_RADOS_API
 
ødos_buf„r_‰ì
(*
buf
);

3113 
CEPH_RADOS_API
 
ødos_osd_comm™d
(
ødos_t
 
˛u°î
, 
osdid
,

3114 c⁄° **
cmd
, 
size_t
 
cmdÀn
,

3115 c⁄° *
öbuf
, 
size_t
 
öbuÊí
,

3116 **
outbuf
, 
size_t
 *
outbuÊí
,

3117 **
outs
, 
size_t
 *
out¶í
);

3119 
CEPH_RADOS_API
 
ødos_pg_comm™d
(
ødos_t
 
˛u°î
, c⁄° *
pg°r
,

3120 c⁄° **
cmd
, 
size_t
 
cmdÀn
,

3121 c⁄° *
öbuf
, 
size_t
 
öbuÊí
,

3122 **
outbuf
, 
size_t
 *
outbuÊí
,

3123 **
outs
, 
size_t
 *
out¶í
);

3147 (*
ødos_log_ˇŒback_t
)(*
	t¨g
,

3148 c⁄° *
	tlöe
,

3149 c⁄° *
	twho
,

3150 
	tuöt64_t
 
	t£c
, uöt64_à
	tn£c
,

3151 
	tuöt64_t
 
	t£q
, c⁄° *
	tÀvñ
,

3152 c⁄° *
	tmsg
);

3154 
CEPH_RADOS_API
 
ødos_m⁄ô‹_log
(
ødos_t
 
˛u°î
, c⁄° *
Àvñ
,

3155 
ødos_log_ˇŒback_t
 
cb
, *
¨g
);

3159 #ifde‡
__˝lu•lus


	@/usr/include/rbd/librbd.h

15 #i‚de‡
CEPH_LIBRBD_H


16 
	#CEPH_LIBRBD_H


	)

18 #ifde‡
__˝lu•lus


22 
	~<√töë/ö.h
>

23 #i‡
deföed
(
__löux__
)

24 
	~<löux/ty≥s.h
>

25 #ñi‡
deföed
(
__FªeBSD__
)

26 
	~<sys/ty≥s.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°rög.h
>

30 
	~"../ødos/libødos.h
"

31 
	~"„©uªs.h
"

33 
	#LIBRBD_VER_MAJOR
 0

	)

34 
	#LIBRBD_VER_MINOR
 1

	)

35 
	#LIBRBD_VER_EXTRA
 11

	)

37 
	#LIBRBD_VERSION
(
maj
, 
mö
, 
exåa
Ë((maj << 16Ë+ (mö << 8Ë+Éxåa)

	)

39 
	#LIBRBD_VERSION_CODE
 
	`LIBRBD_VERSION
(
LIBRBD_VER_MAJOR
, 
LIBRBD_VER_MINOR
, 
LIBRBD_VER_EXTRA
)

	)

41 
	#LIBRBD_SUPPORTS_WATCH
 0

	)

42 
	#LIBRBD_SUPPORTS_AIO_FLUSH
 1

	)

43 
	#LIBRBD_SUPPORTS_INVALIDATE
 1

	)

44 
	#LIBRBD_SUPPORTS_AIO_OPEN
 1

	)

45 
	#LIBRBD_SUPPORTS_LOCKING
 1

	)

47 #i‡
__GNUC__
 >= 4

48 
	#CEPH_RBD_API
 
	`__©åibuã__
 ((
	`visibûôy
 ("deÁu…")))

	)

50 
	#CEPH_RBD_API


	)

53 
	#RBD_FLAG_OBJECT_MAP_INVALID
 (1<<0)

	)

54 
	#RBD_FLAG_FAST_DIFF_INVALID
 (1<<1)

	)

56 *
	trbd_¢≠_t
;

57 *
	trbd_image_t
;

58 *
	trbd_image_›ti⁄s_t
;

60 *
	trbd_com∂ëi⁄_t
;

61 (*
rbd_ˇŒback_t
)(
	trbd_com∂ëi⁄_t
 
	tcb
, *
	t¨g
);

63 (*
librbd_¥ogªss_‚_t
)(
	tuöt64_t
 
	toff£t
, uöt64_à
	ttŸÆ
, *
	t±r
);

65 (*
rbd_upd©e_ˇŒback_t
)(*
	t¨g
);

68 
uöt64_t
 
id
;

69 
uöt64_t
 
size
;

70 c⁄° *
«me
;

71 } 
	trbd_¢≠_öfo_t
;

73 
	#RBD_MAX_IMAGE_NAME_SIZE
 96

	)

74 
	#RBD_MAX_BLOCK_NAME_SIZE
 24

	)

81 
EVENT_TYPE_PIPE
 = 1,

82 
EVENT_TYPE_EVENTFD
 = 2

86 
uöt64_t
 
size
;

87 
uöt64_t
 
obj_size
;

88 
uöt64_t
 
num_objs
;

89 
‹dî
;

90 
block_«me_¥efix
[
RBD_MAX_BLOCK_NAME_SIZE
];

91 
öt64_t
 
∑ª¡_poﬁ
;

92 
∑ª¡_«me
[
RBD_MAX_IMAGE_NAME_SIZE
];

93 } 
	trbd_image_öfo_t
;

96 
RBD_MIRROR_MODE_DISABLED
,

97 
RBD_MIRROR_MODE_IMAGE
,

98 
RBD_MIRROR_MODE_POOL


99 } 
	trbd_múr‹_mode_t
;

102 *
uuid
;

103 *
˛u°î_«me
;

104 *
˛õ¡_«me
;

105 } 
	trbd_múr‹_≥î_t
;

108 
RBD_MIRROR_IMAGE_DISABLING
 = 0,

109 
RBD_MIRROR_IMAGE_ENABLED
 = 1,

110 
RBD_MIRROR_IMAGE_DISABLED
 = 2

111 } 
	trbd_múr‹_image_°©e_t
;

114 *
globÆ_id
;

115 
rbd_múr‹_image_°©e_t
 
°©e
;

116 
boﬁ
 
¥im¨y
;

117 } 
	trbd_múr‹_image_öfo_t
;

120 
MIRROR_IMAGE_STATUS_STATE_UNKNOWN
 = 0,

121 
MIRROR_IMAGE_STATUS_STATE_ERROR
 = 1,

122 
MIRROR_IMAGE_STATUS_STATE_SYNCING
 = 2,

123 
MIRROR_IMAGE_STATUS_STATE_STARTING_REPLAY
 = 3,

124 
MIRROR_IMAGE_STATUS_STATE_REPLAYING
 = 4,

125 
MIRROR_IMAGE_STATUS_STATE_STOPPING_REPLAY
 = 5,

126 
MIRROR_IMAGE_STATUS_STATE_STOPPED
 = 6,

127 } 
	trbd_múr‹_image_°©us_°©e_t
;

130 *
«me
;

131 
rbd_múr‹_image_öfo_t
 
öfo
;

132 
rbd_múr‹_image_°©us_°©e_t
 
°©e
;

133 *
des¸ùti⁄
;

134 
time_t
 
œ°_upd©e
;

135 
boﬁ
 
up
;

136 } 
	trbd_múr‹_image_°©us_t
;

139 
RBD_LOCK_MODE_EXCLUSIVE
 = 0,

140 
RBD_LOCK_MODE_SHARED
 = 1,

141 } 
	trbd_lock_mode_t
;

143 
CEPH_RBD_API
 
rbd_vîsi⁄
(*
maj‹
, *
mö‹
, *
exåa
);

147 
RBD_IMAGE_OPTION_FORMAT
 = 0,

148 
RBD_IMAGE_OPTION_FEATURES
 = 1,

149 
RBD_IMAGE_OPTION_ORDER
 = 2,

150 
RBD_IMAGE_OPTION_STRIPE_UNIT
 = 3,

151 
RBD_IMAGE_OPTION_STRIPE_COUNT
 = 4,

152 
RBD_IMAGE_OPTION_JOURNAL_ORDER
 = 5,

153 
RBD_IMAGE_OPTION_JOURNAL_SPLAY_WIDTH
 = 6,

154 
RBD_IMAGE_OPTION_JOURNAL_POOL
 = 7,

157 
CEPH_RBD_API
 
rbd_image_›ti⁄s_¸óã
(
rbd_image_›ti⁄s_t
* 
›ts
);

158 
CEPH_RBD_API
 
rbd_image_›ti⁄s_de°roy
(
rbd_image_›ti⁄s_t
 
›ts
);

159 
CEPH_RBD_API
 
rbd_image_›ti⁄s_£t_°rög
(
rbd_image_›ti⁄s_t
 
›ts
,

160 
›äame
, c⁄° * 
›tvÆ
);

161 
CEPH_RBD_API
 
rbd_image_›ti⁄s_£t_uöt64
(
rbd_image_›ti⁄s_t
 
›ts
,

162 
›äame
, 
uöt64_t
 
›tvÆ
);

163 
CEPH_RBD_API
 
rbd_image_›ti⁄s_gë_°rög
(
rbd_image_›ti⁄s_t
 
›ts
,

164 
›äame
, * 
›tvÆ
,

165 
size_t
 
maxÀn
);

166 
CEPH_RBD_API
 
rbd_image_›ti⁄s_gë_uöt64
(
rbd_image_›ti⁄s_t
 
›ts
,

167 
›äame
, 
uöt64_t
* 
›tvÆ
);

168 
CEPH_RBD_API
 
rbd_image_›ti⁄s_is_£t
(
rbd_image_›ti⁄s_t
 
›ts
,

169 
›äame
, 
boﬁ
* 
is_£t
);

170 
CEPH_RBD_API
 
rbd_image_›ti⁄s_un£t
(
rbd_image_›ti⁄s_t
 
›ts
, 
›äame
);

171 
CEPH_RBD_API
 
rbd_image_›ti⁄s_˛ór
(
rbd_image_›ti⁄s_t
 
›ts
);

172 
CEPH_RBD_API
 
rbd_image_›ti⁄s_is_em±y
(
rbd_image_›ti⁄s_t
 
›ts
);

175 
CEPH_RBD_API
 
rbd_li°
(
ødos_io˘x_t
 
io
, *
«mes
, 
size_t
 *
size
);

176 
CEPH_RBD_API
 
rbd_¸óã
(
ødos_io˘x_t
 
io
, c⁄° *
«me
, 
uöt64_t
 
size
,

177 *
‹dî
);

178 
CEPH_RBD_API
 
rbd_¸óã2
(
ødos_io˘x_t
 
io
, c⁄° *
«me
, 
uöt64_t
 
size
,

179 
uöt64_t
 
„©uªs
, *
‹dî
);

197 
CEPH_RBD_API
 
rbd_¸óã3
(
ødos_io˘x_t
 
io
, c⁄° *
«me
, 
uöt64_t
 
size
,

198 
uöt64_t
 
„©uªs
, *
‹dî
,

199 
uöt64_t
 
°rùe_unô
, uöt64_à
°rùe_cou¡
);

200 
CEPH_RBD_API
 
rbd_¸óã4
(
ødos_io˘x_t
 
io
, c⁄° *
«me
, 
uöt64_t
 
size
,

201 
rbd_image_›ti⁄s_t
 
›ts
);

202 
CEPH_RBD_API
 
rbd_˛⁄e
(
ødos_io˘x_t
 
p_io˘x
, c⁄° *
p_«me
,

203 c⁄° *
p_¢≠«me
, 
ødos_io˘x_t
 
c_io˘x
,

204 c⁄° *
c_«me
, 
uöt64_t
 
„©uªs
, *
c_‹dî
);

205 
CEPH_RBD_API
 
rbd_˛⁄e2
(
ødos_io˘x_t
 
p_io˘x
, c⁄° *
p_«me
,

206 c⁄° *
p_¢≠«me
, 
ødos_io˘x_t
 
c_io˘x
,

207 c⁄° *
c_«me
, 
uöt64_t
 
„©uªs
, *
c_‹dî
,

208 
uöt64_t
 
°rùe_unô
, 
°rùe_cou¡
);

209 
CEPH_RBD_API
 
rbd_˛⁄e3
(
ødos_io˘x_t
 
p_io˘x
, c⁄° *
p_«me
,

210 c⁄° *
p_¢≠«me
, 
ødos_io˘x_t
 
c_io˘x
,

211 c⁄° *
c_«me
, 
rbd_image_›ti⁄s_t
 
c_›ts
);

212 
CEPH_RBD_API
 
rbd_ªmove
(
ødos_io˘x_t
 
io
, c⁄° *
«me
);

213 
CEPH_RBD_API
 
rbd_ªmove_wôh_¥ogªss
(
ødos_io˘x_t
 
io
, c⁄° *
«me
,

214 
librbd_¥ogªss_‚_t
 
cb
,

215 *
cbd©a
);

216 
CEPH_RBD_API
 
rbd_ª«me
(
ødos_io˘x_t
 
§c_io_˘x
, c⁄° *
§˙ame
,

217 c⁄° *
de°«me
);

220 
CEPH_RBD_API
 
rbd_múr‹_mode_gë
(
ødos_io˘x_t
 
io_˘x
,

221 
rbd_múr‹_mode_t
 *
múr‹_mode
);

222 
CEPH_RBD_API
 
rbd_múr‹_mode_£t
(
ødos_io˘x_t
 
io_˘x
,

223 
rbd_múr‹_mode_t
 
múr‹_mode
);

224 
CEPH_RBD_API
 
rbd_múr‹_≥î_add
(
ødos_io˘x_t
 
io_˘x
,

225 *
uuid
, 
size_t
 
uuid_max_Àngth
,

226 c⁄° *
˛u°î_«me
,

227 c⁄° *
˛õ¡_«me
);

228 
CEPH_RBD_API
 
rbd_múr‹_≥î_ªmove
(
ødos_io˘x_t
 
io_˘x
,

229 c⁄° *
uuid
);

230 
CEPH_RBD_API
 
rbd_múr‹_≥î_li°
(
ødos_io˘x_t
 
io_˘x
,

231 
rbd_múr‹_≥î_t
 *
≥îs
, *
max_≥îs
);

232 
CEPH_RBD_API
 
rbd_múr‹_≥î_li°_˛ónup
(
rbd_múr‹_≥î_t
 *
≥îs
,

233 
max_≥îs
);

234 
CEPH_RBD_API
 
rbd_múr‹_≥î_£t_˛õ¡
(
ødos_io˘x_t
 
io_˘x
,

235 c⁄° *
uuid
,

236 c⁄° *
˛õ¡_«me
);

237 
CEPH_RBD_API
 
rbd_múr‹_≥î_£t_˛u°î
(
ødos_io˘x_t
 
io_˘x
,

238 c⁄° *
uuid
,

239 c⁄° *
˛u°î_«me
);

240 
CEPH_RBD_API
 
rbd_múr‹_image_°©us_li°
(
ødos_io˘x_t
 
io_˘x
,

241 c⁄° *
°¨t_id
, 
size_t
 
max
,

242 **
image_ids
,

243 
rbd_múr‹_image_°©us_t
 *
images
,

244 
size_t
 *
Àn
);

245 
CEPH_RBD_API
 
rbd_múr‹_image_°©us_li°_˛ónup
(**
image_ids
,

246 
rbd_múr‹_image_°©us_t
 *
images
, 
size_t
 
Àn
);

247 
CEPH_RBD_API
 
rbd_múr‹_image_°©us_summ¨y
(
ødos_io˘x_t
 
io_˘x
,

248 
rbd_múr‹_image_°©us_°©e_t
 *
°©es
, *
cou¡s
, 
size_t
 *
maxÀn
);

250 
CEPH_RBD_API
 
rbd_›í
(
ødos_io˘x_t
 
io
, c⁄° *
«me
,

251 
rbd_image_t
 *
image
, c⁄° *
¢≠_«me
);

253 
CEPH_RBD_API
 
rbd_aio_›í
(
ødos_io˘x_t
 
io
, c⁄° *
«me
,

254 
rbd_image_t
 *
image
, c⁄° *
¢≠_«me
,

255 
rbd_com∂ëi⁄_t
 
c
);

275 
CEPH_RBD_API
 
rbd_›í_ªad_⁄ly
(
ødos_io˘x_t
 
io
, c⁄° *
«me
,

276 
rbd_image_t
 *
image
, c⁄° *
¢≠_«me
);

277 
CEPH_RBD_API
 
rbd_aio_›í_ªad_⁄ly
(
ødos_io˘x_t
 
io
, c⁄° *
«me
,

278 
rbd_image_t
 *
image
, c⁄° *
¢≠_«me
,

279 
rbd_com∂ëi⁄_t
 
c
);

280 
CEPH_RBD_API
 
rbd_˛o£
(
rbd_image_t
 
image
);

281 
CEPH_RBD_API
 
rbd_aio_˛o£
(
rbd_image_t
 
image
, 
rbd_com∂ëi⁄_t
 
c
);

282 
CEPH_RBD_API
 
rbd_ªsize
(
rbd_image_t
 
image
, 
uöt64_t
 
size
);

283 
CEPH_RBD_API
 
rbd_ªsize_wôh_¥ogªss
(
rbd_image_t
 
image
, 
uöt64_t
 
size
,

284 
librbd_¥ogªss_‚_t
 
cb
, *
cbd©a
);

285 
CEPH_RBD_API
 
rbd_°©
(
rbd_image_t
 
image
, 
rbd_image_öfo_t
 *
öfo
,

286 
size_t
 
öfosize
);

287 
CEPH_RBD_API
 
rbd_gë_ﬁd_f‹m©
(
rbd_image_t
 
image
, 
uöt8_t
 *
ﬁd
);

288 
CEPH_RBD_API
 
rbd_gë_size
(
rbd_image_t
 
image
, 
uöt64_t
 *
size
);

289 
CEPH_RBD_API
 
rbd_gë_„©uªs
(
rbd_image_t
 
image
, 
uöt64_t
 *
„©uªs
);

290 
CEPH_RBD_API
 
rbd_upd©e_„©uªs
(
rbd_image_t
 
image
, 
uöt64_t
 
„©uªs
,

291 
uöt8_t
 
íabÀd
);

292 
CEPH_RBD_API
 
rbd_gë_°rùe_unô
(
rbd_image_t
 
image
, 
uöt64_t
 *
°rùe_unô
);

293 
CEPH_RBD_API
 
rbd_gë_°rùe_cou¡
(
rbd_image_t
 
image
,

294 
uöt64_t
 *
°rùe_cou¡
);

295 
CEPH_RBD_API
 
rbd_gë_ovîœp
(
rbd_image_t
 
image
, 
uöt64_t
 *
ovîœp
);

296 
CEPH_RBD_API
 
rbd_gë_id
(
rbd_image_t
 
image
, *
id
, 
size_t
 
id_Àn
);

297 
CEPH_RBD_API
 
rbd_gë_block_«me_¥efix
(
rbd_image_t
 
image
,

298 *
¥efix
, 
size_t
 
¥efix_Àn
);

299 
CEPH_RBD_API
 
öt64_t
 
rbd_gë_d©a_poﬁ_id
(
rbd_image_t
 
image
);

300 
CEPH_RBD_API
 
rbd_gë_∑ª¡_öfo
(
rbd_image_t
 
image
,

301 *
∑ª¡_poﬁ«me
, 
size_t
 
µoﬁ«mñí
,

302 *
∑ª¡_«me
, 
size_t
 
≤amñí
,

303 *
∑ª¡_¢≠«me
,

304 
size_t
 
p¢≠«mñí
);

305 
CEPH_RBD_API
 
rbd_gë_Êags
(
rbd_image_t
 
image
, 
uöt64_t
 *
Êags
);

306 
CEPH_RBD_API
 
rbd_£t_image_nŸifiˇti⁄
(
rbd_image_t
 
image
, 
fd
, 
ty≥
);

309 
CEPH_RBD_API
 
rbd_is_ex˛usive_lock_ow√r
(
rbd_image_t
 
image
, *
is_ow√r
);

310 
CEPH_RBD_API
 
rbd_lock_acquúe
(
rbd_image_t
 
image
, 
rbd_lock_mode_t
 
lock_mode
);

311 
CEPH_RBD_API
 
rbd_lock_ªÀa£
(
rbd_image_t
 
image
);

312 
CEPH_RBD_API
 
rbd_lock_gë_ow√rs
(
rbd_image_t
 
image
,

313 
rbd_lock_mode_t
 *
lock_mode
,

314 **
lock_ow√rs
,

315 
size_t
 *
max_lock_ow√rs
);

316 
CEPH_RBD_API
 
rbd_lock_gë_ow√rs_˛ónup
(**
lock_ow√rs
,

317 
size_t
 
lock_ow√r_cou¡
);

318 
CEPH_RBD_API
 
rbd_lock_bªak
(
rbd_image_t
 
image
, 
rbd_lock_mode_t
 
lock_mode
,

319 c⁄° *
lock_ow√r
);

322 
CEPH_RBD_API
 
rbd_ªbuûd_obje˘_m≠
(
rbd_image_t
 
image
,

323 
librbd_¥ogªss_‚_t
 
cb
, *
cbd©a
);

325 
CEPH_RBD_API
 
rbd_c›y
(
rbd_image_t
 
image
, 
ødos_io˘x_t
 
de°_io_˘x
,

326 c⁄° *
de°«me
);

327 
CEPH_RBD_API
 
rbd_c›y2
(
rbd_image_t
 
§c
,Ñbd_image_à
de°
);

328 
CEPH_RBD_API
 
rbd_c›y3
(
rbd_image_t
 
§c
, 
ødos_io˘x_t
 
de°_io_˘x
,

329 c⁄° *
de°«me
, 
rbd_image_›ti⁄s_t
 
de°_›ts
);

330 
CEPH_RBD_API
 
rbd_c›y_wôh_¥ogªss
(
rbd_image_t
 
image
, 
ødos_io˘x_t
 
de°_p
,

331 c⁄° *
de°«me
,

332 
librbd_¥ogªss_‚_t
 
cb
, *
cbd©a
);

333 
CEPH_RBD_API
 
rbd_c›y_wôh_¥ogªss2
(
rbd_image_t
 
§c
,Ñbd_image_à
de°
,

334 
librbd_¥ogªss_‚_t
 
cb
, *
cbd©a
);

335 
CEPH_RBD_API
 
rbd_c›y_wôh_¥ogªss3
(
rbd_image_t
 
image
,

336 
ødos_io˘x_t
 
de°_p
,

337 c⁄° *
de°«me
,

338 
rbd_image_›ti⁄s_t
 
de°_›ts
,

339 
librbd_¥ogªss_‚_t
 
cb
, *
cbd©a
);

342 
CEPH_RBD_API
 
rbd_¢≠_li°
(
rbd_image_t
 
image
, 
rbd_¢≠_öfo_t
 *
¢≠s
,

343 *
max_¢≠s
);

344 
CEPH_RBD_API
 
rbd_¢≠_li°_íd
(
rbd_¢≠_öfo_t
 *
¢≠s
);

345 
CEPH_RBD_API
 
rbd_¢≠_¸óã
(
rbd_image_t
 
image
, c⁄° *
¢≠«me
);

346 
CEPH_RBD_API
 
rbd_¢≠_ªmove
(
rbd_image_t
 
image
, c⁄° *
¢≠«me
);

347 
CEPH_RBD_API
 
rbd_¢≠_rﬁlback
(
rbd_image_t
 
image
, c⁄° *
¢≠«me
);

348 
CEPH_RBD_API
 
rbd_¢≠_rﬁlback_wôh_¥ogªss
(
rbd_image_t
 
image
,

349 c⁄° *
¢≠«me
,

350 
librbd_¥ogªss_‚_t
 
cb
,

351 *
cbd©a
);

352 
CEPH_RBD_API
 
rbd_¢≠_ª«me
(
rbd_image_t
 
image
, c⁄° *
¢≠«me
,

353 c⁄° * 
d°¢≠¢ame
);

361 
CEPH_RBD_API
 
rbd_¢≠_¥Ÿe˘
(
rbd_image_t
 
image
, c⁄° *
¢≠_«me
);

369 
CEPH_RBD_API
 
rbd_¢≠_u≈rŸe˘
(
rbd_image_t
 
image
, c⁄° *
¢≠_«me
);

377 
CEPH_RBD_API
 
rbd_¢≠_is_¥Ÿe˘ed
(
rbd_image_t
 
image
, c⁄° *
¢≠_«me
,

378 *
is_¥Ÿe˘ed
);

379 
CEPH_RBD_API
 
rbd_¢≠_£t
(
rbd_image_t
 
image
, c⁄° *
¢≠«me
);

381 
CEPH_RBD_API
 
rbd_Ê©ãn
(
rbd_image_t
 
image
);

404 
CEPH_RBD_API
 
ssize_t
 
rbd_li°_chûdªn
(
rbd_image_t
 
image
, *
poﬁs
,

405 
size_t
 *
poﬁs_Àn
, *
images
,

406 
size_t
 *
images_Àn
);

451 
CEPH_RBD_API
 
ssize_t
 
rbd_li°_lockîs
(
rbd_image_t
 
image
, *
ex˛usive
,

452 *
èg
, 
size_t
 *
èg_Àn
,

453 *
˛õ¡s
, 
size_t
 *
˛õ¡s_Àn
,

454 *
cookõs
, 
size_t
 *
cookõs_Àn
,

455 *
addrs
, 
size_t
 *
addrs_Àn
);

466 
CEPH_RBD_API
 
rbd_lock_ex˛usive
(
rbd_image_t
 
image
, c⁄° *
cookõ
);

481 
CEPH_RBD_API
 
rbd_lock_sh¨ed
(
rbd_image_t
 
image
, c⁄° *
cookõ
,

482 c⁄° *
èg
);

492 
CEPH_RBD_API
 
rbd_u∆ock
(
rbd_image_t
 
image
, c⁄° *
cookõ
);

503 
CEPH_RBD_API
 
rbd_bªak_lock
(
rbd_image_t
 
image
, c⁄° *
˛õ¡
,

504 c⁄° *
cookõ
);

509 
CEPH_RBD_API
 
ssize_t
 
rbd_ªad
(
rbd_image_t
 
image
, 
uöt64_t
 
ofs
, 
size_t
 
Àn
,

510 *
buf
);

514 
CEPH_RBD_API
 
ssize_t
 
rbd_ªad2
(
rbd_image_t
 
image
, 
uöt64_t
 
ofs
, 
size_t
 
Àn
,

515 *
buf
, 
›_Êags
);

517 
CEPH_RBD_API
 
öt64_t
 
rbd_ªad_ôî©e
(
rbd_image_t
 
image
, 
uöt64_t
 
ofs
, 
size_t
 
Àn
,

518 (*
cb
)(
uöt64_t
, 
size_t
, const *, *),

519 *
¨g
);

535 
CEPH_RBD_API
 
rbd_ªad_ôî©e2
(
rbd_image_t
 
image
, 
uöt64_t
 
ofs
, uöt64_à
Àn
,

536 (*
cb
)(
uöt64_t
, 
size_t
, const *, *),

537 *
¨g
);

559 
CEPH_RBD_API
 
rbd_diff_ôî©e
(
rbd_image_t
 
image
,

560 c⁄° *
‰om¢≠«me
,

561 
uöt64_t
 
ofs
, uöt64_à
Àn
,

562 (*
cb
)(
uöt64_t
, 
size_t
, , *),

563 *
¨g
);

564 
CEPH_RBD_API
 
rbd_diff_ôî©e2
(
rbd_image_t
 
image
,

565 c⁄° *
‰om¢≠«me
,

566 
uöt64_t
 
ofs
, uöt64_à
Àn
,

567 
uöt8_t
 
ö˛ude_∑ª¡
, uöt8_à
whﬁe_obje˘
,

568 (*
cb
)(
uöt64_t
, 
size_t
, , *),

569 *
¨g
);

570 
CEPH_RBD_API
 
ssize_t
 
rbd_wrôe
(
rbd_image_t
 
image
, 
uöt64_t
 
ofs
, 
size_t
 
Àn
,

571 c⁄° *
buf
);

575 
CEPH_RBD_API
 
ssize_t
 
rbd_wrôe2
(
rbd_image_t
 
image
, 
uöt64_t
 
ofs
, 
size_t
 
Àn
,

576 c⁄° *
buf
, 
›_Êags
);

577 
CEPH_RBD_API
 
rbd_disˇrd
(
rbd_image_t
 
image
, 
uöt64_t
 
ofs
, uöt64_à
Àn
);

578 
CEPH_RBD_API
 
rbd_aio_wrôe
(
rbd_image_t
 
image
, 
uöt64_t
 
off
, 
size_t
 
Àn
,

579 c⁄° *
buf
, 
rbd_com∂ëi⁄_t
 
c
);

584 
CEPH_RBD_API
 
rbd_aio_wrôe2
(
rbd_image_t
 
image
, 
uöt64_t
 
off
, 
size_t
 
Àn
,

585 c⁄° *
buf
, 
rbd_com∂ëi⁄_t
 
c
, 
›_Êags
);

586 
CEPH_RBD_API
 
rbd_aio_ªad
(
rbd_image_t
 
image
, 
uöt64_t
 
off
, 
size_t
 
Àn
,

587 *
buf
, 
rbd_com∂ëi⁄_t
 
c
);

591 
CEPH_RBD_API
 
rbd_aio_ªad2
(
rbd_image_t
 
image
, 
uöt64_t
 
off
, 
size_t
 
Àn
,

592 *
buf
, 
rbd_com∂ëi⁄_t
 
c
, 
›_Êags
);

593 
CEPH_RBD_API
 
rbd_aio_disˇrd
(
rbd_image_t
 
image
, 
uöt64_t
 
off
, uöt64_à
Àn
,

594 
rbd_com∂ëi⁄_t
 
c
);

596 
CEPH_RBD_API
 
rbd_aio_¸óã_com∂ëi⁄
(*
cb_¨g
,

597 
rbd_ˇŒback_t
 
com∂ëe_cb
,

598 
rbd_com∂ëi⁄_t
 *
c
);

599 
CEPH_RBD_API
 
rbd_aio_is_com∂ëe
(
rbd_com∂ëi⁄_t
 
c
);

600 
CEPH_RBD_API
 
rbd_aio_waô_f‹_com∂ëe
(
rbd_com∂ëi⁄_t
 
c
);

601 
CEPH_RBD_API
 
ssize_t
 
rbd_aio_gë_ªtu∫_vÆue
(
rbd_com∂ëi⁄_t
 
c
);

602 
CEPH_RBD_API
 *
rbd_aio_gë_¨g
(
rbd_com∂ëi⁄_t
 
c
);

603 
CEPH_RBD_API
 
rbd_aio_ªÀa£
(
rbd_com∂ëi⁄_t
 
c
);

604 
CEPH_RBD_API
 
rbd_Êush
(
rbd_image_t
 
image
);

613 
CEPH_RBD_API
 
rbd_aio_Êush
(
rbd_image_t
 
image
, 
rbd_com∂ëi⁄_t
 
c
);

621 
CEPH_RBD_API
 
rbd_övÆid©e_ˇche
(
rbd_image_t
 
image
);

623 
CEPH_RBD_API
 
rbd_pﬁl_io_evíts
(
rbd_image_t
 
image
, 
rbd_com∂ëi⁄_t
 *
comps
, 
numcomp
);

625 
CEPH_RBD_API
 
rbd_mëad©a_gë
(
rbd_image_t
 
image
, c⁄° *
key
, *
vÆue
, 
size_t
 *
vÆ_Àn
);

626 
CEPH_RBD_API
 
rbd_mëad©a_£t
(
rbd_image_t
 
image
, c⁄° *
key
, c⁄° *
vÆue
);

627 
CEPH_RBD_API
 
rbd_mëad©a_ªmove
(
rbd_image_t
 
image
, c⁄° *
key
);

650 
CEPH_RBD_API
 
rbd_mëad©a_li°
(
rbd_image_t
 
image
, c⁄° *
°¨t
, 
uöt64_t
 
max
,

651 *
keys
, 
size_t
 *
key_Àn
, *
vÆues
, size_à*
vÆs_Àn
);

654 
CEPH_RBD_API
 
rbd_múr‹_image_íabÀ
(
rbd_image_t
 
image
);

655 
CEPH_RBD_API
 
rbd_múr‹_image_dißbÀ
(
rbd_image_t
 
image
, 
boﬁ
 
f‹˚
);

656 
CEPH_RBD_API
 
rbd_múr‹_image_¥omŸe
(
rbd_image_t
 
image
, 
boﬁ
 
f‹˚
);

657 
CEPH_RBD_API
 
rbd_múr‹_image_demŸe
(
rbd_image_t
 
image
);

658 
CEPH_RBD_API
 
rbd_múr‹_image_ªsync
(
rbd_image_t
 
image
);

659 
CEPH_RBD_API
 
rbd_múr‹_image_gë_öfo
(
rbd_image_t
 
image
,

660 
rbd_múr‹_image_öfo_t
 *
múr‹_image_öfo
,

661 
size_t
 
öfo_size
);

662 
CEPH_RBD_API
 
rbd_múr‹_image_gë_°©us
(
rbd_image_t
 
image
,

663 
rbd_múr‹_image_°©us_t
 *
múr‹_image_°©us
,

664 
size_t
 
°©us_size
);

675 
CEPH_RBD_API
 
rbd_upd©e_w©ch
(
rbd_image_t
 
image
, 
uöt64_t
 *
h™dÀ
,

676 
rbd_upd©e_ˇŒback_t
 
w©ch_cb
, *
¨g
);

685 
CEPH_RBD_API
 
rbd_upd©e_unw©ch
(
rbd_image_t
 
image
, 
uöt64_t
 
h™dÀ
);

687 #ifde‡
__˝lu•lus


	@/usr/include/rdma/rdma_cma.h

34 #i‡!
deföed
(
RDMA_CMA_H
)

35 
	#RDMA_CMA_H


	)

37 
	~<√töë/ö.h
>

38 
	~<sys/sockë.h
>

39 
	~<öföib™d/vîbs.h
>

40 
	~<öföib™d/ß.h
>

42 #ifde‡
__˝lu•lus


50 
	erdma_cm_evít_ty≥
 {

51 
RDMA_CM_EVENT_ADDR_RESOLVED
,

52 
RDMA_CM_EVENT_ADDR_ERROR
,

53 
RDMA_CM_EVENT_ROUTE_RESOLVED
,

54 
RDMA_CM_EVENT_ROUTE_ERROR
,

55 
RDMA_CM_EVENT_CONNECT_REQUEST
,

56 
RDMA_CM_EVENT_CONNECT_RESPONSE
,

57 
RDMA_CM_EVENT_CONNECT_ERROR
,

58 
RDMA_CM_EVENT_UNREACHABLE
,

59 
RDMA_CM_EVENT_REJECTED
,

60 
RDMA_CM_EVENT_ESTABLISHED
,

61 
RDMA_CM_EVENT_DISCONNECTED
,

62 
RDMA_CM_EVENT_DEVICE_REMOVAL
,

63 
RDMA_CM_EVENT_MULTICAST_JOIN
,

64 
RDMA_CM_EVENT_MULTICAST_ERROR
,

65 
RDMA_CM_EVENT_ADDR_CHANGE
,

66 
RDMA_CM_EVENT_TIMEWAIT_EXIT


69 
	erdma_p‹t_•a˚
 {

70 
RDMA_PS_IPOIB
 = 0x0002,

71 
RDMA_PS_TCP
 = 0x0106,

72 
RDMA_PS_UDP
 = 0x0111,

73 
RDMA_PS_IB
 = 0x013F,

76 
	#RDMA_IB_IP_PS_MASK
 0xFFFFFFFFFFFF0000ULL

	)

77 
	#RDMA_IB_IP_PORT_MASK
 0x000000000000FFFFULL

	)

78 
	#RDMA_IB_IP_PS_TCP
 0x0000000001060000ULL

	)

79 
	#RDMA_IB_IP_PS_UDP
 0x0000000001110000ULL

	)

80 
	#RDMA_IB_PS_IB
 0x00000000013F0000ULL

	)

86 
	#RDMA_UDP_QKEY
 0x01234567

	)

88 
	srdma_ib_addr
 {

89 
ibv_gid
 
sgid
;

90 
ibv_gid
 
dgid
;

91 
uöt16_t
 
pkey
;

94 
	srdma_addr
 {

96 
sockaddr
 
§c_addr
;

97 
sockaddr_ö
 
§c_sö
;

98 
sockaddr_ö6
 
§c_sö6
;

99 
sockaddr_°‹age
 
§c_°‹age
;

102 
sockaddr
 
d°_addr
;

103 
sockaddr_ö
 
d°_sö
;

104 
sockaddr_ö6
 
d°_sö6
;

105 
sockaddr_°‹age
 
d°_°‹age
;

108 
rdma_ib_addr
 
ibaddr
;

109 } 
addr
;

112 
	srdma_rouã
 {

113 
rdma_addr
 
addr
;

114 
ibv_ß_∑th_ªc
 *
∑th_ªc
;

115 
num_∑ths
;

118 
	srdma_evít_ch™√l
 {

119 
fd
;

122 
	srdma_cm_id
 {

123 
ibv_c⁄ãxt
 *
vîbs
;

124 
rdma_evít_ch™√l
 *
ch™√l
;

125 *
c⁄ãxt
;

126 
ibv_qp
 *
qp
;

127 
rdma_rouã
 
rouã
;

128 
rdma_p‹t_•a˚
 
ps
;

129 
uöt8_t
 
p‹t_num
;

130 
rdma_cm_evít
 *
evít
;

131 
ibv_comp_ch™√l
 *
£nd_cq_ch™√l
;

132 
ibv_cq
 *
£nd_cq
;

133 
ibv_comp_ch™√l
 *
ªcv_cq_ch™√l
;

134 
ibv_cq
 *
ªcv_cq
;

135 
ibv_§q
 *
§q
;

136 
ibv_pd
 *
pd
;

137 
ibv_qp_ty≥
 
qp_ty≥
;

141 
RDMA_MAX_RESP_RES
 = 0xFF,

142 
RDMA_MAX_INIT_DEPTH
 = 0xFF

145 
	srdma_c⁄n_∑øm
 {

146 c⁄° *
¥iv©e_d©a
;

147 
uöt8_t
 
¥iv©e_d©a_Àn
;

148 
uöt8_t
 
ª•⁄dî_ªsour˚s
;

149 
uöt8_t
 
öôüt‹_dïth
;

150 
uöt8_t
 
Êow_c⁄åﬁ
;

151 
uöt8_t
 
ªåy_cou¡
;

152 
uöt8_t
 
∫r_ªåy_cou¡
;

154 
uöt8_t
 
§q
;

155 
uöt32_t
 
qp_num
;

158 
	srdma_ud_∑øm
 {

159 c⁄° *
¥iv©e_d©a
;

160 
uöt8_t
 
¥iv©e_d©a_Àn
;

161 
ibv_ah_©å
 
ah_©å
;

162 
uöt32_t
 
qp_num
;

163 
uöt32_t
 
qkey
;

166 
	srdma_cm_evít
 {

167 
rdma_cm_id
 *
id
;

168 
rdma_cm_id
 *
li°í_id
;

169 
rdma_cm_evít_ty≥
 
evít
;

170 
°©us
;

172 
rdma_c⁄n_∑øm
 
c⁄n
;

173 
rdma_ud_∑øm
 
ud
;

174 } 
∑øm
;

177 
	#RAI_PASSIVE
 0x00000001

	)

178 
	#RAI_NUMERICHOST
 0x00000002

	)

179 
	#RAI_NOROUTE
 0x00000004

	)

180 
	#RAI_FAMILY
 0x00000008

	)

182 
	srdma_addröfo
 {

183 
ai_Êags
;

184 
ai_Ámûy
;

185 
ai_qp_ty≥
;

186 
ai_p‹t_•a˚
;

187 
sockÀn_t
 
ai_§c_Àn
;

188 
sockÀn_t
 
ai_d°_Àn
;

189 
sockaddr
 *
ai_§c_addr
;

190 
sockaddr
 *
ai_d°_addr
;

191 *
ai_§c_ˇn⁄«me
;

192 *
ai_d°_ˇn⁄«me
;

193 
size_t
 
ai_rouã_Àn
;

194 *
ai_rouã
;

195 
size_t
 
ai_c⁄√˘_Àn
;

196 *
ai_c⁄√˘
;

197 
rdma_addröfo
 *
ai_√xt
;

212 
rdma_evít_ch™√l
 *
rdma_¸óã_evít_ch™√l
();

226 
rdma_de°roy_evít_ch™√l
(
rdma_evít_ch™√l
 *
ch™√l
);

249 
rdma_¸óã_id
(
rdma_evít_ch™√l
 *
ch™√l
,

250 
rdma_cm_id
 **
id
, *
c⁄ãxt
,

251 
rdma_p‹t_•a˚
 
ps
);

276 
rdma_¸óã_ï
(
rdma_cm_id
 **
id
, 
rdma_addröfo
 *
ªs
,

277 
ibv_pd
 *
pd
, 
ibv_qp_öô_©å
 *
qp_öô_©å
);

288 
rdma_de°roy_ï
(
rdma_cm_id
 *
id
);

302 
rdma_de°roy_id
(
rdma_cm_id
 *
id
);

320 
rdma_böd_addr
(
rdma_cm_id
 *
id
, 
sockaddr
 *
addr
);

345 
rdma_ªsﬁve_addr
(
rdma_cm_id
 *
id
, 
sockaddr
 *
§c_addr
,

346 
sockaddr
 *
d°_addr
, 
timeout_ms
);

362 
rdma_ªsﬁve_rouã
(
rdma_cm_id
 *
id
, 
timeout_ms
);

385 
rdma_¸óã_qp
(
rdma_cm_id
 *
id
, 
ibv_pd
 *
pd
,

386 
ibv_qp_öô_©å
 *
qp_öô_©å
);

387 
rdma_¸óã_qp_ex
(
rdma_cm_id
 *
id
,

388 
ibv_qp_öô_©å_ex
 *
qp_öô_©å
);

401 
rdma_de°roy_qp
(
rdma_cm_id
 *
id
);

419 
rdma_c⁄√˘
(
rdma_cm_id
 *
id
, 
rdma_c⁄n_∑øm
 *
c⁄n_∑øm
);

439 
rdma_li°í
(
rdma_cm_id
 *
id
, 
backlog
);

444 
rdma_gë_ªque°
(
rdma_cm_id
 *
li°í
, rdma_cm_id **
id
);

465 
rdma_ac˚±
(
rdma_cm_id
 *
id
, 
rdma_c⁄n_∑øm
 *
c⁄n_∑øm
);

483 
rdma_ªje˘
(
rdma_cm_id
 *
id
, c⁄° *
¥iv©e_d©a
,

484 
uöt8_t
 
¥iv©e_d©a_Àn
);

506 
rdma_nŸify
(
rdma_cm_id
 *
id
, 
ibv_evít_ty≥
 
evít
);

517 
rdma_disc⁄√˘
(
rdma_cm_id
 *
id
);

537 
rdma_joö_mu…iˇ°
(
rdma_cm_id
 *
id
, 
sockaddr
 *
addr
,

538 *
c⁄ãxt
);

555 
rdma_Àave_mu…iˇ°
(
rdma_cm_id
 *
id
, 
sockaddr
 *
addr
);

573 
rdma_gë_cm_evít
(
rdma_evít_ch™√l
 *
ch™√l
,

574 
rdma_cm_evít
 **
evít
);

586 
rdma_ack_cm_evít
(
rdma_cm_evít
 *
evít
);

588 
uöt16_t
 
rdma_gë_§c_p‹t
(
rdma_cm_id
 *
id
);

589 
uöt16_t
 
rdma_gë_d°_p‹t
(
rdma_cm_id
 *
id
);

591 
ölöe
 
sockaddr
 *
rdma_gë_loˇl_addr
(
rdma_cm_id
 *
id
)

593  &
id
->
rouã
.
addr
.
§c_addr
;

596 
ölöe
 
sockaddr
 *
rdma_gë_≥î_addr
(
rdma_cm_id
 *
id
)

598  &
id
->
rouã
.
addr
.
d°_addr
;

614 
ibv_c⁄ãxt
 **
rdma_gë_devi˚s
(*
num_devi˚s
);

624 
rdma_‰ì_devi˚s
(
ibv_c⁄ãxt
 **
li°
);

634 c⁄° *
rdma_evít_°r
(
rdma_cm_evít_ty≥
 
evít
);

638 
RDMA_OPTION_ID
 = 0,

639 
RDMA_OPTION_IB
 = 1

644 
RDMA_OPTION_ID_TOS
 = 0,

645 
RDMA_OPTION_ID_REUSEADDR
 = 1,

646 
RDMA_OPTION_ID_AFONLY
 = 2,

647 
RDMA_OPTION_IB_PATH
 = 1

658 
rdma_£t_›ti⁄
(
rdma_cm_id
 *
id
, 
Àvñ
, 
›äame
,

659 *
›tvÆ
, 
size_t
 
›éí
);

666 
rdma_migøã_id
(
rdma_cm_id
 *
id
, 
rdma_evít_ch™√l
 *
ch™√l
);

671 
rdma_gëaddröfo
(*
node
, *
£rvi˚
,

672 
rdma_addröfo
 *
höts
,

673 
rdma_addröfo
 **
ªs
);

675 
rdma_‰ìaddröfo
(
rdma_addröfo
 *
ªs
);

677 #ifde‡
__˝lu•lus


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/scsi/sg.h

25 #i‚de‡
_SCSI_SG_H


26 
	#_SCSI_SG_H
 1

	)

28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

37 
	ssg_iovec


39 * 
	miov_ba£
;

40 
size_t
 
	miov_Àn
;

41 } 
	tsg_iovec_t
;

44 
	ssg_io_hdr


46 
	möãrÁ˚_id
;

47 
	mdx„r_dúe˘i⁄
;

48 
	mcmd_Àn
;

49 
	mmx_sb_Àn
;

50 
	miovec_cou¡
;

51 
	mdx„r_Àn
;

52 * 
	mdx„Ω
;

54 * 
	mcmdp
;

55 * 
	msbp
;

56 
	mtimeout
;

57 
	mÊags
;

58 
	m∑ck_id
;

59 * 
	mu§_±r
;

60 
	m°©us
;

61 
	mmasked_°©us
;

62 
	mmsg_°©us
;

63 
	msb_Àn_wr
;

64 
	mho°_°©us
;

65 
	mdrivî_°©us
;

66 
	mªsid
;

67 
	mduøti⁄
;

68 
	möfo
;

69 } 
	tsg_io_hdr_t
;

73 
	#SG_DXFER_NONE
 -1

	)

74 
	#SG_DXFER_TO_DEV
 -2

	)

75 
	#SG_DXFER_FROM_DEV
 -3

	)

76 
	#SG_DXFER_TO_FROM_DEV
 -4

	)

83 
	#SG_FLAG_DIRECT_IO
 1

	)

84 
	#SG_FLAG_LUN_INHIBIT
 2

	)

86 
	#SG_FLAG_NO_DXFER
 0x10000

	)

90 
	#SG_INFO_OK_MASK
 0x1

	)

91 
	#SG_INFO_OK
 0x0

	)

92 
	#SG_INFO_CHECK
 0x1

	)

94 
	#SG_INFO_DIRECT_IO_MASK
 0x6

	)

95 
	#SG_INFO_INDIRECT_IO
 0x0

	)

96 
	#SG_INFO_DIRECT_IO
 0x2

	)

97 
	#SG_INFO_MIXED_IO
 0x4

	)

102 
	ssg_scsi_id
 {

104 
	mho°_no
;

105 
	mch™√l
;

107 
	mscsi_id
;

108 
	mlun
;

110 
	mscsi_ty≥
;

112 
	mh_cmd_≥r_lun
;

114 
	md_queue_dïth
;

116 
	munu£d
[2];

120 
	ssg_ªq_öfo
 {

121 
	mªq_°©e
;

122 
	m‹ph™
;

123 
	msg_io_ow√d
;

124 
	m¥obÀm
;

125 
	m∑ck_id
;

126 * 
	mu§_±r
;

127 
	mduøti⁄
;

129 
	munu£d
;

130 } 
	tsg_ªq_öfo_t
;

137 
	#SG_EMULATED_HOST
 0x2203

	)

141 
	#SG_SET_TRANSFORM
 0x2204

	)

143 
	#SG_GET_TRANSFORM
 0x2205

	)

145 
	#SG_SET_RESERVED_SIZE
 0x2275

	)

146 
	#SG_GET_RESERVED_SIZE
 0x2272

	)

149 
	#SG_GET_SCSI_ID
 0x2276

	)

153 
	#SG_SET_FORCE_LOW_DMA
 0x2279

	)

154 
	#SG_GET_LOW_DMA
 0x227®

	)

160 
	#SG_SET_FORCE_PACK_ID
 0x227b

	)

161 
	#SG_GET_PACK_ID
 0x227¯

	)

163 
	#SG_GET_NUM_WAITING
 0x227d

	)

166 
	#SG_GET_SG_TABLESIZE
 0x227F

	)

168 
	#SG_GET_VERSION_NUM
 0x2282

	)

171 
	#SG_SCSI_RESET
 0x2284

	)

173 
	#SG_SCSI_RESET_NOTHING
 0

	)

174 
	#SG_SCSI_RESET_DEVICE
 1

	)

175 
	#SG_SCSI_RESET_BUS
 2

	)

176 
	#SG_SCSI_RESET_HOST
 3

	)

179 
	#SG_IO
 0x2285

	)

181 
	#SG_GET_REQUEST_TABLE
 0x2286

	)

184 
	#SG_SET_KEEP_ORPHAN
 0x2287

	)

185 
	#SG_GET_KEEP_ORPHAN
 0x2288

	)

188 
	#SG_SCATTER_SZ
 (8 * 4096Ë

	)

196 
	#SG_DEFAULT_RETRIES
 1

	)

199 
	#SG_DEF_FORCE_LOW_DMA
 0

	)

200 
	#SG_DEF_FORCE_PACK_ID
 0

	)

201 
	#SG_DEF_KEEP_ORPHAN
 0

	)

202 
	#SG_DEF_RESERVED_SIZE
 
SG_SCATTER_SZ


	)

205 
	#SG_MAX_QUEUE
 16

	)

207 
	#SG_BIG_BUFF
 
SG_DEF_RESERVED_SIZE


	)

210 
sg_io_hdr
 
	tSg_io_hdr
;

211 
sg_io_vec
 
	tSg_io_vec
;

212 
sg_scsi_id
 
	tSg_scsi_id
;

213 
sg_ªq_öfo
 
	tSg_ªq_öfo
;

220 
	#SG_MAX_SENSE
 16

	)

222 
	ssg_hódî


225 
	m∑ck_Àn
;

227 
	mª∂y_Àn
;

229 
	m∑ck_id
;

231 
	mªsu…
;

233 
	mtwñve_byã
:1;

235 
	mèrgë_°©us
:5;

237 
	mho°_°©us
:8;

239 
	mdrivî_°©us
:8;

241 
	mŸhî_Êags
:10;

246 
	m£n£_buf„r
[
SG_MAX_SENSE
];

254 
	#SG_SET_TIMEOUT
 0x2201

	)

255 
	#SG_GET_TIMEOUT
 0x2202

	)

258 
	#SG_GET_COMMAND_Q
 0x2270

	)

259 
	#SG_SET_COMMAND_Q
 0x2271

	)

263 
	#SG_SET_DEBUG
 0x227ê

	)

265 
	#SG_NEXT_CMD_LEN
 0x2283

	)

270 
	#SG_DEFAULT_TIMEOUT
 (60*
HZ
Ë

	)

271 
	#SG_DEF_COMMAND_Q
 0

	)

273 
	#SG_DEF_UNDERRUN_FLAG
 0

	)

	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@arch/arch.h

1 #i‚de‡
ARCH_H


2 
	#ARCH_H


	)

4 
	~"../lib/ty≥s.h
"

7 
	m¨ch_x86_64
 = 1,

8 
	m¨ch_x86
,

9 
	m¨ch_µc
,

10 
	m¨ch_ü64
,

11 
	m¨ch_s390
,

12 
	m¨ch_Æpha
,

13 
	m¨ch_•¨c
,

14 
	m¨ch_•¨c64
,

15 
	m¨ch_¨m
,

16 
	m¨ch_sh
,

17 
	m¨ch_hµa
,

18 
	m¨ch_mùs
,

19 
	m¨ch_Ørch64
,

21 
	m¨ch_gíîic
,

23 
	m¨ch_ƒ
,

27 
	mARCH_FLAG_1
 = 1 << 0,

28 
	mARCH_FLAG_2
 = 1 << 1,

29 
	mARCH_FLAG_3
 = 1 << 2,

30 
	mARCH_FLAG_4
 = 1 << 3,

33 
¨ch_Êags
;

35 
	#ARCH_CPU_CLOCK_WRAPS


	)

37 #i‡
deföed
(
__i386__
)

38 
	~"¨ch-x86.h
"

39 #ñi‡
deföed
(
__x86_64__
)

40 
	~"¨ch-x86_64.h
"

41 #ñi‡
deföed
(
__powîpc__
Ë|| deföed(
__powîpc64__
Ë|| deföed(
__µc__
)

42 
	~"¨ch-µc.h
"

43 #ñi‡
deföed
(
__ü64__
)

44 
	~"¨ch-ü64.h
"

45 #ñi‡
deföed
(
__Æpha__
)

46 
	~"¨ch-Æpha.h
"

47 #ñi‡
deföed
(
__s390x__
Ë|| deföed(
__s390__
)

48 
	~"¨ch-s390.h
"

49 #ñi‡
deföed
(
__•¨c__
)

50 
	~"¨ch-•¨c.h
"

51 #ñi‡
deföed
(
__•¨c64__
)

52 
	~"¨ch-•¨c64.h
"

53 #ñi‡
deföed
(
__¨m__
)

54 
	~"¨ch-¨m.h
"

55 #ñi‡
deföed
(
__mùs__
Ë|| deföed(
__mùs64__
)

56 
	~"¨ch-mùs.h
"

57 #ñi‡
deföed
(
__sh__
)

58 
	~"¨ch-sh.h
"

59 #ñi‡
deföed
(
__hµa__
)

60 
	~"¨ch-hµa.h
"

61 #ñi‡
deföed
(
__Ørch64__
)

62 
	~"¨ch-Ørch64.h
"

65 
	~"¨ch-gíîic.h
"

68 
	~"../lib/ffz.h
"

70 #i‚de‡
ARCH_HAVE_INIT


71 
ölöe
 
	$¨ch_öô
(*
ívp
[])

74 
	}
}

	@blktrace.h

1 #i‚de‡
FIO_BLKTRACE_H


2 
	#FIO_BLKTRACE_H


	)

4 #ifde‡
FIO_HAVE_BLKTRACE


6 
is_blkåa˚
(const *, *);

7 
lﬂd_blkåa˚
(
thªad_d©a
 *, const *, );

11 
ölöe
 
	$is_blkåa˚
(c⁄° *
‚ame
, *
√ed_sw≠
)

14 
	}
}

16 
ölöe
 
	$lﬂd_blkåa˚
(
thªad_d©a
 *
td
, c⁄° *
‚ame
,

17 
√ed_sw≠
)

20 
	}
}

	@blktrace_api.h

1 #i‚de‡
BLKTRACEAPI_H


2 
	#BLKTRACEAPI_H


	)

4 
	~<asm/ty≥s.h
>

10 
	mBLK_TC_READ
 = 1 << 0,

11 
	mBLK_TC_WRITE
 = 1 << 1,

12 
	mBLK_TC_BARRIER
 = 1 << 2,

13 
	mBLK_TC_SYNC
 = 1 << 3,

14 
	mBLK_TC_QUEUE
 = 1 << 4,

15 
	mBLK_TC_REQUEUE
 = 1 << 5,

16 
	mBLK_TC_ISSUE
 = 1 << 6,

17 
	mBLK_TC_COMPLETE
 = 1 << 7,

18 
	mBLK_TC_FS
 = 1 << 8,

19 
	mBLK_TC_PC
 = 1 << 9,

20 
	mBLK_TC_NOTIFY
 = 1 << 10,

21 
	mBLK_TC_AHEAD
 = 1 << 11,

22 
	mBLK_TC_META
 = 1 << 12,

23 
	mBLK_TC_DISCARD
 = 1 << 13,

24 
	mBLK_TC_DRV_DATA
 = 1 << 14,

26 
	mBLK_TC_END
 = 1 << 15,

29 
	#BLK_TC_SHIFT
 (16)

	)

30 
	#BLK_TC_ACT
(
a˘
Ë(◊˘Ë<< 
BLK_TC_SHIFT
)

	)

36 
	m__BLK_TA_QUEUE
 = 1,

37 
	m__BLK_TA_BACKMERGE
,

38 
	m__BLK_TA_FRONTMERGE
,

39 
	m__BLK_TA_GETRQ
,

40 
	m__BLK_TA_SLEEPRQ
,

41 
	m__BLK_TA_REQUEUE
,

42 
	m__BLK_TA_ISSUE
,

43 
	m__BLK_TA_COMPLETE
,

44 
	m__BLK_TA_PLUG
,

45 
	m__BLK_TA_UNPLUG_IO
,

46 
	m__BLK_TA_UNPLUG_TIMER
,

47 
	m__BLK_TA_INSERT
,

48 
	m__BLK_TA_SPLIT
,

49 
	m__BLK_TA_BOUNCE
,

50 
	m__BLK_TA_REMAP
,

51 
	m__BLK_TA_ABORT
,

52 
	m__BLK_TA_DRV_DATA
,

58 
	eblkåa˚_nŸify
 {

59 
	m__BLK_TN_PROCESS
 = 0,

60 
	m__BLK_TN_TIMESTAMP
,

61 
	m__BLK_TN_MESSAGE
,

67 
	#BLK_TA_QUEUE
 (
__BLK_TA_QUEUE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

68 
	#BLK_TA_BACKMERGE
 (
__BLK_TA_BACKMERGE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

69 
	#BLK_TA_FRONTMERGE
 (
__BLK_TA_FRONTMERGE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

70 
	#BLK_TA_GETRQ
 (
__BLK_TA_GETRQ
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

71 
	#BLK_TA_SLEEPRQ
 (
__BLK_TA_SLEEPRQ
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

72 
	#BLK_TA_REQUEUE
 (
__BLK_TA_REQUEUE
 | 
	`BLK_TC_ACT
(
BLK_TC_REQUEUE
))

	)

73 
	#BLK_TA_ISSUE
 (
__BLK_TA_ISSUE
 | 
	`BLK_TC_ACT
(
BLK_TC_ISSUE
))

	)

74 
	#BLK_TA_COMPLETE
 (
__BLK_TA_COMPLETE
| 
	`BLK_TC_ACT
(
BLK_TC_COMPLETE
))

	)

75 
	#BLK_TA_PLUG
 (
__BLK_TA_PLUG
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

76 
	#BLK_TA_UNPLUG_IO
 (
__BLK_TA_UNPLUG_IO
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

77 
	#BLK_TA_UNPLUG_TIMER
 (
__BLK_TA_UNPLUG_TIMER
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

78 
	#BLK_TA_INSERT
 (
__BLK_TA_INSERT
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

79 
	#BLK_TA_SPLIT
 (
__BLK_TA_SPLIT
)

	)

80 
	#BLK_TA_BOUNCE
 (
__BLK_TA_BOUNCE
)

	)

81 
	#BLK_TA_REMAP
 (
__BLK_TA_REMAP
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

82 
	#BLK_TA_DRV_DATA
 (
__BLK_TA_DRV_DATA
 | 
	`BLK_TC_ACT
(
BLK_TC_DRV_DATA
))

	)

84 
	#BLK_TN_PROCESS
 (
__BLK_TN_PROCESS
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

85 
	#BLK_TN_TIMESTAMP
 (
__BLK_TN_TIMESTAMP
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

86 
	#BLK_TN_MESSAGE
 (
__BLK_TN_MESSAGE
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

88 
	#BLK_IO_TRACE_MAGIC
 0x65617400

	)

89 
	#BLK_IO_TRACE_VERSION
 0x07

	)

94 
	sblk_io_åa˚
 {

95 
__u32
 
	mmagic
;

96 
__u32
 
	m£quí˚
;

97 
__u64
 
	mtime
;

98 
__u64
 
	m£˘‹
;

99 
__u32
 
	mbyãs
;

100 
__u32
 
	ma˘i⁄
;

101 
__u32
 
	mpid
;

102 
__u32
 
	mdevi˚
;

103 
__u32
 
	m˝u
;

104 
__u16
 
	mîr‹
;

105 
__u16
 
	mpdu_Àn
;

111 
	sblk_io_åa˚_ªm≠
 {

112 
__u32
 
	mdevi˚
;

113 
__u32
 
	mdevi˚_‰om
;

114 
__u64
 
	m£˘‹
;

120 
	sblk_u£r_åa˚_£tup
 {

121 
	m«me
[32];

122 
__u16
 
	ma˘_mask
;

123 
__u32
 
	mbuf_size
;

124 
__u32
 
	mbuf_ƒ
;

125 
__u64
 
	m°¨t_lba
;

126 
__u64
 
	míd_lba
;

127 
__u32
 
	mpid
;

	@cairo_text_helpers.h

1 #i‚de‡
CAIRO_TEXT_HELPERS_H


2 
	#CAIRO_TEXT_HELPERS_H


	)

4 
døw_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

5 
f⁄tsize
, c⁄° *
ãxt
);

7 
døw_right_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

8 
x
, 
y
,

9 
f⁄tsize
, c⁄° *
ãxt
);

11 
døw_À·_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

12 
x
, 
y
,

13 
f⁄tsize
, c⁄° *
ãxt
);

15 
døw_vîtiˇl_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
,

16 
y
, 
f⁄tsize
,

17 c⁄° *
ãxt
);

	@cgroup.h

1 #i‚de‡
FIO_CGROUP_H


2 
	#FIO_CGROUP_H


	)

4 #ifde‡
FIO_HAVE_CGROUPS


6 
cgroup_£tup
(
thªad_d©a
 *, 
Êi°_hód
 *, **);

7 
cgroup_shutdown
(
thªad_d©a
 *, **);

9 
cgroup_kûl
(
Êi°_hód
 *
li°
);

13 
ölöe
 
	$cgroup_£tup
(
thªad_d©a
 *
td
, 
Êi°_hód
 *
li°
,

14 **
m¡
)

16 
	`td_vîr‹
(
td
, 
EINVAL
, "cgroup_setup");

18 
	}
}

20 
ölöe
 
	$cgroup_shutdown
(
thªad_d©a
 *
td
, **
m¡
)

22 
	}
}

24 
ölöe
 
	$cgroup_kûl
(
Êi°_hód
 *
li°
)

26 
	}
}

	@client.h

1 #i‚de‡
CLIENT_H


2 
	#CLIENT_H


	)

4 
	~<sys/sockë.h
>

5 
	~<sys/un.h
>

6 
	~<√töë/ö.h
>

7 
	~<¨∑/öë.h
>

9 
	~"lib/ty≥s.h
"

10 
	~"°©.h
"

12 
	gfio_√t_cmd
;

13 
	g˛õ¡_›s
;

16 
	mClõ¡_¸óãd
 = 0,

17 
	mClõ¡_c⁄√˘ed
 = 1,

18 
	mClõ¡_°¨ãd
 = 2,

19 
	mClõ¡_ru¬ög
 = 3,

20 
	mClõ¡_°›≥d
 = 4,

21 
	mClõ¡_exôed
 = 5,

24 
	s˛õ¡_fûe
 {

25 *
	mfûe
;

26 
boﬁ
 
	mªmŸe
;

29 
	sfio_˛õ¡
 {

30 
Êi°_hód
 
	mli°
;

31 
Êi°_hód
 
	mhash_li°
;

32 
Êi°_hód
 
	m¨g_li°
;

34 
sockaddr_ö
 
	maddr
;

35 
sockaddr_ö6
 
	maddr6
;

36 
sockaddr_un
 
	maddr_un
;

38 *
	mho°«me
;

39 
	mp‹t
;

40 
	mfd
;

41 
	mªfs
;

42 
	mœ°_cmd
;

44 *
	m«me
;

46 
Êi°_hód
 *
	m›t_li°s
;

48 
	m°©e
;

50 
boﬁ
 
	mskù_√wlöe
;

51 
boﬁ
 
	mis_sock
;

52 
boﬁ
 
	mdisk_°©s_shown
;

53 
	mjobs
;

54 
	mƒ_°©
;

55 
	mîr‹
;

56 
	msig«l
;

57 
	mùv6
;

58 
boﬁ
 
	m£¡_job
;

59 
boﬁ
 
	mdid_°©
;

60 
uöt32_t
 
	mty≥
;

62 
uöt32_t
 
	mthªad_numbî
;

63 
uöt32_t
 
	mgroupid
;

65 
Êi°_hód
 
	mëa_li°
;

66 
˛õ¡_ëa
 *
	mëa_ö_Êight
;

67 
	mëa_timeouts
;

69 
Êi°_hód
 
	mcmd_li°
;

71 
uöt16_t
 
	m¨gc
;

72 **
	m¨gv
;

74 
˛õ¡_›s
 *
	m›s
;

75 *
	m˛õ¡_d©a
;

77 
˛õ¡_fûe
 *
	mfûes
;

78 
	mƒ_fûes
;

81 (
	t˛õ¡_cmd_›
)(
	tfio_˛õ¡
 *, 
	tfio_√t_cmd
 *);

82 (
	t˛õ¡_ëa_›
)(
	tjobs_ëa
 *
	tje
);

83 (
	t˛õ¡_timed_out_›
)(
	tfio_˛õ¡
 *);

84 (
	t˛õ¡_jobs_ëa_›
)(
	tfio_˛õ¡
 *
	t˛õ¡
, 
	tjobs_ëa
 *
	tje
);

86 
	s˛õ¡_›s
 {

87 
˛õ¡_cmd_›
 *
ãxt
;

88 
˛õ¡_cmd_›
 *
disk_utû
;

89 
˛õ¡_cmd_›
 *
thªad_°©us
;

90 
˛õ¡_cmd_›
 *
group_°©s
;

91 
˛õ¡_jobs_ëa_›
 *
jobs_ëa
;

92 
˛õ¡_ëa_›
 *
ëa
;

93 
˛õ¡_cmd_›
 *
¥obe
;

94 
˛õ¡_cmd_›
 *
quô
;

95 
˛õ¡_cmd_›
 *
add_job
;

96 
˛õ¡_cmd_›
 *
upd©e_job
;

97 
˛õ¡_timed_out_›
 *
timed_out
;

98 
˛õ¡_cmd_›
 *
°›
;

99 
˛õ¡_cmd_›
 *
°¨t
;

100 
˛õ¡_cmd_›
 *
job_°¨t
;

101 
˛õ¡_timed_out_›
 *
ªmoved
;

103 
ëa_m£c
;

104 
°ay_c⁄√˘ed
;

105 
uöt32_t
 
˛õ¡_ty≥
;

108 
˛õ¡_›s
 
fio_˛õ¡_›s
;

110 
	s˛õ¡_ëa
 {

111 
≥ndög
;

112 
jobs_ëa
 
ëa
;

115 
	`fio_h™dÀ_˛õ¡
(
fio_˛õ¡
 *);

116 
	`fio_˛õ¡_sum_jobs_ëa
(
jobs_ëa
 *
d°
, jobs_ë®*
je
);

119 
Fio_˛õ¡_ùv4
 = 1,

120 
Fio_˛õ¡_ùv6
,

121 
Fio_˛õ¡_sockë
,

124 
	`fio_˛õ¡_c⁄√˘
(
fio_˛õ¡
 *);

125 
	`fio_˛õ¡s_c⁄√˘
();

126 
	`fio_°¨t_˛õ¡
(
fio_˛õ¡
 *);

127 
	`fio_°¨t_Æl_˛õ¡s
();

128 
	`fio_˛õ¡s_£nd_öi
(const *);

129 
	`fio_˛õ¡_£nd_öi
(
fio_˛õ¡
 *, c⁄° *, 
boﬁ
);

130 
	`fio_h™dÀ_˛õ¡s
(
˛õ¡_›s
 *);

131 
	`fio_˛õ¡_add
(
˛õ¡_›s
 *, const *, **);

132 
fio_˛õ¡
 *
	`fio_˛õ¡_add_ex∂icô
(
˛õ¡_›s
 *, const *, , );

133 
	`fio_˛õ¡_add_cmd_›ti⁄
(*, const *);

134 
	`fio_˛õ¡_add_öi_fûe
(*, c⁄° *, 
boﬁ
);

135 
	`fio_˛õ¡_ãrmö©e
(
fio_˛õ¡
 *);

136 
fio_˛õ¡
 *
	`fio_gë_˛õ¡
(fio_client *);

137 
	`fio_put_˛õ¡
(
fio_˛õ¡
 *);

138 
	`fio_˛õ¡_upd©e_›ti⁄s
(
fio_˛õ¡
 *, 
thªad_›ti⁄s
 *, 
uöt64_t
 *);

139 
	`fio_˛õ¡_waô_f‹_ª∂y
(
fio_˛õ¡
 *, 
uöt64_t
);

140 
	`fio_˛õ¡s_£nd_åiggî
(const *);

142 
	#FIO_CLIENT_DEF_ETA_MSEC
 900

	)

145 
FIO_CLIENT_TYPE_CLI
 = 1,

146 
FIO_CLIENT_TYPE_GUI
 = 2,

149 
sum_°©_˛õ¡s
;

150 
thªad_°©
 
˛õ¡_ts
;

151 
group_run_°©s
 
˛õ¡_gs
;

	@compiler/compiler.h

1 #i‚de‡
FIO_COMPILER_H


2 
	#FIO_COMPILER_H


	)

3 
	~<as£π.h
>

5 #i‡
__GNUC__
 >= 4

6 
	~"compûî-gcc4.h
"

7 #ñi‡
__GNUC__
 == 3

8 
	~"compûî-gcc3.h
"

10 #îr‹ 
Compûî
 
too
 
ﬁd
, 
√ed
 
gcc
 
©
 
Àa°
 gcc 3.x

13 #i‚de‡
__mu°_check


14 
	#__mu°_check


	)

20 
	#fio_unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

21 
	#fio_öô
 
	`__©åibuã__
((
c⁄°ru˘‹
))

	)

22 
	#fio_exô
 
	`__©åibuã__
((
de°ru˘‹
))

	)

24 
	#fio_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

30 
	#ty≥check
(
ty≥
,
x
) \

31 ({ 
ty≥
 
__dummy
; \

32 
	`ty≥of
(
x
Ë
__dummy2
; \

33 ()(&
__dummy
 =&
__dummy2
); \

35 })

	)

38 #i‡
deföed
(
CONFIG_STATIC_ASSERT
)

39 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
Ë
	`_Sètic_as£π
(c⁄dôi⁄, msg)

	)

41 #ñi‡!
deföed
(
CONFIG_DISABLE_OPTIMIZATIONS
)

43 #i‚de‡
__compûëime_îr‹


44 
	#__compûëime_îr‹
(
mesßge
)

	)

47 #i‚de‡
__compûëime_îr‹_ÁŒback


48 
	#__compûëime_îr‹_ÁŒback
(
c⁄dôi⁄
Ëdÿ{ } 0)

	)

51 
	#__compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
) \

53 
__c⁄d
 = !(
c⁄dôi⁄
); \

54 
¥efix
 ## 
	`suffix
(Ë
	`__compûëime_îr‹
(
msg
); \

55 i‡(
__c⁄d
) \

56 
¥efix
 ## 
	`suffix
(); \

57 
	`__compûëime_îr‹_ÁŒback
(
__c⁄d
); \

58 } 0)

	)

60 
	#_compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
) \

61 
	`__compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
)

	)

63 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
) \

64 
	`_compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
__compûëime_as£π_
, 
__LINE__
)

	)

68 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
Ëdÿ{ } 0)

	)

72 #ifde‡
FIO_INTERNAL


73 
	#ARRAY_SIZE
(
x
Ë(((x)Ë/ (((x)[0])))

	)

74 
	#FIELD_SIZE
(
s
, 
f
Ë((((
	`ty≥of
(s))0)->f))

	)

	@crc/crc16.h

15 #i‚de‡
__CRC16_H


16 
	#__CRC16_H


	)

18 c⁄° 
¸c16_èbÀ
[256];

20 
fio_¸c16
(c⁄° *
buf„r
, 
Àn
);

22 
ölöe
 
	$¸c16_byã
(
¸c
,

23 c⁄° 
d©a
)

25  (
¸c
 >> 8Ë^ 
¸c16_èbÀ
[(¸¯^ 
d©a
) & 0xff];

26 
	}
}

	@crc/crc32.h

18 #i‚de‡
CRC32_H


19 
	#CRC32_H


	)

21 
uöt32_t
 
fio_¸c32
(const * const, );

	@crc/crc32c.h

18 #i‚de‡
CRC32C_H


19 
	#CRC32C_H


	)

21 
	~"../¨ch/¨ch.h
"

22 
	~"../lib/ty≥s.h
"

24 
uöt32_t
 
¸c32c_sw
(const *, );

25 
boﬁ
 
¸c32c_¨m64_avaûabÀ
;

26 
boﬁ
 
¸c32c_öãl_avaûabÀ
;

28 #ifde‡
ARCH_HAVE_ARM64_CRC_CRYPTO


29 
uöt32_t
 
¸c32c_¨m64
(const *, );

30 
¸c32c_¨m64_¥obe
();

32 
	#¸c32c_¨m64
 
¸c32c_sw


	)

33 
ölöe
 
	$¸c32c_¨m64_¥obe
()

35 
	}
}

38 #ifde‡
ARCH_HAVE_SSE4_2


39 
uöt32_t
 
¸c32c_öãl
(const *, );

40 
¸c32c_öãl_¥obe
();

42 
	#¸c32c_öãl
 
¸c32c_sw


	)

43 
ölöe
 
	$¸c32c_öãl_¥obe
()

45 
	}
}

48 
ölöe
 
uöt32_t
 
	$fio_¸c32c
(c⁄° *
buf
, 
Àn
)

50 i‡(
¸c32c_¨m64_avaûabÀ
)

51  
	`¸c32c_¨m64
(
buf
, 
Àn
);

53 i‡(
¸c32c_öãl_avaûabÀ
)

54  
	`¸c32c_öãl
(
buf
, 
Àn
);

56  
	`¸c32c_sw
(
buf
, 
Àn
);

57 
	}
}

	@crc/crc64.h

1 #i‚de‡
CRC64_H


2 
	#CRC64_H


	)

4 
fio_¸c64
(const *, );

	@crc/crc7.h

1 #i‚de‡
CRC7_H


2 
	#CRC7_H


	)

4 c⁄° 
¸c7_syndrome_èbÀ
[256];

6 
ölöe
 
	$¸c7_byã
(
¸c
, 
d©a
)

8  
¸c7_syndrome_èbÀ
[(
¸c
 << 1Ë^ 
d©a
];

9 
	}
}

11 
fio_¸c7
(c⁄° *
buf„r
, 
Àn
);

	@crc/md5.h

1 #i‚de‡
MD5_H


2 
	#MD5_H


	)

4 
	~<°döt.h
>

6 
	#MD5_DIGEST_SIZE
 16

	)

7 
	#MD5_HMAC_BLOCK_SIZE
 64

	)

8 
	#MD5_BLOCK_WORDS
 16

	)

9 
	#MD5_HASH_WORDS
 4

	)

11 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

12 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

13 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

14 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

16 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
ö
, 
s
) \

17 (
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
ö
, w = (w<<
s
 | w>>(32-s)Ë+ x)

	)

19 
	sfio_md5_˘x
 {

20 
uöt32_t
 *
	mhash
;

21 
uöt32_t
 
	mblock
[
MD5_BLOCK_WORDS
];

22 
uöt64_t
 
	mbyã_cou¡
;

25 
fio_md5_upd©e
(
fio_md5_˘x
 *, c⁄° 
uöt8_t
 *, );

26 
fio_md5_föÆ
(
fio_md5_˘x
 *);

27 
fio_md5_öô
(
fio_md5_˘x
 *);

	@crc/sha1.h

1 #i‚de‡
FIO_SHA1


2 
	#FIO_SHA1


	)

10 
	sfio_sha1_˘x
 {

11 
uöt32_t
 *
	mH
;

12 
	mW
[16];

13 
	msize
;

16 
fio_sha1_öô
(
fio_sha1_˘x
 *);

17 
fio_sha1_upd©e
(
fio_sha1_˘x
 *, c⁄° *
d©aIn
, 
Àn
);

18 
fio_sha1_föÆ
(
fio_sha1_˘x
 *);

	@crc/sha256.h

1 #i‚de‡
FIO_SHA256_H


2 
	#FIO_SHA256_H


	)

4 
	#SHA256_DIGEST_SIZE
 32

	)

5 
	#SHA256_BLOCK_SIZE
 64

	)

7 
	sfio_sha256_˘x
 {

8 
uöt32_t
 
	mcou¡
;

9 
uöt32_t
 
	m°©e
[
SHA256_DIGEST_SIZE
 / 4];

10 
uöt8_t
 *
	mbuf
;

13 
fio_sha256_öô
(
fio_sha256_˘x
 *);

14 
fio_sha256_upd©e
(
fio_sha256_˘x
 *, c⁄° 
uöt8_t
 *, );

15 
fio_sha256_föÆ
(
fio_sha256_˘x
 *);

	@crc/sha3.h

4 #i‚de‡
__CRYPTO_SHA3_H__


5 
	#__CRYPTO_SHA3_H__


	)

7 
	~<öây≥s.h
>

9 
	#SHA3_224_DIGEST_SIZE
 (224 / 8)

	)

10 
	#SHA3_224_BLOCK_SIZE
 (200 - 2 * 
SHA3_224_DIGEST_SIZE
)

	)

12 
	#SHA3_256_DIGEST_SIZE
 (256 / 8)

	)

13 
	#SHA3_256_BLOCK_SIZE
 (200 - 2 * 
SHA3_256_DIGEST_SIZE
)

	)

15 
	#SHA3_384_DIGEST_SIZE
 (384 / 8)

	)

16 
	#SHA3_384_BLOCK_SIZE
 (200 - 2 * 
SHA3_384_DIGEST_SIZE
)

	)

18 
	#SHA3_512_DIGEST_SIZE
 (512 / 8)

	)

19 
	#SHA3_512_BLOCK_SIZE
 (200 - 2 * 
SHA3_512_DIGEST_SIZE
)

	)

21 
	sfio_sha3_˘x
 {

22 
uöt64_t
 
	m°
[25];

23 
	mmd_Àn
;

24 
	mrsiz
;

25 
	mrsizw
;

27 
	m∑πül
;

28 
uöt8_t
 
	mbuf
[
SHA3_224_BLOCK_SIZE
];

30 
uöt8_t
 *
	msha
;

33 
fio_sha3_224_öô
(
fio_sha3_˘x
 *
s˘x
);

34 
fio_sha3_256_öô
(
fio_sha3_˘x
 *
s˘x
);

35 
fio_sha3_384_öô
(
fio_sha3_˘x
 *
s˘x
);

36 
fio_sha3_512_öô
(
fio_sha3_˘x
 *
s˘x
);

38 
fio_sha3_upd©e
(
fio_sha3_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

39 
Àn
);

40 
fio_sha3_föÆ
(
fio_sha3_˘x
 *
s˘x
);

	@crc/sha512.h

1 #i‚de‡
FIO_SHA512_H


2 
	#FIO_SHA512_H


	)

4 
	sfio_sha512_˘x
 {

5 
uöt64_t
 
	m°©e
[8];

6 
uöt32_t
 
	mcou¡
[4];

7 
uöt8_t
 *
	mbuf
;

8 
uöt64_t
 
	mW
[80];

11 
fio_sha512_öô
(
fio_sha512_˘x
 *);

12 
fio_sha512_upd©e
(
fio_sha512_˘x
 *, c⁄° 
uöt8_t
 *, );

	@crc/test.h

1 #i‚de‡
FIO_CRC_TEST_H


2 
	#FIO_CRC_TEST_H


	)

4 
fio_¸˘e°
(c⁄° *
ty≥
);

	@crc/xxhash.h

60 #¥agm®
⁄˚


62 #i‡
deföed
 (
__˝lu•lus
)

66 
	~<öây≥s.h
>

68 
	sXXH_°©e32_t


70 
uöt64_t
 
tŸÆ_Àn
;

71 
uöt32_t
 
£ed
;

72 
uöt32_t
 
v1
;

73 
uöt32_t
 
v2
;

74 
uöt32_t
 
v3
;

75 
uöt32_t
 
v4
;

76 
memsize
;

77 
mem‹y
[16];

83 íum { 
XXH_OK
=0, 
XXH_ERROR
 } 
	tXXH_îr‹code
;

91 
uöt32_t
 
XXH32
 (c⁄° * 
öput
, uöt32_à
Àn
, uöt32_à
£ed
);

110 * 
XXH32_öô
 (
£ed
);

111 
XXH_îr‹code
 
XXH32_upd©e
 (* 
°©e
, c⁄° * 
öput
, 
Àn
);

112 
XXH32_dige°
 (* 
°©e
);

137 
XXH32_sizeofSèã
();

138 
XXH_îr‹code
 
XXH32_ª£tSèã
(* 
°©e
, 
£ed
);

140 
	#XXH32_SIZEOFSTATE
 48

	)

141 °ru˘ { 
Œ
[(
XXH32_SIZEOFSTATE
+(()-1))/()]; } 
	tXXH32_°©eS∑˚_t
;

154 
XXH32_öãrmedüãDige°
 (* 
°©e
);

169 
	#XXH32_„ed
 
XXH32_upd©e


	)

170 
	#XXH32_ªsu…
 
XXH32_dige°


	)

171 
	#XXH32_gëI¡îmedüãResu…
 
XXH32_öãrmedüãDige°


	)

175 #i‡
deföed
 (
__˝lu•lus
)

	@debug.h

1 #i‚de‡
FIO_DEBUG_H


2 
	#FIO_DEBUG_H


	)

4 
	~<as£π.h
>

5 
	~"lib/ty≥s.h
"

6 
	~"log.h
"

9 
	mFD_PROCESS
 = 0,

10 
	mFD_FILE
,

11 
	mFD_IO
,

12 
	mFD_MEM
,

13 
	mFD_BLKTRACE
,

14 
	mFD_VERIFY
,

15 
	mFD_RANDOM
,

16 
	mFD_PARSE
,

17 
	mFD_DISKUTIL
,

18 
	mFD_JOB
,

19 
	mFD_MUTEX
,

20 
	mFD_PROFILE
,

21 
	mFD_TIME
,

22 
	mFD_NET
,

23 
	mFD_RATE
,

24 
	mFD_COMPRESS
,

25 
	mFD_STEADYSTATE
,

26 
	mFD_HELPERTHREAD
,

27 
	mFD_DEBUG_MAX
,

30 
fio_debug_jobno
, *
fio_debug_jobp
, *
fio_w¨√d
;

32 
ölöe
 
boﬁ
 
	$fio_did_w¨n
(
mask
)

34 i‡(*
fio_w¨√d
 & 
mask
)

35  
åue
;

37 *
fio_w¨√d
 |
mask
;

38  
Ál£
;

39 
	}
}

42 
	mFIO_WARN_ROOT_FLUSH
 = 1,

43 
	mFIO_WARN_VERIFY_BUF
 = 2,

44 
	mFIO_WARN_ZONED_BUG
 = 4,

45 
	mFIO_WARN_IOLOG_DROP
 = 8,

46 
	mFIO_WARN_FADVISE
 = 16,

49 #ifde‡
FIO_INC_DEBUG


50 
	sdebug_Àvñ
 {

51 c⁄° *
	m«me
;

52 c⁄° *
	mhñp
;

53 
	mshi·
;

54 
	mjobno
;

56 c⁄° 
debug_Àvñ
 
debug_Àvñs
[];

58 
fio_debug
;

60 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...Ë
	`__©åibuã__
((
	`f‹m©
 (
¥ötf
, 2, 3)));

62 
	#d¥öt
(
ty≥
, 
°r
, 
¨gs
...) \

64 i‡((((1 << 
ty≥
)Ë& 
fio_debug
) == 0) \

66 
	`__d¥öt
((
ty≥
), (
°r
), ##
¨gs
); \

67 
	}
} 0) \

68 

	)

71 
ölöe
 
	$d¥öt
(
ty≥
, c⁄° *
°r
, ...)

73 
	}
}

	@diskutil.h

1 #i‚de‡
FIO_DISKUTIL_H


2 
	#FIO_DISKUTIL_H


	)

3 
	~"js⁄.h
"

4 
	#FIO_DU_NAME_SZ
 64

	)

6 
	~"lib/ouçut_buf„r.h
"

7 
	~"hñ≥r_thªad.h
"

9 
	sdisk_utû_°©s
 {

10 
uöt64_t
 
	mios
[2];

11 
uöt64_t
 
	mmîges
[2];

12 
uöt64_t
 
	m£˘‹s
[2];

13 
uöt64_t
 
	mticks
[2];

14 
uöt64_t
 
	mio_ticks
;

15 
uöt64_t
 
	mtime_ö_queue
;

16 
uöt64_t
 
	mm£c
;

22 
	sdisk_utû_°©
 {

23 
uöt8_t
 
	m«me
[
FIO_DU_NAME_SZ
];

24 
disk_utû_°©s
 
	ms
;

27 
	sdisk_utû_agg
 {

28 
uöt64_t
 
	mios
[2];

29 
uöt64_t
 
	mmîges
[2];

30 
uöt64_t
 
	m£˘‹s
[2];

31 
uöt64_t
 
	mticks
[2];

32 
uöt64_t
 
	mio_ticks
;

33 
uöt64_t
 
	mtime_ö_queue
;

34 
uöt32_t
 
	m¶avecou¡
;

35 
uöt32_t
 
	m∑d
;

36 
fio_Â64_t
 
	mmax_utû
;

42 
	sdisk_utû
 {

43 
Êi°_hód
 
	mli°
;

47 
Êi°_hód
 
	m¶avñi°
;

49 *
	msysfs_roŸ
;

50 
	m∑th
[
PATH_MAX
];

51 
	mmaj‹
, 
	mmö‹
;

53 
disk_utû_°©
 
	mdus
;

54 
disk_utû_°©
 
	mœ°_dus
;

56 
disk_utû_agg
 
	magg
;

65 
Êi°_hód
 
	m¶aves
;

67 
time•ec
 
	mtime
;

69 
fio_muãx
 *
	mlock
;

70 
	mu£rs
;

73 
ölöe
 
	$disk_utû_mod
(
disk_utû
 *
du
, 
vÆ
)

75 i‡(
du
) {

76 
Êi°_hód
 *
n
;

78 
	`fio_muãx_down
(
du
->
lock
);

79 
du
->
u£rs
 +
vÆ
;

81 
	`Êi°_f‹_óch
(
n
, &
du
->
¶avñi°
) {

82 
disk_utû
 *
¶ave
;

84 
¶ave
 = 
	`Êi°_íåy
(
n
, 
disk_utû
, 
¶avñi°
);

85 
¶ave
->
u£rs
 +
vÆ
;

87 
	`fio_muãx_up
(
du
->
lock
);

89 
	}
}

90 
ölöe
 
	$disk_utû_öc
(
disk_utû
 *
du
)

92 
	`disk_utû_mod
(
du
, 1);

93 
	}
}

95 
ölöe
 
	$disk_utû_dec
(
disk_utû
 *
du
)

97 
	`disk_utû_mod
(
du
, -1);

98 
	}
}

100 
	#DISK_UTIL_MSEC
 (250)

	)

102 
Êi°_hód
 
disk_li°
;

107 #ifde‡
FIO_HAVE_DISK_UTIL


108 
¥öt_disk_utû
(
disk_utû_°©
 *, 
disk_utû_agg
 *, 
ãr£
, 
buf_ouçut
 *);

109 
show_disk_utû
(
ãr£
, 
js⁄_obje˘
 *
∑ª¡
, 
buf_ouçut
 *);

110 
js⁄_¨øy_add_disk_utû
(
disk_utû_°©
 *
dus
,

111 
disk_utû_agg
 *
agg
, 
js⁄_¨øy
 *
∑ª¡
);

112 
öô_disk_utû
(
thªad_d©a
 *);

113 
upd©e_io_ticks
();

114 
£tup_disk_utû
();

115 
disk_utû_¥u√_íåõs
();

118 
ölöe
 
	$¥öt_disk_utû
(
disk_utû_°©
 *
du
,

119 
disk_utû_agg
 *
agg
, 
ãr£
,

120 
buf_ouçut
 *
out
)

122 
	}
}

123 
	#show_disk_utû
(
ãr£
, 
∑ª¡
, 
out
)

	)

124 
	#disk_utû_¥u√_íåõs
()

	)

125 
	#öô_disk_utû
(
td
)

	)

126 
	#£tup_disk_utû
()

	)

127 
	#js⁄_¨øy_add_disk_utû
(
dus
, 
agg
, 
∑ª¡
)

	)

129 
ölöe
 
	$upd©e_io_ticks
()

131  
	`hñ≥r_should_exô
();

132 
	}
}

	@err.h

1 #i‚de‡
FIO_ERR_H


2 
	#FIO_ERR_H


	)

12 
	#MAX_ERRNO
 4095

	)

14 
	#IS_ERR_VALUE
(
x
Ë((xË>(
uöçå_t
)-
MAX_ERRNO
)

	)

16 
ölöe
 *
	$ERR_PTR
(
uöçå_t
 
îr‹
)

18  (*Ë
îr‹
;

19 
	}
}

21 
ölöe
 
uöçå_t
 
	$PTR_ERR
(c⁄° *
±r
)

23  (
uöçå_t
Ë
±r
;

24 
	}
}

26 
ölöe
 
uöçå_t
 
	$IS_ERR
(c⁄° *
±r
)

28  
	`IS_ERR_VALUE
((
uöçå_t
)
±r
);

29 
	}
}

31 
ölöe
 
uöçå_t
 
	$IS_ERR_OR_NULL
(c⁄° *
±r
)

33  !
±r
 || 
	`IS_ERR_VALUE
((
uöçå_t
)ptr);

34 
	}
}

36 
ölöe
 
	$PTR_ERR_OR_ZERO
(c⁄° *
±r
)

38 i‡(
	`IS_ERR
(
±r
))

39  
	`PTR_ERR
(
±r
);

42 
	}
}

	@fifo.h

1 #i‚de‡
FIO_FIFO_H


2 
	#FIO_FIFO_H


	)

23 
	~"mömax.h
"

25 
	sfifo
 {

26 *
	mbuf„r
;

27 
	msize
;

28 
	mö
;

29 
	mout
;

32 
fifo
 *
fifo_Æloc
();

33 
fifo_put
(
fifo
 *, *, );

34 
fifo_gë
(
fifo
 *, *, );

35 
fifo_‰ì
(
fifo
 *);

37 
ölöe
 
	$fifo_Àn
(
fifo
 *fifo)

39  
fifo
->
ö
 - fifo->
out
;

40 
	}
}

42 
ölöe
 
	$fifo_room
(
fifo
 *fifo)

44  
fifo
->
size
 - fifo->
ö
 + fifo->
out
;

45 
	}
}

	@file.h

1 #i‚de‡
FIO_FILE_H


2 
	#FIO_FILE_H


	)

4 
	~<°rög.h
>

5 
	~"compûî/compûî.h
"

6 
	~"io_ddú.h
"

7 
	~"Êi°.h
"

8 
	~"lib/zùf.h
"

9 
	~"lib/axm≠.h
"

10 
	~"lib/lf§.h
"

11 
	~"lib/gauss.h
"

16 
	efio_fûëy≥
 {

17 
	mFIO_TYPE_FILE
 = 1,

18 
	mFIO_TYPE_BLOCK
,

19 
	mFIO_TYPE_CHAR
,

20 
	mFIO_TYPE_PIPE
,

23 
	efio_fûe_Êags
 {

24 
	mFIO_FILE_›í
 = 1 << 0,

25 
	mFIO_FILE_˛osög
 = 1 << 1,

26 
	mFIO_FILE_exãnd
 = 1 << 2,

27 
	mFIO_FILE_d⁄e
 = 1 << 3,

28 
	mFIO_FILE_size_known
 = 1 << 4,

29 
	mFIO_FILE_hashed
 = 1 << 5,

30 
	mFIO_FILE_∑πül_mm≠
 = 1 << 6,

31 
	mFIO_FILE_axm≠
 = 1 << 7,

32 
	mFIO_FILE_lf§
 = 1 << 8,

35 
	efûe_lock_mode
 {

36 
	mFILE_LOCK_NONE
,

37 
	mFILE_LOCK_EXCLUSIVE
,

38 
	mFILE_LOCK_READWRITE
,

47 
	mFIO_FSERVICE_RANDOM
 = 1,

48 
	mFIO_FSERVICE_RR
 = 2,

49 
	mFIO_FSERVICE_SEQ
 = 3,

50 
	m__FIO_FSERVICE_NONUNIFORM
 = 0x100,

51 
	mFIO_FSERVICE_ZIPF
 = 
__FIO_FSERVICE_NONUNIFORM
 | 4,

52 
	mFIO_FSERVICE_PARETO
 = 
__FIO_FSERVICE_NONUNIFORM
 | 5,

53 
	mFIO_FSERVICE_GAUSS
 = 
__FIO_FSERVICE_NONUNIFORM
 | 6,

55 
	mFIO_FSERVICE_SHIFT
 = 10,

62 
	efio_ÁŒoˇã_mode
 {

63 
	mFIO_FALLOCATE_NONE
 = 1,

64 
	mFIO_FALLOCATE_POSIX
 = 2,

65 
	mFIO_FALLOCATE_KEEP_SIZE
 = 3,

66 
	mFIO_FALLOCATE_NATIVE
 = 4,

73 
	sfio_fûe
 {

74 
Êi°_hód
 
	mhash_li°
;

75 
fio_fûëy≥
 
	mfûëy≥
;

77 
	mfd
;

78 
	mshadow_fd
;

79 #ifde‡
WIN32


80 
HANDLE
 
	mhFûe
;

81 
HANDLE
 
	mioCP
;

87 
	mmaj‹
, 
	mmö‹
;

88 
	mfûío
;

89 
	mbs
;

90 *
	mfûe_«me
;

96 
uöt64_t
 
	mªÆ_fûe_size
;

97 
uöt64_t
 
	mfûe_off£t
;

98 
uöt64_t
 
	mio_size
;

103 
uöt64_t
 
	mœ°_pos
[
DDIR_RWDIR_CNT
];

104 
uöt64_t
 
	mœ°_°¨t
[
DDIR_RWDIR_CNT
];

106 
uöt64_t
 
	mfú°_wrôe
;

107 
uöt64_t
 
	mœ°_wrôe
;

113 
uöt64_t
 *
	mœ°_wrôe_comp
;

114 
	mœ°_wrôe_idx
;

120 
uöt64_t
 
	mígöe_pos
;

121 *
	mígöe_d©a
;

128 
fio_muãx
 *
	mlock
;

129 
fio_rwlock
 *
	mrwlock
;

136 
axm≠
 *
	mio_axm≠
;

137 
fio_lf§
 
	mlf§
;

144 
zùf_°©e
 
	mzùf
;

145 
gauss_°©e
 
	mgauss
;

148 
	mª„ªn˚s
;

149 
fio_fûe_Êags
 
	mÊags
;

151 
disk_utû
 *
	mdu
;

154 
	#FILE_ENG_DATA
(
f
Ë((f)->
ígöe_d©a
)

	)

155 
	#FILE_SET_ENG_DATA
(
f
, 
d©a
Ë((f)->
ígöe_d©a
 = (d©a))

	)

157 
	#FILE_FLAG_FNS
(
«me
) \

158 
ölöe
 
fio_fûe_£t_
##
	`«me
(
fio_fûe
 *
f
) \

160 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†| 
FIO_FILE_
##
«me
); \

162 
ölöe
 
fio_fûe_˛ór_
##
	`«me
(
fio_fûe
 *
f
) \

164 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†& ~
FIO_FILE_
##
«me
); \

166 
ölöe
 
fio_fûe_
##
	`«me
(
fio_fûe
 *
f
) \

168  ((
f
)->
Êags
 & 
FIO_FILE_
##
«me
) != 0; \

169 }

	)

171 
FILE_FLAG_FNS
(
›í
);

172 
FILE_FLAG_FNS
(
˛osög
);

173 
FILE_FLAG_FNS
(
exãnd
);

174 
FILE_FLAG_FNS
(
d⁄e
);

175 
FILE_FLAG_FNS
(
size_known
);

176 
FILE_FLAG_FNS
(
hashed
);

177 
FILE_FLAG_FNS
(
∑πül_mm≠
);

178 
FILE_FLAG_FNS
(
axm≠
);

179 
FILE_FLAG_FNS
(
lf§
);

180 #unde‡
FILE_FLAG_FNS


185 
	gthªad_d©a
;

186 
˛o£_fûes
(
thªad_d©a
 *);

187 
˛o£_™d_‰ì_fûes
(
thªad_d©a
 *);

188 
uöt64_t
 
gë_°¨t_off£t
(
thªad_d©a
 *, 
fio_fûe
 *);

189 
__mu°_check
 
£tup_fûes
(
thªad_d©a
 *);

190 
__mu°_check
 
fûe_övÆid©e_ˇche
(
thªad_d©a
 *, 
fio_fûe
 *);

191 #ifde‡
__˝lu•lus


194 
__mu°_check
 
gíîic_›í_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

195 
__mu°_check
 
gíîic_˛o£_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

196 
__mu°_check
 
gíîic_gë_fûe_size
(
thªad_d©a
 *, 
fio_fûe
 *);

197 #ifde‡
__˝lu•lus


200 
__mu°_check
 
fûe_lookup_›í
(
fio_fûe
 *
f
, 
Êags
);

201 
boﬁ
 
__mu°_check
 
¥e_ªad_fûes
(
thªad_d©a
 *);

202 
gë_ønd_fûe_size
(
thªad_d©a
 *
td
);

203 
add_fûe
(
thªad_d©a
 *, const *, , );

204 
add_fûe_ex˛usive
(
thªad_d©a
 *, const *);

205 
gë_fûe
(
fio_fûe
 *);

206 
__mu°_check
 
put_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

207 
put_fûe_log
(
thªad_d©a
 *, 
fio_fûe
 *);

208 
lock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *, 
fio_ddú
);

209 
u∆ock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

210 
u∆ock_fûe_Æl
(
thªad_d©a
 *, 
fio_fûe
 *);

211 
add_dú_fûes
(
thªad_d©a
 *, const *);

212 
boﬁ
 
öô_øndom_m≠
(
thªad_d©a
 *);

213 
dup_fûes
(
thªad_d©a
 *, thread_data *);

214 
gë_fûío
(
thªad_d©a
 *, const *);

215 
‰ì_ªÀa£_fûes
(
thªad_d©a
 *);

216 
fûe£tup_mem_‰ì
();

217 
fio_fûe_ª£t
(
thªad_d©a
 *, 
fio_fûe
 *);

218 
boﬁ
 
fio_fûes_d⁄e
(
thªad_d©a
 *);

219 
boﬁ
 
exi°s_™d_nŸ_ªgfûe
(const *);

220 
fio_£t_dúe˘io
(
thªad_d©a
 *, 
fio_fûe
 *);

	@filehash.h

1 #i‚de‡
FIO_FILE_HASH_H


2 
	#FIO_FILE_HASH_H


	)

4 
	~"lib/ty≥s.h
"

6 
fûe_hash_öô
();

7 
fûe_hash_exô
();

8 
fio_fûe
 *
lookup_fûe_hash
(const *);

9 
fio_fûe
 *
add_fûe_hash
(fio_file *);

10 
ªmove_fûe_hash
(
fio_fûe
 *);

11 
fio_fûe_hash_lock
();

12 
fio_fûe_hash_u∆ock
();

13 
boﬁ
 
fûe_bloom_exi°s
(const *, bool);

	@filelock.h

1 #i‚de‡
FIO_LOCK_FILE_H


2 
	#FIO_LOCK_FILE_H


	)

4 
	~"lib/ty≥s.h
"

6 
fio_lock_fûe
(const *);

7 
boﬁ
 
fio_åylock_fûe
(const *);

8 
fio_u∆ock_fûe
(const *);

10 
fio_fûñock_öô
();

11 
fio_fûñock_exô
();

	@fio.h

1 #i‚de‡
FIO_H


2 
	#FIO_H


	)

4 
	~<sched.h
>

5 
	~<limôs.h
>

6 
	~<±hªad.h
>

7 
	~<sys/time.h
>

8 
	~<sys/ªsour˚.h
>

9 
	~<î∫o.h
>

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<°rög.h
>

14 
	~<öây≥s.h
>

15 
	~<as£π.h
>

17 
	~"compûî/compûî.h
"

18 
	~"thªad_›ti⁄s.h
"

19 
	~"Êi°.h
"

20 
	~"fifo.h
"

21 
	~"¨ch/¨ch.h
"

22 
	~"os/os.h
"

23 
	~"muãx.h
"

24 
	~"log.h
"

25 
	~"debug.h
"

26 
	~"fûe.h
"

27 
	~"io_ddú.h
"

28 
	~"i€ngöes.h
"

29 
	~"iﬁog.h
"

30 
	~"hñ≥rs.h
"

31 
	~"›ti⁄s.h
"

32 
	~"¥ofûe.h
"

33 
	~"fio_time.h
"

34 
	~"gëtime.h
"

35 
	~"o¶ib/gë›t.h
"

36 
	~"lib/ønd.h
"

37 
	~"lib/rbåì.h
"

38 
	~"lib/num2°r.h
"

39 
	~"˛õ¡.h
"

40 
	~"£rvî.h
"

41 
	~"°©.h
"

42 
	~"Êow.h
"

43 
	~"io_u.h
"

44 
	~"io_u_queue.h
"

45 
	~"w‹kqueue.h
"

46 
	~"°ódy°©e.h
"

48 #ifde‡
CONFIG_SOLARISAIO


49 
	~<sys/asynch.h
>

52 #ifde‡
CONFIG_LIBNUMA


53 
	~<löux/mempﬁicy.h
>

54 
	~<numa.h
>

59 
	#MPOL_LOCAL
 
MPOL_MAX


	)

62 #ifde‡
CONFIG_CUDA


63 
	~<cuda.h
>

70 
	mRW_SEQ_SEQ
 = 0,

71 
	mRW_SEQ_IDENT
,

75 
	m__TD_F_VER_BACKLOG
 = 0,

76 
	m__TD_F_TRIM_BACKLOG
,

77 
	m__TD_F_READ_IOLOG
,

78 
	m__TD_F_REFILL_BUFFERS
,

79 
	m__TD_F_SCRAMBLE_BUFFERS
,

80 
	m__TD_F_VER_NONE
,

81 
	m__TD_F_PROFILE_OPS
,

82 
	m__TD_F_COMPRESS
,

83 
	m__TD_F_COMPRESS_LOG
,

84 
	m__TD_F_VSTATE_SAVED
,

85 
	m__TD_F_NEED_LOCK
,

86 
	m__TD_F_CHILD
,

87 
	m__TD_F_NO_PROGRESS
,

88 
	m__TD_F_REGROW_LOGS
,

89 
	m__TD_F_MMAP_KEEP
,

90 
	m__TD_F_DIRS_CREATED
,

91 
	m__TD_F_CHECK_RATE
,

92 
	m__TD_F_LAST
,

96 
	mTD_F_VER_BACKLOG
 = 1U << 
__TD_F_VER_BACKLOG
,

97 
	mTD_F_TRIM_BACKLOG
 = 1U << 
__TD_F_TRIM_BACKLOG
,

98 
	mTD_F_READ_IOLOG
 = 1U << 
__TD_F_READ_IOLOG
,

99 
	mTD_F_REFILL_BUFFERS
 = 1U << 
__TD_F_REFILL_BUFFERS
,

100 
	mTD_F_SCRAMBLE_BUFFERS
 = 1U << 
__TD_F_SCRAMBLE_BUFFERS
,

101 
	mTD_F_VER_NONE
 = 1U << 
__TD_F_VER_NONE
,

102 
	mTD_F_PROFILE_OPS
 = 1U << 
__TD_F_PROFILE_OPS
,

103 
	mTD_F_COMPRESS
 = 1U << 
__TD_F_COMPRESS
,

104 
	mTD_F_COMPRESS_LOG
 = 1U << 
__TD_F_COMPRESS_LOG
,

105 
	mTD_F_VSTATE_SAVED
 = 1U << 
__TD_F_VSTATE_SAVED
,

106 
	mTD_F_NEED_LOCK
 = 1U << 
__TD_F_NEED_LOCK
,

107 
	mTD_F_CHILD
 = 1U << 
__TD_F_CHILD
,

108 
	mTD_F_NO_PROGRESS
 = 1U << 
__TD_F_NO_PROGRESS
,

109 
	mTD_F_REGROW_LOGS
 = 1U << 
__TD_F_REGROW_LOGS
,

110 
	mTD_F_MMAP_KEEP
 = 1U << 
__TD_F_MMAP_KEEP
,

111 
	mTD_F_DIRS_CREATED
 = 1U << 
__TD_F_DIRS_CREATED
,

112 
	mTD_F_CHECK_RATE
 = 1U << 
__TD_F_CHECK_RATE
,

116 
	mFIO_RAND_BS_OFF
 = 0,

117 
	mFIO_RAND_BS1_OFF
,

118 
	mFIO_RAND_BS2_OFF
,

119 
	mFIO_RAND_VER_OFF
,

120 
	mFIO_RAND_MIX_OFF
,

121 
	mFIO_RAND_FILE_OFF
,

122 
	mFIO_RAND_BLOCK_OFF
,

123 
	mFIO_RAND_FILE_SIZE_OFF
,

124 
	mFIO_RAND_TRIM_OFF
,

125 
	mFIO_RAND_BUF_OFF
,

126 
	mFIO_RAND_SEQ_RAND_READ_OFF
,

127 
	mFIO_RAND_SEQ_RAND_WRITE_OFF
,

128 
	mFIO_RAND_SEQ_RAND_TRIM_OFF
,

129 
	mFIO_RAND_START_DELAY
,

130 
	mFIO_DEDUPE_OFF
,

131 
	mFIO_RAND_POISSON_OFF
,

132 
	mFIO_RAND_ZONE_OFF
,

133 
	mFIO_RAND_POISSON2_OFF
,

134 
	mFIO_RAND_POISSON3_OFF
,

135 
	mFIO_RAND_NR_OFFS
,

139 
	mIO_MODE_INLINE
 = 0,

140 
	mIO_MODE_OFFLOAD
 = 1,

142 
	mRATE_PROCESS_LINEAR
 = 0,

143 
	mRATE_PROCESS_POISSON
 = 1,

147 
	mF_ADV_NONE
 = 0,

148 
	mF_ADV_TYPE
,

149 
	mF_ADV_RANDOM
,

150 
	mF_ADV_SEQUENTIAL
,

157 
sk_out_assign
(
sk_out
 *);

158 
sk_out_dr›
();

160 
	sz⁄e_•lô_ödex
 {

161 
uöt8_t
 
	msize_≥rc
;

162 
uöt8_t
 
	msize_≥rc_¥ev
;

163 
uöt64_t
 
	msize
;

164 
uöt64_t
 
	msize_¥ev
;

170 
	sthªad_d©a
 {

171 
Êi°_hód
 
	m›t_li°
;

172 
	mÊags
;

173 
thªad_›ti⁄s
 
	mo
;

174 *
	meo
;

175 
±hªad_t
 
	mthªad
;

176 
	mthªad_numbî
;

177 
	msubjob_numbî
;

178 
	mgroupid
;

179 
thªad_°©
 
ts
 
__©åibuã__
 ((
Æig√d
(8)));

181 
	m˛õ¡_ty≥
;

183 
io_log
 *
	m¶©_log
;

184 
io_log
 *
	m˛©_log
;

185 
io_log
 *
	m˛©_hi°_log
;

186 
io_log
 *
	mœt_log
;

187 
io_log
 *
	mbw_log
;

188 
io_log
 *
	mi›s_log
;

190 
w‹kqueue
 
	mlog_com¥ess_wq
;

192 
thªad_d©a
 *
	m∑ª¡
;

194 
uöt64_t
 
	m°©_io_byãs
[
DDIR_RWDIR_CNT
];

195 
time•ec
 
	mbw_ßm∂e_time
;

197 
uöt64_t
 
	m°©_io_blocks
[
DDIR_RWDIR_CNT
];

198 
time•ec
 
	mi›s_ßm∂e_time
;

200 vﬁ©ûê
	mupd©e_rußge
;

201 
fio_muãx
 *
	mrußge_£m
;

202 
rußge
 
	mru_°¨t
;

203 
rußge
 
	mru_íd
;

205 
fio_fûe
 **
	mfûes
;

206 *
	mfûe_locks
;

207 
	mfûes_size
;

208 
	mfûes_ödex
;

209 
	mƒ_›í_fûes
;

210 
	mƒ_d⁄e_fûes
;

212 
	m√xt_fûe
;

213 
‰™d_°©e
 
	m√xt_fûe_°©e
;

216 
zùf_°©e
 
	m√xt_fûe_zùf
;

217 
gauss_°©e
 
	m√xt_fûe_gauss
;

220 
	mzùf_thëa
;

221 
	m∑ªto_h
;

222 
	mgauss_dev
;

224 
	mîr‹
;

225 
	msig
;

226 
	md⁄e
;

227 
	m°›_io
;

228 
pid_t
 
	mpid
;

229 *
	m‹ig_buf„r
;

230 
size_t
 
	m‹ig_buf„r_size
;

231 vﬁ©ûê
	mrun°©e
;

232 vﬁ©ûê
boﬁ
 
	mãrmö©e
;

233 
boﬁ
 
	mœ°_was_sync
;

234 
fio_ddú
 
	mœ°_ddú
;

236 
	mmm≠fd
;

238 *
	miﬁog_buf
;

239 
FILE
 *
	miﬁog_f
;

241 
	mønd_£eds
[
FIO_RAND_NR_OFFS
];

243 
‰™d_°©e
 
	mb§™ge_°©e
[
DDIR_RWDIR_CNT
];

244 
‰™d_°©e
 
	mvîify_°©e
;

245 
‰™d_°©e
 
	måim_°©e
;

246 
‰™d_°©e
 
	mdñay_°©e
;

248 
‰™d_°©e
 
	mbuf_°©e
;

249 
‰™d_°©e
 
	mbuf_°©e_¥ev
;

250 
‰™d_°©e
 
	mdedu≥_°©e
;

251 
‰™d_°©e
 
	mz⁄e_°©e
;

253 
z⁄e_•lô_ödex
 **
	mz⁄e_°©e_ödex
;

255 
	mvîify_b©ch
;

256 
	måim_b©ch
;

258 
thªad_io_li°
 *
	mv°©e
;

260 
	mshm_id
;

266 
i€ngöe_›s
 *
	mio_›s
;

267 
	mio_›s_öô
;

272 *
	mio_›s_d©a
;

273 *
	mio_›s_dlh™dÀ
;

278 
	mcur_dïth
;

283 
	mio_u_queued
;

288 
	mio_u_ö_Êight
;

293 
io_u_rög
 
	mio_u_ªqueues
;

294 
io_u_queue
 
	mio_u_‰ìli°
;

295 
io_u_queue
 
	mio_u_Æl
;

296 
±hªad_muãx_t
 
	mio_u_lock
;

297 
±hªad_c⁄d_t
 
	m‰ì_c⁄d
;

302 
Êi°_hód
 
	mvîify_li°
;

303 
±hªad_t
 *
	mvîify_thªads
;

304 
	mƒ_vîify_thªads
;

305 
±hªad_c⁄d_t
 
	mvîify_c⁄d
;

306 
	mvîify_thªad_exô
;

311 
uöt64_t
 
	møã_bps
[
DDIR_RWDIR_CNT
];

312 
uöt64_t
 
	møã_√xt_io_time
[
DDIR_RWDIR_CNT
];

313 
	møã_byãs
[
DDIR_RWDIR_CNT
];

314 
	møã_blocks
[
DDIR_RWDIR_CNT
];

315 
	møã_io_issue_byãs
[
DDIR_RWDIR_CNT
];

316 
time•ec
 
	mœ°øã
[
DDIR_RWDIR_CNT
];

317 
öt64_t
 
	mœ°_u£c
[
DDIR_RWDIR_CNT
];

318 
‰™d_°©e
 
	mpoiss⁄_°©e
[
DDIR_RWDIR_CNT
];

323 
w‹kqueue
 
	mio_wq
;

325 
uöt64_t
 
	mtŸÆ_io_size
;

326 
uöt64_t
 
	mfûl_devi˚_size
;

331 
uöt64_t
 
	mio_issues
[
DDIR_RWDIR_CNT
];

332 
uöt64_t
 
	mio_issue_byãs
[
DDIR_RWDIR_CNT
];

333 
uöt64_t
 
	mlo›s
;

338 
uöt64_t
 
	mio_blocks
[
DDIR_RWDIR_CNT
];

339 
uöt64_t
 
	mthis_io_blocks
[
DDIR_RWDIR_CNT
];

340 
uöt64_t
 
	mio_byãs
[
DDIR_RWDIR_CNT
];

341 
uöt64_t
 
	mthis_io_byãs
[
DDIR_RWDIR_CNT
];

342 
uöt64_t
 
	mio_skù_byãs
;

343 
uöt64_t
 
	mz⁄e_byãs
;

344 
fio_muãx
 *
	mmuãx
;

345 
uöt64_t
 
	mbyãs_d⁄e
[
DDIR_RWDIR_CNT
];

350 
‰™d_°©e
 
	møndom_°©e
;

352 
time•ec
 
	m°¨t
;

353 
time•ec
 
	mïoch
;

354 
	munix_ïoch
;

355 
time•ec
 
	mœ°_issue
;

356 
	mtime_off£t
;

357 
time•ec
 
	mts_ˇche
;

358 
time•ec
 
	mãrmö©e_time
;

359 
	mts_ˇche_ƒ
;

360 
	mts_ˇche_mask
;

361 
boﬁ
 
	mømp_time_ovî
;

366 
time•ec
 
	mœãncy_ts
;

367 
	mœãncy_qd
;

368 
	mœãncy_qd_high
;

369 
	mœãncy_qd_low
;

370 
	mœãncy_Áûed
;

371 
uöt64_t
 
	mœãncy_ios
;

372 
	mœãncy_íd_run
;

377 
‰™d_°©e
 
	mrwmix_°©e
;

378 
	mrwmix_issues
;

379 
fio_ddú
 
	mrwmix_ddú
;

380 
	mddú_£q_ƒ
;

385 
‰™d_°©e
 
	m£q_ønd_°©e
[
DDIR_RWDIR_CNT
];

391 
rb_roŸ
 
	mio_hi°_åì
;

392 
Êi°_hód
 
	mio_hi°_li°
;

393 
	mio_hi°_Àn
;

398 
Êi°_hód
 
	mio_log_li°
;

403 
Êi°_hód
 
	måim_li°
;

404 
	måim_íåõs
;

406 
Êi°_hód
 
	m√xt_ønd_li°
;

411 
	mfûe_£rvi˚_ƒ
;

412 
	mfûe_£rvi˚_À·
;

413 
fio_fûe
 *
	mfûe_£rvi˚_fûe
;

415 
	msync_fûe_ønge_ƒ
;

420 
‰™d_°©e
 
	mfûe_size_°©e
;

425 
	mtŸÆ_îr_cou¡
;

426 
	mfú°_îr‹
;

428 
fio_Êow
 *
	mÊow
;

433 
¥of_io_›s
 
	m¥of_io_›s
;

434 *
	m¥of_d©a
;

436 *
	mpö√d_mem
;

438 
°ódy°©e_d©a
 
	mss
;

440 
	mvîr‹
[
FIO_VERROR_SIZE
];

442 #ifde‡
CONFIG_CUDA


446 
	mgpu_dev_˙t
;

447 
	mgpu_dev_id
;

448 
CUdevi˚
 
	mcu_dev
;

449 
CUc⁄ãxt
 
	mcu_˘x
;

450 
CUdevi˚±r
 
	mdev_mem_±r
;

459 
	mFIO_ETA_AUTO
,

460 
	mFIO_ETA_ALWAYS
,

461 
	mFIO_ETA_NEVER
,

464 
	#__td_vîr‹
(
td
, 
îr
, 
msg
, 
func
) \

466 
____e
 = (
îr
); \

467 i‡((
td
)->
îr‹
) \

469 (
td
)->
îr‹
 = 
____e
; \

470 i‡(!(
td
)->
fú°_îr‹
) \

471 
	`¢¥ötf
(
td
->
vîr‹
, —d->vîr‹), "fûe:%s:%d, func=%s,Éº‹=%s", 
__FILE__
, 
__LINE__
, (
func
), (
msg
)); \

472 } 0)

	)

475 
	#td_˛ór_îr‹
(
td
) do { \

476 (
td
)->
îr‹
 = 0; \

477 i‡((
td
)->
∑ª¡
) \

478 (
td
)->
∑ª¡
->
îr‹
 = 0; \

479 } 0)

	)

481 
	#td_vîr‹
(
td
, 
îr
, 
func
) do { \

482 
	`__td_vîr‹
((
td
), (
îr
), 
	`°ªº‹
(”º)), (
func
)); \

483 i‡((
td
)->
∑ª¡
) \

484 
	`__td_vîr‹
((
td
)->
∑ª¡
, (
îr
), 
	`°ªº‹
(”º)), (
func
)); \

485 } 0)

	)

487 
	#td_vmsg
(
td
, 
îr
, 
msg
, 
func
) do { \

488 
	`__td_vîr‹
((
td
), (
îr
), (
msg
), (
func
)); \

489 i‡((
td
)->
∑ª¡
) \

490 
	`__td_vîr‹
((
td
)->
∑ª¡
, (
îr
), (
msg
), (
func
)); \

491 } 0)

	)

493 
	#__fio_°rögify_1
(
x
Ë#x

	)

494 
	#__fio_°rögify
(
x
Ë
	`__fio_°rögify_1
(x)

	)

496 
exôÆl_⁄_ãrmö©e
;

497 
thªad_numbî
;

498 
°©_numbî
;

499 
shm_id
;

500 
groupid
;

501 
ouçut_f‹m©
;

502 
≠≥nd_ãr£_ouçut
;

503 
ãmp_°Æl_ts
;

504 
uöçå_t
 
∑ge_mask
, 
∑ge_size
;

505 
ªad_⁄ly
;

506 
ëa_¥öt
;

507 
ëa_√w_löe
;

508 
ëa_öãrvÆ_m£c
;

509 
d⁄e_£cs
;

510 
fio_gtod_ofÊﬂd
;

511 
fio_gtod_˝u
;

512 
fio_cs
 
fio_˛ock_sour˚
;

513 
fio_˛ock_sour˚_£t
;

514 
w¨nögs_Áèl
;

515 
ãr£_vîsi⁄
;

516 
is_backíd
;

517 
ƒ_˛õ¡s
;

518 
log_sy¶og
;

519 
°©us_öãrvÆ
;

520 c⁄° 
fio_vîsi⁄_°rög
[];

521 *
åiggî_fûe
;

522 *
åiggî_cmd
;

523 *
åiggî_ªmŸe_cmd
;

524 
åiggî_timeout
;

525 *
aux_∑th
;

527 
thªad_d©a
 *
thªads
;

529 
boﬁ
 
ëa_time_wôhö_¶ack
(
time
);

531 
ölöe
 
	$fio_ro_check
(c⁄° 
thªad_d©a
 *
td
, 
io_u
 *io_u)

533 
	`as£π
(!(
io_u
->
ddú
 =
DDIR_WRITE
 && !
	`td_wrôe
(
td
)));

534 
	}
}

536 
	#REAL_MAX_JOBS
 4096

	)

538 
ölöe
 
	$should_fsync
(
thªad_d©a
 *
td
)

540 i‡(
td
->
œ°_was_sync
)

542 i‡(
	`td_wrôe
(
td
Ë||Åd->
o
.
ovîride_sync
)

546 
	}
}

551 
__mu°_check
 
fio_öô_›ti⁄s
();

552 
__mu°_check
 
∑r£_›ti⁄s
(, **);

553 
∑r£_jobs_öi
(*, , , );

554 
∑r£_cmd_löe
(, **, );

555 
fio_backíd
(
sk_out
 *);

556 
ª£t_fio_°©e
();

557 
˛ór_io_°©e
(
thªad_d©a
 *, );

558 
fio_›ti⁄s_∑r£
(
thªad_d©a
 *, **, );

559 
fio_keyw‹ds_öô
();

560 
fio_keyw‹ds_exô
();

561 
fio_cmd_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

562 
fio_cmd_i€ngöe_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

563 
fio_fûl_deÁu…_›ti⁄s
(
thªad_d©a
 *);

564 
fio_show_›ti⁄_hñp
(const *);

565 
fio_›ti⁄s_£t_i€ngöe_›ts
(
›ti⁄
 *
l⁄g_›ti⁄s
, 
thªad_d©a
 *
td
);

566 
fio_›ti⁄s_dup_™d_öô
(
›ti⁄
 *);

567 
fio_›ti⁄s_mem_du≥
(
thªad_d©a
 *);

568 
td_fûl_ønd_£eds
(
thªad_d©a
 *);

569 
td_fûl_vîify_°©e_£ed
(
thªad_d©a
 *);

570 
add_job_›ts
(const **, );

571 
i€ngöe_lﬂd
(
thªad_d©a
 *);

572 
boﬁ
 
∑r£_dryrun
();

573 
fio_ru¬ög_‹_≥ndög_io_thªads
();

574 
fio_£t_fd_n⁄blockög
(, const *);

575 
sig_show_°©us
(
sig
);

576 
thªad_d©a
 *
gë_globÆ_›ti⁄s
();

578 
uöçå_t
 
∑ge_mask
;

579 
uöçå_t
 
∑ge_size
;

580 
öôülize_fio
(*
ívp
[]);

581 
deöôülize_fio
();

583 
	#FIO_GETOPT_JOB
 0x89000000

	)

584 
	#FIO_GETOPT_IOENGINE
 0x98000000

	)

585 
	#FIO_NR_OPTIONS
 (
FIO_MAX_OPTS
 + 128)

	)

590 
¥öt_thªad_°©us
();

591 
¥öt_°©us_öô
();

592 *
fio_uöt_to_kmg
(
vÆ
);

601 
	mTD_NOT_CREATED
 = 0,

602 
	mTD_CREATED
,

603 
	mTD_INITIALIZED
,

604 
	mTD_RAMP
,

605 
	mTD_SETTING_UP
,

606 
	mTD_RUNNING
,

607 
	mTD_PRE_READING
,

608 
	mTD_VERIFYING
,

609 
	mTD_FSYNCING
,

610 
	mTD_FINISHING
,

611 
	mTD_EXITED
,

612 
	mTD_REAPED
,

613 
	mTD_LAST
,

614 
	mTD_NR
,

617 
	#TD_ENG_FLAG_SHIFT
 17

	)

618 
	#TD_ENG_FLAG_MASK
 ((1U << 17Ë- 1)

	)

620 
ölöe
 
	$td_£t_i€ngöe_Êags
(
thªad_d©a
 *
td
)

622 
td
->
Êags
 = (~(
TD_ENG_FLAG_MASK
 << 
TD_ENG_FLAG_SHIFT
) &Åd->flags) |

623 (
td
->
io_›s
->
Êags
 << 
TD_ENG_FLAG_SHIFT
);

624 
	}
}

626 
ölöe
 
boﬁ
 
	$td_i€ngöe_Êagged
(
thªad_d©a
 *
td
,

627 
fio_i€ngöe_Êags
 
Êags
)

629  ((
td
->
Êags
 >> 
TD_ENG_FLAG_SHIFT
) & flags) != 0;

630 
	}
}

632 
td_£t_run°©e
(
thªad_d©a
 *, );

633 
td_bump_run°©e
(
thªad_d©a
 *, );

634 
td_ª°‹e_run°©e
(
thªad_d©a
 *, );

635 c⁄° *
run°©e_to_«me
(
run°©e
);

641 
	#FIO_REAP_TIMEOUT
 300

	)

643 
	#TERMINATE_ALL
 (-1U)

	)

644 
fio_ãrmö©e_thªads
();

645 
fio_m¨k_td_ãrmö©e
(
thªad_d©a
 *);

650 
__mu°_check
 
fio_pö_mem‹y
(
thªad_d©a
 *);

651 
fio_u≈ö_mem‹y
(
thªad_d©a
 *);

652 
__mu°_check
 
Æloˇã_io_mem
(
thªad_d©a
 *);

653 
‰ì_io_mem
(
thªad_d©a
 *);

654 
‰ì_thªads_shm
();

656 #ifde‡
FIO_INTERNAL


657 
	#PTR_ALIGN
(
±r
, 
mask
) \

658 (*Ë(((
uöçå_t
Ë(
±r
Ë+ (
mask
)Ë& ~(mask))

	)

664 
ª£t_Æl_°©s
(
thªad_d©a
 *);

666 
io_queue_evít
(
thªad_d©a
 *
td
, 
io_u
 *io_u, *
ªt
,

667 
fio_ddú
 
ddú
, 
uöt64_t
 *
byãs_issued
, 
‰om_vîify
,

668 
time•ec
 *
comp_time
);

673 
œt_èrgë_check
(
thªad_d©a
 *);

674 
œt_èrgë_öô
(
thªad_d©a
 *);

675 
œt_èrgë_ª£t
(
thªad_d©a
 *);

680 
	#f‹_óch_td
(
td
, 
i
) \

681 (
i
Ë0, (
td
Ë&
thªads
[0]; (iË< (Ë
thªad_numbî
; (i)++, (td)++)

	)

682 
	#f‹_óch_fûe
(
td
, 
f
, 
i
) \

683 i‡((
td
)->
fûes_ödex
) \

684 (
i
Ë0, (
f
Ë(
td
)->
fûes
[0]; \

685 (
i
Ë< (
td
)->
o
.
ƒ_fûes
 && ((
f
Ë—d)->
fûes
[i]Ë!
NULL
; \

686 (
i
)++)

	)

688 
	#fio_as£π
(
td
, 
c⁄d
) do { \

689 i‡(!(
c⁄d
)) { \

690 *
__foo
 = 
NULL
; \

691 
	`Ârötf
(
°dîr
, "fûe:%s:%d,ás£π %†Áûed\n", 
__FILE__
, 
__LINE__
, #cond); \

692 
	`td_£t_run°©e
((
td
), 
TD_EXITED
); \

693 (
td
)->
îr‹
 = 
EFAULT
; \

694 *
__foo
 = 0; \

696 } 0)

	)

698 
ölöe
 
boﬁ
 
	$fio_fûl_issue_time
(
thªad_d©a
 *
td
)

700 i‡(
td
->
o
.
ªad_iﬁog_fûe
 ||

701 !
td
->
o
.
dißbÀ_˛©
 || !td->o.
dißbÀ_¶©
 || !td->o.
dißbÀ_bw
)

702  
åue
;

704  
Ál£
;

705 
	}
}

707 
ölöe
 
boﬁ
 
	$›ti⁄_check_øã
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

709 
thªad_›ti⁄s
 *
o
 = &
td
->o;

714 i‡(
o
->
øã
[
ddú
] || o->
øãmö
[ddú] || o->
øã_i›s
[ddir] ||

715 
o
->
øã_i›s_mö
[
ddú
])

716  
åue
;

718  
Ál£
;

719 
	}
}

721 
ölöe
 
boﬁ
 
	$__should_check_øã
(
thªad_d©a
 *
td
,

722 
fio_ddú
 
ddú
)

724  (
td
->
Êags
 & 
TD_F_CHECK_RATE
) != 0;

725 
	}
}

727 
ölöe
 
boﬁ
 
	$should_check_øã
(
thªad_d©a
 *
td
)

729 i‡(
	`__should_check_øã
(
td
, 
DDIR_READ
Ë&&Åd->
byãs_d⁄e
[DDIR_READ])

730  
åue
;

731 i‡(
	`__should_check_øã
(
td
, 
DDIR_WRITE
Ë&&Åd->
byãs_d⁄e
[DDIR_WRITE])

732  
åue
;

733 i‡(
	`__should_check_øã
(
td
, 
DDIR_TRIM
Ë&&Åd->
byãs_d⁄e
[DDIR_TRIM])

734  
åue
;

736  
Ál£
;

737 
	}
}

739 
ölöe
 
	$td_max_bs
(
thªad_d©a
 *
td
)

741 
max_bs
;

743 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

744  
	`max
(
td
->
o
.
max_bs
[
DDIR_TRIM
], max_bs);

745 
	}
}

747 
ölöe
 
	$td_mö_bs
(
thªad_d©a
 *
td
)

749 
mö_bs
;

751 
mö_bs
 = 
	`mö
(
td
->
o
.mö_bs[
DDIR_READ
],Åd->o.mö_bs[
DDIR_WRITE
]);

752  
	`mö
(
td
->
o
.
mö_bs
[
DDIR_TRIM
], min_bs);

753 
	}
}

755 
ölöe
 
boﬁ
 
	$td_async_¥o˚ssög
(
thªad_d©a
 *
td
)

757  (
td
->
Êags
 & 
TD_F_NEED_LOCK
) != 0;

758 
	}
}

764 
ölöe
 
	$td_io_u_lock
(
thªad_d©a
 *
td
)

766 i‡(
	`td_async_¥o˚ssög
(
td
))

767 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

768 
	}
}

770 
ölöe
 
	$td_io_u_u∆ock
(
thªad_d©a
 *
td
)

772 i‡(
	`td_async_¥o˚ssög
(
td
))

773 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

774 
	}
}

776 
ölöe
 
	$td_io_u_‰ì_nŸify
(
thªad_d©a
 *
td
)

778 i‡(
	`td_async_¥o˚ssög
(
td
))

779 
	`±hªad_c⁄d_sig«l
(&
td
->
‰ì_c⁄d
);

780 
	}
}

782 
ölöe
 
	$td_Êags_˛ór
(
thªad_d©a
 *
td
, *
Êags
,

783 
vÆue
)

785 i‡(!
	`td_async_¥o˚ssög
(
td
))

786 *
Êags
 &~
vÆue
;

788 
	`__sync_„tch_™d_™d
(
Êags
, ~
vÆue
);

789 
	}
}

791 
ölöe
 
	$td_Êags_£t
(
thªad_d©a
 *
td
, *
Êags
,

792 
vÆue
)

794 i‡(!
	`td_async_¥o˚ssög
(
td
))

795 *
Êags
 |
vÆue
;

797 
	`__sync_„tch_™d_‹
(
Êags
, 
vÆue
);

798 
	}
}

800 c⁄° *
fio_gë_¨ch_°rög
();

801 c⁄° *
fio_gë_os_°rög
();

804 
	m__FIO_OUTPUT_TERSE
 = 0,

805 
	m__FIO_OUTPUT_JSON
 = 1,

806 
	m__FIO_OUTPUT_NORMAL
 = 2,

807 
	m__FIO_OUTPUT_JSON_PLUS
 = 3,

808 
	mFIO_OUTPUT_NR
 = 4,

810 
	mFIO_OUTPUT_TERSE
 = 1U << 
__FIO_OUTPUT_TERSE
,

811 
	mFIO_OUTPUT_JSON
 = 1U << 
__FIO_OUTPUT_JSON
,

812 
	mFIO_OUTPUT_NORMAL
 = 1U << 
__FIO_OUTPUT_NORMAL
,

813 
	mFIO_OUTPUT_JSON_PLUS
 = 1U << 
__FIO_OUTPUT_JSON_PLUS
,

817 
	mFIO_RAND_DIST_RANDOM
 = 0,

818 
	mFIO_RAND_DIST_ZIPF
,

819 
	mFIO_RAND_DIST_PARETO
,

820 
	mFIO_RAND_DIST_GAUSS
,

821 
	mFIO_RAND_DIST_ZONED
,

822 
	mFIO_RAND_DIST_ZONED_ABS
,

825 
	#FIO_DEF_ZIPF
 1.1

	)

826 
	#FIO_DEF_PARETO
 0.2

	)

829 
	mFIO_RAND_GEN_TAUSWORTHE
 = 0,

830 
	mFIO_RAND_GEN_LFSR
,

831 
	mFIO_RAND_GEN_TAUSWORTHE64
,

835 
	mFIO_CPUS_SHARED
 = 0,

836 
	mFIO_CPUS_SPLIT
,

839 
exec_åiggî
(const *);

840 
check_åiggî_fûe
();

	@fio_time.h

1 #i‚de‡
FIO_TIME_H


2 
	#FIO_TIME_H


	)

4 
	~<time.h
>

5 
	~<sys/time.h
>

6 
	~"lib/ty≥s.h
"

8 
	gthªad_d©a
;

9 
uöt64_t
 
¡ime_sö˚
(c⁄° 
time•ec
 *, const timespec *);

10 
uöt64_t
 
¡ime_sö˚_now
(c⁄° 
time•ec
 *);

11 
uöt64_t
 
utime_sö˚
(c⁄° 
time•ec
 *, const timespec *);

12 
uöt64_t
 
utime_sö˚_now
(c⁄° 
time•ec
 *);

13 
uöt64_t
 
mtime_sö˚
(c⁄° 
time•ec
 *, const timespec *);

14 
uöt64_t
 
mtime_sö˚_now
(c⁄° 
time•ec
 *);

15 
uöt64_t
 
mtime_sö˚_tv
(c⁄° 
timevÆ
 *, const timeval *);

16 
uöt64_t
 
time_sö˚_now
(c⁄° 
time•ec
 *);

17 
uöt64_t
 
time_sö˚_gíesis
();

18 
uöt64_t
 
mtime_sö˚_gíesis
();

19 
uöt64_t
 
utime_sö˚_gíesis
();

20 
uöt64_t
 
u£c_•ö
();

21 
uöt64_t
 
u£c_¶ìp
(
thªad_d©a
 *, );

22 
fûl_°¨t_time
(
time•ec
 *);

23 
£t_gíesis_time
();

24 
boﬁ
 
ømp_time_ovî
(
thªad_d©a
 *);

25 
boﬁ
 
ö_ømp_time
(
thªad_d©a
 *);

26 
fio_time_öô
();

27 
time•ec_add_m£c
(
time•ec
 *, );

28 
£t_ïoch_time
(
thªad_d©a
 *, );

	@flist.h

1 #i‚de‡
_LINUX_FLIST_H


2 
	#_LINUX_FLIST_H


	)

4 
	~<°dlib.h
>

5 
	~<°ddef.h
>

7 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

8 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

9 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

21 
	sÊi°_hód
 {

22 
Êi°_hód
 *
	m√xt
, *
	m¥ev
;

25 
	#FLIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

27 
	#FLIST_HEAD
(
«me
) \

28 
Êi°_hód
 
«me
 = 
	`FLIST_HEAD_INIT
“ame)

	)

30 
	#INIT_FLIST_HEAD
(
±r
) do { \

31 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

32 } 0)

	)

40 
ölöe
 
	$__Êi°_add
(
Êi°_hód
 *
√w_íåy
,

41 
Êi°_hód
 *
¥ev
,

42 
Êi°_hód
 *
√xt
)

44 
√xt
->
¥ev
 = 
√w_íåy
;

45 
√w_íåy
->
√xt
 =Çext;

46 
√w_íåy
->
¥ev
 =Örev;

47 
¥ev
->
√xt
 = 
√w_íåy
;

48 
	}
}

58 
ölöe
 
	$Êi°_add
(
Êi°_hód
 *
√w_íåy
,

59 
Êi°_hód
 *
hód
)

61 
	`__Êi°_add
(
√w_íåy
, 
hód
, hód->
√xt
);

62 
	}
}

64 
ölöe
 
	$Êi°_add_èû
(
Êi°_hód
 *
√w_íåy
,

65 
Êi°_hód
 *
hód
)

67 
	`__Êi°_add
(
√w_íåy
, 
hód
->
¥ev
, head);

68 
	}
}

77 
ölöe
 
	$__Êi°_dñ
(
Êi°_hód
 *
¥ev
,

78 
Êi°_hód
 * 
√xt
)

80 
√xt
->
¥ev
 =Örev;

81 
¥ev
->
√xt
 =Çext;

82 
	}
}

90 
ölöe
 
	$Êi°_dñ
(
Êi°_hód
 *
íåy
)

92 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

93 
íåy
->
√xt
 = 
NULL
;

94 
íåy
->
¥ev
 = 
NULL
;

95 
	}
}

101 
ölöe
 
	$Êi°_dñ_öô
(
Êi°_hód
 *
íåy
)

103 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

104 
	`INIT_FLIST_HEAD
(
íåy
);

105 
	}
}

111 
ölöe
 
	$Êi°_em±y
(c⁄° 
Êi°_hód
 *
hód
)

113  
hód
->
√xt
 == head;

114 
	}
}

116 
ölöe
 
	$__Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

117 
Êi°_hód
 *
¥ev
,

118 
Êi°_hód
 *
√xt
)

120 
Êi°_hód
 *
fú°
 = 
li°
->
√xt
;

121 
Êi°_hód
 *
œ°
 = 
li°
->
¥ev
;

123 
fú°
->
¥ev
 =Örev;

124 
¥ev
->
√xt
 = 
fú°
;

126 
œ°
->
√xt
 =Çext;

127 
√xt
->
¥ev
 = 
œ°
;

128 
	}
}

130 
ölöe
 
	$Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

131 
Êi°_hód
 *
hód
)

133 i‡(!
	`Êi°_em±y
(
li°
))

134 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

135 
	}
}

137 
ölöe
 
	$Êi°_•li˚_èû
(
Êi°_hód
 *
li°
,

138 
Êi°_hód
 *
hód
)

140 i‡(!
	`Êi°_em±y
(
li°
))

141 
	`__Êi°_•li˚
(
li°
, 
hód
->
¥ev
, head);

142 
	}
}

144 
ölöe
 
	$Êi°_•li˚_èû_öô
(
Êi°_hód
 *
li°
,

145 
Êi°_hód
 *
hód
)

147 i‡(!
	`Êi°_em±y
(
li°
)) {

148 
	`__Êi°_•li˚
(
li°
, 
hód
->
¥ev
, head);

149 
	`INIT_FLIST_HEAD
(
li°
);

151 
	}
}

153 
ölöe
 
	$Êi°_•li˚_öô
(
Êi°_hód
 *
li°
,

154 
Êi°_hód
 *
hód
)

156 i‡(!
	`Êi°_em±y
(
li°
)) {

157 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

158 
	`INIT_FLIST_HEAD
(
li°
);

160 
	}
}

168 
	#Êi°_íåy
(
±r
, 
ty≥
, 
membî
) \

169 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

171 
	#Êi°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

172 
	`Êi°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

174 
	#Êi°_œ°_íåy
(
±r
, 
ty≥
, 
membî
) \

175 
	`Êi°_íåy
((
±r
)->
¥ev
, 
ty≥
, 
membî
)

	)

182 
	#Êi°_f‹_óch
(
pos
, 
hód
) \

183 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

191 
	#Êi°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

192 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

193 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

195 
Êi°_s‹t
(*
¥iv
, 
Êi°_hód
 *
hód
,

196 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
, Êi°_hód *
b
));

	@flow.h

1 #i‚de‡
FIO_FLOW_H


2 
	#FIO_FLOW_H


	)

4 
Êow_thªshﬁd_ex˚eded
(
thªad_d©a
 *
td
);

5 
Êow_öô_job
(
thªad_d©a
 *
td
);

6 
Êow_exô_job
(
thªad_d©a
 *
td
);

8 
Êow_exô
();

9 
Êow_öô
();

	@gclient.h

1 #i‚de‡
GFIO_CLIENT_H


2 
	#GFIO_CLIENT_H


	)

4 
˛õ¡_›s
 
gfio_˛õ¡_›s
;

6 
gfio_di•œy_íd_ªsu…s
(
gfio_˛õ¡
 *);

8 
	#GFIO_READ_R
 0.13

	)

9 
	#GFIO_READ_G
 0.54

	)

10 
	#GFIO_READ_B
 0.13

	)

11 
	#GFIO_WRITE_R
 1.00

	)

12 
	#GFIO_WRITE_G
 0.00

	)

13 
	#GFIO_WRITE_B
 0.00

	)

14 
	#GFIO_TRIM_R
 0.24

	)

15 
	#GFIO_TRIM_G
 0.18

	)

16 
	#GFIO_TRIM_B
 0.52

	)

	@gcompat.h

1 #i‚de‡
GFIO_GTK_COMPAT


2 
	#GFIO_GTK_COMPAT


	)

4 
	~<gtk/gtk.h
>

6 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 24

7 
	gGtkComboBoxText
;

8 
GtkComboBox
 
	tGtkComboBoxText
;

9 
GtkWidgë
 *
gtk_combo_box_ãxt_√w
();

10 
GtkWidgë
 *
gtk_combo_box_ãxt_√w_wôh_íåy
();

11 
gtk_combo_box_ãxt_≠≥nd_ãxt
(
GtkComboBoxText
 *
combo_box
, c⁄° 
gch¨
 *
ãxt
);

12 
gtk_combo_box_ãxt_ö£π_ãxt
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
, c⁄° 
gch¨
 *
ãxt
);

13 
gtk_combo_box_ãxt_¥ïíd_ãxt
(
GtkComboBoxText
 *
combo_box
, c⁄° 
gch¨
 *
ãxt
);

14 
gtk_combo_box_ãxt_ªmove
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
);

15 
gch¨
 *
gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
GtkComboBoxText
 *
combo_box
);

17 
	#GTK_COMBO_BOX_TEXT
 
GTK_COMBO_BOX


	)

20 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 14

21 
ölöe
 
GtkWidgë
 *
	$gtk_dülog_gë_c⁄ã¡_¨ó
(
GtkDülog
 *
dülog
)

23  
dülog
->
vbox
;

24 
	}
}

25 
ölöe
 
GdkWödow
 *
	$gtk_widgë_gë_wödow
(
GtkWidgë
 *
w
)

27  
w
->
wödow
;

28 
	}
}

31 #i‡
GTK_MAJOR_VERSION
 < 3

32 
guöt
 
gtk_widgë_gë_Æloˇãd_width
(
GtkWidgë
 *
w
);

33 
guöt
 
gtk_widgë_gë_Æloˇãd_height
(
GtkWidgë
 *
w
);

36 #i‡
GTK_MAJOR_VERSION
 == 3

37 
	#GFIO_DRAW_EVENT
 "døw"

	)

38 #ñi‡
GTK_MAJOR_VERSION
 == 2

39 
	#GFIO_DRAW_EVENT
 "expo£_evít"

	)

42 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 18

43 
gtk_widgë_£t_ˇn_focus
(
GtkWidgë
 *
widgë
, 
gboﬁón
 
ˇn_focus
);

	@gerror.h

1 #i‚de‡
GFIO_ERROR_H


2 
	#GFIO_ERROR_H


	)

4 
gfio_ªp‹t_îr‹
(
gui_íåy
 *
ge
, c⁄° *
f‹m©
, ...);

5 
gfio_ªp‹t_öfo
(
gui
 *
ui
, c⁄° *
tôÀ
, c⁄° *
mesßge
);

	@gettime.h

1 #i‚de‡
FIO_GETTIME_H


2 
	#FIO_GETTIME_H


	)

4 
	~"¨ch/¨ch.h
"

9 
	efio_cs
 {

10 
	mCS_GTOD
 = 1,

11 
	mCS_CGETTIME
,

12 
	mCS_CPUCLOCK
,

13 
	mCS_INVAL
,

16 
fio_gëtime
(
time•ec
 *, *);

17 
fio_gtod_öô
();

18 
fio_˛ock_öô
();

19 
fio_°¨t_gtod_thªad
();

20 
fio_m⁄Ÿ⁄ic_˛ockã°
(
debug
);

21 
fio_loˇl_˛ock_öô
();

23 
time•ec
 *
fio_ts
;

25 
ölöe
 
	$fio_gëtime_ofÊﬂd
(
time•ec
 *
ts
)

27 
time_t
 
œ°_£c
;

29 i‡(!
fio_ts
)

33 
	`ªad_b¨rõr
();

34 
œ°_£c
 = 
ts
->
tv_£c
 = 
fio_ts
->tv_sec;

35 
ts
->
tv_n£c
 = 
fio_ts
->tv_nsec;

36 } 
fio_ts
->
tv_£c
 !
œ°_£c
);

39 
	}
}

41 
fio_gtod_£t_˝u
(
˝u
);

	@gfio.h

1 #i‚de‡
GFIO_H


2 
	#GFIO_H


	)

4 
	~<gtk/gtk.h
>

6 
	~"gcom∑t.h
"

7 
	~"°©.h
"

8 
	~"thªad_›ti⁄s.h
"

9 
	~"ghñ≥rs.h
"

10 
	~"gøph.h
"

12 
	s¥obe_widgë
 {

13 
GtkWidgë
 *
	mho°«me
;

14 
GtkWidgë
 *
	mos
;

15 
GtkWidgë
 *
	m¨ch
;

16 
GtkWidgë
 *
	mfio_vî
;

19 
	sëa_widgë
 {

20 
GtkWidgë
 *
	m«mes
;

21 
mu…ôext_widgë
 
	miŸy≥
;

22 
mu…ôext_widgë
 
	mbs
;

23 
mu…ôext_widgë
 
	mi€ngöe
;

24 
mu…ôext_widgë
 
	miodïth
;

25 
GtkWidgë
 *
	mjobs
;

26 
GtkWidgë
 *
	mfûes
;

27 
GtkWidgë
 *
	mªad_bw
;

28 
GtkWidgë
 *
	mªad_i›s
;

29 
GtkWidgë
 *
	m¸_bw
;

30 
GtkWidgë
 *
	m¸_i›s
;

31 
GtkWidgë
 *
	mwrôe_bw
;

32 
GtkWidgë
 *
	mwrôe_i›s
;

33 
GtkWidgë
 *
	mcw_bw
;

34 
GtkWidgë
 *
	mcw_i›s
;

35 
GtkWidgë
 *
	måim_bw
;

36 
GtkWidgë
 *
	måim_i›s
;

39 
	sgfio_gøphs
 {

40 
	#DRAWING_AREA_XDIM
 1000

	)

41 
	#DRAWING_AREA_YDIM
 400

	)

42 
GtkWidgë
 *
	mdøwög_¨ó
;

43 
gøph
 *
	mi›s_gøph
;

44 
gøph_œbñ_t
 
	mªad_i›s
;

45 
gøph_œbñ_t
 
	mwrôe_i›s
;

46 
gøph_œbñ_t
 
	måim_i›s
;

47 
gøph
 *
	mb™dwidth_gøph
;

48 
gøph_œbñ_t
 
	mªad_bw
;

49 
gøph_œbñ_t
 
	mwrôe_bw
;

50 
gøph_œbñ_t
 
	måim_bw
;

56 
	sgui
 {

57 
GtkUIM™agî
 *
	muim™agî
;

58 
GtkRe˚¡M™agî
 *
	mª˚¡m™agî
;

59 
GtkA˘i⁄Group
 *
	ma˘i⁄group
;

60 
guöt
 
	mª˚¡_ui_id
;

61 
GtkWidgë
 *
	mmíu
;

62 
GtkWidgë
 *
	mwödow
;

63 
GtkWidgë
 *
	mvbox
;

64 
GtkWidgë
 *
	mthªad_°©us_pb
;

65 
GtkWidgë
 *
	mbuâ⁄box
;

66 
GtkWidgë
 *
	mnŸebook
;

67 
GtkWidgë
 *
	mîr‹_öfo_b¨
;

68 
GtkWidgë
 *
	mîr‹_œbñ
;

69 
GtkLi°St‹e
 *
	mlog_modñ
;

70 
GtkWidgë
 *
	mlog_åì
;

71 
GtkWidgë
 *
	mlog_võw
;

72 
gfio_gøphs
 
	mgøphs
;

73 
¥obe_widgë
 
	m¥obe
;

74 
ëa_widgë
 
	mëa
;

75 
±hªad_t
 
	m£rvî_t
;

77 
±hªad_t
 
	mt
;

78 
	mh™dÀr_ru¬ög
;

80 
GHashTabÀ
 *
	mge_hash
;

81 } 
	gmaö_ui
;

84 
	mGE_STATE_NEW
 = 1,

85 
	mGE_STATE_CONNECTED
,

86 
	mGE_STATE_JOB_SENT
,

87 
	mGE_STATE_JOB_STARTED
,

88 
	mGE_STATE_JOB_RUNNING
,

89 
	mGE_STATE_JOB_DONE
,

93 
	mGFIO_BUTTON_CONNECT
 = 0,

94 
	mGFIO_BUTTON_SEND
,

95 
	mGFIO_BUTTON_START
,

96 
	mGFIO_BUTTON_NR
,

102 
	sgui_íåy
 {

103 
gui
 *
	mui
;

105 
GtkWidgë
 *
	mvbox
;

106 
GtkWidgë
 *
	mjob_nŸebook
;

107 
GtkWidgë
 *
	mthªad_°©us_pb
;

108 
GtkWidgë
 *
	mbuâ⁄box
;

109 
GtkWidgë
 *
	mbuâ⁄
[
GFIO_BUTTON_NR
];

110 
GtkWidgë
 *
	mnŸebook
;

111 
GtkWidgë
 *
	mîr‹_öfo_b¨
;

112 
GtkWidgë
 *
	mîr‹_œbñ
;

113 
GtkWidgë
 *
	mªsu…s_wödow
;

114 
GtkWidgë
 *
	mªsu…s_nŸebook
;

115 
GtkUIM™agî
 *
	mªsu…s_uim™agî
;

116 
GtkWidgë
 *
	mªsu…s_míu
;

117 
GtkWidgë
 *
	mdisk_utû_vbox
;

118 
GtkLi°St‹e
 *
	mlog_modñ
;

119 
GtkWidgë
 *
	mlog_åì
;

120 
GtkWidgë
 *
	mlog_võw
;

121 
gfio_gøphs
 
	mgøphs
;

122 
¥obe_widgë
 
	m¥obe
;

123 
ëa_widgë
 
	mëa
;

124 
GtkWidgë
 *
	m∑ge_œbñ
;

125 
göt
 
	m∑ge_num
;

126 
	m°©e
;

128 
gøph
 *
	m˛©_gøph
;

129 
gøph
 *
	mœt_buckë_gøph
;

131 
gfio_˛õ¡
 *
	m˛õ¡
;

132 *
	mjob_fûe
;

133 *
	mho°
;

134 
	mp‹t
;

135 
	mty≥
;

136 
	m£rvî_°¨t
;

139 
	síd_ªsu…s
 {

140 
group_run_°©s
 
	mgs
;

141 
thªad_°©
 
	mts
;

144 
	sgfio_˛õ¡_›ti⁄s
 {

145 
Êi°_hód
 
	mli°
;

146 
thªad_›ti⁄s
 
	mo
;

149 
	sgfio_˛õ¡
 {

150 
gui_íåy
 *
	mge
;

151 
fio_˛õ¡
 *
	m˛õ¡
;

152 
GtkWidgë
 *
	mîr_íåy
;

153 
uöt32_t
 
	m˛õ¡_˝us
;

154 
uöt64_t
 
	m˛õ¡_Êags
;

156 
Êi°_hód
 
	mo_li°
;

157 
	mo_li°_ƒ
;

159 
íd_ªsu…s
 *
	mªsu…s
;

160 
	mƒ_ªsu…s
;

162 
uöt32_t
 
	mupd©e_job_°©us
;

163 vﬁ©ûê
uöt32_t
 
	mupd©e_job_d⁄e
;

165 
cmd_du_pdu
 *
	mdu
;

166 
	mƒ_du
;

169 
	#GFIO_MIME
 "ãxt/fio"

	)

171 
gfio_võw_log
(
gui
 *
ui
);

172 
gfio_£t_°©e
(
gui_íåy
 *
ge
, 
°©e
);

173 
˛ór_ge_ui_öfo
(
gui_íåy
 *
ge
);

175 c⁄° *
gfio_gøph_f⁄t
;

176 
GdkCﬁ‹
 
gfio_cﬁ‹_whôe
;

177 
GdkCﬁ‹
 
gfio_cﬁ‹_lightyñlow
;

	@ghelpers.h

1 #i‚de‡
GFIO_HELPERS_H


2 
	#GFIO_HELPERS_H


	)

4 
GtkWidgë
 *
√w_combo_íåy_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

5 
GtkWidgë
 *
√w_öfo_íåy_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

6 
GtkWidgë
 *
√w_öfo_œbñ_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

7 
GtkWidgë
 *
√w_öfo_íåy_ö_‰ame_rgb
(GtkWidgë *
box
, c⁄° *
œbñ
,

8 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
);

9 
GtkWidgë
 *
¸óã_•öbuâ⁄
(GtkWidgë *
hbox
, 
mö
, 
max
, 
defvÆ
);

10 
œbñ_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
);

11 
íåy_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
);

13 
GtkWidgë
 *
gë_s¸ﬁÀd_wödow
(
göt
 
b‹dî_width
);

15 
	smu…ôext_widgë
 {

16 
GtkWidgë
 *
	míåy
;

17 **
	mãxt
;

18 
	mcur_ãxt
;

19 
	mmax_ãxt
;

22 
mu…ôext_add_íåy
(
mu…ôext_widgë
 *
mt
, c⁄° *
ãxt
);

23 
mu…ôext_£t_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
);

24 
mu…ôext_upd©e_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
,

25 c⁄° *
ãxt
);

26 
mu…ôext_‰ì
(
mu…ôext_widgë
 *
mt
);

28 
	#ALIGN_LEFT
 1

	)

29 
	#ALIGN_RIGHT
 2

	)

30 
	#INVISIBLE
 4

	)

31 
	#UNSORTABLE
 8

	)

33 
GtkTªeVõwCﬁumn
 *
åì_võw_cﬁumn
(
GtkWidgë
 *
åì_võw
, 
ödex
, c⁄° *
tôÀ
, 
Êags
);

	@goptions.h

1 #i‚de‡
GFIO_OPTIONS_H


2 
	#GFIO_OPTIONS_H


	)

4 
g›t_gë_›ti⁄s_wödow
(
GtkWidgë
 *
wödow
, 
gfio_˛õ¡
 *
gc
);

5 
g›t_öô
();

6 
g›t_exô
();

	@graph.h

1 #i‚de‡
GRAPH_H


2 
	#GRAPH_H


	)

4 
	ggøph
;

5 
	ggøph_œbñ
;

7 
gøph_œbñ
 * 
	tgøph_œbñ_t
;

9 
	#GRAPH_DEFAULT_FONT
 "S™†12"

	)

11 
gøph
 *
gøph_√w
(
xdim
, 
ydim
, c⁄° *
f⁄t
);

13 
gøph_£t_size
(
gøph
 *
g
, 
xdim
, 
ydim
);

15 
gøph_£t_posôi⁄
(
gøph
 *
g
, 
xoff£t
, 
yoff£t
);

17 
b¨_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
);

19 
löe_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
);

21 
löe_gøph_£t_d©a_cou¡_limô
(
gøph
 *
g
, 
≥r_œbñ_limô
);

26 
gøph_£t_f⁄t
(
gøph
 *
g
, c⁄° *
f⁄t
);

27 
gøph_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

29 
gøph_x_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

31 
gøph_y_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

33 
gøph_œbñ_t
 
gøph_add_œbñ
(
gøph
 *
g
, c⁄° *
œbñ
);

55 
gøph_add_d©a
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
, c⁄° 
vÆue
);

57 
gøph_add_xy_d©a
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
,

58 c⁄° 
x
, c⁄° 
y
, c⁄° *
toﬁtù
);

61 
gøph_£t_cﬁ‹
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
,

62 
ªd
, 
gªí
, 
blue
);

63 
	#INVISIBLE_COLOR
 (-1.0)

	)

70 
gøph_‰ì
(
gøph
 *
bg
);

73 (*
	tgøph_axis_unô_ch™ge_ˇŒback
)(
	tgøph
 *
	tg
, 
	tpowî_of_ãn
);

74 
	`gøph_x_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
);

75 
	`gøph_y_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
);

83 
	`gøph_add_exåa_•a˚
(
gøph
 *
g
, 
À·_≥r˚¡
, 
right_≥r˚¡
,

84 
t›_≥r˚¡
, 
bŸtom_≥r˚¡
);

89 
	`gøph_has_toﬁtùs
(
gøph
 *
g
);

90 c⁄° *
	`gøph_föd_toﬁtù
(
gøph
 *
g
, 
x
, 
y
);

91 
	`gøph_c⁄èös_xy
(
gøph
 *
p
, 
x
, 
y
);

93 
	`gøph_£t_ba£_off£t
(
gøph
 *
g
, 
ba£_off£t
);

94 
	`gøph_£t_gøph_Æl_zî€s
(
gøph
 *
g
, 
£t
);

96 
	`gøph_˛ór_vÆues
(
gøph
 *
g
);

	@hash.h

1 #i‚de‡
_LINUX_HASH_H


2 
	#_LINUX_HASH_H


	)

4 
	~<öây≥s.h
>

5 
	~"¨ch/¨ch.h
"

21 #i‡
BITS_PER_LONG
 == 32

23 
	#GOLDEN_RATIO_PRIME
 0x9e370001UL

	)

24 #ñi‡
BITS_PER_LONG
 == 64

26 
	#GOLDEN_RATIO_PRIME
 0x9e37fffffffc0001UL

	)

28 #îr‹ 
Deföe
 
GOLDEN_RATIO_PRIME
 
your
 
w‹dsize
.

44 
	#GOLDEN_RATIO_32
 0x61C88647

	)

45 
	#GOLDEN_RATIO_64
 0x61C8864680B583EBuŒ

	)

47 
ölöe
 
	$__hash_l⁄g
(
uöt64_t
 
vÆ
)

49 
uöt64_t
 
hash
 = 
vÆ
;

51 #i‡
BITS_PER_LONG
 == 64

52 
hash
 *
GOLDEN_RATIO_64
;

55 
uöt64_t
 
n
 = 
hash
;

56 
n
 <<= 18;

57 
hash
 -
n
;

58 
n
 <<= 33;

59 
hash
 -
n
;

60 
n
 <<= 3;

61 
hash
 +
n
;

62 
n
 <<= 3;

63 
hash
 -
n
;

64 
n
 <<= 4;

65 
hash
 +
n
;

66 
n
 <<= 2;

67 
hash
 +
n
;

70  
hash
;

71 
	}
}

73 
ölöe
 
	$hash_l⁄g
(
vÆ
, 
bôs
)

76  
	`__hash_l⁄g
(
vÆ
Ë>> (
BITS_PER_LONG
 - 
bôs
);

77 
	}
}

79 
ölöe
 
uöt64_t
 
	$__hash_u64
(
uöt64_t
 
vÆ
)

81  
vÆ
 * 
GOLDEN_RATIO_64
;

82 
	}
}

84 
ölöe
 
	$hash_±r
(*
±r
, 
bôs
)

86  
	`hash_l⁄g
((
uöçå_t
)
±r
, 
bôs
);

87 
	}
}

93 
	#JHASH_INITVAL
 
GOLDEN_RATIO_32


	)

95 
ölöe
 
uöt32_t
 
	$rﬁ32
(
uöt32_t
 
w‹d
, uöt32_à
shi·
)

97  (
w‹d
 << 
shi·
) | (word >> (32 - shift));

98 
	}
}

101 
	#__jhash_mix
(
a
, 
b
, 
c
) \

103 
a
 -
c
;á ^
	`rﬁ32
(c, 4); c +
b
; \

104 
b
 -
a
; b ^
	`rﬁ32
◊, 6);á +
c
; \

105 
c
 -
b
; c ^
	`rﬁ32
(b, 8); b +
a
; \

106 
a
 -
c
;á ^
	`rﬁ32
(c, 16); c +
b
; \

107 
b
 -
a
; b ^
	`rﬁ32
◊, 19);á +
c
; \

108 
c
 -
b
; c ^
	`rﬁ32
(b, 4); b +
a
; \

109 }

	)

112 
	#__jhash_föÆ
(
a
, 
b
, 
c
) \

114 
c
 ^
b
; c -
	`rﬁ32
(b, 14); \

115 
a
 ^
c
;á -
	`rﬁ32
(c, 11); \

116 
b
 ^
a
; b -
	`rﬁ32
(a, 25); \

117 
c
 ^
b
; c -
	`rﬁ32
(b, 16); \

118 
a
 ^
c
;á -
	`rﬁ32
(c, 4); \

119 
b
 ^
a
; b -
	`rﬁ32
(a, 14); \

120 
c
 ^
b
; c -
	`rﬁ32
(b, 24); \

121 }

	)

123 
ölöe
 
uöt32_t
 
	$jhash
(c⁄° *
key
, 
uöt32_t
 
Àngth
, uöt32_à
öôvÆ
)

125 c⁄° 
uöt8_t
 *
k
 = 
key
;

126 
uöt32_t
 
a
, 
b
, 
c
;

129 
a
 = 
b
 = 
c
 = 
JHASH_INITVAL
 + 
Àngth
 + 
öôvÆ
;

132 
Àngth
 > 12) {

133 
a
 +*
k
;

134 
b
 +*(
k
 + 4);

135 
c
 +*(
k
 + 8);

136 
	`__jhash_mix
(
a
, 
b
, 
c
);

137 
Àngth
 -= 12;

138 
k
 += 12;

143 
Àngth
) {

144 12: 
c
 +(
uöt32_t
Ë
k
[11] << 24;

145 11: 
c
 +(
uöt32_t
Ë
k
[10] << 16;

146 10: 
c
 +(
uöt32_t
Ë
k
[9] << 8;

147 9: 
c
 +
k
[8];

148 8: 
b
 +(
uöt32_t
Ë
k
[7] << 24;

149 7: 
b
 +(
uöt32_t
Ë
k
[6] << 16;

150 6: 
b
 +(
uöt32_t
Ë
k
[5] << 8;

151 5: 
b
 +
k
[4];

152 4: 
a
 +(
uöt32_t
Ë
k
[3] << 24;

153 3: 
a
 +(
uöt32_t
Ë
k
[2] << 16;

154 2: 
a
 +(
uöt32_t
Ë
k
[1] << 8;

155 1: 
a
 +
k
[0];

156 
	`__jhash_föÆ
(
a
, 
b
, 
c
);

161  
c
;

162 
	}
}

	@helper_thread.h

1 #i‚de‡
FIO_HELPER_THREAD_H


2 
	#FIO_HELPER_THREAD_H


	)

4 
hñ≥r_ª£t
();

5 
hñ≥r_do_°©
();

6 
boﬁ
 
hñ≥r_should_exô
();

7 
hñ≥r_thªad_de°roy
();

8 
hñ≥r_thªad_exô
();

9 
hñ≥r_thªad_¸óã
(
fio_muãx
 *, 
sk_out
 *);

	@helpers.h

1 #i‚de‡
FIO_HELPERS_H


2 
	#FIO_HELPERS_H


	)

4 
	~"compûî/compûî.h
"

6 
	~<sys/ty≥s.h
>

7 
	~<time.h
>

9 
ÁŒoˇã
(
fd
, 
mode
, 
off_t
 
off£t
, off_à
Àn
);

10 
posix_ÁŒoˇã
(
fd
, 
off_t
 
off£t
, off_à
Àn
);

11 
sync_fûe_ønge
(
fd
, 
off64_t
 
off£t
, off64_à
nbyãs
,

12 
Êags
);

13 
posix_Ádvi£
(
fd
, 
off_t
 
off£t
, off_à
Àn
, 
advi˚
);

	@idletime.h

1 #i‚de‡
FIO_IDLETIME_H


2 
	#FIO_IDLETIME_H


	)

4 
	~"fio.h
"

5 
	~"lib/ouçut_buf„r.h
"

7 
	#CALIBRATE_RUNS
 10

	)

8 
	#CALIBRATE_SCALE
 1000

	)

9 
	#MAX_CPU_STR_LEN
 32

	)

12 
	mIDLE_PROF_OPT_NONE
,

13 
	mIDLE_PROF_OPT_CALI
,

14 
	mIDLE_PROF_OPT_SYSTEM
,

15 
	mIDLE_PROF_OPT_PERCPU


19 
	mIDLE_PROF_STATUS_OK
,

20 
	mIDLE_PROF_STATUS_CALI_STOP
,

21 
	mIDLE_PROF_STATUS_PROF_STOP
,

22 
	mIDLE_PROF_STATUS_ABORT


25 
	sidÀ_¥of_thªad
 {

26 
±hªad_t
 
	mthªad
;

27 
	m˝u
;

28 
	m°©e
;

29 
time•ec
 
	mçs
;

30 
time•ec
 
	mçe
;

31 
	mˇli_time
;

32 
	mlo›s
;

33 
	midÀ√ss
;

34 *
	md©a
;

35 
±hªad_c⁄d_t
 
	mc⁄d
;

36 
±hªad_muãx_t
 
	möô_lock
;

37 
±hªad_muãx_t
 
	m°¨t_lock
;

39 
os_˝u_mask_t
 
	m˝u_mask
;

42 
	sidÀ_¥of_comm⁄
 {

43 
idÀ_¥of_thªad
 *
	mùts
;

44 
	mƒ_˝us
;

45 
	m°©us
;

46 
	m›t
;

47 
	mˇli_món
;

48 
	mˇli_°ddev
;

49 *
	mbuf
;

52 
fio_idÀ_¥of_∑r£_›t
(const *);

54 
fio_idÀ_¥of_öô
();

55 
fio_idÀ_¥of_°¨t
();

56 
fio_idÀ_¥of_°›
();

58 
show_idÀ_¥of_°©s
(, 
js⁄_obje˘
 *, 
buf_ouçut
 *);

	@io_ddir.h

1 #i‚de‡
FIO_DDIR_H


2 
	#FIO_DDIR_H


	)

4 
	efio_ddú
 {

5 
	mDDIR_READ
 = 0,

6 
	mDDIR_WRITE
 = 1,

7 
	mDDIR_TRIM
 = 2,

8 
	mDDIR_SYNC
 = 3,

9 
	mDDIR_DATASYNC
,

10 
	mDDIR_SYNC_FILE_RANGE
,

11 
	mDDIR_WAIT
,

12 
	mDDIR_LAST
,

13 
	mDDIR_INVAL
 = -1,

15 
	mDDIR_RWDIR_CNT
 = 3,

16 
	mDDIR_RWDIR_SYNC_CNT
 = 4,

19 
ölöe
 c⁄° *
	$io_ddú_«me
(
fio_ddú
 
ddú
)

21 c⁄° *
«me
[] = { "read", "write", "trim", "sync",

25 i‡(
ddú
 < 
DDIR_LAST
)

26  
«me
[
ddú
];

29 
	}
}

31 
	etd_ddú
 {

32 
	mTD_DDIR_READ
 = 1 << 0,

33 
	mTD_DDIR_WRITE
 = 1 << 1,

34 
	mTD_DDIR_RAND
 = 1 << 2,

35 
	mTD_DDIR_TRIM
 = 1 << 3,

36 
	mTD_DDIR_RW
 = 
TD_DDIR_READ
 | 
TD_DDIR_WRITE
,

37 
	mTD_DDIR_RANDREAD
 = 
TD_DDIR_READ
 | 
TD_DDIR_RAND
,

38 
	mTD_DDIR_RANDWRITE
 = 
TD_DDIR_WRITE
 | 
TD_DDIR_RAND
,

39 
	mTD_DDIR_RANDRW
 = 
TD_DDIR_RW
 | 
TD_DDIR_RAND
,

40 
	mTD_DDIR_RANDTRIM
 = 
TD_DDIR_TRIM
 | 
TD_DDIR_RAND
,

41 
	mTD_DDIR_TRIMWRITE
 = 
TD_DDIR_TRIM
 | 
TD_DDIR_WRITE
,

44 
	#td_ªad
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_READ
)

	)

45 
	#td_wrôe
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_WRITE
)

	)

46 
	#td_åim
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_TRIM
)

	)

47 
	#td_rw
(
td
Ë((—d)->
o
.
td_ddú
 & 
TD_DDIR_RW
Ë=TD_DDIR_RW)

	)

48 
	#td_øndom
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_RAND
)

	)

49 
	#fûe_øndomm≠
(
td
, 
f
Ë(!—d)->
o
.
n‹™domm≠
 && 
	`fio_fûe_axm≠
((f)))

	)

50 
	#td_åimwrôe
(
td
Ë((—d)->
o
.
td_ddú
 & 
TD_DDIR_TRIMWRITE
) \

51 =
TD_DDIR_TRIMWRITE
)

	)

53 
ölöe
 
	$ddú_sync
(
fio_ddú
 
ddú
)

55  
ddú
 =
DDIR_SYNC
 || ddú =
DDIR_DATASYNC
 ||

56 
ddú
 =
DDIR_SYNC_FILE_RANGE
;

57 
	}
}

59 
ölöe
 
	$ddú_rw
(
fio_ddú
 
ddú
)

61  
ddú
 =
DDIR_READ
 || ddú =
DDIR_WRITE
 || ddú =
DDIR_TRIM
;

62 
	}
}

64 
ölöe
 c⁄° *
	$ddú_°r
(
td_ddú
 
ddú
)

66 c⁄° *
__°r
[] = { 
NULL
, "read", "write", "rw", "rand",

68 "åim", 
NULL
, "trimwrite", NULL, "randtrim" };

70  
__°r
[
ddú
];

71 
	}
}

73 
	#ddú_rw_sum
(
¨r
) \

74 ((
¨r
)[
DDIR_READ
] + (¨r)[
DDIR_WRITE
] + (¨r)[
DDIR_TRIM
])

	)

	@io_u.h

1 #i‚de‡
FIO_IO_U


2 
	#FIO_IO_U


	)

4 
	~"compûî/compûî.h
"

5 
	~"os/os.h
"

6 
	~"log.h
"

7 
	~"io_ddú.h
"

8 
	~"debug.h
"

9 
	~"fûe.h
"

10 
	~"w‹kqueue.h
"

12 #ifde‡
CONFIG_LIBAIO


13 
	~<libaio.h
>

15 #ifde‡
CONFIG_GUASI


16 
	~<guasi.h
>

20 
	mIO_U_F_FREE
 = 1 << 0,

21 
	mIO_U_F_FLIGHT
 = 1 << 1,

22 
	mIO_U_F_NO_FILE_PUT
 = 1 << 2,

23 
	mIO_U_F_IN_CUR_DEPTH
 = 1 << 3,

24 
	mIO_U_F_BUSY_OK
 = 1 << 4,

25 
	mIO_U_F_TRIMMED
 = 1 << 5,

26 
	mIO_U_F_BARRIER
 = 1 << 6,

27 
	mIO_U_F_VER_LIST
 = 1 << 7,

33 
	sio_u
 {

34 
time•ec
 
	m°¨t_time
;

35 
time•ec
 
	missue_time
;

37 
fio_fûe
 *
	mfûe
;

38 
	mÊags
;

39 
fio_ddú
 
	mddú
;

45 
fio_ddú
 
	mac˘_ddú
;

50 
	mnumbîio
;

55 
	mbuÊí
;

56 
	moff£t
;

57 *
	mbuf
;

62 
uöt64_t
 
	mønd_£ed
;

68 *
	mx„r_buf
;

69 
	mx„r_buÊí
;

75 
	mbuf_fûÀd_Àn
;

77 
io_põ˚
 *
	mùo
;

79 
	mªsid
;

80 
	mîr‹
;

86 
	mödex
;

87 
	m£í
;

88 *
	mígöe_d©a
;

92 
Êi°_hód
 
	mvîify_li°
;

93 
w‹kqueue_w‹k
 
	mw‹k
;

99 (*
	míd_io
)(
	mthªad_d©a
 *, 
	mio_u
 **);

102 #ifde‡
CONFIG_LIBAIO


103 
iocb
 
	miocb
;

105 #ifde‡
CONFIG_POSIXAIO


106 
os_aiocb_t
 
	maiocb
;

108 #ifde‡
FIO_HAVE_SGIO


109 
sg_io_hdr
 
	mhdr
;

111 #ifde‡
CONFIG_GUASI


112 
guasi_ªq_t
 
	mgªq
;

114 #ifde‡
CONFIG_SOLARISAIO


115 
aio_ªsu…_t
 
	mªsu…p
;

117 #ifde‡
FIO_HAVE_BINJECT


118 
b_u£r_cmd
 
	mbuc
;

120 #ifde‡
CONFIG_RDMA


121 
ibv_mr
 *
	mmr
;

123 *
	mmm≠_d©a
;

130 
io_u
 *
__gë_io_u
(
thªad_d©a
 *);

131 
io_u
 *
gë_io_u
(
thªad_d©a
 *);

132 
put_io_u
(
thªad_d©a
 *, 
io_u
 *);

133 
˛ór_io_u
(
thªad_d©a
 *, 
io_u
 *);

134 
ªqueue_io_u
(
thªad_d©a
 *, 
io_u
 **);

135 
__mu°_check
 
io_u_sync_com∂ëe
(
thªad_d©a
 *, 
io_u
 *);

136 
__mu°_check
 
io_u_queued_com∂ëe
(
thªad_d©a
 *, );

137 
io_u_queued
(
thªad_d©a
 *, 
io_u
 *);

138 
io_u_quõs˚
(
thªad_d©a
 *);

139 
io_u_log_îr‹
(
thªad_d©a
 *, 
io_u
 *);

140 
io_u_m¨k_dïth
(
thªad_d©a
 *, );

141 
fûl_io_buf„r
(
thªad_d©a
 *, *, , );

142 
io_u_fûl_buf„r
(
thªad_d©a
 *
td
, 
io_u
 *, , );

143 
io_u_m¨k_com∂ëe
(
thªad_d©a
 *, );

144 
io_u_m¨k_submô
(
thªad_d©a
 *, );

145 
boﬁ
 
queue_fuŒ
(c⁄° 
thªad_d©a
 *);

147 
do_io_u_sync
(c⁄° 
thªad_d©a
 *, 
io_u
 *);

148 
do_io_u_åim
(c⁄° 
thªad_d©a
 *, 
io_u
 *);

150 #ifde‡
FIO_INC_DEBUG


151 
ölöe
 
	$d¥öt_io_u
(
io_u
 *io_u, c⁄° *
p
)

153 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

155 i‡(
f
)

156 
	`d¥öt
(
FD_IO
, "%s: io_u %p: off=0x%llx,len=0x%lx,ddir=%d,file=%s\n",

157 
p
, 
io_u
,

158 (Ë
io_u
->
off£t
,

159 
io_u
->
buÊí
, io_u->
ddú
,

160 
f
->
fûe_«me
);

162 
	`d¥öt
(
FD_IO
, "%s: io_u %p: off=0x%llx,len=0x%lx,ddir=%d\n",

163 
p
, 
io_u
,

164 (Ë
io_u
->
off£t
,

165 
io_u
->
buÊí
, io_u->
ddú
);

166 
	}
}

168 
	#d¥öt_io_u
(
io_u
, 
p
)

	)

171 
ölöe
 
fio_ddú
 
	$ac˘_ddú
(
io_u
 *io_u)

173 i‡(
io_u
->
ac˘_ddú
 != -1)

174  
io_u
->
ac˘_ddú
;

176  
io_u
->
ddú
;

177 
	}
}

179 
	#io_u_˛ór
(
td
, 
io_u
, 
vÆ
) \

180 
	`td_Êags_˛ór
((
td
), &(
io_u
->
Êags
), (
vÆ
))

	)

181 
	#io_u_£t
(
td
, 
io_u
, 
vÆ
) \

182 
	`td_Êags_£t
((
td
), &(
io_u
)->
Êags
, (
vÆ
))

	)

	@io_u_queue.h

1 #i‚de‡
FIO_IO_U_QUEUE


2 
	#FIO_IO_U_QUEUE


	)

4 
	~<as£π.h
>

5 
	~"lib/ty≥s.h
"

7 
	gio_u
;

9 
	sio_u_queue
 {

10 
io_u
 **
	mio_us
;

11 
	mƒ
;

12 
	mmax
;

15 
ölöe
 
io_u
 *
	$io_u_qp›
(
io_u_queue
 *
q
)

17 i‡(
q
->
ƒ
) {

18 c⁄° 
√xt
 = --
q
->
ƒ
;

19 
io_u
 *io_u = 
q
->
io_us
[
√xt
];

21 
q
->
io_us
[
√xt
] = 
NULL
;

22  
io_u
;

25  
NULL
;

26 
	}
}

28 
ölöe
 
	$io_u_qpush
(
io_u_queue
 *
q
, 
io_u
 *io_u)

30 i‡(
q
->
ƒ
 < q->
max
) {

31 
q
->
io_us
[q->
ƒ
++] = 
io_u
;

35 
	`as£π
(0);

36 
	}
}

38 
ölöe
 
	$io_u_qem±y
(c⁄° 
io_u_queue
 *
q
)

40  !
q
->
ƒ
;

41 
	}
}

43 
	#io_u_qôî
(
q
, 
io_u
, 
i
) \

44 
i
 = 0; i < (
q
)->
ƒ
 && (
io_u
 = (q)->
io_us
[i]); i++)

	)

46 
boﬁ
 
io_u_qöô
(
io_u_queue
 *
q
, 
ƒ
);

47 
io_u_qexô
(
io_u_queue
 *
q
);

49 
	sio_u_rög
 {

50 
	mhód
;

51 
	mèû
;

52 
	mmax
;

53 
io_u
 **
	mrög
;

56 
boﬁ
 
io_u_röô
(
io_u_rög
 *
rög
, 
ƒ
);

57 
io_u_ªxô
(
io_u_rög
 *
rög
);

59 
ölöe
 
	$io_u_Ωush
(
io_u_rög
 *
r
, 
io_u
 *io_u)

61 i‡(
r
->
hód
 + 1 !r->
èû
) {

62 
r
->
rög
[r->
hód
] = 
io_u
;

63 
r
->
hód
 = (r->hód + 1Ë& (r->
max
 - 1);

67 
	`as£π
(0);

68 
	}
}

70 
ölöe
 
io_u
 *
	$io_u_Ω›
(
io_u_rög
 *
r
)

72 i‡(
r
->
hód
 !r->
èû
) {

73 
io_u
 *io_u = 
r
->
rög
[r->
èû
];

75 
r
->
èû
 = (r->èû + 1Ë& (r->
max
 - 1);

76  
io_u
;

79  
NULL
;

80 
	}
}

82 
ölöe
 
	$io_u_ªm±y
(
io_u_rög
 *
rög
)

84  
rög
->
hód
 =rög->
èû
;

85 
	}
}

	@ioengines.h

1 #i‚de‡
FIO_IOENGINE_H


2 
	#FIO_IOENGINE_H


	)

4 
	~"compûî/compûî.h
"

5 
	~"os/os.h
"

6 
	~"fûe.h
"

7 
	~"io_u.h
"

9 
	#FIO_IOOPS_VERSION
 23

	)

15 
	mFIO_Q_COMPLETED
 = 0,

16 
	mFIO_Q_QUEUED
 = 1,

17 
	mFIO_Q_BUSY
 = 2,

20 
	si€ngöe_›s
 {

21 
Êi°_hód
 
	mli°
;

22 c⁄° *
	m«me
;

23 
	mvîsi⁄
;

24 
	mÊags
;

25 (*
	m£tup
)(
	mthªad_d©a
 *);

26 (*
	möô
)(
	mthªad_d©a
 *);

27 (*
	m¥ï
)(
	mthªad_d©a
 *, 
	mio_u
 *);

28 (*
	mqueue
)(
	mthªad_d©a
 *, 
	mio_u
 *);

29 (*
	mcommô
)(
	mthªad_d©a
 *);

30 (*
	mgëevíts
)(
	mthªad_d©a
 *, , , c⁄° 
	mtime•ec
 *);

31 
	mio_u
 *(*
	mevít
)(
	mthªad_d©a
 *, );

32 *(*
	mîrdëaûs
)(
	mio_u
 *);

33 (*
	mˇn˚l
)(
	mthªad_d©a
 *, 
	mio_u
 *);

34 (*
	m˛ónup
)(
	mthªad_d©a
 *);

35 (*
	m›í_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

36 (*
	m˛o£_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

37 (*
	mövÆid©e
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

38 (*
	mu∆ök_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

39 (*
	mgë_fûe_size
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

40 (*
	mãrmö©e
)(
	mthªad_d©a
 *);

41 (*
	miomem_Æloc
)(
	mthªad_d©a
 *, 
	msize_t
);

42 (*
	miomem_‰ì
)(
	mthªad_d©a
 *);

43 (*
	mio_u_öô
)(
	mthªad_d©a
 *, 
	mio_u
 *);

44 (*
	mio_u_‰ì
)(
	mthªad_d©a
 *, 
	mio_u
 *);

45 
	m›ti⁄_°ru˘_size
;

46 
fio_›ti⁄
 *
	m›ti⁄s
;

49 
	efio_i€ngöe_Êags
 {

50 
	mFIO_SYNCIO
 = 1 << 0,

51 
	mFIO_RAWIO
 = 1 << 1,

52 
	mFIO_DISKLESSIO
 = 1 << 2,

53 
	mFIO_NOEXTEND
 = 1 << 3,

54 
	mFIO_NODISKUTIL
 = 1 << 4,

55 
	mFIO_UNIDIR
 = 1 << 5,

56 
	mFIO_NOIO
 = 1 << 6,

57 
	mFIO_PIPEIO
 = 1 << 7,

58 
	mFIO_BARRIER
 = 1 << 8,

59 
	mFIO_MEMALIGN
 = 1 << 9,

60 
	mFIO_BIT_BASED
 = 1 << 10,

61 
	mFIO_FAKEIO
 = 1 << 11,

62 
	mFIO_NOSTATS
 = 1 << 12,

63 
	mFIO_NOFILEHASH
 = 1 << 13,

69 (*
	tgë_i€ngöe_t
)(
	ti€ngöe_›s
 **);

74 
__mu°_check
 
	`td_io_öô
(
thªad_d©a
 *);

75 
__mu°_check
 
	`td_io_¥ï
(
thªad_d©a
 *, 
io_u
 *);

76 
__mu°_check
 
	`td_io_queue
(
thªad_d©a
 *, 
io_u
 *);

77 
__mu°_check
 
	`td_io_gëevíts
(
thªad_d©a
 *, , , c⁄° 
time•ec
 *);

78 
__mu°_check
 
	`td_io_commô
(
thªad_d©a
 *);

79 
__mu°_check
 
	`td_io_›í_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

80 
	`td_io_˛o£_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

81 
	`td_io_u∆ök_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

82 
__mu°_check
 
	`td_io_gë_fûe_size
(
thªad_d©a
 *, 
fio_fûe
 *);

84 
i€ngöe_›s
 *
	`lﬂd_i€ngöe
(
thªad_d©a
 *);

85 
	`ªgi°î_i€ngöe
(
i€ngöe_›s
 *);

86 
	`uƒegi°î_i€ngöe
(
i€ngöe_›s
 *);

87 
	`‰ì_i€ngöe
(
thªad_d©a
 *);

88 
	`˛o£_i€ngöe
(
thªad_d©a
 *);

90 
	`fio_show_i€ngöe_hñp
(c⁄° *
ígöe
);

	@iolog.h

1 #i‚de‡
FIO_IOLOG_H


2 
	#FIO_IOLOG_H


	)

4 
	~"lib/rbåì.h
"

5 
	~"lib/õì754.h
"

6 
	~"Êi°.h
"

7 
	~"i€ngöes.h
"

12 
	sio_°©
 {

13 
uöt64_t
 
	mmax_vÆ
;

14 
uöt64_t
 
	mmö_vÆ
;

15 
uöt64_t
 
	mßm∂es
;

17 
fio_Â64_t
 
	mmón
;

18 
fio_Â64_t
 
	mS
;

21 
	sio_hi°
 {

22 
uöt64_t
 
	mßm∂es
;

23 
	mhi°_œ°
;

24 
Êi°_hód
 
	mli°
;

28 
	uio_ßm∂e_d©a
 {

29 
uöt64_t
 
	mvÆ
;

30 
io_u_∂©_íåy
 *
	m∂©_íåy
;

33 
	#ßm∂e_vÆ
(
vÆue
Ë((
io_ßm∂e_d©a
Ë{ .
vÆ
 = vÆuê})

	)

34 
	#ßm∂e_∂©
(
∂©
Ë((
io_ßm∂e_d©a
Ë{ .
∂©_íåy
 =Öœà})

	)

39 
	sio_ßm∂e
 {

40 
uöt64_t
 
	mtime
;

41 
io_ßm∂e_d©a
 
	md©a
;

42 
uöt32_t
 
	m__ddú
;

43 
uöt32_t
 
	mbs
;

46 
	sio_ßm∂e_off£t
 {

47 
io_ßm∂e
 
	ms
;

48 
uöt64_t
 
	moff£t
;

52 
	mIO_LOG_TYPE_LAT
 = 1,

53 
	mIO_LOG_TYPE_CLAT
,

54 
	mIO_LOG_TYPE_SLAT
,

55 
	mIO_LOG_TYPE_BW
,

56 
	mIO_LOG_TYPE_IOPS
,

57 
	mIO_LOG_TYPE_HIST
,

60 
	#DEF_LOG_ENTRIES
 1024

	)

61 
	#MAX_LOG_ENTRIES
 (1024 * 
DEF_LOG_ENTRIES
)

	)

63 
	sio_logs
 {

64 
Êi°_hód
 
	mli°
;

65 
uöt64_t
 
	mƒ_ßm∂es
;

66 
uöt64_t
 
	mmax_ßm∂es
;

67 *
	mlog
;

73 
	sio_log
 {

77 
Êi°_hód
 
	mio_logs
;

78 
uöt32_t
 
	mcur_log_max
;

84 
io_logs
 *
	m≥ndög
;

86 
	mlog_ddú_mask
;

88 *
	mfûíame
;

90 
thªad_d©a
 *
	mtd
;

92 
	mlog_ty≥
;

97 
boﬁ
 
	mdißbÀd
;

102 
	mlog_off£t
;

107 
	mlog_gz
;

112 
	mlog_gz_°‹e
;

118 
io_°©
 
	mavg_wödow
[
DDIR_RWDIR_CNT
];

119 
	mavg_m£c
;

120 
	mavg_œ°
[
DDIR_RWDIR_CNT
];

127 
io_hi°
 
	mhi°_wödow
[
DDIR_RWDIR_CNT
];

128 
	mhi°_m£c
;

129 
	mhi°_cﬂr£√ss
;

131 
±hªad_muãx_t
 
	mchunk_lock
;

132 
	mchunk_£q
;

133 
Êi°_hód
 
	mchunk_li°
;

135 
±hªad_muãx_t
 
	mde„ºed_‰ì_lock
;

136 
	#IOLOG_MAX_DEFER
 8

	)

137 *
	mde„ºed_ôems
[
IOLOG_MAX_DEFER
];

138 
	mde„ºed
;

144 
	#LOG_OFFSET_SAMPLE_BIT
 0x80000000U

	)

145 
	#io_ßm∂e_ddú
(
io
Ë((io)->
__ddú
 & ~
LOG_OFFSET_SAMPLE_BIT
)

	)

147 
ölöe
 
	$io_ßm∂e_£t_ddú
(
io_log
 *
log
,

148 
io_ßm∂e
 *
io
,

149 
fio_ddú
 
ddú
)

151 
io
->
__ddú
 = 
ddú
 | 
log
->
log_ddú_mask
;

152 
	}
}

154 
ölöe
 
size_t
 
	$__log_íåy_sz
(
log_off£t
)

156 i‡(
log_off£t
)

157  (
io_ßm∂e_off£t
);

159  (
io_ßm∂e
);

160 
	}
}

162 
ölöe
 
size_t
 
	$log_íåy_sz
(
io_log
 *
log
)

164  
	`__log_íåy_sz
(
log
->
log_off£t
);

165 
	}
}

167 
ölöe
 
size_t
 
	$log_ßm∂e_sz
(
io_log
 *
log
, 
io_logs
 *
cur_log
)

169  
cur_log
->
ƒ_ßm∂es
 * 
	`log_íåy_sz
(
log
);

170 
	}
}

172 
ölöe
 
io_ßm∂e
 *
	$__gë_ßm∂e
(*
ßm∂es
, 
log_off£t
,

173 
uöt64_t
 
ßm∂e
)

175 
uöt64_t
 
ßm∂e_off£t
 = 
ßm∂e
 * 
	`__log_íåy_sz
(
log_off£t
);

176  (
io_ßm∂e
 *Ë((*Ë
ßm∂es
 + 
ßm∂e_off£t
);

177 
	}
}

179 
io_logs
 *
iﬁog_cur_log
(
io_log
 *);

180 
uöt64_t
 
iﬁog_ƒ_ßm∂es
(
io_log
 *);

181 
ªgrow_logs
(
thªad_d©a
 *);

183 
ölöe
 
io_ßm∂e
 *
	$gë_ßm∂e
(
io_log
 *
iﬁog
,

184 
io_logs
 *
cur_log
,

185 
uöt64_t
 
ßm∂e
)

187  
	`__gë_ßm∂e
(
cur_log
->
log
, 
iﬁog
->
log_off£t
, 
ßm∂e
);

188 
	}
}

191 
	mIP_F_ONRB
 = 1,

192 
	mIP_F_ONLIST
 = 2,

193 
	mIP_F_TRIMMED
 = 4,

194 
	mIP_F_IN_FLIGHT
 = 8,

200 
	sio_põ˚
 {

202 
rb_node
 
	mrb_node
;

203 
Êi°_hód
 
	mli°
;

205 
Êi°_hód
 
	måim_li°
;

207 
	mfûío
;

208 
fio_fûe
 *
	mfûe
;

210 
	moff£t
;

211 
	mnumbîio
;

212 
	mÀn
;

213 
	mÊags
;

214 
fio_ddú
 
	mddú
;

216 
	mdñay
;

217 
	mfûe_a˘i⁄
;

224 
	efûe_log_a˘
 {

225 
	mFIO_LOG_ADD_FILE
,

226 
	mFIO_LOG_OPEN_FILE
,

227 
	mFIO_LOG_CLOSE_FILE
,

228 
	mFIO_LOG_UNLINK_FILE
,

231 
	gio_u
;

232 
__mu°_check
 
ªad_iﬁog_gë
(
thªad_d©a
 *, 
io_u
 *);

233 
log_io_u
(c⁄° 
thªad_d©a
 *, c⁄° 
io_u
 *);

234 
log_fûe
(
thªad_d©a
 *, 
fio_fûe
 *, 
fûe_log_a˘
);

235 
__mu°_check
 
öô_iﬁog
(
thªad_d©a
 *
td
);

236 
log_io_põ˚
(
thªad_d©a
 *, 
io_u
 *);

237 
u∆og_io_põ˚
(
thªad_d©a
 *, 
io_u
 *);

238 
åim_io_põ˚
(
thªad_d©a
 *, c⁄° 
io_u
 *);

239 
queue_io_põ˚
(
thªad_d©a
 *, 
io_põ˚
 *);

240 
¥u√_io_põ˚_log
(
thªad_d©a
 *);

241 
wrôe_iﬁog_˛o£
(
thªad_d©a
 *);

242 
iﬁog_com¥ess_öô
(
thªad_d©a
 *, 
sk_out
 *);

243 
iﬁog_com¥ess_exô
(
thªad_d©a
 *);

244 
size_t
 
log_chunk_sizes
(
io_log
 *);

246 #ifde‡
CONFIG_ZLIB


247 
iﬁog_fûe_öÊ©e
(const *);

253 
	slog_∑øms
 {

254 
thªad_d©a
 *
	mtd
;

255 
	mavg_m£c
;

256 
	mhi°_m£c
;

257 
	mhi°_cﬂr£√ss
;

258 
	mlog_ty≥
;

259 
	mlog_off£t
;

260 
	mlog_gz
;

261 
	mlog_gz_°‹e
;

262 
	mlog_com¥ess
;

265 
ölöe
 
boﬁ
 
	$≥r_unô_log
(
io_log
 *
log
)

267  
log
 && (!log->
avg_m£c
 ||Üog->
log_gz
 ||Üog->
log_gz_°‹e
);

268 
	}
}

270 
ölöe
 
boﬁ
 
	$ölöe_log
(
io_log
 *
log
)

272  
log
->
log_ty≥
 =
IO_LOG_TYPE_LAT
 ||

273 
log
->
log_ty≥
 =
IO_LOG_TYPE_CLAT
 ||

274 
log
->
log_ty≥
 =
IO_LOG_TYPE_SLAT
;

275 
	}
}

277 
ölöe
 
	$ùo_byãs_Æign
(
ª∂ay_Æign
, 
io_põ˚
 *
ùo
)

279 i‡(!
ª∂ay_Æign
)

282 
ùo
->
off£t
 &~(
ª∂ay_Æign
 - (
uöt64_t
)1);

283 
	}
}

285 
föÆize_logs
(
thªad_d©a
 *
td
, 
boﬁ
);

286 
£tup_log
(
io_log
 **, 
log_∑øms
 *, const *);

287 
Êush_log
(
io_log
 *, 
boﬁ
);

288 
Êush_ßm∂es
(
FILE
 *, *, 
uöt64_t
);

289 
uöt64_t
 
hi°_sum
(, , uint64_t *, uint64_t *);

290 
‰ì_log
(
io_log
 *);

291 
fio_wrôeout_logs
(
boﬁ
);

292 
td_wrôeout_logs
(
thªad_d©a
 *, 
boﬁ
);

293 
iﬁog_cur_Êush
(
io_log
 *, 
io_logs
 *);

295 
ölöe
 
	$öô_ùo
(
io_põ˚
 *
ùo
)

297 
	`mem£t
(
ùo
, 0, (*ipo));

298 
	`INIT_FLIST_HEAD
(&
ùo
->
åim_li°
);

299 
	}
}

301 
	siﬁog_com¥ess
 {

302 
Êi°_hód
 
	mli°
;

303 *
	mbuf
;

304 
size_t
 
	mÀn
;

305 
	m£q
;

	@json.h

1 #i‚de‡
__JSON__H


2 
	#__JSON__H


	)

4 
	~"lib/ouçut_buf„r.h
"

6 
	gjs⁄_obje˘
;

7 
	gjs⁄_¨øy
;

8 
	gjs⁄_∑ú
;

10 
	#JSON_TYPE_STRING
 0

	)

11 
	#JSON_TYPE_INTEGER
 1

	)

12 
	#JSON_TYPE_FLOAT
 2

	)

13 
	#JSON_TYPE_OBJECT
 3

	)

14 
	#JSON_TYPE_ARRAY
 4

	)

15 
	#JSON_PARENT_TYPE_PAIR
 0

	)

16 
	#JSON_PARENT_TYPE_ARRAY
 1

	)

17 
	sjs⁄_vÆue
 {

18 
	mty≥
;

20 
	möãgî_numbî
;

21 
	mÊﬂt_numbî
;

22 *
	m°rög
;

23 
js⁄_obje˘
 *
	mobje˘
;

24 
js⁄_¨øy
 *
	m¨øy
;

26 
	m∑ª¡_ty≥
;

28 
js⁄_∑ú
 *
	m∑ª¡_∑ú
;

29 
js⁄_¨øy
 *
	m∑ª¡_¨øy
;

33 
	sjs⁄_¨øy
 {

34 
js⁄_vÆue
 **
	mvÆues
;

35 
	mvÆue_˙t
;

36 
js⁄_vÆue
 *
	m∑ª¡
;

39 
	sjs⁄_obje˘
 {

40 
js⁄_∑ú
 **
	m∑ús
;

41 
	m∑ú_˙t
;

42 
js⁄_vÆue
 *
	m∑ª¡
;

45 
	sjs⁄_∑ú
 {

46 *
	m«me
;

47 
js⁄_vÆue
 *
	mvÆue
;

48 
js⁄_obje˘
 *
	m∑ª¡
;

51 
js⁄_obje˘
 *
js⁄_¸óã_obje˘
();

52 
js⁄_¨øy
 *
js⁄_¸óã_¨øy
();

54 
js⁄_‰ì_obje˘
(
js⁄_obje˘
 *
obj
);

56 
js⁄_obje˘_add_vÆue_ty≥
(
js⁄_obje˘
 *
obj
, c⁄° *
«me
, 
ty≥
, ...);

57 
	#js⁄_obje˘_add_vÆue_öt
(
obj
, 
«me
, 
vÆ
) \

58 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_INTEGER
, (Ë(
vÆ
))

	)

59 
	#js⁄_obje˘_add_vÆue_Êﬂt
(
obj
, 
«me
, 
vÆ
) \

60 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_FLOAT
, (
vÆ
))

	)

61 
	#js⁄_obje˘_add_vÆue_°rög
(
obj
, 
«me
, 
vÆ
) \

62 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_STRING
, (
vÆ
))

	)

63 
	#js⁄_obje˘_add_vÆue_obje˘
(
obj
, 
«me
, 
vÆ
) \

64 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_OBJECT
, (
vÆ
))

	)

65 
	#js⁄_obje˘_add_vÆue_¨øy
(
obj
, 
«me
, 
vÆ
) \

66 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_ARRAY
, (
vÆ
))

	)

67 
js⁄_¨øy_add_vÆue_ty≥
(
js⁄_¨øy
 *
¨øy
, 
ty≥
, ...);

68 
	#js⁄_¨øy_add_vÆue_öt
(
obj
, 
vÆ
) \

69 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_INTEGER
, (
vÆ
))

	)

70 
	#js⁄_¨øy_add_vÆue_Êﬂt
(
obj
, 
vÆ
) \

71 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_FLOAT
, (
vÆ
))

	)

72 
	#js⁄_¨øy_add_vÆue_°rög
(
obj
, 
vÆ
) \

73 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_STRING
, (
vÆ
))

	)

74 
	#js⁄_¨øy_add_vÆue_obje˘
(
obj
, 
vÆ
) \

75 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_OBJECT
, (
vÆ
))

	)

76 
	#js⁄_¨øy_add_vÆue_¨øy
(
obj
, 
vÆ
) \

77 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_ARRAY
, (
vÆ
))

	)

79 
	#js⁄_¨øy_œ°_vÆue_obje˘
(
obj
) \

80 (
obj
->
vÆues
[obj->
vÆue_˙t
 - 1]->
obje˘
)

	)

82 
js⁄_¥öt_obje˘
(
js⁄_obje˘
 *
obj
, 
buf_ouçut
 *
out
);

	@lib/axmap.h

1 #i‚de‡
FIO_BITMAP_H


2 
	#FIO_BITMAP_H


	)

4 
	~<öây≥s.h
>

5 
	~"ty≥s.h
"

7 
	gaxm≠
;

8 
axm≠
 *
axm≠_√w
(
ƒ_bôs
);

9 
axm≠_‰ì
(
axm≠
 *
bm
);

11 
axm≠_˛ór
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

12 
axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

13 
axm≠_£t_ƒ
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
, 
ƒ_bôs
);

14 
boﬁ
 
axm≠_is£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

15 
uöt64_t
 
axm≠_√xt_‰ì
(
axm≠
 *axm≠, uöt64_à
bô_ƒ
);

16 
axm≠_ª£t
(
axm≠
 *axmap);

	@lib/bloom.h

1 #i‚de‡
FIO_BLOOM_H


2 
	#FIO_BLOOM_H


	)

4 
	~<öây≥s.h
>

5 
	~"../lib/ty≥s.h
"

7 
	gbloom
;

9 
bloom
 *
bloom_√w
(
uöt64_t
 
íåõs
);

10 
bloom_‰ì
(
bloom
 *
b
);

11 
boﬁ
 
bloom_£t
(
bloom
 *
b
, 
uöt32_t
 *
d©a
, 
nw‹ds
);

12 
boﬁ
 
bloom_°rög
(
bloom
 *
b
, c⁄° *
d©a
, 
Àn
, bool);

	@lib/fls.h

1 #i‚de‡
_ASM_GENERIC_BITOPS_FLS_H_


2 
	#_ASM_GENERIC_BITOPS_FLS_H_


	)

12 
ölöe
 
	$__Ês
(
x
)

14 
r
 = 32;

16 i‡(!
x
)

18 i‡(!(
x
 & 0xffff0000u)) {

19 
x
 <<= 16;

20 
r
 -= 16;

22 i‡(!(
x
 & 0xff000000u)) {

23 
x
 <<= 8;

24 
r
 -= 8;

26 i‡(!(
x
 & 0xf0000000u)) {

27 
x
 <<= 4;

28 
r
 -= 4;

30 i‡(!(
x
 & 0xc0000000u)) {

31 
x
 <<= 2;

32 
r
 -= 2;

34 i‡(!(
x
 & 0x80000000u)) {

35 
x
 <<= 1;

36 
r
 -= 1;

38  
r
;

39 
	}
}

	@lib/gauss.h

1 #i‚de‡
FIO_GAUSS_H


2 
	#FIO_GAUSS_H


	)

4 
	~<öây≥s.h
>

5 
	~"ønd.h
"

7 
	sgauss_°©e
 {

8 
‰™d_°©e
 
	mr
;

9 
uöt64_t
 
	mƒ™ges
;

10 
	m°ddev
;

11 
boﬁ
 
	mdißbÀ_hash
;

14 
gauss_öô
(
gauss_°©e
 *
gs
, 
ƒ™ges
, 
dev
,

15 
£ed
);

16 
gauss_√xt
(
gauss_°©e
 *
gs
);

17 
gauss_dißbÀ_hash
(
gauss_°©e
 *
gs
);

	@lib/getrusage.h

1 #i‚de‡
FIO_GETRUSAGE_H


2 
	#FIO_GETRUSAGE_H


	)

4 
	~<sys/time.h
>

5 
	~<sys/ªsour˚.h
>

7 
fio_gërußge
(
rußge
 *
ru
);

	@lib/hweight.h

1 #i‚de‡
FIO_HWEIGHT_H


2 
	#FIO_HWEIGHT_H


	)

4 
	~<öây≥s.h
>

6 
hweight8
(
uöt8_t
 
w
);

7 
hweight32
(
uöt32_t
 
w
);

8 
hweight64
(
uöt64_t
 
w
);

	@lib/ieee754.h

1 #i‚de‡
FIO_IEEE754_H


2 
	#FIO_IEEE754_H


	)

4 
	~<öây≥s.h
>

6 
uöt64_t
 
∑ck754
(
f
, 
bôs
, 
expbôs
);

7 
u≈ack754
(
uöt64_t
 
i
, 
bôs
, 
expbôs
);

9 
	#fio_doubÀ_to_uöt64
(
vÆ
Ë
	`∑ck754
((vÆ), 64, 11)

	)

10 
	#fio_uöt64_to_doubÀ
(
vÆ
Ë
	`u≈ack754
((vÆ), 64, 11)

	)

12 
	sfio_Â64
 {

14 
uöt64_t
 
	mi
;

15 
	mf
;

16 
uöt8_t
 
	mfûÀr
[16];

17 } 
	mu
;

18 } 
	tfio_Â64_t
;

	@lib/lfsr.h

1 #i‚de‡
FIO_LFSR_H


2 
	#FIO_LFSR_H


	)

4 
	~<öây≥s.h
>

6 
	#FIO_MAX_TAPS
 6

	)

8 
	slf§_èps
 {

9 
	mÀngth
;

10 
	mèps
[
FIO_MAX_TAPS
];

14 
	sfio_lf§
 {

15 
uöt64_t
 
	mx‹mask
;

16 
uöt64_t
 
	mœ°_vÆ
;

17 
uöt64_t
 
	mˇched_bô
;

18 
uöt64_t
 
	mmax_vÆ
;

19 
uöt64_t
 
	mnum_vÆs
;

20 
uöt64_t
 
	mcy˛e_Àngth
;

21 
uöt64_t
 
	mˇched_cy˛e_Àngth
;

22 
	m•ö
;

25 
lf§_√xt
(
fio_lf§
 *
Ê
, 
uöt64_t
 *
off
);

26 
lf§_öô
(
fio_lf§
 *
Ê
, 
uöt64_t
 
size
,

27 
£ed
, 
•ö
);

28 
lf§_ª£t
(
fio_lf§
 *
Ê
, 
£ed
);

	@lib/memalign.h

1 #i‚de‡
FIO_MEMALIGN_H


2 
	#FIO_MEMALIGN_H


	)

4 *
fio_memÆign
(
size_t
 
Æignmít
, size_à
size
);

5 
fio_mem‰ì
(*
±r
, 
size_t
 
size
);

	@lib/memcpy.h

1 #i‚de‡
FIO_MEMCPY_H


2 
	#FIO_MEMCPY_H


	)

4 
fio_mem˝y_ã°
(c⁄° *
ty≥
);

	@lib/mountcheck.h

1 #i‚de‡
FIO_MOUNT_CHECK_H


2 
	#FIO_MOUNT_CHECK_H


	)

4 
devi˚_is_mou¡ed
(const *);

	@lib/num2str.h

1 #i‚de‡
FIO_NUM2STR_H


2 
	#FIO_NUM2STR_H


	)

4 
	~<öây≥s.h
>

6 
	#N2S_NONE
 0

	)

7 
	#N2S_BITPERSEC
 1

	)

8 
	#N2S_PERSEC
 2

	)

9 
	#N2S_BIT
 3

	)

10 
	#N2S_BYTE
 4

	)

11 
	#N2S_BYTEPERSEC
 8

	)

13 *
num2°r
(
uöt64_t
, , , , );

	@lib/output_buffer.h

1 #i‚de‡
FIO_OUTPUT_BUFFER_H


2 
	#FIO_OUTPUT_BUFFER_H


	)

4 
	~<uni°d.h
>

6 
	sbuf_ouçut
 {

7 *
	mbuf
;

8 
size_t
 
	mbuÊí
;

9 
size_t
 
	mmax_buÊí
;

12 
buf_ouçut_öô
(
buf_ouçut
 *
out
);

13 
buf_ouçut_‰ì
(
buf_ouçut
 *
out
);

14 
size_t
 
buf_ouçut_add
(
buf_ouçut
 *
out
, c⁄° *
buf
, size_à
Àn
);

	@lib/pattern.h

1 #i‚de‡
FIO_PARSE_PATTERN_H


2 
	#FIO_PARSE_PATTERN_H


	)

4 
	g∑âîn_fmt
;

11 
	s∑âîn_fmt_desc
 {

12 c⁄° *
	mfmt
;

13 
	mÀn
;

14 (*
	m∑°e
)(*
	mbuf
, 
	mÀn
, *
	m¥iv
);

21 
	s∑âîn_fmt
 {

22 
	moff
;

23 c⁄° 
∑âîn_fmt_desc
 *
	mdesc
;

26 
∑r£_™d_fûl_∑âîn
(c⁄° *
ö
, 
ö_Àn
,

27 *
out
, 
out_Àn
,

28 c⁄° 
∑âîn_fmt_desc
 *
fmt_desc
,

29 
fmt_desc_sz
,

30 
∑âîn_fmt
 *
fmt
,

31 *
fmt_sz_out
);

33 
∑°e_f‹m©_ö∂a˚
(*
∑âîn
, 
∑âîn_Àn
,

34 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

35 *
¥iv
);

37 
∑°e_f‹m©
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

38 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

39 *
out
, 
out_Àn
, *
¥iv
);

41 
˝y_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

42 *
out
, 
out_Àn
);

44 
cmp_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_size
,

45 
off
, c⁄° *
buf
, 
Àn
);

	@lib/pow2.h

1 #i‚de‡
FIO_POW2_H


2 
	#FIO_POW2_H


	)

4 
	~<öây≥s.h
>

5 
	~"ty≥s.h
"

7 
ölöe
 
boﬁ
 
	$is_powî_of_2
(
uöt64_t
 
vÆ
)

9  (
vÆ
 != 0 && ((val & (val - 1)) == 0));

10 
	}
}

	@lib/prio_tree.h

1 #i‚de‡
_LINUX_PRIO_TREE_H


2 
	#_LINUX_PRIO_TREE_H


	)

4 
	~<öây≥s.h
>

5 
	~"../hash.h
"

7 
	s¥io_åì_node
 {

8 
¥io_åì_node
 *
	mÀ·
;

9 
¥io_åì_node
 *
	mright
;

10 
¥io_åì_node
 *
	m∑ª¡
;

11 
uöt64_t
 
	m°¨t
;

12 
uöt64_t
 
	mœ°
;

15 
	s¥io_åì_roŸ
 {

16 
¥io_åì_node
 *
	m¥io_åì_node
;

17 
	mödex_bôs
;

20 
	s¥io_åì_ôî
 {

21 
¥io_åì_node
 *
	mcur
;

22 
	mmask
;

23 
	mvÆue
;

24 
	msize_Àvñ
;

26 
¥io_åì_roŸ
 *
	mroŸ
;

27 
uöt64_t
 
	mr_ödex
;

28 
uöt64_t
 
	mh_ödex
;

31 
ölöe
 
	$¥io_åì_ôî_öô
(
¥io_åì_ôî
 *
ôî
,

32 
¥io_åì_roŸ
 *
roŸ
, 
uöt64_t
 
r_ödex
, uöt64_à
h_ödex
)

34 
ôî
->
roŸ
 =Ñoot;

35 
ôî
->
r_ödex
 =Ñ_index;

36 
ôî
->
h_ödex
 = h_index;

37 
ôî
->
cur
 = 
NULL
;

38 
	}
}

40 
	#INIT_PRIO_TREE_ROOT
(
±r
) \

42 (
±r
)->
¥io_åì_node
 = 
NULL
; \

43 (
±r
)->
ödex_bôs
 = 1; \

44 } 0)

	)

46 
	#INIT_PRIO_TREE_NODE
(
±r
) \

48 (
±r
)->
À·
 = (±r)->
right
 = (±r)->
∑ª¡
 = (ptr); \

49 } 0)

	)

51 
	#INIT_PRIO_TREE_ITER
(
±r
) \

53 (
±r
)->
cur
 = 
NULL
; \

54 (
±r
)->
mask
 = 0UL; \

55 (
±r
)->
vÆue
 = 0UL; \

56 (
±r
)->
size_Àvñ
 = 0; \

57 } 0)

	)

59 
	#¥io_åì_íåy
(
±r
, 
ty≥
, 
membî
) \

60 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

62 
ölöe
 
	$¥io_åì_em±y
(c⁄° 
¥io_åì_roŸ
 *
roŸ
)

64  
roŸ
->
¥io_åì_node
 =
NULL
;

65 
	}
}

67 
ölöe
 
	$¥io_åì_roŸ
(c⁄° 
¥io_åì_node
 *
node
)

69  
node
->
∑ª¡
 ==Çode;

70 
	}
}

72 
ölöe
 
	$¥io_åì_À·_em±y
(c⁄° 
¥io_åì_node
 *
node
)

74  
node
->
À·
 ==Çode;

75 
	}
}

77 
ölöe
 
	$¥io_åì_right_em±y
(c⁄° 
¥io_åì_node
 *
node
)

79  
node
->
right
 ==Çode;

80 
	}
}

83 
¥io_åì_node
 *
¥io_åì_ª∂a˚
(
¥io_åì_roŸ
 *
roŸ
,

84 
¥io_åì_node
 *
ﬁd
, ¥io_åì_nodê*
node
);

85 
¥io_åì_node
 *
¥io_åì_ö£π
(
¥io_åì_roŸ
 *
roŸ
,

86 
¥io_åì_node
 *
node
);

87 
¥io_åì_ªmove
(
¥io_åì_roŸ
 *
roŸ
, 
¥io_åì_node
 *
node
);

88 
¥io_åì_node
 *
¥io_åì_√xt
(
¥io_åì_ôî
 *
ôî
);

	@lib/rand.h

1 #i‚de‡
FIO_RAND_H


2 
	#FIO_RAND_H


	)

4 
	~<öây≥s.h
>

5 
	~<as£π.h
>

6 
	~"ty≥s.h
"

7 
	~"../¨ch/¨ch.h
"

9 
	#FRAND32_MAX
 (-1U)

	)

10 
	#FRAND64_MAX
 (-1ULL)

	)

12 
	sèus88_°©e
 {

13 
	ms1
, 
	ms2
, 
	ms3
;

16 
	sèus258_°©e
 {

17 
uöt64_t
 
	ms1
, 
	ms2
, 
	ms3
, 
	ms4
, 
	ms5
;

20 
	s‰™d_°©e
 {

21 
	mu£64
;

23 
èus88_°©e
 
	m°©e32
;

24 
èus258_°©e
 
	m°©e64
;

28 
ölöe
 
uöt64_t
 
	$ønd_max
(
‰™d_°©e
 *
°©e
)

30 i‡(
°©e
->
u£64
)

31  
FRAND64_MAX
;

33  
FRAND32_MAX
;

34 
	}
}

36 
ölöe
 
	$__‰™d32_c›y
(
èus88_°©e
 *
d°
,

37 
èus88_°©e
 *
§c
)

39 
d°
->
s1
 = 
§c
->s1;

40 
d°
->
s2
 = 
§c
->s2;

41 
d°
->
s3
 = 
§c
->s3;

42 
	}
}

44 
ölöe
 
	$__‰™d64_c›y
(
èus258_°©e
 *
d°
,

45 
èus258_°©e
 *
§c
)

47 
d°
->
s1
 = 
§c
->s1;

48 
d°
->
s2
 = 
§c
->s2;

49 
d°
->
s3
 = 
§c
->s3;

50 
d°
->
s4
 = 
§c
->s4;

51 
d°
->
s5
 = 
§c
->s5;

52 
	}
}

54 
ölöe
 
	$‰™d_c›y
(
‰™d_°©e
 *
d°
, ‰™d_°©ê*
§c
)

56 i‡(
§c
->
u£64
)

57 
	`__‰™d64_c›y
(&
d°
->
°©e64
, &
§c
->state64);

59 
	`__‰™d32_c›y
(&
d°
->
°©e32
, &
§c
->state32);

61 
d°
->
u£64
 = 
§c
->use64;

62 
	}
}

64 
ölöe
 
	$__ønd32
(
èus88_°©e
 *
°©e
)

66 
	#TAUSWORTHE
(
s
,
a
,
b
,
c
,
d
Ë((s&c)<<dË^ (((†<<aË^ s)>>b)

	)

68 
°©e
->
s1
 = 
	`TAUSWORTHE
(state->s1, 13, 19, 4294967294UL, 12);

69 
°©e
->
s2
 = 
	`TAUSWORTHE
(state->s2, 2, 25, 4294967288UL, 4);

70 
°©e
->
s3
 = 
	`TAUSWORTHE
(state->s3, 3, 11, 4294967280UL, 17);

72  (
°©e
->
s1
 ^ sèã->
s2
 ^ sèã->
s3
);

73 
	}
}

75 
ölöe
 
uöt64_t
 
	$__ønd64
(
èus258_°©e
 *
°©e
)

77 
uöt64_t
 
xvÆ
;

79 
xvÆ
 = ((
°©e
->
s1
 << 1) ^ state->s1) >> 53;

80 
°©e
->
s1
 = ((°©e->s1 & 18446744073709551614ULLË<< 10Ë^ 
xvÆ
;

82 
xvÆ
 = ((
°©e
->
s2
 << 24) ^ state->s2) >> 50;

83 
°©e
->
s2
 = ((°©e->s2 & 18446744073709551104ULLË<< 5Ë^ 
xvÆ
;

85 
xvÆ
 = ((
°©e
->
s3
 << 3) ^ state->s3) >> 23;

86 
°©e
->
s3
 = ((°©e->s3 & 18446744073709547520ULLË<< 29Ë^ 
xvÆ
;

88 
xvÆ
 = ((
°©e
->
s4
 << 5) ^ state->s4) >> 24;

89 
°©e
->
s4
 = ((°©e->s4 & 18446744073709420544ULLË<< 23Ë^ 
xvÆ
;

91 
xvÆ
 = ((
°©e
->
s5
 << 3) ^ state->s5) >> 33;

92 
°©e
->
s5
 = ((°©e->s5 & 18446744073701163008ULLË<< 8Ë^ 
xvÆ
;

94  (
°©e
->
s1
 ^ sèã->
s2
 ^ sèã->
s3
 ^ sèã->
s4
 ^ sèã->
s5
);

95 
	}
}

97 
ölöe
 
uöt64_t
 
	$__ønd
(
‰™d_°©e
 *
°©e
)

99 i‡(
°©e
->
u£64
)

100  
	`__ønd64
(&
°©e
->
°©e64
);

102  
	`__ønd32
(&
°©e
->
°©e32
);

103 
	}
}

105 
ölöe
 
	$__ønd_0_1
(
‰™d_°©e
 *
°©e
)

107 i‡(
°©e
->
u£64
) {

108 
uöt64_t
 
vÆ
 = 
	`__ønd64
(&
°©e
->
°©e64
);

110  (
vÆ
 + 1.0Ë/ (
FRAND64_MAX
 + 1.0);

112 
uöt32_t
 
vÆ
 = 
	`__ønd32
(&
°©e
->
°©e32
);

114  (
vÆ
 + 1.0Ë/ (
FRAND32_MAX
 + 1.0);

116 
	}
}

121 
ölöe
 
	$ønd32_bëwìn
(
‰™d_°©e
 *
°©e
, 
°¨t
, 
íd
)

123 
uöt32_t
 
r
;

125 
	`as£π
(!
°©e
->
u£64
);

127 
r
 = 
	`__ønd32
(&
°©e
->
°©e32
);

128  
°¨t
 + (Ë(()
íd
 * (
r
 / (
FRAND32_MAX
 + 1.0)));

129 
	}
}

131 
öô_ønd
(
‰™d_°©e
 *, 
boﬁ
);

132 
öô_ønd_£ed
(
‰™d_°©e
 *, 
£ed
, 
boﬁ
);

133 
__fûl_øndom_buf
(*
buf
, 
Àn
, 
£ed
);

134 
fûl_øndom_buf
(
‰™d_°©e
 *, *
buf
, 
Àn
);

135 
__fûl_øndom_buf_≥r˚¡age
(, *, , , , *, );

136 
fûl_øndom_buf_≥r˚¡age
(
‰™d_°©e
 *, *, , , , *, );

	@lib/rbtree.h

94 #i‚def 
_LINUX_RBTREE_H


95 
	#_LINUX_RBTREE_H


	)

97 
	~<°dlib.h
>

98 
	~<öây≥s.h
>

100 
	srb_node


102 
öçå_t
 
	mrb_∑ª¡_cﬁ‹
;

103 
	#RB_RED
 0

	)

104 
	#RB_BLACK
 1

	)

105 
rb_node
 *
	mrb_right
;

106 
rb_node
 *
	mrb_À·
;

107 } 
__©åibuã__
((
Æig√d
(())));

110 
	srb_roŸ


112 
rb_node
 *
	mrb_node
;

116 
	#rb_∑ª¡
(
r
Ë((
rb_node
 *)(‘)->
rb_∑ª¡_cﬁ‹
 & ~3))

	)

117 
	#rb_cﬁ‹
(
r
Ë(‘)->
rb_∑ª¡_cﬁ‹
 & 1)

	)

118 
	#rb_is_ªd
(
r
Ë(!
	`rb_cﬁ‹
‘))

	)

119 
	#rb_is_bœck
(
r
Ë
	`rb_cﬁ‹
‘)

	)

120 
	#rb_£t_ªd
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 &~1; } 0)

	)

121 
	#rb_£t_bœck
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 |1; } 0)

	)

123 
ölöe
 
	$rb_£t_∑ª¡
(
rb_node
 *
rb
, rb_nodê*
p
)

125 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & 3Ë| (
uöçå_t
)
p
;

126 
	}
}

127 
ölöe
 
	$rb_£t_cﬁ‹
(
rb_node
 *
rb
, 
cﬁ‹
)

129 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & ~1Ë| 
cﬁ‹
;

130 
	}
}

132 
	#RB_ROOT
 (
rb_roŸ
Ë{ 
NULL
, }

	)

133 
	#rb_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,Åy≥, membî)

	)

135 
	#RB_EMPTY_ROOT
(
roŸ
Ë(‘oŸ)->
rb_node
 =
NULL
)

	)

136 
	#RB_EMPTY_NODE
(
node
Ë(
	`rb_∑ª¡
“odeË=node)

	)

137 
	#RB_CLEAR_NODE
(
node
Ë(
	`rb_£t_∑ª¡
“ode,Çode))

	)

139 
rb_ö£π_cﬁ‹
(
rb_node
 *, 
rb_roŸ
 *);

140 
rb_îa£
(
rb_node
 *, 
rb_roŸ
 *);

143 
rb_node
 *
rb_fú°
(
rb_roŸ
 *);

144 
rb_node
 *
rb_√xt
(const rb_node *);

146 
ölöe
 
	$rb_lök_node
(
rb_node
 * 
node
, rb_nodê* 
∑ª¡
,

147 
rb_node
 ** 
rb_lök
)

149 
node
->
rb_∑ª¡_cﬁ‹
 = (
uöçå_t
)
∑ª¡
;

150 
node
->
rb_À·
 =Çode->
rb_right
 = 
NULL
;

152 *
rb_lök
 = 
node
;

153 
	}
}

	@lib/seqlock.h

1 #i‚de‡
FIO_SEQLOCK_H


2 
	#FIO_SEQLOCK_H


	)

4 
	~"ty≥s.h
"

5 
	~"../¨ch/¨ch.h
"

7 
	s£qlock
 {

8 vﬁ©ûê
	m£quí˚
;

11 
ölöe
 
	$£qlock_öô
(
£qlock
 *
s
)

13 
s
->
£quí˚
 = 0;

14 
	}
}

16 
ölöe
 
	$ªad_£qlock_begö
(
£qlock
 *
s
)

18 
£q
;

21 
£q
 = 
s
->
£quí˚
;

22 i‡(!(
£q
 & 1))

24 
n›
;

27 
	`ªad_b¨rõr
();

28  
£q
;

29 
	}
}

31 
ölöe
 
boﬁ
 
	$ªad_£qlock_ªåy
(
£qlock
 *
s
, 
£q
)

33 
	`ªad_b¨rõr
();

34  
s
->
£quí˚
 !
£q
;

35 
	}
}

37 
ölöe
 
	$wrôe_£qlock_begö
(
£qlock
 *
s
)

39 
s
->
£quí˚
++;

40 
	`wrôe_b¨rõr
();

41 
	}
}

43 
ölöe
 
	$wrôe_£qlock_íd
(
£qlock
 *
s
)

45 
	`wrôe_b¨rõr
();

46 
s
->
£quí˚
++;

47 
	}
}

	@lib/types.h

1 #i‚de‡
FIO_TYPES_H


2 
	#FIO_TYPES_H


	)

4 #i‡!
deföed
(
CONFIG_HAVE_BOOL
Ë&& !deföed(
__˝lu•lus
)

5 
	tboﬁ
;

6 #i‚de‡
Ál£


7 
	#Ál£
 0

	)

9 #i‚de‡
åue


10 
	#åue
 1

	)

13 
	~<°dboﬁ.h
>

	@lib/zipf.h

1 #i‚de‡
FIO_ZIPF_H


2 
	#FIO_ZIPF_H


	)

4 
	~<öây≥s.h
>

5 
	~"ønd.h
"

7 
	szùf_°©e
 {

8 
uöt64_t
 
	mƒ™ges
;

9 
	mthëa
;

10 
	mzëa2
;

11 
	mzë™
;

12 
	m∑ªto_pow
;

13 
‰™d_°©e
 
	mønd
;

14 
uöt64_t
 
	mønd_off
;

15 
boﬁ
 
	mdißbÀ_hash
;

18 
zùf_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
thëa
, 
£ed
);

19 
zùf_√xt
(
zùf_°©e
 *
zs
);

21 
∑ªto_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
h
, 
£ed
);

22 
∑ªto_√xt
(
zùf_°©e
 *
zs
);

23 
zùf_dißbÀ_hash
(
zùf_°©e
 *
zs
);

	@log.h

1 #i‚de‡
FIO_LOG_H


2 
	#FIO_LOG_H


	)

4 
	~<°dio.h
>

5 
	~<°d¨g.h
>

7 
	~"lib/ouçut_buf„r.h
"

9 
FILE
 *
f_out
;

10 
FILE
 *
f_îr
;

12 
size_t
 
	$log_îr
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

13 
size_t
 
	$log_öfo
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

14 
size_t
 
	$__log_buf
(
buf_ouçut
 *, c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

15 
size_t
 
	`log_vÆi°
(c⁄° *
°r
, 
va_li°
);

16 
	`log_¥evÆi°
(
ty≥
, c⁄° *
°r
, 
va_li°
);

17 
size_t
 
	`log_öfo_buf
(c⁄° *
buf
, size_à
Àn
);

18 
	`log_öfo_Êush
();

20 
	#log_buf
(
buf
, 
f‹m©
, 
¨gs
...) \

22 
size_t
 
__ªt
; \

23 i‡((
buf
Ë!
NULL
) \

24 
__ªt
 = 
	`__log_buf
(
buf
, 
f‹m©
, ##
¨gs
); \

26 
__ªt
 = 
	`log_öfo
(
f‹m©
, ##
¨gs
); \

27 
__ªt
; \

28 
	}
})

	)

31 
	mFIO_LOG_DEBUG
 = 1,

32 
	mFIO_LOG_INFO
 = 2,

33 
	mFIO_LOG_ERR
 = 3,

34 
	mFIO_LOG_NR
 = 4,

37 c⁄° *
log_gë_Àvñ
(
Àvñ
);

	@minmax.h

1 #i‚de‡
FIO_MIN_MAX_H


2 
	#FIO_MIN_MAX_H


	)

4 #i‚de‡
mö


5 
	#mö
(
x
,
y
) ({ \

6 
	`ty≥of
(
x
Ë
_x
 = (x); \

7 
	`ty≥of
(
y
Ë
_y
 = (y); \

8 (Ë(&
_x
 =&
_y
); \

9 
_x
 < 
_y
 ? _x : _y; })

	)

12 #i‚de‡
max


13 
	#max
(
x
,
y
) ({ \

14 
	`ty≥of
(
x
Ë
_x
 = (x); \

15 
	`ty≥of
(
y
Ë
_y
 = (y); \

16 (Ë(&
_x
 =&
_y
); \

17 
_x
 > 
_y
 ? _x : _y; })

	)

20 
	#mö_nŸ_zîo
(
x
, 
y
) ({ \

21 
	`ty≥of
(
x
Ë
__x
 = (x); \

22 
	`ty≥of
(
y
Ë
__y
 = (y); \

23 
__x
 =0 ? 
__y
 : ((__y =0Ë? __x : 
	`mö
(__x, __y)); })

	)

	@mutex.h

1 #i‚de‡
FIO_MUTEX_H


2 
	#FIO_MUTEX_H


	)

4 
	~<±hªad.h
>

5 
	~"lib/ty≥s.h
"

7 
	#FIO_MUTEX_MAGIC
 0x4d555445U

	)

8 
	#FIO_RWLOCK_MAGIC
 0x52574c4fU

	)

10 
	sfio_muãx
 {

11 
±hªad_muãx_t
 
	mlock
;

12 
±hªad_c⁄d_t
 
	mc⁄d
;

13 
	mvÆue
;

14 
	mwaôîs
;

15 
	mmagic
;

18 
	sfio_rwlock
 {

19 
±hªad_rwlock_t
 
	mlock
;

20 
	mmagic
;

24 
	mFIO_MUTEX_LOCKED
 = 0,

25 
	mFIO_MUTEX_UNLOCKED
 = 1,

28 
__fio_muãx_öô
(
fio_muãx
 *, );

29 
fio_muãx
 *
fio_muãx_öô
();

30 
__fio_muãx_ªmove
(
fio_muãx
 *);

31 
fio_muãx_ªmove
(
fio_muãx
 *);

32 
fio_muãx_up
(
fio_muãx
 *);

33 
fio_muãx_down
(
fio_muãx
 *);

34 
boﬁ
 
fio_muãx_down_åylock
(
fio_muãx
 *);

35 
fio_muãx_down_timeout
(
fio_muãx
 *, );

37 
fio_rwlock_ªad
(
fio_rwlock
 *);

38 
fio_rwlock_wrôe
(
fio_rwlock
 *);

39 
fio_rwlock_u∆ock
(
fio_rwlock
 *);

40 
fio_rwlock
 *
fio_rwlock_öô
();

41 
fio_rwlock_ªmove
(
fio_rwlock
 *);

43 
muãx_öô_psh¨ed
(
±hªad_muãx_t
 *);

44 
c⁄d_öô_psh¨ed
(
±hªad_c⁄d_t
 *);

45 
muãx_c⁄d_öô_psh¨ed
(
±hªad_muãx_t
 *, 
±hªad_c⁄d_t
 *);

	@optgroup.h

1 #i‚de‡
FIO_OPT_GROUP_H


2 
	#FIO_OPT_GROUP_H


	)

4 
	s›t_group
 {

5 c⁄° *
	m«me
;

6 
uöt64_t
 
	mmask
;

9 
	e›t_ˇãg‹y
 {

10 
	m__FIO_OPT_C_GENERAL
 = 0,

11 
	m__FIO_OPT_C_IO
,

12 
	m__FIO_OPT_C_FILE
,

13 
	m__FIO_OPT_C_STAT
,

14 
	m__FIO_OPT_C_LOG
,

15 
	m__FIO_OPT_C_PROFILE
,

16 
	m__FIO_OPT_C_ENGINE
,

17 
	m__FIO_OPT_C_NR
,

19 
	mFIO_OPT_C_GENERAL
 = (1ULL << 
__FIO_OPT_C_GENERAL
),

20 
	mFIO_OPT_C_IO
 = (1ULL << 
__FIO_OPT_C_IO
),

21 
	mFIO_OPT_C_FILE
 = (1ULL << 
__FIO_OPT_C_FILE
),

22 
	mFIO_OPT_C_STAT
 = (1ULL << 
__FIO_OPT_C_STAT
),

23 
	mFIO_OPT_C_LOG
 = (1ULL << 
__FIO_OPT_C_LOG
),

24 
	mFIO_OPT_C_PROFILE
 = (1ULL << 
__FIO_OPT_C_PROFILE
),

25 
	mFIO_OPT_C_ENGINE
 = (1ULL << 
__FIO_OPT_C_ENGINE
),

26 
	mFIO_OPT_C_INVALID
 = (1ULL << 
__FIO_OPT_C_NR
),

29 
	e›t_ˇãg‹y_group
 {

30 
	m__FIO_OPT_G_RATE
 = 0,

31 
	m__FIO_OPT_G_ZONE
,

32 
	m__FIO_OPT_G_RWMIX
,

33 
	m__FIO_OPT_G_VERIFY
,

34 
	m__FIO_OPT_G_TRIM
,

35 
	m__FIO_OPT_G_IOLOG
,

36 
	m__FIO_OPT_G_IO_DEPTH
,

37 
	m__FIO_OPT_G_IO_FLOW
,

38 
	m__FIO_OPT_G_DESC
,

39 
	m__FIO_OPT_G_FILENAME
,

40 
	m__FIO_OPT_G_IO_BASIC
,

41 
	m__FIO_OPT_G_CGROUP
,

42 
	m__FIO_OPT_G_RUNTIME
,

43 
	m__FIO_OPT_G_PROCESS
,

44 
	m__FIO_OPT_G_CRED
,

45 
	m__FIO_OPT_G_CLOCK
,

46 
	m__FIO_OPT_G_IO_TYPE
,

47 
	m__FIO_OPT_G_THINKTIME
,

48 
	m__FIO_OPT_G_RANDOM
,

49 
	m__FIO_OPT_G_IO_BUF
,

50 
	m__FIO_OPT_G_TIOBENCH
,

51 
	m__FIO_OPT_G_ERR
,

52 
	m__FIO_OPT_G_E4DEFRAG
,

53 
	m__FIO_OPT_G_NETIO
,

54 
	m__FIO_OPT_G_RDMA
,

55 
	m__FIO_OPT_G_LIBAIO
,

56 
	m__FIO_OPT_G_ACT
,

57 
	m__FIO_OPT_G_LATPROF
,

58 
	m__FIO_OPT_G_RBD
,

59 
	m__FIO_OPT_G_GFAPI
,

60 
	m__FIO_OPT_G_MTD
,

61 
	m__FIO_OPT_G_HDFS
,

62 
	m__FIO_OPT_G_NR
,

64 
	mFIO_OPT_G_RATE
 = (1ULL << 
__FIO_OPT_G_RATE
),

65 
	mFIO_OPT_G_ZONE
 = (1ULL << 
__FIO_OPT_G_ZONE
),

66 
	mFIO_OPT_G_RWMIX
 = (1ULL << 
__FIO_OPT_G_RWMIX
),

67 
	mFIO_OPT_G_VERIFY
 = (1ULL << 
__FIO_OPT_G_VERIFY
),

68 
	mFIO_OPT_G_TRIM
 = (1ULL << 
__FIO_OPT_G_TRIM
),

69 
	mFIO_OPT_G_IOLOG
 = (1ULL << 
__FIO_OPT_G_IOLOG
),

70 
	mFIO_OPT_G_IO_DEPTH
 = (1ULL << 
__FIO_OPT_G_IO_DEPTH
),

71 
	mFIO_OPT_G_IO_FLOW
 = (1ULL << 
__FIO_OPT_G_IO_FLOW
),

72 
	mFIO_OPT_G_DESC
 = (1ULL << 
__FIO_OPT_G_DESC
),

73 
	mFIO_OPT_G_FILENAME
 = (1ULL << 
__FIO_OPT_G_FILENAME
),

74 
	mFIO_OPT_G_IO_BASIC
 = (1ULL << 
__FIO_OPT_G_IO_BASIC
),

75 
	mFIO_OPT_G_CGROUP
 = (1ULL << 
__FIO_OPT_G_CGROUP
),

76 
	mFIO_OPT_G_RUNTIME
 = (1ULL << 
__FIO_OPT_G_RUNTIME
),

77 
	mFIO_OPT_G_PROCESS
 = (1ULL << 
__FIO_OPT_G_PROCESS
),

78 
	mFIO_OPT_G_CRED
 = (1ULL << 
__FIO_OPT_G_CRED
),

79 
	mFIO_OPT_G_CLOCK
 = (1ULL << 
__FIO_OPT_G_CLOCK
),

80 
	mFIO_OPT_G_IO_TYPE
 = (1ULL << 
__FIO_OPT_G_IO_TYPE
),

81 
	mFIO_OPT_G_THINKTIME
 = (1ULL << 
__FIO_OPT_G_THINKTIME
),

82 
	mFIO_OPT_G_RANDOM
 = (1ULL << 
__FIO_OPT_G_RANDOM
),

83 
	mFIO_OPT_G_IO_BUF
 = (1ULL << 
__FIO_OPT_G_IO_BUF
),

84 
	mFIO_OPT_G_TIOBENCH
 = (1ULL << 
__FIO_OPT_G_TIOBENCH
),

85 
	mFIO_OPT_G_ERR
 = (1ULL << 
__FIO_OPT_G_ERR
),

86 
	mFIO_OPT_G_E4DEFRAG
 = (1ULL << 
__FIO_OPT_G_E4DEFRAG
),

87 
	mFIO_OPT_G_NETIO
 = (1ULL << 
__FIO_OPT_G_NETIO
),

88 
	mFIO_OPT_G_RDMA
 = (1ULL << 
__FIO_OPT_G_RDMA
),

89 
	mFIO_OPT_G_LIBAIO
 = (1ULL << 
__FIO_OPT_G_LIBAIO
),

90 
	mFIO_OPT_G_ACT
 = (1ULL << 
__FIO_OPT_G_ACT
),

91 
	mFIO_OPT_G_LATPROF
 = (1ULL << 
__FIO_OPT_G_LATPROF
),

92 
	mFIO_OPT_G_RBD
 = (1ULL << 
__FIO_OPT_G_RBD
),

93 
	mFIO_OPT_G_GFAPI
 = (1ULL << 
__FIO_OPT_G_GFAPI
),

94 
	mFIO_OPT_G_MTD
 = (1ULL << 
__FIO_OPT_G_MTD
),

95 
	mFIO_OPT_G_HDFS
 = (1ULL << 
__FIO_OPT_G_HDFS
),

96 
	mFIO_OPT_G_INVALID
 = (1ULL << 
__FIO_OPT_G_NR
),

99 c⁄° 
›t_group
 *
›t_group_‰om_mask
(
uöt64_t
 *
mask
);

100 c⁄° 
›t_group
 *
›t_group_ˇt_‰om_mask
(
uöt64_t
 *
mask
);

	@options.h

1 #i‚de‡
FIO_OPTION_H


2 
	#FIO_OPTION_H


	)

4 
	#FIO_MAX_OPTS
 512

	)

6 
	~<°rög.h
>

7 
	~<öây≥s.h
>

8 
	~"∑r£.h
"

9 
	~"Êi°.h
"

10 
	~"lib/ty≥s.h
"

12 
add_›ti⁄
(
fio_›ti⁄
 *);

13 
övÆid©e_¥ofûe_›ti⁄s
(const *);

14 *
exec_¥ofûe
;

16 
add_›t_posvÆ
(const *, const *, const *);

17 
dñ_›t_posvÆ
(const *, const *);

18 
	gthªad_d©a
;

19 
fio_›ti⁄s_‰ì
(
thªad_d©a
 *);

20 
£t_«me_idx
(*, 
size_t
, *, , 
boﬁ
);

22 
˛õ¡_sockaddr_°r
[];

24 
fio_›ti⁄
 
fio_›ti⁄s
[
FIO_MAX_OPTS
];

26 
boﬁ
 
__fio_›ti⁄_is_£t
(
thªad_›ti⁄s
 *, 
off
);

28 
	#fio_›ti⁄_is_£t
(
__td
, 
«me
) \

30 c⁄° 
off
 = 
	`off£tof
(
thªad_›ti⁄s
, 
«me
); \

31 
boﬁ
 
__r
 = 
	`__fio_›ti⁄_is_£t
((
__td
), 
off
); \

32 
__r
; \

33 })

	)

35 
fio_›ti⁄_m¨k_£t
(
thªad_›ti⁄s
 *, 
fio_›ti⁄
 *);

37 
ölöe
 
boﬁ
 
	$o_m©ch
(
fio_›ti⁄
 *
o
, c⁄° *
›t
)

39 i‡(!
	`°rcmp
(
o
->
«me
, 
›t
))

40  
åue
;

41 i‡(
o
->
Æüs
 && !
	`°rcmp
(o->Æüs, 
›t
))

42  
åue
;

44  
Ál£
;

45 
	}
}

47 
fio_›ti⁄
 *
föd_›ti⁄
(fio_option *, const *);

48 
fio_›ti⁄
 *
fio_›ti⁄_föd
(const *);

49 
fio_gë_kb_ba£
(*);

	@os/os.h

1 #i‚de‡
FIO_OS_H


2 
	#FIO_OS_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~<sys/sockë.h
>

6 
	~<f˙é.h
>

7 
	~<±hªad.h
>

8 
	~<uni°d.h
>

9 
	~<°dlib.h
>

11 
	~"../¨ch/¨ch.h
"

12 
	~"../lib/ty≥s.h
"

15 
	mos_löux
 = 1,

16 
	mos_aix
,

17 
	mos_‰ìbsd
,

18 
	mos_hpux
,

19 
	mos_mac
,

20 
	mos_√tbsd
,

21 
	mos_›íbsd
,

22 
	mos_sﬁ¨is
,

23 
	mos_wödows
,

24 
	mos_™droid
,

25 
	mos_døg⁄Êy
,

27 
	mos_ƒ
,

30 #i‡
deföed
(
__ANDROID__
)

31 
	~"os-™droid.h
"

32 #ñi‡
deföed
(
__löux__
)

33 
	~"os-löux.h
"

34 #ñi‡
deföed
(
__FªeBSD__
)

35 
	~"os-‰ìbsd.h
"

36 #ñi‡
deföed
(
__O≥nBSD__
)

37 
	~"os-›íbsd.h
"

38 #ñi‡
deföed
(
__NëBSD__
)

39 
	~"os-√tbsd.h
"

40 #ñi‡
deföed
(
__sun__
)

41 
	~"os-sﬁ¨is.h
"

42 #ñi‡
deföed
(
__APPLE__
)

43 
	~"os-mac.h
"

44 #ñi‡
deföed
(
_AIX
)

45 
	~"os-aix.h
"

46 #ñi‡
deföed
(
__hpux
)

47 
	~"os-hpux.h
"

48 #ñi‡
deföed
(
WIN32
)

49 
	~"os-wödows.h
"

50 #ñi‡
deföed
 (
__Døg⁄Fly__
)

51 
	~"os-døg⁄Êy.h
"

56 #ifde‡
CONFIG_POSIXAIO


57 
	~<aio.h
>

58 #i‚de‡
FIO_OS_HAVE_AIOCB_TYPEDEF


59 
aiocb
 
	tos_aiocb_t
;

63 #i‚de‡
CONFIG_STRSEP


64 
	~"../o¶ib/°r£p.h
"

67 #i‚de‡
CONFIG_STRLCAT


68 
	~"../o¶ib/°æˇt.h
"

71 #ifde‡
MSG_DONTWAIT


72 
	#OS_MSG_DONTWAIT
 
MSG_DONTWAIT


	)

75 #i‚de‡
POSIX_FADV_DONTNEED


76 
	#POSIX_FADV_DONTNEED
 (0)

	)

77 
	#POSIX_FADV_SEQUENTIAL
 (0)

	)

78 
	#POSIX_FADV_RANDOM
 (0)

	)

79 
	#POSIX_FADV_NORMAL
 (0)

	)

82 #i‚de‡
FIO_HAVE_CPU_AFFINITY


83 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ëdÿ{ } 0)

	)

84 
	tos_˝u_mask_t
;

86 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
)

89 
	}
}

91 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
˝umask
)

94 
	}
}

96 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

99 
	}
}

101 
ölöe
 
	$fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u_ödex
)

104 
	}
}

106 
fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u
);

109 #i‚de‡
FIO_HAVE_IOPRIO


110 
	#i›rio_£t
(
which
, 
who
, 
¥io˛ass
, 
¥io
Ë(0)

	)

113 #i‚de‡
FIO_HAVE_ODIRECT


114 
	#OS_O_DIRECT
 0

	)

116 
	#OS_O_DIRECT
 
O_DIRECT


	)

119 #ifde‡
OS_O_ATOMIC


120 
	#FIO_O_ATOMIC
 
OS_O_ATOMIC


	)

122 
	#FIO_O_ATOMIC
 0

	)

125 #i‚de‡
FIO_HAVE_HUGETLB


126 
	#SHM_HUGETLB
 0

	)

127 
	#MAP_HUGETLB
 0

	)

128 #i‚de‡
FIO_HUGE_PAGE


129 
	#FIO_HUGE_PAGE
 0

	)

132 #i‚de‡
FIO_HUGE_PAGE


133 
	#FIO_HUGE_PAGE
 4194304

	)

137 #i‚de‡
FIO_HAVE_MMAP_HUGE


138 
	#MAP_HUGETLB
 0

	)

141 #i‚de‡
FIO_O_NOATIME


142 
	#FIO_O_NOATIME
 0

	)

145 #i‚de‡
OS_RAND_MAX


146 
	#OS_RAND_MAX
 
RAND_MAX


	)

149 #i‚de‡
FIO_HAVE_RAWBIND


150 
	#fio_lookup_øw
(
dev
, 
majdev
, 
mödev
Ë1

	)

153 #i‚de‡
FIO_PREFERRED_ENGINE


154 
	#FIO_PREFERRED_ENGINE
 "psync"

	)

157 #i‚de‡
FIO_OS_PATH_SEPARATOR


158 
	#FIO_OS_PATH_SEPARATOR
 '/'

	)

161 #i‚de‡
FIO_PREFERRED_CLOCK_SOURCE


162 #ifde‡
CONFIG_CLOCK_GETTIME


163 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_CGETTIME


	)

165 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_GTOD


	)

169 #i‚de‡
FIO_MAX_JOBS


170 
	#FIO_MAX_JOBS
 4096

	)

173 #i‚de‡
CONFIG_SOCKLEN_T


174 
	tsockÀn_t
;

177 #i‚de‡
FIO_OS_HAS_CTIME_R


178 
	#os_˘ime_r
(
x
, 
y
, 
z
Ë(Ë
	`˘ime_r
((x), (y))

	)

181 #ifde‡
FIO_USE_GENERIC_SWAP


182 
ölöe
 
uöt16_t
 
	$fio_sw≠16
(
uöt16_t
 
vÆ
)

184  (
vÆ
 << 8) | (val >> 8);

185 
	}
}

187 
ölöe
 
uöt32_t
 
	$fio_sw≠32
(
uöt32_t
 
vÆ
)

189 
vÆ
 = ((val & 0xff00ff00UL) >> 8) | ((val & 0x00ff00ffUL) << 8);

191  (
vÆ
 >> 16) | (val << 16);

192 
	}
}

194 
ölöe
 
uöt64_t
 
	$fio_sw≠64
(
uöt64_t
 
vÆ
)

196 
vÆ
 = ((val & 0xff00ff00ff00ff00ULL) >> 8) |

197 ((
vÆ
 & 0x00ff00ff00ff00ffULL) << 8);

198 
vÆ
 = ((val & 0xffff0000ffff0000ULL) >> 16) |

199 ((
vÆ
 & 0x0000ffff0000ffffULL) << 16);

201  (
vÆ
 >> 32) | (val << 32);

202 
	}
}

205 #i‚de‡
FIO_HAVE_BYTEORDER_FUNCS


206 #ifde‡
CONFIG_LITTLE_ENDIAN


207 
	#__be64_to_˝u
(
x
Ë
	`fio_sw≠64
(x)

	)

208 
	#__À16_to_˝u
(
x
Ë(x)

	)

209 
	#__À32_to_˝u
(
x
Ë(x)

	)

210 
	#__À64_to_˝u
(
x
Ë(x)

	)

211 
	#__˝u_to_be64
(
x
Ë
	`fio_sw≠64
(x)

	)

212 
	#__˝u_to_À16
(
x
Ë(x)

	)

213 
	#__˝u_to_À32
(
x
Ë(x)

	)

214 
	#__˝u_to_À64
(
x
Ë(x)

	)

216 
	#__be64_to_˝u
(
x
Ë(x)

	)

217 
	#__À16_to_˝u
(
x
Ë
	`fio_sw≠16
(x)

	)

218 
	#__À32_to_˝u
(
x
Ë
	`fio_sw≠32
(x)

	)

219 
	#__À64_to_˝u
(
x
Ë
	`fio_sw≠64
(x)

	)

220 
	#__˝u_to_be64
(
x
Ë(x)

	)

221 
	#__˝u_to_À16
(
x
Ë
	`fio_sw≠16
(x)

	)

222 
	#__˝u_to_À32
(
x
Ë
	`fio_sw≠32
(x)

	)

223 
	#__˝u_to_À64
(
x
Ë
	`fio_sw≠64
(x)

	)

227 #ifde‡
FIO_INTERNAL


228 
	#be64_to_˝u
(
vÆ
) ({ \

229 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

230 
	`__be64_to_˝u
(
vÆ
); \

231 })

	)

232 
	#À16_to_˝u
(
vÆ
) ({ \

233 
	`ty≥check
(
uöt16_t
, 
vÆ
); \

234 
	`__À16_to_˝u
(
vÆ
); \

235 })

	)

236 
	#À32_to_˝u
(
vÆ
) ({ \

237 
	`ty≥check
(
uöt32_t
, 
vÆ
); \

238 
	`__À32_to_˝u
(
vÆ
); \

239 })

	)

240 
	#À64_to_˝u
(
vÆ
) ({ \

241 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

242 
	`__À64_to_˝u
(
vÆ
); \

243 })

	)

246 
	#˝u_to_be64
(
vÆ
) ({ \

247 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

248 
	`__˝u_to_be64
(
vÆ
); \

249 })

	)

250 
	#˝u_to_À16
(
vÆ
) ({ \

251 
	`ty≥check
(
uöt16_t
, 
vÆ
); \

252 
	`__˝u_to_À16
(
vÆ
); \

253 })

	)

254 
	#˝u_to_À32
(
vÆ
) ({ \

255 
	`ty≥check
(
uöt32_t
, 
vÆ
); \

256 
	`__˝u_to_À32
(
vÆ
); \

257 })

	)

258 
	#˝u_to_À64
(
vÆ
) ({ \

259 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

260 
	`__˝u_to_À64
(
vÆ
); \

261 })

	)

263 
	#FIO_DEF_CL_SIZE
 128

	)

265 
ölöe
 
	$os_ˇche_löe_size
()

267 #ifde‡
FIO_HAVE_CL_SIZE


268 
ªt
 = 
	`¨ch_ˇche_löe_size
();

270 i‡(
ªt
 <= 0)

271  
FIO_DEF_CL_SIZE
;

273  
ªt
;

275  
FIO_DEF_CL_SIZE
;

277 
	}
}

279 #ifde‡
FIO_USE_GENERIC_BDEV_SIZE


280 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

282 
off_t
 
íd
;

284 *
byãs
 = 0;

286 
íd
 = 
	`l£ek
(
f
->
fd
, 0, 
SEEK_END
);

287 i‡(
íd
 < 0)

288  
î∫o
;

290 *
byãs
 = 
íd
;

292 
	}
}

295 #ifde‡
FIO_USE_GENERIC_RAND


296 
	tos_øndom_°©e_t
;

298 
ölöe
 
	$os_øndom_£ed
(
£ed
, 
os_øndom_°©e_t
 *
rs
)

300 
	`§™d
(
£ed
);

301 
	}
}

303 
ölöe
 
	$os_øndom_l⁄g
(
os_øndom_°©e_t
 *
rs
)

305 
vÆ
;

307 
vÆ
 = 
	`ønd_r
(
rs
);

308  
vÆ
;

309 
	}
}

312 #ifde‡
FIO_USE_GENERIC_INIT_RANDOM_STATE


313 
ölöe
 
	$öô_øndom_£eds
(*
ønd_£eds
, 
size
)

315 
fd
;

317 
fd
 = 
	`›í
("/dev/uøndom", 
O_RDONLY
);

318 i‡(
fd
 == -1) {

322 i‡(
	`ªad
(
fd
, 
ønd_£eds
, 
size
) < size) {

323 
	`˛o£
(
fd
);

327 
	`˛o£
(
fd
);

329 
	}
}

332 #i‚de‡
FIO_HAVE_FS_STAT


333 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

336 
	}
}

339 #i‚de‡
FIO_HAVE_CPU_ONLINE_SYSCONF


340 
ölöe
 
	$˝us_⁄löe
()

342  
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

343 
	}
}

346 #i‚de‡
CPU_COUNT


347 #ifde‡
FIO_HAVE_CPU_AFFINITY


348 
ölöe
 
	$CPU_COUNT
(
os_˝u_mask_t
 *
mask
)

350 
max_˝us
 = 
	`˝us_⁄löe
();

351 
ƒ_˝us
, 
i
;

353 
i
 = 0, 
ƒ_˝us
 = 0; i < 
max_˝us
; i++)

354 i‡(
	`fio_˝u_is£t
(
mask
, 
i
))

355 
ƒ_˝us
++;

357  
ƒ_˝us
;

358 
	}
}

362 #i‚de‡
FIO_HAVE_GETTID


363 
ölöe
 
	$gëtid
()

365  
	`gëpid
();

366 
	}
}

369 #i‚de‡
FIO_HAVE_SHM_ATTACH_REMOVED


370 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

373 
	}
}

376 #i‚de‡
FIO_HAVE_NATIVE_FALLOCATE


377 
ölöe
 
boﬁ
 
	$fio_ÁŒoˇã
(
fio_fûe
 *
f
, 
uöt64_t
 
off£t
, uöt64_à
Àn
)

379 
î∫o
 = 
ENOSYS
;

380  
Ál£
;

381 
	}
}

384 #i‡
deföed
(
CONFIG_POSIX_FALLOCATE
Ë|| deföed(
FIO_HAVE_NATIVE_FALLOCATE
)

385 
	#FIO_HAVE_ANY_FALLOCATE


	)

	@oslib/getopt.h

1 #ifde‡
CONFIG_GETOPT_LONG_ONLY


3 
	~<gë›t.h
>

7 #i‚de‡
_GETOPT_H


8 
	#_GETOPT_H


	)

10 
	s›ti⁄
 {

11 c⁄° *
	m«me
;

12 
	mhas_¨g
;

13 *
	mÊag
;

14 
	mvÆ
;

18 
	mno_¨gumít
 = 0,

19 
	mªquúed_¨gumít
 = 1,

20 
	m›ti⁄Æ_¨gumít
 = 2,

23 
gë›t_l⁄g_⁄ly
(, *c⁄° *, c⁄° *, c⁄° 
›ti⁄
 *, *);

	@oslib/linux-dev-lookup.h

1 #i‚de‡
LINUX_DEV_LOOKUP


2 
	#LINUX_DEV_LOOKUP


	)

4 
blkåa˚_lookup_devi˚
(c⁄° *
ªdúe˘
, *
∑th
, 
maj
,

5 
mö
);

	@oslib/strcasestr.h

1 #ifde‡
CONFIG_STRCASESTR


3 
	~<°rög.h
>

7 #i‚de‡
FIO_STRCASESTR_H


8 
	#FIO_STRCASESTR_H


	)

10 *
°rˇ£°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

	@parse.h

1 #i‚de‡
FIO_PARSE_H


2 
	#FIO_PARSE_H


	)

4 
	~<öây≥s.h
>

5 
	~"Êi°.h
"

10 
	efio_›t_ty≥
 {

11 
	mFIO_OPT_INVALID
 = 0,

12 
	mFIO_OPT_STR
,

13 
	mFIO_OPT_STR_MULTI
,

14 
	mFIO_OPT_STR_VAL
,

15 
	mFIO_OPT_STR_VAL_TIME
,

16 
	mFIO_OPT_STR_STORE
,

17 
	mFIO_OPT_RANGE
,

18 
	mFIO_OPT_INT
,

19 
	mFIO_OPT_BOOL
,

20 
	mFIO_OPT_FLOAT_LIST
,

21 
	mFIO_OPT_STR_SET
,

22 
	mFIO_OPT_DEPRECATED
,

23 
	mFIO_OPT_UNSUPPORTED
,

29 
	svÆue_∑ú
 {

30 c⁄° *
	mivÆ
;

31 
	movÆ
;

32 c⁄° *
	mhñp
;

33 
	m‹vÆ
;

34 *
	mcb
;

37 
	#OPT_LEN_MAX
 4096

	)

38 
	#PARSE_MAX_VP
 24

	)

43 
	sfio_›ti⁄
 {

44 c⁄° *
	m«me
;

45 c⁄° *
	m ame
;

46 c⁄° *
	mÆüs
;

47 
fio_›t_ty≥
 
	mty≥
;

48 
	moff1
;

49 
	moff2
;

50 
	moff3
;

51 
	moff4
;

52 
	moff5
;

53 
	moff6
;

54 
	mmaxvÆ
;

55 
	mmövÆ
;

56 
	mmaxÂ
;

57 
	mmöÂ
;

58 
	möãrvÆ
;

59 
	mmaxÀn
;

60 
	m√g
;

61 
	m¥io
;

62 *
	mcb
;

63 c⁄° *
	mhñp
;

64 c⁄° *
	mdef
;

65 
vÆue_∑ú
 
	mposvÆ
[
PARSE_MAX_VP
];

66 c⁄° *
	m∑ª¡
;

67 
	mhide
;

68 
	mhide_⁄_£t
;

69 c⁄° *
	mövî£
;

70 
fio_›ti⁄
 *
	möv_›t
;

71 (*
	mvîify
)(
	mfio_›ti⁄
 *, *);

72 c⁄° *
	m¥of_«me
;

73 *
	m¥of_›ts
;

74 
uöt64_t
 
	mˇãg‹y
;

75 
uöt64_t
 
	mgroup
;

76 *
	mgui_d©a
;

77 
	mis_£c⁄ds
;

78 
	mis_time
;

79 
	mno_w¨n_def
;

80 
	mpow2
;

81 
	mno_‰ì
;

84 
∑r£_›ti⁄
(*, c⁄° *, 
fio_›ti⁄
 *, fio_›ti⁄ **, *, 
Êi°_hód
 *);

85 
s‹t_›ti⁄s
(**, 
fio_›ti⁄
 *, );

86 
∑r£_cmd_›ti⁄
(c⁄° *
t
, c⁄° *
l
, 
fio_›ti⁄
 *, *, 
Êi°_hód
 *);

87 
show_cmd_hñp
(
fio_›ti⁄
 *, const *);

88 
fûl_deÁu…_›ti⁄s
(*, 
fio_›ti⁄
 *);

89 
›ti⁄s_öô
(
fio_›ti⁄
 *);

90 
›ti⁄s_mem_du≥
(
fio_›ti⁄
 *, *);

91 
›ti⁄s_‰ì
(
fio_›ti⁄
 *, *);

93 
°rù_bœnk_‰⁄t
(**);

94 
°rù_bœnk_íd
(*);

95 
°r_to_decimÆ
(const *, *, , *, , );

96 
check_°r_byãs
(c⁄° *
p
, *
vÆ
, *
d©a
);

97 
check_°r_time
(c⁄° *
p
, *
vÆ
, );

98 
°r_to_Êﬂt
(c⁄° *
°r
, *
vÆ
, 
is_time
);

100 
°rög_di°™˚
(c⁄° *
s1
, c⁄° *
s2
);

101 
°rög_di°™˚_ok
(c⁄° *
s1
, 
di°
);

106 (
	tfio_›t_°r_‚
)(*, const *);

107 (
	tfio_›t_°r_vÆ_‚
)(*, *);

108 (
	tfio_›t_öt_‚
)(*, *);

110 
thªad_›ti⁄s
;

111 
ölöe
 *
	$td_v¨
(*
to
, 
fio_›ti⁄
 *
o
, 
off£t
)

113 *
ªt
;

115 i‡(
o
->
¥of_›ts
)

116 
ªt
 = 
o
->
¥of_›ts
;

118 
ªt
 = 
to
;

120  (*Ë
ªt
 + 
off£t
;

121 
	}
}

123 
ölöe
 
	$∑r£_is_≥r˚¡
(
vÆ
)

125  
vÆ
 <= -1ULL && val >= (-1ULL - 100ULL);

126 
	}
}

128 
	s¥öt_›ti⁄
 {

129 
Êi°_hód
 
	mli°
;

130 *
	m«me
;

131 *
	mvÆue
;

	@printing.h

1 #i‚de‡
PRINTING_H


2 
	#PRINTING_H


	)

4 
gfio_¥öt_ªsu…s
(
gui_íåy
 *
ge
);

	@profile.h

1 #i‚de‡
FIO_PROFILE_H


2 
	#FIO_PROFILE_H


	)

4 
	~"Êi°.h
"

9 
	s¥of_io_›s
 {

10 (*
	mtd_öô
)(
	mthªad_d©a
 *);

11 (*
	mtd_exô
)(
	mthªad_d©a
 *);

13 (*
	mio_u_œt
)(
	mthªad_d©a
 *, 
	muöt64_t
);

16 
	s¥ofûe_›s
 {

17 
Êi°_hód
 
	mli°
;

18 
	m«me
[32];

19 
	mdesc
[64];

20 
	mÊags
;

25 
fio_›ti⁄
 *
	m›ti⁄s
;

26 *
	m›t_d©a
;

31 (*
	m¥ï_cmd
)();

36 c⁄° **
	mcmdlöe
;

38 
¥of_io_›s
 *
	mio_›s
;

41 
ªgi°î_¥ofûe
(
¥ofûe_›s
 *);

42 
uƒegi°î_¥ofûe
(
¥ofûe_›s
 *);

43 
lﬂd_¥ofûe
(const *);

44 
¥ofûe_›s
 *
föd_¥ofûe
(const *);

45 
¥ofûe_add_hooks
(
thªad_d©a
 *);

47 
¥ofûe_td_öô
(
thªad_d©a
 *);

48 
¥ofûe_td_exô
(
thªad_d©a
 *);

	@rate-submit.h

1 #i‚de‡
FIO_RATE_SUBMIT


2 
	#FIO_RATE_SUBMIT


	)

4 
øã_submô_öô
(
thªad_d©a
 *, 
sk_out
 *);

5 
øã_submô_exô
(
thªad_d©a
 *);

	@server.h

1 #i‚de‡
FIO_SERVER_H


2 
	#FIO_SERVER_H


	)

4 
	~<öây≥s.h
>

5 
	~<°rög.h
>

6 
	~<sys/time.h
>

7 
	~<√töë/ö.h
>

9 
	~"°©.h
"

10 
	~"os/os.h
"

11 
	~"diskutû.h
"

13 
	#FIO_NET_PORT
 8765

	)

15 
	ssk_out
 {

16 
	mªfs
;

19 
	msk
;

20 
fio_muãx
 
	mlock
;

21 
Êi°_hód
 
	mli°
;

22 
fio_muãx
 
	mwaô
;

23 
fio_muãx
 
	mxmô
;

29 
	sfio_√t_cmd
 {

30 
uöt16_t
 
	mvîsi⁄
;

31 
uöt16_t
 
	m›code
;

32 
uöt32_t
 
	mÊags
;

33 
uöt64_t
 
	mèg
;

34 
uöt32_t
 
	mpdu_Àn
;

39 
uöt16_t
 
	mcmd_¸c16
;

40 
uöt16_t
 
	mpdu_¸c16
;

41 
uöt8_t
 
	m∑ylﬂd
[];

44 
	sfio_√t_cmd_ª∂y
 {

45 
Êi°_hód
 
	mli°
;

46 
time•ec
 
	mts
;

47 
uöt64_t
 
	mßved_èg
;

48 
uöt16_t
 
	m›code
;

52 
	mFIO_SERVER_VER
 = 71,

54 
	mFIO_SERVER_MAX_FRAGMENT_PDU
 = 1024,

55 
	mFIO_SERVER_MAX_CMD_MB
 = 2048,

57 
	mFIO_NET_CMD_QUIT
 = 1,

58 
	mFIO_NET_CMD_EXIT
 = 2,

59 
	mFIO_NET_CMD_JOB
 = 3,

60 
	mFIO_NET_CMD_JOBLINE
 = 4,

61 
	mFIO_NET_CMD_TEXT
 = 5,

62 
	mFIO_NET_CMD_TS
 = 6,

63 
	mFIO_NET_CMD_GS
 = 7,

64 
	mFIO_NET_CMD_SEND_ETA
 = 8,

65 
	mFIO_NET_CMD_ETA
 = 9,

66 
	mFIO_NET_CMD_PROBE
 = 10,

67 
	mFIO_NET_CMD_START
 = 11,

68 
	mFIO_NET_CMD_STOP
 = 12,

69 
	mFIO_NET_CMD_DU
 = 13,

70 
	mFIO_NET_CMD_SERVER_START
 = 14,

71 
	mFIO_NET_CMD_ADD_JOB
 = 15,

72 
	mFIO_NET_CMD_RUN
 = 16,

73 
	mFIO_NET_CMD_IOLOG
 = 17,

74 
	mFIO_NET_CMD_UPDATE_JOB
 = 18,

75 
	mFIO_NET_CMD_LOAD_FILE
 = 19,

76 
	mFIO_NET_CMD_VTRIGGER
 = 20,

77 
	mFIO_NET_CMD_SENDFILE
 = 21,

78 
	mFIO_NET_CMD_JOB_OPT
 = 22,

79 
	mFIO_NET_CMD_NR
 = 23,

81 
	mFIO_NET_CMD_F_MORE
 = 1UL << 0,

84 
	mFIO_NET_CMD_CRC_SZ
 = (
fio_√t_cmd
) -

85 2 * (
uöt16_t
),

87 
	mFIO_NET_NAME_MAX
 = 256,

89 
	mFIO_NET_CLIENT_TIMEOUT
 = 5000,

91 
	mFIO_PROBE_FLAG_ZLIB
 = 1UL << 0,

94 
	scmd_£ndfûe
 {

95 
uöt8_t
 
	m∑th
[
FIO_NET_NAME_MAX
];

98 
	scmd_£ndfûe_ª∂y
 {

99 
uöt32_t
 
	msize
;

100 
uöt32_t
 
	mîr‹
;

101 
uöt8_t
 
	md©a
[0];

108 
	scmd_våiggî_pdu
 {

109 
uöt16_t
 
	mÀn
;

110 
uöt8_t
 
	mcmd
[];

113 
	scmd_lﬂd_fûe_pdu
 {

114 
uöt16_t
 
	m«me_Àn
;

115 
uöt16_t
 
	m˛õ¡_ty≥
;

116 
uöt8_t
 
	mfûe
[];

119 
	scmd_ts_pdu
 {

120 
thªad_°©
 
	mts
;

121 
group_run_°©s
 
	mrs
;

124 
	scmd_du_pdu
 {

125 
disk_utû_°©
 
	mdus
;

126 
disk_utû_agg
 
	magg
;

129 
	scmd_˛õ¡_¥obe_pdu
 {

130 
uöt64_t
 
	mÊags
;

131 
uöt8_t
 
	m£rvî
[128];

134 
	scmd_¥obe_ª∂y_pdu
 {

135 
uöt8_t
 
	mho°«me
[64];

136 
uöt8_t
 
	mbigídün
;

137 
uöt8_t
 
	mfio_vîsi⁄
[32];

138 
uöt8_t
 
	mos
;

139 
uöt8_t
 
	m¨ch
;

140 
uöt8_t
 
	mbµ
;

141 
uöt32_t
 
	m˝us
;

142 
uöt64_t
 
	mÊags
;

145 
	scmd_sögÀ_löe_pdu
 {

146 
uöt16_t
 
	mÀn
;

147 
uöt8_t
 
	mãxt
[];

150 
	scmd_löe_pdu
 {

151 
uöt16_t
 
	mlöes
;

152 
uöt16_t
 
	m˛õ¡_ty≥
;

153 
cmd_sögÀ_löe_pdu
 
	m›ti⁄s
[];

156 
	scmd_job_pdu
 {

157 
uöt32_t
 
	mbuf_Àn
;

158 
uöt32_t
 
	m˛õ¡_ty≥
;

159 
uöt8_t
 
	mbuf
[0];

162 
	scmd_°¨t_pdu
 {

163 
uöt32_t
 
	mjobs
;

164 
uöt32_t
 
	m°©_ouçuts
;

167 
	scmd_íd_pdu
 {

168 
uöt32_t
 
	mîr‹
;

169 
uöt32_t
 
	msig«l
;

172 
	scmd_add_job_pdu
 {

173 
uöt32_t
 
	mthªad_numbî
;

174 
uöt32_t
 
	mgroupid
;

175 
thªad_›ti⁄s_∑ck
 
	mt›
;

178 
	scmd_ãxt_pdu
 {

179 
uöt32_t
 
	mÀvñ
;

180 
uöt32_t
 
	mbuf_Àn
;

181 
uöt64_t
 
	mlog_£c
;

182 
uöt64_t
 
	mlog_u£c
;

183 
uöt8_t
 
	mbuf
[0];

187 
	mXMIT_COMPRESSED
 = 1U,

188 
	mSTORE_COMPRESSED
 = 2U,

191 
	scmd_iﬁog_pdu
 {

192 
uöt64_t
 
	mƒ_ßm∂es
;

193 
uöt32_t
 
	mthªad_numbî
;

194 
uöt32_t
 
	mlog_ty≥
;

195 
uöt32_t
 
	mcom¥es£d
;

196 
uöt32_t
 
	mlog_off£t
;

197 
uöt32_t
 
	mlog_hi°_cﬂr£√ss
;

198 
uöt8_t
 
	m«me
[
FIO_NET_NAME_MAX
];

199 
io_ßm∂e
 
	mßm∂es
[0];

202 
	scmd_job_›ti⁄
 {

203 
uöt16_t
 
	mglobÆ
;

204 
uöt16_t
 
	måunˇãd
;

205 
uöt32_t
 
	mgroupid
;

206 
uöt8_t
 
	m«me
[64];

207 
uöt8_t
 
	mvÆue
[128];

210 
fio_°¨t_£rvî
(*);

211 
fio_£rvî_ãxt_ouçut
(, c⁄° *, 
size_t
);

212 
fio_√t_£nd_cmd
(, 
uöt16_t
, c⁄° *, 
off_t
, 
uöt64_t
 *, 
Êi°_hód
 *);

213 
fio_√t_£nd_sim∂e_cmd
(, 
uöt16_t
, 
uöt64_t
, 
Êi°_hód
 *);

214 
fio_£rvî_£t_¨g
(const *);

215 
fio_£rvî_∑r£_°rög
(c⁄° *, **, 
boﬁ
 *, *, 
ö_addr
 *, 
ö6_addr
 *, *);

216 
fio_£rvî_∑r£_ho°
(c⁄° *, , 
ö_addr
 *, 
ö6_addr
 *);

217 c⁄° *
fio_£rvî_›
();

218 
fio_£rvî_gŸ_sig«l
();

220 
	gthªad_°©
;

221 
	ggroup_run_°©s
;

222 
fio_£rvî_£nd_ts
(
thªad_°©
 *, 
group_run_°©s
 *);

223 
fio_£rvî_£nd_gs
(
group_run_°©s
 *);

224 
fio_£rvî_£nd_du
();

225 
fio_£rvî_£nd_job_›ti⁄s
(
Êi°_hód
 *, );

226 
fio_£rvî_gë_vîify_°©e
(const *, , **);

228 
fio_√t_cmd
 *
fio_√t_ªcv_cmd
(
sk
, 
boﬁ
 
waô
);

230 
fio_£nd_iﬁog
(
thªad_d©a
 *, 
io_log
 *, const *);

231 
fio_£rvî_£nd_add_job
(
thªad_d©a
 *);

232 
fio_£rvî_£nd_°¨t
(
thªad_d©a
 *);

233 
fio_√t_£nd_quô
(
sk
);

235 
fio_£rvî_¸óã_sk_key
();

236 
fio_£rvî_de°roy_sk_key
();

238 
exô_backíd
;

239 
fio_√t_p‹t
;

	@smalloc.h

1 #i‚de‡
FIO_SMALLOC_H


2 
	#FIO_SMALLOC_H


	)

4 *
smÆloc
(
size_t
);

5 *
sˇŒoc
(
size_t
, size_t);

6 
s‰ì
(*);

7 *
smÆloc_°rdup
(const *);

8 
söô
();

9 
s˛ónup
();

11 
smÆloc_poﬁ_size
;

	@stat.h

1 #i‚de‡
FIO_STAT_H


2 
	#FIO_STAT_H


	)

4 
	~"iﬁog.h
"

5 
	~"lib/ouçut_buf„r.h
"

7 
	sgroup_run_°©s
 {

8 
uöt64_t
 
	mmax_run
[
DDIR_RWDIR_CNT
], 
	mmö_run
[DDIR_RWDIR_CNT];

9 
uöt64_t
 
	mmax_bw
[
DDIR_RWDIR_CNT
], 
	mmö_bw
[DDIR_RWDIR_CNT];

10 
uöt64_t
 
	miobyãs
[
DDIR_RWDIR_CNT
];

11 
uöt64_t
 
	magg
[
DDIR_RWDIR_CNT
];

12 
uöt32_t
 
	mkb_ba£
;

13 
uöt32_t
 
	munô_ba£
;

14 
uöt32_t
 
	msig_figs
;

15 
uöt32_t
 
	mgroupid
;

16 
uöt32_t
 
	munifõd_rw_ªp
;

17 } 
__©åibuã__
((
∑cked
));

22 
	#FIO_IO_U_MAP_NR
 7

	)

23 
	#FIO_IO_U_LAT_N_NR
 10

	)

24 
	#FIO_IO_U_LAT_U_NR
 10

	)

25 
	#FIO_IO_U_LAT_M_NR
 12

	)

30 
	#FIO_IO_U_PLAT_BITS
 6

	)

31 
	#FIO_IO_U_PLAT_VAL
 (1 << 
FIO_IO_U_PLAT_BITS
)

	)

32 
	#FIO_IO_U_PLAT_GROUP_NR
 29

	)

33 
	#FIO_IO_U_PLAT_NR
 (
FIO_IO_U_PLAT_GROUP_NR
 * 
FIO_IO_U_PLAT_VAL
)

	)

34 
	#FIO_IO_U_LIST_MAX_LEN
 20

	)

124 
	#MAX_NR_BLOCK_INFOS
 8192

	)

125 
	#BLOCK_INFO_STATE_SHIFT
 29

	)

126 
	#BLOCK_INFO_TRIMS
(
block_öfo
) \

127 ((
block_öfo
Ë& ((1 << 
BLOCK_INFO_STATE_SHIFT
Ë- 1))

	)

128 
	#BLOCK_INFO_STATE
(
block_öfo
) \

129 ((
block_öfo
Ë>> 
BLOCK_INFO_STATE_SHIFT
)

	)

130 
	#BLOCK_INFO
(
°©e
, 
åim_cy˛es
) \

131 ((
åim_cy˛es
Ë| ((Ë(
°©e
Ë<< 
BLOCK_INFO_STATE_SHIFT
))

	)

132 
	#BLOCK_INFO_SET_STATE
(
block_öfo
, 
°©e
) \

133 
	`BLOCK_INFO
(
°©e
, 
	`BLOCK_INFO_TRIMS
(
block_öfo
))

	)

134 
	eblock_öfo_°©e
 {

135 
	mBLOCK_STATE_UNINIT
,

136 
	mBLOCK_STATE_TRIMMED
,

137 
	mBLOCK_STATE_WRITTEN
,

138 
	mBLOCK_STATE_TRIM_FAILURE
,

139 
	mBLOCK_STATE_WRITE_FAILURE
,

140 
	mBLOCK_STATE_COUNT
,

143 
	#MAX_PATTERN_SIZE
 512

	)

144 
	#FIO_JOBNAME_SIZE
 128

	)

145 
	#FIO_JOBDESC_SIZE
 256

	)

146 
	#FIO_VERROR_SIZE
 128

	)

148 
	sthªad_°©
 {

149 
	m«me
[
FIO_JOBNAME_SIZE
];

150 
	mvîr‹
[
FIO_VERROR_SIZE
];

151 
uöt32_t
 
	mîr‹
;

152 
uöt32_t
 
	mthªad_numbî
;

153 
uöt32_t
 
	mgroupid
;

154 
uöt32_t
 
	mpid
;

155 
	mdes¸ùti⁄
[
FIO_JOBDESC_SIZE
];

156 
uöt32_t
 
	mmembîs
;

157 
uöt32_t
 
	munifõd_rw_ªp
;

162 
io_°©
 
sync_°©
 
__©åibuã__
((
Æig√d
(8)));

163 
io_°©
 
	m˛©_°©
[
DDIR_RWDIR_CNT
];

164 
io_°©
 
	m¶©_°©
[
DDIR_RWDIR_CNT
];

165 
io_°©
 
	mœt_°©
[
DDIR_RWDIR_CNT
];

166 
io_°©
 
	mbw_°©
[
DDIR_RWDIR_CNT
];

167 
io_°©
 
	mi›s_°©
[
DDIR_RWDIR_CNT
];

172 
uöt64_t
 
	mu§_time
;

173 
uöt64_t
 
	msys_time
;

174 
uöt64_t
 
	m˘x
;

175 
uöt64_t
 
	mmöf
, 
	mmajf
;

180 
uöt32_t
 
	m˛©_≥r˚¡ûes
;

181 
uöt32_t
 
	mœt_≥r˚¡ûes
;

182 
uöt64_t
 
	m≥r˚¡ûe_¥ecisi⁄
;

183 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

185 
uöt64_t
 
	mio_u_m≠
[
FIO_IO_U_MAP_NR
];

186 
uöt64_t
 
	mio_u_submô
[
FIO_IO_U_MAP_NR
];

187 
uöt64_t
 
	mio_u_com∂ëe
[
FIO_IO_U_MAP_NR
];

188 
uöt64_t
 
	mio_u_œt_n
[
FIO_IO_U_LAT_N_NR
];

189 
uöt64_t
 
	mio_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

190 
uöt64_t
 
	mio_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

191 
uöt64_t
 
	mio_u_∂©
[
DDIR_RWDIR_CNT
][
FIO_IO_U_PLAT_NR
];

192 
uöt64_t
 
	mio_u_sync_∂©
[
FIO_IO_U_PLAT_NR
];

194 
uöt64_t
 
	mtŸÆ_io_u
[
DDIR_RWDIR_SYNC_CNT
];

195 
uöt64_t
 
	msh‹t_io_u
[
DDIR_RWDIR_CNT
];

196 
uöt64_t
 
	mdr›_io_u
[
DDIR_RWDIR_CNT
];

197 
uöt64_t
 
	mtŸÆ_submô
;

198 
uöt64_t
 
	mtŸÆ_com∂ëe
;

200 
uöt64_t
 
	mio_byãs
[
DDIR_RWDIR_CNT
];

201 
uöt64_t
 
	mru¡ime
[
DDIR_RWDIR_CNT
];

202 
uöt64_t
 
	mtŸÆ_run_time
;

208 
uöt16_t
 
	mc⁄töue_⁄_îr‹
;

209 
uöt32_t
 
	m∑d2
;

211 
uöt32_t
 
	mfú°_îr‹
;

212 
uöt64_t
 
	mtŸÆ_îr_cou¡
;

214 
uöt64_t
 
	mƒ_block_öfos
;

215 
uöt32_t
 
	mblock_öfos
[
MAX_NR_BLOCK_INFOS
];

217 
uöt32_t
 
	mkb_ba£
;

218 
uöt32_t
 
	munô_ba£
;

220 
uöt32_t
 
	mœãncy_dïth
;

221 
uöt32_t
 
	m∑d3
;

222 
uöt64_t
 
	mœãncy_èrgë
;

223 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

224 
uöt64_t
 
	mœãncy_wödow
;

226 
uöt32_t
 
	msig_figs
;

228 
uöt64_t
 
	mss_dur
;

229 
uöt32_t
 
	mss_°©e
;

230 
uöt32_t
 
	mss_hód
;

232 
fio_Â64_t
 
	mss_limô
;

233 
fio_Â64_t
 
	mss_¶›e
;

234 
fio_Â64_t
 
	mss_devüti⁄
;

235 
fio_Â64_t
 
	mss_¸ôîi⁄
;

238 
uöt64_t
 *
	mss_i›s_d©a
;

239 
uöt64_t
 
	m∑d4
;

243 
uöt64_t
 *
	mss_bw_d©a
;

244 
uöt64_t
 
	m∑d5
;

246 } 
__©åibuã__
((
∑cked
));

248 
	sjobs_ëa
 {

249 
uöt32_t
 
	mƒ_ru¬ög
;

250 
uöt32_t
 
	mƒ_ømp
;

252 
uöt32_t
 
	mƒ_≥ndög
;

253 
uöt32_t
 
	mƒ_£âög_up
;

255 
uöt64_t
 
	mm_øã
[
DDIR_RWDIR_CNT
], 
	mt_øã
[DDIR_RWDIR_CNT];

256 
uöt64_t
 
	møã
[
DDIR_RWDIR_CNT
];

257 
uöt32_t
 
	mm_i›s
[
DDIR_RWDIR_CNT
], 
	mt_i›s
[DDIR_RWDIR_CNT];

258 
uöt32_t
 
	mi›s
[
DDIR_RWDIR_CNT
];

259 
uöt64_t
 
	mñ≠£d_£c
;

260 
uöt64_t
 
	mëa_£c
;

261 
uöt32_t
 
	mis_pow2
;

262 
uöt32_t
 
	munô_ba£
;

264 
uöt32_t
 
	msig_figs
;

266 
uöt32_t
 
	mfûes_›í
;

271 
uöt32_t
 
	mƒ_thªads
;

272 
uöt8_t
 
	mrun_°r
[];

273 } 
__©åibuã__
((
∑cked
));

275 
	sio_u_∂©_íåy
 {

276 
Êi°_hód
 
	mli°
;

277 
uöt64_t
 
	mio_u_∂©
[
FIO_IO_U_PLAT_NR
];

280 
fio_muãx
 *
°©_muãx
;

282 
jobs_ëa
 *
gë_jobs_ëa
(
boﬁ
 
f‹˚
, 
size_t
 *
size
);

284 
°©_öô
();

285 
°©_exô
();

287 
js⁄_obje˘
 * 
show_thªad_°©us
(
thªad_°©
 *
ts
, 
group_run_°©s
 *
rs
, 
Êi°_hód
 *, 
buf_ouçut
 *);

288 
show_group_°©s
(
group_run_°©s
 *
rs
, 
buf_ouçut
 *);

289 
boﬁ
 
ˇlc_thªad_°©us
(
jobs_ëa
 *
je
, 
f‹˚
);

290 
di•œy_thªad_°©us
(
jobs_ëa
 *
je
);

291 
show_run_°©s
();

292 
__show_run_°©s
();

293 
__show_ru¬ög_run_°©s
();

294 
show_ru¬ög_run_°©s
();

295 
check_f‹_ru¬ög_°©s
();

296 
sum_thªad_°©s
(
thªad_°©
 *
d°
, thªad_°© *
§c
, 
boﬁ
 
fú°
);

297 
sum_group_°©s
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
);

298 
öô_thªad_°©
(
thªad_°©
 *
ts
);

299 
öô_group_run_°©
(
group_run_°©s
 *
gs
);

300 
ëa_to_°r
(*
°r
, 
ëa_£c
);

301 
boﬁ
 
ˇlc_œt
(
io_°©
 *
is
, *
mö
, *
max
, *
món
, *
dev
);

302 
ˇlc_˛©_≥r˚¡ûes
(
uöt64_t
 *
io_u_∂©
, 
ƒ
, 
fio_Â64_t
 *
∂i°
, **
ouçut
, *
maxv
, *
möv
);

303 
°©_ˇlc_œt_n
(
thªad_°©
 *
ts
, *
io_u_œt
);

304 
°©_ˇlc_œt_m
(
thªad_°©
 *
ts
, *
io_u_œt
);

305 
°©_ˇlc_œt_u
(
thªad_°©
 *
ts
, *
io_u_œt
);

306 
°©_ˇlc_di°
(
uöt64_t
 *
m≠
, 
tŸÆ
, *
io_u_di°
);

307 
ª£t_io_°©s
(
thªad_d©a
 *);

308 
upd©e_rußge_°©
(
thªad_d©a
 *);

309 
˛ór_rußge_°©
(
thªad_d©a
 *);

311 
add_œt_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

312 , 
uöt64_t
);

313 
add_˛©_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

314 , 
uöt64_t
);

315 
add_¶©_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

316 , 
uöt64_t
);

317 
add_agg_ßm∂e
(
io_ßm∂e_d©a
, 
fio_ddú
, );

318 
add_i›s_ßm∂e
(
thªad_d©a
 *, 
io_u
 *,

320 
add_bw_ßm∂e
(
thªad_d©a
 *, 
io_u
 *,

322 
add_sync_˛©_ßm∂e
(
thªad_°©
 *
ts
,

323 
n£c
);

324 
ˇlc_log_ßm∂es
();

326 
io_log
 *
agg_io_log
[
DDIR_RWDIR_CNT
];

327 
wrôe_bw_log
;

329 
ölöe
 
boﬁ
 
	$n£c_to_u£c
(*
mö
,

330 *
max
, *
món
,

331 *
dev
)

333 i‡(*
mö
 > 2000 && *
max
 > 99999 && *
dev
 > 1000.0) {

334 *
mö
 /= 1000;

335 *
max
 /= 1000;

336 *
món
 /= 1000.0;

337 *
dev
 /= 1000.0;

338  
åue
;

341  
Ál£
;

342 
	}
}

344 
ölöe
 
boﬁ
 
	$n£c_to_m£c
(*
mö
,

345 *
max
, *
món
,

346 *
dev
)

348 i‡(*
mö
 > 2000000 && *
max
 > 99999999ULL && *
dev
 > 1000000.0) {

349 *
mö
 /= 1000000;

350 *
max
 /= 1000000;

351 *
món
 /= 1000000.0;

352 *
dev
 /= 1000000.0;

353  
åue
;

356  
Ál£
;

357 
	}
}

362 
	#__THREAD_RUNSTR_SZ
(
ƒ
Ë(“rË* 5)

	)

363 
	#THREAD_RUNSTR_SZ
 
	`__THREAD_RUNSTR_SZ
(
thªad_numbî
)

	)

365 
uöt32_t
 *
io_u_block_öfo
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

	@steadystate.h

1 #i‚de‡
FIO_STEADYSTATE_H


2 
	#FIO_STEADYSTATE_H


	)

4 
	~"°©.h
"

5 
	~"thªad_›ti⁄s.h
"

6 
	~"lib/õì754.h
"

8 
°ódy°©e_‰ì
(
thªad_d©a
 *);

9 
°ódy°©e_check
();

10 
°ódy°©e_£tup
();

11 
td_°ódy°©e_öô
(
thªad_d©a
 *);

12 
uöt64_t
 
°ódy°©e_bw_món
(
thªad_°©
 *);

13 
uöt64_t
 
°ódy°©e_i›s_món
(
thªad_°©
 *);

15 
boﬁ
 
°ódy°©e_íabÀd
;

17 
	s°ódy°©e_d©a
 {

18 
	mlimô
;

19 
	mdur
;

20 
	mømp_time
;

22 
uöt32_t
 
	m°©e
;

24 
	mhód
;

25 
	mèû
;

26 
uöt64_t
 *
	mi›s_d©a
;

27 
uöt64_t
 *
	mbw_d©a
;

29 
	m¶›e
;

30 
	mdevüti⁄
;

31 
	m¸ôîi⁄
;

33 
uöt64_t
 
	msum_y
;

34 
uöt64_t
 
	msum_x
;

35 
uöt64_t
 
	msum_x_sq
;

36 
uöt64_t
 
	msum_xy
;

37 
uöt64_t
 
	mﬁde°_y
;

39 
time•ec
 
	m¥ev_time
;

40 
uöt64_t
 
	m¥ev_i›s
;

41 
uöt64_t
 
	m¥ev_byãs
;

45 
	m__FIO_SS_IOPS
 = 0,

46 
	m__FIO_SS_BW
,

47 
	m__FIO_SS_SLOPE
,

48 
	m__FIO_SS_ATTAINED
,

49 
	m__FIO_SS_RAMP_OVER
,

50 
	m__FIO_SS_DATA
,

51 
	m__FIO_SS_PCT
,

52 
	m__FIO_SS_BUFFER_FULL
,

56 
	mFIO_SS_IOPS
 = 1 << 
__FIO_SS_IOPS
,

57 
	mFIO_SS_BW
 = 1 << 
__FIO_SS_BW
,

58 
	mFIO_SS_SLOPE
 = 1 << 
__FIO_SS_SLOPE
,

59 
	mFIO_SS_ATTAINED
 = 1 << 
__FIO_SS_ATTAINED
,

60 
	mFIO_SS_RAMP_OVER
 = 1 << 
__FIO_SS_RAMP_OVER
,

61 
	mFIO_SS_DATA
 = 1 << 
__FIO_SS_DATA
,

62 
	mFIO_SS_PCT
 = 1 << 
__FIO_SS_PCT
,

63 
	mFIO_SS_BUFFER_FULL
 = 1 << 
__FIO_SS_BUFFER_FULL
,

65 
	mFIO_SS_IOPS_SLOPE
 = 
FIO_SS_IOPS
 | 
FIO_SS_SLOPE
,

66 
	mFIO_SS_BW_SLOPE
 = 
FIO_SS_BW
 | 
FIO_SS_SLOPE
,

69 
	#STEADYSTATE_MSEC
 1000

	)

	@td_error.h

1 #i‚de‡
FIO_TD_ERROR_H


2 
	#FIO_TD_ERROR_H


	)

8 
	eîr‹_ty≥_bô
 {

9 
	mERROR_TYPE_READ_BIT
 = 0,

10 
	mERROR_TYPE_WRITE_BIT
 = 1,

11 
	mERROR_TYPE_VERIFY_BIT
 = 2,

12 
	mERROR_TYPE_CNT
 = 3,

15 
	eîr‹_ty≥
 {

16 
	mERROR_TYPE_NONE
 = 0,

17 
	mERROR_TYPE_READ
 = 1 << 
ERROR_TYPE_READ_BIT
,

18 
	mERROR_TYPE_WRITE
 = 1 << 
ERROR_TYPE_WRITE_BIT
,

19 
	mERROR_TYPE_VERIFY
 = 1 << 
ERROR_TYPE_VERIFY_BIT
,

20 
	mERROR_TYPE_ANY
 = 0xffff,

23 
îr‹_ty≥_bô
 
td_îr‹_ty≥
(
fio_ddú
 
ddú
, 
îr
);

24 
td_n⁄_Áèl_îr‹
(
thªad_d©a
 *
td
, 
îr‹_ty≥_bô
 
ëy≥
,

25 
îr
);

26 
upd©e_îr‹_cou¡
(
thªad_d©a
 *
td
, 
îr
);

	@thread_options.h

1 #i‚de‡
FIO_THREAD_OPTIONS_H


2 
	#FIO_THREAD_OPTIONS_H


	)

4 
	~"¨ch/¨ch.h
"

5 
	~"os/os.h
"

6 
	~"›ti⁄s.h
"

7 
	~"°©.h
"

8 
	~"gëtime.h
"

9 
	~"lib/õì754.h
"

10 
	~"lib/∑âîn.h
"

11 
	~"td_îr‹.h
"

16 
	efio_memty≥
 {

17 
	mMEM_MALLOC
 = 0,

18 
	mMEM_SHM
,

19 
	mMEM_SHMHUGE
,

20 
	mMEM_MMAP
,

21 
	mMEM_MMAPHUGE
,

22 
	mMEM_MMAPSHARED
,

23 
	mMEM_CUDA_MALLOC
,

26 
	#ERROR_STR_MAX
 128

	)

28 
	#BSSPLIT_MAX
 64

	)

29 
	#ZONESPLIT_MAX
 256

	)

31 
	sbs•lô
 {

32 
uöt32_t
 
	mbs
;

33 
uöt32_t
 
	m≥rc
;

36 
	sz⁄e_•lô
 {

37 
uöt8_t
 
	mac˚ss_≥rc
;

38 
uöt8_t
 
	msize_≥rc
;

39 
uöt8_t
 
	m∑d
[6];

40 
uöt64_t
 
	msize
;

43 
	#NR_OPTS_SZ
 (
FIO_MAX_OPTS
 / (8 * (
uöt64_t
)))

	)

45 
	#OPT_MAGIC
 0x4f50544e

	)

47 
	sthªad_›ti⁄s
 {

48 
	mmagic
;

49 
uöt64_t
 
	m£t_›ti⁄s
[
NR_OPTS_SZ
];

50 *
	mdes¸ùti⁄
;

51 *
	m«me
;

52 *
	mwaô_f‹
;

53 *
	mdúe˘‹y
;

54 *
	mfûíame
;

55 *
	mfûíame_f‹m©
;

56 *
	m›ídú
;

57 *
	mi€ngöe
;

58 *
	mi€ngöe_so_∑th
;

59 *
	mmm≠fûe
;

60 
td_ddú
 
	mtd_ddú
;

61 
	mrw_£q
;

62 
	mkb_ba£
;

63 
	munô_ba£
;

64 
	mddú_£q_ƒ
;

65 
	mddú_£q_add
;

66 
	miodïth
;

67 
	miodïth_low
;

68 
	miodïth_b©ch
;

69 
	miodïth_b©ch_com∂ëe_mö
;

70 
	miodïth_b©ch_com∂ëe_max
;

71 
	m£rülize_ovîœp
;

73 
	munique_fûíame
;

75 
	msize
;

76 
	mio_size
;

77 
	msize_≥r˚¡
;

78 
	mfûl_devi˚
;

79 
	mfûe_≠≥nd
;

80 
	mfûe_size_low
;

81 
	mfûe_size_high
;

82 
	m°¨t_off£t
;

83 
	m°¨t_off£t_Æign
;

85 
	mbs
[
DDIR_RWDIR_CNT
];

86 
	mba
[
DDIR_RWDIR_CNT
];

87 
	mmö_bs
[
DDIR_RWDIR_CNT
];

88 
	mmax_bs
[
DDIR_RWDIR_CNT
];

89 
bs•lô
 *
	mbs•lô
[
DDIR_RWDIR_CNT
];

90 
	mbs•lô_ƒ
[
DDIR_RWDIR_CNT
];

92 *
	mign‹e_îr‹
[
ERROR_TYPE_CNT
];

93 
	mign‹e_îr‹_ƒ
[
ERROR_TYPE_CNT
];

94 
	mîr‹_dump
;

96 
	mƒ_fûes
;

97 
	m›í_fûes
;

98 
fûe_lock_mode
 
	mfûe_lock_mode
;

100 
	modúe˘
;

101 
	mﬂtomic
;

102 
	mövÆid©e_ˇche
;

103 
	m¸óã_£rülize
;

104 
	m¸óã_fsync
;

105 
	m¸óã_⁄_›í
;

106 
	m¸óã_⁄ly
;

107 
	míd_fsync
;

108 
	m¥e_ªad
;

109 
	msync_io
;

110 
	mwrôe_höt
;

111 
	mvîify
;

112 
	mdo_vîify
;

113 
	mvîifys‹t
;

114 
	mvîifys‹t_ƒ
;

115 
	mvîify_öãrvÆ
;

116 
	mvîify_off£t
;

117 
	mvîify_∑âîn
[
MAX_PATTERN_SIZE
];

118 
	mvîify_∑âîn_byãs
;

119 
∑âîn_fmt
 
	mvîify_fmt
[8];

120 
	mvîify_fmt_sz
;

121 
	mvîify_Áèl
;

122 
	mvîify_dump
;

123 
	mvîify_async
;

124 
	mvîify_backlog
;

125 
	mvîify_b©ch
;

126 
	mex≥rimíèl_vîify
;

127 
	mvîify_°©e
;

128 
	mvîify_°©e_ßve
;

129 
	mu£_thªad
;

130 
	mu∆ök
;

131 
	mu∆ök_óch_lo›
;

132 
	mdo_disk_utû
;

133 
	movîride_sync
;

134 
	mønd_ª≥©abÀ
;

135 
	mÆÃ™d_ª≥©abÀ
;

136 
	mønd_£ed
;

137 
	mdï_u£_os_ønd
;

138 
	mlog_avg_m£c
;

139 
	mlog_hi°_m£c
;

140 
	mlog_hi°_cﬂr£√ss
;

141 
	mlog_max
;

142 
	mlog_off£t
;

143 
	mlog_gz
;

144 
	mlog_gz_°‹e
;

145 
	mlog_unix_ïoch
;

146 
	mn‹™domm≠
;

147 
	mso·øndomm≠
;

148 
	mbs_u«lig√d
;

149 
	mfsync_⁄_˛o£
;

150 
	mbs_is_£q_ønd
;

152 
	mvîify_⁄ly
;

154 
	møndom_di°ributi⁄
;

155 
	mexôÆl_îr‹
;

157 
z⁄e_•lô
 *
	mz⁄e_•lô
[
DDIR_RWDIR_CNT
];

158 
	mz⁄e_•lô_ƒ
[
DDIR_RWDIR_CNT
];

160 
fio_Â64_t
 
	mzùf_thëa
;

161 
fio_Â64_t
 
	m∑ªto_h
;

162 
fio_Â64_t
 
	mgauss_dev
;

164 
	møndom_gíî©‹
;

166 
	m≥rc_ønd
[
DDIR_RWDIR_CNT
];

168 
	mhugïage_size
;

169 
	mrw_mö_bs
;

170 
	mthöktime
;

171 
	mthöktime_•ö
;

172 
	mthöktime_blocks
;

173 
	mfsync_blocks
;

174 
	mfd©async_blocks
;

175 
	mb¨rõr_blocks
;

176 
	m°¨t_dñay
;

177 
	m°¨t_dñay_high
;

178 
	mtimeout
;

179 
	mømp_time
;

180 
	mss_°©e
;

181 
fio_Â64_t
 
	mss_limô
;

182 
	mss_dur
;

183 
	mss_ømp_time
;

184 
	movîwrôe
;

185 
	mbw_avg_time
;

186 
	mi›s_avg_time
;

187 
	mlo›s
;

188 
	mz⁄e_ønge
;

189 
	mz⁄e_size
;

190 
	mz⁄e_skù
;

191 
	mlockmem
;

192 
fio_memty≥
 
	mmem_ty≥
;

193 
	mmem_Æign
;

195 
	mmax_œãncy
;

197 
	m°⁄ewÆl
;

198 
	m√w_group
;

199 
	mnumjobs
;

200 
os_˝u_mask_t
 
	m˝umask
;

201 
os_˝u_mask_t
 
	mvîify_˝umask
;

202 
os_˝u_mask_t
 
	mlog_gz_˝umask
;

203 
	m˝us_Ælowed_pﬁicy
;

204 *
	mnuma_˝unodes
;

205 
	mnuma_mem_mode
;

206 
	mnuma_mem_¥e„r_node
;

207 *
	mnuma_memnodes
;

208 
	mgpu_dev_id
;

209 
	m°¨t_off£t_≥r˚¡
;

211 
	miﬁog
;

212 
	mrwmixcy˛e
;

213 
	mrwmix
[
DDIR_RWDIR_CNT
];

214 
	mni˚
;

215 
	mi›rio
;

216 
	mi›rio_˛ass
;

217 
	mfûe_£rvi˚_ty≥
;

218 
	mgroup_ªp‹tög
;

219 
	m°©s
;

220 
	mÁdvi£_höt
;

221 
fio_ÁŒoˇã_mode
 
	mÁŒoˇã_mode
;

222 
	mzîo_buf„rs
;

223 
	mªfûl_buf„rs
;

224 
	ms¸ambÀ_buf„rs
;

225 
	mbuf„r_∑âîn
[
MAX_PATTERN_SIZE
];

226 
	mbuf„r_∑âîn_byãs
;

227 
	mcom¥ess_≥r˚¡age
;

228 
	mcom¥ess_chunk
;

229 
	mdedu≥_≥r˚¡age
;

230 
	mtime_ba£d
;

231 
	mdißbÀ_œt
;

232 
	mdißbÀ_˛©
;

233 
	mdißbÀ_¶©
;

234 
	mdißbÀ_bw
;

235 
	munifõd_rw_ªp
;

236 
	mgtod_ªdu˚
;

237 
	mgtod_˝u
;

238 
fio_cs
 
	m˛ocksour˚
;

239 
	mno_°Æl
;

240 
	måim_≥r˚¡age
;

241 
	måim_b©ch
;

242 
	måim_zîo
;

243 
	måim_backlog
;

244 
	m˛©_≥r˚¡ûes
;

245 
	mœt_≥r˚¡ûes
;

246 
	m≥r˚¡ûe_¥ecisi⁄
;

247 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

249 *
	mªad_iﬁog_fûe
;

250 *
	mwrôe_iﬁog_fûe
;

252 
	mwrôe_bw_log
;

253 
	mwrôe_œt_log
;

254 
	mwrôe_i›s_log
;

255 
	mwrôe_hi°_log
;

257 *
	mbw_log_fûe
;

258 *
	mœt_log_fûe
;

259 *
	mi›s_log_fûe
;

260 *
	mhi°_log_fûe
;

261 *
	mª∂ay_ªdúe˘
;

266 *
	mexec_¥îun
;

267 *
	mexec_po°run
;

269 
uöt64_t
 
	møã
[
DDIR_RWDIR_CNT
];

270 
uöt64_t
 
	møãmö
[
DDIR_RWDIR_CNT
];

271 
	møãcy˛e
;

272 
	mio_submô_mode
;

273 
	møã_i›s
[
DDIR_RWDIR_CNT
];

274 
	møã_i›s_mö
[
DDIR_RWDIR_CNT
];

275 
	møã_¥o˚ss
;

276 
	møã_ign_thök
;

278 *
	mioscheduÀr
;

283 
îr‹_ty≥
 
	mc⁄töue_⁄_îr‹
;

288 *
	m¥ofûe
;

293 *
	mcgroup
;

294 
	mcgroup_weight
;

295 
	mcgroup_nodñëe
;

297 
	muid
;

298 
	mgid
;

300 
	mÊow_id
;

301 
	mÊow
;

302 
	mÊow_w©îm¨k
;

303 
	mÊow_¶ìp
;

305 
	moff£t_ö¸emít
;

306 
	mnumbî_ios
;

308 
	msync_fûe_ønge
;

310 
	mœãncy_èrgë
;

311 
	mœãncy_wödow
;

312 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

314 
	msig_figs
;

316 
	mblock_îr‹_hi°
;

318 
	mª∂ay_Æign
;

319 
	mª∂ay_sˇÀ
;

321 
	m≥r_job_logs
;

323 
	mÆlow_¸óã
;

324 
	mÆlow_mou¡ed_wrôe
;

327 
	#FIO_TOP_STR_MAX
 256

	)

329 
	sthªad_›ti⁄s_∑ck
 {

330 
uöt64_t
 
	m£t_›ti⁄s
[
NR_OPTS_SZ
];

331 
uöt8_t
 
	mdes¸ùti⁄
[
FIO_TOP_STR_MAX
];

332 
uöt8_t
 
	m«me
[
FIO_TOP_STR_MAX
];

333 
uöt8_t
 
	mwaô_f‹
[
FIO_TOP_STR_MAX
];

334 
uöt8_t
 
	mdúe˘‹y
[
FIO_TOP_STR_MAX
];

335 
uöt8_t
 
	mfûíame
[
FIO_TOP_STR_MAX
];

336 
uöt8_t
 
	mfûíame_f‹m©
[
FIO_TOP_STR_MAX
];

337 
uöt8_t
 
	m›ídú
[
FIO_TOP_STR_MAX
];

338 
uöt8_t
 
	mi€ngöe
[
FIO_TOP_STR_MAX
];

339 
uöt8_t
 
	mmm≠fûe
[
FIO_TOP_STR_MAX
];

340 
uöt32_t
 
	mtd_ddú
;

341 
uöt32_t
 
	mrw_£q
;

342 
uöt32_t
 
	mkb_ba£
;

343 
uöt32_t
 
	munô_ba£
;

344 
uöt32_t
 
	mddú_£q_ƒ
;

345 
uöt64_t
 
	mddú_£q_add
;

346 
uöt32_t
 
	miodïth
;

347 
uöt32_t
 
	miodïth_low
;

348 
uöt32_t
 
	miodïth_b©ch
;

349 
uöt32_t
 
	miodïth_b©ch_com∂ëe_mö
;

350 
uöt32_t
 
	miodïth_b©ch_com∂ëe_max
;

351 
uöt32_t
 
	m£rülize_ovîœp
;

352 
uöt32_t
 
	mœt_≥r˚¡ûes
;

354 
uöt64_t
 
	msize
;

355 
uöt64_t
 
	mio_size
;

356 
uöt32_t
 
	msize_≥r˚¡
;

357 
uöt32_t
 
	mfûl_devi˚
;

358 
uöt32_t
 
	mfûe_≠≥nd
;

359 
uöt32_t
 
	munique_fûíame
;

360 
uöt64_t
 
	mfûe_size_low
;

361 
uöt64_t
 
	mfûe_size_high
;

362 
uöt64_t
 
	m°¨t_off£t
;

363 
uöt64_t
 
	m°¨t_off£t_Æign
;

365 
uöt32_t
 
	mbs
[
DDIR_RWDIR_CNT
];

366 
uöt32_t
 
	mba
[
DDIR_RWDIR_CNT
];

367 
uöt32_t
 
	mmö_bs
[
DDIR_RWDIR_CNT
];

368 
uöt32_t
 
	mmax_bs
[
DDIR_RWDIR_CNT
];

369 
bs•lô
 
	mbs•lô
[
DDIR_RWDIR_CNT
][
BSSPLIT_MAX
];

370 
uöt32_t
 
	mbs•lô_ƒ
[
DDIR_RWDIR_CNT
];

372 
uöt32_t
 
	mign‹e_îr‹
[
ERROR_TYPE_CNT
][
ERROR_STR_MAX
];

373 
uöt32_t
 
	mign‹e_îr‹_ƒ
[
ERROR_TYPE_CNT
];

374 
uöt32_t
 
	mîr‹_dump
;

376 
uöt32_t
 
	mƒ_fûes
;

377 
uöt32_t
 
	m›í_fûes
;

378 
uöt32_t
 
	mfûe_lock_mode
;

380 
uöt32_t
 
	modúe˘
;

381 
uöt32_t
 
	mﬂtomic
;

382 
uöt32_t
 
	mövÆid©e_ˇche
;

383 
uöt32_t
 
	m¸óã_£rülize
;

384 
uöt32_t
 
	m¸óã_fsync
;

385 
uöt32_t
 
	m¸óã_⁄_›í
;

386 
uöt32_t
 
	m¸óã_⁄ly
;

387 
uöt32_t
 
	míd_fsync
;

388 
uöt32_t
 
	m¥e_ªad
;

389 
uöt32_t
 
	msync_io
;

390 
uöt32_t
 
	mwrôe_höt
;

391 
uöt32_t
 
	mvîify
;

392 
uöt32_t
 
	mdo_vîify
;

393 
uöt32_t
 
	mvîifys‹t
;

394 
uöt32_t
 
	mvîifys‹t_ƒ
;

395 
uöt32_t
 
	mvîify_öãrvÆ
;

396 
uöt32_t
 
	mvîify_off£t
;

397 
uöt8_t
 
	mvîify_∑âîn
[
MAX_PATTERN_SIZE
];

398 
uöt32_t
 
	mvîify_∑âîn_byãs
;

399 
uöt32_t
 
	mvîify_Áèl
;

400 
uöt32_t
 
	mvîify_dump
;

401 
uöt32_t
 
	mvîify_async
;

402 
uöt64_t
 
	mvîify_backlog
;

403 
uöt32_t
 
	mvîify_b©ch
;

404 
uöt32_t
 
	mex≥rimíèl_vîify
;

405 
uöt32_t
 
	mvîify_°©e
;

406 
uöt32_t
 
	mvîify_°©e_ßve
;

407 
uöt32_t
 
	mu£_thªad
;

408 
uöt32_t
 
	mu∆ök
;

409 
uöt32_t
 
	mu∆ök_óch_lo›
;

410 
uöt32_t
 
	mdo_disk_utû
;

411 
uöt32_t
 
	movîride_sync
;

412 
uöt32_t
 
	mønd_ª≥©abÀ
;

413 
uöt32_t
 
	mÆÃ™d_ª≥©abÀ
;

414 
uöt64_t
 
	mønd_£ed
;

415 
uöt32_t
 
	mdï_u£_os_ønd
;

416 
uöt32_t
 
	mlog_avg_m£c
;

417 
uöt32_t
 
	mlog_hi°_m£c
;

418 
uöt32_t
 
	mlog_hi°_cﬂr£√ss
;

419 
uöt32_t
 
	mlog_max
;

420 
uöt32_t
 
	mlog_off£t
;

421 
uöt32_t
 
	mlog_gz
;

422 
uöt32_t
 
	mlog_gz_°‹e
;

423 
uöt32_t
 
	mlog_unix_ïoch
;

424 
uöt32_t
 
	mn‹™domm≠
;

425 
uöt32_t
 
	mso·øndomm≠
;

426 
uöt32_t
 
	mbs_u«lig√d
;

427 
uöt32_t
 
	mfsync_⁄_˛o£
;

428 
uöt32_t
 
	mbs_is_£q_ønd
;

430 
uöt32_t
 
	møndom_di°ributi⁄
;

431 
uöt32_t
 
	mexôÆl_îr‹
;

433 
uöt32_t
 
	msync_fûe_ønge
;

435 
z⁄e_•lô
 
	mz⁄e_•lô
[
DDIR_RWDIR_CNT
][
ZONESPLIT_MAX
];

436 
uöt32_t
 
	mz⁄e_•lô_ƒ
[
DDIR_RWDIR_CNT
];

438 
fio_Â64_t
 
	mzùf_thëa
;

439 
fio_Â64_t
 
	m∑ªto_h
;

440 
fio_Â64_t
 
	mgauss_dev
;

442 
uöt32_t
 
	møndom_gíî©‹
;

444 
uöt32_t
 
	m≥rc_ønd
[
DDIR_RWDIR_CNT
];

446 
uöt32_t
 
	mhugïage_size
;

447 
uöt32_t
 
	mrw_mö_bs
;

448 
uöt32_t
 
	mthöktime
;

449 
uöt32_t
 
	mthöktime_•ö
;

450 
uöt32_t
 
	mthöktime_blocks
;

451 
uöt32_t
 
	mfsync_blocks
;

452 
uöt32_t
 
	mfd©async_blocks
;

453 
uöt32_t
 
	mb¨rõr_blocks
;

454 
uöt64_t
 
	m°¨t_dñay
;

455 
uöt64_t
 
	m°¨t_dñay_high
;

456 
uöt64_t
 
	mtimeout
;

457 
uöt64_t
 
	mømp_time
;

458 
uöt64_t
 
	mss_dur
;

459 
uöt64_t
 
	mss_ømp_time
;

460 
uöt32_t
 
	mss_°©e
;

461 
fio_Â64_t
 
	mss_limô
;

462 
uöt32_t
 
	movîwrôe
;

463 
uöt32_t
 
	mbw_avg_time
;

464 
uöt32_t
 
	mi›s_avg_time
;

465 
uöt32_t
 
	mlo›s
;

466 
uöt64_t
 
	mz⁄e_ønge
;

467 
uöt64_t
 
	mz⁄e_size
;

468 
uöt64_t
 
	mz⁄e_skù
;

469 
uöt64_t
 
	mlockmem
;

470 
uöt32_t
 
	mmem_ty≥
;

471 
uöt32_t
 
	mmem_Æign
;

473 
uöt32_t
 
	m°⁄ewÆl
;

474 
uöt32_t
 
	m√w_group
;

475 
uöt32_t
 
	mnumjobs
;

480 
uöt8_t
 
	m˝umask
[
FIO_TOP_STR_MAX
];

481 
uöt8_t
 
	mvîify_˝umask
[
FIO_TOP_STR_MAX
];

482 
uöt8_t
 
	mlog_gz_˝umask
[
FIO_TOP_STR_MAX
];

484 
uöt32_t
 
	mgpu_dev_id
;

485 
uöt32_t
 
	m°¨t_off£t_≥r˚¡
;

486 
uöt32_t
 
	m˝us_Ælowed_pﬁicy
;

487 
uöt32_t
 
	miﬁog
;

488 
uöt32_t
 
	mrwmixcy˛e
;

489 
uöt32_t
 
	mrwmix
[
DDIR_RWDIR_CNT
];

490 
uöt32_t
 
	mni˚
;

491 
uöt32_t
 
	mi›rio
;

492 
uöt32_t
 
	mi›rio_˛ass
;

493 
uöt32_t
 
	mfûe_£rvi˚_ty≥
;

494 
uöt32_t
 
	mgroup_ªp‹tög
;

495 
uöt32_t
 
	m°©s
;

496 
uöt32_t
 
	mÁdvi£_höt
;

497 
uöt32_t
 
	mÁŒoˇã_mode
;

498 
uöt32_t
 
	mzîo_buf„rs
;

499 
uöt32_t
 
	mªfûl_buf„rs
;

500 
uöt32_t
 
	ms¸ambÀ_buf„rs
;

501 
uöt8_t
 
	mbuf„r_∑âîn
[
MAX_PATTERN_SIZE
];

502 
uöt32_t
 
	mbuf„r_∑âîn_byãs
;

503 
uöt32_t
 
	mcom¥ess_≥r˚¡age
;

504 
uöt32_t
 
	mcom¥ess_chunk
;

505 
uöt32_t
 
	mdedu≥_≥r˚¡age
;

506 
uöt32_t
 
	mtime_ba£d
;

507 
uöt32_t
 
	mdißbÀ_œt
;

508 
uöt32_t
 
	mdißbÀ_˛©
;

509 
uöt32_t
 
	mdißbÀ_¶©
;

510 
uöt32_t
 
	mdißbÀ_bw
;

511 
uöt32_t
 
	munifõd_rw_ªp
;

512 
uöt32_t
 
	mgtod_ªdu˚
;

513 
uöt32_t
 
	mgtod_˝u
;

514 
uöt32_t
 
	m˛ocksour˚
;

515 
uöt32_t
 
	mno_°Æl
;

516 
uöt32_t
 
	måim_≥r˚¡age
;

517 
uöt32_t
 
	måim_b©ch
;

518 
uöt32_t
 
	måim_zîo
;

519 
uöt64_t
 
	måim_backlog
;

520 
uöt32_t
 
	m˛©_≥r˚¡ûes
;

521 
uöt32_t
 
	m≥r˚¡ûe_¥ecisi⁄
;

522 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

524 
uöt8_t
 
	mªad_iﬁog_fûe
[
FIO_TOP_STR_MAX
];

525 
uöt8_t
 
	mwrôe_iﬁog_fûe
[
FIO_TOP_STR_MAX
];

527 
uöt32_t
 
	mwrôe_bw_log
;

528 
uöt32_t
 
	mwrôe_œt_log
;

529 
uöt32_t
 
	mwrôe_i›s_log
;

530 
uöt32_t
 
	mwrôe_hi°_log
;

532 
uöt8_t
 
	mbw_log_fûe
[
FIO_TOP_STR_MAX
];

533 
uöt8_t
 
	mœt_log_fûe
[
FIO_TOP_STR_MAX
];

534 
uöt8_t
 
	mi›s_log_fûe
[
FIO_TOP_STR_MAX
];

535 
uöt8_t
 
	mhi°_log_fûe
[
FIO_TOP_STR_MAX
];

536 
uöt8_t
 
	mª∂ay_ªdúe˘
[
FIO_TOP_STR_MAX
];

541 
uöt8_t
 
	mexec_¥îun
[
FIO_TOP_STR_MAX
];

542 
uöt8_t
 
	mexec_po°run
[
FIO_TOP_STR_MAX
];

544 
uöt64_t
 
	møã
[
DDIR_RWDIR_CNT
];

545 
uöt64_t
 
	møãmö
[
DDIR_RWDIR_CNT
];

546 
uöt32_t
 
	møãcy˛e
;

547 
uöt32_t
 
	mio_submô_mode
;

548 
uöt32_t
 
	møã_i›s
[
DDIR_RWDIR_CNT
];

549 
uöt32_t
 
	møã_i›s_mö
[
DDIR_RWDIR_CNT
];

550 
uöt32_t
 
	møã_¥o˚ss
;

551 
uöt32_t
 
	møã_ign_thök
;

552 
uöt32_t
 
	m∑d
;

554 
uöt8_t
 
	mioscheduÀr
[
FIO_TOP_STR_MAX
];

559 
uöt32_t
 
	mc⁄töue_⁄_îr‹
;

564 
uöt8_t
 
	m¥ofûe
[
FIO_TOP_STR_MAX
];

569 
uöt8_t
 
	mcgroup
[
FIO_TOP_STR_MAX
];

570 
uöt32_t
 
	mcgroup_weight
;

571 
uöt32_t
 
	mcgroup_nodñëe
;

573 
uöt32_t
 
	muid
;

574 
uöt32_t
 
	mgid
;

576 
öt32_t
 
	mÊow_id
;

577 
öt32_t
 
	mÊow
;

578 
öt32_t
 
	mÊow_w©îm¨k
;

579 
uöt32_t
 
	mÊow_¶ìp
;

581 
uöt64_t
 
	moff£t_ö¸emít
;

582 
uöt64_t
 
	mnumbî_ios
;

584 
uöt64_t
 
	mœãncy_èrgë
;

585 
uöt64_t
 
	mœãncy_wödow
;

586 
uöt64_t
 
	mmax_œãncy
;

587 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

589 
uöt32_t
 
	msig_figs
;

591 
uöt32_t
 
	mblock_îr‹_hi°
;

593 
uöt32_t
 
	mª∂ay_Æign
;

594 
uöt32_t
 
	mª∂ay_sˇÀ
;

596 
uöt32_t
 
	m≥r_job_logs
;

598 
uöt32_t
 
	mÆlow_¸óã
;

599 
uöt32_t
 
	mÆlow_mou¡ed_wrôe
;

600 } 
__©åibuã__
((
∑cked
));

602 
c⁄vît_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
, 
thªad_›ti⁄s_∑ck
 *
t›
);

603 
c⁄vît_thªad_›ti⁄s_to_√t
(
thªad_›ti⁄s_∑ck
 *
t›
, 
thªad_›ti⁄s
 *);

604 
fio_ã°_cc⁄v
(
thªad_›ti⁄s
 *);

605 
›ti⁄s_deÁu…_fûl
(
thªad_›ti⁄s
 *
o
);

	@tickmarks.h

1 #i‚de‡
TICKMARKS_H


2 
	#TICKMARKS_H


	)

4 
	stickm¨k
 {

5 
	mvÆue
;

6 
	m°rög
[20];

9 
ˇlc_tickm¨ks
(
mö
, 
max
, 
¡icks
, 
tickm¨k
 **
tm
,

10 *
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off
);

	@trim.h

1 #i‚de‡
FIO_TRIM_H


2 
	#FIO_TRIM_H


	)

4 
	~"fio.h
"

6 #ifde‡
FIO_HAVE_TRIM


7 
boﬁ
 
__mu°_check
 
gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

8 
boﬁ
 
io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

14 
ölöe
 
	$ªmove_åim_íåy
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

16 i‡(!
	`Êi°_em±y
(&
ùo
->
åim_li°
)) {

17 
	`Êi°_dñ_öô
(&
ùo
->
åim_li°
);

18 
td
->
åim_íåõs
--;

20 
	}
}

23 
ölöe
 
boﬁ
 
	$gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

25  
Ál£
;

26 
	}
}

27 
ölöe
 
boﬁ
 
	$io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

29  
Ál£
;

30 
	}
}

31 
ölöe
 
	$ªmove_åim_íåy
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

33 
	}
}

	@verify-state.h

1 #i‚de‡
FIO_VERIFY_STATE_H


2 
	#FIO_VERIFY_STATE_H


	)

4 
	~<°döt.h
>

5 
	~<°rög.h
>

6 
	~<limôs.h
>

8 
	sthªad_ønd32_°©e
 {

9 
uöt32_t
 
	ms
[4];

12 
	sthªad_ønd64_°©e
 {

13 
uöt64_t
 
	ms
[6];

16 
	sthªad_ønd_°©e
 {

17 
uöt64_t
 
	mu£64
;

19 
thªad_ønd32_°©e
 
	m°©e32
;

20 
thªad_ønd64_°©e
 
	m°©e64
;

27 
	sfûe_comp
 {

28 
uöt64_t
 
	mfûío
;

29 
uöt64_t
 
	moff£t
;

32 
	sthªad_io_li°
 {

33 
uöt64_t
 
	mno_comps
;

34 
uöt32_t
 
	mdïth
;

35 
uöt32_t
 
	mnofûes
;

36 
uöt64_t
 
	mnumbîio
;

37 
uöt64_t
 
	mödex
;

38 
thªad_ønd_°©e
 
	mønd
;

39 
uöt8_t
 
	m«me
[64];

40 
fûe_comp
 
	mcomps
[0];

43 
	sÆl_io_li°
 {

44 
uöt64_t
 
	mthªads
;

45 
thªad_io_li°
 
	m°©e
[0];

48 
	#VSTATE_HDR_VERSION
 0x03

	)

50 
	svîify_°©e_hdr
 {

51 
uöt64_t
 
	mvîsi⁄
;

52 
uöt64_t
 
	msize
;

53 
uöt64_t
 
	m¸c
;

56 
	#IO_LIST_ALL
 0xffffffff

	)

58 
	gio_u
;

59 
Æl_io_li°
 *
gë_Æl_io_li°
(, 
size_t
 *);

60 
__vîify_ßve_°©e
(
Æl_io_li°
 *, const *);

61 
vîify_ßve_°©e
(
mask
);

62 
vîify_lﬂd_°©e
(
thªad_d©a
 *, const *);

63 
vîify_‰ì_°©e
(
thªad_d©a
 *);

64 
vîify_°©e_should_°›
(
thªad_d©a
 *, 
io_u
 *);

65 
vîify_assign_°©e
(
thªad_d©a
 *, *);

66 
vîify_°©e_hdr
(vîify_°©e_hd∏*, 
thªad_io_li°
 *);

68 
ölöe
 
size_t
 
	$__thªad_io_li°_sz
(
uöt32_t
 
dïth
, uöt32_à
nofûes
)

70  (
thªad_io_li°
Ë+ 
dïth
 * 
nofûes
 * (
fûe_comp
);

71 
	}
}

73 
ölöe
 
size_t
 
	$thªad_io_li°_sz
(
thªad_io_li°
 *
s
)

75  
	`__thªad_io_li°_sz
(
	`À32_to_˝u
(
s
->
dïth
),Üe32_to_˝u(s->
nofûes
));

76 
	}
}

78 
ölöe
 
thªad_io_li°
 *
	$io_li°_√xt
(
thªad_io_li°
 *
s
)

80  (
thªad_io_li°
 *)((*Ë
s
 + 
	`thªad_io_li°_sz
(s));

81 
	}
}

83 
ölöe
 
	$vîify_°©e_gí_«me
(*
out
, 
size_t
 
size
,

84 c⁄° *
«me
, c⁄° *
¥efix
,

85 
num
)

87 
íame
[
PATH_MAX
];

88 *
±r
;

93 
±r
 = 
íame
;

95 *
±r
 = *
«me
;

96 i‡(*
±r
 == '\0')

98 i‡(*
±r
 == '/')

99 *
±r
 = '.';

100 
±r
++;

101 
«me
++;

104 
	`¢¥ötf
(
out
, 
size
, "%s-%s-%d-vîify.°©e", 
¥efix
, 
íame
, 
num
);

105 
out
[
size
 - 1] = '\0';

106 
	}
}

	@verify.h

1 #i‚de‡
FIO_VERIFY_H


2 
	#FIO_VERIFY_H


	)

4 
	~<°döt.h
>

5 
	~"vîify-°©e.h
"

7 
	#FIO_HDR_MAGIC
 0xacˇ

	)

10 
	mVERIFY_NONE
 = 0,

11 
	mVERIFY_HDR_ONLY
,

14 
	mVERIFY_MD5
,

15 
	mVERIFY_CRC64
,

16 
	mVERIFY_CRC32
,

17 
	mVERIFY_CRC32C
,

18 
	mVERIFY_CRC32C_INTEL
,

19 
	mVERIFY_CRC16
,

20 
	mVERIFY_CRC7
,

21 
	mVERIFY_SHA256
,

22 
	mVERIFY_SHA512
,

23 
	mVERIFY_SHA3_224
,

24 
	mVERIFY_SHA3_256
,

25 
	mVERIFY_SHA3_384
,

26 
	mVERIFY_SHA3_512
,

27 
	mVERIFY_XXHASH
,

28 
	mVERIFY_SHA1
,

29 
	mVERIFY_PATTERN
,

30 
	mVERIFY_PATTERN_NO_HDR
,

31 
	mVERIFY_NULL
,

39 
	svîify_hódî
 {

40 
uöt16_t
 
	mmagic
;

41 
uöt16_t
 
	mvîify_ty≥
;

42 
uöt32_t
 
	mÀn
;

43 
uöt64_t
 
	mønd_£ed
;

44 
uöt64_t
 
	moff£t
;

45 
uöt32_t
 
	mtime_£c
;

46 
uöt32_t
 
	mtime_n£c
;

47 
uöt16_t
 
	mthªad
;

48 
uöt16_t
 
	mnumbîio
;

49 
uöt32_t
 
	m¸c32
;

52 
	svhdr_md5
 {

53 
uöt32_t
 
	mmd5_dige°
[4];

55 
	svhdr_sha3_224
 {

56 
uöt8_t
 
	msha
[224 / 8];

58 
	svhdr_sha3_256
 {

59 
uöt8_t
 
	msha
[256 / 8];

61 
	svhdr_sha3_384
 {

62 
uöt8_t
 
	msha
[384 / 8];

64 
	svhdr_sha3_512
 {

65 
uöt8_t
 
	msha
[512 / 8];

67 
	svhdr_sha512
 {

68 
uöt8_t
 
	msha512
[128];

70 
	svhdr_sha256
 {

71 
uöt8_t
 
	msha256
[64];

73 
	svhdr_sha1
 {

74 
uöt32_t
 
	msha1
[5];

76 
	svhdr_¸c64
 {

77 
uöt64_t
 
	m¸c64
;

79 
	svhdr_¸c32
 {

80 
uöt32_t
 
	m¸c32
;

82 
	svhdr_¸c16
 {

83 
uöt16_t
 
	m¸c16
;

85 
	svhdr_¸c7
 {

86 
uöt8_t
 
	m¸c7
;

88 
	svhdr_xxhash
 {

89 
uöt32_t
 
	mhash
;

95 
p›uœã_vîify_io_u
(
thªad_d©a
 *, 
io_u
 *);

96 
__mu°_check
 
gë_√xt_vîify
(
thªad_d©a
 *
td
, 
io_u
 *);

97 
__mu°_check
 
vîify_io_u
(
thªad_d©a
 *, 
io_u
 **);

98 
vîify_io_u_async
(
thªad_d©a
 *, 
io_u
 **);

99 
fûl_vîify_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
, 
io_u
 *io_u, 
£ed
, 
u£_£ed
);

100 
fûl_buf„r_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
);

101 
fio_vîify_öô
(
thªad_d©a
 *
td
);

106 
vîify_async_öô
(
thªad_d©a
 *);

107 
vîify_async_exô
(
thªad_d©a
 *);

112 
∑°e_blockoff
(*
buf
, 
Àn
, *
¥iv
);

	@workqueue.h

1 #i‚de‡
FIO_RATE_H


2 
	#FIO_RATE_H


	)

4 
	~"Êi°.h
"

6 
	sw‹kqueue_w‹k
 {

7 
Êi°_hód
 
	mli°
;

10 
	ssubmô_w‹kî
 {

11 
±hªad_t
 
	mthªad
;

12 
±hªad_muãx_t
 
	mlock
;

13 
±hªad_c⁄d_t
 
	mc⁄d
;

14 
Êi°_hód
 
	mw‹k_li°
;

15 
	mÊags
;

16 
	mödex
;

17 
uöt64_t
 
	m£q
;

18 
w‹kqueue
 *
	mwq
;

19 *
	m¥iv
;

20 
sk_out
 *
	msk_out
;

23 (
	tw‹kqueue_w‹k_‚
)(
	tsubmô_w‹kî
 *, 
	tw‹kqueue_w‹k
 *);

24 
	$boﬁ
 (
	tw‹kqueue_¥e_¶ìp_Êush_‚
)(
	tsubmô_w‹kî
 *);

25 (
	tw‹kqueue_¥e_¶ìp_‚
)(
	tsubmô_w‹kî
 *);

26 (
	tw‹kqueue_Æloc_w‹kî_‚
)(
	tsubmô_w‹kî
 *);

27 (
	tw‹kqueue_‰ì_w‹kî_‚
)(
	tsubmô_w‹kî
 *);

28 (
	tw‹kqueue_öô_w‹kî_‚
)(
	tsubmô_w‹kî
 *);

29 (
	tw‹kqueue_exô_w‹kî_‚
)(
	tsubmô_w‹kî
 *, *);

30 (
	tw‹kqueue_upd©e_ac˘_‚
)(
	tsubmô_w‹kî
 *);

32 
	sw‹kqueue_›s
 {

33 
w‹kqueue_w‹k_‚
 *
‚
;

34 
w‹kqueue_¥e_¶ìp_Êush_‚
 *
¥e_¶ìp_Êush_‚
;

35 
w‹kqueue_¥e_¶ìp_‚
 *
¥e_¶ìp_‚
;

37 
w‹kqueue_upd©e_ac˘_‚
 *
upd©e_ac˘_‚
;

39 
w‹kqueue_Æloc_w‹kî_‚
 *
Æloc_w‹kî_‚
;

40 
w‹kqueue_‰ì_w‹kî_‚
 *
‰ì_w‹kî_‚
;

42 
w‹kqueue_öô_w‹kî_‚
 *
öô_w‹kî_‚
;

43 
w‹kqueue_exô_w‹kî_‚
 *
exô_w‹kî_‚
;

45 
ni˚
;

48 
	sw‹kqueue
 {

49 
max_w‹kîs
;

51 
thªad_d©a
 *
td
;

52 
w‹kqueue_›s
 
›s
;

54 
uöt64_t
 
w‹k_£q
;

55 
submô_w‹kî
 *
w‹kîs
;

56 
√xt_‰ì_w‹kî
;

58 
±hªad_c⁄d_t
 
Êush_c⁄d
;

59 
±hªad_muãx_t
 
Êush_lock
;

60 
±hªad_muãx_t
 
°©_lock
;

61 vﬁ©ûê
wake_idÀ
;

64 
	`w‹kqueue_öô
(
thªad_d©a
 *
td
, 
w‹kqueue
 *
wq
, 
w‹kqueue_›s
 *
›s
, 
max_w‹kîs
, 
sk_out
 *sk_out);

65 
	`w‹kqueue_exô
(
w‹kqueue
 *
wq
);

67 
	`w‹kqueue_íqueue
(
w‹kqueue
 *
wq
, 
w‹kqueue_w‹k
 *
w‹k
);

68 
	`w‹kqueue_Êush
(
w‹kqueue
 *
wq
);

70 
ölöe
 
boﬁ
 
	$w‹kqueue_¥e_¶ìp_check
(
submô_w‹kî
 *
sw
)

72 
w‹kqueue
 *
wq
 = 
sw
->wq;

74 i‡(!
wq
->
›s
.
¥e_¶ìp_Êush_‚
)

75  
Ál£
;

77  
wq
->
›s
.
	`¥e_¶ìp_Êush_‚
(
sw
);

78 
	}
}

80 
ölöe
 
	$w‹kqueue_¥e_¶ìp
(
submô_w‹kî
 *
sw
)

82 
w‹kqueue
 *
wq
 = 
sw
->wq;

84 i‡(
wq
->
›s
.
¥e_¶ìp_‚
)

85 
wq
->
›s
.
	`¥e_¶ìp_‚
(
sw
);

86 
	}
}

88 
ölöe
 
	$w‹kqueue_öô_w‹kî
(
submô_w‹kî
 *
sw
)

90 
w‹kqueue
 *
wq
 = 
sw
->wq;

92 i‡(!
wq
->
›s
.
öô_w‹kî_‚
)

95  
wq
->
›s
.
	`öô_w‹kî_‚
(
sw
);

96 
	}
}

98 
ölöe
 
	$w‹kqueue_exô_w‹kî
(
submô_w‹kî
 *
sw
,

99 *
sum_˙t
)

101 
w‹kqueue
 *
wq
 = 
sw
->wq;

102 
tmp
 = 1;

104 i‡(!
wq
->
›s
.
exô_w‹kî_‚
)

107 i‡(!
sum_˙t
)

108 
sum_˙t
 = &
tmp
;

110 
wq
->
›s
.
	`exô_w‹kî_‚
(
sw
, 
sum_˙t
);

111 
	}
}

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/infiniband/sa.h

34 #i‚de‡
INFINIBAND_SA_H


35 
	#INFINIBAND_SA_H


	)

37 
	~<öföib™d/vîbs.h
>

39 
	sibv_ß_∑th_ªc
 {

42 
ibv_gid
 
	mdgid
;

43 
ibv_gid
 
	msgid
;

44 
uöt16_t
 
	mdlid
;

45 
uöt16_t
 
	m¶id
;

46 
	møw_åaffic
;

48 
uöt32_t
 
	mÊow_œbñ
;

49 
uöt8_t
 
	mh›_limô
;

50 
uöt8_t
 
	måaffic_˛ass
;

51 
	mªvîsibÀ
;

52 
uöt8_t
 
	mnumb_∑th
;

53 
uöt16_t
 
	mpkey
;

55 
uöt8_t
 
	m¶
;

56 
uöt8_t
 
	mmtu_£À˘‹
;

57 
uöt8_t
 
	mmtu
;

58 
uöt8_t
 
	møã_£À˘‹
;

59 
uöt8_t
 
	møã
;

60 
uöt8_t
 
	m∑ckë_li„_time_£À˘‹
;

61 
uöt8_t
 
	m∑ckë_li„_time
;

62 
uöt8_t
 
	m¥e„ªn˚
;

65 
	sibv_ß_mcmembî_ªc
 {

66 
ibv_gid
 
	mmgid
;

67 
ibv_gid
 
	mp‹t_gid
;

68 
uöt32_t
 
	mqkey
;

69 
uöt16_t
 
	mmlid
;

70 
uöt8_t
 
	mmtu_£À˘‹
;

71 
uöt8_t
 
	mmtu
;

72 
uöt8_t
 
	måaffic_˛ass
;

73 
uöt16_t
 
	mpkey
;

74 
uöt8_t
 
	møã_£À˘‹
;

75 
uöt8_t
 
	møã
;

76 
uöt8_t
 
	m∑ckë_li„_time_£À˘‹
;

77 
uöt8_t
 
	m∑ckë_li„_time
;

78 
uöt8_t
 
	m¶
;

79 
uöt32_t
 
	mÊow_œbñ
;

80 
uöt8_t
 
	mh›_limô
;

81 
uöt8_t
 
	msc›e
;

82 
uöt8_t
 
	mjoö_°©e
;

83 
	m¥oxy_joö
;

86 
	sibv_ß_£rvi˚_ªc
 {

87 
uöt64_t
 
	mid
;

88 
ibv_gid
 
	mgid
;

89 
uöt16_t
 
	mpkey
;

91 
uöt32_t
 
	mÀa£
;

92 
uöt8_t
 
	mkey
[16];

93 
uöt8_t
 
	m«me
[64];

94 
uöt8_t
 
	md©a8
[16];

95 
uöt16_t
 
	md©a16
[8];

96 
uöt32_t
 
	md©a32
[4];

97 
uöt64_t
 
	md©a64
[2];

100 
	#IBV_PATH_RECORD_REVERSIBLE
 0x80

	)

102 
	sibv_∑th_ªc‹d
 {

103 
uöt64_t
 
	m£rvi˚_id
;

104 
ibv_gid
 
	mdgid
;

105 
ibv_gid
 
	msgid
;

106 
uöt16_t
 
	mdlid
;

107 
uöt16_t
 
	m¶id
;

108 
uöt32_t
 
	mÊowœbñ_h›limô
;

109 
uöt8_t
 
	mt˛ass
;

110 
uöt8_t
 
	mªvîsibÀ_num∑th
;

111 
uöt16_t
 
	mpkey
;

112 
uöt16_t
 
	mqos˛ass_¶
;

113 
uöt8_t
 
	mmtu
;

114 
uöt8_t
 
	møã
;

115 
uöt8_t
 
	m∑ckëli„time
;

116 
uöt8_t
 
	m¥e„ªn˚
;

117 
uöt8_t
 
	mª£rved
[6];

120 
	#IBV_PATH_FLAG_GMP
 (1<<0)

	)

121 
	#IBV_PATH_FLAG_PRIMARY
 (1<<1)

	)

122 
	#IBV_PATH_FLAG_ALTERNATE
 (1<<2)

	)

123 
	#IBV_PATH_FLAG_OUTBOUND
 (1<<3)

	)

124 
	#IBV_PATH_FLAG_INBOUND
 (1<<4)

	)

125 
	#IBV_PATH_FLAG_INBOUND_REVERSE
 (1<<5)

	)

126 
	#IBV_PATH_FLAG_BIDIRECTIONAL
 (
IBV_PATH_FLAG_OUTBOUND
 | \

127 
IBV_PATH_FLAG_INBOUND_REVERSE
)

	)

129 
	sibv_∑th_d©a
 {

130 
uöt32_t
 
	mÊags
;

131 
uöt32_t
 
	mª£rved
;

132 
ibv_∑th_ªc‹d
 
	m∑th
;

	@/usr/include/infiniband/verbs.h

36 #i‚de‡
INFINIBAND_VERBS_H


37 
	#INFINIBAND_VERBS_H


	)

39 
	~<°döt.h
>

40 
	~<±hªad.h
>

41 
	~<°ddef.h
>

42 
	~<î∫o.h
>

44 #ifde‡
__˝lu•lus


45 
	#BEGIN_C_DECLS
 "C" {

	)

46 
	#END_C_DECLS
 }

	)

48 
	#BEGIN_C_DECLS


	)

49 
	#END_C_DECLS


	)

52 #i‡
__GNUC__
 >= 3

53 
	#__©åibuã_c⁄°
 
	`__©åibuã__
((c⁄°))

	)

55 
	#__©åibuã_c⁄°


	)

58 
BEGIN_C_DECLS


60 
	uibv_gid
 {

61 
uöt8_t
 
øw
[16];

63 
uöt64_t
 
sub√t_¥efix
;

64 
uöt64_t
 
öãrÁ˚_id
;

65 } 
globÆ
;

68 #i‚de‡
c⁄èöî_of


76 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

77 ((
ty≥
 *Ë((
uöt8_t
 *)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

80 
	#vext_fõld_avaû
(
ty≥
, 
Êd
, 
sz
Ë(
	`off£tof
—y≥, fldË< (sz))

	)

82 *
	g__VERBS_ABI_IS_EXTENDED
 = ((
uöt8_t
 *Ë
NULL
) - 1;

84 
	eibv_node_ty≥
 {

85 
	mIBV_NODE_UNKNOWN
 = -1,

86 
	mIBV_NODE_CA
 = 1,

87 
	mIBV_NODE_SWITCH
,

88 
	mIBV_NODE_ROUTER
,

89 
	mIBV_NODE_RNIC
,

90 
	mIBV_NODE_USNIC
,

91 
	mIBV_NODE_USNIC_UDP
,

94 
	eibv_å™•‹t_ty≥
 {

95 
	mIBV_TRANSPORT_UNKNOWN
 = -1,

96 
	mIBV_TRANSPORT_IB
 = 0,

97 
	mIBV_TRANSPORT_IWARP
,

98 
	mIBV_TRANSPORT_USNIC
,

99 
	mIBV_TRANSPORT_USNIC_UDP
,

102 
	eibv_devi˚_ˇp_Êags
 {

103 
	mIBV_DEVICE_RESIZE_MAX_WR
 = 1,

104 
	mIBV_DEVICE_BAD_PKEY_CNTR
 = 1 << 1,

105 
	mIBV_DEVICE_BAD_QKEY_CNTR
 = 1 << 2,

106 
	mIBV_DEVICE_RAW_MULTI
 = 1 << 3,

107 
	mIBV_DEVICE_AUTO_PATH_MIG
 = 1 << 4,

108 
	mIBV_DEVICE_CHANGE_PHY_PORT
 = 1 << 5,

109 
	mIBV_DEVICE_UD_AV_PORT_ENFORCE
 = 1 << 6,

110 
	mIBV_DEVICE_CURR_QP_STATE_MOD
 = 1 << 7,

111 
	mIBV_DEVICE_SHUTDOWN_PORT
 = 1 << 8,

112 
	mIBV_DEVICE_INIT_TYPE
 = 1 << 9,

113 
	mIBV_DEVICE_PORT_ACTIVE_EVENT
 = 1 << 10,

114 
	mIBV_DEVICE_SYS_IMAGE_GUID
 = 1 << 11,

115 
	mIBV_DEVICE_RC_RNR_NAK_GEN
 = 1 << 12,

116 
	mIBV_DEVICE_SRQ_RESIZE
 = 1 << 13,

117 
	mIBV_DEVICE_N_NOTIFY_CQ
 = 1 << 14,

118 
	mIBV_DEVICE_IP_CSUM
 = 1 << 18,

119 
	mIBV_DEVICE_XRC
 = 1 << 20,

120 
	mIBV_DEVICE_MANAGED_FLOW_STEERING
 = 1 << 29

123 
	eibv_©omic_ˇp
 {

124 
	mIBV_ATOMIC_NONE
,

125 
	mIBV_ATOMIC_HCA
,

126 
	mIBV_ATOMIC_GLOB


129 
	sibv_devi˚_©å
 {

130 
	mfw_vî
[64];

131 
uöt64_t
 
	mnode_guid
;

132 
uöt64_t
 
	msys_image_guid
;

133 
uöt64_t
 
	mmax_mr_size
;

134 
uöt64_t
 
	m∑ge_size_ˇp
;

135 
uöt32_t
 
	mvíd‹_id
;

136 
uöt32_t
 
	mvíd‹_∑π_id
;

137 
uöt32_t
 
	mhw_vî
;

138 
	mmax_qp
;

139 
	mmax_qp_wr
;

140 
	mdevi˚_ˇp_Êags
;

141 
	mmax_sge
;

142 
	mmax_sge_rd
;

143 
	mmax_cq
;

144 
	mmax_cqe
;

145 
	mmax_mr
;

146 
	mmax_pd
;

147 
	mmax_qp_rd_©om
;

148 
	mmax_ì_rd_©om
;

149 
	mmax_ªs_rd_©om
;

150 
	mmax_qp_öô_rd_©om
;

151 
	mmax_ì_öô_rd_©om
;

152 
ibv_©omic_ˇp
 
	m©omic_ˇp
;

153 
	mmax_ì
;

154 
	mmax_rdd
;

155 
	mmax_mw
;

156 
	mmax_øw_ùv6_qp
;

157 
	mmax_øw_ëhy_qp
;

158 
	mmax_mˇ°_gΩ
;

159 
	mmax_mˇ°_qp_©èch
;

160 
	mmax_tŸÆ_mˇ°_qp_©èch
;

161 
	mmax_ah
;

162 
	mmax_fmr
;

163 
	mmax_m≠_≥r_fmr
;

164 
	mmax_§q
;

165 
	mmax_§q_wr
;

166 
	mmax_§q_sge
;

167 
uöt16_t
 
	mmax_pkeys
;

168 
uöt8_t
 
	mloˇl_ˇ_ack_dñay
;

169 
uöt8_t
 
	mphys_p‹t_˙t
;

172 
	eibv_mtu
 {

173 
	mIBV_MTU_256
 = 1,

174 
	mIBV_MTU_512
 = 2,

175 
	mIBV_MTU_1024
 = 3,

176 
	mIBV_MTU_2048
 = 4,

177 
	mIBV_MTU_4096
 = 5

180 
	eibv_p‹t_°©e
 {

181 
	mIBV_PORT_NOP
 = 0,

182 
	mIBV_PORT_DOWN
 = 1,

183 
	mIBV_PORT_INIT
 = 2,

184 
	mIBV_PORT_ARMED
 = 3,

185 
	mIBV_PORT_ACTIVE
 = 4,

186 
	mIBV_PORT_ACTIVE_DEFER
 = 5

190 
	mIBV_LINK_LAYER_UNSPECIFIED
,

191 
	mIBV_LINK_LAYER_INFINIBAND
,

192 
	mIBV_LINK_LAYER_ETHERNET
,

195 
	sibv_p‹t_©å
 {

196 
ibv_p‹t_°©e
 
	m°©e
;

197 
ibv_mtu
 
	mmax_mtu
;

198 
ibv_mtu
 
	ma˘ive_mtu
;

199 
	mgid_tbl_Àn
;

200 
uöt32_t
 
	mp‹t_ˇp_Êags
;

201 
uöt32_t
 
	mmax_msg_sz
;

202 
uöt32_t
 
	mbad_pkey_˙å
;

203 
uöt32_t
 
	mqkey_viﬁ_˙å
;

204 
uöt16_t
 
	mpkey_tbl_Àn
;

205 
uöt16_t
 
	mlid
;

206 
uöt16_t
 
	msm_lid
;

207 
uöt8_t
 
	mlmc
;

208 
uöt8_t
 
	mmax_vl_num
;

209 
uöt8_t
 
	msm_¶
;

210 
uöt8_t
 
	msub√t_timeout
;

211 
uöt8_t
 
	möô_ty≥_ª∂y
;

212 
uöt8_t
 
	ma˘ive_width
;

213 
uöt8_t
 
	ma˘ive_•ìd
;

214 
uöt8_t
 
	mphys_°©e
;

215 
uöt8_t
 
	mlök_œyî
;

216 
uöt8_t
 
	mª£rved
;

219 
	eibv_evít_ty≥
 {

220 
	mIBV_EVENT_CQ_ERR
,

221 
	mIBV_EVENT_QP_FATAL
,

222 
	mIBV_EVENT_QP_REQ_ERR
,

223 
	mIBV_EVENT_QP_ACCESS_ERR
,

224 
	mIBV_EVENT_COMM_EST
,

225 
	mIBV_EVENT_SQ_DRAINED
,

226 
	mIBV_EVENT_PATH_MIG
,

227 
	mIBV_EVENT_PATH_MIG_ERR
,

228 
	mIBV_EVENT_DEVICE_FATAL
,

229 
	mIBV_EVENT_PORT_ACTIVE
,

230 
	mIBV_EVENT_PORT_ERR
,

231 
	mIBV_EVENT_LID_CHANGE
,

232 
	mIBV_EVENT_PKEY_CHANGE
,

233 
	mIBV_EVENT_SM_CHANGE
,

234 
	mIBV_EVENT_SRQ_ERR
,

235 
	mIBV_EVENT_SRQ_LIMIT_REACHED
,

236 
	mIBV_EVENT_QP_LAST_WQE_REACHED
,

237 
	mIBV_EVENT_CLIENT_REREGISTER
,

238 
	mIBV_EVENT_GID_CHANGE
,

241 
	sibv_async_evít
 {

243 
ibv_cq
 *
	mcq
;

244 
ibv_qp
 *
	mqp
;

245 
ibv_§q
 *
	m§q
;

246 
	mp‹t_num
;

247 } 
	mñemít
;

248 
ibv_evít_ty≥
 
	mevít_ty≥
;

251 
	eibv_wc_°©us
 {

252 
	mIBV_WC_SUCCESS
,

253 
	mIBV_WC_LOC_LEN_ERR
,

254 
	mIBV_WC_LOC_QP_OP_ERR
,

255 
	mIBV_WC_LOC_EEC_OP_ERR
,

256 
	mIBV_WC_LOC_PROT_ERR
,

257 
	mIBV_WC_WR_FLUSH_ERR
,

258 
	mIBV_WC_MW_BIND_ERR
,

259 
	mIBV_WC_BAD_RESP_ERR
,

260 
	mIBV_WC_LOC_ACCESS_ERR
,

261 
	mIBV_WC_REM_INV_REQ_ERR
,

262 
	mIBV_WC_REM_ACCESS_ERR
,

263 
	mIBV_WC_REM_OP_ERR
,

264 
	mIBV_WC_RETRY_EXC_ERR
,

265 
	mIBV_WC_RNR_RETRY_EXC_ERR
,

266 
	mIBV_WC_LOC_RDD_VIOL_ERR
,

267 
	mIBV_WC_REM_INV_RD_REQ_ERR
,

268 
	mIBV_WC_REM_ABORT_ERR
,

269 
	mIBV_WC_INV_EECN_ERR
,

270 
	mIBV_WC_INV_EEC_STATE_ERR
,

271 
	mIBV_WC_FATAL_ERR
,

272 
	mIBV_WC_RESP_TIMEOUT_ERR
,

273 
	mIBV_WC_GENERAL_ERR


275 c⁄° *
ibv_wc_°©us_°r
(
ibv_wc_°©us
 
°©us
);

277 
	eibv_wc_›code
 {

278 
	mIBV_WC_SEND
,

279 
	mIBV_WC_RDMA_WRITE
,

280 
	mIBV_WC_RDMA_READ
,

281 
	mIBV_WC_COMP_SWAP
,

282 
	mIBV_WC_FETCH_ADD
,

283 
	mIBV_WC_BIND_MW
,

288 
	mIBV_WC_RECV
 = 1 << 7,

289 
	mIBV_WC_RECV_RDMA_WITH_IMM


292 
	eibv_wc_Êags
 {

293 
	mIBV_WC_GRH
 = 1 << 0,

294 
	mIBV_WC_WITH_IMM
 = 1 << 1

297 
	sibv_wc
 {

298 
uöt64_t
 
	mwr_id
;

299 
ibv_wc_°©us
 
	m°©us
;

300 
ibv_wc_›code
 
	m›code
;

301 
uöt32_t
 
	mvíd‹_îr
;

302 
uöt32_t
 
	mbyã_Àn
;

303 
uöt32_t
 
	mimm_d©a
;

304 
uöt32_t
 
	mqp_num
;

305 
uöt32_t
 
	m§c_qp
;

306 
	mwc_Êags
;

307 
uöt16_t
 
	mpkey_ödex
;

308 
uöt16_t
 
	m¶id
;

309 
uöt8_t
 
	m¶
;

310 
uöt8_t
 
	mdlid_∑th_bôs
;

313 
	eibv_ac˚ss_Êags
 {

314 
	mIBV_ACCESS_LOCAL_WRITE
 = 1,

315 
	mIBV_ACCESS_REMOTE_WRITE
 = (1<<1),

316 
	mIBV_ACCESS_REMOTE_READ
 = (1<<2),

317 
	mIBV_ACCESS_REMOTE_ATOMIC
 = (1<<3),

318 
	mIBV_ACCESS_MW_BIND
 = (1<<4)

321 
	sibv_pd
 {

322 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

323 
uöt32_t
 
	mh™dÀ
;

326 
	eibv_xrcd_öô_©å_mask
 {

327 
	mIBV_XRCD_INIT_ATTR_FD
 = 1 << 0,

328 
	mIBV_XRCD_INIT_ATTR_OFLAGS
 = 1 << 1,

329 
	mIBV_XRCD_INIT_ATTR_RESERVED
 = 1 << 2

332 
	sibv_xrcd_öô_©å
 {

333 
uöt32_t
 
	mcomp_mask
;

334 
	mfd
;

335 
	moÊags
;

338 
	sibv_xrcd
 {

339 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

342 
	eibv_ªªg_mr_Êags
 {

343 
	mIBV_REREG_MR_CHANGE_TRANSLATION
 = (1 << 0),

344 
	mIBV_REREG_MR_CHANGE_PD
 = (1 << 1),

345 
	mIBV_REREG_MR_CHANGE_ACCESS
 = (1 << 2),

346 
	mIBV_REREG_MR_KEEP_VALID
 = (1 << 3)

349 
	sibv_mr
 {

350 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

351 
ibv_pd
 *
	mpd
;

352 *
	maddr
;

353 
size_t
 
	mÀngth
;

354 
uöt32_t
 
	mh™dÀ
;

355 
uöt32_t
 
	mlkey
;

356 
uöt32_t
 
	mrkey
;

359 
	eibv_mw_ty≥
 {

360 
	mIBV_MW_TYPE_1
 = 1,

361 
	mIBV_MW_TYPE_2
 = 2

364 
	sibv_mw
 {

365 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

366 
ibv_pd
 *
	mpd
;

367 
uöt32_t
 
	mrkey
;

370 
	sibv_globÆ_rouã
 {

371 
ibv_gid
 
	mdgid
;

372 
uöt32_t
 
	mÊow_œbñ
;

373 
uöt8_t
 
	msgid_ödex
;

374 
uöt8_t
 
	mh›_limô
;

375 
uöt8_t
 
	måaffic_˛ass
;

378 
	sibv_grh
 {

379 
uöt32_t
 
	mvîsi⁄_t˛ass_Êow
;

380 
uöt16_t
 
	m∑yÀn
;

381 
uöt8_t
 
	m√xt_hdr
;

382 
uöt8_t
 
	mh›_limô
;

383 
ibv_gid
 
	msgid
;

384 
ibv_gid
 
	mdgid
;

387 
	eibv_øã
 {

388 
	mIBV_RATE_MAX
 = 0,

389 
	mIBV_RATE_2_5_GBPS
 = 2,

390 
	mIBV_RATE_5_GBPS
 = 5,

391 
	mIBV_RATE_10_GBPS
 = 3,

392 
	mIBV_RATE_20_GBPS
 = 6,

393 
	mIBV_RATE_30_GBPS
 = 4,

394 
	mIBV_RATE_40_GBPS
 = 7,

395 
	mIBV_RATE_60_GBPS
 = 8,

396 
	mIBV_RATE_80_GBPS
 = 9,

397 
	mIBV_RATE_120_GBPS
 = 10,

398 
	mIBV_RATE_14_GBPS
 = 11,

399 
	mIBV_RATE_56_GBPS
 = 12,

400 
	mIBV_RATE_112_GBPS
 = 13,

401 
	mIBV_RATE_168_GBPS
 = 14,

402 
	mIBV_RATE_25_GBPS
 = 15,

403 
	mIBV_RATE_100_GBPS
 = 16,

404 
	mIBV_RATE_200_GBPS
 = 17,

405 
	mIBV_RATE_300_GBPS
 = 18

414 
	$ibv_øã_to_mu…
(
ibv_øã
 
øã
Ë
__©åibuã_c⁄°
;

420 
ibv_øã
 
	$mu…_to_ibv_øã
(
mu…
Ë
__©åibuã_c⁄°
;

427 
	$ibv_øã_to_mbps
(
ibv_øã
 
øã
Ë
__©åibuã_c⁄°
;

433 
ibv_øã
 
	$mbps_to_ibv_øã
(
mbps
Ë
__©åibuã_c⁄°
;

435 
	sibv_ah_©å
 {

436 
ibv_globÆ_rouã
 
grh
;

437 
uöt16_t
 
dlid
;

438 
uöt8_t
 
¶
;

439 
uöt8_t
 
§c_∑th_bôs
;

440 
uöt8_t
 
°©ic_øã
;

441 
uöt8_t
 
is_globÆ
;

442 
uöt8_t
 
p‹t_num
;

445 
	eibv_§q_©å_mask
 {

446 
IBV_SRQ_MAX_WR
 = 1 << 0,

447 
IBV_SRQ_LIMIT
 = 1 << 1

450 
	sibv_§q_©å
 {

451 
uöt32_t
 
max_wr
;

452 
uöt32_t
 
max_sge
;

453 
uöt32_t
 
§q_limô
;

456 
	sibv_§q_öô_©å
 {

457 *
§q_c⁄ãxt
;

458 
ibv_§q_©å
 
©å
;

461 
	eibv_§q_ty≥
 {

462 
IBV_SRQT_BASIC
,

463 
IBV_SRQT_XRC


466 
	eibv_§q_öô_©å_mask
 {

467 
IBV_SRQ_INIT_ATTR_TYPE
 = 1 << 0,

468 
IBV_SRQ_INIT_ATTR_PD
 = 1 << 1,

469 
IBV_SRQ_INIT_ATTR_XRCD
 = 1 << 2,

470 
IBV_SRQ_INIT_ATTR_CQ
 = 1 << 3,

471 
IBV_SRQ_INIT_ATTR_RESERVED
 = 1 << 4

474 
	sibv_§q_öô_©å_ex
 {

475 *
§q_c⁄ãxt
;

476 
ibv_§q_©å
 
©å
;

478 
uöt32_t
 
comp_mask
;

479 
ibv_§q_ty≥
 
§q_ty≥
;

480 
ibv_pd
 *
pd
;

481 
ibv_xrcd
 *
xrcd
;

482 
ibv_cq
 *
cq
;

485 
	eibv_qp_ty≥
 {

486 
IBV_QPT_RC
 = 2,

487 
IBV_QPT_UC
,

488 
IBV_QPT_UD
,

489 
IBV_QPT_RAW_PACKET
 = 8,

490 
IBV_QPT_XRC_SEND
 = 9,

491 
IBV_QPT_XRC_RECV


494 
	sibv_qp_ˇp
 {

495 
uöt32_t
 
max_£nd_wr
;

496 
uöt32_t
 
max_ªcv_wr
;

497 
uöt32_t
 
max_£nd_sge
;

498 
uöt32_t
 
max_ªcv_sge
;

499 
uöt32_t
 
max_ölöe_d©a
;

502 
	sibv_qp_öô_©å
 {

503 *
qp_c⁄ãxt
;

504 
ibv_cq
 *
£nd_cq
;

505 
ibv_cq
 *
ªcv_cq
;

506 
ibv_§q
 *
§q
;

507 
ibv_qp_ˇp
 
ˇp
;

508 
ibv_qp_ty≥
 
qp_ty≥
;

509 
sq_sig_Æl
;

512 
	eibv_qp_öô_©å_mask
 {

513 
IBV_QP_INIT_ATTR_PD
 = 1 << 0,

514 
IBV_QP_INIT_ATTR_XRCD
 = 1 << 1,

515 
IBV_QP_INIT_ATTR_RESERVED
 = 1 << 2

518 
	sibv_qp_öô_©å_ex
 {

519 *
qp_c⁄ãxt
;

520 
ibv_cq
 *
£nd_cq
;

521 
ibv_cq
 *
ªcv_cq
;

522 
ibv_§q
 *
§q
;

523 
ibv_qp_ˇp
 
ˇp
;

524 
ibv_qp_ty≥
 
qp_ty≥
;

525 
sq_sig_Æl
;

527 
uöt32_t
 
comp_mask
;

528 
ibv_pd
 *
pd
;

529 
ibv_xrcd
 *
xrcd
;

532 
	eibv_qp_›í_©å_mask
 {

533 
IBV_QP_OPEN_ATTR_NUM
 = 1 << 0,

534 
IBV_QP_OPEN_ATTR_XRCD
 = 1 << 1,

535 
IBV_QP_OPEN_ATTR_CONTEXT
 = 1 << 2,

536 
IBV_QP_OPEN_ATTR_TYPE
 = 1 << 3,

537 
IBV_QP_OPEN_ATTR_RESERVED
 = 1 << 4

540 
	sibv_qp_›í_©å
 {

541 
uöt32_t
 
comp_mask
;

542 
uöt32_t
 
qp_num
;

543 
ibv_xrcd
 *
xrcd
;

544 *
qp_c⁄ãxt
;

545 
ibv_qp_ty≥
 
qp_ty≥
;

548 
	eibv_qp_©å_mask
 {

549 
IBV_QP_STATE
 = 1 << 0,

550 
IBV_QP_CUR_STATE
 = 1 << 1,

551 
IBV_QP_EN_SQD_ASYNC_NOTIFY
 = 1 << 2,

552 
IBV_QP_ACCESS_FLAGS
 = 1 << 3,

553 
IBV_QP_PKEY_INDEX
 = 1 << 4,

554 
IBV_QP_PORT
 = 1 << 5,

555 
IBV_QP_QKEY
 = 1 << 6,

556 
IBV_QP_AV
 = 1 << 7,

557 
IBV_QP_PATH_MTU
 = 1 << 8,

558 
IBV_QP_TIMEOUT
 = 1 << 9,

559 
IBV_QP_RETRY_CNT
 = 1 << 10,

560 
IBV_QP_RNR_RETRY
 = 1 << 11,

561 
IBV_QP_RQ_PSN
 = 1 << 12,

562 
IBV_QP_MAX_QP_RD_ATOMIC
 = 1 << 13,

563 
IBV_QP_ALT_PATH
 = 1 << 14,

564 
IBV_QP_MIN_RNR_TIMER
 = 1 << 15,

565 
IBV_QP_SQ_PSN
 = 1 << 16,

566 
IBV_QP_MAX_DEST_RD_ATOMIC
 = 1 << 17,

567 
IBV_QP_PATH_MIG_STATE
 = 1 << 18,

568 
IBV_QP_CAP
 = 1 << 19,

569 
IBV_QP_DEST_QPN
 = 1 << 20

572 
	eibv_qp_°©e
 {

573 
IBV_QPS_RESET
,

574 
IBV_QPS_INIT
,

575 
IBV_QPS_RTR
,

576 
IBV_QPS_RTS
,

577 
IBV_QPS_SQD
,

578 
IBV_QPS_SQE
,

579 
IBV_QPS_ERR
,

580 
IBV_QPS_UNKNOWN


583 
	eibv_mig_°©e
 {

584 
IBV_MIG_MIGRATED
,

585 
IBV_MIG_REARM
,

586 
IBV_MIG_ARMED


589 
	sibv_qp_©å
 {

590 
ibv_qp_°©e
 
qp_°©e
;

591 
ibv_qp_°©e
 
cur_qp_°©e
;

592 
ibv_mtu
 
∑th_mtu
;

593 
ibv_mig_°©e
 
∑th_mig_°©e
;

594 
uöt32_t
 
qkey
;

595 
uöt32_t
 
rq_p¢
;

596 
uöt32_t
 
sq_p¢
;

597 
uöt32_t
 
de°_qp_num
;

598 
qp_ac˚ss_Êags
;

599 
ibv_qp_ˇp
 
ˇp
;

600 
ibv_ah_©å
 
ah_©å
;

601 
ibv_ah_©å
 
Æt_ah_©å
;

602 
uöt16_t
 
pkey_ödex
;

603 
uöt16_t
 
Æt_pkey_ödex
;

604 
uöt8_t
 
í_sqd_async_nŸify
;

605 
uöt8_t
 
sq_døöög
;

606 
uöt8_t
 
max_rd_©omic
;

607 
uöt8_t
 
max_de°_rd_©omic
;

608 
uöt8_t
 
mö_∫r_timî
;

609 
uöt8_t
 
p‹t_num
;

610 
uöt8_t
 
timeout
;

611 
uöt8_t
 
ªåy_˙t
;

612 
uöt8_t
 
∫r_ªåy
;

613 
uöt8_t
 
Æt_p‹t_num
;

614 
uöt8_t
 
Æt_timeout
;

617 
	eibv_wr_›code
 {

618 
IBV_WR_RDMA_WRITE
,

619 
IBV_WR_RDMA_WRITE_WITH_IMM
,

620 
IBV_WR_SEND
,

621 
IBV_WR_SEND_WITH_IMM
,

622 
IBV_WR_RDMA_READ
,

623 
IBV_WR_ATOMIC_CMP_AND_SWP
,

624 
IBV_WR_ATOMIC_FETCH_AND_ADD


627 
	eibv_£nd_Êags
 {

628 
IBV_SEND_FENCE
 = 1 << 0,

629 
IBV_SEND_SIGNALED
 = 1 << 1,

630 
IBV_SEND_SOLICITED
 = 1 << 2,

631 
IBV_SEND_INLINE
 = 1 << 3,

632 
IBV_SEND_IP_CSUM
 = 1 << 4

635 
	sibv_sge
 {

636 
uöt64_t
 
addr
;

637 
uöt32_t
 
Àngth
;

638 
uöt32_t
 
lkey
;

641 
	sibv_£nd_wr
 {

642 
uöt64_t
 
wr_id
;

643 
ibv_£nd_wr
 *
√xt
;

644 
ibv_sge
 *
sg_li°
;

645 
num_sge
;

646 
ibv_wr_›code
 
›code
;

647 
£nd_Êags
;

648 
uöt32_t
 
imm_d©a
;

651 
uöt64_t
 
ªmŸe_addr
;

652 
uöt32_t
 
rkey
;

653 } 
rdma
;

655 
uöt64_t
 
ªmŸe_addr
;

656 
uöt64_t
 
com∑ª_add
;

657 
uöt64_t
 
sw≠
;

658 
uöt32_t
 
rkey
;

659 } 
©omic
;

661 
ibv_ah
 *
ah
;

662 
uöt32_t
 
ªmŸe_q≤
;

663 
uöt32_t
 
ªmŸe_qkey
;

664 } 
ud
;

665 } 
wr
;

668 
uöt32_t
 
ªmŸe_§qn
;

669 } 
xrc
;

670 } 
qp_ty≥
;

673 
	sibv_ªcv_wr
 {

674 
uöt64_t
 
wr_id
;

675 
ibv_ªcv_wr
 *
√xt
;

676 
ibv_sge
 *
sg_li°
;

677 
num_sge
;

680 
	sibv_mw_böd
 {

681 
uöt64_t
 
wr_id
;

682 
ibv_mr
 *
mr
;

683 *
addr
;

684 
size_t
 
Àngth
;

685 
£nd_Êags
;

686 
mw_ac˚ss_Êags
;

689 
	sibv_§q
 {

690 
ibv_c⁄ãxt
 *
c⁄ãxt
;

691 *
§q_c⁄ãxt
;

692 
ibv_pd
 *
pd
;

693 
uöt32_t
 
h™dÀ
;

695 
±hªad_muãx_t
 
muãx
;

696 
±hªad_c⁄d_t
 
c⁄d
;

697 
uöt32_t
 
evíts_com∂ëed
;

700 
	sibv_qp
 {

701 
ibv_c⁄ãxt
 *
c⁄ãxt
;

702 *
qp_c⁄ãxt
;

703 
ibv_pd
 *
pd
;

704 
ibv_cq
 *
£nd_cq
;

705 
ibv_cq
 *
ªcv_cq
;

706 
ibv_§q
 *
§q
;

707 
uöt32_t
 
h™dÀ
;

708 
uöt32_t
 
qp_num
;

709 
ibv_qp_°©e
 
°©e
;

710 
ibv_qp_ty≥
 
qp_ty≥
;

712 
±hªad_muãx_t
 
muãx
;

713 
±hªad_c⁄d_t
 
c⁄d
;

714 
uöt32_t
 
evíts_com∂ëed
;

717 
	sibv_comp_ch™√l
 {

718 
ibv_c⁄ãxt
 *
c⁄ãxt
;

719 
fd
;

720 
ªf˙t
;

723 
	sibv_cq
 {

724 
ibv_c⁄ãxt
 *
c⁄ãxt
;

725 
ibv_comp_ch™√l
 *
ch™√l
;

726 *
cq_c⁄ãxt
;

727 
uöt32_t
 
h™dÀ
;

728 
cqe
;

730 
±hªad_muãx_t
 
muãx
;

731 
±hªad_c⁄d_t
 
c⁄d
;

732 
uöt32_t
 
comp_evíts_com∂ëed
;

733 
uöt32_t
 
async_evíts_com∂ëed
;

736 
	sibv_ah
 {

737 
ibv_c⁄ãxt
 *
c⁄ãxt
;

738 
ibv_pd
 *
pd
;

739 
uöt32_t
 
h™dÀ
;

742 
	eibv_Êow_Êags
 {

743 
IBV_FLOW_ATTR_FLAGS_ALLOW_LOOP_BACK
 = 1,

746 
	eibv_Êow_©å_ty≥
 {

748 
IBV_FLOW_ATTR_NORMAL
 = 0x0,

752 
IBV_FLOW_ATTR_ALL_DEFAULT
 = 0x1,

756 
IBV_FLOW_ATTR_MC_DEFAULT
 = 0x2,

759 
	eibv_Êow_•ec_ty≥
 {

760 
IBV_FLOW_SPEC_ETH
 = 0x20,

761 
IBV_FLOW_SPEC_IPV4
 = 0x30,

762 
IBV_FLOW_SPEC_TCP
 = 0x40,

763 
IBV_FLOW_SPEC_UDP
 = 0x41,

766 
	sibv_Êow_ëh_fûãr
 {

767 
uöt8_t
 
d°_mac
[6];

768 
uöt8_t
 
§c_mac
[6];

769 
uöt16_t
 
ëhî_ty≥
;

773 
uöt16_t
 
vœn_èg
;

776 
	sibv_Êow_•ec_ëh
 {

777 
ibv_Êow_•ec_ty≥
 
ty≥
;

778 
uöt16_t
 
size
;

779 
ibv_Êow_ëh_fûãr
 
vÆ
;

780 
ibv_Êow_ëh_fûãr
 
mask
;

783 
	sibv_Êow_ùv4_fûãr
 {

784 
uöt32_t
 
§c_ù
;

785 
uöt32_t
 
d°_ù
;

788 
	sibv_Êow_•ec_ùv4
 {

789 
ibv_Êow_•ec_ty≥
 
ty≥
;

790 
uöt16_t
 
size
;

791 
ibv_Êow_ùv4_fûãr
 
vÆ
;

792 
ibv_Êow_ùv4_fûãr
 
mask
;

795 
	sibv_Êow_t˝_udp_fûãr
 {

796 
uöt16_t
 
d°_p‹t
;

797 
uöt16_t
 
§c_p‹t
;

800 
	sibv_Êow_•ec_t˝_udp
 {

801 
ibv_Êow_•ec_ty≥
 
ty≥
;

802 
uöt16_t
 
size
;

803 
ibv_Êow_t˝_udp_fûãr
 
vÆ
;

804 
ibv_Êow_t˝_udp_fûãr
 
mask
;

807 
	sibv_Êow_•ec
 {

810 
ibv_Êow_•ec_ty≥
 
ty≥
;

811 
uöt16_t
 
size
;

812 } 
hdr
;

813 
ibv_Êow_•ec_ëh
 
ëh
;

814 
ibv_Êow_•ec_ùv4
 
ùv4
;

815 
ibv_Êow_•ec_t˝_udp
 
t˝_udp
;

819 
	sibv_Êow_©å
 {

820 
uöt32_t
 
comp_mask
;

821 
ibv_Êow_©å_ty≥
 
ty≥
;

822 
uöt16_t
 
size
;

823 
uöt16_t
 
¥i‹ôy
;

824 
uöt8_t
 
num_of_•ecs
;

825 
uöt8_t
 
p‹t
;

826 
uöt32_t
 
Êags
;

833 
	sibv_Êow
 {

834 
uöt32_t
 
comp_mask
;

835 
ibv_c⁄ãxt
 *
c⁄ãxt
;

836 
uöt32_t
 
h™dÀ
;

839 
ibv_devi˚
;

840 
ibv_c⁄ãxt
;

842 
	sibv_devi˚_›s
 {

843 
ibv_c⁄ãxt
 * (*
Æloc_c⁄ãxt
)(
ibv_devi˚
 *
devi˚
, 
cmd_fd
);

844 (*
‰ì_c⁄ãxt
)(
ibv_c⁄ãxt
 *
c⁄ãxt
);

848 
IBV_SYSFS_NAME_MAX
 = 64,

849 
IBV_SYSFS_PATH_MAX
 = 256

852 
	sibv_devi˚
 {

853 
ibv_devi˚_›s
 
›s
;

854 
ibv_node_ty≥
 
node_ty≥
;

855 
ibv_å™•‹t_ty≥
 
å™•‹t_ty≥
;

857 
«me
[
IBV_SYSFS_NAME_MAX
];

859 
dev_«me
[
IBV_SYSFS_NAME_MAX
];

861 
dev_∑th
[
IBV_SYSFS_PATH_MAX
];

863 
ibdev_∑th
[
IBV_SYSFS_PATH_MAX
];

866 
	svîbs_devi˚
 {

867 
ibv_devi˚
 
devi˚
;

868 
size_t
 
sz
;

869 
size_t
 
size_of_c⁄ãxt
;

870 (*
öô_c⁄ãxt
)(
vîbs_devi˚
 *
devi˚
,

871 
ibv_c⁄ãxt
 *
˘x
, 
cmd_fd
);

872 (*
unöô_c⁄ãxt
)(
vîbs_devi˚
 *
devi˚
,

873 
ibv_c⁄ãxt
 *
˘x
);

877 
	sibv_c⁄ãxt_›s
 {

878 (*
quîy_devi˚
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

879 
ibv_devi˚_©å
 *
devi˚_©å
);

880 (*
quîy_p‹t
)(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

881 
ibv_p‹t_©å
 *
p‹t_©å
);

882 
ibv_pd
 * (*
Æloc_pd
)(
ibv_c⁄ãxt
 *
c⁄ãxt
);

883 (*
dóŒoc_pd
)(
ibv_pd
 *
pd
);

884 
ibv_mr
 * (*
ªg_mr
)(
ibv_pd
 *
pd
, *
addr
, 
size_t
 
Àngth
,

885 
ac˚ss
);

886 
ibv_mr
 * (*
ªªg_mr
)(ibv_m∏*
mr
,

887 
Êags
,

888 
ibv_pd
 *
pd
, *
addr
,

889 
size_t
 
Àngth
,

890 
ac˚ss
);

891 (*
dîeg_mr
)(
ibv_mr
 *
mr
);

892 
ibv_mw
 * (*
Æloc_mw
)(
ibv_pd
 *
pd
, 
ibv_mw_ty≥
 
ty≥
);

893 (*
böd_mw
)(
ibv_qp
 *
qp
, 
ibv_mw
 *
mw
,

894 
ibv_mw_böd
 *
mw_böd
);

895 (*
dóŒoc_mw
)(
ibv_mw
 *
mw
);

896 
ibv_cq
 * (*
¸óã_cq
)(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

897 
ibv_comp_ch™√l
 *
ch™√l
,

898 
comp_ve˘‹
);

899 (*
pﬁl_cq
)(
ibv_cq
 *
cq
, 
num_íåõs
, 
ibv_wc
 *
wc
);

900 (*
ªq_nŸify_cq
)(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
);

901 (*
cq_evít
)(
ibv_cq
 *
cq
);

902 (*
ªsize_cq
)(
ibv_cq
 *
cq
, 
cqe
);

903 (*
de°roy_cq
)(
ibv_cq
 *
cq
);

904 
ibv_§q
 * (*
¸óã_§q
)(
ibv_pd
 *
pd
,

905 
ibv_§q_öô_©å
 *
§q_öô_©å
);

906 (*
modify_§q
)(
ibv_§q
 *
§q
,

907 
ibv_§q_©å
 *
§q_©å
,

908 
§q_©å_mask
);

909 (*
quîy_§q
)(
ibv_§q
 *
§q
,

910 
ibv_§q_©å
 *
§q_©å
);

911 (*
de°roy_§q
)(
ibv_§q
 *
§q
);

912 (*
po°_§q_ªcv
)(
ibv_§q
 *
§q
,

913 
ibv_ªcv_wr
 *
ªcv_wr
,

914 
ibv_ªcv_wr
 **
bad_ªcv_wr
);

915 
ibv_qp
 * (*
¸óã_qp
)(
ibv_pd
 *
pd
, 
ibv_qp_öô_©å
 *
©å
);

916 (*
quîy_qp
)(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

917 
©å_mask
,

918 
ibv_qp_öô_©å
 *
öô_©å
);

919 (*
modify_qp
)(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

920 
©å_mask
);

921 (*
de°roy_qp
)(
ibv_qp
 *
qp
);

922 (*
po°_£nd
)(
ibv_qp
 *
qp
, 
ibv_£nd_wr
 *
wr
,

923 
ibv_£nd_wr
 **
bad_wr
);

924 (*
po°_ªcv
)(
ibv_qp
 *
qp
, 
ibv_ªcv_wr
 *
wr
,

925 
ibv_ªcv_wr
 **
bad_wr
);

926 
ibv_ah
 * (*
¸óã_ah
)(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
);

927 (*
de°roy_ah
)(
ibv_ah
 *
ah
);

928 (*
©èch_mˇ°
)(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
,

929 
uöt16_t
 
lid
);

930 (*
dëach_mˇ°
)(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
,

931 
uöt16_t
 
lid
);

932 (*
async_evít
)(
ibv_async_evít
 *
evít
);

935 
	sibv_c⁄ãxt
 {

936 
ibv_devi˚
 *
devi˚
;

937 
ibv_c⁄ãxt_›s
 
›s
;

938 
cmd_fd
;

939 
async_fd
;

940 
num_comp_ve˘‹s
;

941 
±hªad_muãx_t
 
muãx
;

942 *
abi_com∑t
;

945 
	evîbs_c⁄ãxt_mask
 {

946 
VERBS_CONTEXT_XRCD
 = 1 << 0,

947 
VERBS_CONTEXT_SRQ
 = 1 << 1,

948 
VERBS_CONTEXT_QP
 = 1 << 2,

949 
VERBS_CONTEXT_CREATE_FLOW
 = 1 << 3,

950 
VERBS_CONTEXT_DESTROY_FLOW
 = 1 << 4,

951 
VERBS_CONTEXT_RESERVED
 = 1 << 5

954 
	svîbs_c⁄ãxt
 {

956 (*
drv_ibv_de°roy_Êow
Ë(
ibv_Êow
 *
Êow
);

957 (*
lib_ibv_de°roy_Êow
Ë(
ibv_Êow
 *
Êow
);

958 
ibv_Êow
 * (*
drv_ibv_¸óã_Êow
Ë(
ibv_qp
 *
qp
,

959 
ibv_Êow_©å


960 *
Êow_©å
);

961 
ibv_Êow
 * (*
lib_ibv_¸óã_Êow
Ë(
ibv_qp
 *
qp
,

962 
ibv_Êow_©å


963 *
Êow_©å
);

964 
ibv_qp
 *(*
›í_qp
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

965 
ibv_qp_›í_©å
 *
©å
);

966 
ibv_qp
 *(*
¸óã_qp_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

967 
ibv_qp_öô_©å_ex
 *
qp_öô_©å_ex
);

968 (*
gë_§q_num
)(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
);

969 
ibv_§q
 * (*
¸óã_§q_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

970 
ibv_§q_öô_©å_ex
 *
§q_öô_©å_ex
);

971 
ibv_xrcd
 * (*
›í_xrcd
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

972 
ibv_xrcd_öô_©å
 *
xrcd_öô_©å
);

973 (*
˛o£_xrcd
)(
ibv_xrcd
 *
xrcd
);

974 
uöt64_t
 
has_comp_mask
;

975 
size_t
 
sz
;

976 
ibv_c⁄ãxt
 
c⁄ãxt
;

979 
ölöe
 
vîbs_c⁄ãxt
 *
	$vîbs_gë_˘x
(
ibv_c⁄ãxt
 *
˘x
)

981  (
˘x
->
abi_com∑t
 !
__VERBS_ABI_IS_EXTENDED
) ?

982 
NULL
 : 
	`c⁄èöî_of
(
˘x
, 
vîbs_c⁄ãxt
, 
c⁄ãxt
);

983 
	}
}

985 
	#vîbs_gë_˘x_›
(
˘x
, 
›
) ({ \

986 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x
(
˘x
); \

987 (!
v˘x
 || (v˘x->
sz
 < (*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt
, 
›
)) || \

988 !
v˘x
->
›
Ë? 
NULL
 : v˘x; })

	)

990 
	#vîbs_£t_˘x_›
(
_v˘x
, 
›
, 
±r
) ({ \

991 
vîbs_c⁄ãxt
 *
v˘x
 = 
_v˘x
; \

992 i‡(
v˘x
 && (v˘x->
sz
 >(*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt
, 
›
))) \

993 
v˘x
->
›
 = 
±r
; })

	)

995 
ölöe
 
vîbs_devi˚
 *
	$vîbs_gë_devi˚
(

996 c⁄° 
ibv_devi˚
 *
dev
)

998  (
dev
->
›s
.
Æloc_c⁄ãxt
) ?

999 
NULL
 : 
	`c⁄èöî_of
(
dev
, 
vîbs_devi˚
, 
devi˚
);

1000 
	}
}

1010 
ibv_devi˚
 **
ibv_gë_devi˚_li°
(*
num_devi˚s
);

1020 
ibv_‰ì_devi˚_li°
(
ibv_devi˚
 **
li°
);

1025 c⁄° *
ibv_gë_devi˚_«me
(
ibv_devi˚
 *
devi˚
);

1030 
uöt64_t
 
ibv_gë_devi˚_guid
(
ibv_devi˚
 *
devi˚
);

1035 
ibv_c⁄ãxt
 *
ibv_›í_devi˚
(
ibv_devi˚
 *
devi˚
);

1040 
ibv_˛o£_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1049 
ibv_gë_async_evít
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1050 
ibv_async_evít
 *
evít
);

1062 
ibv_ack_async_evít
(
ibv_async_evít
 *
evít
);

1067 
ibv_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1068 
ibv_devi˚_©å
 *
devi˚_©å
);

1073 
ibv_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1074 
ibv_p‹t_©å
 *
p‹t_©å
);

1076 
ölöe
 
	$___ibv_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1077 
uöt8_t
 
p‹t_num
,

1078 
ibv_p‹t_©å
 *
p‹t_©å
)

1081 
p‹t_©å
->
lök_œyî
 = 
IBV_LINK_LAYER_UNSPECIFIED
;

1082 
p‹t_©å
->
ª£rved
 = 0;

1084  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
);

1085 
	}
}

1087 
	#ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
) \

1088 
	`___ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
)

	)

1093 
ibv_quîy_gid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1094 
ödex
, 
ibv_gid
 *
gid
);

1099 
ibv_quîy_pkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1100 
ödex
, 
uöt16_t
 *
pkey
);

1105 
ibv_pd
 *
ibv_Æloc_pd
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1110 
ibv_dóŒoc_pd
(
ibv_pd
 *
pd
);

1112 
ölöe
 
ibv_Êow
 *
	$ibv_¸óã_Êow
(
ibv_qp
 *
qp
,

1113 
ibv_Êow_©å
 *
Êow
)

1115 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
qp
->
c⁄ãxt
,

1116 
lib_ibv_¸óã_Êow
);

1117 i‡(!
v˘x
 || !v˘x->
lib_ibv_¸óã_Êow
)

1118  
NULL
;

1120  
v˘x
->
	`lib_ibv_¸óã_Êow
(
qp
, 
Êow
);

1121 
	}
}

1123 
ölöe
 
	$ibv_de°roy_Êow
(
ibv_Êow
 *
Êow_id
)

1125 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
Êow_id
->
c⁄ãxt
,

1126 
lib_ibv_de°roy_Êow
);

1127 i‡(!
v˘x
 || !v˘x->
lib_ibv_de°roy_Êow
)

1128  -
ENOSYS
;

1129  
v˘x
->
	`lib_ibv_de°roy_Êow
(
Êow_id
);

1130 
	}
}

1135 
ölöe
 
ibv_xrcd
 *

1136 
	$ibv_›í_xrcd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_xrcd_öô_©å
 *
xrcd_öô_©å
)

1138 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
›í_xrcd
);

1139 i‡(!
v˘x
) {

1140 
î∫o
 = 
ENOSYS
;

1141  
NULL
;

1143  
v˘x
->
	`›í_xrcd
(
c⁄ãxt
, 
xrcd_öô_©å
);

1144 
	}
}

1149 
ölöe
 
	$ibv_˛o£_xrcd
(
ibv_xrcd
 *
xrcd
)

1151 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x
(
xrcd
->
c⁄ãxt
);

1152  
v˘x
->
	`˛o£_xrcd
(
xrcd
);

1153 
	}
}

1158 
ibv_mr
 *
ibv_ªg_mr
(
ibv_pd
 *
pd
, *
addr
,

1159 
size_t
 
Àngth
, 
ac˚ss
);

1164 
ibv_dîeg_mr
(
ibv_mr
 *
mr
);

1169 
ibv_comp_ch™√l
 *
ibv_¸óã_comp_ch™√l
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1174 
ibv_de°roy_comp_ch™√l
(
ibv_comp_ch™√l
 *
ch™√l
);

1186 
ibv_cq
 *
ibv_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

1187 *
cq_c⁄ãxt
,

1188 
ibv_comp_ch™√l
 *
ch™√l
,

1189 
comp_ve˘‹
);

1198 
ibv_ªsize_cq
(
ibv_cq
 *
cq
, 
cqe
);

1203 
ibv_de°roy_cq
(
ibv_cq
 *
cq
);

1214 
ibv_gë_cq_evít
(
ibv_comp_ch™√l
 *
ch™√l
,

1215 
ibv_cq
 **
cq
, **
cq_c⁄ãxt
);

1230 
ibv_ack_cq_evíts
(
ibv_cq
 *
cq
, 
√víts
);

1245 
ölöe
 
	$ibv_pﬁl_cq
(
ibv_cq
 *
cq
, 
num_íåõs
, 
ibv_wc
 *
wc
)

1247  
cq
->
c⁄ãxt
->
›s
.
	`pﬁl_cq
(cq, 
num_íåõs
, 
wc
);

1248 
	}
}

1259 
ölöe
 
	$ibv_ªq_nŸify_cq
(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
)

1261  
cq
->
c⁄ãxt
->
›s
.
	`ªq_nŸify_cq
(cq, 
sﬁicôed_⁄ly
);

1262 
	}
}

1275 
ibv_§q
 *
ibv_¸óã_§q
(
ibv_pd
 *
pd
,

1276 
ibv_§q_öô_©å
 *
§q_öô_©å
);

1278 
ölöe
 
ibv_§q
 *

1279 
	$ibv_¸óã_§q_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1280 
ibv_§q_öô_©å_ex
 *
§q_öô_©å_ex
)

1282 
vîbs_c⁄ãxt
 *
v˘x
;

1283 
uöt32_t
 
mask
 = 
§q_öô_©å_ex
->
comp_mask
;

1285 i‡(!(
mask
 & ~(
IBV_SRQ_INIT_ATTR_PD
 | 
IBV_SRQ_INIT_ATTR_TYPE
)) &&

1286 (
mask
 & 
IBV_SRQ_INIT_ATTR_PD
) &&

1287 (!(
mask
 & 
IBV_SRQ_INIT_ATTR_TYPE
) ||

1288 (
§q_öô_©å_ex
->
§q_ty≥
 =
IBV_SRQT_BASIC
)))

1289  
	`ibv_¸óã_§q
(
§q_öô_©å_ex
->
pd
,

1290 (
ibv_§q_öô_©å
 *)
§q_öô_©å_ex
);

1292 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
¸óã_§q_ex
);

1293 i‡(!
v˘x
) {

1294 
î∫o
 = 
ENOSYS
;

1295  
NULL
;

1297  
v˘x
->
	`¸óã_§q_ex
(
c⁄ãxt
, 
§q_öô_©å_ex
);

1298 
	}
}

1312 
ibv_modify_§q
(
ibv_§q
 *
§q
,

1313 
ibv_§q_©å
 *
§q_©å
,

1314 
§q_©å_mask
);

1322 
ibv_quîy_§q
(
ibv_§q
 *
§q
, 
ibv_§q_©å
 *
§q_©å
);

1324 
ölöe
 
	$ibv_gë_§q_num
(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
)

1326 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
§q
->
c⁄ãxt
, 
gë_§q_num
);

1328 i‡(!
v˘x
)

1329  
ENOSYS
;

1331  
v˘x
->
	`gë_§q_num
(
§q
, 
§q_num
);

1332 
	}
}

1338 
ibv_de°roy_§q
(
ibv_§q
 *
§q
);

1347 
ölöe
 
	$ibv_po°_§q_ªcv
(
ibv_§q
 *
§q
,

1348 
ibv_ªcv_wr
 *
ªcv_wr
,

1349 
ibv_ªcv_wr
 **
bad_ªcv_wr
)

1351  
§q
->
c⁄ãxt
->
›s
.
	`po°_§q_ªcv
(§q, 
ªcv_wr
, 
bad_ªcv_wr
);

1352 
	}
}

1357 
ibv_qp
 *
ibv_¸óã_qp
(
ibv_pd
 *
pd
,

1358 
ibv_qp_öô_©å
 *
qp_öô_©å
);

1360 
ölöe
 
ibv_qp
 *

1361 
	$ibv_¸óã_qp_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_qp_öô_©å_ex
 *
qp_öô_©å_ex
)

1363 
vîbs_c⁄ãxt
 *
v˘x
;

1364 
uöt32_t
 
mask
 = 
qp_öô_©å_ex
->
comp_mask
;

1366 i‡(
mask
 =
IBV_QP_INIT_ATTR_PD
)

1367  
	`ibv_¸óã_qp
(
qp_öô_©å_ex
->
pd
,

1368 (
ibv_qp_öô_©å
 *)
qp_öô_©å_ex
);

1370 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
¸óã_qp_ex
);

1371 i‡(!
v˘x
) {

1372 
î∫o
 = 
ENOSYS
;

1373  
NULL
;

1375  
v˘x
->
	`¸óã_qp_ex
(
c⁄ãxt
, 
qp_öô_©å_ex
);

1376 
	}
}

1381 
ölöe
 
ibv_qp
 *

1382 
	$ibv_›í_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_qp_›í_©å
 *
qp_›í_©å
)

1384 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
›í_qp
);

1385 i‡(!
v˘x
) {

1386 
î∫o
 = 
ENOSYS
;

1387  
NULL
;

1389  
v˘x
->
	`›í_qp
(
c⁄ãxt
, 
qp_›í_©å
);

1390 
	}
}

1395 
ibv_modify_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1396 
©å_mask
);

1409 
ibv_quîy_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1410 
©å_mask
,

1411 
ibv_qp_öô_©å
 *
öô_©å
);

1416 
ibv_de°roy_qp
(
ibv_qp
 *
qp
);

1424 
ölöe
 
	$ibv_po°_£nd
(
ibv_qp
 *
qp
, 
ibv_£nd_wr
 *
wr
,

1425 
ibv_£nd_wr
 **
bad_wr
)

1427  
qp
->
c⁄ãxt
->
›s
.
	`po°_£nd
(qp, 
wr
, 
bad_wr
);

1428 
	}
}

1433 
ölöe
 
	$ibv_po°_ªcv
(
ibv_qp
 *
qp
, 
ibv_ªcv_wr
 *
wr
,

1434 
ibv_ªcv_wr
 **
bad_wr
)

1436  
qp
->
c⁄ãxt
->
›s
.
	`po°_ªcv
(qp, 
wr
, 
bad_wr
);

1437 
	}
}

1442 
ibv_ah
 *
ibv_¸óã_ah
(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
);

1455 
ibv_öô_ah_‰om_wc
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1456 
ibv_wc
 *
wc
, 
ibv_grh
 *
grh
,

1457 
ibv_ah_©å
 *
ah_©å
);

1471 
ibv_ah
 *
ibv_¸óã_ah_‰om_wc
(
ibv_pd
 *
pd
, 
ibv_wc
 *
wc
,

1472 
ibv_grh
 *
grh
, 
uöt8_t
 
p‹t_num
);

1477 
ibv_de°roy_ah
(
ibv_ah
 *
ah
);

1490 
ibv_©èch_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

1498 
ibv_dëach_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

1506 
ibv_f‹k_öô
();

1511 c⁄° *
ibv_node_ty≥_°r
(
ibv_node_ty≥
 
node_ty≥
);

1516 c⁄° *
ibv_p‹t_°©e_°r
(
ibv_p‹t_°©e
 
p‹t_°©e
);

1521 c⁄° *
ibv_evít_ty≥_°r
(
ibv_evít_ty≥
 
evít
);

1523 
	gEND_C_DECLS


1525 #unde‡
__©åibuã_c⁄°


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/ipc.h

1 #i‚de‡
_LINUX_IPC_H


2 
	#_LINUX_IPC_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPC_PRIVATE
 ((
__kî√l_key_t
Ë0)

	)

9 
	sùc_≥rm


11 
__kî√l_key_t
 
	mkey
;

12 
__kî√l_uid_t
 
	muid
;

13 
__kî√l_gid_t
 
	mgid
;

14 
__kî√l_uid_t
 
	mcuid
;

15 
__kî√l_gid_t
 
	mcgid
;

16 
__kî√l_mode_t
 
	mmode
;

17 
	m£q
;

21 
	~<asm/ùcbuf.h
>

24 
	#IPC_CREAT
 00001000

	)

25 
	#IPC_EXCL
 00002000

	)

26 
	#IPC_NOWAIT
 00004000

	)

31 
	#IPC_DIPC
 00010000

	)

32 
	#IPC_OWN
 00020000

	)

38 
	#IPC_RMID
 0

	)

39 
	#IPC_SET
 1

	)

40 
	#IPC_STAT
 2

	)

41 
	#IPC_INFO
 3

	)

47 
	#IPC_OLD
 0

	)

49 
	#IPC_64
 0x0100

	)

57 
	sùc_kludge
 {

58 
msgbuf
 *
	mmsgp
;

59 
	mmsgtyp
;

62 
	#SEMOP
 1

	)

63 
	#SEMGET
 2

	)

64 
	#SEMCTL
 3

	)

65 
	#SEMTIMEDOP
 4

	)

66 
	#MSGSND
 11

	)

67 
	#MSGRCV
 12

	)

68 
	#MSGGET
 13

	)

69 
	#MSGCTL
 14

	)

70 
	#SHMAT
 21

	)

71 
	#SHMDT
 22

	)

72 
	#SHMGET
 23

	)

73 
	#SHMCTL
 24

	)

76 
	#DIPC
 25

	)

78 
	#IPCCALL
(
vîsi⁄
,
›
Ë((vîsi⁄)<<16 | (›))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/mtd/mtd-abi.h

20 #i‚de‡
__MTD_ABI_H__


21 
	#__MTD_ABI_H__


	)

23 
	~<löux/ty≥s.h
>

25 
	sîa£_öfo_u£r
 {

26 
__u32
 
	m°¨t
;

27 
__u32
 
	mÀngth
;

30 
	sîa£_öfo_u£r64
 {

31 
__u64
 
	m°¨t
;

32 
__u64
 
	mÀngth
;

35 
	smtd_oob_buf
 {

36 
__u32
 
	m°¨t
;

37 
__u32
 
	mÀngth
;

38 *
	m±r
;

41 
	smtd_oob_buf64
 {

42 
__u64
 
	m°¨t
;

43 
__u32
 
	m∑d
;

44 
__u32
 
	mÀngth
;

45 
__u64
 
	mu§_±r
;

62 
	mMTD_OPS_PLACE_OOB
 = 0,

63 
	mMTD_OPS_AUTO_OOB
 = 1,

64 
	mMTD_OPS_RAW
 = 2,

83 
	smtd_wrôe_ªq
 {

84 
__u64
 
	m°¨t
;

85 
__u64
 
	mÀn
;

86 
__u64
 
	moobÀn
;

87 
__u64
 
	mu§_d©a
;

88 
__u64
 
	mu§_oob
;

89 
__u8
 
	mmode
;

90 
__u8
 
	m∑ddög
[7];

93 
	#MTD_ABSENT
 0

	)

94 
	#MTD_RAM
 1

	)

95 
	#MTD_ROM
 2

	)

96 
	#MTD_NORFLASH
 3

	)

97 
	#MTD_NANDFLASH
 4

	)

98 
	#MTD_DATAFLASH
 6

	)

99 
	#MTD_UBIVOLUME
 7

	)

100 
	#MTD_MLCNANDFLASH
 8

	)

102 
	#MTD_WRITEABLE
 0x400

	)

103 
	#MTD_BIT_WRITEABLE
 0x800

	)

104 
	#MTD_NO_ERASE
 0x1000

	)

105 
	#MTD_POWERUP_LOCK
 0x2000

	)

108 
	#MTD_CAP_ROM
 0

	)

109 
	#MTD_CAP_RAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

110 
	#MTD_CAP_NORFLASH
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
)

	)

111 
	#MTD_CAP_NANDFLASH
 (
MTD_WRITEABLE
)

	)

112 
	#MTD_CAP_NVRAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

115 
	#MTD_NANDECC_OFF
 0

116 
	#MTD_NANDECC_PLACE
 1

117 
	#MTD_NANDECC_AUTOPLACE
 2

118 
	#MTD_NANDECC_PLACEONLY
 3

119 
	#MTD_NANDECC_AUTOPL_USR
 4

120 

	)

122 
	#MTD_OTP_OFF
 0

	)

123 
	#MTD_OTP_FACTORY
 1

	)

124 
	#MTD_OTP_USER
 2

	)

126 
	smtd_öfo_u£r
 {

127 
__u8
 
	mty≥
;

128 
__u32
 
	mÊags
;

129 
__u32
 
	msize
;

130 
__u32
 
	mîa£size
;

131 
__u32
 
	mwrôesize
;

132 
__u32
 
	moobsize
;

133 
__u64
 
	m∑ddög
;

136 
	sªgi⁄_öfo_u£r
 {

137 
__u32
 
	moff£t
;

139 
__u32
 
	mîa£size
;

140 
__u32
 
	mnumblocks
;

141 
__u32
 
	mªgi⁄ödex
;

144 
	sŸp_öfo
 {

145 
__u32
 
	m°¨t
;

146 
__u32
 
	mÀngth
;

147 
__u32
 
	mlocked
;

157 
	#MEMGETINFO
 
	`_IOR
('M', 1, 
mtd_öfo_u£r
)

	)

159 
	#MEMERASE
 
	`_IOW
('M', 2, 
îa£_öfo_u£r
)

	)

161 
	#MEMWRITEOOB
 
	`_IOWR
('M', 3, 
mtd_oob_buf
)

	)

163 
	#MEMREADOOB
 
	`_IOWR
('M', 4, 
mtd_oob_buf
)

	)

165 
	#MEMLOCK
 
	`_IOW
('M', 5, 
îa£_öfo_u£r
)

	)

167 
	#MEMUNLOCK
 
	`_IOW
('M', 6, 
îa£_öfo_u£r
)

	)

169 
	#MEMGETREGIONCOUNT
 
	`_IOR
('M', 7, )

	)

171 
	#MEMGETREGIONINFO
 
	`_IOWR
('M', 8, 
ªgi⁄_öfo_u£r
)

	)

173 
	#MEMGETOOBSEL
 
	`_IOR
('M', 10, 
«nd_ooböfo
)

	)

175 
	#MEMGETBADBLOCK
 
	`_IOW
('M', 11, 
__kî√l_loff_t
)

	)

177 
	#MEMSETBADBLOCK
 
	`_IOW
('M', 12, 
__kî√l_loff_t
)

	)

179 
	#OTPSELECT
 
	`_IOR
('M', 13, )

	)

181 
	#OTPGETREGIONCOUNT
 
	`_IOW
('M', 14, )

	)

183 
	#OTPGETREGIONINFO
 
	`_IOW
('M', 15, 
Ÿp_öfo
)

	)

185 
	#OTPLOCK
 
	`_IOR
('M', 16, 
Ÿp_öfo
)

	)

187 
	#ECCGETLAYOUT
 
	`_IOR
('M', 17, 
«nd_ec˛ayout_u£r
)

	)

189 
	#ECCGETSTATS
 
	`_IOR
('M', 18, 
mtd_ecc_°©s
)

	)

191 
	#MTDFILEMODE
 
	`_IO
('M', 19)

	)

193 
	#MEMERASE64
 
	`_IOW
('M', 20, 
îa£_öfo_u£r64
)

	)

195 
	#MEMWRITEOOB64
 
	`_IOWR
('M', 21, 
mtd_oob_buf64
)

	)

197 
	#MEMREADOOB64
 
	`_IOWR
('M', 22, 
mtd_oob_buf64
)

	)

199 
	#MEMISLOCKED
 
	`_IOR
('M', 23, 
îa£_öfo_u£r
)

	)

205 
	#MEMWRITE
 
	`_IOWR
('M', 24, 
mtd_wrôe_ªq
)

	)

211 
	s«nd_ooböfo
 {

212 
__u32
 
	mu£ecc
;

213 
__u32
 
	meccbyãs
;

214 
__u32
 
	moob‰ì
[8][2];

215 
__u32
 
	mec˝os
[32];

218 
	s«nd_oob‰ì
 {

219 
__u32
 
	moff£t
;

220 
__u32
 
	mÀngth
;

223 
	#MTD_MAX_OOBFREE_ENTRIES
 8

	)

224 
	#MTD_MAX_ECCPOS_ENTRIES
 64

	)

233 
	s«nd_ec˛ayout_u£r
 {

234 
__u32
 
	meccbyãs
;

235 
__u32
 
	mec˝os
[
MTD_MAX_ECCPOS_ENTRIES
];

236 
__u32
 
	moobavaû
;

237 
«nd_oob‰ì
 
	moob‰ì
[
MTD_MAX_OOBFREE_ENTRIES
];

248 
	smtd_ecc_°©s
 {

249 
__u32
 
	mc‹ª˘ed
;

250 
__u32
 
	mÁûed
;

251 
__u32
 
	mbadblocks
;

252 
__u32
 
	mbbtblocks
;

272 
	emtd_fûe_modes
 {

273 
	mMTD_FILE_MODE_NORMAL
 = 
MTD_OTP_OFF
,

274 
	mMTD_FILE_MODE_OTP_FACTORY
 = 
MTD_OTP_FACTORY
,

275 
	mMTD_FILE_MODE_OTP_USER
 = 
MTD_OTP_USER
,

276 
	mMTD_FILE_MODE_RAW
,

279 
__ölöe__
 
	$mtd_ty≥_is_«nd_u£r
(c⁄° 
mtd_öfo_u£r
 *
mtd
)

281  
mtd
->
ty≥
 =
MTD_NANDFLASH
 || mtd->ty≥ =
MTD_MLCNANDFLASH
;

282 
	}
}

	@/usr/include/numacompat1.h

1 
	#numa_£t_öãæóve_mask
(
m
Ë
	`numa_£t_öãæóve_mask_com∑t
(m)

	)

2 
	#numa_gë_öãæóve_mask
(Ë
	`numa_gë_öãæóve_mask_com∑t
()

	)

3 
	#numa_böd
(
m
Ë
	`numa_böd_com∑t
(m)

	)

4 
	#numa_gë_memböd
(
m
Ë
	`numa_gë_memböd_com∑t
(m)

	)

5 
	#numa_£t_memböd
(
m
Ë
	`numa_£t_memböd_com∑t
(m)

	)

6 
	#numa_Æloc_öãæóved_sub£t
(
s
,
m
Ë
	`numa_Æloc_öãæóved_sub£t_com∑t
(s,m)

	)

7 
	#numa_run_⁄_node_mask
(
m
Ë
	`numa_run_⁄_node_mask_com∑t
(m)

	)

8 
	#numa_gë_run_node_mask
(Ë
	`numa_gë_run_node_mask_com∑t
()

	)

9 
	#numa_öãæóve_mem‹y
(
°
,
si
,
m
Ë
	`numa_öãæóve_mem‹y_com∑t
(°,si,m)

	)

10 
	#numa_t⁄odemask_mem‹y
(
°
,
si
,
m
Ë
	`numa_t⁄odemask_mem‹y_com∑t
(°,si,m)

	)

11 
	#numa_sched_gëafföôy
(
p
,
l
,
m
Ë
	`numa_sched_gëafföôy_com∑t
’,l,m)

	)

12 
	#numa_sched_£èfföôy
(
p
,
l
,
m
Ë
	`numa_sched_£èfföôy_com∑t
’,l,m)

	)

13 
	#numa_node_to_˝us
(
n
,
b
,
bl
Ë
	`numa_node_to_˝us_com∑t
“,b,bl)

	)

14 
	#nodemask_zîo
(
m
Ë
	`nodemask_zîo_com∑t
(m)

	)

15 
	#nodemask_£t
(
m
, 
n
Ë
	`nodemask_£t_com∑t
(m,Ç)

	)

16 
	#nodemask_˛r
(
m
, 
n
Ë
	`nodemask_˛r_com∑t
(m,Ç)

	)

17 
	#nodemask_is£t
(
m
, 
n
Ë
	`nodemask_is£t_com∑t
(m,Ç)

	)

18 
	#nodemask_equÆ
(
a
, 
b
Ë
	`nodemask_equÆ_com∑t
◊, b)

	)

	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 #i‚de‡
Z_SOLO


33 
	#com¥ess
 
z_com¥ess


	)

34 
	#com¥ess2
 
z_com¥ess2


	)

35 
	#com¥essBound
 
z_com¥essBound


	)

37 
	#¸c32
 
z_¸c32


	)

38 
	#¸c32_comböe
 
z_¸c32_comböe


	)

39 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

40 
	#deÊ©e
 
z_deÊ©e


	)

41 
	#deÊ©eBound
 
z_deÊ©eBound


	)

42 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

43 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

44 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

45 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

46 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

47 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

48 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

49 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

50 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

51 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

52 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

53 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

54 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

55 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

56 #i‚de‡
Z_SOLO


57 
	#gz_îr‹
 
z_gz_îr‹


	)

58 
	#gz_ötmax
 
z_gz_ötmax


	)

59 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

60 
	#gzbuf„r
 
z_gzbuf„r


	)

61 
	#gz˛óªº
 
z_gz˛óªº


	)

62 
	#gz˛o£
 
z_gz˛o£


	)

63 
	#gz˛o£_r
 
z_gz˛o£_r


	)

64 
	#gz˛o£_w
 
z_gz˛o£_w


	)

65 
	#gzdúe˘
 
z_gzdúe˘


	)

66 
	#gzd›í
 
z_gzd›í


	)

67 
	#gzeof
 
z_gzeof


	)

68 
	#gzîr‹
 
z_gzîr‹


	)

69 
	#gzÊush
 
z_gzÊush


	)

70 
	#gzgëc
 
z_gzgëc


	)

71 
	#gzgëc_
 
z_gzgëc_


	)

72 
	#gzgës
 
z_gzgës


	)

73 
	#gzoff£t
 
z_gzoff£t


	)

74 
	#gzoff£t64
 
z_gzoff£t64


	)

75 
	#gz›í
 
z_gz›í


	)

76 
	#gz›í64
 
z_gz›í64


	)

77 #ifde‡
_WIN32


78 
	#gz›í_w
 
z_gz›í_w


	)

80 
	#gz¥ötf
 
z_gz¥ötf


	)

81 
	#gzv¥ötf
 
z_gzv¥ötf


	)

82 
	#gzputc
 
z_gzputc


	)

83 
	#gzputs
 
z_gzputs


	)

84 
	#gzªad
 
z_gzªad


	)

85 
	#gzªwöd
 
z_gzªwöd


	)

86 
	#gz£ek
 
z_gz£ek


	)

87 
	#gz£ek64
 
z_gz£ek64


	)

88 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

89 
	#gzãŒ
 
z_gzãŒ


	)

90 
	#gzãŒ64
 
z_gzãŒ64


	)

91 
	#gzungëc
 
z_gzungëc


	)

92 
	#gzwrôe
 
z_gzwrôe


	)

94 
	#öÊ©e
 
z_öÊ©e


	)

95 
	#öÊ©eBack
 
z_öÊ©eBack


	)

96 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

97 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

98 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

99 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

100 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

101 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

102 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

103 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

104 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

105 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

106 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

107 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

108 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

109 
	#öÊ©eSync
 
z_öÊ©eSync


	)

110 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

111 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

112 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

113 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

114 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

115 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

116 #i‚de‡
Z_SOLO


117 
	#uncom¥ess
 
z_uncom¥ess


	)

119 
	#zEº‹
 
z_zEº‹


	)

120 #i‚de‡
Z_SOLO


121 
	#zˇŒoc
 
z_zˇŒoc


	)

122 
	#zc‰ì
 
z_zc‰ì


	)

124 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

125 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

128 
	#Byã
 
z_Byã


	)

129 
	#Byãf
 
z_Byãf


	)

130 
	#Æloc_func
 
z_Æloc_func


	)

131 
	#ch¨f
 
z_ch¨f


	)

132 
	#‰ì_func
 
z_‰ì_func


	)

133 #i‚de‡
Z_SOLO


134 
	#gzFûe
 
z_gzFûe


	)

136 
	#gz_hódî
 
z_gz_hódî


	)

137 
	#gz_hódîp
 
z_gz_hódîp


	)

138 
	#ö_func
 
z_ö_func


	)

139 
	#ötf
 
z_ötf


	)

140 
	#out_func
 
z_out_func


	)

141 
	#uI¡
 
z_uI¡


	)

142 
	#uI¡f
 
z_uI¡f


	)

143 
	#uL⁄g
 
z_uL⁄g


	)

144 
	#uL⁄gf
 
z_uL⁄gf


	)

145 
	#voidp
 
z_voidp


	)

146 
	#voidpc
 
z_voidpc


	)

147 
	#voidpf
 
z_voidpf


	)

150 
	#gz_hódî_s
 
z_gz_hódî_s


	)

151 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

155 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

156 
	#MSDOS


	)

158 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

159 
	#OS2


	)

161 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

162 
	#WINDOWS


	)

164 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

165 #i‚de‡
WIN32


166 
	#WIN32


	)

169 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

170 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

171 #i‚de‡
SYS16BIT


172 
	#SYS16BIT


	)

181 #ifde‡
SYS16BIT


182 
	#MAXSEG_64K


	)

184 #ifde‡
MSDOS


185 
	#UNALIGNED_OK


	)

188 #ifde‡
__STDC_VERSION__


189 #i‚de‡
STDC


190 
	#STDC


	)

192 #i‡
__STDC_VERSION__
 >= 199901L

193 #i‚de‡
STDC99


194 
	#STDC99


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

205 
	#STDC


	)

207 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

208 
	#STDC


	)

211 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

212 
	#STDC


	)

215 #i‚de‡
STDC


217 c⁄°

	)

221 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

222 
	#z_c⁄°
 c⁄°

	)

224 
	#z_c⁄°


	)

228 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

229 
	#NO_DUMMY_DECL


	)

233 #i‚de‡
MAX_MEM_LEVEL


234 #ifde‡
MAXSEG_64K


235 
	#MAX_MEM_LEVEL
 8

	)

237 
	#MAX_MEM_LEVEL
 9

	)

246 #i‚de‡
MAX_WBITS


247 
	#MAX_WBITS
 15

	)

265 #i‚de‡
OF


266 #ifde‡
STDC


267 
	#OF
(
¨gs
Ë
	)
args

269 
	#OF
(
¨gs
Ë()

	)

273 #i‚de‡
Z_ARG


274 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

275 
	#Z_ARG
(
¨gs
Ë
	)
args

277 
	#Z_ARG
(
¨gs
Ë()

	)

287 #ifde‡
SYS16BIT


288 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

290 
	#SMALL_MEDIUM


	)

291 #ifde‡
_MSC_VER


292 
	#FAR
 
_Ár


	)

294 
	#FAR
 
Ár


	)

297 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

299 
	#SMALL_MEDIUM


	)

300 #ifde‡
__BORLANDC__


301 
	#FAR
 
_Ár


	)

303 
	#FAR
 
Ár


	)

308 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

312 #ifde‡
ZLIB_DLL


313 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

314 #ifde‡
ZLIB_INTERNAL


315 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

317 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

325 #ifde‡
ZLIB_WINAPI


326 #ifde‡
FAR


327 #unde‡
FAR


329 
	~<wödows.h
>

332 
	#ZEXPORT
 
WINAPI


	)

333 #ifde‡
WIN32


334 
	#ZEXPORTVA
 
WINAPIV


	)

336 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

341 #i‡
deföed
 (
__BEOS__
)

342 #ifde‡
ZLIB_DLL


343 #ifde‡
ZLIB_INTERNAL


344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

353 #i‚de‡
ZEXTERN


354 
	#ZEXTERN
 

	)

356 #i‚de‡
ZEXPORT


357 
	#ZEXPORT


	)

359 #i‚de‡
ZEXPORTVA


360 
	#ZEXPORTVA


	)

363 #i‚de‡
FAR


364 
	#FAR


	)

367 #i‡!
deföed
(
__MACTYPES__
)

368 
	tByã
;

370 
	tuI¡
;

371 
	tuL⁄g
;

373 #ifde‡
SMALL_MEDIUM


375 
	#Byãf
 
Byã
 
FAR


	)

377 
Byã
 
	tFAR
 
	tByãf
;

379 
	tFAR
 
	tch¨f
;

380 
	tFAR
 
	tötf
;

381 
uI¡
 
	tFAR
 
	tuI¡f
;

382 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

384 #ifde‡
STDC


385 c⁄° *
	tvoidpc
;

386 
	tFAR
 *
	tvoidpf
;

387 *
	tvoidp
;

389 
Byã
 c⁄° *
	tvoidpc
;

390 
Byã
 
	tFAR
 *
	tvoidpf
;

391 
Byã
 *
	tvoidp
;

394 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

395 
	~<limôs.h
>

396 #i‡(
UINT_MAX
 == 0xffffffffUL)

397 
	#Z_U4
 

	)

398 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

400 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

401 
	#Z_U4
 

	)

405 #ifde‡
Z_U4


406 
Z_U4
 
	tz_¸c_t
;

408 
	tz_¸c_t
;

412 
	#Z_HAVE_UNISTD_H


	)

416 
	#Z_HAVE_STDARG_H


	)

419 #ifde‡
STDC


420 #i‚de‡
Z_SOLO


421 
	~<sys/ty≥s.h
>

425 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

426 #i‚de‡
Z_SOLO


427 
	~<°d¨g.h
>

431 #ifde‡
_WIN32


432 #i‚de‡
Z_SOLO


433 
	~<°ddef.h
>

443 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

444 #unde‡
_LARGEFILE64_SOURCE


447 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

448 
	#Z_HAVE_UNISTD_H


	)

450 #i‚de‡
Z_SOLO


451 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

452 
	~<uni°d.h
>

453 #ifde‡
VMS


454 
	~<unixio.h
>

456 #i‚de‡
z_off_t


457 
	#z_off_t
 
off_t


	)

462 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

463 
	#Z_LFS64


	)

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

467 
	#Z_LARGE64


	)

470 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

471 
	#Z_WANT64


	)

474 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

475 
	#SEEK_SET
 0

	)

476 
	#SEEK_CUR
 1

	)

477 
	#SEEK_END
 2

	)

480 #i‚de‡
z_off_t


481 
	#z_off_t
 

	)

484 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

485 
	#z_off64_t
 
off64_t


	)

487 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

488 
	#z_off64_t
 
__öt64


	)

490 
	#z_off64_t
 
z_off_t


	)

495 #i‡
deföed
(
__MVS__
)

496 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

497 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

498 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

499 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

500 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

501 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

502 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

503 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

504 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

505 #¥agm®
m≠
(
com¥essBound
,"CMBND")

506 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

507 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

508 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/stddef.h

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
473
15977
/home/ysjin/Desktop/fio/fio/arch/arch-aarch64.h
/home/ysjin/Desktop/fio/fio/arch/arch-alpha.h
/home/ysjin/Desktop/fio/fio/arch/arch-arm.h
/home/ysjin/Desktop/fio/fio/arch/arch-generic.h
/home/ysjin/Desktop/fio/fio/arch/arch-hppa.h
/home/ysjin/Desktop/fio/fio/arch/arch-ia64.h
/home/ysjin/Desktop/fio/fio/arch/arch-mips.h
/home/ysjin/Desktop/fio/fio/arch/arch-ppc.h
/home/ysjin/Desktop/fio/fio/arch/arch-s390.h
/home/ysjin/Desktop/fio/fio/arch/arch-sh.h
/home/ysjin/Desktop/fio/fio/arch/arch-sparc.h
/home/ysjin/Desktop/fio/fio/arch/arch-sparc64.h
/home/ysjin/Desktop/fio/fio/arch/arch-x86-common.h
/home/ysjin/Desktop/fio/fio/arch/arch-x86.h
/home/ysjin/Desktop/fio/fio/arch/arch-x86_64.h
/home/ysjin/Desktop/fio/fio/arch/arch.h
/home/ysjin/Desktop/fio/fio/backend.c
/home/ysjin/Desktop/fio/fio/blktrace.c
/home/ysjin/Desktop/fio/fio/blktrace.h
/home/ysjin/Desktop/fio/fio/blktrace_api.h
/home/ysjin/Desktop/fio/fio/cairo_text_helpers.c
/home/ysjin/Desktop/fio/fio/cairo_text_helpers.h
/home/ysjin/Desktop/fio/fio/cconv.c
/home/ysjin/Desktop/fio/fio/cgroup.c
/home/ysjin/Desktop/fio/fio/cgroup.h
/home/ysjin/Desktop/fio/fio/client.c
/home/ysjin/Desktop/fio/fio/client.h
/home/ysjin/Desktop/fio/fio/compiler/compiler-gcc3.h
/home/ysjin/Desktop/fio/fio/compiler/compiler-gcc4.h
/home/ysjin/Desktop/fio/fio/compiler/compiler.h
/home/ysjin/Desktop/fio/fio/crc/crc16.c
/home/ysjin/Desktop/fio/fio/crc/crc16.h
/home/ysjin/Desktop/fio/fio/crc/crc32.c
/home/ysjin/Desktop/fio/fio/crc/crc32.h
/home/ysjin/Desktop/fio/fio/crc/crc32c-arm64.c
/home/ysjin/Desktop/fio/fio/crc/crc32c-intel.c
/home/ysjin/Desktop/fio/fio/crc/crc32c.c
/home/ysjin/Desktop/fio/fio/crc/crc32c.h
/home/ysjin/Desktop/fio/fio/crc/crc64.c
/home/ysjin/Desktop/fio/fio/crc/crc64.h
/home/ysjin/Desktop/fio/fio/crc/crc7.c
/home/ysjin/Desktop/fio/fio/crc/crc7.h
/home/ysjin/Desktop/fio/fio/crc/fnv.c
/home/ysjin/Desktop/fio/fio/crc/fnv.h
/home/ysjin/Desktop/fio/fio/crc/md5.c
/home/ysjin/Desktop/fio/fio/crc/md5.h
/home/ysjin/Desktop/fio/fio/crc/murmur3.c
/home/ysjin/Desktop/fio/fio/crc/murmur3.h
/home/ysjin/Desktop/fio/fio/crc/sha1.c
/home/ysjin/Desktop/fio/fio/crc/sha1.h
/home/ysjin/Desktop/fio/fio/crc/sha256.c
/home/ysjin/Desktop/fio/fio/crc/sha256.h
/home/ysjin/Desktop/fio/fio/crc/sha3.c
/home/ysjin/Desktop/fio/fio/crc/sha3.h
/home/ysjin/Desktop/fio/fio/crc/sha512.c
/home/ysjin/Desktop/fio/fio/crc/sha512.h
/home/ysjin/Desktop/fio/fio/crc/test.c
/home/ysjin/Desktop/fio/fio/crc/test.h
/home/ysjin/Desktop/fio/fio/crc/xxhash.c
/home/ysjin/Desktop/fio/fio/crc/xxhash.h
/home/ysjin/Desktop/fio/fio/debug.c
/home/ysjin/Desktop/fio/fio/debug.h
/home/ysjin/Desktop/fio/fio/diskutil.c
/home/ysjin/Desktop/fio/fio/diskutil.h
/home/ysjin/Desktop/fio/fio/engines/binject.c
/home/ysjin/Desktop/fio/fio/engines/cpu.c
/home/ysjin/Desktop/fio/fio/engines/dev-dax.c
/home/ysjin/Desktop/fio/fio/engines/e4defrag.c
/home/ysjin/Desktop/fio/fio/engines/falloc.c
/home/ysjin/Desktop/fio/fio/engines/filecreate.c
/home/ysjin/Desktop/fio/fio/engines/ftruncate.c
/home/ysjin/Desktop/fio/fio/engines/fusion-aw.c
/home/ysjin/Desktop/fio/fio/engines/gfapi.h
/home/ysjin/Desktop/fio/fio/engines/glusterfs.c
/home/ysjin/Desktop/fio/fio/engines/glusterfs_async.c
/home/ysjin/Desktop/fio/fio/engines/glusterfs_sync.c
/home/ysjin/Desktop/fio/fio/engines/guasi.c
/home/ysjin/Desktop/fio/fio/engines/libaio.c
/home/ysjin/Desktop/fio/fio/engines/libhdfs.c
/home/ysjin/Desktop/fio/fio/engines/libpmem.c
/home/ysjin/Desktop/fio/fio/engines/mmap.c
/home/ysjin/Desktop/fio/fio/engines/mtd.c
/home/ysjin/Desktop/fio/fio/engines/net.c
/home/ysjin/Desktop/fio/fio/engines/null.c
/home/ysjin/Desktop/fio/fio/engines/pmemblk.c
/home/ysjin/Desktop/fio/fio/engines/posixaio.c
/home/ysjin/Desktop/fio/fio/engines/rados.c
/home/ysjin/Desktop/fio/fio/engines/rbd.c
/home/ysjin/Desktop/fio/fio/engines/rdma.c
/home/ysjin/Desktop/fio/fio/engines/sg.c
/home/ysjin/Desktop/fio/fio/engines/skeleton_external.c
/home/ysjin/Desktop/fio/fio/engines/solarisaio.c
/home/ysjin/Desktop/fio/fio/engines/splice.c
/home/ysjin/Desktop/fio/fio/engines/sync.c
/home/ysjin/Desktop/fio/fio/engines/windowsaio.c
/home/ysjin/Desktop/fio/fio/err.h
/home/ysjin/Desktop/fio/fio/eta.c
/home/ysjin/Desktop/fio/fio/exp/test-expression-parser.c
/home/ysjin/Desktop/fio/fio/fifo.c
/home/ysjin/Desktop/fio/fio/fifo.h
/home/ysjin/Desktop/fio/fio/file.h
/home/ysjin/Desktop/fio/fio/filehash.c
/home/ysjin/Desktop/fio/fio/filehash.h
/home/ysjin/Desktop/fio/fio/filelock.c
/home/ysjin/Desktop/fio/fio/filelock.h
/home/ysjin/Desktop/fio/fio/filesetup.c
/home/ysjin/Desktop/fio/fio/fio.c
/home/ysjin/Desktop/fio/fio/fio.h
/home/ysjin/Desktop/fio/fio/fio_time.h
/home/ysjin/Desktop/fio/fio/flist.h
/home/ysjin/Desktop/fio/fio/flow.c
/home/ysjin/Desktop/fio/fio/flow.h
/home/ysjin/Desktop/fio/fio/gclient.c
/home/ysjin/Desktop/fio/fio/gclient.h
/home/ysjin/Desktop/fio/fio/gcompat.c
/home/ysjin/Desktop/fio/fio/gcompat.h
/home/ysjin/Desktop/fio/fio/gerror.c
/home/ysjin/Desktop/fio/fio/gerror.h
/home/ysjin/Desktop/fio/fio/gettime-thread.c
/home/ysjin/Desktop/fio/fio/gettime.c
/home/ysjin/Desktop/fio/fio/gettime.h
/home/ysjin/Desktop/fio/fio/gfio.c
/home/ysjin/Desktop/fio/fio/gfio.h
/home/ysjin/Desktop/fio/fio/ghelpers.c
/home/ysjin/Desktop/fio/fio/ghelpers.h
/home/ysjin/Desktop/fio/fio/goptions.c
/home/ysjin/Desktop/fio/fio/goptions.h
/home/ysjin/Desktop/fio/fio/graph.c
/home/ysjin/Desktop/fio/fio/graph.h
/home/ysjin/Desktop/fio/fio/hash.h
/home/ysjin/Desktop/fio/fio/helper_thread.c
/home/ysjin/Desktop/fio/fio/helper_thread.h
/home/ysjin/Desktop/fio/fio/helpers.c
/home/ysjin/Desktop/fio/fio/helpers.h
/home/ysjin/Desktop/fio/fio/idletime.c
/home/ysjin/Desktop/fio/fio/idletime.h
/home/ysjin/Desktop/fio/fio/init.c
/home/ysjin/Desktop/fio/fio/io_ddir.h
/home/ysjin/Desktop/fio/fio/io_u.c
/home/ysjin/Desktop/fio/fio/io_u.h
/home/ysjin/Desktop/fio/fio/io_u_queue.c
/home/ysjin/Desktop/fio/fio/io_u_queue.h
/home/ysjin/Desktop/fio/fio/ioengines.c
/home/ysjin/Desktop/fio/fio/ioengines.h
/home/ysjin/Desktop/fio/fio/iolog.c
/home/ysjin/Desktop/fio/fio/iolog.h
/home/ysjin/Desktop/fio/fio/json.c
/home/ysjin/Desktop/fio/fio/json.h
/home/ysjin/Desktop/fio/fio/lib/axmap.c
/home/ysjin/Desktop/fio/fio/lib/axmap.h
/home/ysjin/Desktop/fio/fio/lib/bloom.c
/home/ysjin/Desktop/fio/fio/lib/bloom.h
/home/ysjin/Desktop/fio/fio/lib/bswap.h
/home/ysjin/Desktop/fio/fio/lib/ffz.h
/home/ysjin/Desktop/fio/fio/lib/flist_sort.c
/home/ysjin/Desktop/fio/fio/lib/fls.h
/home/ysjin/Desktop/fio/fio/lib/gauss.c
/home/ysjin/Desktop/fio/fio/lib/gauss.h
/home/ysjin/Desktop/fio/fio/lib/getrusage.c
/home/ysjin/Desktop/fio/fio/lib/getrusage.h
/home/ysjin/Desktop/fio/fio/lib/hweight.c
/home/ysjin/Desktop/fio/fio/lib/hweight.h
/home/ysjin/Desktop/fio/fio/lib/ieee754.c
/home/ysjin/Desktop/fio/fio/lib/ieee754.h
/home/ysjin/Desktop/fio/fio/lib/lfsr.c
/home/ysjin/Desktop/fio/fio/lib/lfsr.h
/home/ysjin/Desktop/fio/fio/lib/memalign.c
/home/ysjin/Desktop/fio/fio/lib/memalign.h
/home/ysjin/Desktop/fio/fio/lib/memcpy.c
/home/ysjin/Desktop/fio/fio/lib/memcpy.h
/home/ysjin/Desktop/fio/fio/lib/mountcheck.c
/home/ysjin/Desktop/fio/fio/lib/mountcheck.h
/home/ysjin/Desktop/fio/fio/lib/num2str.c
/home/ysjin/Desktop/fio/fio/lib/num2str.h
/home/ysjin/Desktop/fio/fio/lib/output_buffer.c
/home/ysjin/Desktop/fio/fio/lib/output_buffer.h
/home/ysjin/Desktop/fio/fio/lib/pattern.c
/home/ysjin/Desktop/fio/fio/lib/pattern.h
/home/ysjin/Desktop/fio/fio/lib/pow2.h
/home/ysjin/Desktop/fio/fio/lib/prio_tree.c
/home/ysjin/Desktop/fio/fio/lib/prio_tree.h
/home/ysjin/Desktop/fio/fio/lib/rand.c
/home/ysjin/Desktop/fio/fio/lib/rand.h
/home/ysjin/Desktop/fio/fio/lib/rbtree.c
/home/ysjin/Desktop/fio/fio/lib/rbtree.h
/home/ysjin/Desktop/fio/fio/lib/seqlock.h
/home/ysjin/Desktop/fio/fio/lib/strntol.c
/home/ysjin/Desktop/fio/fio/lib/strntol.h
/home/ysjin/Desktop/fio/fio/lib/types.h
/home/ysjin/Desktop/fio/fio/lib/zipf.c
/home/ysjin/Desktop/fio/fio/lib/zipf.h
/home/ysjin/Desktop/fio/fio/libfio.c
/home/ysjin/Desktop/fio/fio/log.c
/home/ysjin/Desktop/fio/fio/log.h
/home/ysjin/Desktop/fio/fio/memory.c
/home/ysjin/Desktop/fio/fio/minmax.h
/home/ysjin/Desktop/fio/fio/mutex.c
/home/ysjin/Desktop/fio/fio/mutex.h
/home/ysjin/Desktop/fio/fio/optgroup.c
/home/ysjin/Desktop/fio/fio/optgroup.h
/home/ysjin/Desktop/fio/fio/options.c
/home/ysjin/Desktop/fio/fio/options.h
/home/ysjin/Desktop/fio/fio/os/binject.h
/home/ysjin/Desktop/fio/fio/os/kcompat.h
/home/ysjin/Desktop/fio/fio/os/os-aix.h
/home/ysjin/Desktop/fio/fio/os/os-android.h
/home/ysjin/Desktop/fio/fio/os/os-dragonfly.h
/home/ysjin/Desktop/fio/fio/os/os-freebsd.h
/home/ysjin/Desktop/fio/fio/os/os-hpux.h
/home/ysjin/Desktop/fio/fio/os/os-linux-syscall.h
/home/ysjin/Desktop/fio/fio/os/os-linux.h
/home/ysjin/Desktop/fio/fio/os/os-mac.h
/home/ysjin/Desktop/fio/fio/os/os-netbsd.h
/home/ysjin/Desktop/fio/fio/os/os-openbsd.h
/home/ysjin/Desktop/fio/fio/os/os-solaris.h
/home/ysjin/Desktop/fio/fio/os/os-windows.h
/home/ysjin/Desktop/fio/fio/os/os.h
/home/ysjin/Desktop/fio/fio/os/windows/posix.c
/home/ysjin/Desktop/fio/fio/os/windows/posix.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/arpa/inet.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/asm/types.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/dirent.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/dlfcn.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/libgen.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/netdb.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/netinet/in.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/netinet/tcp.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/poll.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/semaphore.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/ioctl.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/ipc.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/mman.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/poll.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/resource.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/shm.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/socket.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/uio.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/un.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/sys/wait.h
/home/ysjin/Desktop/fio/fio/os/windows/posix/include/syslog.h
/home/ysjin/Desktop/fio/fio/oslib/getopt.h
/home/ysjin/Desktop/fio/fio/oslib/getopt_long.c
/home/ysjin/Desktop/fio/fio/oslib/inet_aton.c
/home/ysjin/Desktop/fio/fio/oslib/inet_aton.h
/home/ysjin/Desktop/fio/fio/oslib/libmtd.c
/home/ysjin/Desktop/fio/fio/oslib/libmtd.h
/home/ysjin/Desktop/fio/fio/oslib/libmtd_common.h
/home/ysjin/Desktop/fio/fio/oslib/libmtd_int.h
/home/ysjin/Desktop/fio/fio/oslib/libmtd_legacy.c
/home/ysjin/Desktop/fio/fio/oslib/libmtd_xalloc.h
/home/ysjin/Desktop/fio/fio/oslib/linux-dev-lookup.c
/home/ysjin/Desktop/fio/fio/oslib/linux-dev-lookup.h
/home/ysjin/Desktop/fio/fio/oslib/strcasestr.c
/home/ysjin/Desktop/fio/fio/oslib/strcasestr.h
/home/ysjin/Desktop/fio/fio/oslib/strlcat.c
/home/ysjin/Desktop/fio/fio/oslib/strlcat.h
/home/ysjin/Desktop/fio/fio/oslib/strndup.c
/home/ysjin/Desktop/fio/fio/oslib/strndup.h
/home/ysjin/Desktop/fio/fio/oslib/strsep.c
/home/ysjin/Desktop/fio/fio/oslib/strsep.h
/home/ysjin/Desktop/fio/fio/parse.c
/home/ysjin/Desktop/fio/fio/parse.h
/home/ysjin/Desktop/fio/fio/printing.c
/home/ysjin/Desktop/fio/fio/printing.h
/home/ysjin/Desktop/fio/fio/profile.c
/home/ysjin/Desktop/fio/fio/profile.h
/home/ysjin/Desktop/fio/fio/profiles/act.c
/home/ysjin/Desktop/fio/fio/profiles/tiobench.c
/home/ysjin/Desktop/fio/fio/rate-submit.c
/home/ysjin/Desktop/fio/fio/rate-submit.h
/home/ysjin/Desktop/fio/fio/server.c
/home/ysjin/Desktop/fio/fio/server.h
/home/ysjin/Desktop/fio/fio/smalloc.c
/home/ysjin/Desktop/fio/fio/smalloc.h
/home/ysjin/Desktop/fio/fio/stat.c
/home/ysjin/Desktop/fio/fio/stat.h
/home/ysjin/Desktop/fio/fio/steadystate.c
/home/ysjin/Desktop/fio/fio/steadystate.h
/home/ysjin/Desktop/fio/fio/t/arch.c
/home/ysjin/Desktop/fio/fio/t/axmap.c
/home/ysjin/Desktop/fio/fio/t/btrace2fio.c
/home/ysjin/Desktop/fio/fio/t/debug.c
/home/ysjin/Desktop/fio/fio/t/debug.h
/home/ysjin/Desktop/fio/fio/t/dedupe.c
/home/ysjin/Desktop/fio/fio/t/gen-rand.c
/home/ysjin/Desktop/fio/fio/t/genzipf.c
/home/ysjin/Desktop/fio/fio/t/ieee754.c
/home/ysjin/Desktop/fio/fio/t/lfsr-test.c
/home/ysjin/Desktop/fio/fio/t/log.c
/home/ysjin/Desktop/fio/fio/t/memlock.c
/home/ysjin/Desktop/fio/fio/t/read-to-pipe-async.c
/home/ysjin/Desktop/fio/fio/t/stest.c
/home/ysjin/Desktop/fio/fio/t/time-test.c
/home/ysjin/Desktop/fio/fio/t/verify-state.c
/home/ysjin/Desktop/fio/fio/td_error.c
/home/ysjin/Desktop/fio/fio/td_error.h
/home/ysjin/Desktop/fio/fio/thread_options.h
/home/ysjin/Desktop/fio/fio/tickmarks.c
/home/ysjin/Desktop/fio/fio/tickmarks.h
/home/ysjin/Desktop/fio/fio/time.c
/home/ysjin/Desktop/fio/fio/trim.c
/home/ysjin/Desktop/fio/fio/trim.h
/home/ysjin/Desktop/fio/fio/verify-state.h
/home/ysjin/Desktop/fio/fio/verify.c
/home/ysjin/Desktop/fio/fio/verify.h
/home/ysjin/Desktop/fio/fio/workqueue.c
/home/ysjin/Desktop/fio/fio/workqueue.h
/usr/include/aio.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/byteswap.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libaio.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/linux/falloc.h
/usr/include/linux/fs.h
/usr/include/linux/major.h
/usr/include/linux/mempolicy.h
/usr/include/linux/raw.h
/usr/include/linux/shm.h
/usr/include/linux/types.h
/usr/include/linux/unistd.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/mntent.h
/usr/include/mtd/mtd-user.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/numa.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/rados/librados.h
/usr/include/rbd/librbd.h
/usr/include/rdma/rdma_cma.h
/usr/include/sched.h
/usr/include/scsi/sg.h
/usr/include/semaphore.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
arch/arch.h
blktrace.h
blktrace_api.h
cairo_text_helpers.h
cgroup.h
client.h
compiler/compiler.h
crc/crc16.h
crc/crc32.h
crc/crc32c.h
crc/crc64.h
crc/crc7.h
crc/md5.h
crc/sha1.h
crc/sha256.h
crc/sha3.h
crc/sha512.h
crc/test.h
crc/xxhash.h
debug.h
diskutil.h
err.h
fifo.h
file.h
filehash.h
filelock.h
fio.h
fio_time.h
flist.h
flow.h
gclient.h
gcompat.h
gerror.h
gettime.h
gfio.h
ghelpers.h
goptions.h
graph.h
hash.h
helper_thread.h
helpers.h
idletime.h
io_ddir.h
io_u.h
io_u_queue.h
ioengines.h
iolog.h
json.h
lib/axmap.h
lib/bloom.h
lib/fls.h
lib/gauss.h
lib/getrusage.h
lib/hweight.h
lib/ieee754.h
lib/lfsr.h
lib/memalign.h
lib/memcpy.h
lib/mountcheck.h
lib/num2str.h
lib/output_buffer.h
lib/pattern.h
lib/pow2.h
lib/prio_tree.h
lib/rand.h
lib/rbtree.h
lib/seqlock.h
lib/types.h
lib/zipf.h
log.h
minmax.h
mutex.h
optgroup.h
options.h
os/os.h
oslib/getopt.h
oslib/linux-dev-lookup.h
oslib/strcasestr.h
parse.h
printing.h
profile.h
rate-submit.h
server.h
smalloc.h
stat.h
steadystate.h
td_error.h
thread_options.h
tickmarks.h
trim.h
verify-state.h
verify.h
workqueue.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/infiniband/sa.h
/usr/include/infiniband/verbs.h
/usr/include/libio.h
/usr/include/linux/errno.h
/usr/include/linux/ioctl.h
/usr/include/linux/ipc.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/mtd/mtd-abi.h
/usr/include/numacompat1.h
/usr/include/paths.h
/usr/include/rpc/netdb.h
/usr/include/stdc-predef.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/linux/stddef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
